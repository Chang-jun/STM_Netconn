
neconn.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000001ac  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00017ed8  080001b0  080001b0  000101b0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00003848  08018088  08018088  00028088  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0801b8d0  0801b8d0  0003008c  2**0
                  CONTENTS
  4 .ARM          00000008  0801b8d0  0801b8d0  0002b8d0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0801b8d8  0801b8d8  0003008c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0801b8d8  0801b8d8  0002b8d8  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0801b8dc  0801b8dc  0002b8dc  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000008c  20000000  0801b8e0  00030000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .ccmram       00000000  10000000  10000000  0003008c  2**0
                  CONTENTS
 10 .bss          0000fa14  2000008c  2000008c  0003008c  2**2
                  ALLOC
 11 ._user_heap_stack 00000600  2000faa0  2000faa0  0003008c  2**0
                  ALLOC
 12 .ARM.attributes 00000030  00000000  00000000  0003008c  2**0
                  CONTENTS, READONLY
 13 .comment      00000043  00000000  00000000  000300bc  2**0
                  CONTENTS, READONLY
 14 .debug_info   0002fdfa  00000000  00000000  000300ff  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_abbrev 00007b8d  00000000  00000000  0005fef9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_aranges 000023c8  00000000  00000000  00067a88  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_rnglists 00001c2f  00000000  00000000  00069e50  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_macro  0003561f  00000000  00000000  0006ba7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .debug_line   00037876  00000000  00000000  000a109e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 20 .debug_str    000ff38a  00000000  00000000  000d8914  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_frame  00009d14  00000000  00000000  001d7ca0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_line_str 00000062  00000000  00000000  001e19b4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001b0 <__do_global_dtors_aux>:
 80001b0:	b510      	push	{r4, lr}
 80001b2:	4c05      	ldr	r4, [pc, #20]	; (80001c8 <__do_global_dtors_aux+0x18>)
 80001b4:	7823      	ldrb	r3, [r4, #0]
 80001b6:	b933      	cbnz	r3, 80001c6 <__do_global_dtors_aux+0x16>
 80001b8:	4b04      	ldr	r3, [pc, #16]	; (80001cc <__do_global_dtors_aux+0x1c>)
 80001ba:	b113      	cbz	r3, 80001c2 <__do_global_dtors_aux+0x12>
 80001bc:	4804      	ldr	r0, [pc, #16]	; (80001d0 <__do_global_dtors_aux+0x20>)
 80001be:	f3af 8000 	nop.w
 80001c2:	2301      	movs	r3, #1
 80001c4:	7023      	strb	r3, [r4, #0]
 80001c6:	bd10      	pop	{r4, pc}
 80001c8:	2000008c 	.word	0x2000008c
 80001cc:	00000000 	.word	0x00000000
 80001d0:	08018070 	.word	0x08018070

080001d4 <frame_dummy>:
 80001d4:	b508      	push	{r3, lr}
 80001d6:	4b03      	ldr	r3, [pc, #12]	; (80001e4 <frame_dummy+0x10>)
 80001d8:	b11b      	cbz	r3, 80001e2 <frame_dummy+0xe>
 80001da:	4903      	ldr	r1, [pc, #12]	; (80001e8 <frame_dummy+0x14>)
 80001dc:	4803      	ldr	r0, [pc, #12]	; (80001ec <frame_dummy+0x18>)
 80001de:	f3af 8000 	nop.w
 80001e2:	bd08      	pop	{r3, pc}
 80001e4:	00000000 	.word	0x00000000
 80001e8:	20000090 	.word	0x20000090
 80001ec:	08018070 	.word	0x08018070

080001f0 <strcmp>:
 80001f0:	f810 2b01 	ldrb.w	r2, [r0], #1
 80001f4:	f811 3b01 	ldrb.w	r3, [r1], #1
 80001f8:	2a01      	cmp	r2, #1
 80001fa:	bf28      	it	cs
 80001fc:	429a      	cmpcs	r2, r3
 80001fe:	d0f7      	beq.n	80001f0 <strcmp>
 8000200:	1ad0      	subs	r0, r2, r3
 8000202:	4770      	bx	lr

08000204 <strlen>:
 8000204:	4603      	mov	r3, r0
 8000206:	f813 2b01 	ldrb.w	r2, [r3], #1
 800020a:	2a00      	cmp	r2, #0
 800020c:	d1fb      	bne.n	8000206 <strlen+0x2>
 800020e:	1a18      	subs	r0, r3, r0
 8000210:	3801      	subs	r0, #1
 8000212:	4770      	bx	lr
	...

08000220 <memchr>:
 8000220:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 8000224:	2a10      	cmp	r2, #16
 8000226:	db2b      	blt.n	8000280 <memchr+0x60>
 8000228:	f010 0f07 	tst.w	r0, #7
 800022c:	d008      	beq.n	8000240 <memchr+0x20>
 800022e:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000232:	3a01      	subs	r2, #1
 8000234:	428b      	cmp	r3, r1
 8000236:	d02d      	beq.n	8000294 <memchr+0x74>
 8000238:	f010 0f07 	tst.w	r0, #7
 800023c:	b342      	cbz	r2, 8000290 <memchr+0x70>
 800023e:	d1f6      	bne.n	800022e <memchr+0xe>
 8000240:	b4f0      	push	{r4, r5, r6, r7}
 8000242:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000246:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800024a:	f022 0407 	bic.w	r4, r2, #7
 800024e:	f07f 0700 	mvns.w	r7, #0
 8000252:	2300      	movs	r3, #0
 8000254:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000258:	3c08      	subs	r4, #8
 800025a:	ea85 0501 	eor.w	r5, r5, r1
 800025e:	ea86 0601 	eor.w	r6, r6, r1
 8000262:	fa85 f547 	uadd8	r5, r5, r7
 8000266:	faa3 f587 	sel	r5, r3, r7
 800026a:	fa86 f647 	uadd8	r6, r6, r7
 800026e:	faa5 f687 	sel	r6, r5, r7
 8000272:	b98e      	cbnz	r6, 8000298 <memchr+0x78>
 8000274:	d1ee      	bne.n	8000254 <memchr+0x34>
 8000276:	bcf0      	pop	{r4, r5, r6, r7}
 8000278:	f001 01ff 	and.w	r1, r1, #255	; 0xff
 800027c:	f002 0207 	and.w	r2, r2, #7
 8000280:	b132      	cbz	r2, 8000290 <memchr+0x70>
 8000282:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000286:	3a01      	subs	r2, #1
 8000288:	ea83 0301 	eor.w	r3, r3, r1
 800028c:	b113      	cbz	r3, 8000294 <memchr+0x74>
 800028e:	d1f8      	bne.n	8000282 <memchr+0x62>
 8000290:	2000      	movs	r0, #0
 8000292:	4770      	bx	lr
 8000294:	3801      	subs	r0, #1
 8000296:	4770      	bx	lr
 8000298:	2d00      	cmp	r5, #0
 800029a:	bf06      	itte	eq
 800029c:	4635      	moveq	r5, r6
 800029e:	3803      	subeq	r0, #3
 80002a0:	3807      	subne	r0, #7
 80002a2:	f015 0f01 	tst.w	r5, #1
 80002a6:	d107      	bne.n	80002b8 <memchr+0x98>
 80002a8:	3001      	adds	r0, #1
 80002aa:	f415 7f80 	tst.w	r5, #256	; 0x100
 80002ae:	bf02      	ittt	eq
 80002b0:	3001      	addeq	r0, #1
 80002b2:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
 80002b6:	3001      	addeq	r0, #1
 80002b8:	bcf0      	pop	{r4, r5, r6, r7}
 80002ba:	3801      	subs	r0, #1
 80002bc:	4770      	bx	lr
 80002be:	bf00      	nop

080002c0 <__aeabi_uldivmod>:
 80002c0:	b953      	cbnz	r3, 80002d8 <__aeabi_uldivmod+0x18>
 80002c2:	b94a      	cbnz	r2, 80002d8 <__aeabi_uldivmod+0x18>
 80002c4:	2900      	cmp	r1, #0
 80002c6:	bf08      	it	eq
 80002c8:	2800      	cmpeq	r0, #0
 80002ca:	bf1c      	itt	ne
 80002cc:	f04f 31ff 	movne.w	r1, #4294967295
 80002d0:	f04f 30ff 	movne.w	r0, #4294967295
 80002d4:	f000 b970 	b.w	80005b8 <__aeabi_idiv0>
 80002d8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002dc:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002e0:	f000 f806 	bl	80002f0 <__udivmoddi4>
 80002e4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002e8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002ec:	b004      	add	sp, #16
 80002ee:	4770      	bx	lr

080002f0 <__udivmoddi4>:
 80002f0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002f4:	9e08      	ldr	r6, [sp, #32]
 80002f6:	460d      	mov	r5, r1
 80002f8:	4604      	mov	r4, r0
 80002fa:	460f      	mov	r7, r1
 80002fc:	2b00      	cmp	r3, #0
 80002fe:	d14a      	bne.n	8000396 <__udivmoddi4+0xa6>
 8000300:	428a      	cmp	r2, r1
 8000302:	4694      	mov	ip, r2
 8000304:	d965      	bls.n	80003d2 <__udivmoddi4+0xe2>
 8000306:	fab2 f382 	clz	r3, r2
 800030a:	b143      	cbz	r3, 800031e <__udivmoddi4+0x2e>
 800030c:	fa02 fc03 	lsl.w	ip, r2, r3
 8000310:	f1c3 0220 	rsb	r2, r3, #32
 8000314:	409f      	lsls	r7, r3
 8000316:	fa20 f202 	lsr.w	r2, r0, r2
 800031a:	4317      	orrs	r7, r2
 800031c:	409c      	lsls	r4, r3
 800031e:	ea4f 4e1c 	mov.w	lr, ip, lsr #16
 8000322:	fa1f f58c 	uxth.w	r5, ip
 8000326:	fbb7 f1fe 	udiv	r1, r7, lr
 800032a:	0c22      	lsrs	r2, r4, #16
 800032c:	fb0e 7711 	mls	r7, lr, r1, r7
 8000330:	ea42 4207 	orr.w	r2, r2, r7, lsl #16
 8000334:	fb01 f005 	mul.w	r0, r1, r5
 8000338:	4290      	cmp	r0, r2
 800033a:	d90a      	bls.n	8000352 <__udivmoddi4+0x62>
 800033c:	eb1c 0202 	adds.w	r2, ip, r2
 8000340:	f101 37ff 	add.w	r7, r1, #4294967295
 8000344:	f080 811c 	bcs.w	8000580 <__udivmoddi4+0x290>
 8000348:	4290      	cmp	r0, r2
 800034a:	f240 8119 	bls.w	8000580 <__udivmoddi4+0x290>
 800034e:	3902      	subs	r1, #2
 8000350:	4462      	add	r2, ip
 8000352:	1a12      	subs	r2, r2, r0
 8000354:	b2a4      	uxth	r4, r4
 8000356:	fbb2 f0fe 	udiv	r0, r2, lr
 800035a:	fb0e 2210 	mls	r2, lr, r0, r2
 800035e:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000362:	fb00 f505 	mul.w	r5, r0, r5
 8000366:	42a5      	cmp	r5, r4
 8000368:	d90a      	bls.n	8000380 <__udivmoddi4+0x90>
 800036a:	eb1c 0404 	adds.w	r4, ip, r4
 800036e:	f100 32ff 	add.w	r2, r0, #4294967295
 8000372:	f080 8107 	bcs.w	8000584 <__udivmoddi4+0x294>
 8000376:	42a5      	cmp	r5, r4
 8000378:	f240 8104 	bls.w	8000584 <__udivmoddi4+0x294>
 800037c:	4464      	add	r4, ip
 800037e:	3802      	subs	r0, #2
 8000380:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000384:	1b64      	subs	r4, r4, r5
 8000386:	2100      	movs	r1, #0
 8000388:	b11e      	cbz	r6, 8000392 <__udivmoddi4+0xa2>
 800038a:	40dc      	lsrs	r4, r3
 800038c:	2300      	movs	r3, #0
 800038e:	e9c6 4300 	strd	r4, r3, [r6]
 8000392:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000396:	428b      	cmp	r3, r1
 8000398:	d908      	bls.n	80003ac <__udivmoddi4+0xbc>
 800039a:	2e00      	cmp	r6, #0
 800039c:	f000 80ed 	beq.w	800057a <__udivmoddi4+0x28a>
 80003a0:	2100      	movs	r1, #0
 80003a2:	e9c6 0500 	strd	r0, r5, [r6]
 80003a6:	4608      	mov	r0, r1
 80003a8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80003ac:	fab3 f183 	clz	r1, r3
 80003b0:	2900      	cmp	r1, #0
 80003b2:	d149      	bne.n	8000448 <__udivmoddi4+0x158>
 80003b4:	42ab      	cmp	r3, r5
 80003b6:	d302      	bcc.n	80003be <__udivmoddi4+0xce>
 80003b8:	4282      	cmp	r2, r0
 80003ba:	f200 80f8 	bhi.w	80005ae <__udivmoddi4+0x2be>
 80003be:	1a84      	subs	r4, r0, r2
 80003c0:	eb65 0203 	sbc.w	r2, r5, r3
 80003c4:	2001      	movs	r0, #1
 80003c6:	4617      	mov	r7, r2
 80003c8:	2e00      	cmp	r6, #0
 80003ca:	d0e2      	beq.n	8000392 <__udivmoddi4+0xa2>
 80003cc:	e9c6 4700 	strd	r4, r7, [r6]
 80003d0:	e7df      	b.n	8000392 <__udivmoddi4+0xa2>
 80003d2:	b902      	cbnz	r2, 80003d6 <__udivmoddi4+0xe6>
 80003d4:	deff      	udf	#255	; 0xff
 80003d6:	fab2 f382 	clz	r3, r2
 80003da:	2b00      	cmp	r3, #0
 80003dc:	f040 8090 	bne.w	8000500 <__udivmoddi4+0x210>
 80003e0:	1a8a      	subs	r2, r1, r2
 80003e2:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80003e6:	fa1f fe8c 	uxth.w	lr, ip
 80003ea:	2101      	movs	r1, #1
 80003ec:	fbb2 f5f7 	udiv	r5, r2, r7
 80003f0:	fb07 2015 	mls	r0, r7, r5, r2
 80003f4:	0c22      	lsrs	r2, r4, #16
 80003f6:	ea42 4200 	orr.w	r2, r2, r0, lsl #16
 80003fa:	fb0e f005 	mul.w	r0, lr, r5
 80003fe:	4290      	cmp	r0, r2
 8000400:	d908      	bls.n	8000414 <__udivmoddi4+0x124>
 8000402:	eb1c 0202 	adds.w	r2, ip, r2
 8000406:	f105 38ff 	add.w	r8, r5, #4294967295
 800040a:	d202      	bcs.n	8000412 <__udivmoddi4+0x122>
 800040c:	4290      	cmp	r0, r2
 800040e:	f200 80cb 	bhi.w	80005a8 <__udivmoddi4+0x2b8>
 8000412:	4645      	mov	r5, r8
 8000414:	1a12      	subs	r2, r2, r0
 8000416:	b2a4      	uxth	r4, r4
 8000418:	fbb2 f0f7 	udiv	r0, r2, r7
 800041c:	fb07 2210 	mls	r2, r7, r0, r2
 8000420:	ea44 4402 	orr.w	r4, r4, r2, lsl #16
 8000424:	fb0e fe00 	mul.w	lr, lr, r0
 8000428:	45a6      	cmp	lr, r4
 800042a:	d908      	bls.n	800043e <__udivmoddi4+0x14e>
 800042c:	eb1c 0404 	adds.w	r4, ip, r4
 8000430:	f100 32ff 	add.w	r2, r0, #4294967295
 8000434:	d202      	bcs.n	800043c <__udivmoddi4+0x14c>
 8000436:	45a6      	cmp	lr, r4
 8000438:	f200 80bb 	bhi.w	80005b2 <__udivmoddi4+0x2c2>
 800043c:	4610      	mov	r0, r2
 800043e:	eba4 040e 	sub.w	r4, r4, lr
 8000442:	ea40 4005 	orr.w	r0, r0, r5, lsl #16
 8000446:	e79f      	b.n	8000388 <__udivmoddi4+0x98>
 8000448:	f1c1 0720 	rsb	r7, r1, #32
 800044c:	408b      	lsls	r3, r1
 800044e:	fa22 fc07 	lsr.w	ip, r2, r7
 8000452:	ea4c 0c03 	orr.w	ip, ip, r3
 8000456:	fa05 f401 	lsl.w	r4, r5, r1
 800045a:	fa20 f307 	lsr.w	r3, r0, r7
 800045e:	40fd      	lsrs	r5, r7
 8000460:	ea4f 491c 	mov.w	r9, ip, lsr #16
 8000464:	4323      	orrs	r3, r4
 8000466:	fbb5 f8f9 	udiv	r8, r5, r9
 800046a:	fa1f fe8c 	uxth.w	lr, ip
 800046e:	fb09 5518 	mls	r5, r9, r8, r5
 8000472:	0c1c      	lsrs	r4, r3, #16
 8000474:	ea44 4405 	orr.w	r4, r4, r5, lsl #16
 8000478:	fb08 f50e 	mul.w	r5, r8, lr
 800047c:	42a5      	cmp	r5, r4
 800047e:	fa02 f201 	lsl.w	r2, r2, r1
 8000482:	fa00 f001 	lsl.w	r0, r0, r1
 8000486:	d90b      	bls.n	80004a0 <__udivmoddi4+0x1b0>
 8000488:	eb1c 0404 	adds.w	r4, ip, r4
 800048c:	f108 3aff 	add.w	sl, r8, #4294967295
 8000490:	f080 8088 	bcs.w	80005a4 <__udivmoddi4+0x2b4>
 8000494:	42a5      	cmp	r5, r4
 8000496:	f240 8085 	bls.w	80005a4 <__udivmoddi4+0x2b4>
 800049a:	f1a8 0802 	sub.w	r8, r8, #2
 800049e:	4464      	add	r4, ip
 80004a0:	1b64      	subs	r4, r4, r5
 80004a2:	b29d      	uxth	r5, r3
 80004a4:	fbb4 f3f9 	udiv	r3, r4, r9
 80004a8:	fb09 4413 	mls	r4, r9, r3, r4
 80004ac:	ea45 4404 	orr.w	r4, r5, r4, lsl #16
 80004b0:	fb03 fe0e 	mul.w	lr, r3, lr
 80004b4:	45a6      	cmp	lr, r4
 80004b6:	d908      	bls.n	80004ca <__udivmoddi4+0x1da>
 80004b8:	eb1c 0404 	adds.w	r4, ip, r4
 80004bc:	f103 35ff 	add.w	r5, r3, #4294967295
 80004c0:	d26c      	bcs.n	800059c <__udivmoddi4+0x2ac>
 80004c2:	45a6      	cmp	lr, r4
 80004c4:	d96a      	bls.n	800059c <__udivmoddi4+0x2ac>
 80004c6:	3b02      	subs	r3, #2
 80004c8:	4464      	add	r4, ip
 80004ca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 80004ce:	fba3 9502 	umull	r9, r5, r3, r2
 80004d2:	eba4 040e 	sub.w	r4, r4, lr
 80004d6:	42ac      	cmp	r4, r5
 80004d8:	46c8      	mov	r8, r9
 80004da:	46ae      	mov	lr, r5
 80004dc:	d356      	bcc.n	800058c <__udivmoddi4+0x29c>
 80004de:	d053      	beq.n	8000588 <__udivmoddi4+0x298>
 80004e0:	b156      	cbz	r6, 80004f8 <__udivmoddi4+0x208>
 80004e2:	ebb0 0208 	subs.w	r2, r0, r8
 80004e6:	eb64 040e 	sbc.w	r4, r4, lr
 80004ea:	fa04 f707 	lsl.w	r7, r4, r7
 80004ee:	40ca      	lsrs	r2, r1
 80004f0:	40cc      	lsrs	r4, r1
 80004f2:	4317      	orrs	r7, r2
 80004f4:	e9c6 7400 	strd	r7, r4, [r6]
 80004f8:	4618      	mov	r0, r3
 80004fa:	2100      	movs	r1, #0
 80004fc:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000500:	f1c3 0120 	rsb	r1, r3, #32
 8000504:	fa02 fc03 	lsl.w	ip, r2, r3
 8000508:	fa20 f201 	lsr.w	r2, r0, r1
 800050c:	fa25 f101 	lsr.w	r1, r5, r1
 8000510:	409d      	lsls	r5, r3
 8000512:	432a      	orrs	r2, r5
 8000514:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000518:	fa1f fe8c 	uxth.w	lr, ip
 800051c:	fbb1 f0f7 	udiv	r0, r1, r7
 8000520:	fb07 1510 	mls	r5, r7, r0, r1
 8000524:	0c11      	lsrs	r1, r2, #16
 8000526:	ea41 4105 	orr.w	r1, r1, r5, lsl #16
 800052a:	fb00 f50e 	mul.w	r5, r0, lr
 800052e:	428d      	cmp	r5, r1
 8000530:	fa04 f403 	lsl.w	r4, r4, r3
 8000534:	d908      	bls.n	8000548 <__udivmoddi4+0x258>
 8000536:	eb1c 0101 	adds.w	r1, ip, r1
 800053a:	f100 38ff 	add.w	r8, r0, #4294967295
 800053e:	d22f      	bcs.n	80005a0 <__udivmoddi4+0x2b0>
 8000540:	428d      	cmp	r5, r1
 8000542:	d92d      	bls.n	80005a0 <__udivmoddi4+0x2b0>
 8000544:	3802      	subs	r0, #2
 8000546:	4461      	add	r1, ip
 8000548:	1b49      	subs	r1, r1, r5
 800054a:	b292      	uxth	r2, r2
 800054c:	fbb1 f5f7 	udiv	r5, r1, r7
 8000550:	fb07 1115 	mls	r1, r7, r5, r1
 8000554:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000558:	fb05 f10e 	mul.w	r1, r5, lr
 800055c:	4291      	cmp	r1, r2
 800055e:	d908      	bls.n	8000572 <__udivmoddi4+0x282>
 8000560:	eb1c 0202 	adds.w	r2, ip, r2
 8000564:	f105 38ff 	add.w	r8, r5, #4294967295
 8000568:	d216      	bcs.n	8000598 <__udivmoddi4+0x2a8>
 800056a:	4291      	cmp	r1, r2
 800056c:	d914      	bls.n	8000598 <__udivmoddi4+0x2a8>
 800056e:	3d02      	subs	r5, #2
 8000570:	4462      	add	r2, ip
 8000572:	1a52      	subs	r2, r2, r1
 8000574:	ea45 4100 	orr.w	r1, r5, r0, lsl #16
 8000578:	e738      	b.n	80003ec <__udivmoddi4+0xfc>
 800057a:	4631      	mov	r1, r6
 800057c:	4630      	mov	r0, r6
 800057e:	e708      	b.n	8000392 <__udivmoddi4+0xa2>
 8000580:	4639      	mov	r1, r7
 8000582:	e6e6      	b.n	8000352 <__udivmoddi4+0x62>
 8000584:	4610      	mov	r0, r2
 8000586:	e6fb      	b.n	8000380 <__udivmoddi4+0x90>
 8000588:	4548      	cmp	r0, r9
 800058a:	d2a9      	bcs.n	80004e0 <__udivmoddi4+0x1f0>
 800058c:	ebb9 0802 	subs.w	r8, r9, r2
 8000590:	eb65 0e0c 	sbc.w	lr, r5, ip
 8000594:	3b01      	subs	r3, #1
 8000596:	e7a3      	b.n	80004e0 <__udivmoddi4+0x1f0>
 8000598:	4645      	mov	r5, r8
 800059a:	e7ea      	b.n	8000572 <__udivmoddi4+0x282>
 800059c:	462b      	mov	r3, r5
 800059e:	e794      	b.n	80004ca <__udivmoddi4+0x1da>
 80005a0:	4640      	mov	r0, r8
 80005a2:	e7d1      	b.n	8000548 <__udivmoddi4+0x258>
 80005a4:	46d0      	mov	r8, sl
 80005a6:	e77b      	b.n	80004a0 <__udivmoddi4+0x1b0>
 80005a8:	3d02      	subs	r5, #2
 80005aa:	4462      	add	r2, ip
 80005ac:	e732      	b.n	8000414 <__udivmoddi4+0x124>
 80005ae:	4608      	mov	r0, r1
 80005b0:	e70a      	b.n	80003c8 <__udivmoddi4+0xd8>
 80005b2:	4464      	add	r4, ip
 80005b4:	3802      	subs	r0, #2
 80005b6:	e742      	b.n	800043e <__udivmoddi4+0x14e>

080005b8 <__aeabi_idiv0>:
 80005b8:	4770      	bx	lr
 80005ba:	bf00      	nop

080005bc <vApplicationStackOverflowHook>:
/* Hook prototypes */
void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName);

/* USER CODE BEGIN 4 */
__weak void vApplicationStackOverflowHook(xTaskHandle xTask, signed char *pcTaskName)
{
 80005bc:	b480      	push	{r7}
 80005be:	b083      	sub	sp, #12
 80005c0:	af00      	add	r7, sp, #0
 80005c2:	6078      	str	r0, [r7, #4]
 80005c4:	6039      	str	r1, [r7, #0]
   /* Run time stack overflow checking is performed if
   configCHECK_FOR_STACK_OVERFLOW is defined to 1 or 2. This hook function is
   called if a stack overflow is detected. */
}
 80005c6:	bf00      	nop
 80005c8:	370c      	adds	r7, #12
 80005ca:	46bd      	mov	sp, r7
 80005cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80005d0:	4770      	bx	lr
	...

080005d4 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80005d4:	b580      	push	{r7, lr}
 80005d6:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80005d8:	f001 f81e 	bl	8001618 <HAL_Init>

  /* USER CODE BEGIN Init */
  LED_OnOff(LED_ALL, 500);
 80005dc:	f44f 71fa 	mov.w	r1, #500	; 0x1f4
 80005e0:	20ff      	movs	r0, #255	; 0xff
 80005e2:	f000 fa1d 	bl	8000a20 <LED_OnOff>
  HAL_TIM_Base_Start(&htim4);
 80005e6:	4817      	ldr	r0, [pc, #92]	; (8000644 <main+0x70>)
 80005e8:	f003 faae 	bl	8003b48 <HAL_TIM_Base_Start>


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80005ec:	f000 f838 	bl	8000660 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80005f0:	f000 f94a 	bl	8000888 <MX_GPIO_Init>
  MX_TIM4_Init();
 80005f4:	f000 f8a4 	bl	8000740 <MX_TIM4_Init>
  /* USER CODE BEGIN 2 */
  //HAL_TIM_Base_Start(&htim4);
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1);
  //HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2);
  //MOTOR_RIGHT
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_1); // PD12
 80005f8:	2100      	movs	r1, #0
 80005fa:	4812      	ldr	r0, [pc, #72]	; (8000644 <main+0x70>)
 80005fc:	f003 fbd6 	bl	8003dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_2); // PD13
 8000600:	2104      	movs	r1, #4
 8000602:	4810      	ldr	r0, [pc, #64]	; (8000644 <main+0x70>)
 8000604:	f003 fbd2 	bl	8003dac <HAL_TIM_PWM_Start>

  //MOTOR_LEFT
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_3); //PD14
 8000608:	2108      	movs	r1, #8
 800060a:	480e      	ldr	r0, [pc, #56]	; (8000644 <main+0x70>)
 800060c:	f003 fbce 	bl	8003dac <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(&htim4, TIM_CHANNEL_4); //PD15
 8000610:	210c      	movs	r1, #12
 8000612:	480c      	ldr	r0, [pc, #48]	; (8000644 <main+0x70>)
 8000614:	f003 fbca 	bl	8003dac <HAL_TIM_PWM_Start>
  /* USER CODE END 2 */

  /* Init scheduler */
  osKernelInitialize();
 8000618:	f005 f94a 	bl	80058b0 <osKernelInitialize>
  /* Create the thread(s) */
  /* creation of defaultTask */


  /* USER CODE BEGIN RTOS_THREADS */
  tcpTaskHandle = osThreadNew(StartTcpTask, NULL, &tcpTask_attributes);
 800061c:	4a0a      	ldr	r2, [pc, #40]	; (8000648 <main+0x74>)
 800061e:	2100      	movs	r1, #0
 8000620:	480a      	ldr	r0, [pc, #40]	; (800064c <main+0x78>)
 8000622:	f005 f9a4 	bl	800596e <osThreadNew>
 8000626:	4603      	mov	r3, r0
 8000628:	4a09      	ldr	r2, [pc, #36]	; (8000650 <main+0x7c>)
 800062a:	6013      	str	r3, [r2, #0]
  motorTaskHandle = osThreadNew(StartMotorTask, NULL, &motorTask_attributes);
 800062c:	4a09      	ldr	r2, [pc, #36]	; (8000654 <main+0x80>)
 800062e:	2100      	movs	r1, #0
 8000630:	4809      	ldr	r0, [pc, #36]	; (8000658 <main+0x84>)
 8000632:	f005 f99c 	bl	800596e <osThreadNew>
 8000636:	4603      	mov	r3, r0
 8000638:	4a08      	ldr	r2, [pc, #32]	; (800065c <main+0x88>)
 800063a:	6013      	str	r3, [r2, #0]
  /* USER CODE BEGIN RTOS_EVENTS */
  /* add events, ... */
  /* USER CODE END RTOS_EVENTS */

  /* Start scheduler */
  osKernelStart();
 800063c:	f005 f95c 	bl	80058f8 <osKernelStart>

  /* We should never get here as control is now taken by the scheduler */
  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
 8000640:	e7fe      	b.n	8000640 <main+0x6c>
 8000642:	bf00      	nop
 8000644:	200000a8 	.word	0x200000a8
 8000648:	0801b660 	.word	0x0801b660
 800064c:	08000b19 	.word	0x08000b19
 8000650:	200000f0 	.word	0x200000f0
 8000654:	0801b684 	.word	0x0801b684
 8000658:	08000a7d 	.word	0x08000a7d
 800065c:	200000f4 	.word	0x200000f4

08000660 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8000660:	b580      	push	{r7, lr}
 8000662:	b094      	sub	sp, #80	; 0x50
 8000664:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8000666:	f107 0320 	add.w	r3, r7, #32
 800066a:	2230      	movs	r2, #48	; 0x30
 800066c:	2100      	movs	r1, #0
 800066e:	4618      	mov	r0, r3
 8000670:	f016 fc5d 	bl	8016f2e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8000674:	f107 030c 	add.w	r3, r7, #12
 8000678:	2200      	movs	r2, #0
 800067a:	601a      	str	r2, [r3, #0]
 800067c:	605a      	str	r2, [r3, #4]
 800067e:	609a      	str	r2, [r3, #8]
 8000680:	60da      	str	r2, [r3, #12]
 8000682:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8000684:	2300      	movs	r3, #0
 8000686:	60bb      	str	r3, [r7, #8]
 8000688:	4b2b      	ldr	r3, [pc, #172]	; (8000738 <SystemClock_Config+0xd8>)
 800068a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800068c:	4a2a      	ldr	r2, [pc, #168]	; (8000738 <SystemClock_Config+0xd8>)
 800068e:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000692:	6413      	str	r3, [r2, #64]	; 0x40
 8000694:	4b28      	ldr	r3, [pc, #160]	; (8000738 <SystemClock_Config+0xd8>)
 8000696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000698:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800069c:	60bb      	str	r3, [r7, #8]
 800069e:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006a0:	2300      	movs	r3, #0
 80006a2:	607b      	str	r3, [r7, #4]
 80006a4:	4b25      	ldr	r3, [pc, #148]	; (800073c <SystemClock_Config+0xdc>)
 80006a6:	681b      	ldr	r3, [r3, #0]
 80006a8:	4a24      	ldr	r2, [pc, #144]	; (800073c <SystemClock_Config+0xdc>)
 80006aa:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80006ae:	6013      	str	r3, [r2, #0]
 80006b0:	4b22      	ldr	r3, [pc, #136]	; (800073c <SystemClock_Config+0xdc>)
 80006b2:	681b      	ldr	r3, [r3, #0]
 80006b4:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80006b8:	607b      	str	r3, [r7, #4]
 80006ba:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80006bc:	2302      	movs	r3, #2
 80006be:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80006c0:	2301      	movs	r3, #1
 80006c2:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80006c4:	2310      	movs	r3, #16
 80006c6:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80006c8:	2302      	movs	r3, #2
 80006ca:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80006cc:	2300      	movs	r3, #0
 80006ce:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80006d0:	2308      	movs	r3, #8
 80006d2:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 180;
 80006d4:	23b4      	movs	r3, #180	; 0xb4
 80006d6:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80006d8:	2302      	movs	r3, #2
 80006da:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80006dc:	2304      	movs	r3, #4
 80006de:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80006e0:	f107 0320 	add.w	r3, r7, #32
 80006e4:	4618      	mov	r0, r3
 80006e6:	f002 fd69 	bl	80031bc <HAL_RCC_OscConfig>
 80006ea:	4603      	mov	r3, r0
 80006ec:	2b00      	cmp	r3, #0
 80006ee:	d001      	beq.n	80006f4 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80006f0:	f000 fa30 	bl	8000b54 <Error_Handler>
  }

  /** Activate the Over-Drive mode
  */
  if (HAL_PWREx_EnableOverDrive() != HAL_OK)
 80006f4:	f002 fd12 	bl	800311c <HAL_PWREx_EnableOverDrive>
 80006f8:	4603      	mov	r3, r0
 80006fa:	2b00      	cmp	r3, #0
 80006fc:	d001      	beq.n	8000702 <SystemClock_Config+0xa2>
  {
    Error_Handler();
 80006fe:	f000 fa29 	bl	8000b54 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000702:	230f      	movs	r3, #15
 8000704:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8000706:	2302      	movs	r3, #2
 8000708:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 800070a:	2300      	movs	r3, #0
 800070c:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800070e:	f44f 53a0 	mov.w	r3, #5120	; 0x1400
 8000712:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 8000714:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8000718:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_5) != HAL_OK)
 800071a:	f107 030c 	add.w	r3, r7, #12
 800071e:	2105      	movs	r1, #5
 8000720:	4618      	mov	r0, r3
 8000722:	f002 ffc3 	bl	80036ac <HAL_RCC_ClockConfig>
 8000726:	4603      	mov	r3, r0
 8000728:	2b00      	cmp	r3, #0
 800072a:	d001      	beq.n	8000730 <SystemClock_Config+0xd0>
  {
    Error_Handler();
 800072c:	f000 fa12 	bl	8000b54 <Error_Handler>
  }
}
 8000730:	bf00      	nop
 8000732:	3750      	adds	r7, #80	; 0x50
 8000734:	46bd      	mov	sp, r7
 8000736:	bd80      	pop	{r7, pc}
 8000738:	40023800 	.word	0x40023800
 800073c:	40007000 	.word	0x40007000

08000740 <MX_TIM4_Init>:
  * @brief TIM4 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM4_Init(void)
{
 8000740:	b580      	push	{r7, lr}
 8000742:	b08e      	sub	sp, #56	; 0x38
 8000744:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM4_Init 0 */
  TIM4->CCR2 = 10000;
 8000746:	4b4e      	ldr	r3, [pc, #312]	; (8000880 <MX_TIM4_Init+0x140>)
 8000748:	f242 7210 	movw	r2, #10000	; 0x2710
 800074c:	639a      	str	r2, [r3, #56]	; 0x38
  TIM4->CCR4 = 10000;
 800074e:	4b4c      	ldr	r3, [pc, #304]	; (8000880 <MX_TIM4_Init+0x140>)
 8000750:	f242 7210 	movw	r2, #10000	; 0x2710
 8000754:	641a      	str	r2, [r3, #64]	; 0x40
  /* USER CODE END TIM4_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8000756:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800075a:	2200      	movs	r2, #0
 800075c:	601a      	str	r2, [r3, #0]
 800075e:	605a      	str	r2, [r3, #4]
 8000760:	609a      	str	r2, [r3, #8]
 8000762:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8000764:	f107 0320 	add.w	r3, r7, #32
 8000768:	2200      	movs	r2, #0
 800076a:	601a      	str	r2, [r3, #0]
 800076c:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 800076e:	1d3b      	adds	r3, r7, #4
 8000770:	2200      	movs	r2, #0
 8000772:	601a      	str	r2, [r3, #0]
 8000774:	605a      	str	r2, [r3, #4]
 8000776:	609a      	str	r2, [r3, #8]
 8000778:	60da      	str	r2, [r3, #12]
 800077a:	611a      	str	r2, [r3, #16]
 800077c:	615a      	str	r2, [r3, #20]
 800077e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM4_Init 1 */

  /* USER CODE END TIM4_Init 1 */
  htim4.Instance = TIM4;
 8000780:	4b40      	ldr	r3, [pc, #256]	; (8000884 <MX_TIM4_Init+0x144>)
 8000782:	4a3f      	ldr	r2, [pc, #252]	; (8000880 <MX_TIM4_Init+0x140>)
 8000784:	601a      	str	r2, [r3, #0]
  htim4.Init.Prescaler = 0;
 8000786:	4b3f      	ldr	r3, [pc, #252]	; (8000884 <MX_TIM4_Init+0x144>)
 8000788:	2200      	movs	r2, #0
 800078a:	605a      	str	r2, [r3, #4]
  htim4.Init.CounterMode = TIM_COUNTERMODE_UP;
 800078c:	4b3d      	ldr	r3, [pc, #244]	; (8000884 <MX_TIM4_Init+0x144>)
 800078e:	2200      	movs	r2, #0
 8000790:	609a      	str	r2, [r3, #8]
  htim4.Init.Period = 9999;
 8000792:	4b3c      	ldr	r3, [pc, #240]	; (8000884 <MX_TIM4_Init+0x144>)
 8000794:	f242 720f 	movw	r2, #9999	; 0x270f
 8000798:	60da      	str	r2, [r3, #12]
  htim4.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800079a:	4b3a      	ldr	r3, [pc, #232]	; (8000884 <MX_TIM4_Init+0x144>)
 800079c:	2200      	movs	r2, #0
 800079e:	611a      	str	r2, [r3, #16]
  htim4.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80007a0:	4b38      	ldr	r3, [pc, #224]	; (8000884 <MX_TIM4_Init+0x144>)
 80007a2:	2200      	movs	r2, #0
 80007a4:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim4) != HAL_OK)
 80007a6:	4837      	ldr	r0, [pc, #220]	; (8000884 <MX_TIM4_Init+0x144>)
 80007a8:	f003 f97e 	bl	8003aa8 <HAL_TIM_Base_Init>
 80007ac:	4603      	mov	r3, r0
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <MX_TIM4_Init+0x76>
  {
    Error_Handler();
 80007b2:	f000 f9cf 	bl	8000b54 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80007b6:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80007ba:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim4, &sClockSourceConfig) != HAL_OK)
 80007bc:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80007c0:	4619      	mov	r1, r3
 80007c2:	4830      	ldr	r0, [pc, #192]	; (8000884 <MX_TIM4_Init+0x144>)
 80007c4:	f003 fd84 	bl	80042d0 <HAL_TIM_ConfigClockSource>
 80007c8:	4603      	mov	r3, r0
 80007ca:	2b00      	cmp	r3, #0
 80007cc:	d001      	beq.n	80007d2 <MX_TIM4_Init+0x92>
  {
    Error_Handler();
 80007ce:	f000 f9c1 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim4) != HAL_OK)
 80007d2:	482c      	ldr	r0, [pc, #176]	; (8000884 <MX_TIM4_Init+0x144>)
 80007d4:	f003 fa90 	bl	8003cf8 <HAL_TIM_PWM_Init>
 80007d8:	4603      	mov	r3, r0
 80007da:	2b00      	cmp	r3, #0
 80007dc:	d001      	beq.n	80007e2 <MX_TIM4_Init+0xa2>
  {
    Error_Handler();
 80007de:	f000 f9b9 	bl	8000b54 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80007e2:	2300      	movs	r3, #0
 80007e4:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80007e6:	2300      	movs	r3, #0
 80007e8:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim4, &sMasterConfig) != HAL_OK)
 80007ea:	f107 0320 	add.w	r3, r7, #32
 80007ee:	4619      	mov	r1, r3
 80007f0:	4824      	ldr	r0, [pc, #144]	; (8000884 <MX_TIM4_Init+0x144>)
 80007f2:	f004 f96d 	bl	8004ad0 <HAL_TIMEx_MasterConfigSynchronization>
 80007f6:	4603      	mov	r3, r0
 80007f8:	2b00      	cmp	r3, #0
 80007fa:	d001      	beq.n	8000800 <MX_TIM4_Init+0xc0>
  {
    Error_Handler();
 80007fc:	f000 f9aa 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8000800:	2360      	movs	r3, #96	; 0x60
 8000802:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 29999;
 8000804:	f247 532f 	movw	r3, #29999	; 0x752f
 8000808:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800080a:	2300      	movs	r3, #0
 800080c:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800080e:	2300      	movs	r3, #0
 8000810:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8000812:	1d3b      	adds	r3, r7, #4
 8000814:	2200      	movs	r2, #0
 8000816:	4619      	mov	r1, r3
 8000818:	481a      	ldr	r0, [pc, #104]	; (8000884 <MX_TIM4_Init+0x144>)
 800081a:	f003 fc97 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800081e:	4603      	mov	r3, r0
 8000820:	2b00      	cmp	r3, #0
 8000822:	d001      	beq.n	8000828 <MX_TIM4_Init+0xe8>
  {
    Error_Handler();
 8000824:	f000 f996 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 8000828:	1d3b      	adds	r3, r7, #4
 800082a:	2204      	movs	r2, #4
 800082c:	4619      	mov	r1, r3
 800082e:	4815      	ldr	r0, [pc, #84]	; (8000884 <MX_TIM4_Init+0x144>)
 8000830:	f003 fc8c 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000834:	4603      	mov	r3, r0
 8000836:	2b00      	cmp	r3, #0
 8000838:	d001      	beq.n	800083e <MX_TIM4_Init+0xfe>
  {
    Error_Handler();
 800083a:	f000 f98b 	bl	8000b54 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800083e:	1d3b      	adds	r3, r7, #4
 8000840:	2208      	movs	r2, #8
 8000842:	4619      	mov	r1, r3
 8000844:	480f      	ldr	r0, [pc, #60]	; (8000884 <MX_TIM4_Init+0x144>)
 8000846:	f003 fc81 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 800084a:	4603      	mov	r3, r0
 800084c:	2b00      	cmp	r3, #0
 800084e:	d001      	beq.n	8000854 <MX_TIM4_Init+0x114>
  {
    Error_Handler();
 8000850:	f000 f980 	bl	8000b54 <Error_Handler>
  }
  sConfigOC.Pulse = 10000;
 8000854:	f242 7310 	movw	r3, #10000	; 0x2710
 8000858:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_PWM_ConfigChannel(&htim4, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800085a:	1d3b      	adds	r3, r7, #4
 800085c:	220c      	movs	r2, #12
 800085e:	4619      	mov	r1, r3
 8000860:	4808      	ldr	r0, [pc, #32]	; (8000884 <MX_TIM4_Init+0x144>)
 8000862:	f003 fc73 	bl	800414c <HAL_TIM_PWM_ConfigChannel>
 8000866:	4603      	mov	r3, r0
 8000868:	2b00      	cmp	r3, #0
 800086a:	d001      	beq.n	8000870 <MX_TIM4_Init+0x130>
  {
    Error_Handler();
 800086c:	f000 f972 	bl	8000b54 <Error_Handler>
  }
  /* USER CODE BEGIN TIM4_Init 2 */

  /* USER CODE END TIM4_Init 2 */
  HAL_TIM_MspPostInit(&htim4);
 8000870:	4804      	ldr	r0, [pc, #16]	; (8000884 <MX_TIM4_Init+0x144>)
 8000872:	f000 f9c9 	bl	8000c08 <HAL_TIM_MspPostInit>

}
 8000876:	bf00      	nop
 8000878:	3738      	adds	r7, #56	; 0x38
 800087a:	46bd      	mov	sp, r7
 800087c:	bd80      	pop	{r7, pc}
 800087e:	bf00      	nop
 8000880:	40000800 	.word	0x40000800
 8000884:	200000a8 	.word	0x200000a8

08000888 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8000888:	b580      	push	{r7, lr}
 800088a:	b08c      	sub	sp, #48	; 0x30
 800088c:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800088e:	f107 031c 	add.w	r3, r7, #28
 8000892:	2200      	movs	r2, #0
 8000894:	601a      	str	r2, [r3, #0]
 8000896:	605a      	str	r2, [r3, #4]
 8000898:	609a      	str	r2, [r3, #8]
 800089a:	60da      	str	r2, [r3, #12]
 800089c:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOE_CLK_ENABLE();
 800089e:	2300      	movs	r3, #0
 80008a0:	61bb      	str	r3, [r7, #24]
 80008a2:	4b5b      	ldr	r3, [pc, #364]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008a6:	4a5a      	ldr	r2, [pc, #360]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008a8:	f043 0310 	orr.w	r3, r3, #16
 80008ac:	6313      	str	r3, [r2, #48]	; 0x30
 80008ae:	4b58      	ldr	r3, [pc, #352]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008b0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008b2:	f003 0310 	and.w	r3, r3, #16
 80008b6:	61bb      	str	r3, [r7, #24]
 80008b8:	69bb      	ldr	r3, [r7, #24]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80008ba:	2300      	movs	r3, #0
 80008bc:	617b      	str	r3, [r7, #20]
 80008be:	4b54      	ldr	r3, [pc, #336]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008c2:	4a53      	ldr	r2, [pc, #332]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008c4:	f043 0304 	orr.w	r3, r3, #4
 80008c8:	6313      	str	r3, [r2, #48]	; 0x30
 80008ca:	4b51      	ldr	r3, [pc, #324]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ce:	f003 0304 	and.w	r3, r3, #4
 80008d2:	617b      	str	r3, [r7, #20]
 80008d4:	697b      	ldr	r3, [r7, #20]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80008d6:	2300      	movs	r3, #0
 80008d8:	613b      	str	r3, [r7, #16]
 80008da:	4b4d      	ldr	r3, [pc, #308]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008dc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008de:	4a4c      	ldr	r2, [pc, #304]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008e0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80008e4:	6313      	str	r3, [r2, #48]	; 0x30
 80008e6:	4b4a      	ldr	r3, [pc, #296]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008ea:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80008ee:	613b      	str	r3, [r7, #16]
 80008f0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80008f2:	2300      	movs	r3, #0
 80008f4:	60fb      	str	r3, [r7, #12]
 80008f6:	4b46      	ldr	r3, [pc, #280]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80008fa:	4a45      	ldr	r2, [pc, #276]	; (8000a10 <MX_GPIO_Init+0x188>)
 80008fc:	f043 0301 	orr.w	r3, r3, #1
 8000900:	6313      	str	r3, [r2, #48]	; 0x30
 8000902:	4b43      	ldr	r3, [pc, #268]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000904:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000906:	f003 0301 	and.w	r3, r3, #1
 800090a:	60fb      	str	r3, [r7, #12]
 800090c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOG_CLK_ENABLE();
 800090e:	2300      	movs	r3, #0
 8000910:	60bb      	str	r3, [r7, #8]
 8000912:	4b3f      	ldr	r3, [pc, #252]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000914:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000916:	4a3e      	ldr	r2, [pc, #248]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000918:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 800091c:	6313      	str	r3, [r2, #48]	; 0x30
 800091e:	4b3c      	ldr	r3, [pc, #240]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000920:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000922:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8000926:	60bb      	str	r3, [r7, #8]
 8000928:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800092a:	2300      	movs	r3, #0
 800092c:	607b      	str	r3, [r7, #4]
 800092e:	4b38      	ldr	r3, [pc, #224]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000930:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000932:	4a37      	ldr	r2, [pc, #220]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000934:	f043 0302 	orr.w	r3, r3, #2
 8000938:	6313      	str	r3, [r2, #48]	; 0x30
 800093a:	4b35      	ldr	r3, [pc, #212]	; (8000a10 <MX_GPIO_Init+0x188>)
 800093c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800093e:	f003 0302 	and.w	r3, r3, #2
 8000942:	607b      	str	r3, [r7, #4]
 8000944:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000946:	2300      	movs	r3, #0
 8000948:	603b      	str	r3, [r7, #0]
 800094a:	4b31      	ldr	r3, [pc, #196]	; (8000a10 <MX_GPIO_Init+0x188>)
 800094c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800094e:	4a30      	ldr	r2, [pc, #192]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000950:	f043 0308 	orr.w	r3, r3, #8
 8000954:	6313      	str	r3, [r2, #48]	; 0x30
 8000956:	4b2e      	ldr	r3, [pc, #184]	; (8000a10 <MX_GPIO_Init+0x188>)
 8000958:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800095a:	f003 0308 	and.w	r3, r3, #8
 800095e:	603b      	str	r3, [r7, #0]
 8000960:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET);
 8000962:	2200      	movs	r2, #0
 8000964:	2104      	movs	r1, #4
 8000966:	482b      	ldr	r0, [pc, #172]	; (8000a14 <MX_GPIO_Init+0x18c>)
 8000968:	f002 fb9a 	bl	80030a0 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 800096c:	2200      	movs	r2, #0
 800096e:	21ff      	movs	r1, #255	; 0xff
 8000970:	4829      	ldr	r0, [pc, #164]	; (8000a18 <MX_GPIO_Init+0x190>)
 8000972:	f002 fb95 	bl	80030a0 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7, GPIO_PIN_RESET);

  /*Configure GPIO pin : PE2 */
  GPIO_InitStruct.Pin = GPIO_PIN_2;
 8000976:	2304      	movs	r3, #4
 8000978:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800097a:	2301      	movs	r3, #1
 800097c:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 800097e:	2301      	movs	r3, #1
 8000980:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_MEDIUM;
 8000982:	2301      	movs	r3, #1
 8000984:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOE, &GPIO_InitStruct);
 8000986:	f107 031c 	add.w	r3, r7, #28
 800098a:	4619      	mov	r1, r3
 800098c:	4821      	ldr	r0, [pc, #132]	; (8000a14 <MX_GPIO_Init+0x18c>)
 800098e:	f002 f9db 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PG0 PG1 PG2 PG3 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3;
 8000992:	230f      	movs	r3, #15
 8000994:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8000996:	f44f 1304 	mov.w	r3, #2162688	; 0x210000
 800099a:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800099c:	2300      	movs	r3, #0
 800099e:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 80009a0:	f107 031c 	add.w	r3, r7, #28
 80009a4:	4619      	mov	r1, r3
 80009a6:	481d      	ldr	r0, [pc, #116]	; (8000a1c <MX_GPIO_Init+0x194>)
 80009a8:	f002 f9ce 	bl	8002d48 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD0 PD1 PD2 PD3
                           PD4 PD5 PD6 PD7 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 80009ac:	23ff      	movs	r3, #255	; 0xff
 80009ae:	61fb      	str	r3, [r7, #28]
                          |GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80009b0:	2301      	movs	r3, #1
 80009b2:	623b      	str	r3, [r7, #32]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80009b4:	2301      	movs	r3, #1
 80009b6:	627b      	str	r3, [r7, #36]	; 0x24
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 80009b8:	2302      	movs	r3, #2
 80009ba:	62bb      	str	r3, [r7, #40]	; 0x28
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 80009bc:	f107 031c 	add.w	r3, r7, #28
 80009c0:	4619      	mov	r1, r3
 80009c2:	4815      	ldr	r0, [pc, #84]	; (8000a18 <MX_GPIO_Init+0x190>)
 80009c4:	f002 f9c0 	bl	8002d48 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI0_IRQn, 5, 0);
 80009c8:	2200      	movs	r2, #0
 80009ca:	2105      	movs	r1, #5
 80009cc:	2006      	movs	r0, #6
 80009ce:	f000 ff41 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI0_IRQn);
 80009d2:	2006      	movs	r0, #6
 80009d4:	f000 ff5a 	bl	800188c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI1_IRQn, 5, 0);
 80009d8:	2200      	movs	r2, #0
 80009da:	2105      	movs	r1, #5
 80009dc:	2007      	movs	r0, #7
 80009de:	f000 ff39 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI1_IRQn);
 80009e2:	2007      	movs	r0, #7
 80009e4:	f000 ff52 	bl	800188c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI2_IRQn, 5, 0);
 80009e8:	2200      	movs	r2, #0
 80009ea:	2105      	movs	r1, #5
 80009ec:	2008      	movs	r0, #8
 80009ee:	f000 ff31 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI2_IRQn);
 80009f2:	2008      	movs	r0, #8
 80009f4:	f000 ff4a 	bl	800188c <HAL_NVIC_EnableIRQ>

  HAL_NVIC_SetPriority(EXTI3_IRQn, 5, 0);
 80009f8:	2200      	movs	r2, #0
 80009fa:	2105      	movs	r1, #5
 80009fc:	2009      	movs	r0, #9
 80009fe:	f000 ff29 	bl	8001854 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 8000a02:	2009      	movs	r0, #9
 8000a04:	f000 ff42 	bl	800188c <HAL_NVIC_EnableIRQ>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000a08:	bf00      	nop
 8000a0a:	3730      	adds	r7, #48	; 0x30
 8000a0c:	46bd      	mov	sp, r7
 8000a0e:	bd80      	pop	{r7, pc}
 8000a10:	40023800 	.word	0x40023800
 8000a14:	40021000 	.word	0x40021000
 8000a18:	40020c00 	.word	0x40020c00
 8000a1c:	40021800 	.word	0x40021800

08000a20 <LED_OnOff>:

/* USER CODE BEGIN 4 */
void LED_OnOff(int led, int interval)
{
 8000a20:	b580      	push	{r7, lr}
 8000a22:	b082      	sub	sp, #8
 8000a24:	af00      	add	r7, sp, #0
 8000a26:	6078      	str	r0, [r7, #4]
 8000a28:	6039      	str	r1, [r7, #0]
HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_SET );
 8000a2a:	687b      	ldr	r3, [r7, #4]
 8000a2c:	b29b      	uxth	r3, r3
 8000a2e:	2201      	movs	r2, #1
 8000a30:	4619      	mov	r1, r3
 8000a32:	4810      	ldr	r0, [pc, #64]	; (8000a74 <LED_OnOff+0x54>)
 8000a34:	f002 fb34 	bl	80030a0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_SET );
 8000a38:	687b      	ldr	r3, [r7, #4]
 8000a3a:	b29b      	uxth	r3, r3
 8000a3c:	2201      	movs	r2, #1
 8000a3e:	4619      	mov	r1, r3
 8000a40:	480d      	ldr	r0, [pc, #52]	; (8000a78 <LED_OnOff+0x58>)
 8000a42:	f002 fb2d 	bl	80030a0 <HAL_GPIO_WritePin>
HAL_Delay(interval);
 8000a46:	683b      	ldr	r3, [r7, #0]
 8000a48:	4618      	mov	r0, r3
 8000a4a:	f000 fe27 	bl	800169c <HAL_Delay>
HAL_GPIO_WritePin(GPIO_LED, led, GPIO_PIN_RESET );
 8000a4e:	687b      	ldr	r3, [r7, #4]
 8000a50:	b29b      	uxth	r3, r3
 8000a52:	2200      	movs	r2, #0
 8000a54:	4619      	mov	r1, r3
 8000a56:	4807      	ldr	r0, [pc, #28]	; (8000a74 <LED_OnOff+0x54>)
 8000a58:	f002 fb22 	bl	80030a0 <HAL_GPIO_WritePin>
HAL_GPIO_WritePin(GPIO_LED_Nucleo, led, GPIO_PIN_RESET );
 8000a5c:	687b      	ldr	r3, [r7, #4]
 8000a5e:	b29b      	uxth	r3, r3
 8000a60:	2200      	movs	r2, #0
 8000a62:	4619      	mov	r1, r3
 8000a64:	4804      	ldr	r0, [pc, #16]	; (8000a78 <LED_OnOff+0x58>)
 8000a66:	f002 fb1b 	bl	80030a0 <HAL_GPIO_WritePin>
}
 8000a6a:	bf00      	nop
 8000a6c:	3708      	adds	r7, #8
 8000a6e:	46bd      	mov	sp, r7
 8000a70:	bd80      	pop	{r7, pc}
 8000a72:	bf00      	nop
 8000a74:	40020c00 	.word	0x40020c00
 8000a78:	40020400 	.word	0x40020400

08000a7c <StartMotorTask>:

//MOTOR_LEFT
//TIM_CHANNEL_3 PD14
//TIM_CHANNEL_4 PD15
void StartMotorTask(void *argument)
{
 8000a7c:	b580      	push	{r7, lr}
 8000a7e:	b082      	sub	sp, #8
 8000a80:	af00      	add	r7, sp, #0
 8000a82:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  if(motor_left == 2){
 8000a84:	4b20      	ldr	r3, [pc, #128]	; (8000b08 <StartMotorTask+0x8c>)
 8000a86:	681b      	ldr	r3, [r3, #0]
 8000a88:	2b02      	cmp	r3, #2
 8000a8a:	d109      	bne.n	8000aa0 <StartMotorTask+0x24>
		  TIM4->CCR1 = 999;
 8000a8c:	4b1f      	ldr	r3, [pc, #124]	; (8000b0c <StartMotorTask+0x90>)
 8000a8e:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000a92:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_GPIO_WritePin(GPIO_LED, GPIO_PIN_1, GPIO_PIN_RESET );
 8000a94:	2200      	movs	r2, #0
 8000a96:	2102      	movs	r1, #2
 8000a98:	481d      	ldr	r0, [pc, #116]	; (8000b10 <StartMotorTask+0x94>)
 8000a9a:	f002 fb01 	bl	80030a0 <HAL_GPIO_WritePin>
 8000a9e:	e015      	b.n	8000acc <StartMotorTask+0x50>
	  }
	  else if(motor_left == 1){
 8000aa0:	4b19      	ldr	r3, [pc, #100]	; (8000b08 <StartMotorTask+0x8c>)
 8000aa2:	681b      	ldr	r3, [r3, #0]
 8000aa4:	2b01      	cmp	r3, #1
 8000aa6:	d104      	bne.n	8000ab2 <StartMotorTask+0x36>
		  TIM4->CCR1 = 3999;
 8000aa8:	4b18      	ldr	r3, [pc, #96]	; (8000b0c <StartMotorTask+0x90>)
 8000aaa:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000aae:	635a      	str	r2, [r3, #52]	; 0x34
 8000ab0:	e00c      	b.n	8000acc <StartMotorTask+0x50>
	  }
	  else if(motor_left == 0){
 8000ab2:	4b15      	ldr	r3, [pc, #84]	; (8000b08 <StartMotorTask+0x8c>)
 8000ab4:	681b      	ldr	r3, [r3, #0]
 8000ab6:	2b00      	cmp	r3, #0
 8000ab8:	d108      	bne.n	8000acc <StartMotorTask+0x50>
		  TIM4->CCR1 = 9999;
 8000aba:	4b14      	ldr	r3, [pc, #80]	; (8000b0c <StartMotorTask+0x90>)
 8000abc:	f242 720f 	movw	r2, #9999	; 0x270f
 8000ac0:	635a      	str	r2, [r3, #52]	; 0x34
		  HAL_GPIO_WritePin(GPIO_LED, GPIO_PIN_1, GPIO_PIN_SET );
 8000ac2:	2201      	movs	r2, #1
 8000ac4:	2102      	movs	r1, #2
 8000ac6:	4812      	ldr	r0, [pc, #72]	; (8000b10 <StartMotorTask+0x94>)
 8000ac8:	f002 faea 	bl	80030a0 <HAL_GPIO_WritePin>
	  }


	  if(motor_right == 2){
 8000acc:	4b11      	ldr	r3, [pc, #68]	; (8000b14 <StartMotorTask+0x98>)
 8000ace:	681b      	ldr	r3, [r3, #0]
 8000ad0:	2b02      	cmp	r3, #2
 8000ad2:	d104      	bne.n	8000ade <StartMotorTask+0x62>
		  TIM4->CCR3 = 999;
 8000ad4:	4b0d      	ldr	r3, [pc, #52]	; (8000b0c <StartMotorTask+0x90>)
 8000ad6:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000ada:	63da      	str	r2, [r3, #60]	; 0x3c
 8000adc:	e010      	b.n	8000b00 <StartMotorTask+0x84>
	  }
	  else if(motor_right == 1){
 8000ade:	4b0d      	ldr	r3, [pc, #52]	; (8000b14 <StartMotorTask+0x98>)
 8000ae0:	681b      	ldr	r3, [r3, #0]
 8000ae2:	2b01      	cmp	r3, #1
 8000ae4:	d104      	bne.n	8000af0 <StartMotorTask+0x74>
		  TIM4->CCR3 = 3999;
 8000ae6:	4b09      	ldr	r3, [pc, #36]	; (8000b0c <StartMotorTask+0x90>)
 8000ae8:	f640 729f 	movw	r2, #3999	; 0xf9f
 8000aec:	63da      	str	r2, [r3, #60]	; 0x3c
 8000aee:	e007      	b.n	8000b00 <StartMotorTask+0x84>
	  }
	  else if(motor_right == 0){
 8000af0:	4b08      	ldr	r3, [pc, #32]	; (8000b14 <StartMotorTask+0x98>)
 8000af2:	681b      	ldr	r3, [r3, #0]
 8000af4:	2b00      	cmp	r3, #0
 8000af6:	d103      	bne.n	8000b00 <StartMotorTask+0x84>
		  TIM4->CCR3 = 9999;
 8000af8:	4b04      	ldr	r3, [pc, #16]	; (8000b0c <StartMotorTask+0x90>)
 8000afa:	f242 720f 	movw	r2, #9999	; 0x270f
 8000afe:	63da      	str	r2, [r3, #60]	; 0x3c
	  }
	  osDelay(10);
 8000b00:	200a      	movs	r0, #10
 8000b02:	f004 ffc7 	bl	8005a94 <osDelay>
	  if(motor_left == 2){
 8000b06:	e7bd      	b.n	8000a84 <StartMotorTask+0x8>
 8000b08:	20000288 	.word	0x20000288
 8000b0c:	40000800 	.word	0x40000800
 8000b10:	40020c00 	.word	0x40020c00
 8000b14:	2000028c 	.word	0x2000028c

08000b18 <StartTcpTask>:
  /* USER CODE END 5 */
}


void StartTcpTask(void *argument)
{
 8000b18:	b580      	push	{r7, lr}
 8000b1a:	b082      	sub	sp, #8
 8000b1c:	af00      	add	r7, sp, #0
 8000b1e:	6078      	str	r0, [r7, #4]
  /* init code for LWIP */
  MX_LWIP_Init();
 8000b20:	f004 f866 	bl	8004bf0 <MX_LWIP_Init>
  tcpclient_init();
 8000b24:	f000 fbb2 	bl	800128c <tcpclient_init>
  /* USER CODE BEGIN 5 */
  /* Infinite loop */
  for(;;)
  {
	  osDelay(1);
 8000b28:	2001      	movs	r0, #1
 8000b2a:	f004 ffb3 	bl	8005a94 <osDelay>
 8000b2e:	e7fb      	b.n	8000b28 <StartTcpTask+0x10>

08000b30 <HAL_TIM_PeriodElapsedCallback>:
  * a global variable "uwTick" used as application time base.
  * @param  htim : TIM handle
  * @retval None
  */
void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8000b30:	b580      	push	{r7, lr}
 8000b32:	b082      	sub	sp, #8
 8000b34:	af00      	add	r7, sp, #0
 8000b36:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN Callback 0 */

  /* USER CODE END Callback 0 */
  if (htim->Instance == TIM6) {
 8000b38:	687b      	ldr	r3, [r7, #4]
 8000b3a:	681b      	ldr	r3, [r3, #0]
 8000b3c:	4a04      	ldr	r2, [pc, #16]	; (8000b50 <HAL_TIM_PeriodElapsedCallback+0x20>)
 8000b3e:	4293      	cmp	r3, r2
 8000b40:	d101      	bne.n	8000b46 <HAL_TIM_PeriodElapsedCallback+0x16>
    HAL_IncTick();
 8000b42:	f000 fd8b 	bl	800165c <HAL_IncTick>
  }
  /* USER CODE BEGIN Callback 1 */
  /* USER CODE END Callback 1 */
}
 8000b46:	bf00      	nop
 8000b48:	3708      	adds	r7, #8
 8000b4a:	46bd      	mov	sp, r7
 8000b4c:	bd80      	pop	{r7, pc}
 8000b4e:	bf00      	nop
 8000b50:	40001000 	.word	0x40001000

08000b54 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000b54:	b480      	push	{r7}
 8000b56:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8000b58:	b672      	cpsid	i
}
 8000b5a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000b5c:	e7fe      	b.n	8000b5c <Error_Handler+0x8>
	...

08000b60 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000b60:	b580      	push	{r7, lr}
 8000b62:	b082      	sub	sp, #8
 8000b64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8000b66:	2300      	movs	r3, #0
 8000b68:	607b      	str	r3, [r7, #4]
 8000b6a:	4b12      	ldr	r3, [pc, #72]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b6c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b6e:	4a11      	ldr	r2, [pc, #68]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b70:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8000b74:	6453      	str	r3, [r2, #68]	; 0x44
 8000b76:	4b0f      	ldr	r3, [pc, #60]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8000b7a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8000b7e:	607b      	str	r3, [r7, #4]
 8000b80:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8000b82:	2300      	movs	r3, #0
 8000b84:	603b      	str	r3, [r7, #0]
 8000b86:	4b0b      	ldr	r3, [pc, #44]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b88:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b8a:	4a0a      	ldr	r2, [pc, #40]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b8c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8000b90:	6413      	str	r3, [r2, #64]	; 0x40
 8000b92:	4b08      	ldr	r3, [pc, #32]	; (8000bb4 <HAL_MspInit+0x54>)
 8000b94:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000b96:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8000b9a:	603b      	str	r3, [r7, #0]
 8000b9c:	683b      	ldr	r3, [r7, #0]

  /* System interrupt init*/
  /* PendSV_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(PendSV_IRQn, 15, 0);
 8000b9e:	2200      	movs	r2, #0
 8000ba0:	210f      	movs	r1, #15
 8000ba2:	f06f 0001 	mvn.w	r0, #1
 8000ba6:	f000 fe55 	bl	8001854 <HAL_NVIC_SetPriority>

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8000baa:	bf00      	nop
 8000bac:	3708      	adds	r7, #8
 8000bae:	46bd      	mov	sp, r7
 8000bb0:	bd80      	pop	{r7, pc}
 8000bb2:	bf00      	nop
 8000bb4:	40023800 	.word	0x40023800

08000bb8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8000bb8:	b580      	push	{r7, lr}
 8000bba:	b084      	sub	sp, #16
 8000bbc:	af00      	add	r7, sp, #0
 8000bbe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM4)
 8000bc0:	687b      	ldr	r3, [r7, #4]
 8000bc2:	681b      	ldr	r3, [r3, #0]
 8000bc4:	4a0e      	ldr	r2, [pc, #56]	; (8000c00 <HAL_TIM_Base_MspInit+0x48>)
 8000bc6:	4293      	cmp	r3, r2
 8000bc8:	d115      	bne.n	8000bf6 <HAL_TIM_Base_MspInit+0x3e>
  {
  /* USER CODE BEGIN TIM4_MspInit 0 */

  /* USER CODE END TIM4_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM4_CLK_ENABLE();
 8000bca:	2300      	movs	r3, #0
 8000bcc:	60fb      	str	r3, [r7, #12]
 8000bce:	4b0d      	ldr	r3, [pc, #52]	; (8000c04 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bd2:	4a0c      	ldr	r2, [pc, #48]	; (8000c04 <HAL_TIM_Base_MspInit+0x4c>)
 8000bd4:	f043 0304 	orr.w	r3, r3, #4
 8000bd8:	6413      	str	r3, [r2, #64]	; 0x40
 8000bda:	4b0a      	ldr	r3, [pc, #40]	; (8000c04 <HAL_TIM_Base_MspInit+0x4c>)
 8000bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000bde:	f003 0304 	and.w	r3, r3, #4
 8000be2:	60fb      	str	r3, [r7, #12]
 8000be4:	68fb      	ldr	r3, [r7, #12]
    /* TIM4 interrupt Init */
    HAL_NVIC_SetPriority(TIM4_IRQn, 5, 0);
 8000be6:	2200      	movs	r2, #0
 8000be8:	2105      	movs	r1, #5
 8000bea:	201e      	movs	r0, #30
 8000bec:	f000 fe32 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM4_IRQn);
 8000bf0:	201e      	movs	r0, #30
 8000bf2:	f000 fe4b 	bl	800188c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM4_MspInit 1 */

  /* USER CODE END TIM4_MspInit 1 */
  }

}
 8000bf6:	bf00      	nop
 8000bf8:	3710      	adds	r7, #16
 8000bfa:	46bd      	mov	sp, r7
 8000bfc:	bd80      	pop	{r7, pc}
 8000bfe:	bf00      	nop
 8000c00:	40000800 	.word	0x40000800
 8000c04:	40023800 	.word	0x40023800

08000c08 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8000c08:	b580      	push	{r7, lr}
 8000c0a:	b088      	sub	sp, #32
 8000c0c:	af00      	add	r7, sp, #0
 8000c0e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8000c10:	f107 030c 	add.w	r3, r7, #12
 8000c14:	2200      	movs	r2, #0
 8000c16:	601a      	str	r2, [r3, #0]
 8000c18:	605a      	str	r2, [r3, #4]
 8000c1a:	609a      	str	r2, [r3, #8]
 8000c1c:	60da      	str	r2, [r3, #12]
 8000c1e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM4)
 8000c20:	687b      	ldr	r3, [r7, #4]
 8000c22:	681b      	ldr	r3, [r3, #0]
 8000c24:	4a12      	ldr	r2, [pc, #72]	; (8000c70 <HAL_TIM_MspPostInit+0x68>)
 8000c26:	4293      	cmp	r3, r2
 8000c28:	d11e      	bne.n	8000c68 <HAL_TIM_MspPostInit+0x60>
  {
  /* USER CODE BEGIN TIM4_MspPostInit 0 */

  /* USER CODE END TIM4_MspPostInit 0 */

    __HAL_RCC_GPIOD_CLK_ENABLE();
 8000c2a:	2300      	movs	r3, #0
 8000c2c:	60bb      	str	r3, [r7, #8]
 8000c2e:	4b11      	ldr	r3, [pc, #68]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c30:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c32:	4a10      	ldr	r2, [pc, #64]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c34:	f043 0308 	orr.w	r3, r3, #8
 8000c38:	6313      	str	r3, [r2, #48]	; 0x30
 8000c3a:	4b0e      	ldr	r3, [pc, #56]	; (8000c74 <HAL_TIM_MspPostInit+0x6c>)
 8000c3c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8000c3e:	f003 0308 	and.w	r3, r3, #8
 8000c42:	60bb      	str	r3, [r7, #8]
 8000c44:	68bb      	ldr	r3, [r7, #8]
    PD12     ------> TIM4_CH1
    PD13     ------> TIM4_CH2
    PD14     ------> TIM4_CH3
    PD15     ------> TIM4_CH4
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_14|GPIO_PIN_15;
 8000c46:	f44f 4370 	mov.w	r3, #61440	; 0xf000
 8000c4a:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000c4c:	2302      	movs	r3, #2
 8000c4e:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000c50:	2300      	movs	r3, #0
 8000c52:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000c54:	2300      	movs	r3, #0
 8000c56:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM4;
 8000c58:	2302      	movs	r3, #2
 8000c5a:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8000c5c:	f107 030c 	add.w	r3, r7, #12
 8000c60:	4619      	mov	r1, r3
 8000c62:	4805      	ldr	r0, [pc, #20]	; (8000c78 <HAL_TIM_MspPostInit+0x70>)
 8000c64:	f002 f870 	bl	8002d48 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM4_MspPostInit 1 */

  /* USER CODE END TIM4_MspPostInit 1 */
  }

}
 8000c68:	bf00      	nop
 8000c6a:	3720      	adds	r7, #32
 8000c6c:	46bd      	mov	sp, r7
 8000c6e:	bd80      	pop	{r7, pc}
 8000c70:	40000800 	.word	0x40000800
 8000c74:	40023800 	.word	0x40023800
 8000c78:	40020c00 	.word	0x40020c00

08000c7c <HAL_InitTick>:
  *         reset by HAL_Init() or at any time when clock is configured, by HAL_RCC_ClockConfig().
  * @param  TickPriority: Tick interrupt priority.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000c7c:	b580      	push	{r7, lr}
 8000c7e:	b08e      	sub	sp, #56	; 0x38
 8000c80:	af00      	add	r7, sp, #0
 8000c82:	6078      	str	r0, [r7, #4]
  RCC_ClkInitTypeDef    clkconfig;
  uint32_t              uwTimclock, uwAPB1Prescaler = 0U;
 8000c84:	2300      	movs	r3, #0
 8000c86:	62fb      	str	r3, [r7, #44]	; 0x2c

  uint32_t              uwPrescalerValue = 0U;
 8000c88:	2300      	movs	r3, #0
 8000c8a:	62bb      	str	r3, [r7, #40]	; 0x28
  uint32_t              pFLatency;
  HAL_StatusTypeDef     status;

  /* Enable TIM6 clock */
  __HAL_RCC_TIM6_CLK_ENABLE();
 8000c8c:	2300      	movs	r3, #0
 8000c8e:	60fb      	str	r3, [r7, #12]
 8000c90:	4b33      	ldr	r3, [pc, #204]	; (8000d60 <HAL_InitTick+0xe4>)
 8000c92:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000c94:	4a32      	ldr	r2, [pc, #200]	; (8000d60 <HAL_InitTick+0xe4>)
 8000c96:	f043 0310 	orr.w	r3, r3, #16
 8000c9a:	6413      	str	r3, [r2, #64]	; 0x40
 8000c9c:	4b30      	ldr	r3, [pc, #192]	; (8000d60 <HAL_InitTick+0xe4>)
 8000c9e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8000ca0:	f003 0310 	and.w	r3, r3, #16
 8000ca4:	60fb      	str	r3, [r7, #12]
 8000ca6:	68fb      	ldr	r3, [r7, #12]

  /* Get clock configuration */
  HAL_RCC_GetClockConfig(&clkconfig, &pFLatency);
 8000ca8:	f107 0210 	add.w	r2, r7, #16
 8000cac:	f107 0314 	add.w	r3, r7, #20
 8000cb0:	4611      	mov	r1, r2
 8000cb2:	4618      	mov	r0, r3
 8000cb4:	f002 fec6 	bl	8003a44 <HAL_RCC_GetClockConfig>

  /* Get APB1 prescaler */
  uwAPB1Prescaler = clkconfig.APB1CLKDivider;
 8000cb8:	6a3b      	ldr	r3, [r7, #32]
 8000cba:	62fb      	str	r3, [r7, #44]	; 0x2c
  /* Compute TIM6 clock */
  if (uwAPB1Prescaler == RCC_HCLK_DIV1)
 8000cbc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8000cbe:	2b00      	cmp	r3, #0
 8000cc0:	d103      	bne.n	8000cca <HAL_InitTick+0x4e>
  {
    uwTimclock = HAL_RCC_GetPCLK1Freq();
 8000cc2:	f002 feab 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8000cc6:	6378      	str	r0, [r7, #52]	; 0x34
 8000cc8:	e004      	b.n	8000cd4 <HAL_InitTick+0x58>
  }
  else
  {
    uwTimclock = 2UL * HAL_RCC_GetPCLK1Freq();
 8000cca:	f002 fea7 	bl	8003a1c <HAL_RCC_GetPCLK1Freq>
 8000cce:	4603      	mov	r3, r0
 8000cd0:	005b      	lsls	r3, r3, #1
 8000cd2:	637b      	str	r3, [r7, #52]	; 0x34
  }

  /* Compute the prescaler value to have TIM6 counter clock equal to 1MHz */
  uwPrescalerValue = (uint32_t) ((uwTimclock / 1000000U) - 1U);
 8000cd4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8000cd6:	4a23      	ldr	r2, [pc, #140]	; (8000d64 <HAL_InitTick+0xe8>)
 8000cd8:	fba2 2303 	umull	r2, r3, r2, r3
 8000cdc:	0c9b      	lsrs	r3, r3, #18
 8000cde:	3b01      	subs	r3, #1
 8000ce0:	62bb      	str	r3, [r7, #40]	; 0x28

  /* Initialize TIM6 */
  htim6.Instance = TIM6;
 8000ce2:	4b21      	ldr	r3, [pc, #132]	; (8000d68 <HAL_InitTick+0xec>)
 8000ce4:	4a21      	ldr	r2, [pc, #132]	; (8000d6c <HAL_InitTick+0xf0>)
 8000ce6:	601a      	str	r2, [r3, #0]
  + Period = [(TIM6CLK/1000) - 1]. to have a (1/1000) s time base.
  + Prescaler = (uwTimclock/1000000 - 1) to have a 1MHz counter clock.
  + ClockDivision = 0
  + Counter direction = Up
  */
  htim6.Init.Period = (1000000U / 1000U) - 1U;
 8000ce8:	4b1f      	ldr	r3, [pc, #124]	; (8000d68 <HAL_InitTick+0xec>)
 8000cea:	f240 32e7 	movw	r2, #999	; 0x3e7
 8000cee:	60da      	str	r2, [r3, #12]
  htim6.Init.Prescaler = uwPrescalerValue;
 8000cf0:	4a1d      	ldr	r2, [pc, #116]	; (8000d68 <HAL_InitTick+0xec>)
 8000cf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8000cf4:	6053      	str	r3, [r2, #4]
  htim6.Init.ClockDivision = 0;
 8000cf6:	4b1c      	ldr	r3, [pc, #112]	; (8000d68 <HAL_InitTick+0xec>)
 8000cf8:	2200      	movs	r2, #0
 8000cfa:	611a      	str	r2, [r3, #16]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 8000cfc:	4b1a      	ldr	r3, [pc, #104]	; (8000d68 <HAL_InitTick+0xec>)
 8000cfe:	2200      	movs	r2, #0
 8000d00:	609a      	str	r2, [r3, #8]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8000d02:	4b19      	ldr	r3, [pc, #100]	; (8000d68 <HAL_InitTick+0xec>)
 8000d04:	2200      	movs	r2, #0
 8000d06:	619a      	str	r2, [r3, #24]

  status = HAL_TIM_Base_Init(&htim6);
 8000d08:	4817      	ldr	r0, [pc, #92]	; (8000d68 <HAL_InitTick+0xec>)
 8000d0a:	f002 fecd 	bl	8003aa8 <HAL_TIM_Base_Init>
 8000d0e:	4603      	mov	r3, r0
 8000d10:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
  if (status == HAL_OK)
 8000d14:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d18:	2b00      	cmp	r3, #0
 8000d1a:	d11b      	bne.n	8000d54 <HAL_InitTick+0xd8>
  {
    /* Start the TIM time Base generation in interrupt mode */
    status = HAL_TIM_Base_Start_IT(&htim6);
 8000d1c:	4812      	ldr	r0, [pc, #72]	; (8000d68 <HAL_InitTick+0xec>)
 8000d1e:	f002 ff7b 	bl	8003c18 <HAL_TIM_Base_Start_IT>
 8000d22:	4603      	mov	r3, r0
 8000d24:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
    if (status == HAL_OK)
 8000d28:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8000d2c:	2b00      	cmp	r3, #0
 8000d2e:	d111      	bne.n	8000d54 <HAL_InitTick+0xd8>
    {
    /* Enable the TIM6 global Interrupt */
        HAL_NVIC_EnableIRQ(TIM6_DAC_IRQn);
 8000d30:	2036      	movs	r0, #54	; 0x36
 8000d32:	f000 fdab 	bl	800188c <HAL_NVIC_EnableIRQ>
      /* Configure the SysTick IRQ priority */
      if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000d36:	687b      	ldr	r3, [r7, #4]
 8000d38:	2b0f      	cmp	r3, #15
 8000d3a:	d808      	bhi.n	8000d4e <HAL_InitTick+0xd2>
      {
        /* Configure the TIM IRQ priority */
        HAL_NVIC_SetPriority(TIM6_DAC_IRQn, TickPriority, 0U);
 8000d3c:	2200      	movs	r2, #0
 8000d3e:	6879      	ldr	r1, [r7, #4]
 8000d40:	2036      	movs	r0, #54	; 0x36
 8000d42:	f000 fd87 	bl	8001854 <HAL_NVIC_SetPriority>
        uwTickPrio = TickPriority;
 8000d46:	4a0a      	ldr	r2, [pc, #40]	; (8000d70 <HAL_InitTick+0xf4>)
 8000d48:	687b      	ldr	r3, [r7, #4]
 8000d4a:	6013      	str	r3, [r2, #0]
 8000d4c:	e002      	b.n	8000d54 <HAL_InitTick+0xd8>
      }
      else
      {
        status = HAL_ERROR;
 8000d4e:	2301      	movs	r3, #1
 8000d50:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
      }
    }
  }

 /* Return function status */
  return status;
 8000d54:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
}
 8000d58:	4618      	mov	r0, r3
 8000d5a:	3738      	adds	r7, #56	; 0x38
 8000d5c:	46bd      	mov	sp, r7
 8000d5e:	bd80      	pop	{r7, pc}
 8000d60:	40023800 	.word	0x40023800
 8000d64:	431bde83 	.word	0x431bde83
 8000d68:	200000f8 	.word	0x200000f8
 8000d6c:	40001000 	.word	0x40001000
 8000d70:	20000004 	.word	0x20000004

08000d74 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000d74:	b480      	push	{r7}
 8000d76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8000d78:	e7fe      	b.n	8000d78 <NMI_Handler+0x4>

08000d7a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8000d7a:	b480      	push	{r7}
 8000d7c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000d7e:	e7fe      	b.n	8000d7e <HardFault_Handler+0x4>

08000d80 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000d80:	b480      	push	{r7}
 8000d82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000d84:	e7fe      	b.n	8000d84 <MemManage_Handler+0x4>

08000d86 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8000d86:	b480      	push	{r7}
 8000d88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000d8a:	e7fe      	b.n	8000d8a <BusFault_Handler+0x4>

08000d8c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000d8c:	b480      	push	{r7}
 8000d8e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000d90:	e7fe      	b.n	8000d90 <UsageFault_Handler+0x4>

08000d92 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8000d92:	b480      	push	{r7}
 8000d94:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8000d96:	bf00      	nop
 8000d98:	46bd      	mov	sp, r7
 8000d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d9e:	4770      	bx	lr

08000da0 <EXTI0_IRQHandler>:

/**
  * @brief This function handles EXTI line0 interrupt.
  */
void EXTI0_IRQHandler(void)
{
 8000da0:	b580      	push	{r7, lr}
 8000da2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI0_IRQn 0 */

  /* USER CODE END EXTI0_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_0);
 8000da4:	2001      	movs	r0, #1
 8000da6:	f002 f995 	bl	80030d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI0_IRQn 1 */

  /* USER CODE END EXTI0_IRQn 1 */
}
 8000daa:	bf00      	nop
 8000dac:	bd80      	pop	{r7, pc}

08000dae <EXTI1_IRQHandler>:

/**
  * @brief This function handles EXTI line1 interrupt.
  */
void EXTI1_IRQHandler(void)
{
 8000dae:	b580      	push	{r7, lr}
 8000db0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI1_IRQn 0 */

  /* USER CODE END EXTI1_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_1);
 8000db2:	2002      	movs	r0, #2
 8000db4:	f002 f98e 	bl	80030d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI1_IRQn 1 */

  /* USER CODE END EXTI1_IRQn 1 */
}
 8000db8:	bf00      	nop
 8000dba:	bd80      	pop	{r7, pc}

08000dbc <EXTI2_IRQHandler>:

/**
  * @brief This function handles EXTI line2 interrupt.
  */
void EXTI2_IRQHandler(void)
{
 8000dbc:	b580      	push	{r7, lr}
 8000dbe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI2_IRQn 0 */

  /* USER CODE END EXTI2_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_2);
 8000dc0:	2004      	movs	r0, #4
 8000dc2:	f002 f987 	bl	80030d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI2_IRQn 1 */

  /* USER CODE END EXTI2_IRQn 1 */
}
 8000dc6:	bf00      	nop
 8000dc8:	bd80      	pop	{r7, pc}

08000dca <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8000dca:	b580      	push	{r7, lr}
 8000dcc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8000dce:	2008      	movs	r0, #8
 8000dd0:	f002 f980 	bl	80030d4 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8000dd4:	bf00      	nop
 8000dd6:	bd80      	pop	{r7, pc}

08000dd8 <TIM4_IRQHandler>:

/**
  * @brief This function handles TIM4 global interrupt.
  */
void TIM4_IRQHandler(void)
{
 8000dd8:	b580      	push	{r7, lr}
 8000dda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM4_IRQn 0 */

  /* USER CODE END TIM4_IRQn 0 */
  HAL_TIM_IRQHandler(&htim4);
 8000ddc:	4802      	ldr	r0, [pc, #8]	; (8000de8 <TIM4_IRQHandler+0x10>)
 8000dde:	f003 f8ad 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM4_IRQn 1 */

  /* USER CODE END TIM4_IRQn 1 */
}
 8000de2:	bf00      	nop
 8000de4:	bd80      	pop	{r7, pc}
 8000de6:	bf00      	nop
 8000de8:	200000a8 	.word	0x200000a8

08000dec <TIM6_DAC_IRQHandler>:

/**
  * @brief This function handles TIM6 global interrupt, DAC1 and DAC2 underrun error interrupts.
  */
void TIM6_DAC_IRQHandler(void)
{
 8000dec:	b580      	push	{r7, lr}
 8000dee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM6_DAC_IRQn 0 */

  /* USER CODE END TIM6_DAC_IRQn 0 */
  HAL_TIM_IRQHandler(&htim6);
 8000df0:	4802      	ldr	r0, [pc, #8]	; (8000dfc <TIM6_DAC_IRQHandler+0x10>)
 8000df2:	f003 f8a3 	bl	8003f3c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM6_DAC_IRQn 1 */

  /* USER CODE END TIM6_DAC_IRQn 1 */
}
 8000df6:	bf00      	nop
 8000df8:	bd80      	pop	{r7, pc}
 8000dfa:	bf00      	nop
 8000dfc:	200000f8 	.word	0x200000f8

08000e00 <ETH_IRQHandler>:

/**
  * @brief This function handles Ethernet global interrupt.
  */
void ETH_IRQHandler(void)
{
 8000e00:	b580      	push	{r7, lr}
 8000e02:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN ETH_IRQn 0 */

  /* USER CODE END ETH_IRQn 0 */
  HAL_ETH_IRQHandler(&heth);
 8000e04:	4802      	ldr	r0, [pc, #8]	; (8000e10 <ETH_IRQHandler+0x10>)
 8000e06:	f001 f8c9 	bl	8001f9c <HAL_ETH_IRQHandler>
  /* USER CODE BEGIN ETH_IRQn 1 */

  /* USER CODE END ETH_IRQn 1 */
}
 8000e0a:	bf00      	nop
 8000e0c:	bd80      	pop	{r7, pc}
 8000e0e:	bf00      	nop
 8000e10:	20004de0 	.word	0x20004de0

08000e14 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8000e14:	b480      	push	{r7}
 8000e16:	af00      	add	r7, sp, #0
  return 1;
 8000e18:	2301      	movs	r3, #1
}
 8000e1a:	4618      	mov	r0, r3
 8000e1c:	46bd      	mov	sp, r7
 8000e1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e22:	4770      	bx	lr

08000e24 <_kill>:

int _kill(int pid, int sig)
{
 8000e24:	b480      	push	{r7}
 8000e26:	b083      	sub	sp, #12
 8000e28:	af00      	add	r7, sp, #0
 8000e2a:	6078      	str	r0, [r7, #4]
 8000e2c:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8000e2e:	4b05      	ldr	r3, [pc, #20]	; (8000e44 <_kill+0x20>)
 8000e30:	2216      	movs	r2, #22
 8000e32:	601a      	str	r2, [r3, #0]
  return -1;
 8000e34:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000e38:	4618      	mov	r0, r3
 8000e3a:	370c      	adds	r7, #12
 8000e3c:	46bd      	mov	sp, r7
 8000e3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e42:	4770      	bx	lr
 8000e44:	2000fa90 	.word	0x2000fa90

08000e48 <_exit>:

void _exit (int status)
{
 8000e48:	b580      	push	{r7, lr}
 8000e4a:	b082      	sub	sp, #8
 8000e4c:	af00      	add	r7, sp, #0
 8000e4e:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8000e50:	f04f 31ff 	mov.w	r1, #4294967295
 8000e54:	6878      	ldr	r0, [r7, #4]
 8000e56:	f7ff ffe5 	bl	8000e24 <_kill>
  while (1) {}    /* Make sure we hang here */
 8000e5a:	e7fe      	b.n	8000e5a <_exit+0x12>

08000e5c <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8000e5c:	b580      	push	{r7, lr}
 8000e5e:	b086      	sub	sp, #24
 8000e60:	af00      	add	r7, sp, #0
 8000e62:	60f8      	str	r0, [r7, #12]
 8000e64:	60b9      	str	r1, [r7, #8]
 8000e66:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e68:	2300      	movs	r3, #0
 8000e6a:	617b      	str	r3, [r7, #20]
 8000e6c:	e00a      	b.n	8000e84 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8000e6e:	f3af 8000 	nop.w
 8000e72:	4601      	mov	r1, r0
 8000e74:	68bb      	ldr	r3, [r7, #8]
 8000e76:	1c5a      	adds	r2, r3, #1
 8000e78:	60ba      	str	r2, [r7, #8]
 8000e7a:	b2ca      	uxtb	r2, r1
 8000e7c:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000e7e:	697b      	ldr	r3, [r7, #20]
 8000e80:	3301      	adds	r3, #1
 8000e82:	617b      	str	r3, [r7, #20]
 8000e84:	697a      	ldr	r2, [r7, #20]
 8000e86:	687b      	ldr	r3, [r7, #4]
 8000e88:	429a      	cmp	r2, r3
 8000e8a:	dbf0      	blt.n	8000e6e <_read+0x12>
  }

  return len;
 8000e8c:	687b      	ldr	r3, [r7, #4]
}
 8000e8e:	4618      	mov	r0, r3
 8000e90:	3718      	adds	r7, #24
 8000e92:	46bd      	mov	sp, r7
 8000e94:	bd80      	pop	{r7, pc}

08000e96 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000e96:	b580      	push	{r7, lr}
 8000e98:	b086      	sub	sp, #24
 8000e9a:	af00      	add	r7, sp, #0
 8000e9c:	60f8      	str	r0, [r7, #12]
 8000e9e:	60b9      	str	r1, [r7, #8]
 8000ea0:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000ea2:	2300      	movs	r3, #0
 8000ea4:	617b      	str	r3, [r7, #20]
 8000ea6:	e009      	b.n	8000ebc <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000ea8:	68bb      	ldr	r3, [r7, #8]
 8000eaa:	1c5a      	adds	r2, r3, #1
 8000eac:	60ba      	str	r2, [r7, #8]
 8000eae:	781b      	ldrb	r3, [r3, #0]
 8000eb0:	4618      	mov	r0, r3
 8000eb2:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000eb6:	697b      	ldr	r3, [r7, #20]
 8000eb8:	3301      	adds	r3, #1
 8000eba:	617b      	str	r3, [r7, #20]
 8000ebc:	697a      	ldr	r2, [r7, #20]
 8000ebe:	687b      	ldr	r3, [r7, #4]
 8000ec0:	429a      	cmp	r2, r3
 8000ec2:	dbf1      	blt.n	8000ea8 <_write+0x12>
  }
  return len;
 8000ec4:	687b      	ldr	r3, [r7, #4]
}
 8000ec6:	4618      	mov	r0, r3
 8000ec8:	3718      	adds	r7, #24
 8000eca:	46bd      	mov	sp, r7
 8000ecc:	bd80      	pop	{r7, pc}

08000ece <_close>:

int _close(int file)
{
 8000ece:	b480      	push	{r7}
 8000ed0:	b083      	sub	sp, #12
 8000ed2:	af00      	add	r7, sp, #0
 8000ed4:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000ed6:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000eda:	4618      	mov	r0, r3
 8000edc:	370c      	adds	r7, #12
 8000ede:	46bd      	mov	sp, r7
 8000ee0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ee4:	4770      	bx	lr

08000ee6 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000ee6:	b480      	push	{r7}
 8000ee8:	b083      	sub	sp, #12
 8000eea:	af00      	add	r7, sp, #0
 8000eec:	6078      	str	r0, [r7, #4]
 8000eee:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000ef0:	683b      	ldr	r3, [r7, #0]
 8000ef2:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 8000ef6:	605a      	str	r2, [r3, #4]
  return 0;
 8000ef8:	2300      	movs	r3, #0
}
 8000efa:	4618      	mov	r0, r3
 8000efc:	370c      	adds	r7, #12
 8000efe:	46bd      	mov	sp, r7
 8000f00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f04:	4770      	bx	lr

08000f06 <_isatty>:

int _isatty(int file)
{
 8000f06:	b480      	push	{r7}
 8000f08:	b083      	sub	sp, #12
 8000f0a:	af00      	add	r7, sp, #0
 8000f0c:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000f0e:	2301      	movs	r3, #1
}
 8000f10:	4618      	mov	r0, r3
 8000f12:	370c      	adds	r7, #12
 8000f14:	46bd      	mov	sp, r7
 8000f16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f1a:	4770      	bx	lr

08000f1c <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000f1c:	b480      	push	{r7}
 8000f1e:	b085      	sub	sp, #20
 8000f20:	af00      	add	r7, sp, #0
 8000f22:	60f8      	str	r0, [r7, #12]
 8000f24:	60b9      	str	r1, [r7, #8]
 8000f26:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000f28:	2300      	movs	r3, #0
}
 8000f2a:	4618      	mov	r0, r3
 8000f2c:	3714      	adds	r7, #20
 8000f2e:	46bd      	mov	sp, r7
 8000f30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f34:	4770      	bx	lr
	...

08000f38 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000f38:	b480      	push	{r7}
 8000f3a:	b087      	sub	sp, #28
 8000f3c:	af00      	add	r7, sp, #0
 8000f3e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000f40:	4a14      	ldr	r2, [pc, #80]	; (8000f94 <_sbrk+0x5c>)
 8000f42:	4b15      	ldr	r3, [pc, #84]	; (8000f98 <_sbrk+0x60>)
 8000f44:	1ad3      	subs	r3, r2, r3
 8000f46:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000f48:	697b      	ldr	r3, [r7, #20]
 8000f4a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000f4c:	4b13      	ldr	r3, [pc, #76]	; (8000f9c <_sbrk+0x64>)
 8000f4e:	681b      	ldr	r3, [r3, #0]
 8000f50:	2b00      	cmp	r3, #0
 8000f52:	d102      	bne.n	8000f5a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000f54:	4b11      	ldr	r3, [pc, #68]	; (8000f9c <_sbrk+0x64>)
 8000f56:	4a12      	ldr	r2, [pc, #72]	; (8000fa0 <_sbrk+0x68>)
 8000f58:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000f5a:	4b10      	ldr	r3, [pc, #64]	; (8000f9c <_sbrk+0x64>)
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	4413      	add	r3, r2
 8000f62:	693a      	ldr	r2, [r7, #16]
 8000f64:	429a      	cmp	r2, r3
 8000f66:	d205      	bcs.n	8000f74 <_sbrk+0x3c>
  {
    errno = ENOMEM;
 8000f68:	4b0e      	ldr	r3, [pc, #56]	; (8000fa4 <_sbrk+0x6c>)
 8000f6a:	220c      	movs	r2, #12
 8000f6c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000f6e:	f04f 33ff 	mov.w	r3, #4294967295
 8000f72:	e009      	b.n	8000f88 <_sbrk+0x50>
  }

  prev_heap_end = __sbrk_heap_end;
 8000f74:	4b09      	ldr	r3, [pc, #36]	; (8000f9c <_sbrk+0x64>)
 8000f76:	681b      	ldr	r3, [r3, #0]
 8000f78:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000f7a:	4b08      	ldr	r3, [pc, #32]	; (8000f9c <_sbrk+0x64>)
 8000f7c:	681a      	ldr	r2, [r3, #0]
 8000f7e:	687b      	ldr	r3, [r7, #4]
 8000f80:	4413      	add	r3, r2
 8000f82:	4a06      	ldr	r2, [pc, #24]	; (8000f9c <_sbrk+0x64>)
 8000f84:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000f86:	68fb      	ldr	r3, [r7, #12]
}
 8000f88:	4618      	mov	r0, r3
 8000f8a:	371c      	adds	r7, #28
 8000f8c:	46bd      	mov	sp, r7
 8000f8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000f92:	4770      	bx	lr
 8000f94:	20030000 	.word	0x20030000
 8000f98:	00000400 	.word	0x00000400
 8000f9c:	20000140 	.word	0x20000140
 8000fa0:	2000faa0 	.word	0x2000faa0
 8000fa4:	2000fa90 	.word	0x2000fa90

08000fa8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000fa8:	b480      	push	{r7}
 8000faa:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000fac:	4b06      	ldr	r3, [pc, #24]	; (8000fc8 <SystemInit+0x20>)
 8000fae:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8000fb2:	4a05      	ldr	r2, [pc, #20]	; (8000fc8 <SystemInit+0x20>)
 8000fb4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8000fb8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000fbc:	bf00      	nop
 8000fbe:	46bd      	mov	sp, r7
 8000fc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000fc4:	4770      	bx	lr
 8000fc6:	bf00      	nop
 8000fc8:	e000ed00 	.word	0xe000ed00

08000fcc <tcpinit_thread>:
void BEEP(void);
// tcpsem is the binary semaphore to prevent the access to tcpsend
sys_sem_t tcpsem;

static void tcpinit_thread(void *arg)
{
 8000fcc:	b580      	push	{r7, lr}
 8000fce:	b084      	sub	sp, #16
 8000fd0:	af00      	add	r7, sp, #0
 8000fd2:	6078      	str	r0, [r7, #4]
	err_t err, connect_error;

	/* Create a new connection identifier. */
	conn = netconn_new(NETCONN_TCP);
 8000fd4:	2200      	movs	r2, #0
 8000fd6:	2100      	movs	r1, #0
 8000fd8:	2010      	movs	r0, #16
 8000fda:	f008 fb35 	bl	8009648 <netconn_new_with_proto_and_callback>
 8000fde:	4603      	mov	r3, r0
 8000fe0:	4a70      	ldr	r2, [pc, #448]	; (80011a4 <tcpinit_thread+0x1d8>)
 8000fe2:	6013      	str	r3, [r2, #0]

	if (conn!=NULL)
 8000fe4:	4b6f      	ldr	r3, [pc, #444]	; (80011a4 <tcpinit_thread+0x1d8>)
 8000fe6:	681b      	ldr	r3, [r3, #0]
 8000fe8:	2b00      	cmp	r3, #0
 8000fea:	f000 80d7 	beq.w	800119c <tcpinit_thread+0x1d0>
	{
		/* Bind connection to the port number 7 (port of the Client). */
		err = netconn_bind(conn, IP_ADDR_ANY, 7);
 8000fee:	4b6d      	ldr	r3, [pc, #436]	; (80011a4 <tcpinit_thread+0x1d8>)
 8000ff0:	681b      	ldr	r3, [r3, #0]
 8000ff2:	2207      	movs	r2, #7
 8000ff4:	496c      	ldr	r1, [pc, #432]	; (80011a8 <tcpinit_thread+0x1dc>)
 8000ff6:	4618      	mov	r0, r3
 8000ff8:	f008 fbe0 	bl	80097bc <netconn_bind>
 8000ffc:	4603      	mov	r3, r0
 8000ffe:	73fb      	strb	r3, [r7, #15]

		if (err == ERR_OK)
 8001000:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001004:	2b00      	cmp	r3, #0
 8001006:	f040 80c4 	bne.w	8001192 <tcpinit_thread+0x1c6>
		{
			/* The desination IP adress of the computer */
			IP_ADDR4(&dest_addr, 192, 168, 12, 31);
 800100a:	4b68      	ldr	r3, [pc, #416]	; (80011ac <tcpinit_thread+0x1e0>)
 800100c:	4a68      	ldr	r2, [pc, #416]	; (80011b0 <tcpinit_thread+0x1e4>)
 800100e:	601a      	str	r2, [r3, #0]
			dest_port = 10;  // server port
 8001010:	4b68      	ldr	r3, [pc, #416]	; (80011b4 <tcpinit_thread+0x1e8>)
 8001012:	220a      	movs	r2, #10
 8001014:	801a      	strh	r2, [r3, #0]

			/* Connect to the TCP Server */
			connect_error = netconn_connect(conn, &dest_addr, dest_port);
 8001016:	4b63      	ldr	r3, [pc, #396]	; (80011a4 <tcpinit_thread+0x1d8>)
 8001018:	681b      	ldr	r3, [r3, #0]
 800101a:	4a66      	ldr	r2, [pc, #408]	; (80011b4 <tcpinit_thread+0x1e8>)
 800101c:	8812      	ldrh	r2, [r2, #0]
 800101e:	4963      	ldr	r1, [pc, #396]	; (80011ac <tcpinit_thread+0x1e0>)
 8001020:	4618      	mov	r0, r3
 8001022:	f008 fc03 	bl	800982c <netconn_connect>
 8001026:	4603      	mov	r3, r0
 8001028:	73bb      	strb	r3, [r7, #14]

			// If the connection to the server is established, the following will continue, else delete the connection
			if (connect_error == ERR_OK)
 800102a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800102e:	2b00      	cmp	r3, #0
 8001030:	f040 80a4 	bne.w	800117c <tcpinit_thread+0x1b0>
			{
				// Release the semaphore once the connection is successful
				sys_sem_signal(&tcpsem); // sem = 1
 8001034:	4860      	ldr	r0, [pc, #384]	; (80011b8 <tcpinit_thread+0x1ec>)
 8001036:	f015 fd39 	bl	8016aac <sys_sem_signal>
				//sys_mutex_unlock(&tcpmutex);
				while (1)
				{
					/* wait until the data is sent by the server */
					if (netconn_recv(conn, &buf) == ERR_OK)
 800103a:	4b5a      	ldr	r3, [pc, #360]	; (80011a4 <tcpinit_thread+0x1d8>)
 800103c:	681b      	ldr	r3, [r3, #0]
 800103e:	495f      	ldr	r1, [pc, #380]	; (80011bc <tcpinit_thread+0x1f0>)
 8001040:	4618      	mov	r0, r3
 8001042:	f008 fda7 	bl	8009b94 <netconn_recv>
 8001046:	4603      	mov	r3, r0
 8001048:	2b00      	cmp	r3, #0
 800104a:	d1f6      	bne.n	800103a <tcpinit_thread+0x6e>
					{
						/* Extract the address and port in case they are required */
						addr = netbuf_fromaddr(buf);  // get the address of the client
 800104c:	4b5b      	ldr	r3, [pc, #364]	; (80011bc <tcpinit_thread+0x1f0>)
 800104e:	681b      	ldr	r3, [r3, #0]
 8001050:	3308      	adds	r3, #8
 8001052:	4a5b      	ldr	r2, [pc, #364]	; (80011c0 <tcpinit_thread+0x1f4>)
 8001054:	6013      	str	r3, [r2, #0]
						port = netbuf_fromport(buf);  // get the Port of the client
 8001056:	4b59      	ldr	r3, [pc, #356]	; (80011bc <tcpinit_thread+0x1f0>)
 8001058:	681b      	ldr	r3, [r3, #0]
 800105a:	899a      	ldrh	r2, [r3, #12]
 800105c:	4b59      	ldr	r3, [pc, #356]	; (80011c4 <tcpinit_thread+0x1f8>)
 800105e:	801a      	strh	r2, [r3, #0]

						/* If there is some data remaining to be sent, the following process will continue */
						do
						{

							strncpy (msgc, buf->p->payload, buf->p->len);   // get the message from the server
 8001060:	4b56      	ldr	r3, [pc, #344]	; (80011bc <tcpinit_thread+0x1f0>)
 8001062:	681b      	ldr	r3, [r3, #0]
 8001064:	681b      	ldr	r3, [r3, #0]
 8001066:	6859      	ldr	r1, [r3, #4]
 8001068:	4b54      	ldr	r3, [pc, #336]	; (80011bc <tcpinit_thread+0x1f0>)
 800106a:	681b      	ldr	r3, [r3, #0]
 800106c:	681b      	ldr	r3, [r3, #0]
 800106e:	895b      	ldrh	r3, [r3, #10]
 8001070:	461a      	mov	r2, r3
 8001072:	4855      	ldr	r0, [pc, #340]	; (80011c8 <tcpinit_thread+0x1fc>)
 8001074:	f015 ff63 	bl	8016f3e <strncpy>

							// Or modify the message received, so that we can send it back to the server
							//sprintf (smsgc, "\"%s\" was sent by the Client\n", msgc);

							if(strcmp(msgc,"DRIVE") == 0) {
 8001078:	4954      	ldr	r1, [pc, #336]	; (80011cc <tcpinit_thread+0x200>)
 800107a:	4853      	ldr	r0, [pc, #332]	; (80011c8 <tcpinit_thread+0x1fc>)
 800107c:	f7ff f8b8 	bl	80001f0 <strcmp>
 8001080:	4603      	mov	r3, r0
 8001082:	2b00      	cmp	r3, #0
 8001084:	d106      	bne.n	8001094 <tcpinit_thread+0xc8>
								motor_right = MOTORFAST;
 8001086:	4b52      	ldr	r3, [pc, #328]	; (80011d0 <tcpinit_thread+0x204>)
 8001088:	2202      	movs	r2, #2
 800108a:	601a      	str	r2, [r3, #0]
								motor_left = MOTORFAST;
 800108c:	4b51      	ldr	r3, [pc, #324]	; (80011d4 <tcpinit_thread+0x208>)
 800108e:	2202      	movs	r2, #2
 8001090:	601a      	str	r2, [r3, #0]
 8001092:	e04b      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"LMSLOW") == 0) {
 8001094:	4950      	ldr	r1, [pc, #320]	; (80011d8 <tcpinit_thread+0x20c>)
 8001096:	484c      	ldr	r0, [pc, #304]	; (80011c8 <tcpinit_thread+0x1fc>)
 8001098:	f7ff f8aa 	bl	80001f0 <strcmp>
 800109c:	4603      	mov	r3, r0
 800109e:	2b00      	cmp	r3, #0
 80010a0:	d103      	bne.n	80010aa <tcpinit_thread+0xde>
								motor_right = MOTORSLOW;
 80010a2:	4b4b      	ldr	r3, [pc, #300]	; (80011d0 <tcpinit_thread+0x204>)
 80010a4:	2201      	movs	r2, #1
 80010a6:	601a      	str	r2, [r3, #0]
 80010a8:	e040      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"LMSTOP") == 0){
 80010aa:	494c      	ldr	r1, [pc, #304]	; (80011dc <tcpinit_thread+0x210>)
 80010ac:	4846      	ldr	r0, [pc, #280]	; (80011c8 <tcpinit_thread+0x1fc>)
 80010ae:	f7ff f89f 	bl	80001f0 <strcmp>
 80010b2:	4603      	mov	r3, r0
 80010b4:	2b00      	cmp	r3, #0
 80010b6:	d103      	bne.n	80010c0 <tcpinit_thread+0xf4>
								motor_right = MOTORSTOP;
 80010b8:	4b45      	ldr	r3, [pc, #276]	; (80011d0 <tcpinit_thread+0x204>)
 80010ba:	2200      	movs	r2, #0
 80010bc:	601a      	str	r2, [r3, #0]
 80010be:	e035      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"LMFAST") == 0){
 80010c0:	4947      	ldr	r1, [pc, #284]	; (80011e0 <tcpinit_thread+0x214>)
 80010c2:	4841      	ldr	r0, [pc, #260]	; (80011c8 <tcpinit_thread+0x1fc>)
 80010c4:	f7ff f894 	bl	80001f0 <strcmp>
 80010c8:	4603      	mov	r3, r0
 80010ca:	2b00      	cmp	r3, #0
 80010cc:	d103      	bne.n	80010d6 <tcpinit_thread+0x10a>
								motor_right = MOTORFAST;
 80010ce:	4b40      	ldr	r3, [pc, #256]	; (80011d0 <tcpinit_thread+0x204>)
 80010d0:	2202      	movs	r2, #2
 80010d2:	601a      	str	r2, [r3, #0]
 80010d4:	e02a      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"RMFAST") == 0){
 80010d6:	4943      	ldr	r1, [pc, #268]	; (80011e4 <tcpinit_thread+0x218>)
 80010d8:	483b      	ldr	r0, [pc, #236]	; (80011c8 <tcpinit_thread+0x1fc>)
 80010da:	f7ff f889 	bl	80001f0 <strcmp>
 80010de:	4603      	mov	r3, r0
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d103      	bne.n	80010ec <tcpinit_thread+0x120>
								motor_left	= MOTORFAST;
 80010e4:	4b3b      	ldr	r3, [pc, #236]	; (80011d4 <tcpinit_thread+0x208>)
 80010e6:	2202      	movs	r2, #2
 80010e8:	601a      	str	r2, [r3, #0]
 80010ea:	e01f      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"RMSLOW") == 0) {
 80010ec:	493e      	ldr	r1, [pc, #248]	; (80011e8 <tcpinit_thread+0x21c>)
 80010ee:	4836      	ldr	r0, [pc, #216]	; (80011c8 <tcpinit_thread+0x1fc>)
 80010f0:	f7ff f87e 	bl	80001f0 <strcmp>
 80010f4:	4603      	mov	r3, r0
 80010f6:	2b00      	cmp	r3, #0
 80010f8:	d103      	bne.n	8001102 <tcpinit_thread+0x136>
								motor_left = MOTORSLOW;
 80010fa:	4b36      	ldr	r3, [pc, #216]	; (80011d4 <tcpinit_thread+0x208>)
 80010fc:	2201      	movs	r2, #1
 80010fe:	601a      	str	r2, [r3, #0]
 8001100:	e014      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"RMSTOP") == 0){
 8001102:	493a      	ldr	r1, [pc, #232]	; (80011ec <tcpinit_thread+0x220>)
 8001104:	4830      	ldr	r0, [pc, #192]	; (80011c8 <tcpinit_thread+0x1fc>)
 8001106:	f7ff f873 	bl	80001f0 <strcmp>
 800110a:	4603      	mov	r3, r0
 800110c:	2b00      	cmp	r3, #0
 800110e:	d103      	bne.n	8001118 <tcpinit_thread+0x14c>
								motor_left	= MOTORSTOP;
 8001110:	4b30      	ldr	r3, [pc, #192]	; (80011d4 <tcpinit_thread+0x208>)
 8001112:	2200      	movs	r2, #0
 8001114:	601a      	str	r2, [r3, #0]
 8001116:	e009      	b.n	800112c <tcpinit_thread+0x160>
							}
							else if(strcmp(msgc,"TIME") == 0){
 8001118:	4935      	ldr	r1, [pc, #212]	; (80011f0 <tcpinit_thread+0x224>)
 800111a:	482b      	ldr	r0, [pc, #172]	; (80011c8 <tcpinit_thread+0x1fc>)
 800111c:	f7ff f868 	bl	80001f0 <strcmp>
 8001120:	4603      	mov	r3, r0
 8001122:	2b00      	cmp	r3, #0
 8001124:	d102      	bne.n	800112c <tcpinit_thread+0x160>
								time_flag = MOTORSLOW;
 8001126:	4b33      	ldr	r3, [pc, #204]	; (80011f4 <tcpinit_thread+0x228>)
 8001128:	2201      	movs	r2, #1
 800112a:	601a      	str	r2, [r3, #0]
							}

							if(motor_left == MOTORSTOP && motor_right == MOTORSTOP){
 800112c:	4b29      	ldr	r3, [pc, #164]	; (80011d4 <tcpinit_thread+0x208>)
 800112e:	681b      	ldr	r3, [r3, #0]
 8001130:	2b00      	cmp	r3, #0
 8001132:	d10a      	bne.n	800114a <tcpinit_thread+0x17e>
 8001134:	4b26      	ldr	r3, [pc, #152]	; (80011d0 <tcpinit_thread+0x204>)
 8001136:	681b      	ldr	r3, [r3, #0]
 8001138:	2b00      	cmp	r3, #0
 800113a:	d106      	bne.n	800114a <tcpinit_thread+0x17e>
								BEEP();
 800113c:	f000 f8ce 	bl	80012dc <BEEP>
								osDelay(50);
 8001140:	2032      	movs	r0, #50	; 0x32
 8001142:	f004 fca7 	bl	8005a94 <osDelay>
								BEEP();
 8001146:	f000 f8c9 	bl	80012dc <BEEP>
							}
							// semaphore must be taken before accessing the tcpsend function
							sys_arch_sem_wait(&tcpsem, 1000); // sem = 0
 800114a:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800114e:	481a      	ldr	r0, [pc, #104]	; (80011b8 <tcpinit_thread+0x1ec>)
 8001150:	f015 fc7b 	bl	8016a4a <sys_arch_sem_wait>

							// send the data to the TCP Server
							//tcpsend (smsgc);
							memset (msgc, '\0', 100);  // clear the buffer
 8001154:	2264      	movs	r2, #100	; 0x64
 8001156:	2100      	movs	r1, #0
 8001158:	481b      	ldr	r0, [pc, #108]	; (80011c8 <tcpinit_thread+0x1fc>)
 800115a:	f015 fee8 	bl	8016f2e <memset>
						}
						while (netbuf_next(buf) >0);
 800115e:	4b17      	ldr	r3, [pc, #92]	; (80011bc <tcpinit_thread+0x1f0>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	4618      	mov	r0, r3
 8001164:	f00a faaa 	bl	800b6bc <netbuf_next>
 8001168:	4603      	mov	r3, r0
 800116a:	2b00      	cmp	r3, #0
 800116c:	f73f af78 	bgt.w	8001060 <tcpinit_thread+0x94>

						netbuf_delete(buf);
 8001170:	4b12      	ldr	r3, [pc, #72]	; (80011bc <tcpinit_thread+0x1f0>)
 8001172:	681b      	ldr	r3, [r3, #0]
 8001174:	4618      	mov	r0, r3
 8001176:	f00a fa81 	bl	800b67c <netbuf_delete>
					if (netconn_recv(conn, &buf) == ERR_OK)
 800117a:	e75e      	b.n	800103a <tcpinit_thread+0x6e>
			}

			else
			{
				/* Close connection and discard connection identifier. */
				netconn_close(conn);
 800117c:	4b09      	ldr	r3, [pc, #36]	; (80011a4 <tcpinit_thread+0x1d8>)
 800117e:	681b      	ldr	r3, [r3, #0]
 8001180:	4618      	mov	r0, r3
 8001182:	f008 fe83 	bl	8009e8c <netconn_close>
				netconn_delete(conn);
 8001186:	4b07      	ldr	r3, [pc, #28]	; (80011a4 <tcpinit_thread+0x1d8>)
 8001188:	681b      	ldr	r3, [r3, #0]
 800118a:	4618      	mov	r0, r3
 800118c:	f008 fafa 	bl	8009784 <netconn_delete>
		{
			// if the binding wasn't successful, delete the netconn connection
			netconn_delete(conn);
		}
	}
}
 8001190:	e004      	b.n	800119c <tcpinit_thread+0x1d0>
			netconn_delete(conn);
 8001192:	4b04      	ldr	r3, [pc, #16]	; (80011a4 <tcpinit_thread+0x1d8>)
 8001194:	681b      	ldr	r3, [r3, #0]
 8001196:	4618      	mov	r0, r3
 8001198:	f008 faf4 	bl	8009784 <netconn_delete>
}
 800119c:	bf00      	nop
 800119e:	3710      	adds	r7, #16
 80011a0:	46bd      	mov	sp, r7
 80011a2:	bd80      	pop	{r7, pc}
 80011a4:	20000144 	.word	0x20000144
 80011a8:	0801b7e0 	.word	0x0801b7e0
 80011ac:	20000150 	.word	0x20000150
 80011b0:	1f0ca8c0 	.word	0x1f0ca8c0
 80011b4:	20000156 	.word	0x20000156
 80011b8:	20000294 	.word	0x20000294
 80011bc:	20000148 	.word	0x20000148
 80011c0:	2000014c 	.word	0x2000014c
 80011c4:	20000154 	.word	0x20000154
 80011c8:	20000158 	.word	0x20000158
 80011cc:	0801809c 	.word	0x0801809c
 80011d0:	2000028c 	.word	0x2000028c
 80011d4:	20000288 	.word	0x20000288
 80011d8:	080180a4 	.word	0x080180a4
 80011dc:	080180ac 	.word	0x080180ac
 80011e0:	080180b4 	.word	0x080180b4
 80011e4:	080180bc 	.word	0x080180bc
 80011e8:	080180c4 	.word	0x080180c4
 80011ec:	080180cc 	.word	0x080180cc
 80011f0:	080180d4 	.word	0x080180d4
 80011f4:	20000290 	.word	0x20000290

080011f8 <tcpsend>:

void tcpsend (char *data)
{
 80011f8:	b590      	push	{r4, r7, lr}
 80011fa:	b085      	sub	sp, #20
 80011fc:	af02      	add	r7, sp, #8
 80011fe:	6078      	str	r0, [r7, #4]
	// send the data to the connected connection
	netconn_write(conn, data, strlen(data), NETCONN_COPY);
 8001200:	4b09      	ldr	r3, [pc, #36]	; (8001228 <tcpsend+0x30>)
 8001202:	681c      	ldr	r4, [r3, #0]
 8001204:	6878      	ldr	r0, [r7, #4]
 8001206:	f7fe fffd 	bl	8000204 <strlen>
 800120a:	4602      	mov	r2, r0
 800120c:	2300      	movs	r3, #0
 800120e:	9300      	str	r3, [sp, #0]
 8001210:	2301      	movs	r3, #1
 8001212:	6879      	ldr	r1, [r7, #4]
 8001214:	4620      	mov	r0, r4
 8001216:	f008 fd37 	bl	8009c88 <netconn_write_partly>
	// relaese the semaphore
	sys_sem_signal(&tcpsem); // sem = 1
 800121a:	4804      	ldr	r0, [pc, #16]	; (800122c <tcpsend+0x34>)
 800121c:	f015 fc46 	bl	8016aac <sys_sem_signal>

}
 8001220:	bf00      	nop
 8001222:	370c      	adds	r7, #12
 8001224:	46bd      	mov	sp, r7
 8001226:	bd90      	pop	{r4, r7, pc}
 8001228:	20000144 	.word	0x20000144
 800122c:	20000294 	.word	0x20000294

08001230 <tcptime_thread>:


static void tcptime_thread (void *arg)
{
 8001230:	b580      	push	{r7, lr}
 8001232:	b082      	sub	sp, #8
 8001234:	af00      	add	r7, sp, #0
 8001236:	6078      	str	r0, [r7, #4]
	for (;;)
	{
		// semaphore must be taken before accessing the tcpsend function
		sys_arch_sem_wait(&tcpsem, 1000); // sem = 0
 8001238:	f44f 717a 	mov.w	r1, #1000	; 0x3e8
 800123c:	480e      	ldr	r0, [pc, #56]	; (8001278 <tcptime_thread+0x48>)
 800123e:	f015 fc04 	bl	8016a4a <sys_arch_sem_wait>
		// send the data to the server
		if(time_flag == 1){
 8001242:	4b0e      	ldr	r3, [pc, #56]	; (800127c <tcptime_thread+0x4c>)
 8001244:	681b      	ldr	r3, [r3, #0]
 8001246:	2b01      	cmp	r3, #1
 8001248:	d10c      	bne.n	8001264 <tcptime_thread+0x34>
			time_flag = 0;
 800124a:	4b0c      	ldr	r3, [pc, #48]	; (800127c <tcptime_thread+0x4c>)
 800124c:	2200      	movs	r2, #0
 800124e:	601a      	str	r2, [r3, #0]
			sprintf (smsgc, "dirve time is %d sec\n", indx);
 8001250:	4b0b      	ldr	r3, [pc, #44]	; (8001280 <tcptime_thread+0x50>)
 8001252:	681b      	ldr	r3, [r3, #0]
 8001254:	461a      	mov	r2, r3
 8001256:	490b      	ldr	r1, [pc, #44]	; (8001284 <tcptime_thread+0x54>)
 8001258:	480b      	ldr	r0, [pc, #44]	; (8001288 <tcptime_thread+0x58>)
 800125a:	f015 fddb 	bl	8016e14 <siprintf>
			tcpsend(smsgc);
 800125e:	480a      	ldr	r0, [pc, #40]	; (8001288 <tcptime_thread+0x58>)
 8001260:	f7ff ffca 	bl	80011f8 <tcpsend>
		}
		indx++;
 8001264:	4b06      	ldr	r3, [pc, #24]	; (8001280 <tcptime_thread+0x50>)
 8001266:	681b      	ldr	r3, [r3, #0]
 8001268:	3301      	adds	r3, #1
 800126a:	4a05      	ldr	r2, [pc, #20]	; (8001280 <tcptime_thread+0x50>)
 800126c:	6013      	str	r3, [r2, #0]
		osDelay(1000);
 800126e:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
 8001272:	f004 fc0f 	bl	8005a94 <osDelay>
		sys_arch_sem_wait(&tcpsem, 1000); // sem = 0
 8001276:	e7df      	b.n	8001238 <tcptime_thread+0x8>
 8001278:	20000294 	.word	0x20000294
 800127c:	20000290 	.word	0x20000290
 8001280:	20000284 	.word	0x20000284
 8001284:	080180dc 	.word	0x080180dc
 8001288:	200001bc 	.word	0x200001bc

0800128c <tcpclient_init>:
	}
}


void tcpclient_init (void)
{
 800128c:	b580      	push	{r7, lr}
 800128e:	b082      	sub	sp, #8
 8001290:	af02      	add	r7, sp, #8
	sys_sem_new(tcpsem, 2);  // the semaphore would prevent simultaneous access to tcpsend
 8001292:	4b0d      	ldr	r3, [pc, #52]	; (80012c8 <tcpclient_init+0x3c>)
 8001294:	681b      	ldr	r3, [r3, #0]
 8001296:	2102      	movs	r1, #2
 8001298:	4618      	mov	r0, r3
 800129a:	f015 fbb1 	bl	8016a00 <sys_sem_new>
	sys_thread_new("tcpinit_thread", tcpinit_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 800129e:	2318      	movs	r3, #24
 80012a0:	9300      	str	r3, [sp, #0]
 80012a2:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012a6:	2200      	movs	r2, #0
 80012a8:	4908      	ldr	r1, [pc, #32]	; (80012cc <tcpclient_init+0x40>)
 80012aa:	4809      	ldr	r0, [pc, #36]	; (80012d0 <tcpclient_init+0x44>)
 80012ac:	f015 fc74 	bl	8016b98 <sys_thread_new>
	sys_thread_new("tcptime_thread", tcptime_thread, NULL, DEFAULT_THREAD_STACKSIZE,osPriorityNormal);
 80012b0:	2318      	movs	r3, #24
 80012b2:	9300      	str	r3, [sp, #0]
 80012b4:	f44f 6380 	mov.w	r3, #1024	; 0x400
 80012b8:	2200      	movs	r2, #0
 80012ba:	4906      	ldr	r1, [pc, #24]	; (80012d4 <tcpclient_init+0x48>)
 80012bc:	4806      	ldr	r0, [pc, #24]	; (80012d8 <tcpclient_init+0x4c>)
 80012be:	f015 fc6b 	bl	8016b98 <sys_thread_new>
}
 80012c2:	bf00      	nop
 80012c4:	46bd      	mov	sp, r7
 80012c6:	bd80      	pop	{r7, pc}
 80012c8:	20000294 	.word	0x20000294
 80012cc:	08000fcd 	.word	0x08000fcd
 80012d0:	080180f4 	.word	0x080180f4
 80012d4:	08001231 	.word	0x08001231
 80012d8:	08018104 	.word	0x08018104

080012dc <BEEP>:

void BEEP(void){
 80012dc:	b580      	push	{r7, lr}
 80012de:	af00      	add	r7, sp, #0
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_SET );
 80012e0:	2201      	movs	r2, #1
 80012e2:	2104      	movs	r1, #4
 80012e4:	4806      	ldr	r0, [pc, #24]	; (8001300 <BEEP+0x24>)
 80012e6:	f001 fedb 	bl	80030a0 <HAL_GPIO_WritePin>
	osDelay(50);
 80012ea:	2032      	movs	r0, #50	; 0x32
 80012ec:	f004 fbd2 	bl	8005a94 <osDelay>
	HAL_GPIO_WritePin(GPIOE, GPIO_PIN_2, GPIO_PIN_RESET );
 80012f0:	2200      	movs	r2, #0
 80012f2:	2104      	movs	r1, #4
 80012f4:	4802      	ldr	r0, [pc, #8]	; (8001300 <BEEP+0x24>)
 80012f6:	f001 fed3 	bl	80030a0 <HAL_GPIO_WritePin>
}
 80012fa:	bf00      	nop
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	40021000 	.word	0x40021000

08001304 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler: 
  ldr   sp, =_estack       /* set stack pointer */
 8001304:	f8df d034 	ldr.w	sp, [pc, #52]	; 800133c <LoopFillZerobss+0x12>
 
/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001308:	480d      	ldr	r0, [pc, #52]	; (8001340 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800130a:	490e      	ldr	r1, [pc, #56]	; (8001344 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800130c:	4a0e      	ldr	r2, [pc, #56]	; (8001348 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800130e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001310:	e002      	b.n	8001318 <LoopCopyDataInit>

08001312 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001312:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001314:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001316:	3304      	adds	r3, #4

08001318 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001318:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800131a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800131c:	d3f9      	bcc.n	8001312 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800131e:	4a0b      	ldr	r2, [pc, #44]	; (800134c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8001320:	4c0b      	ldr	r4, [pc, #44]	; (8001350 <LoopFillZerobss+0x26>)
  movs r3, #0
 8001322:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001324:	e001      	b.n	800132a <LoopFillZerobss>

08001326 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001326:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001328:	3204      	adds	r2, #4

0800132a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800132a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800132c:	d3fb      	bcc.n	8001326 <FillZerobss>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800132e:	f7ff fe3b 	bl	8000fa8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8001332:	f015 feb3 	bl	801709c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001336:	f7ff f94d 	bl	80005d4 <main>
  bx  lr    
 800133a:	4770      	bx	lr
  ldr   sp, =_estack       /* set stack pointer */
 800133c:	20030000 	.word	0x20030000
  ldr r0, =_sdata
 8001340:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001344:	2000008c 	.word	0x2000008c
  ldr r2, =_sidata
 8001348:	0801b8e0 	.word	0x0801b8e0
  ldr r2, =_sbss
 800134c:	2000008c 	.word	0x2000008c
  ldr r4, =_ebss
 8001350:	2000faa0 	.word	0x2000faa0

08001354 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001354:	e7fe      	b.n	8001354 <ADC_IRQHandler>

08001356 <LAN8742_RegisterBusIO>:
  * @param  ioctx: holds device IO functions.  
  * @retval LAN8742_STATUS_OK  if OK
  *         LAN8742_STATUS_ERROR if missing mandatory function
  */
int32_t  LAN8742_RegisterBusIO(lan8742_Object_t *pObj, lan8742_IOCtx_t *ioctx)
{
 8001356:	b480      	push	{r7}
 8001358:	b083      	sub	sp, #12
 800135a:	af00      	add	r7, sp, #0
 800135c:	6078      	str	r0, [r7, #4]
 800135e:	6039      	str	r1, [r7, #0]
  if(!pObj || !ioctx->ReadReg || !ioctx->WriteReg || !ioctx->GetTick)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d00b      	beq.n	800137e <LAN8742_RegisterBusIO+0x28>
 8001366:	683b      	ldr	r3, [r7, #0]
 8001368:	68db      	ldr	r3, [r3, #12]
 800136a:	2b00      	cmp	r3, #0
 800136c:	d007      	beq.n	800137e <LAN8742_RegisterBusIO+0x28>
 800136e:	683b      	ldr	r3, [r7, #0]
 8001370:	689b      	ldr	r3, [r3, #8]
 8001372:	2b00      	cmp	r3, #0
 8001374:	d003      	beq.n	800137e <LAN8742_RegisterBusIO+0x28>
 8001376:	683b      	ldr	r3, [r7, #0]
 8001378:	691b      	ldr	r3, [r3, #16]
 800137a:	2b00      	cmp	r3, #0
 800137c:	d102      	bne.n	8001384 <LAN8742_RegisterBusIO+0x2e>
  {
    return LAN8742_STATUS_ERROR;
 800137e:	f04f 33ff 	mov.w	r3, #4294967295
 8001382:	e014      	b.n	80013ae <LAN8742_RegisterBusIO+0x58>
  }
  
  pObj->IO.Init = ioctx->Init;
 8001384:	683b      	ldr	r3, [r7, #0]
 8001386:	681a      	ldr	r2, [r3, #0]
 8001388:	687b      	ldr	r3, [r7, #4]
 800138a:	609a      	str	r2, [r3, #8]
  pObj->IO.DeInit = ioctx->DeInit;
 800138c:	683b      	ldr	r3, [r7, #0]
 800138e:	685a      	ldr	r2, [r3, #4]
 8001390:	687b      	ldr	r3, [r7, #4]
 8001392:	60da      	str	r2, [r3, #12]
  pObj->IO.ReadReg = ioctx->ReadReg;
 8001394:	683b      	ldr	r3, [r7, #0]
 8001396:	68da      	ldr	r2, [r3, #12]
 8001398:	687b      	ldr	r3, [r7, #4]
 800139a:	615a      	str	r2, [r3, #20]
  pObj->IO.WriteReg = ioctx->WriteReg;
 800139c:	683b      	ldr	r3, [r7, #0]
 800139e:	689a      	ldr	r2, [r3, #8]
 80013a0:	687b      	ldr	r3, [r7, #4]
 80013a2:	611a      	str	r2, [r3, #16]
  pObj->IO.GetTick = ioctx->GetTick;
 80013a4:	683b      	ldr	r3, [r7, #0]
 80013a6:	691a      	ldr	r2, [r3, #16]
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	619a      	str	r2, [r3, #24]
  
  return LAN8742_STATUS_OK;
 80013ac:	2300      	movs	r3, #0
}
 80013ae:	4618      	mov	r0, r3
 80013b0:	370c      	adds	r7, #12
 80013b2:	46bd      	mov	sp, r7
 80013b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80013b8:	4770      	bx	lr

080013ba <LAN8742_Init>:
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  *         LAN8742_STATUS_RESET_TIMEOUT if cannot perform a software reset
  */
 int32_t LAN8742_Init(lan8742_Object_t *pObj)
 {
 80013ba:	b580      	push	{r7, lr}
 80013bc:	b086      	sub	sp, #24
 80013be:	af00      	add	r7, sp, #0
 80013c0:	6078      	str	r0, [r7, #4]
   uint32_t tickstart = 0, regvalue = 0, addr = 0;
 80013c2:	2300      	movs	r3, #0
 80013c4:	60fb      	str	r3, [r7, #12]
 80013c6:	2300      	movs	r3, #0
 80013c8:	60bb      	str	r3, [r7, #8]
 80013ca:	2300      	movs	r3, #0
 80013cc:	617b      	str	r3, [r7, #20]
   int32_t status = LAN8742_STATUS_OK;
 80013ce:	2300      	movs	r3, #0
 80013d0:	613b      	str	r3, [r7, #16]
   
   if(pObj->Is_Initialized == 0)
 80013d2:	687b      	ldr	r3, [r7, #4]
 80013d4:	685b      	ldr	r3, [r3, #4]
 80013d6:	2b00      	cmp	r3, #0
 80013d8:	d17c      	bne.n	80014d4 <LAN8742_Init+0x11a>
   {
     if(pObj->IO.Init != 0)
 80013da:	687b      	ldr	r3, [r7, #4]
 80013dc:	689b      	ldr	r3, [r3, #8]
 80013de:	2b00      	cmp	r3, #0
 80013e0:	d002      	beq.n	80013e8 <LAN8742_Init+0x2e>
     {
       /* GPIO and Clocks initialization */
       pObj->IO.Init();
 80013e2:	687b      	ldr	r3, [r7, #4]
 80013e4:	689b      	ldr	r3, [r3, #8]
 80013e6:	4798      	blx	r3
     }
   
     /* for later check */
     pObj->DevAddr = LAN8742_MAX_DEV_ADDR + 1;
 80013e8:	687b      	ldr	r3, [r7, #4]
 80013ea:	2220      	movs	r2, #32
 80013ec:	601a      	str	r2, [r3, #0]
   
     /* Get the device address from special mode register */  
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 80013ee:	2300      	movs	r3, #0
 80013f0:	617b      	str	r3, [r7, #20]
 80013f2:	e01c      	b.n	800142e <LAN8742_Init+0x74>
     {
       if(pObj->IO.ReadReg(addr, LAN8742_SMR, &regvalue) < 0)
 80013f4:	687b      	ldr	r3, [r7, #4]
 80013f6:	695b      	ldr	r3, [r3, #20]
 80013f8:	f107 0208 	add.w	r2, r7, #8
 80013fc:	2112      	movs	r1, #18
 80013fe:	6978      	ldr	r0, [r7, #20]
 8001400:	4798      	blx	r3
 8001402:	4603      	mov	r3, r0
 8001404:	2b00      	cmp	r3, #0
 8001406:	da03      	bge.n	8001410 <LAN8742_Init+0x56>
       { 
         status = LAN8742_STATUS_READ_ERROR;
 8001408:	f06f 0304 	mvn.w	r3, #4
 800140c:	613b      	str	r3, [r7, #16]
         /* Can't read from this device address 
            continue with next address */
         continue;
 800140e:	e00b      	b.n	8001428 <LAN8742_Init+0x6e>
       }
     
       if((regvalue & LAN8742_SMR_PHY_ADDR) == addr)
 8001410:	68bb      	ldr	r3, [r7, #8]
 8001412:	f003 031f 	and.w	r3, r3, #31
 8001416:	697a      	ldr	r2, [r7, #20]
 8001418:	429a      	cmp	r2, r3
 800141a:	d105      	bne.n	8001428 <LAN8742_Init+0x6e>
       {
         pObj->DevAddr = addr;
 800141c:	687b      	ldr	r3, [r7, #4]
 800141e:	697a      	ldr	r2, [r7, #20]
 8001420:	601a      	str	r2, [r3, #0]
         status = LAN8742_STATUS_OK;
 8001422:	2300      	movs	r3, #0
 8001424:	613b      	str	r3, [r7, #16]
         break;
 8001426:	e005      	b.n	8001434 <LAN8742_Init+0x7a>
     for(addr = 0; addr <= LAN8742_MAX_DEV_ADDR; addr ++)
 8001428:	697b      	ldr	r3, [r7, #20]
 800142a:	3301      	adds	r3, #1
 800142c:	617b      	str	r3, [r7, #20]
 800142e:	697b      	ldr	r3, [r7, #20]
 8001430:	2b1f      	cmp	r3, #31
 8001432:	d9df      	bls.n	80013f4 <LAN8742_Init+0x3a>
       }
     }
   
     if(pObj->DevAddr > LAN8742_MAX_DEV_ADDR)
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	2b1f      	cmp	r3, #31
 800143a:	d902      	bls.n	8001442 <LAN8742_Init+0x88>
     {
       status = LAN8742_STATUS_ADDRESS_ERROR;
 800143c:	f06f 0302 	mvn.w	r3, #2
 8001440:	613b      	str	r3, [r7, #16]
     }
     
     /* if device address is matched */
     if(status == LAN8742_STATUS_OK)
 8001442:	693b      	ldr	r3, [r7, #16]
 8001444:	2b00      	cmp	r3, #0
 8001446:	d145      	bne.n	80014d4 <LAN8742_Init+0x11a>
     {
       /* set a software reset  */
       if(pObj->IO.WriteReg(pObj->DevAddr, LAN8742_BCR, LAN8742_BCR_SOFT_RESET) >= 0)
 8001448:	687b      	ldr	r3, [r7, #4]
 800144a:	691b      	ldr	r3, [r3, #16]
 800144c:	687a      	ldr	r2, [r7, #4]
 800144e:	6810      	ldr	r0, [r2, #0]
 8001450:	f44f 4200 	mov.w	r2, #32768	; 0x8000
 8001454:	2100      	movs	r1, #0
 8001456:	4798      	blx	r3
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	db37      	blt.n	80014ce <LAN8742_Init+0x114>
       { 
         /* get software reset status */
         if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) >= 0)
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	695b      	ldr	r3, [r3, #20]
 8001462:	687a      	ldr	r2, [r7, #4]
 8001464:	6810      	ldr	r0, [r2, #0]
 8001466:	f107 0208 	add.w	r2, r7, #8
 800146a:	2100      	movs	r1, #0
 800146c:	4798      	blx	r3
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	db28      	blt.n	80014c6 <LAN8742_Init+0x10c>
         { 
           tickstart = pObj->IO.GetTick();
 8001474:	687b      	ldr	r3, [r7, #4]
 8001476:	699b      	ldr	r3, [r3, #24]
 8001478:	4798      	blx	r3
 800147a:	4603      	mov	r3, r0
 800147c:	60fb      	str	r3, [r7, #12]
           
           /* wait until software reset is done or timeout occured  */
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 800147e:	e01c      	b.n	80014ba <LAN8742_Init+0x100>
           {
             if((pObj->IO.GetTick() - tickstart) <= LAN8742_SW_RESET_TO)
 8001480:	687b      	ldr	r3, [r7, #4]
 8001482:	699b      	ldr	r3, [r3, #24]
 8001484:	4798      	blx	r3
 8001486:	4603      	mov	r3, r0
 8001488:	461a      	mov	r2, r3
 800148a:	68fb      	ldr	r3, [r7, #12]
 800148c:	1ad3      	subs	r3, r2, r3
 800148e:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 8001492:	d80e      	bhi.n	80014b2 <LAN8742_Init+0xf8>
             {
               if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &regvalue) < 0)
 8001494:	687b      	ldr	r3, [r7, #4]
 8001496:	695b      	ldr	r3, [r3, #20]
 8001498:	687a      	ldr	r2, [r7, #4]
 800149a:	6810      	ldr	r0, [r2, #0]
 800149c:	f107 0208 	add.w	r2, r7, #8
 80014a0:	2100      	movs	r1, #0
 80014a2:	4798      	blx	r3
 80014a4:	4603      	mov	r3, r0
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	da07      	bge.n	80014ba <LAN8742_Init+0x100>
               { 
                 status = LAN8742_STATUS_READ_ERROR;
 80014aa:	f06f 0304 	mvn.w	r3, #4
 80014ae:	613b      	str	r3, [r7, #16]
                 break;
 80014b0:	e010      	b.n	80014d4 <LAN8742_Init+0x11a>
               }
             }
             else
             {
               status = LAN8742_STATUS_RESET_TIMEOUT;
 80014b2:	f06f 0301 	mvn.w	r3, #1
 80014b6:	613b      	str	r3, [r7, #16]
               break;
 80014b8:	e00c      	b.n	80014d4 <LAN8742_Init+0x11a>
           while(regvalue & LAN8742_BCR_SOFT_RESET)
 80014ba:	68bb      	ldr	r3, [r7, #8]
 80014bc:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 80014c0:	2b00      	cmp	r3, #0
 80014c2:	d1dd      	bne.n	8001480 <LAN8742_Init+0xc6>
 80014c4:	e006      	b.n	80014d4 <LAN8742_Init+0x11a>
             }
           } 
         }
         else
         {
           status = LAN8742_STATUS_READ_ERROR;
 80014c6:	f06f 0304 	mvn.w	r3, #4
 80014ca:	613b      	str	r3, [r7, #16]
 80014cc:	e002      	b.n	80014d4 <LAN8742_Init+0x11a>
         }
       }
       else
       {
         status = LAN8742_STATUS_WRITE_ERROR;
 80014ce:	f06f 0303 	mvn.w	r3, #3
 80014d2:	613b      	str	r3, [r7, #16]
       }
     }
   }
      
   if(status == LAN8742_STATUS_OK)
 80014d4:	693b      	ldr	r3, [r7, #16]
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d112      	bne.n	8001500 <LAN8742_Init+0x146>
   {
     tickstart =  pObj->IO.GetTick();
 80014da:	687b      	ldr	r3, [r7, #4]
 80014dc:	699b      	ldr	r3, [r3, #24]
 80014de:	4798      	blx	r3
 80014e0:	4603      	mov	r3, r0
 80014e2:	60fb      	str	r3, [r7, #12]
     
     /* Wait for 2s to perform initialization */
     while((pObj->IO.GetTick() - tickstart) <= LAN8742_INIT_TO)
 80014e4:	bf00      	nop
 80014e6:	687b      	ldr	r3, [r7, #4]
 80014e8:	699b      	ldr	r3, [r3, #24]
 80014ea:	4798      	blx	r3
 80014ec:	4603      	mov	r3, r0
 80014ee:	461a      	mov	r2, r3
 80014f0:	68fb      	ldr	r3, [r7, #12]
 80014f2:	1ad3      	subs	r3, r2, r3
 80014f4:	f5b3 6ffa 	cmp.w	r3, #2000	; 0x7d0
 80014f8:	d9f5      	bls.n	80014e6 <LAN8742_Init+0x12c>
     {
     }
     pObj->Is_Initialized = 1;
 80014fa:	687b      	ldr	r3, [r7, #4]
 80014fc:	2201      	movs	r2, #1
 80014fe:	605a      	str	r2, [r3, #4]
   }
   
   return status;
 8001500:	693b      	ldr	r3, [r7, #16]
 }
 8001502:	4618      	mov	r0, r3
 8001504:	3718      	adds	r7, #24
 8001506:	46bd      	mov	sp, r7
 8001508:	bd80      	pop	{r7, pc}

0800150a <LAN8742_GetLinkState>:
  *         LAN8742_STATUS_10MBITS_HALFDUPLEX  if 10Mb/s HD       
  *         LAN8742_STATUS_READ_ERROR if connot read register
  *         LAN8742_STATUS_WRITE_ERROR if connot write to register
  */
int32_t LAN8742_GetLinkState(lan8742_Object_t *pObj)
{
 800150a:	b580      	push	{r7, lr}
 800150c:	b084      	sub	sp, #16
 800150e:	af00      	add	r7, sp, #0
 8001510:	6078      	str	r0, [r7, #4]
  uint32_t readval = 0;
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
  
  /* Read Status register  */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001516:	687b      	ldr	r3, [r7, #4]
 8001518:	695b      	ldr	r3, [r3, #20]
 800151a:	687a      	ldr	r2, [r7, #4]
 800151c:	6810      	ldr	r0, [r2, #0]
 800151e:	f107 020c 	add.w	r2, r7, #12
 8001522:	2101      	movs	r1, #1
 8001524:	4798      	blx	r3
 8001526:	4603      	mov	r3, r0
 8001528:	2b00      	cmp	r3, #0
 800152a:	da02      	bge.n	8001532 <LAN8742_GetLinkState+0x28>
  {
    return LAN8742_STATUS_READ_ERROR;
 800152c:	f06f 0304 	mvn.w	r3, #4
 8001530:	e06e      	b.n	8001610 <LAN8742_GetLinkState+0x106>
  }
  
  /* Read Status register again */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BSR, &readval) < 0)
 8001532:	687b      	ldr	r3, [r7, #4]
 8001534:	695b      	ldr	r3, [r3, #20]
 8001536:	687a      	ldr	r2, [r7, #4]
 8001538:	6810      	ldr	r0, [r2, #0]
 800153a:	f107 020c 	add.w	r2, r7, #12
 800153e:	2101      	movs	r1, #1
 8001540:	4798      	blx	r3
 8001542:	4603      	mov	r3, r0
 8001544:	2b00      	cmp	r3, #0
 8001546:	da02      	bge.n	800154e <LAN8742_GetLinkState+0x44>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001548:	f06f 0304 	mvn.w	r3, #4
 800154c:	e060      	b.n	8001610 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BSR_LINK_STATUS) == 0)
 800154e:	68fb      	ldr	r3, [r7, #12]
 8001550:	f003 0304 	and.w	r3, r3, #4
 8001554:	2b00      	cmp	r3, #0
 8001556:	d101      	bne.n	800155c <LAN8742_GetLinkState+0x52>
  {
    /* Return Link Down status */
    return LAN8742_STATUS_LINK_DOWN;    
 8001558:	2301      	movs	r3, #1
 800155a:	e059      	b.n	8001610 <LAN8742_GetLinkState+0x106>
  }
  
  /* Check Auto negotiaition */
  if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_BCR, &readval) < 0)
 800155c:	687b      	ldr	r3, [r7, #4]
 800155e:	695b      	ldr	r3, [r3, #20]
 8001560:	687a      	ldr	r2, [r7, #4]
 8001562:	6810      	ldr	r0, [r2, #0]
 8001564:	f107 020c 	add.w	r2, r7, #12
 8001568:	2100      	movs	r1, #0
 800156a:	4798      	blx	r3
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	da02      	bge.n	8001578 <LAN8742_GetLinkState+0x6e>
  {
    return LAN8742_STATUS_READ_ERROR;
 8001572:	f06f 0304 	mvn.w	r3, #4
 8001576:	e04b      	b.n	8001610 <LAN8742_GetLinkState+0x106>
  }
  
  if((readval & LAN8742_BCR_AUTONEGO_EN) != LAN8742_BCR_AUTONEGO_EN)
 8001578:	68fb      	ldr	r3, [r7, #12]
 800157a:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 800157e:	2b00      	cmp	r3, #0
 8001580:	d11b      	bne.n	80015ba <LAN8742_GetLinkState+0xb0>
  {
    if(((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT) && ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)) 
 8001582:	68fb      	ldr	r3, [r7, #12]
 8001584:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 8001588:	2b00      	cmp	r3, #0
 800158a:	d006      	beq.n	800159a <LAN8742_GetLinkState+0x90>
 800158c:	68fb      	ldr	r3, [r7, #12]
 800158e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001592:	2b00      	cmp	r3, #0
 8001594:	d001      	beq.n	800159a <LAN8742_GetLinkState+0x90>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 8001596:	2302      	movs	r3, #2
 8001598:	e03a      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_BCR_SPEED_SELECT) == LAN8742_BCR_SPEED_SELECT)
 800159a:	68fb      	ldr	r3, [r7, #12]
 800159c:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80015a0:	2b00      	cmp	r3, #0
 80015a2:	d001      	beq.n	80015a8 <LAN8742_GetLinkState+0x9e>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015a4:	2303      	movs	r3, #3
 80015a6:	e033      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }        
    else if ((readval & LAN8742_BCR_DUPLEX_MODE) == LAN8742_BCR_DUPLEX_MODE)
 80015a8:	68fb      	ldr	r3, [r7, #12]
 80015aa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80015ae:	2b00      	cmp	r3, #0
 80015b0:	d001      	beq.n	80015b6 <LAN8742_GetLinkState+0xac>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 80015b2:	2304      	movs	r3, #4
 80015b4:	e02c      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 80015b6:	2305      	movs	r3, #5
 80015b8:	e02a      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }  		
  }
  else /* Auto Nego enabled */
  {
    if(pObj->IO.ReadReg(pObj->DevAddr, LAN8742_PHYSCSR, &readval) < 0)
 80015ba:	687b      	ldr	r3, [r7, #4]
 80015bc:	695b      	ldr	r3, [r3, #20]
 80015be:	687a      	ldr	r2, [r7, #4]
 80015c0:	6810      	ldr	r0, [r2, #0]
 80015c2:	f107 020c 	add.w	r2, r7, #12
 80015c6:	211f      	movs	r1, #31
 80015c8:	4798      	blx	r3
 80015ca:	4603      	mov	r3, r0
 80015cc:	2b00      	cmp	r3, #0
 80015ce:	da02      	bge.n	80015d6 <LAN8742_GetLinkState+0xcc>
    {
      return LAN8742_STATUS_READ_ERROR;
 80015d0:	f06f 0304 	mvn.w	r3, #4
 80015d4:	e01c      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    
    /* Check if auto nego not done */
    if((readval & LAN8742_PHYSCSR_AUTONEGO_DONE) == 0)
 80015d6:	68fb      	ldr	r3, [r7, #12]
 80015d8:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 80015dc:	2b00      	cmp	r3, #0
 80015de:	d101      	bne.n	80015e4 <LAN8742_GetLinkState+0xda>
    {
      return LAN8742_STATUS_AUTONEGO_NOTDONE;
 80015e0:	2306      	movs	r3, #6
 80015e2:	e015      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    
    if((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_FD)
 80015e4:	68fb      	ldr	r3, [r7, #12]
 80015e6:	f003 031c 	and.w	r3, r3, #28
 80015ea:	2b18      	cmp	r3, #24
 80015ec:	d101      	bne.n	80015f2 <LAN8742_GetLinkState+0xe8>
    {
      return LAN8742_STATUS_100MBITS_FULLDUPLEX;
 80015ee:	2302      	movs	r3, #2
 80015f0:	e00e      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_100BTX_HD)
 80015f2:	68fb      	ldr	r3, [r7, #12]
 80015f4:	f003 031c 	and.w	r3, r3, #28
 80015f8:	2b08      	cmp	r3, #8
 80015fa:	d101      	bne.n	8001600 <LAN8742_GetLinkState+0xf6>
    {
      return LAN8742_STATUS_100MBITS_HALFDUPLEX;
 80015fc:	2303      	movs	r3, #3
 80015fe:	e007      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    else if ((readval & LAN8742_PHYSCSR_HCDSPEEDMASK) == LAN8742_PHYSCSR_10BT_FD)
 8001600:	68fb      	ldr	r3, [r7, #12]
 8001602:	f003 031c 	and.w	r3, r3, #28
 8001606:	2b14      	cmp	r3, #20
 8001608:	d101      	bne.n	800160e <LAN8742_GetLinkState+0x104>
    {
      return LAN8742_STATUS_10MBITS_FULLDUPLEX;
 800160a:	2304      	movs	r3, #4
 800160c:	e000      	b.n	8001610 <LAN8742_GetLinkState+0x106>
    }
    else
    {
      return LAN8742_STATUS_10MBITS_HALFDUPLEX;
 800160e:	2305      	movs	r3, #5
    }				
  }
}
 8001610:	4618      	mov	r0, r3
 8001612:	3710      	adds	r7, #16
 8001614:	46bd      	mov	sp, r7
 8001616:	bd80      	pop	{r7, pc}

08001618 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001618:	b580      	push	{r7, lr}
 800161a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800161c:	4b0e      	ldr	r3, [pc, #56]	; (8001658 <HAL_Init+0x40>)
 800161e:	681b      	ldr	r3, [r3, #0]
 8001620:	4a0d      	ldr	r2, [pc, #52]	; (8001658 <HAL_Init+0x40>)
 8001622:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8001626:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_Init+0x40>)
 800162a:	681b      	ldr	r3, [r3, #0]
 800162c:	4a0a      	ldr	r2, [pc, #40]	; (8001658 <HAL_Init+0x40>)
 800162e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8001632:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001634:	4b08      	ldr	r3, [pc, #32]	; (8001658 <HAL_Init+0x40>)
 8001636:	681b      	ldr	r3, [r3, #0]
 8001638:	4a07      	ldr	r2, [pc, #28]	; (8001658 <HAL_Init+0x40>)
 800163a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800163e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001640:	2003      	movs	r0, #3
 8001642:	f000 f8fc 	bl	800183e <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001646:	200f      	movs	r0, #15
 8001648:	f7ff fb18 	bl	8000c7c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800164c:	f7ff fa88 	bl	8000b60 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001650:	2300      	movs	r3, #0
}
 8001652:	4618      	mov	r0, r3
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	40023c00 	.word	0x40023c00

0800165c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800165c:	b480      	push	{r7}
 800165e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001660:	4b06      	ldr	r3, [pc, #24]	; (800167c <HAL_IncTick+0x20>)
 8001662:	781b      	ldrb	r3, [r3, #0]
 8001664:	461a      	mov	r2, r3
 8001666:	4b06      	ldr	r3, [pc, #24]	; (8001680 <HAL_IncTick+0x24>)
 8001668:	681b      	ldr	r3, [r3, #0]
 800166a:	4413      	add	r3, r2
 800166c:	4a04      	ldr	r2, [pc, #16]	; (8001680 <HAL_IncTick+0x24>)
 800166e:	6013      	str	r3, [r2, #0]
}
 8001670:	bf00      	nop
 8001672:	46bd      	mov	sp, r7
 8001674:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001678:	4770      	bx	lr
 800167a:	bf00      	nop
 800167c:	20000008 	.word	0x20000008
 8001680:	20000298 	.word	0x20000298

08001684 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001684:	b480      	push	{r7}
 8001686:	af00      	add	r7, sp, #0
  return uwTick;
 8001688:	4b03      	ldr	r3, [pc, #12]	; (8001698 <HAL_GetTick+0x14>)
 800168a:	681b      	ldr	r3, [r3, #0]
}
 800168c:	4618      	mov	r0, r3
 800168e:	46bd      	mov	sp, r7
 8001690:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001694:	4770      	bx	lr
 8001696:	bf00      	nop
 8001698:	20000298 	.word	0x20000298

0800169c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800169c:	b580      	push	{r7, lr}
 800169e:	b084      	sub	sp, #16
 80016a0:	af00      	add	r7, sp, #0
 80016a2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80016a4:	f7ff ffee 	bl	8001684 <HAL_GetTick>
 80016a8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80016aa:	687b      	ldr	r3, [r7, #4]
 80016ac:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80016ae:	68fb      	ldr	r3, [r7, #12]
 80016b0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80016b4:	d005      	beq.n	80016c2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80016b6:	4b0a      	ldr	r3, [pc, #40]	; (80016e0 <HAL_Delay+0x44>)
 80016b8:	781b      	ldrb	r3, [r3, #0]
 80016ba:	461a      	mov	r2, r3
 80016bc:	68fb      	ldr	r3, [r7, #12]
 80016be:	4413      	add	r3, r2
 80016c0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80016c2:	bf00      	nop
 80016c4:	f7ff ffde 	bl	8001684 <HAL_GetTick>
 80016c8:	4602      	mov	r2, r0
 80016ca:	68bb      	ldr	r3, [r7, #8]
 80016cc:	1ad3      	subs	r3, r2, r3
 80016ce:	68fa      	ldr	r2, [r7, #12]
 80016d0:	429a      	cmp	r2, r3
 80016d2:	d8f7      	bhi.n	80016c4 <HAL_Delay+0x28>
  {
  }
}
 80016d4:	bf00      	nop
 80016d6:	bf00      	nop
 80016d8:	3710      	adds	r7, #16
 80016da:	46bd      	mov	sp, r7
 80016dc:	bd80      	pop	{r7, pc}
 80016de:	bf00      	nop
 80016e0:	20000008 	.word	0x20000008

080016e4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 80016e4:	b480      	push	{r7}
 80016e6:	b085      	sub	sp, #20
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	f003 0307 	and.w	r3, r3, #7
 80016f2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 80016f4:	4b0c      	ldr	r3, [pc, #48]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 80016f6:	68db      	ldr	r3, [r3, #12]
 80016f8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 80016fa:	68ba      	ldr	r2, [r7, #8]
 80016fc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8001700:	4013      	ands	r3, r2
 8001702:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001704:	68fb      	ldr	r3, [r7, #12]
 8001706:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001708:	68bb      	ldr	r3, [r7, #8]
 800170a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800170c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8001710:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8001714:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001716:	4a04      	ldr	r2, [pc, #16]	; (8001728 <__NVIC_SetPriorityGrouping+0x44>)
 8001718:	68bb      	ldr	r3, [r7, #8]
 800171a:	60d3      	str	r3, [r2, #12]
}
 800171c:	bf00      	nop
 800171e:	3714      	adds	r7, #20
 8001720:	46bd      	mov	sp, r7
 8001722:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001726:	4770      	bx	lr
 8001728:	e000ed00 	.word	0xe000ed00

0800172c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 800172c:	b480      	push	{r7}
 800172e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001730:	4b04      	ldr	r3, [pc, #16]	; (8001744 <__NVIC_GetPriorityGrouping+0x18>)
 8001732:	68db      	ldr	r3, [r3, #12]
 8001734:	0a1b      	lsrs	r3, r3, #8
 8001736:	f003 0307 	and.w	r3, r3, #7
}
 800173a:	4618      	mov	r0, r3
 800173c:	46bd      	mov	sp, r7
 800173e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001742:	4770      	bx	lr
 8001744:	e000ed00 	.word	0xe000ed00

08001748 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001748:	b480      	push	{r7}
 800174a:	b083      	sub	sp, #12
 800174c:	af00      	add	r7, sp, #0
 800174e:	4603      	mov	r3, r0
 8001750:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001752:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001756:	2b00      	cmp	r3, #0
 8001758:	db0b      	blt.n	8001772 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800175a:	79fb      	ldrb	r3, [r7, #7]
 800175c:	f003 021f 	and.w	r2, r3, #31
 8001760:	4907      	ldr	r1, [pc, #28]	; (8001780 <__NVIC_EnableIRQ+0x38>)
 8001762:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001766:	095b      	lsrs	r3, r3, #5
 8001768:	2001      	movs	r0, #1
 800176a:	fa00 f202 	lsl.w	r2, r0, r2
 800176e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8001772:	bf00      	nop
 8001774:	370c      	adds	r7, #12
 8001776:	46bd      	mov	sp, r7
 8001778:	f85d 7b04 	ldr.w	r7, [sp], #4
 800177c:	4770      	bx	lr
 800177e:	bf00      	nop
 8001780:	e000e100 	.word	0xe000e100

08001784 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8001784:	b480      	push	{r7}
 8001786:	b083      	sub	sp, #12
 8001788:	af00      	add	r7, sp, #0
 800178a:	4603      	mov	r3, r0
 800178c:	6039      	str	r1, [r7, #0]
 800178e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001790:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001794:	2b00      	cmp	r3, #0
 8001796:	db0a      	blt.n	80017ae <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8001798:	683b      	ldr	r3, [r7, #0]
 800179a:	b2da      	uxtb	r2, r3
 800179c:	490c      	ldr	r1, [pc, #48]	; (80017d0 <__NVIC_SetPriority+0x4c>)
 800179e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80017a2:	0112      	lsls	r2, r2, #4
 80017a4:	b2d2      	uxtb	r2, r2
 80017a6:	440b      	add	r3, r1
 80017a8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 80017ac:	e00a      	b.n	80017c4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80017ae:	683b      	ldr	r3, [r7, #0]
 80017b0:	b2da      	uxtb	r2, r3
 80017b2:	4908      	ldr	r1, [pc, #32]	; (80017d4 <__NVIC_SetPriority+0x50>)
 80017b4:	79fb      	ldrb	r3, [r7, #7]
 80017b6:	f003 030f 	and.w	r3, r3, #15
 80017ba:	3b04      	subs	r3, #4
 80017bc:	0112      	lsls	r2, r2, #4
 80017be:	b2d2      	uxtb	r2, r2
 80017c0:	440b      	add	r3, r1
 80017c2:	761a      	strb	r2, [r3, #24]
}
 80017c4:	bf00      	nop
 80017c6:	370c      	adds	r7, #12
 80017c8:	46bd      	mov	sp, r7
 80017ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017ce:	4770      	bx	lr
 80017d0:	e000e100 	.word	0xe000e100
 80017d4:	e000ed00 	.word	0xe000ed00

080017d8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 80017d8:	b480      	push	{r7}
 80017da:	b089      	sub	sp, #36	; 0x24
 80017dc:	af00      	add	r7, sp, #0
 80017de:	60f8      	str	r0, [r7, #12]
 80017e0:	60b9      	str	r1, [r7, #8]
 80017e2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80017e4:	68fb      	ldr	r3, [r7, #12]
 80017e6:	f003 0307 	and.w	r3, r3, #7
 80017ea:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80017ec:	69fb      	ldr	r3, [r7, #28]
 80017ee:	f1c3 0307 	rsb	r3, r3, #7
 80017f2:	2b04      	cmp	r3, #4
 80017f4:	bf28      	it	cs
 80017f6:	2304      	movcs	r3, #4
 80017f8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80017fa:	69fb      	ldr	r3, [r7, #28]
 80017fc:	3304      	adds	r3, #4
 80017fe:	2b06      	cmp	r3, #6
 8001800:	d902      	bls.n	8001808 <NVIC_EncodePriority+0x30>
 8001802:	69fb      	ldr	r3, [r7, #28]
 8001804:	3b03      	subs	r3, #3
 8001806:	e000      	b.n	800180a <NVIC_EncodePriority+0x32>
 8001808:	2300      	movs	r3, #0
 800180a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 800180c:	f04f 32ff 	mov.w	r2, #4294967295
 8001810:	69bb      	ldr	r3, [r7, #24]
 8001812:	fa02 f303 	lsl.w	r3, r2, r3
 8001816:	43da      	mvns	r2, r3
 8001818:	68bb      	ldr	r3, [r7, #8]
 800181a:	401a      	ands	r2, r3
 800181c:	697b      	ldr	r3, [r7, #20]
 800181e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8001820:	f04f 31ff 	mov.w	r1, #4294967295
 8001824:	697b      	ldr	r3, [r7, #20]
 8001826:	fa01 f303 	lsl.w	r3, r1, r3
 800182a:	43d9      	mvns	r1, r3
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8001830:	4313      	orrs	r3, r2
         );
}
 8001832:	4618      	mov	r0, r3
 8001834:	3724      	adds	r7, #36	; 0x24
 8001836:	46bd      	mov	sp, r7
 8001838:	f85d 7b04 	ldr.w	r7, [sp], #4
 800183c:	4770      	bx	lr

0800183e <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800183e:	b580      	push	{r7, lr}
 8001840:	b082      	sub	sp, #8
 8001842:	af00      	add	r7, sp, #0
 8001844:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8001846:	6878      	ldr	r0, [r7, #4]
 8001848:	f7ff ff4c 	bl	80016e4 <__NVIC_SetPriorityGrouping>
}
 800184c:	bf00      	nop
 800184e:	3708      	adds	r7, #8
 8001850:	46bd      	mov	sp, r7
 8001852:	bd80      	pop	{r7, pc}

08001854 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8001854:	b580      	push	{r7, lr}
 8001856:	b086      	sub	sp, #24
 8001858:	af00      	add	r7, sp, #0
 800185a:	4603      	mov	r3, r0
 800185c:	60b9      	str	r1, [r7, #8]
 800185e:	607a      	str	r2, [r7, #4]
 8001860:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8001862:	2300      	movs	r3, #0
 8001864:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8001866:	f7ff ff61 	bl	800172c <__NVIC_GetPriorityGrouping>
 800186a:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800186c:	687a      	ldr	r2, [r7, #4]
 800186e:	68b9      	ldr	r1, [r7, #8]
 8001870:	6978      	ldr	r0, [r7, #20]
 8001872:	f7ff ffb1 	bl	80017d8 <NVIC_EncodePriority>
 8001876:	4602      	mov	r2, r0
 8001878:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800187c:	4611      	mov	r1, r2
 800187e:	4618      	mov	r0, r3
 8001880:	f7ff ff80 	bl	8001784 <__NVIC_SetPriority>
}
 8001884:	bf00      	nop
 8001886:	3718      	adds	r7, #24
 8001888:	46bd      	mov	sp, r7
 800188a:	bd80      	pop	{r7, pc}

0800188c <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b082      	sub	sp, #8
 8001890:	af00      	add	r7, sp, #0
 8001892:	4603      	mov	r3, r0
 8001894:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8001896:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800189a:	4618      	mov	r0, r3
 800189c:	f7ff ff54 	bl	8001748 <__NVIC_EnableIRQ>
}
 80018a0:	bf00      	nop
 80018a2:	3708      	adds	r7, #8
 80018a4:	46bd      	mov	sp, r7
 80018a6:	bd80      	pop	{r7, pc}

080018a8 <HAL_ETH_Init>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Init(ETH_HandleTypeDef *heth)
{
 80018a8:	b580      	push	{r7, lr}
 80018aa:	b084      	sub	sp, #16
 80018ac:	af00      	add	r7, sp, #0
 80018ae:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  if (heth == NULL)
 80018b0:	687b      	ldr	r3, [r7, #4]
 80018b2:	2b00      	cmp	r3, #0
 80018b4:	d101      	bne.n	80018ba <HAL_ETH_Init+0x12>
  {
    return HAL_ERROR;
 80018b6:	2301      	movs	r3, #1
 80018b8:	e06c      	b.n	8001994 <HAL_ETH_Init+0xec>
  }
  if (heth->gState == HAL_ETH_STATE_RESET)
 80018ba:	687b      	ldr	r3, [r7, #4]
 80018bc:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80018c0:	2b00      	cmp	r3, #0
 80018c2:	d106      	bne.n	80018d2 <HAL_ETH_Init+0x2a>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80018c4:	687b      	ldr	r3, [r7, #4]
 80018c6:	2223      	movs	r2, #35	; 0x23
 80018c8:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Init the low level hardware */
    heth->MspInitCallback(heth);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC. */
    HAL_ETH_MspInit(heth);
 80018cc:	6878      	ldr	r0, [r7, #4]
 80018ce:	f003 fd85 	bl	80053dc <HAL_ETH_MspInit>

#endif /* (USE_HAL_ETH_REGISTER_CALLBACKS) */
  }

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80018d2:	2300      	movs	r3, #0
 80018d4:	60bb      	str	r3, [r7, #8]
 80018d6:	4b31      	ldr	r3, [pc, #196]	; (800199c <HAL_ETH_Init+0xf4>)
 80018d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018da:	4a30      	ldr	r2, [pc, #192]	; (800199c <HAL_ETH_Init+0xf4>)
 80018dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80018e0:	6453      	str	r3, [r2, #68]	; 0x44
 80018e2:	4b2e      	ldr	r3, [pc, #184]	; (800199c <HAL_ETH_Init+0xf4>)
 80018e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80018e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80018ea:	60bb      	str	r3, [r7, #8]
 80018ec:	68bb      	ldr	r3, [r7, #8]

  /* Select MII or RMII Mode*/
  SYSCFG->PMC &= ~(SYSCFG_PMC_MII_RMII_SEL);
 80018ee:	4b2c      	ldr	r3, [pc, #176]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018f0:	685b      	ldr	r3, [r3, #4]
 80018f2:	4a2b      	ldr	r2, [pc, #172]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018f4:	f423 0300 	bic.w	r3, r3, #8388608	; 0x800000
 80018f8:	6053      	str	r3, [r2, #4]
  SYSCFG->PMC |= (uint32_t)heth->Init.MediaInterface;
 80018fa:	4b29      	ldr	r3, [pc, #164]	; (80019a0 <HAL_ETH_Init+0xf8>)
 80018fc:	685a      	ldr	r2, [r3, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	689b      	ldr	r3, [r3, #8]
 8001902:	4927      	ldr	r1, [pc, #156]	; (80019a0 <HAL_ETH_Init+0xf8>)
 8001904:	4313      	orrs	r3, r2
 8001906:	604b      	str	r3, [r1, #4]
  /* Dummy read to sync SYSCFG with ETH */
  (void)SYSCFG->PMC;
 8001908:	4b25      	ldr	r3, [pc, #148]	; (80019a0 <HAL_ETH_Init+0xf8>)
 800190a:	685b      	ldr	r3, [r3, #4]

  /* Ethernet Software reset */
  /* Set the SWR bit: resets all MAC subsystem internal registers and logic */
  /* After reset all the registers holds their respective reset values */
  SET_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR);
 800190c:	687b      	ldr	r3, [r7, #4]
 800190e:	681b      	ldr	r3, [r3, #0]
 8001910:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001914:	681b      	ldr	r3, [r3, #0]
 8001916:	687a      	ldr	r2, [r7, #4]
 8001918:	6812      	ldr	r2, [r2, #0]
 800191a:	f043 0301 	orr.w	r3, r3, #1
 800191e:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001922:	6013      	str	r3, [r2, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8001924:	f7ff feae 	bl	8001684 <HAL_GetTick>
 8001928:	60f8      	str	r0, [r7, #12]

  /* Wait for software reset */
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 800192a:	e011      	b.n	8001950 <HAL_ETH_Init+0xa8>
  {
    if (((HAL_GetTick() - tickstart) > ETH_SWRESET_TIMEOUT))
 800192c:	f7ff feaa 	bl	8001684 <HAL_GetTick>
 8001930:	4602      	mov	r2, r0
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	1ad3      	subs	r3, r2, r3
 8001936:	f5b3 7ffa 	cmp.w	r3, #500	; 0x1f4
 800193a:	d909      	bls.n	8001950 <HAL_ETH_Init+0xa8>
    {
      /* Set Error Code */
      heth->ErrorCode = HAL_ETH_ERROR_TIMEOUT;
 800193c:	687b      	ldr	r3, [r7, #4]
 800193e:	2204      	movs	r2, #4
 8001940:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      /* Set State as Error */
      heth->gState = HAL_ETH_STATE_ERROR;
 8001944:	687b      	ldr	r3, [r7, #4]
 8001946:	22e0      	movs	r2, #224	; 0xe0
 8001948:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
      /* Return Error */
      return HAL_ERROR;
 800194c:	2301      	movs	r3, #1
 800194e:	e021      	b.n	8001994 <HAL_ETH_Init+0xec>
  while (READ_BIT(heth->Instance->DMABMR, ETH_DMABMR_SR) > 0U)
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	681b      	ldr	r3, [r3, #0]
 8001954:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001958:	681b      	ldr	r3, [r3, #0]
 800195a:	f003 0301 	and.w	r3, r3, #1
 800195e:	2b00      	cmp	r3, #0
 8001960:	d1e4      	bne.n	800192c <HAL_ETH_Init+0x84>
    }
  }


  /*------------------ MAC, MTL and DMA default Configuration ----------------*/
  ETH_MACDMAConfig(heth);
 8001962:	6878      	ldr	r0, [r7, #4]
 8001964:	f000 ff4a 	bl	80027fc <ETH_MACDMAConfig>


  /*------------------ DMA Tx Descriptors Configuration ----------------------*/
  ETH_DMATxDescListInit(heth);
 8001968:	6878      	ldr	r0, [r7, #4]
 800196a:	f000 fff1 	bl	8002950 <ETH_DMATxDescListInit>

  /*------------------ DMA Rx Descriptors Configuration ----------------------*/
  ETH_DMARxDescListInit(heth);
 800196e:	6878      	ldr	r0, [r7, #4]
 8001970:	f001 f847 	bl	8002a02 <ETH_DMARxDescListInit>

  /*--------------------- ETHERNET MAC Address Configuration ------------------*/
  ETH_MACAddressConfig(heth, ETH_MAC_ADDRESS0, heth->Init.MACAddr);
 8001974:	687b      	ldr	r3, [r7, #4]
 8001976:	685b      	ldr	r3, [r3, #4]
 8001978:	461a      	mov	r2, r3
 800197a:	2100      	movs	r1, #0
 800197c:	6878      	ldr	r0, [r7, #4]
 800197e:	f000 ffaf 	bl	80028e0 <ETH_MACAddressConfig>

  heth->ErrorCode = HAL_ETH_ERROR_NONE;
 8001982:	687b      	ldr	r3, [r7, #4]
 8001984:	2200      	movs	r2, #0
 8001986:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
  heth->gState = HAL_ETH_STATE_READY;
 800198a:	687b      	ldr	r3, [r7, #4]
 800198c:	2210      	movs	r2, #16
 800198e:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

  return HAL_OK;
 8001992:	2300      	movs	r3, #0
}
 8001994:	4618      	mov	r0, r3
 8001996:	3710      	adds	r7, #16
 8001998:	46bd      	mov	sp, r7
 800199a:	bd80      	pop	{r7, pc}
 800199c:	40023800 	.word	0x40023800
 80019a0:	40013800 	.word	0x40013800

080019a4 <HAL_ETH_Start_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Start_IT(ETH_HandleTypeDef *heth)
{
 80019a4:	b580      	push	{r7, lr}
 80019a6:	b084      	sub	sp, #16
 80019a8:	af00      	add	r7, sp, #0
 80019aa:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_READY)
 80019ac:	687b      	ldr	r3, [r7, #4]
 80019ae:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 80019b2:	2b10      	cmp	r3, #16
 80019b4:	d17f      	bne.n	8001ab6 <HAL_ETH_Start_IT+0x112>
  {
    heth->gState = HAL_ETH_STATE_BUSY;
 80019b6:	687b      	ldr	r3, [r7, #4]
 80019b8:	2223      	movs	r2, #35	; 0x23
 80019ba:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* save IT mode to ETH Handle */
    heth->RxDescList.ItMode = 1U;
 80019be:	687b      	ldr	r3, [r7, #4]
 80019c0:	2201      	movs	r2, #1
 80019c2:	659a      	str	r2, [r3, #88]	; 0x58
    /* Disable MMC Interrupts */
    SET_BIT(heth->Instance->MACIMR, ETH_MACIMR_TSTIM | ETH_MACIMR_PMTIM);
 80019c4:	687b      	ldr	r3, [r7, #4]
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	6bda      	ldr	r2, [r3, #60]	; 0x3c
 80019ca:	687b      	ldr	r3, [r7, #4]
 80019cc:	681b      	ldr	r3, [r3, #0]
 80019ce:	f442 7202 	orr.w	r2, r2, #520	; 0x208
 80019d2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Disable Rx MMC Interrupts */
    SET_BIT(heth->Instance->MMCRIMR, ETH_MMCRIMR_RGUFM | ETH_MMCRIMR_RFAEM | \
 80019d4:	687b      	ldr	r3, [r7, #4]
 80019d6:	681b      	ldr	r3, [r3, #0]
 80019d8:	f8d3 310c 	ldr.w	r3, [r3, #268]	; 0x10c
 80019dc:	687a      	ldr	r2, [r7, #4]
 80019de:	6812      	ldr	r2, [r2, #0]
 80019e0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80019e4:	f043 0360 	orr.w	r3, r3, #96	; 0x60
 80019e8:	f8c2 310c 	str.w	r3, [r2, #268]	; 0x10c
            ETH_MMCRIMR_RFCEM);

    /* Disable Tx MMC Interrupts */
    SET_BIT(heth->Instance->MMCTIMR, ETH_MMCTIMR_TGFM | ETH_MMCTIMR_TGFMSCM | \
 80019ec:	687b      	ldr	r3, [r7, #4]
 80019ee:	681b      	ldr	r3, [r3, #0]
 80019f0:	f8d3 2110 	ldr.w	r2, [r3, #272]	; 0x110
 80019f4:	687b      	ldr	r3, [r7, #4]
 80019f6:	681b      	ldr	r3, [r3, #0]
 80019f8:	f442 1203 	orr.w	r2, r2, #2146304	; 0x20c000
 80019fc:	f8c3 2110 	str.w	r2, [r3, #272]	; 0x110
            ETH_MMCTIMR_TGFSCM);

    /* Set nombre of descriptors to build */
    heth->RxDescList.RxBuildDescCnt = ETH_RX_DESC_CNT;
 8001a00:	687b      	ldr	r3, [r7, #4]
 8001a02:	2204      	movs	r2, #4
 8001a04:	66da      	str	r2, [r3, #108]	; 0x6c

    /* Build all descriptors */
    ETH_UpdateDescriptor(heth);
 8001a06:	6878      	ldr	r0, [r7, #4]
 8001a08:	f000 f9f8 	bl	8001dfc <ETH_UpdateDescriptor>

    /* Enable the MAC transmission */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001a0c:	687b      	ldr	r3, [r7, #4]
 8001a0e:	681b      	ldr	r3, [r3, #0]
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	681b      	ldr	r3, [r3, #0]
 8001a16:	f042 0208 	orr.w	r2, r2, #8
 8001a1a:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a1c:	687b      	ldr	r3, [r7, #4]
 8001a1e:	681b      	ldr	r3, [r3, #0]
 8001a20:	681b      	ldr	r3, [r3, #0]
 8001a22:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a24:	2001      	movs	r0, #1
 8001a26:	f7ff fe39 	bl	800169c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a2a:	687b      	ldr	r3, [r7, #4]
 8001a2c:	681b      	ldr	r3, [r3, #0]
 8001a2e:	68fa      	ldr	r2, [r7, #12]
 8001a30:	601a      	str	r2, [r3, #0]

    /* Enable the MAC reception */
    SET_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001a32:	687b      	ldr	r3, [r7, #4]
 8001a34:	681b      	ldr	r3, [r3, #0]
 8001a36:	681a      	ldr	r2, [r3, #0]
 8001a38:	687b      	ldr	r3, [r7, #4]
 8001a3a:	681b      	ldr	r3, [r3, #0]
 8001a3c:	f042 0204 	orr.w	r2, r2, #4
 8001a40:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001a42:	687b      	ldr	r3, [r7, #4]
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	60fb      	str	r3, [r7, #12]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001a4a:	2001      	movs	r0, #1
 8001a4c:	f7ff fe26 	bl	800169c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001a50:	687b      	ldr	r3, [r7, #4]
 8001a52:	681b      	ldr	r3, [r3, #0]
 8001a54:	68fa      	ldr	r2, [r7, #12]
 8001a56:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001a58:	6878      	ldr	r0, [r7, #4]
 8001a5a:	f000 fd70 	bl	800253e <ETH_FlushTransmitFIFO>

    /* Enable the DMA transmission */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001a5e:	687b      	ldr	r3, [r7, #4]
 8001a60:	681b      	ldr	r3, [r3, #0]
 8001a62:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a66:	699b      	ldr	r3, [r3, #24]
 8001a68:	687a      	ldr	r2, [r7, #4]
 8001a6a:	6812      	ldr	r2, [r2, #0]
 8001a6c:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 8001a70:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a74:	6193      	str	r3, [r2, #24]

    /* Enable the DMA reception */
    SET_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001a76:	687b      	ldr	r3, [r7, #4]
 8001a78:	681b      	ldr	r3, [r3, #0]
 8001a7a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a7e:	699b      	ldr	r3, [r3, #24]
 8001a80:	687a      	ldr	r2, [r7, #4]
 8001a82:	6812      	ldr	r2, [r2, #0]
 8001a84:	f043 0302 	orr.w	r3, r3, #2
 8001a88:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001a8c:	6193      	str	r3, [r2, #24]
    /* Enable ETH DMA interrupts:
    - Tx complete interrupt
    - Rx complete interrupt
    - Fatal bus interrupt
    */
    __HAL_ETH_DMA_ENABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001a8e:	687b      	ldr	r3, [r7, #4]
 8001a90:	681b      	ldr	r3, [r3, #0]
 8001a92:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001a96:	69db      	ldr	r3, [r3, #28]
 8001a98:	687a      	ldr	r2, [r7, #4]
 8001a9a:	6812      	ldr	r2, [r2, #0]
 8001a9c:	f443 33d0 	orr.w	r3, r3, #106496	; 0x1a000
 8001aa0:	f043 03c1 	orr.w	r3, r3, #193	; 0xc1
 8001aa4:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001aa8:	61d3      	str	r3, [r2, #28]
                                   ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    heth->gState = HAL_ETH_STATE_STARTED;
 8001aaa:	687b      	ldr	r3, [r7, #4]
 8001aac:	2223      	movs	r2, #35	; 0x23
 8001aae:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
    return HAL_OK;
 8001ab2:	2300      	movs	r3, #0
 8001ab4:	e000      	b.n	8001ab8 <HAL_ETH_Start_IT+0x114>
  }
  else
  {
    return HAL_ERROR;
 8001ab6:	2301      	movs	r3, #1
  }
}
 8001ab8:	4618      	mov	r0, r3
 8001aba:	3710      	adds	r7, #16
 8001abc:	46bd      	mov	sp, r7
 8001abe:	bd80      	pop	{r7, pc}

08001ac0 <HAL_ETH_Stop_IT>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Stop_IT(ETH_HandleTypeDef *heth)
{
 8001ac0:	b580      	push	{r7, lr}
 8001ac2:	b086      	sub	sp, #24
 8001ac4:	af00      	add	r7, sp, #0
 8001ac6:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t descindex;
  uint32_t tmpreg1;

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001ac8:	687b      	ldr	r3, [r7, #4]
 8001aca:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ace:	2b23      	cmp	r3, #35	; 0x23
 8001ad0:	d170      	bne.n	8001bb4 <HAL_ETH_Stop_IT+0xf4>
  {
    /* Set the ETH peripheral state to BUSY */
    heth->gState = HAL_ETH_STATE_BUSY;
 8001ad2:	687b      	ldr	r3, [r7, #4]
 8001ad4:	2223      	movs	r2, #35	; 0x23
 8001ad6:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    __HAL_ETH_DMA_DISABLE_IT(heth, (ETH_DMAIER_NISE | ETH_DMAIER_RIE | ETH_DMAIER_TIE  |
 8001ada:	687b      	ldr	r3, [r7, #4]
 8001adc:	681b      	ldr	r3, [r3, #0]
 8001ade:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ae2:	69db      	ldr	r3, [r3, #28]
 8001ae4:	687a      	ldr	r2, [r7, #4]
 8001ae6:	6812      	ldr	r2, [r2, #0]
 8001ae8:	f423 33d0 	bic.w	r3, r3, #106496	; 0x1a000
 8001aec:	f023 03c1 	bic.w	r3, r3, #193	; 0xc1
 8001af0:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001af4:	61d3      	str	r3, [r2, #28]
                                    ETH_DMAIER_FBEIE | ETH_DMAIER_AISE | ETH_DMAIER_RBUIE));

    /* Disable the DMA transmission */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_ST);
 8001af6:	687b      	ldr	r3, [r7, #4]
 8001af8:	681b      	ldr	r3, [r3, #0]
 8001afa:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001afe:	699b      	ldr	r3, [r3, #24]
 8001b00:	687a      	ldr	r2, [r7, #4]
 8001b02:	6812      	ldr	r2, [r2, #0]
 8001b04:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8001b08:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b0c:	6193      	str	r3, [r2, #24]

    /* Disable the DMA reception */
    CLEAR_BIT(heth->Instance->DMAOMR, ETH_DMAOMR_SR);
 8001b0e:	687b      	ldr	r3, [r7, #4]
 8001b10:	681b      	ldr	r3, [r3, #0]
 8001b12:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001b16:	699b      	ldr	r3, [r3, #24]
 8001b18:	687a      	ldr	r2, [r7, #4]
 8001b1a:	6812      	ldr	r2, [r2, #0]
 8001b1c:	f023 0302 	bic.w	r3, r3, #2
 8001b20:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8001b24:	6193      	str	r3, [r2, #24]

    /* Disable the MAC reception */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_RE);
 8001b26:	687b      	ldr	r3, [r7, #4]
 8001b28:	681b      	ldr	r3, [r3, #0]
 8001b2a:	681a      	ldr	r2, [r3, #0]
 8001b2c:	687b      	ldr	r3, [r7, #4]
 8001b2e:	681b      	ldr	r3, [r3, #0]
 8001b30:	f022 0204 	bic.w	r2, r2, #4
 8001b34:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b36:	687b      	ldr	r3, [r7, #4]
 8001b38:	681b      	ldr	r3, [r3, #0]
 8001b3a:	681b      	ldr	r3, [r3, #0]
 8001b3c:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b3e:	2001      	movs	r0, #1
 8001b40:	f7ff fdac 	bl	800169c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b44:	687b      	ldr	r3, [r7, #4]
 8001b46:	681b      	ldr	r3, [r3, #0]
 8001b48:	693a      	ldr	r2, [r7, #16]
 8001b4a:	601a      	str	r2, [r3, #0]

    /* Flush Transmit FIFO */
    ETH_FlushTransmitFIFO(heth);
 8001b4c:	6878      	ldr	r0, [r7, #4]
 8001b4e:	f000 fcf6 	bl	800253e <ETH_FlushTransmitFIFO>

    /* Disable the MAC transmission */
    CLEAR_BIT(heth->Instance->MACCR, ETH_MACCR_TE);
 8001b52:	687b      	ldr	r3, [r7, #4]
 8001b54:	681b      	ldr	r3, [r3, #0]
 8001b56:	681a      	ldr	r2, [r3, #0]
 8001b58:	687b      	ldr	r3, [r7, #4]
 8001b5a:	681b      	ldr	r3, [r3, #0]
 8001b5c:	f022 0208 	bic.w	r2, r2, #8
 8001b60:	601a      	str	r2, [r3, #0]

    /* Wait until the write operation will be taken into account :
    at least four TX_CLK/RX_CLK clock cycles */
    tmpreg1 = (heth->Instance)->MACCR;
 8001b62:	687b      	ldr	r3, [r7, #4]
 8001b64:	681b      	ldr	r3, [r3, #0]
 8001b66:	681b      	ldr	r3, [r3, #0]
 8001b68:	613b      	str	r3, [r7, #16]
    HAL_Delay(ETH_REG_WRITE_DELAY);
 8001b6a:	2001      	movs	r0, #1
 8001b6c:	f7ff fd96 	bl	800169c <HAL_Delay>
    (heth->Instance)->MACCR = tmpreg1;
 8001b70:	687b      	ldr	r3, [r7, #4]
 8001b72:	681b      	ldr	r3, [r3, #0]
 8001b74:	693a      	ldr	r2, [r7, #16]
 8001b76:	601a      	str	r2, [r3, #0]

    /* Clear IOC bit to all Rx descriptors */
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b78:	2300      	movs	r3, #0
 8001b7a:	617b      	str	r3, [r7, #20]
 8001b7c:	e00e      	b.n	8001b9c <HAL_ETH_Stop_IT+0xdc>
    {
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descindex];
 8001b7e:	687b      	ldr	r3, [r7, #4]
 8001b80:	697a      	ldr	r2, [r7, #20]
 8001b82:	3212      	adds	r2, #18
 8001b84:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001b88:	60fb      	str	r3, [r7, #12]
      SET_BIT(dmarxdesc->DESC1, ETH_DMARXDESC_DIC);
 8001b8a:	68fb      	ldr	r3, [r7, #12]
 8001b8c:	685b      	ldr	r3, [r3, #4]
 8001b8e:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001b92:	68fb      	ldr	r3, [r7, #12]
 8001b94:	605a      	str	r2, [r3, #4]
    for (descindex = 0; descindex < (uint32_t)ETH_RX_DESC_CNT; descindex++)
 8001b96:	697b      	ldr	r3, [r7, #20]
 8001b98:	3301      	adds	r3, #1
 8001b9a:	617b      	str	r3, [r7, #20]
 8001b9c:	697b      	ldr	r3, [r7, #20]
 8001b9e:	2b03      	cmp	r3, #3
 8001ba0:	d9ed      	bls.n	8001b7e <HAL_ETH_Stop_IT+0xbe>
    }

    heth->RxDescList.ItMode = 0U;
 8001ba2:	687b      	ldr	r3, [r7, #4]
 8001ba4:	2200      	movs	r2, #0
 8001ba6:	659a      	str	r2, [r3, #88]	; 0x58

    heth->gState = HAL_ETH_STATE_READY;
 8001ba8:	687b      	ldr	r3, [r7, #4]
 8001baa:	2210      	movs	r2, #16
 8001bac:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84

    /* Return function status */
    return HAL_OK;
 8001bb0:	2300      	movs	r3, #0
 8001bb2:	e000      	b.n	8001bb6 <HAL_ETH_Stop_IT+0xf6>
  }
  else
  {
    return HAL_ERROR;
 8001bb4:	2301      	movs	r3, #1
  }
}
 8001bb6:	4618      	mov	r0, r3
 8001bb8:	3718      	adds	r7, #24
 8001bba:	46bd      	mov	sp, r7
 8001bbc:	bd80      	pop	{r7, pc}

08001bbe <HAL_ETH_Transmit_IT>:
  *         the configuration information for ETHERNET module
  * @param  pTxConfig: Hold the configuration of packet to be transmitted
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_Transmit_IT(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig)
{
 8001bbe:	b580      	push	{r7, lr}
 8001bc0:	b082      	sub	sp, #8
 8001bc2:	af00      	add	r7, sp, #0
 8001bc4:	6078      	str	r0, [r7, #4]
 8001bc6:	6039      	str	r1, [r7, #0]
  if (pTxConfig == NULL)
 8001bc8:	683b      	ldr	r3, [r7, #0]
 8001bca:	2b00      	cmp	r3, #0
 8001bcc:	d109      	bne.n	8001be2 <HAL_ETH_Transmit_IT+0x24>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001bce:	687b      	ldr	r3, [r7, #4]
 8001bd0:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001bd4:	f043 0201 	orr.w	r2, r3, #1
 8001bd8:	687b      	ldr	r3, [r7, #4]
 8001bda:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001bde:	2301      	movs	r3, #1
 8001be0:	e045      	b.n	8001c6e <HAL_ETH_Transmit_IT+0xb0>
  }

  if (heth->gState == HAL_ETH_STATE_STARTED)
 8001be2:	687b      	ldr	r3, [r7, #4]
 8001be4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001be8:	2b23      	cmp	r3, #35	; 0x23
 8001bea:	d13f      	bne.n	8001c6c <HAL_ETH_Transmit_IT+0xae>
  {
    /* Save the packet pointer to release.  */
    heth->TxDescList.CurrentPacketAddress = (uint32_t *)pTxConfig->pData;
 8001bec:	683b      	ldr	r3, [r7, #0]
 8001bee:	6b5a      	ldr	r2, [r3, #52]	; 0x34
 8001bf0:	687b      	ldr	r3, [r7, #4]
 8001bf2:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Config DMA Tx descriptor by Tx Packet info */
    if (ETH_Prepare_Tx_Descriptors(heth, pTxConfig, 1) != HAL_ETH_ERROR_NONE)
 8001bf4:	2201      	movs	r2, #1
 8001bf6:	6839      	ldr	r1, [r7, #0]
 8001bf8:	6878      	ldr	r0, [r7, #4]
 8001bfa:	f000 ff6f 	bl	8002adc <ETH_Prepare_Tx_Descriptors>
 8001bfe:	4603      	mov	r3, r0
 8001c00:	2b00      	cmp	r3, #0
 8001c02:	d009      	beq.n	8001c18 <HAL_ETH_Transmit_IT+0x5a>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_BUSY;
 8001c04:	687b      	ldr	r3, [r7, #4]
 8001c06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c0a:	f043 0202 	orr.w	r2, r3, #2
 8001c0e:	687b      	ldr	r3, [r7, #4]
 8001c10:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
      return HAL_ERROR;
 8001c14:	2301      	movs	r3, #1
 8001c16:	e02a      	b.n	8001c6e <HAL_ETH_Transmit_IT+0xb0>
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8001c18:	f3bf 8f4f 	dsb	sy
}
 8001c1c:	bf00      	nop

    /* Ensure completion of descriptor preparation before transmission start */
    __DSB();

    /* Incr current tx desc index */
    INCR_TX_DESC_INDEX(heth->TxDescList.CurTxDesc, 1U);
 8001c1e:	687b      	ldr	r3, [r7, #4]
 8001c20:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c22:	1c5a      	adds	r2, r3, #1
 8001c24:	687b      	ldr	r3, [r7, #4]
 8001c26:	629a      	str	r2, [r3, #40]	; 0x28
 8001c28:	687b      	ldr	r3, [r7, #4]
 8001c2a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c2c:	2b03      	cmp	r3, #3
 8001c2e:	d904      	bls.n	8001c3a <HAL_ETH_Transmit_IT+0x7c>
 8001c30:	687b      	ldr	r3, [r7, #4]
 8001c32:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001c34:	1f1a      	subs	r2, r3, #4
 8001c36:	687b      	ldr	r3, [r7, #4]
 8001c38:	629a      	str	r2, [r3, #40]	; 0x28

    /* Start transmission */
    /* issue a poll command to Tx DMA by writing address of next immediate free descriptor */
    if (((heth->Instance)->DMASR & ETH_DMASR_TBUS) != (uint32_t)RESET)
 8001c3a:	687b      	ldr	r3, [r7, #4]
 8001c3c:	681b      	ldr	r3, [r3, #0]
 8001c3e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c42:	695b      	ldr	r3, [r3, #20]
 8001c44:	f003 0304 	and.w	r3, r3, #4
 8001c48:	2b00      	cmp	r3, #0
 8001c4a:	d00d      	beq.n	8001c68 <HAL_ETH_Transmit_IT+0xaa>
    {
      /* Clear TBUS ETHERNET DMA flag */
      (heth->Instance)->DMASR = ETH_DMASR_TBUS;
 8001c4c:	687b      	ldr	r3, [r7, #4]
 8001c4e:	681b      	ldr	r3, [r3, #0]
 8001c50:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c54:	461a      	mov	r2, r3
 8001c56:	2304      	movs	r3, #4
 8001c58:	6153      	str	r3, [r2, #20]
      /* Resume DMA transmission*/
      (heth->Instance)->DMATPDR = 0U;
 8001c5a:	687b      	ldr	r3, [r7, #4]
 8001c5c:	681b      	ldr	r3, [r3, #0]
 8001c5e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001c62:	461a      	mov	r2, r3
 8001c64:	2300      	movs	r3, #0
 8001c66:	6053      	str	r3, [r2, #4]
    }

    return HAL_OK;
 8001c68:	2300      	movs	r3, #0
 8001c6a:	e000      	b.n	8001c6e <HAL_ETH_Transmit_IT+0xb0>

  }
  else
  {
    return HAL_ERROR;
 8001c6c:	2301      	movs	r3, #1
  }
}
 8001c6e:	4618      	mov	r0, r3
 8001c70:	3708      	adds	r7, #8
 8001c72:	46bd      	mov	sp, r7
 8001c74:	bd80      	pop	{r7, pc}

08001c76 <HAL_ETH_ReadData>:
  *         the configuration information for ETHERNET module
  * @param  pAppBuff: Pointer to an application buffer to receive the packet.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadData(ETH_HandleTypeDef *heth, void **pAppBuff)
{
 8001c76:	b580      	push	{r7, lr}
 8001c78:	b088      	sub	sp, #32
 8001c7a:	af00      	add	r7, sp, #0
 8001c7c:	6078      	str	r0, [r7, #4]
 8001c7e:	6039      	str	r1, [r7, #0]
  uint32_t descidx;
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t desccnt = 0U;
 8001c80:	2300      	movs	r3, #0
 8001c82:	617b      	str	r3, [r7, #20]
  uint32_t desccntmax;
  uint32_t bufflength;
  uint8_t rxdataready = 0U;
 8001c84:	2300      	movs	r3, #0
 8001c86:	73fb      	strb	r3, [r7, #15]


  if (pAppBuff == NULL)
 8001c88:	683b      	ldr	r3, [r7, #0]
 8001c8a:	2b00      	cmp	r3, #0
 8001c8c:	d109      	bne.n	8001ca2 <HAL_ETH_ReadData+0x2c>
  {
    heth->ErrorCode |= HAL_ETH_ERROR_PARAM;
 8001c8e:	687b      	ldr	r3, [r7, #4]
 8001c90:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8001c94:	f043 0201 	orr.w	r2, r3, #1
 8001c98:	687b      	ldr	r3, [r7, #4]
 8001c9a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
    return HAL_ERROR;
 8001c9e:	2301      	movs	r3, #1
 8001ca0:	e0a8      	b.n	8001df4 <HAL_ETH_ReadData+0x17e>
  }

  if (heth->gState != HAL_ETH_STATE_STARTED)
 8001ca2:	687b      	ldr	r3, [r7, #4]
 8001ca4:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 8001ca8:	2b23      	cmp	r3, #35	; 0x23
 8001caa:	d001      	beq.n	8001cb0 <HAL_ETH_ReadData+0x3a>
  {
    return HAL_ERROR;
 8001cac:	2301      	movs	r3, #1
 8001cae:	e0a1      	b.n	8001df4 <HAL_ETH_ReadData+0x17e>
  }

  descidx = heth->RxDescList.RxDescIdx;
 8001cb0:	687b      	ldr	r3, [r7, #4]
 8001cb2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8001cb4:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001cb6:	687b      	ldr	r3, [r7, #4]
 8001cb8:	69fa      	ldr	r2, [r7, #28]
 8001cba:	3212      	adds	r2, #18
 8001cbc:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001cc0:	61bb      	str	r3, [r7, #24]
  desccntmax = ETH_RX_DESC_CNT - heth->RxDescList.RxBuildDescCnt;
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001cc6:	f1c3 0304 	rsb	r3, r3, #4
 8001cca:	60bb      	str	r3, [r7, #8]

  /* Check if descriptor is not owned by DMA */
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001ccc:	e06a      	b.n	8001da4 <HAL_ETH_ReadData+0x12e>
         && (rxdataready == 0U))
  {
    if (READ_BIT(dmarxdesc->DESC0,  ETH_DMARXDESC_LS)  != (uint32_t)RESET)
 8001cce:	69bb      	ldr	r3, [r7, #24]
 8001cd0:	681b      	ldr	r3, [r3, #0]
 8001cd2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001cd6:	2b00      	cmp	r3, #0
 8001cd8:	d007      	beq.n	8001cea <HAL_ETH_ReadData+0x74>
    {
      /* Get timestamp high */
      heth->RxDescList.TimeStamp.TimeStampHigh = dmarxdesc->DESC6;
 8001cda:	69bb      	ldr	r3, [r7, #24]
 8001cdc:	699a      	ldr	r2, [r3, #24]
 8001cde:	687b      	ldr	r3, [r7, #4]
 8001ce0:	679a      	str	r2, [r3, #120]	; 0x78
      /* Get timestamp low */
      heth->RxDescList.TimeStamp.TimeStampLow  = dmarxdesc->DESC7;
 8001ce2:	69bb      	ldr	r3, [r7, #24]
 8001ce4:	69da      	ldr	r2, [r3, #28]
 8001ce6:	687b      	ldr	r3, [r7, #4]
 8001ce8:	675a      	str	r2, [r3, #116]	; 0x74
    }
    if ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET) || (heth->RxDescList.pRxStart != NULL))
 8001cea:	69bb      	ldr	r3, [r7, #24]
 8001cec:	681b      	ldr	r3, [r3, #0]
 8001cee:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d103      	bne.n	8001cfe <HAL_ETH_ReadData+0x88>
 8001cf6:	687b      	ldr	r3, [r7, #4]
 8001cf8:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d040      	beq.n	8001d80 <HAL_ETH_ReadData+0x10a>
    {
      /* Check first descriptor */
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_FS) != (uint32_t)RESET)
 8001cfe:	69bb      	ldr	r3, [r7, #24]
 8001d00:	681b      	ldr	r3, [r3, #0]
 8001d02:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8001d06:	2b00      	cmp	r3, #0
 8001d08:	d005      	beq.n	8001d16 <HAL_ETH_ReadData+0xa0>
      {
        heth->RxDescList.RxDescCnt = 0;
 8001d0a:	687b      	ldr	r3, [r7, #4]
 8001d0c:	2200      	movs	r2, #0
 8001d0e:	661a      	str	r2, [r3, #96]	; 0x60
        heth->RxDescList.RxDataLength = 0;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2200      	movs	r2, #0
 8001d14:	665a      	str	r2, [r3, #100]	; 0x64
      }

      /* Check if last descriptor */
      bufflength = heth->Init.RxBuffLen;
 8001d16:	687b      	ldr	r3, [r7, #4]
 8001d18:	695b      	ldr	r3, [r3, #20]
 8001d1a:	613b      	str	r3, [r7, #16]
      if (READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_LS) != (uint32_t)RESET)
 8001d1c:	69bb      	ldr	r3, [r7, #24]
 8001d1e:	681b      	ldr	r3, [r3, #0]
 8001d20:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8001d24:	2b00      	cmp	r3, #0
 8001d26:	d00c      	beq.n	8001d42 <HAL_ETH_ReadData+0xcc>
      {
        /* Get the Frame Length of the received packet: substruct 4 bytes of the CRC */
        bufflength = ((dmarxdesc->DESC0 & ETH_DMARXDESC_FL) >> ETH_DMARXDESC_FRAMELENGTHSHIFT) - 4U;
 8001d28:	69bb      	ldr	r3, [r7, #24]
 8001d2a:	681b      	ldr	r3, [r3, #0]
 8001d2c:	0c1b      	lsrs	r3, r3, #16
 8001d2e:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8001d32:	3b04      	subs	r3, #4
 8001d34:	613b      	str	r3, [r7, #16]

        /* Save Last descriptor index */
        heth->RxDescList.pRxLastRxDesc = dmarxdesc->DESC0;
 8001d36:	69bb      	ldr	r3, [r7, #24]
 8001d38:	681a      	ldr	r2, [r3, #0]
 8001d3a:	687b      	ldr	r3, [r7, #4]
 8001d3c:	671a      	str	r2, [r3, #112]	; 0x70

        /* Packet ready */
        rxdataready = 1;
 8001d3e:	2301      	movs	r3, #1
 8001d40:	73fb      	strb	r3, [r7, #15]
      }

      /* Link data */
      WRITE_REG(dmarxdesc->BackupAddr0, dmarxdesc->DESC2);
 8001d42:	69bb      	ldr	r3, [r7, #24]
 8001d44:	689a      	ldr	r2, [r3, #8]
 8001d46:	69bb      	ldr	r3, [r7, #24]
 8001d48:	621a      	str	r2, [r3, #32]
      /*Call registered Link callback*/
      heth->rxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
                           (uint8_t *)dmarxdesc->BackupAddr0, bufflength);
#else
      /* Link callback */
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d4a:	687b      	ldr	r3, [r7, #4]
 8001d4c:	f103 007c 	add.w	r0, r3, #124	; 0x7c
 8001d50:	687b      	ldr	r3, [r7, #4]
 8001d52:	f103 0180 	add.w	r1, r3, #128	; 0x80
                             (uint8_t *)dmarxdesc->BackupAddr0, (uint16_t) bufflength);
 8001d56:	69bb      	ldr	r3, [r7, #24]
 8001d58:	6a1b      	ldr	r3, [r3, #32]
      HAL_ETH_RxLinkCallback(&heth->RxDescList.pRxStart, &heth->RxDescList.pRxEnd,
 8001d5a:	461a      	mov	r2, r3
 8001d5c:	693b      	ldr	r3, [r7, #16]
 8001d5e:	b29b      	uxth	r3, r3
 8001d60:	f003 fd16 	bl	8005790 <HAL_ETH_RxLinkCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      heth->RxDescList.RxDescCnt++;
 8001d64:	687b      	ldr	r3, [r7, #4]
 8001d66:	6e1b      	ldr	r3, [r3, #96]	; 0x60
 8001d68:	1c5a      	adds	r2, r3, #1
 8001d6a:	687b      	ldr	r3, [r7, #4]
 8001d6c:	661a      	str	r2, [r3, #96]	; 0x60
      heth->RxDescList.RxDataLength += bufflength;
 8001d6e:	687b      	ldr	r3, [r7, #4]
 8001d70:	6e5a      	ldr	r2, [r3, #100]	; 0x64
 8001d72:	693b      	ldr	r3, [r7, #16]
 8001d74:	441a      	add	r2, r3
 8001d76:	687b      	ldr	r3, [r7, #4]
 8001d78:	665a      	str	r2, [r3, #100]	; 0x64

      /* Clear buffer pointer */
      dmarxdesc->BackupAddr0 = 0;
 8001d7a:	69bb      	ldr	r3, [r7, #24]
 8001d7c:	2200      	movs	r2, #0
 8001d7e:	621a      	str	r2, [r3, #32]
    }

    /* Increment current rx descriptor index */
    INCR_RX_DESC_INDEX(descidx, 1U);
 8001d80:	69fb      	ldr	r3, [r7, #28]
 8001d82:	3301      	adds	r3, #1
 8001d84:	61fb      	str	r3, [r7, #28]
 8001d86:	69fb      	ldr	r3, [r7, #28]
 8001d88:	2b03      	cmp	r3, #3
 8001d8a:	d902      	bls.n	8001d92 <HAL_ETH_ReadData+0x11c>
 8001d8c:	69fb      	ldr	r3, [r7, #28]
 8001d8e:	3b04      	subs	r3, #4
 8001d90:	61fb      	str	r3, [r7, #28]
    /* Get current descriptor address */
    dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001d92:	687b      	ldr	r3, [r7, #4]
 8001d94:	69fa      	ldr	r2, [r7, #28]
 8001d96:	3212      	adds	r2, #18
 8001d98:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001d9c:	61bb      	str	r3, [r7, #24]
    desccnt++;
 8001d9e:	697b      	ldr	r3, [r7, #20]
 8001da0:	3301      	adds	r3, #1
 8001da2:	617b      	str	r3, [r7, #20]
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001da4:	69bb      	ldr	r3, [r7, #24]
 8001da6:	681b      	ldr	r3, [r3, #0]
         && (rxdataready == 0U))
 8001da8:	2b00      	cmp	r3, #0
 8001daa:	db06      	blt.n	8001dba <HAL_ETH_ReadData+0x144>
  while ((READ_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN) == (uint32_t)RESET) && (desccnt < desccntmax)
 8001dac:	697a      	ldr	r2, [r7, #20]
 8001dae:	68bb      	ldr	r3, [r7, #8]
 8001db0:	429a      	cmp	r2, r3
 8001db2:	d202      	bcs.n	8001dba <HAL_ETH_ReadData+0x144>
         && (rxdataready == 0U))
 8001db4:	7bfb      	ldrb	r3, [r7, #15]
 8001db6:	2b00      	cmp	r3, #0
 8001db8:	d089      	beq.n	8001cce <HAL_ETH_ReadData+0x58>
  }

  heth->RxDescList.RxBuildDescCnt += desccnt;
 8001dba:	687b      	ldr	r3, [r7, #4]
 8001dbc:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 8001dbe:	697b      	ldr	r3, [r7, #20]
 8001dc0:	441a      	add	r2, r3
 8001dc2:	687b      	ldr	r3, [r7, #4]
 8001dc4:	66da      	str	r2, [r3, #108]	; 0x6c
  if ((heth->RxDescList.RxBuildDescCnt) != 0U)
 8001dc6:	687b      	ldr	r3, [r7, #4]
 8001dc8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001dca:	2b00      	cmp	r3, #0
 8001dcc:	d002      	beq.n	8001dd4 <HAL_ETH_ReadData+0x15e>
  {
    /* Update Descriptors */
    ETH_UpdateDescriptor(heth);
 8001dce:	6878      	ldr	r0, [r7, #4]
 8001dd0:	f000 f814 	bl	8001dfc <ETH_UpdateDescriptor>
  }

  heth->RxDescList.RxDescIdx = descidx;
 8001dd4:	687b      	ldr	r3, [r7, #4]
 8001dd6:	69fa      	ldr	r2, [r7, #28]
 8001dd8:	65da      	str	r2, [r3, #92]	; 0x5c

  if (rxdataready == 1U)
 8001dda:	7bfb      	ldrb	r3, [r7, #15]
 8001ddc:	2b01      	cmp	r3, #1
 8001dde:	d108      	bne.n	8001df2 <HAL_ETH_ReadData+0x17c>
  {
    /* Return received packet */
    *pAppBuff = heth->RxDescList.pRxStart;
 8001de0:	687b      	ldr	r3, [r7, #4]
 8001de2:	6fda      	ldr	r2, [r3, #124]	; 0x7c
 8001de4:	683b      	ldr	r3, [r7, #0]
 8001de6:	601a      	str	r2, [r3, #0]
    /* Reset first element */
    heth->RxDescList.pRxStart = NULL;
 8001de8:	687b      	ldr	r3, [r7, #4]
 8001dea:	2200      	movs	r2, #0
 8001dec:	67da      	str	r2, [r3, #124]	; 0x7c

    return HAL_OK;
 8001dee:	2300      	movs	r3, #0
 8001df0:	e000      	b.n	8001df4 <HAL_ETH_ReadData+0x17e>
  }

  /* Packet not ready */
  return HAL_ERROR;
 8001df2:	2301      	movs	r3, #1
}
 8001df4:	4618      	mov	r0, r3
 8001df6:	3720      	adds	r7, #32
 8001df8:	46bd      	mov	sp, r7
 8001dfa:	bd80      	pop	{r7, pc}

08001dfc <ETH_UpdateDescriptor>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_UpdateDescriptor(ETH_HandleTypeDef *heth)
{
 8001dfc:	b580      	push	{r7, lr}
 8001dfe:	b088      	sub	sp, #32
 8001e00:	af00      	add	r7, sp, #0
 8001e02:	6078      	str	r0, [r7, #4]
  uint32_t descidx;
  uint32_t desccount;
  ETH_DMADescTypeDef *dmarxdesc;
  uint8_t *buff = NULL;
 8001e04:	2300      	movs	r3, #0
 8001e06:	60fb      	str	r3, [r7, #12]
  uint8_t allocStatus = 1U;
 8001e08:	2301      	movs	r3, #1
 8001e0a:	74fb      	strb	r3, [r7, #19]

  descidx = heth->RxDescList.RxBuildDescIdx;
 8001e0c:	687b      	ldr	r3, [r7, #4]
 8001e0e:	6e9b      	ldr	r3, [r3, #104]	; 0x68
 8001e10:	61fb      	str	r3, [r7, #28]
  dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	69fa      	ldr	r2, [r7, #28]
 8001e16:	3212      	adds	r2, #18
 8001e18:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001e1c:	617b      	str	r3, [r7, #20]
  desccount = heth->RxDescList.RxBuildDescCnt;
 8001e1e:	687b      	ldr	r3, [r7, #4]
 8001e20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001e22:	61bb      	str	r3, [r7, #24]

  while ((desccount > 0U) && (allocStatus != 0U))
 8001e24:	e040      	b.n	8001ea8 <ETH_UpdateDescriptor+0xac>
  {
    /* Check if a buffer's attached the descriptor */
    if (READ_REG(dmarxdesc->BackupAddr0) == 0U)
 8001e26:	697b      	ldr	r3, [r7, #20]
 8001e28:	6a1b      	ldr	r3, [r3, #32]
 8001e2a:	2b00      	cmp	r3, #0
 8001e2c:	d112      	bne.n	8001e54 <ETH_UpdateDescriptor+0x58>
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Allocate callback*/
      heth->rxAllocateCallback(&buff);
#else
      /* Allocate callback */
      HAL_ETH_RxAllocateCallback(&buff);
 8001e2e:	f107 030c 	add.w	r3, r7, #12
 8001e32:	4618      	mov	r0, r3
 8001e34:	f003 fc7c 	bl	8005730 <HAL_ETH_RxAllocateCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
      if (buff == NULL)
 8001e38:	68fb      	ldr	r3, [r7, #12]
 8001e3a:	2b00      	cmp	r3, #0
 8001e3c:	d102      	bne.n	8001e44 <ETH_UpdateDescriptor+0x48>
      {
        allocStatus = 0U;
 8001e3e:	2300      	movs	r3, #0
 8001e40:	74fb      	strb	r3, [r7, #19]
 8001e42:	e007      	b.n	8001e54 <ETH_UpdateDescriptor+0x58>
      }
      else
      {
        WRITE_REG(dmarxdesc->BackupAddr0, (uint32_t)buff);
 8001e44:	68fb      	ldr	r3, [r7, #12]
 8001e46:	461a      	mov	r2, r3
 8001e48:	697b      	ldr	r3, [r7, #20]
 8001e4a:	621a      	str	r2, [r3, #32]
        WRITE_REG(dmarxdesc->DESC2, (uint32_t)buff);
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	461a      	mov	r2, r3
 8001e50:	697b      	ldr	r3, [r7, #20]
 8001e52:	609a      	str	r2, [r3, #8]
      }
    }

    if (allocStatus != 0U)
 8001e54:	7cfb      	ldrb	r3, [r7, #19]
 8001e56:	2b00      	cmp	r3, #0
 8001e58:	d026      	beq.n	8001ea8 <ETH_UpdateDescriptor+0xac>
    {
      if (heth->RxDescList.ItMode == 0U)
 8001e5a:	687b      	ldr	r3, [r7, #4]
 8001e5c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8001e5e:	2b00      	cmp	r3, #0
 8001e60:	d103      	bne.n	8001e6a <ETH_UpdateDescriptor+0x6e>
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_DMARXDESC_DIC | ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e62:	697b      	ldr	r3, [r7, #20]
 8001e64:	4a1e      	ldr	r2, [pc, #120]	; (8001ee0 <ETH_UpdateDescriptor+0xe4>)
 8001e66:	605a      	str	r2, [r3, #4]
 8001e68:	e003      	b.n	8001e72 <ETH_UpdateDescriptor+0x76>
      }
      else
      {
        WRITE_REG(dmarxdesc->DESC1, ETH_RX_BUF_SIZE | ETH_DMARXDESC_RCH);
 8001e6a:	697b      	ldr	r3, [r7, #20]
 8001e6c:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8001e70:	605a      	str	r2, [r3, #4]
  \details Ensures the apparent order of the explicit memory operations before
           and after the instruction, without ensuring their completion.
 */
__STATIC_FORCEINLINE void __DMB(void)
{
  __ASM volatile ("dmb 0xF":::"memory");
 8001e72:	f3bf 8f5f 	dmb	sy
}
 8001e76:	bf00      	nop
         is fully performed.
         The __DMB() instruction is added to avoid any potential compiler optimization that
         may lead to abnormal behavior. */
      __DMB();

      SET_BIT(dmarxdesc->DESC0, ETH_DMARXDESC_OWN);
 8001e78:	697b      	ldr	r3, [r7, #20]
 8001e7a:	681b      	ldr	r3, [r3, #0]
 8001e7c:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8001e80:	697b      	ldr	r3, [r7, #20]
 8001e82:	601a      	str	r2, [r3, #0]

      /* Increment current rx descriptor index */
      INCR_RX_DESC_INDEX(descidx, 1U);
 8001e84:	69fb      	ldr	r3, [r7, #28]
 8001e86:	3301      	adds	r3, #1
 8001e88:	61fb      	str	r3, [r7, #28]
 8001e8a:	69fb      	ldr	r3, [r7, #28]
 8001e8c:	2b03      	cmp	r3, #3
 8001e8e:	d902      	bls.n	8001e96 <ETH_UpdateDescriptor+0x9a>
 8001e90:	69fb      	ldr	r3, [r7, #28]
 8001e92:	3b04      	subs	r3, #4
 8001e94:	61fb      	str	r3, [r7, #28]
      /* Get current descriptor address */
      dmarxdesc = (ETH_DMADescTypeDef *)heth->RxDescList.RxDesc[descidx];
 8001e96:	687b      	ldr	r3, [r7, #4]
 8001e98:	69fa      	ldr	r2, [r7, #28]
 8001e9a:	3212      	adds	r2, #18
 8001e9c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001ea0:	617b      	str	r3, [r7, #20]
      desccount--;
 8001ea2:	69bb      	ldr	r3, [r7, #24]
 8001ea4:	3b01      	subs	r3, #1
 8001ea6:	61bb      	str	r3, [r7, #24]
  while ((desccount > 0U) && (allocStatus != 0U))
 8001ea8:	69bb      	ldr	r3, [r7, #24]
 8001eaa:	2b00      	cmp	r3, #0
 8001eac:	d002      	beq.n	8001eb4 <ETH_UpdateDescriptor+0xb8>
 8001eae:	7cfb      	ldrb	r3, [r7, #19]
 8001eb0:	2b00      	cmp	r3, #0
 8001eb2:	d1b8      	bne.n	8001e26 <ETH_UpdateDescriptor+0x2a>
    }
  }

  if (heth->RxDescList.RxBuildDescCnt != desccount)
 8001eb4:	687b      	ldr	r3, [r7, #4]
 8001eb6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8001eb8:	69ba      	ldr	r2, [r7, #24]
 8001eba:	429a      	cmp	r2, r3
 8001ebc:	d00c      	beq.n	8001ed8 <ETH_UpdateDescriptor+0xdc>
  {
    /* Set the Tail pointer address */
    WRITE_REG(heth->Instance->DMARPDR, 0);
 8001ebe:	687b      	ldr	r3, [r7, #4]
 8001ec0:	681b      	ldr	r3, [r3, #0]
 8001ec2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ec6:	461a      	mov	r2, r3
 8001ec8:	2300      	movs	r3, #0
 8001eca:	6093      	str	r3, [r2, #8]

    heth->RxDescList.RxBuildDescIdx = descidx;
 8001ecc:	687b      	ldr	r3, [r7, #4]
 8001ece:	69fa      	ldr	r2, [r7, #28]
 8001ed0:	669a      	str	r2, [r3, #104]	; 0x68
    heth->RxDescList.RxBuildDescCnt = desccount;
 8001ed2:	687b      	ldr	r3, [r7, #4]
 8001ed4:	69ba      	ldr	r2, [r7, #24]
 8001ed6:	66da      	str	r2, [r3, #108]	; 0x6c
  }
}
 8001ed8:	bf00      	nop
 8001eda:	3720      	adds	r7, #32
 8001edc:	46bd      	mov	sp, r7
 8001ede:	bd80      	pop	{r7, pc}
 8001ee0:	80004600 	.word	0x80004600

08001ee4 <HAL_ETH_ReleaseTxPacket>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReleaseTxPacket(ETH_HandleTypeDef *heth)
{
 8001ee4:	b580      	push	{r7, lr}
 8001ee6:	b086      	sub	sp, #24
 8001ee8:	af00      	add	r7, sp, #0
 8001eea:	6078      	str	r0, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8001eec:	687b      	ldr	r3, [r7, #4]
 8001eee:	3318      	adds	r3, #24
 8001ef0:	60bb      	str	r3, [r7, #8]
  uint32_t numOfBuf =  dmatxdesclist->BuffersInUse;
 8001ef2:	68bb      	ldr	r3, [r7, #8]
 8001ef4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8001ef6:	617b      	str	r3, [r7, #20]
  uint32_t idx =       dmatxdesclist->releaseIndex;
 8001ef8:	68bb      	ldr	r3, [r7, #8]
 8001efa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8001efc:	613b      	str	r3, [r7, #16]
  uint8_t pktTxStatus = 1U;
 8001efe:	2301      	movs	r3, #1
 8001f00:	73fb      	strb	r3, [r7, #15]
#ifdef HAL_ETH_USE_PTP
  ETH_TimeStampTypeDef *timestamp = &heth->TxTimestamp;
#endif /* HAL_ETH_USE_PTP */

  /* Loop through buffers in use.  */
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f02:	e03f      	b.n	8001f84 <HAL_ETH_ReleaseTxPacket+0xa0>
  {
    pktInUse = 1U;
 8001f04:	2301      	movs	r3, #1
 8001f06:	73bb      	strb	r3, [r7, #14]
    numOfBuf--;
 8001f08:	697b      	ldr	r3, [r7, #20]
 8001f0a:	3b01      	subs	r3, #1
 8001f0c:	617b      	str	r3, [r7, #20]
    /* If no packet, just examine the next packet.  */
    if (dmatxdesclist->PacketAddress[idx] == NULL)
 8001f0e:	68ba      	ldr	r2, [r7, #8]
 8001f10:	693b      	ldr	r3, [r7, #16]
 8001f12:	3304      	adds	r3, #4
 8001f14:	009b      	lsls	r3, r3, #2
 8001f16:	4413      	add	r3, r2
 8001f18:	685b      	ldr	r3, [r3, #4]
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d106      	bne.n	8001f2c <HAL_ETH_ReleaseTxPacket+0x48>
    {
      /* No packet in use, skip to next.  */
      idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f1e:	693b      	ldr	r3, [r7, #16]
 8001f20:	3301      	adds	r3, #1
 8001f22:	f003 0303 	and.w	r3, r3, #3
 8001f26:	613b      	str	r3, [r7, #16]
      pktInUse = 0U;
 8001f28:	2300      	movs	r3, #0
 8001f2a:	73bb      	strb	r3, [r7, #14]
    }

    if (pktInUse != 0U)
 8001f2c:	7bbb      	ldrb	r3, [r7, #14]
 8001f2e:	2b00      	cmp	r3, #0
 8001f30:	d028      	beq.n	8001f84 <HAL_ETH_ReleaseTxPacket+0xa0>
    {
      /* Determine if the packet has been transmitted.  */
      if ((heth->Init.TxDesc[idx].DESC0 & ETH_DMATXDESC_OWN) == 0U)
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	68d9      	ldr	r1, [r3, #12]
 8001f36:	693a      	ldr	r2, [r7, #16]
 8001f38:	4613      	mov	r3, r2
 8001f3a:	009b      	lsls	r3, r3, #2
 8001f3c:	4413      	add	r3, r2
 8001f3e:	00db      	lsls	r3, r3, #3
 8001f40:	440b      	add	r3, r1
 8001f42:	681b      	ldr	r3, [r3, #0]
 8001f44:	2b00      	cmp	r3, #0
 8001f46:	db1b      	blt.n	8001f80 <HAL_ETH_ReleaseTxPacket+0x9c>
#ifdef HAL_ETH_USE_PTP
        /* Handle Ptp  */
        HAL_ETH_TxPtpCallback(dmatxdesclist->PacketAddress[idx], timestamp);
#endif  /* HAL_ETH_USE_PTP */
        /* Release the packet.  */
        HAL_ETH_TxFreeCallback(dmatxdesclist->PacketAddress[idx]);
 8001f48:	68ba      	ldr	r2, [r7, #8]
 8001f4a:	693b      	ldr	r3, [r7, #16]
 8001f4c:	3304      	adds	r3, #4
 8001f4e:	009b      	lsls	r3, r3, #2
 8001f50:	4413      	add	r3, r2
 8001f52:	685b      	ldr	r3, [r3, #4]
 8001f54:	4618      	mov	r0, r3
 8001f56:	f003 fc5b 	bl	8005810 <HAL_ETH_TxFreeCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

        /* Clear the entry in the in-use array.  */
        dmatxdesclist->PacketAddress[idx] = NULL;
 8001f5a:	68ba      	ldr	r2, [r7, #8]
 8001f5c:	693b      	ldr	r3, [r7, #16]
 8001f5e:	3304      	adds	r3, #4
 8001f60:	009b      	lsls	r3, r3, #2
 8001f62:	4413      	add	r3, r2
 8001f64:	2200      	movs	r2, #0
 8001f66:	605a      	str	r2, [r3, #4]

        /* Update the transmit relesae index and number of buffers in use.  */
        idx = (idx + 1U) & (ETH_TX_DESC_CNT - 1U);
 8001f68:	693b      	ldr	r3, [r7, #16]
 8001f6a:	3301      	adds	r3, #1
 8001f6c:	f003 0303 	and.w	r3, r3, #3
 8001f70:	613b      	str	r3, [r7, #16]
        dmatxdesclist->BuffersInUse = numOfBuf;
 8001f72:	68bb      	ldr	r3, [r7, #8]
 8001f74:	697a      	ldr	r2, [r7, #20]
 8001f76:	629a      	str	r2, [r3, #40]	; 0x28
        dmatxdesclist->releaseIndex = idx;
 8001f78:	68bb      	ldr	r3, [r7, #8]
 8001f7a:	693a      	ldr	r2, [r7, #16]
 8001f7c:	62da      	str	r2, [r3, #44]	; 0x2c
 8001f7e:	e001      	b.n	8001f84 <HAL_ETH_ReleaseTxPacket+0xa0>
      }
      else
      {
        /* Get out of the loop!  */
        pktTxStatus = 0U;
 8001f80:	2300      	movs	r3, #0
 8001f82:	73fb      	strb	r3, [r7, #15]
  while ((numOfBuf != 0U) && (pktTxStatus != 0U))
 8001f84:	697b      	ldr	r3, [r7, #20]
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d002      	beq.n	8001f90 <HAL_ETH_ReleaseTxPacket+0xac>
 8001f8a:	7bfb      	ldrb	r3, [r7, #15]
 8001f8c:	2b00      	cmp	r3, #0
 8001f8e:	d1b9      	bne.n	8001f04 <HAL_ETH_ReleaseTxPacket+0x20>
      }
    }
  }
  return HAL_OK;
 8001f90:	2300      	movs	r3, #0
}
 8001f92:	4618      	mov	r0, r3
 8001f94:	3718      	adds	r7, #24
 8001f96:	46bd      	mov	sp, r7
 8001f98:	bd80      	pop	{r7, pc}
	...

08001f9c <HAL_ETH_IRQHandler>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
void HAL_ETH_IRQHandler(ETH_HandleTypeDef *heth)
{
 8001f9c:	b580      	push	{r7, lr}
 8001f9e:	b082      	sub	sp, #8
 8001fa0:	af00      	add	r7, sp, #0
 8001fa2:	6078      	str	r0, [r7, #4]
  /* Packet received */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_RS))
 8001fa4:	687b      	ldr	r3, [r7, #4]
 8001fa6:	681b      	ldr	r3, [r3, #0]
 8001fa8:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fac:	695b      	ldr	r3, [r3, #20]
 8001fae:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fb2:	2b40      	cmp	r3, #64	; 0x40
 8001fb4:	d112      	bne.n	8001fdc <HAL_ETH_IRQHandler+0x40>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_RIE))
 8001fb6:	687b      	ldr	r3, [r7, #4]
 8001fb8:	681b      	ldr	r3, [r3, #0]
 8001fba:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fbe:	69db      	ldr	r3, [r3, #28]
 8001fc0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8001fc4:	2b40      	cmp	r3, #64	; 0x40
 8001fc6:	d109      	bne.n	8001fdc <HAL_ETH_IRQHandler+0x40>
    {
      /* Clear the Eth DMA Rx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_RS | ETH_DMASR_NIS);
 8001fc8:	687b      	ldr	r3, [r7, #4]
 8001fca:	681b      	ldr	r3, [r3, #0]
 8001fcc:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fd0:	461a      	mov	r2, r3
 8001fd2:	4b50      	ldr	r3, [pc, #320]	; (8002114 <HAL_ETH_IRQHandler+0x178>)
 8001fd4:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Receive complete callback*/
      heth->RxCpltCallback(heth);
#else
      /* Receive complete callback */
      HAL_ETH_RxCpltCallback(heth);
 8001fd6:	6878      	ldr	r0, [r7, #4]
 8001fd8:	f002 ff62 	bl	8004ea0 <HAL_ETH_RxCpltCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */
    }
  }

  /* Packet transmitted */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_TS))
 8001fdc:	687b      	ldr	r3, [r7, #4]
 8001fde:	681b      	ldr	r3, [r3, #0]
 8001fe0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001fe4:	695b      	ldr	r3, [r3, #20]
 8001fe6:	f003 0301 	and.w	r3, r3, #1
 8001fea:	2b01      	cmp	r3, #1
 8001fec:	d113      	bne.n	8002016 <HAL_ETH_IRQHandler+0x7a>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_TIE))
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	681b      	ldr	r3, [r3, #0]
 8001ff2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8001ff6:	69db      	ldr	r3, [r3, #28]
 8001ff8:	f003 0301 	and.w	r3, r3, #1
 8001ffc:	2b01      	cmp	r3, #1
 8001ffe:	d10a      	bne.n	8002016 <HAL_ETH_IRQHandler+0x7a>
    {
      /* Clear the Eth DMA Tx IT pending bits */
      __HAL_ETH_DMA_CLEAR_IT(heth, ETH_DMASR_TS | ETH_DMASR_NIS);
 8002000:	687b      	ldr	r3, [r7, #4]
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002008:	461a      	mov	r2, r3
 800200a:	f04f 1301 	mov.w	r3, #65537	; 0x10001
 800200e:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /*Call registered Transmit complete callback*/
      heth->TxCpltCallback(heth);
#else
      /* Transfer complete callback */
      HAL_ETH_TxCpltCallback(heth);
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f002 ff55 	bl	8004ec0 <HAL_ETH_TxCpltCallback>
    }
  }


  /* ETH DMA Error */
  if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_AIS))
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800201e:	695b      	ldr	r3, [r3, #20]
 8002020:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002024:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8002028:	d14c      	bne.n	80020c4 <HAL_ETH_IRQHandler+0x128>
  {
    if (__HAL_ETH_DMA_GET_IT_SOURCE(heth, ETH_DMAIER_AISE))
 800202a:	687b      	ldr	r3, [r7, #4]
 800202c:	681b      	ldr	r3, [r3, #0]
 800202e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002032:	69db      	ldr	r3, [r3, #28]
 8002034:	f403 4300 	and.w	r3, r3, #32768	; 0x8000
 8002038:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 800203c:	d142      	bne.n	80020c4 <HAL_ETH_IRQHandler+0x128>
    {
      heth->ErrorCode |= HAL_ETH_ERROR_DMA;
 800203e:	687b      	ldr	r3, [r7, #4]
 8002040:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002044:	f043 0208 	orr.w	r2, r3, #8
 8002048:	687b      	ldr	r3, [r7, #4]
 800204a:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88

      /* if fatal bus error occurred */
      if (__HAL_ETH_DMA_GET_IT(heth, ETH_DMASR_FBES))
 800204e:	687b      	ldr	r3, [r7, #4]
 8002050:	681b      	ldr	r3, [r3, #0]
 8002052:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002056:	695b      	ldr	r3, [r3, #20]
 8002058:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 800205c:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8002060:	d11a      	bne.n	8002098 <HAL_ETH_IRQHandler+0xfc>
      {
        /* Get DMA error code  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_FBES | ETH_DMASR_TPS | ETH_DMASR_RPS));
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	681b      	ldr	r3, [r3, #0]
 8002066:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800206a:	695a      	ldr	r2, [r3, #20]
 800206c:	4b2a      	ldr	r3, [pc, #168]	; (8002118 <HAL_ETH_IRQHandler+0x17c>)
 800206e:	4013      	ands	r3, r2
 8002070:	687a      	ldr	r2, [r7, #4]
 8002072:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c

        /* Disable all interrupts */
        __HAL_ETH_DMA_DISABLE_IT(heth, ETH_DMAIER_NISE | ETH_DMAIER_AISE);
 8002076:	687b      	ldr	r3, [r7, #4]
 8002078:	681b      	ldr	r3, [r3, #0]
 800207a:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800207e:	69db      	ldr	r3, [r3, #28]
 8002080:	687a      	ldr	r2, [r7, #4]
 8002082:	6812      	ldr	r2, [r2, #0]
 8002084:	f423 33c0 	bic.w	r3, r3, #98304	; 0x18000
 8002088:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800208c:	61d3      	str	r3, [r2, #28]

        /* Set HAL state to ERROR */
        heth->gState = HAL_ETH_STATE_ERROR;
 800208e:	687b      	ldr	r3, [r7, #4]
 8002090:	22e0      	movs	r2, #224	; 0xe0
 8002092:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
 8002096:	e012      	b.n	80020be <HAL_ETH_IRQHandler+0x122>
      }
      else
      {
        /* Get DMA error status  */
        heth->DMAErrorCode = READ_BIT(heth->Instance->DMASR, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 8002098:	687b      	ldr	r3, [r7, #4]
 800209a:	681b      	ldr	r3, [r3, #0]
 800209c:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020a0:	695a      	ldr	r2, [r3, #20]
 80020a2:	f248 6380 	movw	r3, #34432	; 0x8680
 80020a6:	4013      	ands	r3, r2
 80020a8:	687a      	ldr	r2, [r7, #4]
 80020aa:	f8c2 308c 	str.w	r3, [r2, #140]	; 0x8c
                                                              ETH_DMASR_RBUS | ETH_DMASR_AIS));

        /* Clear the interrupt summary flag */
        __HAL_ETH_DMA_CLEAR_IT(heth, (ETH_DMASR_ETS | ETH_DMASR_RWTS |
 80020ae:	687b      	ldr	r3, [r7, #4]
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80020b6:	461a      	mov	r2, r3
 80020b8:	f248 6380 	movw	r3, #34432	; 0x8680
 80020bc:	6153      	str	r3, [r2, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
      /* Call registered Error callback*/
      heth->ErrorCallback(heth);
#else
      /* Ethernet DMA Error callback */
      HAL_ETH_ErrorCallback(heth);
 80020be:	6878      	ldr	r0, [r7, #4]
 80020c0:	f002 ff0e 	bl	8004ee0 <HAL_ETH_ErrorCallback>
    }
  }


  /* ETH PMT IT */
  if (__HAL_ETH_MAC_GET_IT(heth, ETH_MAC_PMT_IT))
 80020c4:	687b      	ldr	r3, [r7, #4]
 80020c6:	681b      	ldr	r3, [r3, #0]
 80020c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80020ca:	f003 0308 	and.w	r3, r3, #8
 80020ce:	2b08      	cmp	r3, #8
 80020d0:	d10e      	bne.n	80020f0 <HAL_ETH_IRQHandler+0x154>
  {
    /* Get MAC Wake-up source and clear the status register pending bit */
    heth->MACWakeUpEvent = READ_BIT(heth->Instance->MACPMTCSR, (ETH_MACPMTCSR_WFR | ETH_MACPMTCSR_MPR));
 80020d2:	687b      	ldr	r3, [r7, #4]
 80020d4:	681b      	ldr	r3, [r3, #0]
 80020d6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80020d8:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered PMT callback*/
    heth->PMTCallback(heth);
#else
    /* Ethernet PMT callback */
    HAL_ETH_PMTCallback(heth);
 80020e2:	6878      	ldr	r0, [r7, #4]
 80020e4:	f000 f81c 	bl	8002120 <HAL_ETH_PMTCallback>
#endif  /* USE_HAL_ETH_REGISTER_CALLBACKS */

    heth->MACWakeUpEvent = (uint32_t)(0x0U);
 80020e8:	687b      	ldr	r3, [r7, #4]
 80020ea:	2200      	movs	r2, #0
 80020ec:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
  }


  /* check ETH WAKEUP exti flag */
  if (__HAL_ETH_WAKEUP_EXTI_GET_FLAG(ETH_WAKEUP_EXTI_LINE) != (uint32_t)RESET)
 80020f0:	4b0a      	ldr	r3, [pc, #40]	; (800211c <HAL_ETH_IRQHandler+0x180>)
 80020f2:	695b      	ldr	r3, [r3, #20]
 80020f4:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80020f8:	2b00      	cmp	r3, #0
 80020fa:	d006      	beq.n	800210a <HAL_ETH_IRQHandler+0x16e>
  {
    /* Clear ETH WAKEUP Exti pending bit */
    __HAL_ETH_WAKEUP_EXTI_CLEAR_FLAG(ETH_WAKEUP_EXTI_LINE);
 80020fc:	4b07      	ldr	r3, [pc, #28]	; (800211c <HAL_ETH_IRQHandler+0x180>)
 80020fe:	f44f 2200 	mov.w	r2, #524288	; 0x80000
 8002102:	615a      	str	r2, [r3, #20]
#if (USE_HAL_ETH_REGISTER_CALLBACKS == 1)
    /* Call registered WakeUp callback*/
    heth->WakeUpCallback(heth);
#else
    /* ETH WAKEUP callback */
    HAL_ETH_WakeUpCallback(heth);
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f000 f815 	bl	8002134 <HAL_ETH_WakeUpCallback>
#endif /* USE_HAL_ETH_REGISTER_CALLBACKS */
  }
}
 800210a:	bf00      	nop
 800210c:	3708      	adds	r7, #8
 800210e:	46bd      	mov	sp, r7
 8002110:	bd80      	pop	{r7, pc}
 8002112:	bf00      	nop
 8002114:	00010040 	.word	0x00010040
 8002118:	007e2000 	.word	0x007e2000
 800211c:	40013c00 	.word	0x40013c00

08002120 <HAL_ETH_PMTCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_PMTCallback(ETH_HandleTypeDef *heth)
{
 8002120:	b480      	push	{r7}
 8002122:	b083      	sub	sp, #12
 8002124:	af00      	add	r7, sp, #0
 8002126:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
  the HAL_ETH_PMTCallback could be implemented in the user file
  */
}
 8002128:	bf00      	nop
 800212a:	370c      	adds	r7, #12
 800212c:	46bd      	mov	sp, r7
 800212e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002132:	4770      	bx	lr

08002134 <HAL_ETH_WakeUpCallback>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
__weak void HAL_ETH_WakeUpCallback(ETH_HandleTypeDef *heth)
{
 8002134:	b480      	push	{r7}
 8002136:	b083      	sub	sp, #12
 8002138:	af00      	add	r7, sp, #0
 800213a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);
  /* NOTE : This function Should not be modified, when the callback is needed,
            the HAL_ETH_WakeUpCallback could be implemented in the user file
   */
}
 800213c:	bf00      	nop
 800213e:	370c      	adds	r7, #12
 8002140:	46bd      	mov	sp, r7
 8002142:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002146:	4770      	bx	lr

08002148 <HAL_ETH_ReadPHYRegister>:
  * @param pRegValue: parameter to hold read value
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_ReadPHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                          uint32_t *pRegValue)
{
 8002148:	b580      	push	{r7, lr}
 800214a:	b086      	sub	sp, #24
 800214c:	af00      	add	r7, sp, #0
 800214e:	60f8      	str	r0, [r7, #12]
 8002150:	60b9      	str	r1, [r7, #8]
 8002152:	607a      	str	r2, [r7, #4]
 8002154:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 8002156:	68fb      	ldr	r3, [r7, #12]
 8002158:	681b      	ldr	r3, [r3, #0]
 800215a:	691b      	ldr	r3, [r3, #16]
 800215c:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 800215e:	697b      	ldr	r3, [r7, #20]
 8002160:	f003 031c 	and.w	r3, r3, #28
 8002164:	617b      	str	r3, [r7, #20]

  /* Prepare the MII address register value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                        /* Set the PHY device address   */
 8002166:	68bb      	ldr	r3, [r7, #8]
 8002168:	02db      	lsls	r3, r3, #11
 800216a:	b29b      	uxth	r3, r3
 800216c:	697a      	ldr	r2, [r7, #20]
 800216e:	4313      	orrs	r3, r2
 8002170:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);                /* Set the PHY register address */
 8002172:	687b      	ldr	r3, [r7, #4]
 8002174:	019b      	lsls	r3, r3, #6
 8002176:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 800217a:	697a      	ldr	r2, [r7, #20]
 800217c:	4313      	orrs	r3, r2
 800217e:	617b      	str	r3, [r7, #20]
  tmpreg1 &= ~ETH_MACMIIAR_MW;                                            /* Set the read mode            */
 8002180:	697b      	ldr	r3, [r7, #20]
 8002182:	f023 0302 	bic.w	r3, r3, #2
 8002186:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                             /* Set the MII Busy bit         */
 8002188:	697b      	ldr	r3, [r7, #20]
 800218a:	f043 0301 	orr.w	r3, r3, #1
 800218e:	617b      	str	r3, [r7, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002190:	68fb      	ldr	r3, [r7, #12]
 8002192:	681b      	ldr	r3, [r3, #0]
 8002194:	697a      	ldr	r2, [r7, #20]
 8002196:	611a      	str	r2, [r3, #16]


  tickstart = HAL_GetTick();
 8002198:	f7ff fa74 	bl	8001684 <HAL_GetTick>
 800219c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800219e:	e00d      	b.n	80021bc <HAL_ETH_ReadPHYRegister+0x74>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_READ_TO)
 80021a0:	f7ff fa70 	bl	8001684 <HAL_GetTick>
 80021a4:	4602      	mov	r2, r0
 80021a6:	693b      	ldr	r3, [r7, #16]
 80021a8:	1ad3      	subs	r3, r2, r3
 80021aa:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80021ae:	d301      	bcc.n	80021b4 <HAL_ETH_ReadPHYRegister+0x6c>
    {
      return HAL_ERROR;
 80021b0:	2301      	movs	r3, #1
 80021b2:	e010      	b.n	80021d6 <HAL_ETH_ReadPHYRegister+0x8e>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 80021b4:	68fb      	ldr	r3, [r7, #12]
 80021b6:	681b      	ldr	r3, [r3, #0]
 80021b8:	691b      	ldr	r3, [r3, #16]
 80021ba:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 80021bc:	697b      	ldr	r3, [r7, #20]
 80021be:	f003 0301 	and.w	r3, r3, #1
 80021c2:	2b00      	cmp	r3, #0
 80021c4:	d1ec      	bne.n	80021a0 <HAL_ETH_ReadPHYRegister+0x58>
  }

  /* Get MACMIIDR value */
  *pRegValue = (uint16_t)(heth->Instance->MACMIIDR);
 80021c6:	68fb      	ldr	r3, [r7, #12]
 80021c8:	681b      	ldr	r3, [r3, #0]
 80021ca:	695b      	ldr	r3, [r3, #20]
 80021cc:	b29b      	uxth	r3, r3
 80021ce:	461a      	mov	r2, r3
 80021d0:	683b      	ldr	r3, [r7, #0]
 80021d2:	601a      	str	r2, [r3, #0]

  return HAL_OK;
 80021d4:	2300      	movs	r3, #0
}
 80021d6:	4618      	mov	r0, r3
 80021d8:	3718      	adds	r7, #24
 80021da:	46bd      	mov	sp, r7
 80021dc:	bd80      	pop	{r7, pc}

080021de <HAL_ETH_WritePHYRegister>:
  * @param  RegValue: the value to write
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_WritePHYRegister(ETH_HandleTypeDef *heth, uint32_t PHYAddr, uint32_t PHYReg,
                                           uint32_t RegValue)
{
 80021de:	b580      	push	{r7, lr}
 80021e0:	b086      	sub	sp, #24
 80021e2:	af00      	add	r7, sp, #0
 80021e4:	60f8      	str	r0, [r7, #12]
 80021e6:	60b9      	str	r1, [r7, #8]
 80021e8:	607a      	str	r2, [r7, #4]
 80021ea:	603b      	str	r3, [r7, #0]
  uint32_t tmpreg1;
  uint32_t tickstart;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg1 = heth->Instance->MACMIIAR;
 80021ec:	68fb      	ldr	r3, [r7, #12]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	691b      	ldr	r3, [r3, #16]
 80021f2:	617b      	str	r3, [r7, #20]

  /* Keep only the CSR Clock Range CR[2:0] bits value */
  tmpreg1 &= ~ETH_MACMIIAR_CR_MASK;
 80021f4:	697b      	ldr	r3, [r7, #20]
 80021f6:	f003 031c 	and.w	r3, r3, #28
 80021fa:	617b      	str	r3, [r7, #20]

  /* Prepare the MII register address value */
  tmpreg1 |= ((PHYAddr << 11U) & ETH_MACMIIAR_PA);                      /* Set the PHY device address */
 80021fc:	68bb      	ldr	r3, [r7, #8]
 80021fe:	02db      	lsls	r3, r3, #11
 8002200:	b29b      	uxth	r3, r3
 8002202:	697a      	ldr	r2, [r7, #20]
 8002204:	4313      	orrs	r3, r2
 8002206:	617b      	str	r3, [r7, #20]
  tmpreg1 |= (((uint32_t)PHYReg << 6U) & ETH_MACMIIAR_MR);              /* Set the PHY register address */
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	019b      	lsls	r3, r3, #6
 800220c:	f403 63f8 	and.w	r3, r3, #1984	; 0x7c0
 8002210:	697a      	ldr	r2, [r7, #20]
 8002212:	4313      	orrs	r3, r2
 8002214:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MW;                                           /* Set the write mode */
 8002216:	697b      	ldr	r3, [r7, #20]
 8002218:	f043 0302 	orr.w	r3, r3, #2
 800221c:	617b      	str	r3, [r7, #20]
  tmpreg1 |= ETH_MACMIIAR_MB;                                           /* Set the MII Busy bit */
 800221e:	697b      	ldr	r3, [r7, #20]
 8002220:	f043 0301 	orr.w	r3, r3, #1
 8002224:	617b      	str	r3, [r7, #20]

  /* Give the value to the MII data register */
  heth->Instance->MACMIIDR = (uint16_t)RegValue;
 8002226:	683b      	ldr	r3, [r7, #0]
 8002228:	b29a      	uxth	r2, r3
 800222a:	68fb      	ldr	r3, [r7, #12]
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	615a      	str	r2, [r3, #20]

  /* Write the result value into the MII Address register */
  heth->Instance->MACMIIAR = tmpreg1;
 8002230:	68fb      	ldr	r3, [r7, #12]
 8002232:	681b      	ldr	r3, [r3, #0]
 8002234:	697a      	ldr	r2, [r7, #20]
 8002236:	611a      	str	r2, [r3, #16]

  /* Get tick */
  tickstart = HAL_GetTick();
 8002238:	f7ff fa24 	bl	8001684 <HAL_GetTick>
 800223c:	6138      	str	r0, [r7, #16]

  /* Check for the Busy flag */
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800223e:	e00d      	b.n	800225c <HAL_ETH_WritePHYRegister+0x7e>
  {
    /* Check for the Timeout */
    if ((HAL_GetTick() - tickstart) > PHY_WRITE_TO)
 8002240:	f7ff fa20 	bl	8001684 <HAL_GetTick>
 8002244:	4602      	mov	r2, r0
 8002246:	693b      	ldr	r3, [r7, #16]
 8002248:	1ad3      	subs	r3, r2, r3
 800224a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800224e:	d301      	bcc.n	8002254 <HAL_ETH_WritePHYRegister+0x76>
    {
      return HAL_ERROR;
 8002250:	2301      	movs	r3, #1
 8002252:	e009      	b.n	8002268 <HAL_ETH_WritePHYRegister+0x8a>
    }

    tmpreg1 = heth->Instance->MACMIIAR;
 8002254:	68fb      	ldr	r3, [r7, #12]
 8002256:	681b      	ldr	r3, [r3, #0]
 8002258:	691b      	ldr	r3, [r3, #16]
 800225a:	617b      	str	r3, [r7, #20]
  while ((tmpreg1 & ETH_MACMIIAR_MB) == ETH_MACMIIAR_MB)
 800225c:	697b      	ldr	r3, [r7, #20]
 800225e:	f003 0301 	and.w	r3, r3, #1
 8002262:	2b00      	cmp	r3, #0
 8002264:	d1ec      	bne.n	8002240 <HAL_ETH_WritePHYRegister+0x62>
  }

  return HAL_OK;
 8002266:	2300      	movs	r3, #0
}
 8002268:	4618      	mov	r0, r3
 800226a:	3718      	adds	r7, #24
 800226c:	46bd      	mov	sp, r7
 800226e:	bd80      	pop	{r7, pc}

08002270 <HAL_ETH_GetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that will hold
  *         the configuration of the MAC.
  * @retval HAL Status
  */
HAL_StatusTypeDef HAL_ETH_GetMACConfig(ETH_HandleTypeDef *heth, ETH_MACConfigTypeDef *macconf)
{
 8002270:	b480      	push	{r7}
 8002272:	b083      	sub	sp, #12
 8002274:	af00      	add	r7, sp, #0
 8002276:	6078      	str	r0, [r7, #4]
 8002278:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800227a:	683b      	ldr	r3, [r7, #0]
 800227c:	2b00      	cmp	r3, #0
 800227e:	d101      	bne.n	8002284 <HAL_ETH_GetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002280:	2301      	movs	r3, #1
 8002282:	e0d9      	b.n	8002438 <HAL_ETH_GetMACConfig+0x1c8>
  }

  /* Get MAC parameters */
  macconf->DeferralCheck = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_DC) >> 4) > 0U) ? ENABLE : DISABLE;
 8002284:	687b      	ldr	r3, [r7, #4]
 8002286:	681b      	ldr	r3, [r3, #0]
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	f003 0310 	and.w	r3, r3, #16
 800228e:	2b00      	cmp	r3, #0
 8002290:	bf14      	ite	ne
 8002292:	2301      	movne	r3, #1
 8002294:	2300      	moveq	r3, #0
 8002296:	b2db      	uxtb	r3, r3
 8002298:	461a      	mov	r2, r3
 800229a:	683b      	ldr	r3, [r7, #0]
 800229c:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  macconf->BackOffLimit = READ_BIT(heth->Instance->MACCR, ETH_MACCR_BL);
 80022a0:	687b      	ldr	r3, [r7, #4]
 80022a2:	681b      	ldr	r3, [r3, #0]
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	f003 0260 	and.w	r2, r3, #96	; 0x60
 80022aa:	683b      	ldr	r3, [r7, #0]
 80022ac:	625a      	str	r2, [r3, #36]	; 0x24
  macconf->RetryTransmission = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_RD) >> 9) == 0U) ? ENABLE : DISABLE;
 80022ae:	687b      	ldr	r3, [r7, #4]
 80022b0:	681b      	ldr	r3, [r3, #0]
 80022b2:	681b      	ldr	r3, [r3, #0]
 80022b4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80022b8:	2b00      	cmp	r3, #0
 80022ba:	bf0c      	ite	eq
 80022bc:	2301      	moveq	r3, #1
 80022be:	2300      	movne	r3, #0
 80022c0:	b2db      	uxtb	r3, r3
 80022c2:	461a      	mov	r2, r3
 80022c4:	683b      	ldr	r3, [r7, #0]
 80022c6:	f883 2020 	strb.w	r2, [r3, #32]
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	681b      	ldr	r3, [r3, #0]
 80022d0:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
                                        ? ENABLE : DISABLE;
 80022d4:	2b00      	cmp	r3, #0
 80022d6:	bf14      	ite	ne
 80022d8:	2301      	movne	r3, #1
 80022da:	2300      	moveq	r3, #0
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	461a      	mov	r2, r3
  macconf->CarrierSenseDuringTransmit = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_CSD) >> 16) > 0U)
 80022e0:	683b      	ldr	r3, [r7, #0]
 80022e2:	77da      	strb	r2, [r3, #31]
  macconf->ReceiveOwn = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_ROD) >> 13) == 0U) ? ENABLE : DISABLE;
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	681b      	ldr	r3, [r3, #0]
 80022ea:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80022ee:	2b00      	cmp	r3, #0
 80022f0:	bf0c      	ite	eq
 80022f2:	2301      	moveq	r3, #1
 80022f4:	2300      	movne	r3, #0
 80022f6:	b2db      	uxtb	r3, r3
 80022f8:	461a      	mov	r2, r3
 80022fa:	683b      	ldr	r3, [r7, #0]
 80022fc:	779a      	strb	r2, [r3, #30]
  macconf->LoopbackMode = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_LM) >> 12) > 0U) ? ENABLE : DISABLE;
 80022fe:	687b      	ldr	r3, [r7, #4]
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	681b      	ldr	r3, [r3, #0]
 8002304:	f403 5380 	and.w	r3, r3, #4096	; 0x1000
 8002308:	2b00      	cmp	r3, #0
 800230a:	bf14      	ite	ne
 800230c:	2301      	movne	r3, #1
 800230e:	2300      	moveq	r3, #0
 8002310:	b2db      	uxtb	r3, r3
 8002312:	461a      	mov	r2, r3
 8002314:	683b      	ldr	r3, [r7, #0]
 8002316:	771a      	strb	r2, [r3, #28]
  macconf->DuplexMode = READ_BIT(heth->Instance->MACCR, ETH_MACCR_DM);
 8002318:	687b      	ldr	r3, [r7, #4]
 800231a:	681b      	ldr	r3, [r3, #0]
 800231c:	681b      	ldr	r3, [r3, #0]
 800231e:	f403 6200 	and.w	r2, r3, #2048	; 0x800
 8002322:	683b      	ldr	r3, [r7, #0]
 8002324:	619a      	str	r2, [r3, #24]
  macconf->Speed = READ_BIT(heth->Instance->MACCR, ETH_MACCR_FES);
 8002326:	687b      	ldr	r3, [r7, #4]
 8002328:	681b      	ldr	r3, [r3, #0]
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	f403 4280 	and.w	r2, r3, #16384	; 0x4000
 8002330:	683b      	ldr	r3, [r7, #0]
 8002332:	615a      	str	r2, [r3, #20]
  macconf->Jabber = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_JD) >> 22) == 0U) ? ENABLE : DISABLE;
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	681b      	ldr	r3, [r3, #0]
 800233a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800233e:	2b00      	cmp	r3, #0
 8002340:	bf0c      	ite	eq
 8002342:	2301      	moveq	r3, #1
 8002344:	2300      	movne	r3, #0
 8002346:	b2db      	uxtb	r3, r3
 8002348:	461a      	mov	r2, r3
 800234a:	683b      	ldr	r3, [r7, #0]
 800234c:	745a      	strb	r2, [r3, #17]
  macconf->Watchdog = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_WD) >> 23) == 0U) ? ENABLE : DISABLE;
 800234e:	687b      	ldr	r3, [r7, #4]
 8002350:	681b      	ldr	r3, [r3, #0]
 8002352:	681b      	ldr	r3, [r3, #0]
 8002354:	f403 0300 	and.w	r3, r3, #8388608	; 0x800000
 8002358:	2b00      	cmp	r3, #0
 800235a:	bf0c      	ite	eq
 800235c:	2301      	moveq	r3, #1
 800235e:	2300      	movne	r3, #0
 8002360:	b2db      	uxtb	r3, r3
 8002362:	461a      	mov	r2, r3
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	741a      	strb	r2, [r3, #16]
  macconf->AutomaticPadCRCStrip = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_APCS) >> 7) > 0U) ? ENABLE : DISABLE;
 8002368:	687b      	ldr	r3, [r7, #4]
 800236a:	681b      	ldr	r3, [r3, #0]
 800236c:	681b      	ldr	r3, [r3, #0]
 800236e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8002372:	2b00      	cmp	r3, #0
 8002374:	bf14      	ite	ne
 8002376:	2301      	movne	r3, #1
 8002378:	2300      	moveq	r3, #0
 800237a:	b2db      	uxtb	r3, r3
 800237c:	461a      	mov	r2, r3
 800237e:	683b      	ldr	r3, [r7, #0]
 8002380:	73da      	strb	r2, [r3, #15]
  macconf->InterPacketGapVal = READ_BIT(heth->Instance->MACCR, ETH_MACCR_IFG);
 8002382:	687b      	ldr	r3, [r7, #4]
 8002384:	681b      	ldr	r3, [r3, #0]
 8002386:	681b      	ldr	r3, [r3, #0]
 8002388:	f403 2260 	and.w	r2, r3, #917504	; 0xe0000
 800238c:	683b      	ldr	r3, [r7, #0]
 800238e:	609a      	str	r2, [r3, #8]
  macconf->ChecksumOffload = ((READ_BIT(heth->Instance->MACCR, ETH_MACCR_IPCO) >> 10U) > 0U) ? ENABLE : DISABLE;
 8002390:	687b      	ldr	r3, [r7, #4]
 8002392:	681b      	ldr	r3, [r3, #0]
 8002394:	681b      	ldr	r3, [r3, #0]
 8002396:	f403 6380 	and.w	r3, r3, #1024	; 0x400
 800239a:	2b00      	cmp	r3, #0
 800239c:	bf14      	ite	ne
 800239e:	2301      	movne	r3, #1
 80023a0:	2300      	moveq	r3, #0
 80023a2:	b2db      	uxtb	r3, r3
 80023a4:	461a      	mov	r2, r3
 80023a6:	683b      	ldr	r3, [r7, #0]
 80023a8:	711a      	strb	r2, [r3, #4]


  macconf->TransmitFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_TFCE) >> 1) > 0U) ? ENABLE : DISABLE;
 80023aa:	687b      	ldr	r3, [r7, #4]
 80023ac:	681b      	ldr	r3, [r3, #0]
 80023ae:	699b      	ldr	r3, [r3, #24]
 80023b0:	f003 0302 	and.w	r3, r3, #2
 80023b4:	2b00      	cmp	r3, #0
 80023b6:	bf14      	ite	ne
 80023b8:	2301      	movne	r3, #1
 80023ba:	2300      	moveq	r3, #0
 80023bc:	b2db      	uxtb	r3, r3
 80023be:	461a      	mov	r2, r3
 80023c0:	683b      	ldr	r3, [r7, #0]
 80023c2:	f883 2054 	strb.w	r2, [r3, #84]	; 0x54
  macconf->ZeroQuantaPause = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_ZQPD) >> 7) == 0U) ? ENABLE : DISABLE;
 80023c6:	687b      	ldr	r3, [r7, #4]
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	699b      	ldr	r3, [r3, #24]
 80023cc:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	bf0c      	ite	eq
 80023d4:	2301      	moveq	r3, #1
 80023d6:	2300      	movne	r3, #0
 80023d8:	b2db      	uxtb	r3, r3
 80023da:	461a      	mov	r2, r3
 80023dc:	683b      	ldr	r3, [r7, #0]
 80023de:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
  macconf->PauseLowThreshold = READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PLT);
 80023e2:	687b      	ldr	r3, [r7, #4]
 80023e4:	681b      	ldr	r3, [r3, #0]
 80023e6:	699b      	ldr	r3, [r3, #24]
 80023e8:	f003 0230 	and.w	r2, r3, #48	; 0x30
 80023ec:	683b      	ldr	r3, [r7, #0]
 80023ee:	651a      	str	r2, [r3, #80]	; 0x50
  macconf->PauseTime = (READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_PT) >> 16);
 80023f0:	687b      	ldr	r3, [r7, #4]
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	699b      	ldr	r3, [r3, #24]
 80023f6:	0c1b      	lsrs	r3, r3, #16
 80023f8:	b29a      	uxth	r2, r3
 80023fa:	683b      	ldr	r3, [r7, #0]
 80023fc:	649a      	str	r2, [r3, #72]	; 0x48
  macconf->ReceiveFlowControl = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_RFCE) >> 2U) > 0U) ? ENABLE : DISABLE;
 80023fe:	687b      	ldr	r3, [r7, #4]
 8002400:	681b      	ldr	r3, [r3, #0]
 8002402:	699b      	ldr	r3, [r3, #24]
 8002404:	f003 0304 	and.w	r3, r3, #4
 8002408:	2b00      	cmp	r3, #0
 800240a:	bf14      	ite	ne
 800240c:	2301      	movne	r3, #1
 800240e:	2300      	moveq	r3, #0
 8002410:	b2db      	uxtb	r3, r3
 8002412:	461a      	mov	r2, r3
 8002414:	683b      	ldr	r3, [r7, #0]
 8002416:	f883 2056 	strb.w	r2, [r3, #86]	; 0x56
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 800241a:	687b      	ldr	r3, [r7, #4]
 800241c:	681b      	ldr	r3, [r3, #0]
 800241e:	699b      	ldr	r3, [r3, #24]
 8002420:	f003 0308 	and.w	r3, r3, #8
                                      ? ENABLE : DISABLE;
 8002424:	2b00      	cmp	r3, #0
 8002426:	bf14      	ite	ne
 8002428:	2301      	movne	r3, #1
 800242a:	2300      	moveq	r3, #0
 800242c:	b2db      	uxtb	r3, r3
 800242e:	461a      	mov	r2, r3
  macconf->UnicastPausePacketDetect = ((READ_BIT(heth->Instance->MACFCR, ETH_MACFCR_UPFD) >> 3U) > 0U)
 8002430:	683b      	ldr	r3, [r7, #0]
 8002432:	f883 2055 	strb.w	r2, [r3, #85]	; 0x55

  return HAL_OK;
 8002436:	2300      	movs	r3, #0
}
 8002438:	4618      	mov	r0, r3
 800243a:	370c      	adds	r7, #12
 800243c:	46bd      	mov	sp, r7
 800243e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002442:	4770      	bx	lr

08002444 <HAL_ETH_SetMACConfig>:
  * @param  macconf: pointer to a ETH_MACConfigTypeDef structure that contains
  *         the configuration of the MAC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002444:	b580      	push	{r7, lr}
 8002446:	b082      	sub	sp, #8
 8002448:	af00      	add	r7, sp, #0
 800244a:	6078      	str	r0, [r7, #4]
 800244c:	6039      	str	r1, [r7, #0]
  if (macconf == NULL)
 800244e:	683b      	ldr	r3, [r7, #0]
 8002450:	2b00      	cmp	r3, #0
 8002452:	d101      	bne.n	8002458 <HAL_ETH_SetMACConfig+0x14>
  {
    return HAL_ERROR;
 8002454:	2301      	movs	r3, #1
 8002456:	e00b      	b.n	8002470 <HAL_ETH_SetMACConfig+0x2c>
  }

  if (heth->gState == HAL_ETH_STATE_READY)
 8002458:	687b      	ldr	r3, [r7, #4]
 800245a:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800245e:	2b10      	cmp	r3, #16
 8002460:	d105      	bne.n	800246e <HAL_ETH_SetMACConfig+0x2a>
  {
    ETH_SetMACConfig(heth, macconf);
 8002462:	6839      	ldr	r1, [r7, #0]
 8002464:	6878      	ldr	r0, [r7, #4]
 8002466:	f000 f88f 	bl	8002588 <ETH_SetMACConfig>

    return HAL_OK;
 800246a:	2300      	movs	r3, #0
 800246c:	e000      	b.n	8002470 <HAL_ETH_SetMACConfig+0x2c>
  }
  else
  {
    return HAL_ERROR;
 800246e:	2301      	movs	r3, #1
  }
}
 8002470:	4618      	mov	r0, r3
 8002472:	3708      	adds	r7, #8
 8002474:	46bd      	mov	sp, r7
 8002476:	bd80      	pop	{r7, pc}

08002478 <HAL_ETH_SetMDIOClockRange>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
void HAL_ETH_SetMDIOClockRange(ETH_HandleTypeDef *heth)
{
 8002478:	b580      	push	{r7, lr}
 800247a:	b084      	sub	sp, #16
 800247c:	af00      	add	r7, sp, #0
 800247e:	6078      	str	r0, [r7, #4]
  uint32_t hclk;
  uint32_t tmpreg;

  /* Get the ETHERNET MACMIIAR value */
  tmpreg = (heth->Instance)->MACMIIAR;
 8002480:	687b      	ldr	r3, [r7, #4]
 8002482:	681b      	ldr	r3, [r3, #0]
 8002484:	691b      	ldr	r3, [r3, #16]
 8002486:	60fb      	str	r3, [r7, #12]
  /* Clear CSR Clock Range CR[2:0] bits */
  tmpreg &= ETH_MACMIIAR_CR_MASK;
 8002488:	68fb      	ldr	r3, [r7, #12]
 800248a:	f023 031c 	bic.w	r3, r3, #28
 800248e:	60fb      	str	r3, [r7, #12]

  /* Get hclk frequency value */
  hclk = HAL_RCC_GetHCLKFreq();
 8002490:	f001 fab8 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8002494:	60b8      	str	r0, [r7, #8]

  /* Set CR bits depending on hclk value */
  if ((hclk >= 20000000U) && (hclk < 35000000U))
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	4a1d      	ldr	r2, [pc, #116]	; (8002510 <HAL_ETH_SetMDIOClockRange+0x98>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d908      	bls.n	80024b0 <HAL_ETH_SetMDIOClockRange+0x38>
 800249e:	68bb      	ldr	r3, [r7, #8]
 80024a0:	4a1c      	ldr	r2, [pc, #112]	; (8002514 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024a2:	4293      	cmp	r3, r2
 80024a4:	d804      	bhi.n	80024b0 <HAL_ETH_SetMDIOClockRange+0x38>
  {
    /* CSR Clock Range between 20-35 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div16;
 80024a6:	68fb      	ldr	r3, [r7, #12]
 80024a8:	f043 0308 	orr.w	r3, r3, #8
 80024ac:	60fb      	str	r3, [r7, #12]
 80024ae:	e027      	b.n	8002500 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 35000000U) && (hclk < 60000000U))
 80024b0:	68bb      	ldr	r3, [r7, #8]
 80024b2:	4a18      	ldr	r2, [pc, #96]	; (8002514 <HAL_ETH_SetMDIOClockRange+0x9c>)
 80024b4:	4293      	cmp	r3, r2
 80024b6:	d908      	bls.n	80024ca <HAL_ETH_SetMDIOClockRange+0x52>
 80024b8:	68bb      	ldr	r3, [r7, #8]
 80024ba:	4a17      	ldr	r2, [pc, #92]	; (8002518 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024bc:	4293      	cmp	r3, r2
 80024be:	d204      	bcs.n	80024ca <HAL_ETH_SetMDIOClockRange+0x52>
  {
    /* CSR Clock Range between 35-60 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div26;
 80024c0:	68fb      	ldr	r3, [r7, #12]
 80024c2:	f043 030c 	orr.w	r3, r3, #12
 80024c6:	60fb      	str	r3, [r7, #12]
 80024c8:	e01a      	b.n	8002500 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else if ((hclk >= 60000000U) && (hclk < 100000000U))
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	4a12      	ldr	r2, [pc, #72]	; (8002518 <HAL_ETH_SetMDIOClockRange+0xa0>)
 80024ce:	4293      	cmp	r3, r2
 80024d0:	d303      	bcc.n	80024da <HAL_ETH_SetMDIOClockRange+0x62>
 80024d2:	68bb      	ldr	r3, [r7, #8]
 80024d4:	4a11      	ldr	r2, [pc, #68]	; (800251c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024d6:	4293      	cmp	r3, r2
 80024d8:	d911      	bls.n	80024fe <HAL_ETH_SetMDIOClockRange+0x86>
  {
    /* CSR Clock Range between 60-100 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
  }
  else if ((hclk >= 100000000U) && (hclk < 150000000U))
 80024da:	68bb      	ldr	r3, [r7, #8]
 80024dc:	4a0f      	ldr	r2, [pc, #60]	; (800251c <HAL_ETH_SetMDIOClockRange+0xa4>)
 80024de:	4293      	cmp	r3, r2
 80024e0:	d908      	bls.n	80024f4 <HAL_ETH_SetMDIOClockRange+0x7c>
 80024e2:	68bb      	ldr	r3, [r7, #8]
 80024e4:	4a0e      	ldr	r2, [pc, #56]	; (8002520 <HAL_ETH_SetMDIOClockRange+0xa8>)
 80024e6:	4293      	cmp	r3, r2
 80024e8:	d804      	bhi.n	80024f4 <HAL_ETH_SetMDIOClockRange+0x7c>
  {
    /* CSR Clock Range between 100-150 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div62;
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	f043 0304 	orr.w	r3, r3, #4
 80024f0:	60fb      	str	r3, [r7, #12]
 80024f2:	e005      	b.n	8002500 <HAL_ETH_SetMDIOClockRange+0x88>
  }
  else /* ((hclk >= 150000000)&&(hclk <= 183000000))*/
  {
    /* CSR Clock Range between 150-183 MHz */
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div102;
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	f043 0310 	orr.w	r3, r3, #16
 80024fa:	60fb      	str	r3, [r7, #12]
 80024fc:	e000      	b.n	8002500 <HAL_ETH_SetMDIOClockRange+0x88>
    tmpreg |= (uint32_t)ETH_MACMIIAR_CR_Div42;
 80024fe:	bf00      	nop
  }

  /* Write to ETHERNET MAC MIIAR: Configure the ETHERNET CSR Clock Range */
  (heth->Instance)->MACMIIAR = (uint32_t)tmpreg;
 8002500:	687b      	ldr	r3, [r7, #4]
 8002502:	681b      	ldr	r3, [r3, #0]
 8002504:	68fa      	ldr	r2, [r7, #12]
 8002506:	611a      	str	r2, [r3, #16]
}
 8002508:	bf00      	nop
 800250a:	3710      	adds	r7, #16
 800250c:	46bd      	mov	sp, r7
 800250e:	bd80      	pop	{r7, pc}
 8002510:	01312cff 	.word	0x01312cff
 8002514:	02160ebf 	.word	0x02160ebf
 8002518:	03938700 	.word	0x03938700
 800251c:	05f5e0ff 	.word	0x05f5e0ff
 8002520:	08f0d17f 	.word	0x08f0d17f

08002524 <HAL_ETH_GetDMAError>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval ETH DMA Error Code
  */
uint32_t HAL_ETH_GetDMAError(ETH_HandleTypeDef *heth)
{
 8002524:	b480      	push	{r7}
 8002526:	b083      	sub	sp, #12
 8002528:	af00      	add	r7, sp, #0
 800252a:	6078      	str	r0, [r7, #4]
  return heth->DMAErrorCode;
 800252c:	687b      	ldr	r3, [r7, #4]
 800252e:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <ETH_FlushTransmitFIFO>:
  * @param  heth pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_FlushTransmitFIFO(ETH_HandleTypeDef *heth)
{
 800253e:	b580      	push	{r7, lr}
 8002540:	b084      	sub	sp, #16
 8002542:	af00      	add	r7, sp, #0
 8002544:	6078      	str	r0, [r7, #4]
  __IO uint32_t tmpreg = 0;
 8002546:	2300      	movs	r3, #0
 8002548:	60fb      	str	r3, [r7, #12]

  /* Set the Flush Transmit FIFO bit */
  (heth->Instance)->DMAOMR |= ETH_DMAOMR_FTF;
 800254a:	687b      	ldr	r3, [r7, #4]
 800254c:	681b      	ldr	r3, [r3, #0]
 800254e:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002552:	699b      	ldr	r3, [r3, #24]
 8002554:	687a      	ldr	r2, [r7, #4]
 8002556:	6812      	ldr	r2, [r2, #0]
 8002558:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 800255c:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 8002560:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg = (heth->Instance)->DMAOMR;
 8002562:	687b      	ldr	r3, [r7, #4]
 8002564:	681b      	ldr	r3, [r3, #0]
 8002566:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800256a:	699b      	ldr	r3, [r3, #24]
 800256c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800256e:	2001      	movs	r0, #1
 8002570:	f7ff f894 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg;
 8002574:	687b      	ldr	r3, [r7, #4]
 8002576:	681a      	ldr	r2, [r3, #0]
 8002578:	68fb      	ldr	r3, [r7, #12]
 800257a:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 800257e:	6193      	str	r3, [r2, #24]
}
 8002580:	bf00      	nop
 8002582:	3710      	adds	r7, #16
 8002584:	46bd      	mov	sp, r7
 8002586:	bd80      	pop	{r7, pc}

08002588 <ETH_SetMACConfig>:

static void ETH_SetMACConfig(ETH_HandleTypeDef *heth,  ETH_MACConfigTypeDef *macconf)
{
 8002588:	b580      	push	{r7, lr}
 800258a:	b084      	sub	sp, #16
 800258c:	af00      	add	r7, sp, #0
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*------------------------ ETHERNET MACCR Configuration --------------------*/
  /* Get the ETHERNET MACCR value */
  tmpreg1 = (heth->Instance)->MACCR;
 8002592:	687b      	ldr	r3, [r7, #4]
 8002594:	681b      	ldr	r3, [r3, #0]
 8002596:	681b      	ldr	r3, [r3, #0]
 8002598:	60fb      	str	r3, [r7, #12]
  /* Clear WD, PCE, PS, TE and RE bits */
  tmpreg1 &= ETH_MACCR_CLEAR_MASK;
 800259a:	68fa      	ldr	r2, [r7, #12]
 800259c:	4b51      	ldr	r3, [pc, #324]	; (80026e4 <ETH_SetMACConfig+0x15c>)
 800259e:	4013      	ands	r3, r2
 80025a0:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025a2:	683b      	ldr	r3, [r7, #0]
 80025a4:	7c1b      	ldrb	r3, [r3, #16]
 80025a6:	2b00      	cmp	r3, #0
 80025a8:	d102      	bne.n	80025b0 <ETH_SetMACConfig+0x28>
 80025aa:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 80025ae:	e000      	b.n	80025b2 <ETH_SetMACConfig+0x2a>
 80025b0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025b2:	683b      	ldr	r3, [r7, #0]
 80025b4:	7c5b      	ldrb	r3, [r3, #17]
 80025b6:	2b00      	cmp	r3, #0
 80025b8:	d102      	bne.n	80025c0 <ETH_SetMACConfig+0x38>
 80025ba:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80025be:	e000      	b.n	80025c2 <ETH_SetMACConfig+0x3a>
 80025c0:	2300      	movs	r3, #0
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 80025c2:	431a      	orrs	r2, r3
                        (uint32_t)macconf->InterPacketGapVal |
 80025c4:	683b      	ldr	r3, [r7, #0]
 80025c6:	689b      	ldr	r3, [r3, #8]
                        ((uint32_t)((macconf->Jabber == DISABLE) ? 1U : 0U) << 22U) |
 80025c8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025ca:	683b      	ldr	r3, [r7, #0]
 80025cc:	7fdb      	ldrb	r3, [r3, #31]
 80025ce:	041b      	lsls	r3, r3, #16
                        (uint32_t)macconf->InterPacketGapVal |
 80025d0:	431a      	orrs	r2, r3
                        macconf->Speed |
 80025d2:	683b      	ldr	r3, [r7, #0]
 80025d4:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)macconf->CarrierSenseDuringTransmit << 16U) |
 80025d6:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025d8:	683a      	ldr	r2, [r7, #0]
 80025da:	7f92      	ldrb	r2, [r2, #30]
 80025dc:	2a00      	cmp	r2, #0
 80025de:	d102      	bne.n	80025e6 <ETH_SetMACConfig+0x5e>
 80025e0:	f44f 5200 	mov.w	r2, #8192	; 0x2000
 80025e4:	e000      	b.n	80025e8 <ETH_SetMACConfig+0x60>
 80025e6:	2200      	movs	r2, #0
                        macconf->Speed |
 80025e8:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025ea:	683b      	ldr	r3, [r7, #0]
 80025ec:	7f1b      	ldrb	r3, [r3, #28]
 80025ee:	031b      	lsls	r3, r3, #12
                        ((uint32_t)((macconf->ReceiveOwn == DISABLE) ? 1U : 0U) << 13U) |
 80025f0:	431a      	orrs	r2, r3
                        macconf->DuplexMode |
 80025f2:	683b      	ldr	r3, [r7, #0]
 80025f4:	699b      	ldr	r3, [r3, #24]
                        ((uint32_t)macconf->LoopbackMode << 12U) |
 80025f6:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 80025f8:	683b      	ldr	r3, [r7, #0]
 80025fa:	791b      	ldrb	r3, [r3, #4]
 80025fc:	029b      	lsls	r3, r3, #10
                        macconf->DuplexMode |
 80025fe:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 8002600:	683a      	ldr	r2, [r7, #0]
 8002602:	f892 2020 	ldrb.w	r2, [r2, #32]
 8002606:	2a00      	cmp	r2, #0
 8002608:	d102      	bne.n	8002610 <ETH_SetMACConfig+0x88>
 800260a:	f44f 7200 	mov.w	r2, #512	; 0x200
 800260e:	e000      	b.n	8002612 <ETH_SetMACConfig+0x8a>
 8002610:	2200      	movs	r2, #0
                        ((uint32_t)macconf->ChecksumOffload << 10U) |
 8002612:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002614:	683b      	ldr	r3, [r7, #0]
 8002616:	7bdb      	ldrb	r3, [r3, #15]
 8002618:	01db      	lsls	r3, r3, #7
                        ((uint32_t)((macconf->RetryTransmission == DISABLE) ? 1U : 0U) << 9U) |
 800261a:	431a      	orrs	r2, r3
                        macconf->BackOffLimit |
 800261c:	683b      	ldr	r3, [r7, #0]
 800261e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
                        ((uint32_t)macconf->AutomaticPadCRCStrip << 7U) |
 8002620:	431a      	orrs	r2, r3
                        ((uint32_t)macconf->DeferralCheck << 4U));
 8002622:	683b      	ldr	r3, [r7, #0]
 8002624:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8002628:	011b      	lsls	r3, r3, #4
  tmpreg1 |= (uint32_t)(((uint32_t)((macconf->Watchdog == DISABLE) ? 1U : 0U) << 23U) |
 800262a:	4313      	orrs	r3, r2
 800262c:	68fa      	ldr	r2, [r7, #12]
 800262e:	4313      	orrs	r3, r2
 8002630:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACCR */
  (heth->Instance)->MACCR = (uint32_t)tmpreg1;
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	68fa      	ldr	r2, [r7, #12]
 8002638:	601a      	str	r2, [r3, #0]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACCR;
 800263a:	687b      	ldr	r3, [r7, #4]
 800263c:	681b      	ldr	r3, [r3, #0]
 800263e:	681b      	ldr	r3, [r3, #0]
 8002640:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 8002642:	2001      	movs	r0, #1
 8002644:	f7ff f82a 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACCR = tmpreg1;
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	681b      	ldr	r3, [r3, #0]
 800264c:	68fa      	ldr	r2, [r7, #12]
 800264e:	601a      	str	r2, [r3, #0]

  /*----------------------- ETHERNET MACFCR Configuration --------------------*/

  /* Get the ETHERNET MACFCR value */
  tmpreg1 = (heth->Instance)->MACFCR;
 8002650:	687b      	ldr	r3, [r7, #4]
 8002652:	681b      	ldr	r3, [r3, #0]
 8002654:	699b      	ldr	r3, [r3, #24]
 8002656:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_MACFCR_CLEAR_MASK;
 8002658:	68fa      	ldr	r2, [r7, #12]
 800265a:	f64f 7341 	movw	r3, #65345	; 0xff41
 800265e:	4013      	ands	r3, r2
 8002660:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002662:	683b      	ldr	r3, [r7, #0]
 8002664:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8002666:	041b      	lsls	r3, r3, #16
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 8002668:	683a      	ldr	r2, [r7, #0]
 800266a:	f892 204c 	ldrb.w	r2, [r2, #76]	; 0x4c
 800266e:	2a00      	cmp	r2, #0
 8002670:	d101      	bne.n	8002676 <ETH_SetMACConfig+0xee>
 8002672:	2280      	movs	r2, #128	; 0x80
 8002674:	e000      	b.n	8002678 <ETH_SetMACConfig+0xf0>
 8002676:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 8002678:	431a      	orrs	r2, r3
                        macconf->PauseLowThreshold |
 800267a:	683b      	ldr	r3, [r7, #0]
 800267c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
                        ((uint32_t)((macconf->ZeroQuantaPause == DISABLE) ? 1U : 0U) << 7U) |
 800267e:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 8002680:	683a      	ldr	r2, [r7, #0]
 8002682:	f892 2055 	ldrb.w	r2, [r2, #85]	; 0x55
 8002686:	2a01      	cmp	r2, #1
 8002688:	d101      	bne.n	800268e <ETH_SetMACConfig+0x106>
 800268a:	2208      	movs	r2, #8
 800268c:	e000      	b.n	8002690 <ETH_SetMACConfig+0x108>
 800268e:	2200      	movs	r2, #0
                        macconf->PauseLowThreshold |
 8002690:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->ReceiveFlowControl == ENABLE) ? 1U : 0U) << 2U) |
 8002692:	683a      	ldr	r2, [r7, #0]
 8002694:	f892 2056 	ldrb.w	r2, [r2, #86]	; 0x56
 8002698:	2a01      	cmp	r2, #1
 800269a:	d101      	bne.n	80026a0 <ETH_SetMACConfig+0x118>
 800269c:	2204      	movs	r2, #4
 800269e:	e000      	b.n	80026a2 <ETH_SetMACConfig+0x11a>
 80026a0:	2200      	movs	r2, #0
                        ((uint32_t)((macconf->UnicastPausePacketDetect == ENABLE) ? 1U : 0U) << 3U) |
 80026a2:	4313      	orrs	r3, r2
                        ((uint32_t)((macconf->TransmitFlowControl == ENABLE) ? 1U : 0U) << 1U));
 80026a4:	683a      	ldr	r2, [r7, #0]
 80026a6:	f892 2054 	ldrb.w	r2, [r2, #84]	; 0x54
 80026aa:	2a01      	cmp	r2, #1
 80026ac:	d101      	bne.n	80026b2 <ETH_SetMACConfig+0x12a>
 80026ae:	2202      	movs	r2, #2
 80026b0:	e000      	b.n	80026b4 <ETH_SetMACConfig+0x12c>
 80026b2:	2200      	movs	r2, #0
  tmpreg1 |= (uint32_t)((macconf->PauseTime << 16U) |
 80026b4:	4313      	orrs	r3, r2
 80026b6:	68fa      	ldr	r2, [r7, #12]
 80026b8:	4313      	orrs	r3, r2
 80026ba:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET MACFCR */
  (heth->Instance)->MACFCR = (uint32_t)tmpreg1;
 80026bc:	687b      	ldr	r3, [r7, #4]
 80026be:	681b      	ldr	r3, [r3, #0]
 80026c0:	68fa      	ldr	r2, [r7, #12]
 80026c2:	619a      	str	r2, [r3, #24]

  /* Wait until the write operation will be taken into account :
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->MACFCR;
 80026c4:	687b      	ldr	r3, [r7, #4]
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	699b      	ldr	r3, [r3, #24]
 80026ca:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80026cc:	2001      	movs	r0, #1
 80026ce:	f7fe ffe5 	bl	800169c <HAL_Delay>
  (heth->Instance)->MACFCR = tmpreg1;
 80026d2:	687b      	ldr	r3, [r7, #4]
 80026d4:	681b      	ldr	r3, [r3, #0]
 80026d6:	68fa      	ldr	r2, [r7, #12]
 80026d8:	619a      	str	r2, [r3, #24]
}
 80026da:	bf00      	nop
 80026dc:	3710      	adds	r7, #16
 80026de:	46bd      	mov	sp, r7
 80026e0:	bd80      	pop	{r7, pc}
 80026e2:	bf00      	nop
 80026e4:	ff20810f 	.word	0xff20810f

080026e8 <ETH_SetDMAConfig>:

static void ETH_SetDMAConfig(ETH_HandleTypeDef *heth,  ETH_DMAConfigTypeDef *dmaconf)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
 80026f0:	6039      	str	r1, [r7, #0]
  uint32_t tmpreg1;

  /*----------------------- ETHERNET DMAOMR Configuration --------------------*/
  /* Get the ETHERNET DMAOMR value */
  tmpreg1 = (heth->Instance)->DMAOMR;
 80026f2:	687b      	ldr	r3, [r7, #4]
 80026f4:	681b      	ldr	r3, [r3, #0]
 80026f6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80026fa:	699b      	ldr	r3, [r3, #24]
 80026fc:	60fb      	str	r3, [r7, #12]
  /* Clear xx bits */
  tmpreg1 &= ETH_DMAOMR_CLEAR_MASK;
 80026fe:	68fa      	ldr	r2, [r7, #12]
 8002700:	4b3d      	ldr	r3, [pc, #244]	; (80027f8 <ETH_SetDMAConfig+0x110>)
 8002702:	4013      	ands	r3, r2
 8002704:	60fb      	str	r3, [r7, #12]

  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 8002706:	683b      	ldr	r3, [r7, #0]
 8002708:	7b1b      	ldrb	r3, [r3, #12]
 800270a:	2b00      	cmp	r3, #0
 800270c:	d102      	bne.n	8002714 <ETH_SetDMAConfig+0x2c>
 800270e:	f04f 6280 	mov.w	r2, #67108864	; 0x4000000
 8002712:	e000      	b.n	8002716 <ETH_SetDMAConfig+0x2e>
 8002714:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 8002716:	683b      	ldr	r3, [r7, #0]
 8002718:	7b5b      	ldrb	r3, [r3, #13]
 800271a:	065b      	lsls	r3, r3, #25
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800271c:	4313      	orrs	r3, r2
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 800271e:	683a      	ldr	r2, [r7, #0]
 8002720:	7f52      	ldrb	r2, [r2, #29]
 8002722:	2a00      	cmp	r2, #0
 8002724:	d102      	bne.n	800272c <ETH_SetDMAConfig+0x44>
 8002726:	f44f 1280 	mov.w	r2, #1048576	; 0x100000
 800272a:	e000      	b.n	800272e <ETH_SetDMAConfig+0x46>
 800272c:	2200      	movs	r2, #0
                        ((uint32_t)dmaconf->ReceiveStoreForward << 25U) |
 800272e:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 8002730:	683b      	ldr	r3, [r7, #0]
 8002732:	7b9b      	ldrb	r3, [r3, #14]
 8002734:	055b      	lsls	r3, r3, #21
                        ((uint32_t)((dmaconf->FlushRxPacket == DISABLE) ? 1U : 0U) << 20U) |
 8002736:	431a      	orrs	r2, r3
                        dmaconf->TransmitThresholdControl |
 8002738:	683b      	ldr	r3, [r7, #0]
 800273a:	695b      	ldr	r3, [r3, #20]
                        ((uint32_t)dmaconf->TransmitStoreForward << 21U) |
 800273c:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800273e:	683b      	ldr	r3, [r7, #0]
 8002740:	7f1b      	ldrb	r3, [r3, #28]
 8002742:	01db      	lsls	r3, r3, #7
                        dmaconf->TransmitThresholdControl |
 8002744:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002746:	683b      	ldr	r3, [r7, #0]
 8002748:	7f9b      	ldrb	r3, [r3, #30]
 800274a:	019b      	lsls	r3, r3, #6
                        ((uint32_t)dmaconf->ForwardErrorFrames << 7U) |
 800274c:	431a      	orrs	r2, r3
                        dmaconf->ReceiveThresholdControl |
 800274e:	683b      	ldr	r3, [r7, #0]
 8002750:	6a1b      	ldr	r3, [r3, #32]
                        ((uint32_t)dmaconf->ForwardUndersizedGoodFrames << 6U) |
 8002752:	431a      	orrs	r2, r3
                        ((uint32_t)dmaconf->SecondFrameOperate << 2U));
 8002754:	683b      	ldr	r3, [r7, #0]
 8002756:	f893 3024 	ldrb.w	r3, [r3, #36]	; 0x24
 800275a:	009b      	lsls	r3, r3, #2
  tmpreg1 |= (uint32_t)(((uint32_t)((dmaconf->DropTCPIPChecksumErrorFrame == DISABLE) ? 1U : 0U) << 26U) |
 800275c:	4313      	orrs	r3, r2
 800275e:	68fa      	ldr	r2, [r7, #12]
 8002760:	4313      	orrs	r3, r2
 8002762:	60fb      	str	r3, [r7, #12]

  /* Write to ETHERNET DMAOMR */
  (heth->Instance)->DMAOMR = (uint32_t)tmpreg1;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	681b      	ldr	r3, [r3, #0]
 8002768:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800276c:	461a      	mov	r2, r3
 800276e:	68fb      	ldr	r3, [r7, #12]
 8002770:	6193      	str	r3, [r2, #24]

  /* Wait until the write operation will be taken into account:
  at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMAOMR;
 8002772:	687b      	ldr	r3, [r7, #4]
 8002774:	681b      	ldr	r3, [r3, #0]
 8002776:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800277a:	699b      	ldr	r3, [r3, #24]
 800277c:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 800277e:	2001      	movs	r0, #1
 8002780:	f7fe ff8c 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMAOMR = tmpreg1;
 8002784:	687b      	ldr	r3, [r7, #4]
 8002786:	681b      	ldr	r3, [r3, #0]
 8002788:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 800278c:	461a      	mov	r2, r3
 800278e:	68fb      	ldr	r3, [r7, #12]
 8002790:	6193      	str	r3, [r2, #24]

  /*----------------------- ETHERNET DMABMR Configuration --------------------*/
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 8002792:	683b      	ldr	r3, [r7, #0]
 8002794:	791b      	ldrb	r3, [r3, #4]
 8002796:	065a      	lsls	r2, r3, #25
                                        dmaconf->BurstMode |
 8002798:	683b      	ldr	r3, [r7, #0]
 800279a:	689b      	ldr	r3, [r3, #8]
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 800279c:	431a      	orrs	r2, r3
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 800279e:	683b      	ldr	r3, [r7, #0]
 80027a0:	699b      	ldr	r3, [r3, #24]
                                        dmaconf->BurstMode |
 80027a2:	431a      	orrs	r2, r3
                                                                       Rx it is applied for the other */
                                        dmaconf->TxDMABurstLength |
 80027a4:	683b      	ldr	r3, [r7, #0]
 80027a6:	691b      	ldr	r3, [r3, #16]
                                        dmaconf->RxDMABurstLength | /* !! if 4xPBL is selected for Tx or
 80027a8:	431a      	orrs	r2, r3
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027aa:	683b      	ldr	r3, [r7, #0]
 80027ac:	f893 3025 	ldrb.w	r3, [r3, #37]	; 0x25
 80027b0:	01db      	lsls	r3, r3, #7
                                        dmaconf->TxDMABurstLength |
 80027b2:	431a      	orrs	r2, r3
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027b4:	683b      	ldr	r3, [r7, #0]
 80027b6:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80027b8:	009b      	lsls	r3, r3, #2
                                        ((uint32_t)dmaconf->EnhancedDescriptorFormat << 7U) |
 80027ba:	431a      	orrs	r2, r3
                                        dmaconf->DMAArbitration |
 80027bc:	683b      	ldr	r3, [r7, #0]
 80027be:	681b      	ldr	r3, [r3, #0]
                                        (dmaconf->DescriptorSkipLength << 2U) |
 80027c0:	4313      	orrs	r3, r2
  (heth->Instance)->DMABMR = (uint32_t)(((uint32_t)dmaconf->AddressAlignedBeats << 25U) |
 80027c2:	687a      	ldr	r2, [r7, #4]
 80027c4:	6812      	ldr	r2, [r2, #0]
 80027c6:	f443 0300 	orr.w	r3, r3, #8388608	; 0x800000
 80027ca:	f502 5280 	add.w	r2, r2, #4096	; 0x1000
 80027ce:	6013      	str	r3, [r2, #0]
                                        ETH_DMABMR_USP); /* Enable use of separate PBL for Rx and Tx */

  /* Wait until the write operation will be taken into account:
     at least four TX_CLK/RX_CLK clock cycles */
  tmpreg1 = (heth->Instance)->DMABMR;
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027d8:	681b      	ldr	r3, [r3, #0]
 80027da:	60fb      	str	r3, [r7, #12]
  HAL_Delay(ETH_REG_WRITE_DELAY);
 80027dc:	2001      	movs	r0, #1
 80027de:	f7fe ff5d 	bl	800169c <HAL_Delay>
  (heth->Instance)->DMABMR = tmpreg1;
 80027e2:	687b      	ldr	r3, [r7, #4]
 80027e4:	681b      	ldr	r3, [r3, #0]
 80027e6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80027ea:	461a      	mov	r2, r3
 80027ec:	68fb      	ldr	r3, [r7, #12]
 80027ee:	6013      	str	r3, [r2, #0]
}
 80027f0:	bf00      	nop
 80027f2:	3710      	adds	r7, #16
 80027f4:	46bd      	mov	sp, r7
 80027f6:	bd80      	pop	{r7, pc}
 80027f8:	f8de3f23 	.word	0xf8de3f23

080027fc <ETH_MACDMAConfig>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval HAL status
  */
static void ETH_MACDMAConfig(ETH_HandleTypeDef *heth)
{
 80027fc:	b580      	push	{r7, lr}
 80027fe:	b0a6      	sub	sp, #152	; 0x98
 8002800:	af00      	add	r7, sp, #0
 8002802:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef macDefaultConf;
  ETH_DMAConfigTypeDef dmaDefaultConf;

  /*--------------- ETHERNET MAC registers default Configuration --------------*/
  macDefaultConf.Watchdog = ENABLE;
 8002804:	2301      	movs	r3, #1
 8002806:	f887 3044 	strb.w	r3, [r7, #68]	; 0x44
  macDefaultConf.Jabber = ENABLE;
 800280a:	2301      	movs	r3, #1
 800280c:	f887 3045 	strb.w	r3, [r7, #69]	; 0x45
  macDefaultConf.InterPacketGapVal = ETH_INTERFRAMEGAP_96BIT;
 8002810:	2300      	movs	r3, #0
 8002812:	63fb      	str	r3, [r7, #60]	; 0x3c
  macDefaultConf.CarrierSenseDuringTransmit = DISABLE;
 8002814:	2300      	movs	r3, #0
 8002816:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
  macDefaultConf.ReceiveOwn = ENABLE;
 800281a:	2301      	movs	r3, #1
 800281c:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
  macDefaultConf.LoopbackMode = DISABLE;
 8002820:	2300      	movs	r3, #0
 8002822:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
  macDefaultConf.ChecksumOffload = ENABLE;
 8002826:	2301      	movs	r3, #1
 8002828:	f887 3038 	strb.w	r3, [r7, #56]	; 0x38
  macDefaultConf.RetryTransmission = DISABLE;
 800282c:	2300      	movs	r3, #0
 800282e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
  macDefaultConf.AutomaticPadCRCStrip = DISABLE;
 8002832:	2300      	movs	r3, #0
 8002834:	f887 3043 	strb.w	r3, [r7, #67]	; 0x43
  macDefaultConf.BackOffLimit = ETH_BACKOFFLIMIT_10;
 8002838:	2300      	movs	r3, #0
 800283a:	65bb      	str	r3, [r7, #88]	; 0x58
  macDefaultConf.DeferralCheck = DISABLE;
 800283c:	2300      	movs	r3, #0
 800283e:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
  macDefaultConf.PauseTime = 0x0U;
 8002842:	2300      	movs	r3, #0
 8002844:	67fb      	str	r3, [r7, #124]	; 0x7c
  macDefaultConf.ZeroQuantaPause = DISABLE;
 8002846:	2300      	movs	r3, #0
 8002848:	f887 3080 	strb.w	r3, [r7, #128]	; 0x80
  macDefaultConf.PauseLowThreshold = ETH_PAUSELOWTHRESHOLD_MINUS4;
 800284c:	2300      	movs	r3, #0
 800284e:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
  macDefaultConf.ReceiveFlowControl = DISABLE;
 8002852:	2300      	movs	r3, #0
 8002854:	f887 308a 	strb.w	r3, [r7, #138]	; 0x8a
  macDefaultConf.TransmitFlowControl = DISABLE;
 8002858:	2300      	movs	r3, #0
 800285a:	f887 3088 	strb.w	r3, [r7, #136]	; 0x88
  macDefaultConf.Speed = ETH_SPEED_100M;
 800285e:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8002862:	64bb      	str	r3, [r7, #72]	; 0x48
  macDefaultConf.DuplexMode = ETH_FULLDUPLEX_MODE;
 8002864:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8002868:	64fb      	str	r3, [r7, #76]	; 0x4c
  macDefaultConf.UnicastPausePacketDetect = DISABLE;
 800286a:	2300      	movs	r3, #0
 800286c:	f887 3089 	strb.w	r3, [r7, #137]	; 0x89

  /* MAC default configuration */
  ETH_SetMACConfig(heth, &macDefaultConf);
 8002870:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002874:	4619      	mov	r1, r3
 8002876:	6878      	ldr	r0, [r7, #4]
 8002878:	f7ff fe86 	bl	8002588 <ETH_SetMACConfig>

  /*--------------- ETHERNET DMA registers default Configuration --------------*/
  dmaDefaultConf.DropTCPIPChecksumErrorFrame = ENABLE;
 800287c:	2301      	movs	r3, #1
 800287e:	753b      	strb	r3, [r7, #20]
  dmaDefaultConf.ReceiveStoreForward = ENABLE;
 8002880:	2301      	movs	r3, #1
 8002882:	757b      	strb	r3, [r7, #21]
  dmaDefaultConf.FlushRxPacket = ENABLE;
 8002884:	2301      	movs	r3, #1
 8002886:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
  dmaDefaultConf.TransmitStoreForward = ENABLE;
 800288a:	2301      	movs	r3, #1
 800288c:	75bb      	strb	r3, [r7, #22]
  dmaDefaultConf.TransmitThresholdControl = ETH_TRANSMITTHRESHOLDCONTROL_64BYTES;
 800288e:	2300      	movs	r3, #0
 8002890:	61fb      	str	r3, [r7, #28]
  dmaDefaultConf.ForwardErrorFrames = DISABLE;
 8002892:	2300      	movs	r3, #0
 8002894:	f887 3024 	strb.w	r3, [r7, #36]	; 0x24
  dmaDefaultConf.ForwardUndersizedGoodFrames = DISABLE;
 8002898:	2300      	movs	r3, #0
 800289a:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
  dmaDefaultConf.ReceiveThresholdControl = ETH_RECEIVEDTHRESHOLDCONTROL_64BYTES;
 800289e:	2300      	movs	r3, #0
 80028a0:	62bb      	str	r3, [r7, #40]	; 0x28
  dmaDefaultConf.SecondFrameOperate = ENABLE;
 80028a2:	2301      	movs	r3, #1
 80028a4:	f887 302c 	strb.w	r3, [r7, #44]	; 0x2c
  dmaDefaultConf.AddressAlignedBeats = ENABLE;
 80028a8:	2301      	movs	r3, #1
 80028aa:	733b      	strb	r3, [r7, #12]
  dmaDefaultConf.BurstMode = ETH_BURSTLENGTH_FIXED;
 80028ac:	f44f 3380 	mov.w	r3, #65536	; 0x10000
 80028b0:	613b      	str	r3, [r7, #16]
  dmaDefaultConf.RxDMABurstLength = ETH_RXDMABURSTLENGTH_32BEAT;
 80028b2:	f44f 0380 	mov.w	r3, #4194304	; 0x400000
 80028b6:	623b      	str	r3, [r7, #32]
  dmaDefaultConf.TxDMABurstLength = ETH_TXDMABURSTLENGTH_32BEAT;
 80028b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80028bc:	61bb      	str	r3, [r7, #24]
  dmaDefaultConf.EnhancedDescriptorFormat = ENABLE;
 80028be:	2301      	movs	r3, #1
 80028c0:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
  dmaDefaultConf.DescriptorSkipLength = 0x0U;
 80028c4:	2300      	movs	r3, #0
 80028c6:	633b      	str	r3, [r7, #48]	; 0x30
  dmaDefaultConf.DMAArbitration = ETH_DMAARBITRATION_ROUNDROBIN_RXTX_1_1;
 80028c8:	2300      	movs	r3, #0
 80028ca:	60bb      	str	r3, [r7, #8]

  /* DMA default configuration */
  ETH_SetDMAConfig(heth, &dmaDefaultConf);
 80028cc:	f107 0308 	add.w	r3, r7, #8
 80028d0:	4619      	mov	r1, r3
 80028d2:	6878      	ldr	r0, [r7, #4]
 80028d4:	f7ff ff08 	bl	80026e8 <ETH_SetDMAConfig>
}
 80028d8:	bf00      	nop
 80028da:	3798      	adds	r7, #152	; 0x98
 80028dc:	46bd      	mov	sp, r7
 80028de:	bd80      	pop	{r7, pc}

080028e0 <ETH_MACAddressConfig>:
  *             @arg ETH_MAC_Address3: MAC Address3
  * @param  Addr Pointer to MAC address buffer data (6 bytes)
  * @retval HAL status
  */
static void ETH_MACAddressConfig(ETH_HandleTypeDef *heth, uint32_t MacAddr, uint8_t *Addr)
{
 80028e0:	b480      	push	{r7}
 80028e2:	b087      	sub	sp, #28
 80028e4:	af00      	add	r7, sp, #0
 80028e6:	60f8      	str	r0, [r7, #12]
 80028e8:	60b9      	str	r1, [r7, #8]
 80028ea:	607a      	str	r2, [r7, #4]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(heth);

  /* Calculate the selected MAC address high register */
  tmpreg1 = ((uint32_t)Addr[5U] << 8U) | (uint32_t)Addr[4U];
 80028ec:	687b      	ldr	r3, [r7, #4]
 80028ee:	3305      	adds	r3, #5
 80028f0:	781b      	ldrb	r3, [r3, #0]
 80028f2:	021b      	lsls	r3, r3, #8
 80028f4:	687a      	ldr	r2, [r7, #4]
 80028f6:	3204      	adds	r2, #4
 80028f8:	7812      	ldrb	r2, [r2, #0]
 80028fa:	4313      	orrs	r3, r2
 80028fc:	617b      	str	r3, [r7, #20]
  /* Load the selected MAC address high register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_HBASE + MacAddr))) = tmpreg1;
 80028fe:	68ba      	ldr	r2, [r7, #8]
 8002900:	4b11      	ldr	r3, [pc, #68]	; (8002948 <ETH_MACAddressConfig+0x68>)
 8002902:	4413      	add	r3, r2
 8002904:	461a      	mov	r2, r3
 8002906:	697b      	ldr	r3, [r7, #20]
 8002908:	6013      	str	r3, [r2, #0]
  /* Calculate the selected MAC address low register */
  tmpreg1 = ((uint32_t)Addr[3U] << 24U) | ((uint32_t)Addr[2U] << 16U) | ((uint32_t)Addr[1U] << 8U) | Addr[0U];
 800290a:	687b      	ldr	r3, [r7, #4]
 800290c:	3303      	adds	r3, #3
 800290e:	781b      	ldrb	r3, [r3, #0]
 8002910:	061a      	lsls	r2, r3, #24
 8002912:	687b      	ldr	r3, [r7, #4]
 8002914:	3302      	adds	r3, #2
 8002916:	781b      	ldrb	r3, [r3, #0]
 8002918:	041b      	lsls	r3, r3, #16
 800291a:	431a      	orrs	r2, r3
 800291c:	687b      	ldr	r3, [r7, #4]
 800291e:	3301      	adds	r3, #1
 8002920:	781b      	ldrb	r3, [r3, #0]
 8002922:	021b      	lsls	r3, r3, #8
 8002924:	4313      	orrs	r3, r2
 8002926:	687a      	ldr	r2, [r7, #4]
 8002928:	7812      	ldrb	r2, [r2, #0]
 800292a:	4313      	orrs	r3, r2
 800292c:	617b      	str	r3, [r7, #20]

  /* Load the selected MAC address low register */
  (*(__IO uint32_t *)((uint32_t)(ETH_MAC_ADDR_LBASE + MacAddr))) = tmpreg1;
 800292e:	68ba      	ldr	r2, [r7, #8]
 8002930:	4b06      	ldr	r3, [pc, #24]	; (800294c <ETH_MACAddressConfig+0x6c>)
 8002932:	4413      	add	r3, r2
 8002934:	461a      	mov	r2, r3
 8002936:	697b      	ldr	r3, [r7, #20]
 8002938:	6013      	str	r3, [r2, #0]
}
 800293a:	bf00      	nop
 800293c:	371c      	adds	r7, #28
 800293e:	46bd      	mov	sp, r7
 8002940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002944:	4770      	bx	lr
 8002946:	bf00      	nop
 8002948:	40028040 	.word	0x40028040
 800294c:	40028044 	.word	0x40028044

08002950 <ETH_DMATxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMATxDescListInit(ETH_HandleTypeDef *heth)
{
 8002950:	b480      	push	{r7}
 8002952:	b085      	sub	sp, #20
 8002954:	af00      	add	r7, sp, #0
 8002956:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmatxdesc;
  uint32_t i;

  /* Fill each DMATxDesc descriptor with the right values */
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 8002958:	2300      	movs	r3, #0
 800295a:	60fb      	str	r3, [r7, #12]
 800295c:	e03e      	b.n	80029dc <ETH_DMATxDescListInit+0x8c>
  {
    dmatxdesc = heth->Init.TxDesc + i;
 800295e:	687b      	ldr	r3, [r7, #4]
 8002960:	68d9      	ldr	r1, [r3, #12]
 8002962:	68fa      	ldr	r2, [r7, #12]
 8002964:	4613      	mov	r3, r2
 8002966:	009b      	lsls	r3, r3, #2
 8002968:	4413      	add	r3, r2
 800296a:	00db      	lsls	r3, r3, #3
 800296c:	440b      	add	r3, r1
 800296e:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmatxdesc->DESC0, 0x0);
 8002970:	68bb      	ldr	r3, [r7, #8]
 8002972:	2200      	movs	r2, #0
 8002974:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmatxdesc->DESC1, 0x0);
 8002976:	68bb      	ldr	r3, [r7, #8]
 8002978:	2200      	movs	r2, #0
 800297a:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmatxdesc->DESC2, 0x0);
 800297c:	68bb      	ldr	r3, [r7, #8]
 800297e:	2200      	movs	r2, #0
 8002980:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmatxdesc->DESC3, 0x0);
 8002982:	68bb      	ldr	r3, [r7, #8]
 8002984:	2200      	movs	r2, #0
 8002986:	60da      	str	r2, [r3, #12]

    WRITE_REG(heth->TxDescList.TxDesc[i], (uint32_t)dmatxdesc);
 8002988:	68b9      	ldr	r1, [r7, #8]
 800298a:	687b      	ldr	r3, [r7, #4]
 800298c:	68fa      	ldr	r2, [r7, #12]
 800298e:	3206      	adds	r2, #6
 8002990:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    /* Set Second Address Chained bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_TCH);
 8002994:	68bb      	ldr	r3, [r7, #8]
 8002996:	681b      	ldr	r3, [r3, #0]
 8002998:	f443 1280 	orr.w	r2, r3, #1048576	; 0x100000
 800299c:	68bb      	ldr	r3, [r7, #8]
 800299e:	601a      	str	r2, [r3, #0]

    if (i < ((uint32_t)ETH_TX_DESC_CNT - 1U))
 80029a0:	68fb      	ldr	r3, [r7, #12]
 80029a2:	2b02      	cmp	r3, #2
 80029a4:	d80c      	bhi.n	80029c0 <ETH_DMATxDescListInit+0x70>
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc + i + 1U));
 80029a6:	687b      	ldr	r3, [r7, #4]
 80029a8:	68d9      	ldr	r1, [r3, #12]
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	1c5a      	adds	r2, r3, #1
 80029ae:	4613      	mov	r3, r2
 80029b0:	009b      	lsls	r3, r3, #2
 80029b2:	4413      	add	r3, r2
 80029b4:	00db      	lsls	r3, r3, #3
 80029b6:	440b      	add	r3, r1
 80029b8:	461a      	mov	r2, r3
 80029ba:	68bb      	ldr	r3, [r7, #8]
 80029bc:	60da      	str	r2, [r3, #12]
 80029be:	e004      	b.n	80029ca <ETH_DMATxDescListInit+0x7a>
    }
    else
    {
      WRITE_REG(dmatxdesc->DESC3, (uint32_t)(heth->Init.TxDesc));
 80029c0:	687b      	ldr	r3, [r7, #4]
 80029c2:	68db      	ldr	r3, [r3, #12]
 80029c4:	461a      	mov	r2, r3
 80029c6:	68bb      	ldr	r3, [r7, #8]
 80029c8:	60da      	str	r2, [r3, #12]
    }

    /* Set the DMA Tx descriptors checksum insertion */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_CHECKSUMTCPUDPICMPFULL);
 80029ca:	68bb      	ldr	r3, [r7, #8]
 80029cc:	681b      	ldr	r3, [r3, #0]
 80029ce:	f443 0240 	orr.w	r2, r3, #12582912	; 0xc00000
 80029d2:	68bb      	ldr	r3, [r7, #8]
 80029d4:	601a      	str	r2, [r3, #0]
  for (i = 0; i < (uint32_t)ETH_TX_DESC_CNT; i++)
 80029d6:	68fb      	ldr	r3, [r7, #12]
 80029d8:	3301      	adds	r3, #1
 80029da:	60fb      	str	r3, [r7, #12]
 80029dc:	68fb      	ldr	r3, [r7, #12]
 80029de:	2b03      	cmp	r3, #3
 80029e0:	d9bd      	bls.n	800295e <ETH_DMATxDescListInit+0xe>
  }

  heth->TxDescList.CurTxDesc = 0;
 80029e2:	687b      	ldr	r3, [r7, #4]
 80029e4:	2200      	movs	r2, #0
 80029e6:	629a      	str	r2, [r3, #40]	; 0x28

  /* Set Transmit Descriptor List Address */
  WRITE_REG(heth->Instance->DMATDLAR, (uint32_t) heth->Init.TxDesc);
 80029e8:	687b      	ldr	r3, [r7, #4]
 80029ea:	68da      	ldr	r2, [r3, #12]
 80029ec:	687b      	ldr	r3, [r7, #4]
 80029ee:	681b      	ldr	r3, [r3, #0]
 80029f0:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 80029f4:	611a      	str	r2, [r3, #16]
}
 80029f6:	bf00      	nop
 80029f8:	3714      	adds	r7, #20
 80029fa:	46bd      	mov	sp, r7
 80029fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a00:	4770      	bx	lr

08002a02 <ETH_DMARxDescListInit>:
  * @param  heth: pointer to a ETH_HandleTypeDef structure that contains
  *         the configuration information for ETHERNET module
  * @retval None
  */
static void ETH_DMARxDescListInit(ETH_HandleTypeDef *heth)
{
 8002a02:	b480      	push	{r7}
 8002a04:	b085      	sub	sp, #20
 8002a06:	af00      	add	r7, sp, #0
 8002a08:	6078      	str	r0, [r7, #4]
  ETH_DMADescTypeDef *dmarxdesc;
  uint32_t i;

  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	60fb      	str	r3, [r7, #12]
 8002a0e:	e046      	b.n	8002a9e <ETH_DMARxDescListInit+0x9c>
  {
    dmarxdesc =  heth->Init.RxDesc + i;
 8002a10:	687b      	ldr	r3, [r7, #4]
 8002a12:	6919      	ldr	r1, [r3, #16]
 8002a14:	68fa      	ldr	r2, [r7, #12]
 8002a16:	4613      	mov	r3, r2
 8002a18:	009b      	lsls	r3, r3, #2
 8002a1a:	4413      	add	r3, r2
 8002a1c:	00db      	lsls	r3, r3, #3
 8002a1e:	440b      	add	r3, r1
 8002a20:	60bb      	str	r3, [r7, #8]

    WRITE_REG(dmarxdesc->DESC0, 0x0);
 8002a22:	68bb      	ldr	r3, [r7, #8]
 8002a24:	2200      	movs	r2, #0
 8002a26:	601a      	str	r2, [r3, #0]
    WRITE_REG(dmarxdesc->DESC1, 0x0);
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	2200      	movs	r2, #0
 8002a2c:	605a      	str	r2, [r3, #4]
    WRITE_REG(dmarxdesc->DESC2, 0x0);
 8002a2e:	68bb      	ldr	r3, [r7, #8]
 8002a30:	2200      	movs	r2, #0
 8002a32:	609a      	str	r2, [r3, #8]
    WRITE_REG(dmarxdesc->DESC3, 0x0);
 8002a34:	68bb      	ldr	r3, [r7, #8]
 8002a36:	2200      	movs	r2, #0
 8002a38:	60da      	str	r2, [r3, #12]
    WRITE_REG(dmarxdesc->BackupAddr0, 0x0);
 8002a3a:	68bb      	ldr	r3, [r7, #8]
 8002a3c:	2200      	movs	r2, #0
 8002a3e:	621a      	str	r2, [r3, #32]
    WRITE_REG(dmarxdesc->BackupAddr1, 0x0);
 8002a40:	68bb      	ldr	r3, [r7, #8]
 8002a42:	2200      	movs	r2, #0
 8002a44:	625a      	str	r2, [r3, #36]	; 0x24

    /* Set Own bit of the Rx descriptor Status */
    dmarxdesc->DESC0 = ETH_DMARXDESC_OWN;
 8002a46:	68bb      	ldr	r3, [r7, #8]
 8002a48:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8002a4c:	601a      	str	r2, [r3, #0]

    /* Set Buffer1 size and Second Address Chained bit */
    dmarxdesc->DESC1 = ETH_DMARXDESC_RCH | ETH_RX_BUF_SIZE;
 8002a4e:	68bb      	ldr	r3, [r7, #8]
 8002a50:	f44f 428c 	mov.w	r2, #17920	; 0x4600
 8002a54:	605a      	str	r2, [r3, #4]

    /* Enable Ethernet DMA Rx Descriptor interrupt */
    dmarxdesc->DESC1 &= ~ETH_DMARXDESC_DIC;
 8002a56:	68bb      	ldr	r3, [r7, #8]
 8002a58:	685b      	ldr	r3, [r3, #4]
 8002a5a:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002a5e:	68bb      	ldr	r3, [r7, #8]
 8002a60:	605a      	str	r2, [r3, #4]

    /* Set Rx descritors addresses */
    WRITE_REG(heth->RxDescList.RxDesc[i], (uint32_t)dmarxdesc);
 8002a62:	68b9      	ldr	r1, [r7, #8]
 8002a64:	687b      	ldr	r3, [r7, #4]
 8002a66:	68fa      	ldr	r2, [r7, #12]
 8002a68:	3212      	adds	r2, #18
 8002a6a:	f843 1022 	str.w	r1, [r3, r2, lsl #2]

    if (i < ((uint32_t)ETH_RX_DESC_CNT - 1U))
 8002a6e:	68fb      	ldr	r3, [r7, #12]
 8002a70:	2b02      	cmp	r3, #2
 8002a72:	d80c      	bhi.n	8002a8e <ETH_DMARxDescListInit+0x8c>
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc + i + 1U));
 8002a74:	687b      	ldr	r3, [r7, #4]
 8002a76:	6919      	ldr	r1, [r3, #16]
 8002a78:	68fb      	ldr	r3, [r7, #12]
 8002a7a:	1c5a      	adds	r2, r3, #1
 8002a7c:	4613      	mov	r3, r2
 8002a7e:	009b      	lsls	r3, r3, #2
 8002a80:	4413      	add	r3, r2
 8002a82:	00db      	lsls	r3, r3, #3
 8002a84:	440b      	add	r3, r1
 8002a86:	461a      	mov	r2, r3
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	60da      	str	r2, [r3, #12]
 8002a8c:	e004      	b.n	8002a98 <ETH_DMARxDescListInit+0x96>
    }
    else
    {
      WRITE_REG(dmarxdesc->DESC3, (uint32_t)(heth->Init.RxDesc));
 8002a8e:	687b      	ldr	r3, [r7, #4]
 8002a90:	691b      	ldr	r3, [r3, #16]
 8002a92:	461a      	mov	r2, r3
 8002a94:	68bb      	ldr	r3, [r7, #8]
 8002a96:	60da      	str	r2, [r3, #12]
  for (i = 0; i < (uint32_t)ETH_RX_DESC_CNT; i++)
 8002a98:	68fb      	ldr	r3, [r7, #12]
 8002a9a:	3301      	adds	r3, #1
 8002a9c:	60fb      	str	r3, [r7, #12]
 8002a9e:	68fb      	ldr	r3, [r7, #12]
 8002aa0:	2b03      	cmp	r3, #3
 8002aa2:	d9b5      	bls.n	8002a10 <ETH_DMARxDescListInit+0xe>
    }
  }

  WRITE_REG(heth->RxDescList.RxDescIdx, 0);
 8002aa4:	687b      	ldr	r3, [r7, #4]
 8002aa6:	2200      	movs	r2, #0
 8002aa8:	65da      	str	r2, [r3, #92]	; 0x5c
  WRITE_REG(heth->RxDescList.RxDescCnt, 0);
 8002aaa:	687b      	ldr	r3, [r7, #4]
 8002aac:	2200      	movs	r2, #0
 8002aae:	661a      	str	r2, [r3, #96]	; 0x60
  WRITE_REG(heth->RxDescList.RxBuildDescIdx, 0);
 8002ab0:	687b      	ldr	r3, [r7, #4]
 8002ab2:	2200      	movs	r2, #0
 8002ab4:	669a      	str	r2, [r3, #104]	; 0x68
  WRITE_REG(heth->RxDescList.RxBuildDescCnt, 0);
 8002ab6:	687b      	ldr	r3, [r7, #4]
 8002ab8:	2200      	movs	r2, #0
 8002aba:	66da      	str	r2, [r3, #108]	; 0x6c
  WRITE_REG(heth->RxDescList.ItMode, 0);
 8002abc:	687b      	ldr	r3, [r7, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	659a      	str	r2, [r3, #88]	; 0x58

  /* Set Receive Descriptor List Address */
  WRITE_REG(heth->Instance->DMARDLAR, (uint32_t) heth->Init.RxDesc);
 8002ac2:	687b      	ldr	r3, [r7, #4]
 8002ac4:	691a      	ldr	r2, [r3, #16]
 8002ac6:	687b      	ldr	r3, [r7, #4]
 8002ac8:	681b      	ldr	r3, [r3, #0]
 8002aca:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
 8002ace:	60da      	str	r2, [r3, #12]
}
 8002ad0:	bf00      	nop
 8002ad2:	3714      	adds	r7, #20
 8002ad4:	46bd      	mov	sp, r7
 8002ad6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ada:	4770      	bx	lr

08002adc <ETH_Prepare_Tx_Descriptors>:
  * @param  pTxConfig: Tx packet configuration
  * @param  ItMode: Enable or disable Tx EOT interrept
  * @retval Status
  */
static uint32_t ETH_Prepare_Tx_Descriptors(ETH_HandleTypeDef *heth, ETH_TxPacketConfig *pTxConfig, uint32_t ItMode)
{
 8002adc:	b480      	push	{r7}
 8002ade:	b08d      	sub	sp, #52	; 0x34
 8002ae0:	af00      	add	r7, sp, #0
 8002ae2:	60f8      	str	r0, [r7, #12]
 8002ae4:	60b9      	str	r1, [r7, #8]
 8002ae6:	607a      	str	r2, [r7, #4]
  ETH_TxDescListTypeDef *dmatxdesclist = &heth->TxDescList;
 8002ae8:	68fb      	ldr	r3, [r7, #12]
 8002aea:	3318      	adds	r3, #24
 8002aec:	617b      	str	r3, [r7, #20]
  uint32_t descidx = dmatxdesclist->CurTxDesc;
 8002aee:	697b      	ldr	r3, [r7, #20]
 8002af0:	691b      	ldr	r3, [r3, #16]
 8002af2:	62fb      	str	r3, [r7, #44]	; 0x2c
  uint32_t firstdescidx = dmatxdesclist->CurTxDesc;
 8002af4:	697b      	ldr	r3, [r7, #20]
 8002af6:	691b      	ldr	r3, [r3, #16]
 8002af8:	613b      	str	r3, [r7, #16]
  uint32_t idx;
  uint32_t descnbr = 0;
 8002afa:	2300      	movs	r3, #0
 8002afc:	627b      	str	r3, [r7, #36]	; 0x24
  ETH_DMADescTypeDef *dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002afe:	697b      	ldr	r3, [r7, #20]
 8002b00:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002b02:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002b06:	623b      	str	r3, [r7, #32]

  ETH_BufferTypeDef  *txbuffer = pTxConfig->TxBuffer;
 8002b08:	68bb      	ldr	r3, [r7, #8]
 8002b0a:	689b      	ldr	r3, [r3, #8]
 8002b0c:	61fb      	str	r3, [r7, #28]
  uint32_t           bd_count = 0;
 8002b0e:	2300      	movs	r3, #0
 8002b10:	61bb      	str	r3, [r7, #24]

  /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
  if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002b12:	6a3b      	ldr	r3, [r7, #32]
 8002b14:	681b      	ldr	r3, [r3, #0]
 8002b16:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002b1a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002b1e:	d007      	beq.n	8002b30 <ETH_Prepare_Tx_Descriptors+0x54>
      || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002b20:	697a      	ldr	r2, [r7, #20]
 8002b22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002b24:	3304      	adds	r3, #4
 8002b26:	009b      	lsls	r3, r3, #2
 8002b28:	4413      	add	r3, r2
 8002b2a:	685b      	ldr	r3, [r3, #4]
 8002b2c:	2b00      	cmp	r3, #0
 8002b2e:	d001      	beq.n	8002b34 <ETH_Prepare_Tx_Descriptors+0x58>
  {
    return HAL_ETH_ERROR_BUSY;
 8002b30:	2302      	movs	r3, #2
 8002b32:	e103      	b.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x260>
  }


  descnbr += 1U;
 8002b34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002b36:	3301      	adds	r3, #1
 8002b38:	627b      	str	r3, [r7, #36]	; 0x24

  /* Set header or buffer 1 address */
  WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002b3a:	69fb      	ldr	r3, [r7, #28]
 8002b3c:	681b      	ldr	r3, [r3, #0]
 8002b3e:	461a      	mov	r2, r3
 8002b40:	6a3b      	ldr	r3, [r7, #32]
 8002b42:	609a      	str	r2, [r3, #8]

  /* Set header or buffer 1 Length */
  MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002b44:	6a3b      	ldr	r3, [r7, #32]
 8002b46:	685b      	ldr	r3, [r3, #4]
 8002b48:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002b4c:	f023 031f 	bic.w	r3, r3, #31
 8002b50:	69fa      	ldr	r2, [r7, #28]
 8002b52:	6852      	ldr	r2, [r2, #4]
 8002b54:	431a      	orrs	r2, r3
 8002b56:	6a3b      	ldr	r3, [r7, #32]
 8002b58:	605a      	str	r2, [r3, #4]

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CSUM) != 0U)
 8002b5a:	68bb      	ldr	r3, [r7, #8]
 8002b5c:	681b      	ldr	r3, [r3, #0]
 8002b5e:	f003 0301 	and.w	r3, r3, #1
 8002b62:	2b00      	cmp	r3, #0
 8002b64:	d008      	beq.n	8002b78 <ETH_Prepare_Tx_Descriptors+0x9c>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_DMATXDESC_CIC, pTxConfig->ChecksumCtrl);
 8002b66:	6a3b      	ldr	r3, [r7, #32]
 8002b68:	681b      	ldr	r3, [r3, #0]
 8002b6a:	f423 0240 	bic.w	r2, r3, #12582912	; 0xc00000
 8002b6e:	68bb      	ldr	r3, [r7, #8]
 8002b70:	695b      	ldr	r3, [r3, #20]
 8002b72:	431a      	orrs	r2, r3
 8002b74:	6a3b      	ldr	r3, [r7, #32]
 8002b76:	601a      	str	r2, [r3, #0]
  }

  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_CRCPAD) != 0U)
 8002b78:	68bb      	ldr	r3, [r7, #8]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	f003 0320 	and.w	r3, r3, #32
 8002b80:	2b00      	cmp	r3, #0
 8002b82:	d008      	beq.n	8002b96 <ETH_Prepare_Tx_Descriptors+0xba>
  {
    MODIFY_REG(dmatxdesc->DESC0, ETH_CRC_PAD_DISABLE, pTxConfig->CRCPadCtrl);
 8002b84:	6a3b      	ldr	r3, [r7, #32]
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	f023 6240 	bic.w	r2, r3, #201326592	; 0xc000000
 8002b8c:	68bb      	ldr	r3, [r7, #8]
 8002b8e:	691b      	ldr	r3, [r3, #16]
 8002b90:	431a      	orrs	r2, r3
 8002b92:	6a3b      	ldr	r3, [r7, #32]
 8002b94:	601a      	str	r2, [r3, #0]
  }


  if (READ_BIT(pTxConfig->Attributes, ETH_TX_PACKETS_FEATURES_VLANTAG) != 0U)
 8002b96:	68bb      	ldr	r3, [r7, #8]
 8002b98:	681b      	ldr	r3, [r3, #0]
 8002b9a:	f003 0304 	and.w	r3, r3, #4
 8002b9e:	2b00      	cmp	r3, #0
 8002ba0:	d005      	beq.n	8002bae <ETH_Prepare_Tx_Descriptors+0xd2>
  {
    /* Set Vlan Type */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_VF);
 8002ba2:	6a3b      	ldr	r3, [r7, #32]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f043 0280 	orr.w	r2, r3, #128	; 0x80
 8002baa:	6a3b      	ldr	r3, [r7, #32]
 8002bac:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as First Descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002bae:	6a3b      	ldr	r3, [r7, #32]
 8002bb0:	681b      	ldr	r3, [r3, #0]
 8002bb2:	f043 5280 	orr.w	r2, r3, #268435456	; 0x10000000
 8002bb6:	6a3b      	ldr	r3, [r7, #32]
 8002bb8:	601a      	str	r2, [r3, #0]
  __ASM volatile ("dmb 0xF":::"memory");
 8002bba:	f3bf 8f5f 	dmb	sy
}
 8002bbe:	bf00      	nop

  /* Ensure rest of descriptor is written to RAM before the OWN bit */
  __DMB();
  /* set OWN bit of FIRST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002bc0:	6a3b      	ldr	r3, [r7, #32]
 8002bc2:	681b      	ldr	r3, [r3, #0]
 8002bc4:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002bc8:	6a3b      	ldr	r3, [r7, #32]
 8002bca:	601a      	str	r2, [r3, #0]

  /* only if the packet is split into more than one descriptors > 1 */
  while (txbuffer->next != NULL)
 8002bcc:	e084      	b.n	8002cd8 <ETH_Prepare_Tx_Descriptors+0x1fc>
  {
    /* Clear the LD bit of previous descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002bce:	6a3b      	ldr	r3, [r7, #32]
 8002bd0:	681b      	ldr	r3, [r3, #0]
 8002bd2:	f023 5200 	bic.w	r2, r3, #536870912	; 0x20000000
 8002bd6:	6a3b      	ldr	r3, [r7, #32]
 8002bd8:	601a      	str	r2, [r3, #0]
    if (ItMode != ((uint32_t)RESET))
 8002bda:	687b      	ldr	r3, [r7, #4]
 8002bdc:	2b00      	cmp	r3, #0
 8002bde:	d006      	beq.n	8002bee <ETH_Prepare_Tx_Descriptors+0x112>
    {
      /* Set Interrupt on completion bit */
      SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002be0:	6a3b      	ldr	r3, [r7, #32]
 8002be2:	681b      	ldr	r3, [r3, #0]
 8002be4:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002be8:	6a3b      	ldr	r3, [r7, #32]
 8002bea:	601a      	str	r2, [r3, #0]
 8002bec:	e005      	b.n	8002bfa <ETH_Prepare_Tx_Descriptors+0x11e>
    }
    else
    {
      /* Clear Interrupt on completion bit */
      CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002bee:	6a3b      	ldr	r3, [r7, #32]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002bf6:	6a3b      	ldr	r3, [r7, #32]
 8002bf8:	601a      	str	r2, [r3, #0]
    }
    /* Increment current tx descriptor index */
    INCR_TX_DESC_INDEX(descidx, 1U);
 8002bfa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002bfc:	3301      	adds	r3, #1
 8002bfe:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c00:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c02:	2b03      	cmp	r3, #3
 8002c04:	d902      	bls.n	8002c0c <ETH_Prepare_Tx_Descriptors+0x130>
 8002c06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c08:	3b04      	subs	r3, #4
 8002c0a:	62fb      	str	r3, [r7, #44]	; 0x2c
    /* Get current descriptor address */
    dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c0c:	697b      	ldr	r3, [r7, #20]
 8002c0e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c10:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c14:	623b      	str	r3, [r7, #32]

    /* Clear the FD bit of new Descriptor */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_FS);
 8002c16:	6a3b      	ldr	r3, [r7, #32]
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	f023 5280 	bic.w	r2, r3, #268435456	; 0x10000000
 8002c1e:	6a3b      	ldr	r3, [r7, #32]
 8002c20:	601a      	str	r2, [r3, #0]

    /* Current Tx Descriptor Owned by DMA: cannot be used by the application  */
    if ((READ_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN) == ETH_DMATXDESC_OWN)
 8002c22:	6a3b      	ldr	r3, [r7, #32]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f003 4300 	and.w	r3, r3, #2147483648	; 0x80000000
 8002c2a:	f1b3 4f00 	cmp.w	r3, #2147483648	; 0x80000000
 8002c2e:	d007      	beq.n	8002c40 <ETH_Prepare_Tx_Descriptors+0x164>
        || (dmatxdesclist->PacketAddress[descidx] != NULL))
 8002c30:	697a      	ldr	r2, [r7, #20]
 8002c32:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c34:	3304      	adds	r3, #4
 8002c36:	009b      	lsls	r3, r3, #2
 8002c38:	4413      	add	r3, r2
 8002c3a:	685b      	ldr	r3, [r3, #4]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	d029      	beq.n	8002c94 <ETH_Prepare_Tx_Descriptors+0x1b8>
    {
      descidx = firstdescidx;
 8002c40:	693b      	ldr	r3, [r7, #16]
 8002c42:	62fb      	str	r3, [r7, #44]	; 0x2c
      dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c44:	697b      	ldr	r3, [r7, #20]
 8002c46:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c48:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c4c:	623b      	str	r3, [r7, #32]

      /* clear previous desc own bit */
      for (idx = 0; idx < descnbr; idx ++)
 8002c4e:	2300      	movs	r3, #0
 8002c50:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c52:	e019      	b.n	8002c88 <ETH_Prepare_Tx_Descriptors+0x1ac>
  __ASM volatile ("dmb 0xF":::"memory");
 8002c54:	f3bf 8f5f 	dmb	sy
}
 8002c58:	bf00      	nop
      {
        /* Ensure rest of descriptor is written to RAM before the OWN bit */
        __DMB();

        CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002c5a:	6a3b      	ldr	r3, [r7, #32]
 8002c5c:	681b      	ldr	r3, [r3, #0]
 8002c5e:	f023 4200 	bic.w	r2, r3, #2147483648	; 0x80000000
 8002c62:	6a3b      	ldr	r3, [r7, #32]
 8002c64:	601a      	str	r2, [r3, #0]

        /* Increment current tx descriptor index */
        INCR_TX_DESC_INDEX(descidx, 1U);
 8002c66:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c68:	3301      	adds	r3, #1
 8002c6a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8002c6c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c6e:	2b03      	cmp	r3, #3
 8002c70:	d902      	bls.n	8002c78 <ETH_Prepare_Tx_Descriptors+0x19c>
 8002c72:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002c74:	3b04      	subs	r3, #4
 8002c76:	62fb      	str	r3, [r7, #44]	; 0x2c
        /* Get current descriptor address */
        dmatxdesc = (ETH_DMADescTypeDef *)dmatxdesclist->TxDesc[descidx];
 8002c78:	697b      	ldr	r3, [r7, #20]
 8002c7a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002c7c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002c80:	623b      	str	r3, [r7, #32]
      for (idx = 0; idx < descnbr; idx ++)
 8002c82:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8002c84:	3301      	adds	r3, #1
 8002c86:	62bb      	str	r3, [r7, #40]	; 0x28
 8002c88:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8002c8a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c8c:	429a      	cmp	r2, r3
 8002c8e:	d3e1      	bcc.n	8002c54 <ETH_Prepare_Tx_Descriptors+0x178>
      }

      return HAL_ETH_ERROR_BUSY;
 8002c90:	2302      	movs	r3, #2
 8002c92:	e053      	b.n	8002d3c <ETH_Prepare_Tx_Descriptors+0x260>
    }

    descnbr += 1U;
 8002c94:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8002c96:	3301      	adds	r3, #1
 8002c98:	627b      	str	r3, [r7, #36]	; 0x24

    /* Get the next Tx buffer in the list */
    txbuffer = txbuffer->next;
 8002c9a:	69fb      	ldr	r3, [r7, #28]
 8002c9c:	689b      	ldr	r3, [r3, #8]
 8002c9e:	61fb      	str	r3, [r7, #28]

    /* Set header or buffer 1 address */
    WRITE_REG(dmatxdesc->DESC2, (uint32_t)txbuffer->buffer);
 8002ca0:	69fb      	ldr	r3, [r7, #28]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	461a      	mov	r2, r3
 8002ca6:	6a3b      	ldr	r3, [r7, #32]
 8002ca8:	609a      	str	r2, [r3, #8]

    /* Set header or buffer 1 Length */
    MODIFY_REG(dmatxdesc->DESC1, ETH_DMATXDESC_TBS1, txbuffer->len);
 8002caa:	6a3b      	ldr	r3, [r7, #32]
 8002cac:	685b      	ldr	r3, [r3, #4]
 8002cae:	f423 53ff 	bic.w	r3, r3, #8160	; 0x1fe0
 8002cb2:	f023 031f 	bic.w	r3, r3, #31
 8002cb6:	69fa      	ldr	r2, [r7, #28]
 8002cb8:	6852      	ldr	r2, [r2, #4]
 8002cba:	431a      	orrs	r2, r3
 8002cbc:	6a3b      	ldr	r3, [r7, #32]
 8002cbe:	605a      	str	r2, [r3, #4]

    bd_count += 1U;
 8002cc0:	69bb      	ldr	r3, [r7, #24]
 8002cc2:	3301      	adds	r3, #1
 8002cc4:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("dmb 0xF":::"memory");
 8002cc6:	f3bf 8f5f 	dmb	sy
}
 8002cca:	bf00      	nop

    /* Ensure rest of descriptor is written to RAM before the OWN bit */
    __DMB();
    /* Set Own bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_OWN);
 8002ccc:	6a3b      	ldr	r3, [r7, #32]
 8002cce:	681b      	ldr	r3, [r3, #0]
 8002cd0:	f043 4200 	orr.w	r2, r3, #2147483648	; 0x80000000
 8002cd4:	6a3b      	ldr	r3, [r7, #32]
 8002cd6:	601a      	str	r2, [r3, #0]
  while (txbuffer->next != NULL)
 8002cd8:	69fb      	ldr	r3, [r7, #28]
 8002cda:	689b      	ldr	r3, [r3, #8]
 8002cdc:	2b00      	cmp	r3, #0
 8002cde:	f47f af76 	bne.w	8002bce <ETH_Prepare_Tx_Descriptors+0xf2>
  }

  if (ItMode != ((uint32_t)RESET))
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	2b00      	cmp	r3, #0
 8002ce6:	d006      	beq.n	8002cf6 <ETH_Prepare_Tx_Descriptors+0x21a>
  {
    /* Set Interrupt on completion bit */
    SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002ce8:	6a3b      	ldr	r3, [r7, #32]
 8002cea:	681b      	ldr	r3, [r3, #0]
 8002cec:	f043 4280 	orr.w	r2, r3, #1073741824	; 0x40000000
 8002cf0:	6a3b      	ldr	r3, [r7, #32]
 8002cf2:	601a      	str	r2, [r3, #0]
 8002cf4:	e005      	b.n	8002d02 <ETH_Prepare_Tx_Descriptors+0x226>
  }
  else
  {
    /* Clear Interrupt on completion bit */
    CLEAR_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_IC);
 8002cf6:	6a3b      	ldr	r3, [r7, #32]
 8002cf8:	681b      	ldr	r3, [r3, #0]
 8002cfa:	f023 4280 	bic.w	r2, r3, #1073741824	; 0x40000000
 8002cfe:	6a3b      	ldr	r3, [r7, #32]
 8002d00:	601a      	str	r2, [r3, #0]
  }

  /* Mark it as LAST descriptor */
  SET_BIT(dmatxdesc->DESC0, ETH_DMATXDESC_LS);
 8002d02:	6a3b      	ldr	r3, [r7, #32]
 8002d04:	681b      	ldr	r3, [r3, #0]
 8002d06:	f043 5200 	orr.w	r2, r3, #536870912	; 0x20000000
 8002d0a:	6a3b      	ldr	r3, [r7, #32]
 8002d0c:	601a      	str	r2, [r3, #0]
  /* Save the current packet address to expose it to the application */
  dmatxdesclist->PacketAddress[descidx] = dmatxdesclist->CurrentPacketAddress;
 8002d0e:	697b      	ldr	r3, [r7, #20]
 8002d10:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8002d12:	6979      	ldr	r1, [r7, #20]
 8002d14:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8002d16:	3304      	adds	r3, #4
 8002d18:	009b      	lsls	r3, r3, #2
 8002d1a:	440b      	add	r3, r1
 8002d1c:	605a      	str	r2, [r3, #4]

  dmatxdesclist->CurTxDesc = descidx;
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8002d22:	611a      	str	r2, [r3, #16]
  __ASM volatile ("cpsid i" : : : "memory");
 8002d24:	b672      	cpsid	i
}
 8002d26:	bf00      	nop

  /* disable the interrupt */
  __disable_irq();

  dmatxdesclist->BuffersInUse += bd_count + 1U;
 8002d28:	697b      	ldr	r3, [r7, #20]
 8002d2a:	6a9a      	ldr	r2, [r3, #40]	; 0x28
 8002d2c:	69bb      	ldr	r3, [r7, #24]
 8002d2e:	4413      	add	r3, r2
 8002d30:	1c5a      	adds	r2, r3, #1
 8002d32:	697b      	ldr	r3, [r7, #20]
 8002d34:	629a      	str	r2, [r3, #40]	; 0x28
  __ASM volatile ("cpsie i" : : : "memory");
 8002d36:	b662      	cpsie	i
}
 8002d38:	bf00      	nop
  /* Enable interrupts back */
  __enable_irq();


  /* Return function status */
  return HAL_ETH_ERROR_NONE;
 8002d3a:	2300      	movs	r3, #0
}
 8002d3c:	4618      	mov	r0, r3
 8002d3e:	3734      	adds	r7, #52	; 0x34
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr

08002d48 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d48:	b480      	push	{r7}
 8002d4a:	b089      	sub	sp, #36	; 0x24
 8002d4c:	af00      	add	r7, sp, #0
 8002d4e:	6078      	str	r0, [r7, #4]
 8002d50:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d52:	2300      	movs	r3, #0
 8002d54:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d56:	2300      	movs	r3, #0
 8002d58:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d5a:	2300      	movs	r3, #0
 8002d5c:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d5e:	2300      	movs	r3, #0
 8002d60:	61fb      	str	r3, [r7, #28]
 8002d62:	e177      	b.n	8003054 <HAL_GPIO_Init+0x30c>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d64:	2201      	movs	r2, #1
 8002d66:	69fb      	ldr	r3, [r7, #28]
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d6e:	683b      	ldr	r3, [r7, #0]
 8002d70:	681b      	ldr	r3, [r3, #0]
 8002d72:	697a      	ldr	r2, [r7, #20]
 8002d74:	4013      	ands	r3, r2
 8002d76:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d78:	693a      	ldr	r2, [r7, #16]
 8002d7a:	697b      	ldr	r3, [r7, #20]
 8002d7c:	429a      	cmp	r2, r3
 8002d7e:	f040 8166 	bne.w	800304e <HAL_GPIO_Init+0x306>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	685b      	ldr	r3, [r3, #4]
 8002d86:	f003 0303 	and.w	r3, r3, #3
 8002d8a:	2b01      	cmp	r3, #1
 8002d8c:	d005      	beq.n	8002d9a <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d8e:	683b      	ldr	r3, [r7, #0]
 8002d90:	685b      	ldr	r3, [r3, #4]
 8002d92:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	2b02      	cmp	r3, #2
 8002d98:	d130      	bne.n	8002dfc <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	689b      	ldr	r3, [r3, #8]
 8002d9e:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	2203      	movs	r2, #3
 8002da6:	fa02 f303 	lsl.w	r3, r2, r3
 8002daa:	43db      	mvns	r3, r3
 8002dac:	69ba      	ldr	r2, [r7, #24]
 8002dae:	4013      	ands	r3, r2
 8002db0:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002db2:	683b      	ldr	r3, [r7, #0]
 8002db4:	68da      	ldr	r2, [r3, #12]
 8002db6:	69fb      	ldr	r3, [r7, #28]
 8002db8:	005b      	lsls	r3, r3, #1
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	69ba      	ldr	r2, [r7, #24]
 8002dc0:	4313      	orrs	r3, r2
 8002dc2:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dc4:	687b      	ldr	r3, [r7, #4]
 8002dc6:	69ba      	ldr	r2, [r7, #24]
 8002dc8:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dca:	687b      	ldr	r3, [r7, #4]
 8002dcc:	685b      	ldr	r3, [r3, #4]
 8002dce:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002dd0:	2201      	movs	r2, #1
 8002dd2:	69fb      	ldr	r3, [r7, #28]
 8002dd4:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd8:	43db      	mvns	r3, r3
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	4013      	ands	r3, r2
 8002dde:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	091b      	lsrs	r3, r3, #4
 8002de6:	f003 0201 	and.w	r2, r3, #1
 8002dea:	69fb      	ldr	r3, [r7, #28]
 8002dec:	fa02 f303 	lsl.w	r3, r2, r3
 8002df0:	69ba      	ldr	r2, [r7, #24]
 8002df2:	4313      	orrs	r3, r2
 8002df4:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	69ba      	ldr	r2, [r7, #24]
 8002dfa:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002dfc:	683b      	ldr	r3, [r7, #0]
 8002dfe:	685b      	ldr	r3, [r3, #4]
 8002e00:	f003 0303 	and.w	r3, r3, #3
 8002e04:	2b03      	cmp	r3, #3
 8002e06:	d017      	beq.n	8002e38 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e08:	687b      	ldr	r3, [r7, #4]
 8002e0a:	68db      	ldr	r3, [r3, #12]
 8002e0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e0e:	69fb      	ldr	r3, [r7, #28]
 8002e10:	005b      	lsls	r3, r3, #1
 8002e12:	2203      	movs	r2, #3
 8002e14:	fa02 f303 	lsl.w	r3, r2, r3
 8002e18:	43db      	mvns	r3, r3
 8002e1a:	69ba      	ldr	r2, [r7, #24]
 8002e1c:	4013      	ands	r3, r2
 8002e1e:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e20:	683b      	ldr	r3, [r7, #0]
 8002e22:	689a      	ldr	r2, [r3, #8]
 8002e24:	69fb      	ldr	r3, [r7, #28]
 8002e26:	005b      	lsls	r3, r3, #1
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	69ba      	ldr	r2, [r7, #24]
 8002e2e:	4313      	orrs	r3, r2
 8002e30:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e32:	687b      	ldr	r3, [r7, #4]
 8002e34:	69ba      	ldr	r2, [r7, #24]
 8002e36:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e38:	683b      	ldr	r3, [r7, #0]
 8002e3a:	685b      	ldr	r3, [r3, #4]
 8002e3c:	f003 0303 	and.w	r3, r3, #3
 8002e40:	2b02      	cmp	r3, #2
 8002e42:	d123      	bne.n	8002e8c <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e44:	69fb      	ldr	r3, [r7, #28]
 8002e46:	08da      	lsrs	r2, r3, #3
 8002e48:	687b      	ldr	r3, [r7, #4]
 8002e4a:	3208      	adds	r2, #8
 8002e4c:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e50:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	f003 0307 	and.w	r3, r3, #7
 8002e58:	009b      	lsls	r3, r3, #2
 8002e5a:	220f      	movs	r2, #15
 8002e5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e60:	43db      	mvns	r3, r3
 8002e62:	69ba      	ldr	r2, [r7, #24]
 8002e64:	4013      	ands	r3, r2
 8002e66:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e68:	683b      	ldr	r3, [r7, #0]
 8002e6a:	691a      	ldr	r2, [r3, #16]
 8002e6c:	69fb      	ldr	r3, [r7, #28]
 8002e6e:	f003 0307 	and.w	r3, r3, #7
 8002e72:	009b      	lsls	r3, r3, #2
 8002e74:	fa02 f303 	lsl.w	r3, r2, r3
 8002e78:	69ba      	ldr	r2, [r7, #24]
 8002e7a:	4313      	orrs	r3, r2
 8002e7c:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e7e:	69fb      	ldr	r3, [r7, #28]
 8002e80:	08da      	lsrs	r2, r3, #3
 8002e82:	687b      	ldr	r3, [r7, #4]
 8002e84:	3208      	adds	r2, #8
 8002e86:	69b9      	ldr	r1, [r7, #24]
 8002e88:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e8c:	687b      	ldr	r3, [r7, #4]
 8002e8e:	681b      	ldr	r3, [r3, #0]
 8002e90:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	005b      	lsls	r3, r3, #1
 8002e96:	2203      	movs	r2, #3
 8002e98:	fa02 f303 	lsl.w	r3, r2, r3
 8002e9c:	43db      	mvns	r3, r3
 8002e9e:	69ba      	ldr	r2, [r7, #24]
 8002ea0:	4013      	ands	r3, r2
 8002ea2:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002ea4:	683b      	ldr	r3, [r7, #0]
 8002ea6:	685b      	ldr	r3, [r3, #4]
 8002ea8:	f003 0203 	and.w	r2, r3, #3
 8002eac:	69fb      	ldr	r3, [r7, #28]
 8002eae:	005b      	lsls	r3, r3, #1
 8002eb0:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb4:	69ba      	ldr	r2, [r7, #24]
 8002eb6:	4313      	orrs	r3, r2
 8002eb8:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ec0:	683b      	ldr	r3, [r7, #0]
 8002ec2:	685b      	ldr	r3, [r3, #4]
 8002ec4:	f403 3340 	and.w	r3, r3, #196608	; 0x30000
 8002ec8:	2b00      	cmp	r3, #0
 8002eca:	f000 80c0 	beq.w	800304e <HAL_GPIO_Init+0x306>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ece:	2300      	movs	r3, #0
 8002ed0:	60fb      	str	r3, [r7, #12]
 8002ed2:	4b66      	ldr	r3, [pc, #408]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ed6:	4a65      	ldr	r2, [pc, #404]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ed8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002edc:	6453      	str	r3, [r2, #68]	; 0x44
 8002ede:	4b63      	ldr	r3, [pc, #396]	; (800306c <HAL_GPIO_Init+0x324>)
 8002ee0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002ee2:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002ee6:	60fb      	str	r3, [r7, #12]
 8002ee8:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002eea:	4a61      	ldr	r2, [pc, #388]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002eec:	69fb      	ldr	r3, [r7, #28]
 8002eee:	089b      	lsrs	r3, r3, #2
 8002ef0:	3302      	adds	r3, #2
 8002ef2:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002ef6:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002ef8:	69fb      	ldr	r3, [r7, #28]
 8002efa:	f003 0303 	and.w	r3, r3, #3
 8002efe:	009b      	lsls	r3, r3, #2
 8002f00:	220f      	movs	r2, #15
 8002f02:	fa02 f303 	lsl.w	r3, r2, r3
 8002f06:	43db      	mvns	r3, r3
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	4013      	ands	r3, r2
 8002f0c:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f0e:	687b      	ldr	r3, [r7, #4]
 8002f10:	4a58      	ldr	r2, [pc, #352]	; (8003074 <HAL_GPIO_Init+0x32c>)
 8002f12:	4293      	cmp	r3, r2
 8002f14:	d037      	beq.n	8002f86 <HAL_GPIO_Init+0x23e>
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	4a57      	ldr	r2, [pc, #348]	; (8003078 <HAL_GPIO_Init+0x330>)
 8002f1a:	4293      	cmp	r3, r2
 8002f1c:	d031      	beq.n	8002f82 <HAL_GPIO_Init+0x23a>
 8002f1e:	687b      	ldr	r3, [r7, #4]
 8002f20:	4a56      	ldr	r2, [pc, #344]	; (800307c <HAL_GPIO_Init+0x334>)
 8002f22:	4293      	cmp	r3, r2
 8002f24:	d02b      	beq.n	8002f7e <HAL_GPIO_Init+0x236>
 8002f26:	687b      	ldr	r3, [r7, #4]
 8002f28:	4a55      	ldr	r2, [pc, #340]	; (8003080 <HAL_GPIO_Init+0x338>)
 8002f2a:	4293      	cmp	r3, r2
 8002f2c:	d025      	beq.n	8002f7a <HAL_GPIO_Init+0x232>
 8002f2e:	687b      	ldr	r3, [r7, #4]
 8002f30:	4a54      	ldr	r2, [pc, #336]	; (8003084 <HAL_GPIO_Init+0x33c>)
 8002f32:	4293      	cmp	r3, r2
 8002f34:	d01f      	beq.n	8002f76 <HAL_GPIO_Init+0x22e>
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	4a53      	ldr	r2, [pc, #332]	; (8003088 <HAL_GPIO_Init+0x340>)
 8002f3a:	4293      	cmp	r3, r2
 8002f3c:	d019      	beq.n	8002f72 <HAL_GPIO_Init+0x22a>
 8002f3e:	687b      	ldr	r3, [r7, #4]
 8002f40:	4a52      	ldr	r2, [pc, #328]	; (800308c <HAL_GPIO_Init+0x344>)
 8002f42:	4293      	cmp	r3, r2
 8002f44:	d013      	beq.n	8002f6e <HAL_GPIO_Init+0x226>
 8002f46:	687b      	ldr	r3, [r7, #4]
 8002f48:	4a51      	ldr	r2, [pc, #324]	; (8003090 <HAL_GPIO_Init+0x348>)
 8002f4a:	4293      	cmp	r3, r2
 8002f4c:	d00d      	beq.n	8002f6a <HAL_GPIO_Init+0x222>
 8002f4e:	687b      	ldr	r3, [r7, #4]
 8002f50:	4a50      	ldr	r2, [pc, #320]	; (8003094 <HAL_GPIO_Init+0x34c>)
 8002f52:	4293      	cmp	r3, r2
 8002f54:	d007      	beq.n	8002f66 <HAL_GPIO_Init+0x21e>
 8002f56:	687b      	ldr	r3, [r7, #4]
 8002f58:	4a4f      	ldr	r2, [pc, #316]	; (8003098 <HAL_GPIO_Init+0x350>)
 8002f5a:	4293      	cmp	r3, r2
 8002f5c:	d101      	bne.n	8002f62 <HAL_GPIO_Init+0x21a>
 8002f5e:	2309      	movs	r3, #9
 8002f60:	e012      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f62:	230a      	movs	r3, #10
 8002f64:	e010      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f66:	2308      	movs	r3, #8
 8002f68:	e00e      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6a:	2307      	movs	r3, #7
 8002f6c:	e00c      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f6e:	2306      	movs	r3, #6
 8002f70:	e00a      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f72:	2305      	movs	r3, #5
 8002f74:	e008      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f76:	2304      	movs	r3, #4
 8002f78:	e006      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7a:	2303      	movs	r3, #3
 8002f7c:	e004      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f7e:	2302      	movs	r3, #2
 8002f80:	e002      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f82:	2301      	movs	r3, #1
 8002f84:	e000      	b.n	8002f88 <HAL_GPIO_Init+0x240>
 8002f86:	2300      	movs	r3, #0
 8002f88:	69fa      	ldr	r2, [r7, #28]
 8002f8a:	f002 0203 	and.w	r2, r2, #3
 8002f8e:	0092      	lsls	r2, r2, #2
 8002f90:	4093      	lsls	r3, r2
 8002f92:	69ba      	ldr	r2, [r7, #24]
 8002f94:	4313      	orrs	r3, r2
 8002f96:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f98:	4935      	ldr	r1, [pc, #212]	; (8003070 <HAL_GPIO_Init+0x328>)
 8002f9a:	69fb      	ldr	r3, [r7, #28]
 8002f9c:	089b      	lsrs	r3, r3, #2
 8002f9e:	3302      	adds	r3, #2
 8002fa0:	69ba      	ldr	r2, [r7, #24]
 8002fa2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002fa6:	4b3d      	ldr	r3, [pc, #244]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fac:	693b      	ldr	r3, [r7, #16]
 8002fae:	43db      	mvns	r3, r3
 8002fb0:	69ba      	ldr	r2, [r7, #24]
 8002fb2:	4013      	ands	r3, r2
 8002fb4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002fb6:	683b      	ldr	r3, [r7, #0]
 8002fb8:	685b      	ldr	r3, [r3, #4]
 8002fba:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d003      	beq.n	8002fca <HAL_GPIO_Init+0x282>
        {
          temp |= iocurrent;
 8002fc2:	69ba      	ldr	r2, [r7, #24]
 8002fc4:	693b      	ldr	r3, [r7, #16]
 8002fc6:	4313      	orrs	r3, r2
 8002fc8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fca:	4a34      	ldr	r2, [pc, #208]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fcc:	69bb      	ldr	r3, [r7, #24]
 8002fce:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fd0:	4b32      	ldr	r3, [pc, #200]	; (800309c <HAL_GPIO_Init+0x354>)
 8002fd2:	68db      	ldr	r3, [r3, #12]
 8002fd4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd6:	693b      	ldr	r3, [r7, #16]
 8002fd8:	43db      	mvns	r3, r3
 8002fda:	69ba      	ldr	r2, [r7, #24]
 8002fdc:	4013      	ands	r3, r2
 8002fde:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fe0:	683b      	ldr	r3, [r7, #0]
 8002fe2:	685b      	ldr	r3, [r3, #4]
 8002fe4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fe8:	2b00      	cmp	r3, #0
 8002fea:	d003      	beq.n	8002ff4 <HAL_GPIO_Init+0x2ac>
        {
          temp |= iocurrent;
 8002fec:	69ba      	ldr	r2, [r7, #24]
 8002fee:	693b      	ldr	r3, [r7, #16]
 8002ff0:	4313      	orrs	r3, r2
 8002ff2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002ff4:	4a29      	ldr	r2, [pc, #164]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ff6:	69bb      	ldr	r3, [r7, #24]
 8002ff8:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002ffa:	4b28      	ldr	r3, [pc, #160]	; (800309c <HAL_GPIO_Init+0x354>)
 8002ffc:	685b      	ldr	r3, [r3, #4]
 8002ffe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003000:	693b      	ldr	r3, [r7, #16]
 8003002:	43db      	mvns	r3, r3
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	4013      	ands	r3, r2
 8003008:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800300a:	683b      	ldr	r3, [r7, #0]
 800300c:	685b      	ldr	r3, [r3, #4]
 800300e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003012:	2b00      	cmp	r3, #0
 8003014:	d003      	beq.n	800301e <HAL_GPIO_Init+0x2d6>
        {
          temp |= iocurrent;
 8003016:	69ba      	ldr	r2, [r7, #24]
 8003018:	693b      	ldr	r3, [r7, #16]
 800301a:	4313      	orrs	r3, r2
 800301c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800301e:	4a1f      	ldr	r2, [pc, #124]	; (800309c <HAL_GPIO_Init+0x354>)
 8003020:	69bb      	ldr	r3, [r7, #24]
 8003022:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003024:	4b1d      	ldr	r3, [pc, #116]	; (800309c <HAL_GPIO_Init+0x354>)
 8003026:	681b      	ldr	r3, [r3, #0]
 8003028:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800302a:	693b      	ldr	r3, [r7, #16]
 800302c:	43db      	mvns	r3, r3
 800302e:	69ba      	ldr	r2, [r7, #24]
 8003030:	4013      	ands	r3, r2
 8003032:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003034:	683b      	ldr	r3, [r7, #0]
 8003036:	685b      	ldr	r3, [r3, #4]
 8003038:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800303c:	2b00      	cmp	r3, #0
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0x300>
        {
          temp |= iocurrent;
 8003040:	69ba      	ldr	r2, [r7, #24]
 8003042:	693b      	ldr	r3, [r7, #16]
 8003044:	4313      	orrs	r3, r2
 8003046:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003048:	4a14      	ldr	r2, [pc, #80]	; (800309c <HAL_GPIO_Init+0x354>)
 800304a:	69bb      	ldr	r3, [r7, #24]
 800304c:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800304e:	69fb      	ldr	r3, [r7, #28]
 8003050:	3301      	adds	r3, #1
 8003052:	61fb      	str	r3, [r7, #28]
 8003054:	69fb      	ldr	r3, [r7, #28]
 8003056:	2b0f      	cmp	r3, #15
 8003058:	f67f ae84 	bls.w	8002d64 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800305c:	bf00      	nop
 800305e:	bf00      	nop
 8003060:	3724      	adds	r7, #36	; 0x24
 8003062:	46bd      	mov	sp, r7
 8003064:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003068:	4770      	bx	lr
 800306a:	bf00      	nop
 800306c:	40023800 	.word	0x40023800
 8003070:	40013800 	.word	0x40013800
 8003074:	40020000 	.word	0x40020000
 8003078:	40020400 	.word	0x40020400
 800307c:	40020800 	.word	0x40020800
 8003080:	40020c00 	.word	0x40020c00
 8003084:	40021000 	.word	0x40021000
 8003088:	40021400 	.word	0x40021400
 800308c:	40021800 	.word	0x40021800
 8003090:	40021c00 	.word	0x40021c00
 8003094:	40022000 	.word	0x40022000
 8003098:	40022400 	.word	0x40022400
 800309c:	40013c00 	.word	0x40013c00

080030a0 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80030a0:	b480      	push	{r7}
 80030a2:	b083      	sub	sp, #12
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
 80030a8:	460b      	mov	r3, r1
 80030aa:	807b      	strh	r3, [r7, #2]
 80030ac:	4613      	mov	r3, r2
 80030ae:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80030b0:	787b      	ldrb	r3, [r7, #1]
 80030b2:	2b00      	cmp	r3, #0
 80030b4:	d003      	beq.n	80030be <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80030b6:	887a      	ldrh	r2, [r7, #2]
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80030bc:	e003      	b.n	80030c6 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80030be:	887b      	ldrh	r3, [r7, #2]
 80030c0:	041a      	lsls	r2, r3, #16
 80030c2:	687b      	ldr	r3, [r7, #4]
 80030c4:	619a      	str	r2, [r3, #24]
}
 80030c6:	bf00      	nop
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr
	...

080030d4 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80030d4:	b580      	push	{r7, lr}
 80030d6:	b082      	sub	sp, #8
 80030d8:	af00      	add	r7, sp, #0
 80030da:	4603      	mov	r3, r0
 80030dc:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80030de:	4b08      	ldr	r3, [pc, #32]	; (8003100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030e0:	695a      	ldr	r2, [r3, #20]
 80030e2:	88fb      	ldrh	r3, [r7, #6]
 80030e4:	4013      	ands	r3, r2
 80030e6:	2b00      	cmp	r3, #0
 80030e8:	d006      	beq.n	80030f8 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80030ea:	4a05      	ldr	r2, [pc, #20]	; (8003100 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80030ec:	88fb      	ldrh	r3, [r7, #6]
 80030ee:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80030f0:	88fb      	ldrh	r3, [r7, #6]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f000 f806 	bl	8003104 <HAL_GPIO_EXTI_Callback>
  }
}
 80030f8:	bf00      	nop
 80030fa:	3708      	adds	r7, #8
 80030fc:	46bd      	mov	sp, r7
 80030fe:	bd80      	pop	{r7, pc}
 8003100:	40013c00 	.word	0x40013c00

08003104 <HAL_GPIO_EXTI_Callback>:
  * @brief  EXTI line detection callbacks.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
__weak void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin)
{
 8003104:	b480      	push	{r7}
 8003106:	b083      	sub	sp, #12
 8003108:	af00      	add	r7, sp, #0
 800310a:	4603      	mov	r3, r0
 800310c:	80fb      	strh	r3, [r7, #6]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(GPIO_Pin);
  /* NOTE: This function Should not be modified, when the callback is needed,
           the HAL_GPIO_EXTI_Callback could be implemented in the user file
   */
}
 800310e:	bf00      	nop
 8003110:	370c      	adds	r7, #12
 8003112:	46bd      	mov	sp, r7
 8003114:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003118:	4770      	bx	lr
	...

0800311c <HAL_PWREx_EnableOverDrive>:
  *         During the Over-drive switch activation, no peripheral clocks should be enabled.   
  *         The peripheral clocks must be enabled once the Over-drive mode is activated.   
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PWREx_EnableOverDrive(void)
{
 800311c:	b580      	push	{r7, lr}
 800311e:	b082      	sub	sp, #8
 8003120:	af00      	add	r7, sp, #0
  uint32_t tickstart = 0U;
 8003122:	2300      	movs	r3, #0
 8003124:	607b      	str	r3, [r7, #4]

  __HAL_RCC_PWR_CLK_ENABLE();
 8003126:	2300      	movs	r3, #0
 8003128:	603b      	str	r3, [r7, #0]
 800312a:	4b20      	ldr	r3, [pc, #128]	; (80031ac <HAL_PWREx_EnableOverDrive+0x90>)
 800312c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800312e:	4a1f      	ldr	r2, [pc, #124]	; (80031ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003130:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003134:	6413      	str	r3, [r2, #64]	; 0x40
 8003136:	4b1d      	ldr	r3, [pc, #116]	; (80031ac <HAL_PWREx_EnableOverDrive+0x90>)
 8003138:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800313a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800313e:	603b      	str	r3, [r7, #0]
 8003140:	683b      	ldr	r3, [r7, #0]
  
  /* Enable the Over-drive to extend the clock frequency to 180 Mhz */
  __HAL_PWR_OVERDRIVE_ENABLE();
 8003142:	4b1b      	ldr	r3, [pc, #108]	; (80031b0 <HAL_PWREx_EnableOverDrive+0x94>)
 8003144:	2201      	movs	r2, #1
 8003146:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003148:	f7fe fa9c 	bl	8001684 <HAL_GetTick>
 800314c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 800314e:	e009      	b.n	8003164 <HAL_PWREx_EnableOverDrive+0x48>
  {
    if((HAL_GetTick() - tickstart) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003150:	f7fe fa98 	bl	8001684 <HAL_GetTick>
 8003154:	4602      	mov	r2, r0
 8003156:	687b      	ldr	r3, [r7, #4]
 8003158:	1ad3      	subs	r3, r2, r3
 800315a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800315e:	d901      	bls.n	8003164 <HAL_PWREx_EnableOverDrive+0x48>
    {
      return HAL_TIMEOUT;
 8003160:	2303      	movs	r3, #3
 8003162:	e01f      	b.n	80031a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODRDY))
 8003164:	4b13      	ldr	r3, [pc, #76]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003166:	685b      	ldr	r3, [r3, #4]
 8003168:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800316c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003170:	d1ee      	bne.n	8003150 <HAL_PWREx_EnableOverDrive+0x34>
    }
  }
  
  /* Enable the Over-drive switch */
  __HAL_PWR_OVERDRIVESWITCHING_ENABLE();
 8003172:	4b11      	ldr	r3, [pc, #68]	; (80031b8 <HAL_PWREx_EnableOverDrive+0x9c>)
 8003174:	2201      	movs	r2, #1
 8003176:	601a      	str	r2, [r3, #0]

  /* Get tick */
  tickstart = HAL_GetTick();
 8003178:	f7fe fa84 	bl	8001684 <HAL_GetTick>
 800317c:	6078      	str	r0, [r7, #4]

  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 800317e:	e009      	b.n	8003194 <HAL_PWREx_EnableOverDrive+0x78>
  {
    if((HAL_GetTick() - tickstart ) > PWR_OVERDRIVE_TIMEOUT_VALUE)
 8003180:	f7fe fa80 	bl	8001684 <HAL_GetTick>
 8003184:	4602      	mov	r2, r0
 8003186:	687b      	ldr	r3, [r7, #4]
 8003188:	1ad3      	subs	r3, r2, r3
 800318a:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 800318e:	d901      	bls.n	8003194 <HAL_PWREx_EnableOverDrive+0x78>
    {
      return HAL_TIMEOUT;
 8003190:	2303      	movs	r3, #3
 8003192:	e007      	b.n	80031a4 <HAL_PWREx_EnableOverDrive+0x88>
  while(!__HAL_PWR_GET_FLAG(PWR_FLAG_ODSWRDY))
 8003194:	4b07      	ldr	r3, [pc, #28]	; (80031b4 <HAL_PWREx_EnableOverDrive+0x98>)
 8003196:	685b      	ldr	r3, [r3, #4]
 8003198:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800319c:	f5b3 3f00 	cmp.w	r3, #131072	; 0x20000
 80031a0:	d1ee      	bne.n	8003180 <HAL_PWREx_EnableOverDrive+0x64>
    }
  } 
  return HAL_OK;
 80031a2:	2300      	movs	r3, #0
}
 80031a4:	4618      	mov	r0, r3
 80031a6:	3708      	adds	r7, #8
 80031a8:	46bd      	mov	sp, r7
 80031aa:	bd80      	pop	{r7, pc}
 80031ac:	40023800 	.word	0x40023800
 80031b0:	420e0040 	.word	0x420e0040
 80031b4:	40007000 	.word	0x40007000
 80031b8:	420e0044 	.word	0x420e0044

080031bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80031bc:	b580      	push	{r7, lr}
 80031be:	b086      	sub	sp, #24
 80031c0:	af00      	add	r7, sp, #0
 80031c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2b00      	cmp	r3, #0
 80031c8:	d101      	bne.n	80031ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80031ca:	2301      	movs	r3, #1
 80031cc:	e267      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80031ce:	687b      	ldr	r3, [r7, #4]
 80031d0:	681b      	ldr	r3, [r3, #0]
 80031d2:	f003 0301 	and.w	r3, r3, #1
 80031d6:	2b00      	cmp	r3, #0
 80031d8:	d075      	beq.n	80032c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031da:	4b88      	ldr	r3, [pc, #544]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031dc:	689b      	ldr	r3, [r3, #8]
 80031de:	f003 030c 	and.w	r3, r3, #12
 80031e2:	2b04      	cmp	r3, #4
 80031e4:	d00c      	beq.n	8003200 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031e6:	4b85      	ldr	r3, [pc, #532]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031e8:	689b      	ldr	r3, [r3, #8]
 80031ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80031ee:	2b08      	cmp	r3, #8
 80031f0:	d112      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80031f2:	4b82      	ldr	r3, [pc, #520]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80031f4:	685b      	ldr	r3, [r3, #4]
 80031f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80031fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80031fe:	d10b      	bne.n	8003218 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003200:	4b7e      	ldr	r3, [pc, #504]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003202:	681b      	ldr	r3, [r3, #0]
 8003204:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003208:	2b00      	cmp	r3, #0
 800320a:	d05b      	beq.n	80032c4 <HAL_RCC_OscConfig+0x108>
 800320c:	687b      	ldr	r3, [r7, #4]
 800320e:	685b      	ldr	r3, [r3, #4]
 8003210:	2b00      	cmp	r3, #0
 8003212:	d157      	bne.n	80032c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003214:	2301      	movs	r3, #1
 8003216:	e242      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003218:	687b      	ldr	r3, [r7, #4]
 800321a:	685b      	ldr	r3, [r3, #4]
 800321c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8003220:	d106      	bne.n	8003230 <HAL_RCC_OscConfig+0x74>
 8003222:	4b76      	ldr	r3, [pc, #472]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003224:	681b      	ldr	r3, [r3, #0]
 8003226:	4a75      	ldr	r2, [pc, #468]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003228:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800322c:	6013      	str	r3, [r2, #0]
 800322e:	e01d      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003230:	687b      	ldr	r3, [r7, #4]
 8003232:	685b      	ldr	r3, [r3, #4]
 8003234:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8003238:	d10c      	bne.n	8003254 <HAL_RCC_OscConfig+0x98>
 800323a:	4b70      	ldr	r3, [pc, #448]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800323c:	681b      	ldr	r3, [r3, #0]
 800323e:	4a6f      	ldr	r2, [pc, #444]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003240:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8003244:	6013      	str	r3, [r2, #0]
 8003246:	4b6d      	ldr	r3, [pc, #436]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003248:	681b      	ldr	r3, [r3, #0]
 800324a:	4a6c      	ldr	r2, [pc, #432]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800324c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8003250:	6013      	str	r3, [r2, #0]
 8003252:	e00b      	b.n	800326c <HAL_RCC_OscConfig+0xb0>
 8003254:	4b69      	ldr	r3, [pc, #420]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003256:	681b      	ldr	r3, [r3, #0]
 8003258:	4a68      	ldr	r2, [pc, #416]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800325a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800325e:	6013      	str	r3, [r2, #0]
 8003260:	4b66      	ldr	r3, [pc, #408]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003262:	681b      	ldr	r3, [r3, #0]
 8003264:	4a65      	ldr	r2, [pc, #404]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003266:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800326a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	685b      	ldr	r3, [r3, #4]
 8003270:	2b00      	cmp	r3, #0
 8003272:	d013      	beq.n	800329c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003274:	f7fe fa06 	bl	8001684 <HAL_GetTick>
 8003278:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800327a:	e008      	b.n	800328e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800327c:	f7fe fa02 	bl	8001684 <HAL_GetTick>
 8003280:	4602      	mov	r2, r0
 8003282:	693b      	ldr	r3, [r7, #16]
 8003284:	1ad3      	subs	r3, r2, r3
 8003286:	2b64      	cmp	r3, #100	; 0x64
 8003288:	d901      	bls.n	800328e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800328a:	2303      	movs	r3, #3
 800328c:	e207      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800328e:	4b5b      	ldr	r3, [pc, #364]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003290:	681b      	ldr	r3, [r3, #0]
 8003292:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003296:	2b00      	cmp	r3, #0
 8003298:	d0f0      	beq.n	800327c <HAL_RCC_OscConfig+0xc0>
 800329a:	e014      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800329c:	f7fe f9f2 	bl	8001684 <HAL_GetTick>
 80032a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032a2:	e008      	b.n	80032b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80032a4:	f7fe f9ee 	bl	8001684 <HAL_GetTick>
 80032a8:	4602      	mov	r2, r0
 80032aa:	693b      	ldr	r3, [r7, #16]
 80032ac:	1ad3      	subs	r3, r2, r3
 80032ae:	2b64      	cmp	r3, #100	; 0x64
 80032b0:	d901      	bls.n	80032b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80032b2:	2303      	movs	r3, #3
 80032b4:	e1f3      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80032b6:	4b51      	ldr	r3, [pc, #324]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d1f0      	bne.n	80032a4 <HAL_RCC_OscConfig+0xe8>
 80032c2:	e000      	b.n	80032c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80032c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	681b      	ldr	r3, [r3, #0]
 80032ca:	f003 0302 	and.w	r3, r3, #2
 80032ce:	2b00      	cmp	r3, #0
 80032d0:	d063      	beq.n	800339a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032d2:	4b4a      	ldr	r3, [pc, #296]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032d4:	689b      	ldr	r3, [r3, #8]
 80032d6:	f003 030c 	and.w	r3, r3, #12
 80032da:	2b00      	cmp	r3, #0
 80032dc:	d00b      	beq.n	80032f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032de:	4b47      	ldr	r3, [pc, #284]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032e0:	689b      	ldr	r3, [r3, #8]
 80032e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80032e6:	2b08      	cmp	r3, #8
 80032e8:	d11c      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80032ea:	4b44      	ldr	r3, [pc, #272]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032ec:	685b      	ldr	r3, [r3, #4]
 80032ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d116      	bne.n	8003324 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80032f6:	4b41      	ldr	r3, [pc, #260]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80032f8:	681b      	ldr	r3, [r3, #0]
 80032fa:	f003 0302 	and.w	r3, r3, #2
 80032fe:	2b00      	cmp	r3, #0
 8003300:	d005      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	68db      	ldr	r3, [r3, #12]
 8003306:	2b01      	cmp	r3, #1
 8003308:	d001      	beq.n	800330e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800330a:	2301      	movs	r3, #1
 800330c:	e1c7      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800330e:	4b3b      	ldr	r3, [pc, #236]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003310:	681b      	ldr	r3, [r3, #0]
 8003312:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003316:	687b      	ldr	r3, [r7, #4]
 8003318:	691b      	ldr	r3, [r3, #16]
 800331a:	00db      	lsls	r3, r3, #3
 800331c:	4937      	ldr	r1, [pc, #220]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800331e:	4313      	orrs	r3, r2
 8003320:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003322:	e03a      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8003324:	687b      	ldr	r3, [r7, #4]
 8003326:	68db      	ldr	r3, [r3, #12]
 8003328:	2b00      	cmp	r3, #0
 800332a:	d020      	beq.n	800336e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800332c:	4b34      	ldr	r3, [pc, #208]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 800332e:	2201      	movs	r2, #1
 8003330:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003332:	f7fe f9a7 	bl	8001684 <HAL_GetTick>
 8003336:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003338:	e008      	b.n	800334c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800333a:	f7fe f9a3 	bl	8001684 <HAL_GetTick>
 800333e:	4602      	mov	r2, r0
 8003340:	693b      	ldr	r3, [r7, #16]
 8003342:	1ad3      	subs	r3, r2, r3
 8003344:	2b02      	cmp	r3, #2
 8003346:	d901      	bls.n	800334c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8003348:	2303      	movs	r3, #3
 800334a:	e1a8      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800334c:	4b2b      	ldr	r3, [pc, #172]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800334e:	681b      	ldr	r3, [r3, #0]
 8003350:	f003 0302 	and.w	r3, r3, #2
 8003354:	2b00      	cmp	r3, #0
 8003356:	d0f0      	beq.n	800333a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8003358:	4b28      	ldr	r3, [pc, #160]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8003360:	687b      	ldr	r3, [r7, #4]
 8003362:	691b      	ldr	r3, [r3, #16]
 8003364:	00db      	lsls	r3, r3, #3
 8003366:	4925      	ldr	r1, [pc, #148]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003368:	4313      	orrs	r3, r2
 800336a:	600b      	str	r3, [r1, #0]
 800336c:	e015      	b.n	800339a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800336e:	4b24      	ldr	r3, [pc, #144]	; (8003400 <HAL_RCC_OscConfig+0x244>)
 8003370:	2200      	movs	r2, #0
 8003372:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003374:	f7fe f986 	bl	8001684 <HAL_GetTick>
 8003378:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800337a:	e008      	b.n	800338e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800337c:	f7fe f982 	bl	8001684 <HAL_GetTick>
 8003380:	4602      	mov	r2, r0
 8003382:	693b      	ldr	r3, [r7, #16]
 8003384:	1ad3      	subs	r3, r2, r3
 8003386:	2b02      	cmp	r3, #2
 8003388:	d901      	bls.n	800338e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800338a:	2303      	movs	r3, #3
 800338c:	e187      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800338e:	4b1b      	ldr	r3, [pc, #108]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f003 0302 	and.w	r3, r3, #2
 8003396:	2b00      	cmp	r3, #0
 8003398:	d1f0      	bne.n	800337c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800339a:	687b      	ldr	r3, [r7, #4]
 800339c:	681b      	ldr	r3, [r3, #0]
 800339e:	f003 0308 	and.w	r3, r3, #8
 80033a2:	2b00      	cmp	r3, #0
 80033a4:	d036      	beq.n	8003414 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80033a6:	687b      	ldr	r3, [r7, #4]
 80033a8:	695b      	ldr	r3, [r3, #20]
 80033aa:	2b00      	cmp	r3, #0
 80033ac:	d016      	beq.n	80033dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80033ae:	4b15      	ldr	r3, [pc, #84]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033b0:	2201      	movs	r2, #1
 80033b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80033b4:	f7fe f966 	bl	8001684 <HAL_GetTick>
 80033b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ba:	e008      	b.n	80033ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033bc:	f7fe f962 	bl	8001684 <HAL_GetTick>
 80033c0:	4602      	mov	r2, r0
 80033c2:	693b      	ldr	r3, [r7, #16]
 80033c4:	1ad3      	subs	r3, r2, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d901      	bls.n	80033ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80033ca:	2303      	movs	r3, #3
 80033cc:	e167      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80033ce:	4b0b      	ldr	r3, [pc, #44]	; (80033fc <HAL_RCC_OscConfig+0x240>)
 80033d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80033d2:	f003 0302 	and.w	r3, r3, #2
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d0f0      	beq.n	80033bc <HAL_RCC_OscConfig+0x200>
 80033da:	e01b      	b.n	8003414 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80033dc:	4b09      	ldr	r3, [pc, #36]	; (8003404 <HAL_RCC_OscConfig+0x248>)
 80033de:	2200      	movs	r2, #0
 80033e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033e2:	f7fe f94f 	bl	8001684 <HAL_GetTick>
 80033e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80033e8:	e00e      	b.n	8003408 <HAL_RCC_OscConfig+0x24c>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80033ea:	f7fe f94b 	bl	8001684 <HAL_GetTick>
 80033ee:	4602      	mov	r2, r0
 80033f0:	693b      	ldr	r3, [r7, #16]
 80033f2:	1ad3      	subs	r3, r2, r3
 80033f4:	2b02      	cmp	r3, #2
 80033f6:	d907      	bls.n	8003408 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 80033f8:	2303      	movs	r3, #3
 80033fa:	e150      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 80033fc:	40023800 	.word	0x40023800
 8003400:	42470000 	.word	0x42470000
 8003404:	42470e80 	.word	0x42470e80
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003408:	4b88      	ldr	r3, [pc, #544]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800340a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800340c:	f003 0302 	and.w	r3, r3, #2
 8003410:	2b00      	cmp	r3, #0
 8003412:	d1ea      	bne.n	80033ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8003414:	687b      	ldr	r3, [r7, #4]
 8003416:	681b      	ldr	r3, [r3, #0]
 8003418:	f003 0304 	and.w	r3, r3, #4
 800341c:	2b00      	cmp	r3, #0
 800341e:	f000 8097 	beq.w	8003550 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8003422:	2300      	movs	r3, #0
 8003424:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8003426:	4b81      	ldr	r3, [pc, #516]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003428:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800342e:	2b00      	cmp	r3, #0
 8003430:	d10f      	bne.n	8003452 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8003432:	2300      	movs	r3, #0
 8003434:	60bb      	str	r3, [r7, #8]
 8003436:	4b7d      	ldr	r3, [pc, #500]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800343a:	4a7c      	ldr	r2, [pc, #496]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800343c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003440:	6413      	str	r3, [r2, #64]	; 0x40
 8003442:	4b7a      	ldr	r3, [pc, #488]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003446:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800344a:	60bb      	str	r3, [r7, #8]
 800344c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800344e:	2301      	movs	r3, #1
 8003450:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003452:	4b77      	ldr	r3, [pc, #476]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800345a:	2b00      	cmp	r3, #0
 800345c:	d118      	bne.n	8003490 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800345e:	4b74      	ldr	r3, [pc, #464]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003460:	681b      	ldr	r3, [r3, #0]
 8003462:	4a73      	ldr	r2, [pc, #460]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003464:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003468:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800346a:	f7fe f90b 	bl	8001684 <HAL_GetTick>
 800346e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003470:	e008      	b.n	8003484 <HAL_RCC_OscConfig+0x2c8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003472:	f7fe f907 	bl	8001684 <HAL_GetTick>
 8003476:	4602      	mov	r2, r0
 8003478:	693b      	ldr	r3, [r7, #16]
 800347a:	1ad3      	subs	r3, r2, r3
 800347c:	2b02      	cmp	r3, #2
 800347e:	d901      	bls.n	8003484 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8003480:	2303      	movs	r3, #3
 8003482:	e10c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003484:	4b6a      	ldr	r3, [pc, #424]	; (8003630 <HAL_RCC_OscConfig+0x474>)
 8003486:	681b      	ldr	r3, [r3, #0]
 8003488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800348c:	2b00      	cmp	r3, #0
 800348e:	d0f0      	beq.n	8003472 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	689b      	ldr	r3, [r3, #8]
 8003494:	2b01      	cmp	r3, #1
 8003496:	d106      	bne.n	80034a6 <HAL_RCC_OscConfig+0x2ea>
 8003498:	4b64      	ldr	r3, [pc, #400]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800349c:	4a63      	ldr	r2, [pc, #396]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800349e:	f043 0301 	orr.w	r3, r3, #1
 80034a2:	6713      	str	r3, [r2, #112]	; 0x70
 80034a4:	e01c      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	689b      	ldr	r3, [r3, #8]
 80034aa:	2b05      	cmp	r3, #5
 80034ac:	d10c      	bne.n	80034c8 <HAL_RCC_OscConfig+0x30c>
 80034ae:	4b5f      	ldr	r3, [pc, #380]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034b2:	4a5e      	ldr	r2, [pc, #376]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034b4:	f043 0304 	orr.w	r3, r3, #4
 80034b8:	6713      	str	r3, [r2, #112]	; 0x70
 80034ba:	4b5c      	ldr	r3, [pc, #368]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034bc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034be:	4a5b      	ldr	r2, [pc, #364]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034c0:	f043 0301 	orr.w	r3, r3, #1
 80034c4:	6713      	str	r3, [r2, #112]	; 0x70
 80034c6:	e00b      	b.n	80034e0 <HAL_RCC_OscConfig+0x324>
 80034c8:	4b58      	ldr	r3, [pc, #352]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ca:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034cc:	4a57      	ldr	r2, [pc, #348]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034ce:	f023 0301 	bic.w	r3, r3, #1
 80034d2:	6713      	str	r3, [r2, #112]	; 0x70
 80034d4:	4b55      	ldr	r3, [pc, #340]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80034d8:	4a54      	ldr	r2, [pc, #336]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80034da:	f023 0304 	bic.w	r3, r3, #4
 80034de:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	689b      	ldr	r3, [r3, #8]
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d015      	beq.n	8003514 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80034e8:	f7fe f8cc 	bl	8001684 <HAL_GetTick>
 80034ec:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80034ee:	e00a      	b.n	8003506 <HAL_RCC_OscConfig+0x34a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80034f0:	f7fe f8c8 	bl	8001684 <HAL_GetTick>
 80034f4:	4602      	mov	r2, r0
 80034f6:	693b      	ldr	r3, [r7, #16]
 80034f8:	1ad3      	subs	r3, r2, r3
 80034fa:	f241 3288 	movw	r2, #5000	; 0x1388
 80034fe:	4293      	cmp	r3, r2
 8003500:	d901      	bls.n	8003506 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8003502:	2303      	movs	r3, #3
 8003504:	e0cb      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003506:	4b49      	ldr	r3, [pc, #292]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003508:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800350a:	f003 0302 	and.w	r3, r3, #2
 800350e:	2b00      	cmp	r3, #0
 8003510:	d0ee      	beq.n	80034f0 <HAL_RCC_OscConfig+0x334>
 8003512:	e014      	b.n	800353e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8003514:	f7fe f8b6 	bl	8001684 <HAL_GetTick>
 8003518:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800351a:	e00a      	b.n	8003532 <HAL_RCC_OscConfig+0x376>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800351c:	f7fe f8b2 	bl	8001684 <HAL_GetTick>
 8003520:	4602      	mov	r2, r0
 8003522:	693b      	ldr	r3, [r7, #16]
 8003524:	1ad3      	subs	r3, r2, r3
 8003526:	f241 3288 	movw	r2, #5000	; 0x1388
 800352a:	4293      	cmp	r3, r2
 800352c:	d901      	bls.n	8003532 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 800352e:	2303      	movs	r3, #3
 8003530:	e0b5      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8003532:	4b3e      	ldr	r3, [pc, #248]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003534:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003536:	f003 0302 	and.w	r3, r3, #2
 800353a:	2b00      	cmp	r3, #0
 800353c:	d1ee      	bne.n	800351c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 800353e:	7dfb      	ldrb	r3, [r7, #23]
 8003540:	2b01      	cmp	r3, #1
 8003542:	d105      	bne.n	8003550 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8003544:	4b39      	ldr	r3, [pc, #228]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003546:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003548:	4a38      	ldr	r2, [pc, #224]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800354a:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 800354e:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8003550:	687b      	ldr	r3, [r7, #4]
 8003552:	699b      	ldr	r3, [r3, #24]
 8003554:	2b00      	cmp	r3, #0
 8003556:	f000 80a1 	beq.w	800369c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800355a:	4b34      	ldr	r3, [pc, #208]	; (800362c <HAL_RCC_OscConfig+0x470>)
 800355c:	689b      	ldr	r3, [r3, #8]
 800355e:	f003 030c 	and.w	r3, r3, #12
 8003562:	2b08      	cmp	r3, #8
 8003564:	d05c      	beq.n	8003620 <HAL_RCC_OscConfig+0x464>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003566:	687b      	ldr	r3, [r7, #4]
 8003568:	699b      	ldr	r3, [r3, #24]
 800356a:	2b02      	cmp	r3, #2
 800356c:	d141      	bne.n	80035f2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800356e:	4b31      	ldr	r3, [pc, #196]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 8003570:	2200      	movs	r2, #0
 8003572:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003574:	f7fe f886 	bl	8001684 <HAL_GetTick>
 8003578:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800357a:	e008      	b.n	800358e <HAL_RCC_OscConfig+0x3d2>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800357c:	f7fe f882 	bl	8001684 <HAL_GetTick>
 8003580:	4602      	mov	r2, r0
 8003582:	693b      	ldr	r3, [r7, #16]
 8003584:	1ad3      	subs	r3, r2, r3
 8003586:	2b02      	cmp	r3, #2
 8003588:	d901      	bls.n	800358e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 800358a:	2303      	movs	r3, #3
 800358c:	e087      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800358e:	4b27      	ldr	r3, [pc, #156]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003596:	2b00      	cmp	r3, #0
 8003598:	d1f0      	bne.n	800357c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800359a:	687b      	ldr	r3, [r7, #4]
 800359c:	69da      	ldr	r2, [r3, #28]
 800359e:	687b      	ldr	r3, [r7, #4]
 80035a0:	6a1b      	ldr	r3, [r3, #32]
 80035a2:	431a      	orrs	r2, r3
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035a8:	019b      	lsls	r3, r3, #6
 80035aa:	431a      	orrs	r2, r3
 80035ac:	687b      	ldr	r3, [r7, #4]
 80035ae:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80035b0:	085b      	lsrs	r3, r3, #1
 80035b2:	3b01      	subs	r3, #1
 80035b4:	041b      	lsls	r3, r3, #16
 80035b6:	431a      	orrs	r2, r3
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80035bc:	061b      	lsls	r3, r3, #24
 80035be:	491b      	ldr	r1, [pc, #108]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035c0:	4313      	orrs	r3, r2
 80035c2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80035c4:	4b1b      	ldr	r3, [pc, #108]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035c6:	2201      	movs	r2, #1
 80035c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035ca:	f7fe f85b 	bl	8001684 <HAL_GetTick>
 80035ce:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035d0:	e008      	b.n	80035e4 <HAL_RCC_OscConfig+0x428>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80035d2:	f7fe f857 	bl	8001684 <HAL_GetTick>
 80035d6:	4602      	mov	r2, r0
 80035d8:	693b      	ldr	r3, [r7, #16]
 80035da:	1ad3      	subs	r3, r2, r3
 80035dc:	2b02      	cmp	r3, #2
 80035de:	d901      	bls.n	80035e4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 80035e0:	2303      	movs	r3, #3
 80035e2:	e05c      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035e4:	4b11      	ldr	r3, [pc, #68]	; (800362c <HAL_RCC_OscConfig+0x470>)
 80035e6:	681b      	ldr	r3, [r3, #0]
 80035e8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035ec:	2b00      	cmp	r3, #0
 80035ee:	d0f0      	beq.n	80035d2 <HAL_RCC_OscConfig+0x416>
 80035f0:	e054      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80035f2:	4b10      	ldr	r3, [pc, #64]	; (8003634 <HAL_RCC_OscConfig+0x478>)
 80035f4:	2200      	movs	r2, #0
 80035f6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80035f8:	f7fe f844 	bl	8001684 <HAL_GetTick>
 80035fc:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80035fe:	e008      	b.n	8003612 <HAL_RCC_OscConfig+0x456>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003600:	f7fe f840 	bl	8001684 <HAL_GetTick>
 8003604:	4602      	mov	r2, r0
 8003606:	693b      	ldr	r3, [r7, #16]
 8003608:	1ad3      	subs	r3, r2, r3
 800360a:	2b02      	cmp	r3, #2
 800360c:	d901      	bls.n	8003612 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 800360e:	2303      	movs	r3, #3
 8003610:	e045      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003612:	4b06      	ldr	r3, [pc, #24]	; (800362c <HAL_RCC_OscConfig+0x470>)
 8003614:	681b      	ldr	r3, [r3, #0]
 8003616:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800361a:	2b00      	cmp	r3, #0
 800361c:	d1f0      	bne.n	8003600 <HAL_RCC_OscConfig+0x444>
 800361e:	e03d      	b.n	800369c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8003620:	687b      	ldr	r3, [r7, #4]
 8003622:	699b      	ldr	r3, [r3, #24]
 8003624:	2b01      	cmp	r3, #1
 8003626:	d107      	bne.n	8003638 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8003628:	2301      	movs	r3, #1
 800362a:	e038      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
 800362c:	40023800 	.word	0x40023800
 8003630:	40007000 	.word	0x40007000
 8003634:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8003638:	4b1b      	ldr	r3, [pc, #108]	; (80036a8 <HAL_RCC_OscConfig+0x4ec>)
 800363a:	685b      	ldr	r3, [r3, #4]
 800363c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800363e:	687b      	ldr	r3, [r7, #4]
 8003640:	699b      	ldr	r3, [r3, #24]
 8003642:	2b01      	cmp	r3, #1
 8003644:	d028      	beq.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800364c:	687b      	ldr	r3, [r7, #4]
 800364e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8003650:	429a      	cmp	r2, r3
 8003652:	d121      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 800365a:	687b      	ldr	r3, [r7, #4]
 800365c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800365e:	429a      	cmp	r2, r3
 8003660:	d11a      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003662:	68fa      	ldr	r2, [r7, #12]
 8003664:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8003668:	4013      	ands	r3, r2
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800366e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8003670:	4293      	cmp	r3, r2
 8003672:	d111      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 800367a:	687b      	ldr	r3, [r7, #4]
 800367c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800367e:	085b      	lsrs	r3, r3, #1
 8003680:	3b01      	subs	r3, #1
 8003682:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8003684:	429a      	cmp	r2, r3
 8003686:	d107      	bne.n	8003698 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8003688:	68fb      	ldr	r3, [r7, #12]
 800368a:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800368e:	687b      	ldr	r3, [r7, #4]
 8003690:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003692:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8003694:	429a      	cmp	r2, r3
 8003696:	d001      	beq.n	800369c <HAL_RCC_OscConfig+0x4e0>
#endif
        {
          return HAL_ERROR;
 8003698:	2301      	movs	r3, #1
 800369a:	e000      	b.n	800369e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 800369c:	2300      	movs	r3, #0
}
 800369e:	4618      	mov	r0, r3
 80036a0:	3718      	adds	r7, #24
 80036a2:	46bd      	mov	sp, r7
 80036a4:	bd80      	pop	{r7, pc}
 80036a6:	bf00      	nop
 80036a8:	40023800 	.word	0x40023800

080036ac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80036ac:	b580      	push	{r7, lr}
 80036ae:	b084      	sub	sp, #16
 80036b0:	af00      	add	r7, sp, #0
 80036b2:	6078      	str	r0, [r7, #4]
 80036b4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2b00      	cmp	r3, #0
 80036ba:	d101      	bne.n	80036c0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80036bc:	2301      	movs	r3, #1
 80036be:	e0cc      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80036c0:	4b68      	ldr	r3, [pc, #416]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036c2:	681b      	ldr	r3, [r3, #0]
 80036c4:	f003 030f 	and.w	r3, r3, #15
 80036c8:	683a      	ldr	r2, [r7, #0]
 80036ca:	429a      	cmp	r2, r3
 80036cc:	d90c      	bls.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80036ce:	4b65      	ldr	r3, [pc, #404]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d0:	683a      	ldr	r2, [r7, #0]
 80036d2:	b2d2      	uxtb	r2, r2
 80036d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80036d6:	4b63      	ldr	r3, [pc, #396]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80036d8:	681b      	ldr	r3, [r3, #0]
 80036da:	f003 030f 	and.w	r3, r3, #15
 80036de:	683a      	ldr	r2, [r7, #0]
 80036e0:	429a      	cmp	r2, r3
 80036e2:	d001      	beq.n	80036e8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80036e4:	2301      	movs	r3, #1
 80036e6:	e0b8      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f003 0302 	and.w	r3, r3, #2
 80036f0:	2b00      	cmp	r3, #0
 80036f2:	d020      	beq.n	8003736 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80036f4:	687b      	ldr	r3, [r7, #4]
 80036f6:	681b      	ldr	r3, [r3, #0]
 80036f8:	f003 0304 	and.w	r3, r3, #4
 80036fc:	2b00      	cmp	r3, #0
 80036fe:	d005      	beq.n	800370c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8003700:	4b59      	ldr	r3, [pc, #356]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003702:	689b      	ldr	r3, [r3, #8]
 8003704:	4a58      	ldr	r2, [pc, #352]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003706:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800370a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800370c:	687b      	ldr	r3, [r7, #4]
 800370e:	681b      	ldr	r3, [r3, #0]
 8003710:	f003 0308 	and.w	r3, r3, #8
 8003714:	2b00      	cmp	r3, #0
 8003716:	d005      	beq.n	8003724 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8003718:	4b53      	ldr	r3, [pc, #332]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371a:	689b      	ldr	r3, [r3, #8]
 800371c:	4a52      	ldr	r2, [pc, #328]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800371e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8003722:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8003724:	4b50      	ldr	r3, [pc, #320]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003726:	689b      	ldr	r3, [r3, #8]
 8003728:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 800372c:	687b      	ldr	r3, [r7, #4]
 800372e:	689b      	ldr	r3, [r3, #8]
 8003730:	494d      	ldr	r1, [pc, #308]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003732:	4313      	orrs	r3, r2
 8003734:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8003736:	687b      	ldr	r3, [r7, #4]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	f003 0301 	and.w	r3, r3, #1
 800373e:	2b00      	cmp	r3, #0
 8003740:	d044      	beq.n	80037cc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8003742:	687b      	ldr	r3, [r7, #4]
 8003744:	685b      	ldr	r3, [r3, #4]
 8003746:	2b01      	cmp	r3, #1
 8003748:	d107      	bne.n	800375a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800374a:	4b47      	ldr	r3, [pc, #284]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003752:	2b00      	cmp	r3, #0
 8003754:	d119      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003756:	2301      	movs	r3, #1
 8003758:	e07f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800375a:	687b      	ldr	r3, [r7, #4]
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	2b02      	cmp	r3, #2
 8003760:	d003      	beq.n	800376a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8003762:	687b      	ldr	r3, [r7, #4]
 8003764:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8003766:	2b03      	cmp	r3, #3
 8003768:	d107      	bne.n	800377a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800376a:	4b3f      	ldr	r3, [pc, #252]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003772:	2b00      	cmp	r3, #0
 8003774:	d109      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003776:	2301      	movs	r3, #1
 8003778:	e06f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800377a:	4b3b      	ldr	r3, [pc, #236]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800377c:	681b      	ldr	r3, [r3, #0]
 800377e:	f003 0302 	and.w	r3, r3, #2
 8003782:	2b00      	cmp	r3, #0
 8003784:	d101      	bne.n	800378a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003786:	2301      	movs	r3, #1
 8003788:	e067      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800378a:	4b37      	ldr	r3, [pc, #220]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800378c:	689b      	ldr	r3, [r3, #8]
 800378e:	f023 0203 	bic.w	r2, r3, #3
 8003792:	687b      	ldr	r3, [r7, #4]
 8003794:	685b      	ldr	r3, [r3, #4]
 8003796:	4934      	ldr	r1, [pc, #208]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003798:	4313      	orrs	r3, r2
 800379a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 800379c:	f7fd ff72 	bl	8001684 <HAL_GetTick>
 80037a0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037a2:	e00a      	b.n	80037ba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80037a4:	f7fd ff6e 	bl	8001684 <HAL_GetTick>
 80037a8:	4602      	mov	r2, r0
 80037aa:	68fb      	ldr	r3, [r7, #12]
 80037ac:	1ad3      	subs	r3, r2, r3
 80037ae:	f241 3288 	movw	r2, #5000	; 0x1388
 80037b2:	4293      	cmp	r3, r2
 80037b4:	d901      	bls.n	80037ba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80037b6:	2303      	movs	r3, #3
 80037b8:	e04f      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80037ba:	4b2b      	ldr	r3, [pc, #172]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 80037bc:	689b      	ldr	r3, [r3, #8]
 80037be:	f003 020c 	and.w	r2, r3, #12
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	685b      	ldr	r3, [r3, #4]
 80037c6:	009b      	lsls	r3, r3, #2
 80037c8:	429a      	cmp	r2, r3
 80037ca:	d1eb      	bne.n	80037a4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80037cc:	4b25      	ldr	r3, [pc, #148]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037ce:	681b      	ldr	r3, [r3, #0]
 80037d0:	f003 030f 	and.w	r3, r3, #15
 80037d4:	683a      	ldr	r2, [r7, #0]
 80037d6:	429a      	cmp	r2, r3
 80037d8:	d20c      	bcs.n	80037f4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80037da:	4b22      	ldr	r3, [pc, #136]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037dc:	683a      	ldr	r2, [r7, #0]
 80037de:	b2d2      	uxtb	r2, r2
 80037e0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80037e2:	4b20      	ldr	r3, [pc, #128]	; (8003864 <HAL_RCC_ClockConfig+0x1b8>)
 80037e4:	681b      	ldr	r3, [r3, #0]
 80037e6:	f003 030f 	and.w	r3, r3, #15
 80037ea:	683a      	ldr	r2, [r7, #0]
 80037ec:	429a      	cmp	r2, r3
 80037ee:	d001      	beq.n	80037f4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80037f0:	2301      	movs	r3, #1
 80037f2:	e032      	b.n	800385a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	f003 0304 	and.w	r3, r3, #4
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d008      	beq.n	8003812 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8003800:	4b19      	ldr	r3, [pc, #100]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003802:	689b      	ldr	r3, [r3, #8]
 8003804:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003808:	687b      	ldr	r3, [r7, #4]
 800380a:	68db      	ldr	r3, [r3, #12]
 800380c:	4916      	ldr	r1, [pc, #88]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800380e:	4313      	orrs	r3, r2
 8003810:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003812:	687b      	ldr	r3, [r7, #4]
 8003814:	681b      	ldr	r3, [r3, #0]
 8003816:	f003 0308 	and.w	r3, r3, #8
 800381a:	2b00      	cmp	r3, #0
 800381c:	d009      	beq.n	8003832 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800381e:	4b12      	ldr	r3, [pc, #72]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 8003820:	689b      	ldr	r3, [r3, #8]
 8003822:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8003826:	687b      	ldr	r3, [r7, #4]
 8003828:	691b      	ldr	r3, [r3, #16]
 800382a:	00db      	lsls	r3, r3, #3
 800382c:	490e      	ldr	r1, [pc, #56]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800382e:	4313      	orrs	r3, r2
 8003830:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8003832:	f000 f821 	bl	8003878 <HAL_RCC_GetSysClockFreq>
 8003836:	4602      	mov	r2, r0
 8003838:	4b0b      	ldr	r3, [pc, #44]	; (8003868 <HAL_RCC_ClockConfig+0x1bc>)
 800383a:	689b      	ldr	r3, [r3, #8]
 800383c:	091b      	lsrs	r3, r3, #4
 800383e:	f003 030f 	and.w	r3, r3, #15
 8003842:	490a      	ldr	r1, [pc, #40]	; (800386c <HAL_RCC_ClockConfig+0x1c0>)
 8003844:	5ccb      	ldrb	r3, [r1, r3]
 8003846:	fa22 f303 	lsr.w	r3, r2, r3
 800384a:	4a09      	ldr	r2, [pc, #36]	; (8003870 <HAL_RCC_ClockConfig+0x1c4>)
 800384c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800384e:	4b09      	ldr	r3, [pc, #36]	; (8003874 <HAL_RCC_ClockConfig+0x1c8>)
 8003850:	681b      	ldr	r3, [r3, #0]
 8003852:	4618      	mov	r0, r3
 8003854:	f7fd fa12 	bl	8000c7c <HAL_InitTick>

  return HAL_OK;
 8003858:	2300      	movs	r3, #0
}
 800385a:	4618      	mov	r0, r3
 800385c:	3710      	adds	r7, #16
 800385e:	46bd      	mov	sp, r7
 8003860:	bd80      	pop	{r7, pc}
 8003862:	bf00      	nop
 8003864:	40023c00 	.word	0x40023c00
 8003868:	40023800 	.word	0x40023800
 800386c:	0801b6a8 	.word	0x0801b6a8
 8003870:	20000000 	.word	0x20000000
 8003874:	20000004 	.word	0x20000004

08003878 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003878:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800387c:	b090      	sub	sp, #64	; 0x40
 800387e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8003880:	2300      	movs	r3, #0
 8003882:	637b      	str	r3, [r7, #52]	; 0x34
 8003884:	2300      	movs	r3, #0
 8003886:	63fb      	str	r3, [r7, #60]	; 0x3c
 8003888:	2300      	movs	r3, #0
 800388a:	633b      	str	r3, [r7, #48]	; 0x30
  uint32_t sysclockfreq = 0U;
 800388c:	2300      	movs	r3, #0
 800388e:	63bb      	str	r3, [r7, #56]	; 0x38

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8003890:	4b59      	ldr	r3, [pc, #356]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003892:	689b      	ldr	r3, [r3, #8]
 8003894:	f003 030c 	and.w	r3, r3, #12
 8003898:	2b08      	cmp	r3, #8
 800389a:	d00d      	beq.n	80038b8 <HAL_RCC_GetSysClockFreq+0x40>
 800389c:	2b08      	cmp	r3, #8
 800389e:	f200 80a1 	bhi.w	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d002      	beq.n	80038ac <HAL_RCC_GetSysClockFreq+0x34>
 80038a6:	2b04      	cmp	r3, #4
 80038a8:	d003      	beq.n	80038b2 <HAL_RCC_GetSysClockFreq+0x3a>
 80038aa:	e09b      	b.n	80039e4 <HAL_RCC_GetSysClockFreq+0x16c>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80038ac:	4b53      	ldr	r3, [pc, #332]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80038ae:	63bb      	str	r3, [r7, #56]	; 0x38
       break;
 80038b0:	e09b      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80038b2:	4b53      	ldr	r3, [pc, #332]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038b4:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80038b6:	e098      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80038b8:	4b4f      	ldr	r3, [pc, #316]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038ba:	685b      	ldr	r3, [r3, #4]
 80038bc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80038c0:	637b      	str	r3, [r7, #52]	; 0x34
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80038c2:	4b4d      	ldr	r3, [pc, #308]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038c4:	685b      	ldr	r3, [r3, #4]
 80038c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80038ca:	2b00      	cmp	r3, #0
 80038cc:	d028      	beq.n	8003920 <HAL_RCC_GetSysClockFreq+0xa8>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80038ce:	4b4a      	ldr	r3, [pc, #296]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80038d0:	685b      	ldr	r3, [r3, #4]
 80038d2:	099b      	lsrs	r3, r3, #6
 80038d4:	2200      	movs	r2, #0
 80038d6:	623b      	str	r3, [r7, #32]
 80038d8:	627a      	str	r2, [r7, #36]	; 0x24
 80038da:	6a3b      	ldr	r3, [r7, #32]
 80038dc:	f3c3 0008 	ubfx	r0, r3, #0, #9
 80038e0:	2100      	movs	r1, #0
 80038e2:	4b47      	ldr	r3, [pc, #284]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038e4:	fb03 f201 	mul.w	r2, r3, r1
 80038e8:	2300      	movs	r3, #0
 80038ea:	fb00 f303 	mul.w	r3, r0, r3
 80038ee:	4413      	add	r3, r2
 80038f0:	4a43      	ldr	r2, [pc, #268]	; (8003a00 <HAL_RCC_GetSysClockFreq+0x188>)
 80038f2:	fba0 1202 	umull	r1, r2, r0, r2
 80038f6:	62fa      	str	r2, [r7, #44]	; 0x2c
 80038f8:	460a      	mov	r2, r1
 80038fa:	62ba      	str	r2, [r7, #40]	; 0x28
 80038fc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 80038fe:	4413      	add	r3, r2
 8003900:	62fb      	str	r3, [r7, #44]	; 0x2c
 8003902:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8003904:	2200      	movs	r2, #0
 8003906:	61bb      	str	r3, [r7, #24]
 8003908:	61fa      	str	r2, [r7, #28]
 800390a:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800390e:	e9d7 010a 	ldrd	r0, r1, [r7, #40]	; 0x28
 8003912:	f7fc fcd5 	bl	80002c0 <__aeabi_uldivmod>
 8003916:	4602      	mov	r2, r0
 8003918:	460b      	mov	r3, r1
 800391a:	4613      	mov	r3, r2
 800391c:	63fb      	str	r3, [r7, #60]	; 0x3c
 800391e:	e053      	b.n	80039c8 <HAL_RCC_GetSysClockFreq+0x150>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8003920:	4b35      	ldr	r3, [pc, #212]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 8003922:	685b      	ldr	r3, [r3, #4]
 8003924:	099b      	lsrs	r3, r3, #6
 8003926:	2200      	movs	r2, #0
 8003928:	613b      	str	r3, [r7, #16]
 800392a:	617a      	str	r2, [r7, #20]
 800392c:	693b      	ldr	r3, [r7, #16]
 800392e:	f3c3 0a08 	ubfx	sl, r3, #0, #9
 8003932:	f04f 0b00 	mov.w	fp, #0
 8003936:	4652      	mov	r2, sl
 8003938:	465b      	mov	r3, fp
 800393a:	f04f 0000 	mov.w	r0, #0
 800393e:	f04f 0100 	mov.w	r1, #0
 8003942:	0159      	lsls	r1, r3, #5
 8003944:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8003948:	0150      	lsls	r0, r2, #5
 800394a:	4602      	mov	r2, r0
 800394c:	460b      	mov	r3, r1
 800394e:	ebb2 080a 	subs.w	r8, r2, sl
 8003952:	eb63 090b 	sbc.w	r9, r3, fp
 8003956:	f04f 0200 	mov.w	r2, #0
 800395a:	f04f 0300 	mov.w	r3, #0
 800395e:	ea4f 1389 	mov.w	r3, r9, lsl #6
 8003962:	ea43 6398 	orr.w	r3, r3, r8, lsr #26
 8003966:	ea4f 1288 	mov.w	r2, r8, lsl #6
 800396a:	ebb2 0408 	subs.w	r4, r2, r8
 800396e:	eb63 0509 	sbc.w	r5, r3, r9
 8003972:	f04f 0200 	mov.w	r2, #0
 8003976:	f04f 0300 	mov.w	r3, #0
 800397a:	00eb      	lsls	r3, r5, #3
 800397c:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8003980:	00e2      	lsls	r2, r4, #3
 8003982:	4614      	mov	r4, r2
 8003984:	461d      	mov	r5, r3
 8003986:	eb14 030a 	adds.w	r3, r4, sl
 800398a:	603b      	str	r3, [r7, #0]
 800398c:	eb45 030b 	adc.w	r3, r5, fp
 8003990:	607b      	str	r3, [r7, #4]
 8003992:	f04f 0200 	mov.w	r2, #0
 8003996:	f04f 0300 	mov.w	r3, #0
 800399a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800399e:	4629      	mov	r1, r5
 80039a0:	028b      	lsls	r3, r1, #10
 80039a2:	4621      	mov	r1, r4
 80039a4:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80039a8:	4621      	mov	r1, r4
 80039aa:	028a      	lsls	r2, r1, #10
 80039ac:	4610      	mov	r0, r2
 80039ae:	4619      	mov	r1, r3
 80039b0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80039b2:	2200      	movs	r2, #0
 80039b4:	60bb      	str	r3, [r7, #8]
 80039b6:	60fa      	str	r2, [r7, #12]
 80039b8:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80039bc:	f7fc fc80 	bl	80002c0 <__aeabi_uldivmod>
 80039c0:	4602      	mov	r2, r0
 80039c2:	460b      	mov	r3, r1
 80039c4:	4613      	mov	r3, r2
 80039c6:	63fb      	str	r3, [r7, #60]	; 0x3c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80039c8:	4b0b      	ldr	r3, [pc, #44]	; (80039f8 <HAL_RCC_GetSysClockFreq+0x180>)
 80039ca:	685b      	ldr	r3, [r3, #4]
 80039cc:	0c1b      	lsrs	r3, r3, #16
 80039ce:	f003 0303 	and.w	r3, r3, #3
 80039d2:	3301      	adds	r3, #1
 80039d4:	005b      	lsls	r3, r3, #1
 80039d6:	633b      	str	r3, [r7, #48]	; 0x30

      sysclockfreq = pllvco/pllp;
 80039d8:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 80039da:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80039dc:	fbb2 f3f3 	udiv	r3, r2, r3
 80039e0:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e2:	e002      	b.n	80039ea <HAL_RCC_GetSysClockFreq+0x172>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80039e4:	4b05      	ldr	r3, [pc, #20]	; (80039fc <HAL_RCC_GetSysClockFreq+0x184>)
 80039e6:	63bb      	str	r3, [r7, #56]	; 0x38
      break;
 80039e8:	bf00      	nop
    }
  }
  return sysclockfreq;
 80039ea:	6bbb      	ldr	r3, [r7, #56]	; 0x38
}
 80039ec:	4618      	mov	r0, r3
 80039ee:	3740      	adds	r7, #64	; 0x40
 80039f0:	46bd      	mov	sp, r7
 80039f2:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80039f6:	bf00      	nop
 80039f8:	40023800 	.word	0x40023800
 80039fc:	00f42400 	.word	0x00f42400
 8003a00:	017d7840 	.word	0x017d7840

08003a04 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8003a04:	b480      	push	{r7}
 8003a06:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8003a08:	4b03      	ldr	r3, [pc, #12]	; (8003a18 <HAL_RCC_GetHCLKFreq+0x14>)
 8003a0a:	681b      	ldr	r3, [r3, #0]
}
 8003a0c:	4618      	mov	r0, r3
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr
 8003a16:	bf00      	nop
 8003a18:	20000000 	.word	0x20000000

08003a1c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8003a20:	f7ff fff0 	bl	8003a04 <HAL_RCC_GetHCLKFreq>
 8003a24:	4602      	mov	r2, r0
 8003a26:	4b05      	ldr	r3, [pc, #20]	; (8003a3c <HAL_RCC_GetPCLK1Freq+0x20>)
 8003a28:	689b      	ldr	r3, [r3, #8]
 8003a2a:	0a9b      	lsrs	r3, r3, #10
 8003a2c:	f003 0307 	and.w	r3, r3, #7
 8003a30:	4903      	ldr	r1, [pc, #12]	; (8003a40 <HAL_RCC_GetPCLK1Freq+0x24>)
 8003a32:	5ccb      	ldrb	r3, [r1, r3]
 8003a34:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	bd80      	pop	{r7, pc}
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	0801b6b8 	.word	0x0801b6b8

08003a44 <HAL_RCC_GetClockConfig>:
  * will be configured.
  * @param  pFLatency Pointer on the Flash Latency.
  * @retval None
  */
void HAL_RCC_GetClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t *pFLatency)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b083      	sub	sp, #12
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	6078      	str	r0, [r7, #4]
 8003a4c:	6039      	str	r1, [r7, #0]
  /* Set all possible values for the Clock type parameter --------------------*/
  RCC_ClkInitStruct->ClockType = RCC_CLOCKTYPE_SYSCLK | RCC_CLOCKTYPE_HCLK | RCC_CLOCKTYPE_PCLK1 | RCC_CLOCKTYPE_PCLK2;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	220f      	movs	r2, #15
 8003a52:	601a      	str	r2, [r3, #0]

  /* Get the SYSCLK configuration --------------------------------------------*/
  RCC_ClkInitStruct->SYSCLKSource = (uint32_t)(RCC->CFGR & RCC_CFGR_SW);
 8003a54:	4b12      	ldr	r3, [pc, #72]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a56:	689b      	ldr	r3, [r3, #8]
 8003a58:	f003 0203 	and.w	r2, r3, #3
 8003a5c:	687b      	ldr	r3, [r7, #4]
 8003a5e:	605a      	str	r2, [r3, #4]

  /* Get the HCLK configuration ----------------------------------------------*/
  RCC_ClkInitStruct->AHBCLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_HPRE);
 8003a60:	4b0f      	ldr	r3, [pc, #60]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a62:	689b      	ldr	r3, [r3, #8]
 8003a64:	f003 02f0 	and.w	r2, r3, #240	; 0xf0
 8003a68:	687b      	ldr	r3, [r7, #4]
 8003a6a:	609a      	str	r2, [r3, #8]

  /* Get the APB1 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB1CLKDivider = (uint32_t)(RCC->CFGR & RCC_CFGR_PPRE1);
 8003a6c:	4b0c      	ldr	r3, [pc, #48]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a6e:	689b      	ldr	r3, [r3, #8]
 8003a70:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a74:	687b      	ldr	r3, [r7, #4]
 8003a76:	60da      	str	r2, [r3, #12]

  /* Get the APB2 configuration ----------------------------------------------*/
  RCC_ClkInitStruct->APB2CLKDivider = (uint32_t)((RCC->CFGR & RCC_CFGR_PPRE2) >> 3U);
 8003a78:	4b09      	ldr	r3, [pc, #36]	; (8003aa0 <HAL_RCC_GetClockConfig+0x5c>)
 8003a7a:	689b      	ldr	r3, [r3, #8]
 8003a7c:	08db      	lsrs	r3, r3, #3
 8003a7e:	f403 52e0 	and.w	r2, r3, #7168	; 0x1c00
 8003a82:	687b      	ldr	r3, [r7, #4]
 8003a84:	611a      	str	r2, [r3, #16]

  /* Get the Flash Wait State (Latency) configuration ------------------------*/
  *pFLatency = (uint32_t)(FLASH->ACR & FLASH_ACR_LATENCY);
 8003a86:	4b07      	ldr	r3, [pc, #28]	; (8003aa4 <HAL_RCC_GetClockConfig+0x60>)
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	f003 020f 	and.w	r2, r3, #15
 8003a8e:	683b      	ldr	r3, [r7, #0]
 8003a90:	601a      	str	r2, [r3, #0]
}
 8003a92:	bf00      	nop
 8003a94:	370c      	adds	r7, #12
 8003a96:	46bd      	mov	sp, r7
 8003a98:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9c:	4770      	bx	lr
 8003a9e:	bf00      	nop
 8003aa0:	40023800 	.word	0x40023800
 8003aa4:	40023c00 	.word	0x40023c00

08003aa8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003aa8:	b580      	push	{r7, lr}
 8003aaa:	b082      	sub	sp, #8
 8003aac:	af00      	add	r7, sp, #0
 8003aae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003ab0:	687b      	ldr	r3, [r7, #4]
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d101      	bne.n	8003aba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e041      	b.n	8003b3e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003ac0:	b2db      	uxtb	r3, r3
 8003ac2:	2b00      	cmp	r3, #0
 8003ac4:	d106      	bne.n	8003ad4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003ac6:	687b      	ldr	r3, [r7, #4]
 8003ac8:	2200      	movs	r2, #0
 8003aca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003ace:	6878      	ldr	r0, [r7, #4]
 8003ad0:	f7fd f872 	bl	8000bb8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003ad4:	687b      	ldr	r3, [r7, #4]
 8003ad6:	2202      	movs	r2, #2
 8003ad8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	681a      	ldr	r2, [r3, #0]
 8003ae0:	687b      	ldr	r3, [r7, #4]
 8003ae2:	3304      	adds	r3, #4
 8003ae4:	4619      	mov	r1, r3
 8003ae6:	4610      	mov	r0, r2
 8003ae8:	f000 fce2 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003aec:	687b      	ldr	r3, [r7, #4]
 8003aee:	2201      	movs	r2, #1
 8003af0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003af4:	687b      	ldr	r3, [r7, #4]
 8003af6:	2201      	movs	r2, #1
 8003af8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003afc:	687b      	ldr	r3, [r7, #4]
 8003afe:	2201      	movs	r2, #1
 8003b00:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2201      	movs	r2, #1
 8003b08:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003b0c:	687b      	ldr	r3, [r7, #4]
 8003b0e:	2201      	movs	r2, #1
 8003b10:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003b14:	687b      	ldr	r3, [r7, #4]
 8003b16:	2201      	movs	r2, #1
 8003b18:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003b1c:	687b      	ldr	r3, [r7, #4]
 8003b1e:	2201      	movs	r2, #1
 8003b20:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003b24:	687b      	ldr	r3, [r7, #4]
 8003b26:	2201      	movs	r2, #1
 8003b28:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	2201      	movs	r2, #1
 8003b30:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003b34:	687b      	ldr	r3, [r7, #4]
 8003b36:	2201      	movs	r2, #1
 8003b38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003b3c:	2300      	movs	r3, #0
}
 8003b3e:	4618      	mov	r0, r3
 8003b40:	3708      	adds	r7, #8
 8003b42:	46bd      	mov	sp, r7
 8003b44:	bd80      	pop	{r7, pc}
	...

08003b48 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b085      	sub	sp, #20
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003b50:	687b      	ldr	r3, [r7, #4]
 8003b52:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b56:	b2db      	uxtb	r3, r3
 8003b58:	2b01      	cmp	r3, #1
 8003b5a:	d001      	beq.n	8003b60 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8003b5c:	2301      	movs	r3, #1
 8003b5e:	e046      	b.n	8003bee <HAL_TIM_Base_Start+0xa6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	2202      	movs	r2, #2
 8003b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003b68:	687b      	ldr	r3, [r7, #4]
 8003b6a:	681b      	ldr	r3, [r3, #0]
 8003b6c:	4a23      	ldr	r2, [pc, #140]	; (8003bfc <HAL_TIM_Base_Start+0xb4>)
 8003b6e:	4293      	cmp	r3, r2
 8003b70:	d022      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003b72:	687b      	ldr	r3, [r7, #4]
 8003b74:	681b      	ldr	r3, [r3, #0]
 8003b76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003b7a:	d01d      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	681b      	ldr	r3, [r3, #0]
 8003b80:	4a1f      	ldr	r2, [pc, #124]	; (8003c00 <HAL_TIM_Base_Start+0xb8>)
 8003b82:	4293      	cmp	r3, r2
 8003b84:	d018      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003b86:	687b      	ldr	r3, [r7, #4]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	4a1e      	ldr	r2, [pc, #120]	; (8003c04 <HAL_TIM_Base_Start+0xbc>)
 8003b8c:	4293      	cmp	r3, r2
 8003b8e:	d013      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003b90:	687b      	ldr	r3, [r7, #4]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	4a1c      	ldr	r2, [pc, #112]	; (8003c08 <HAL_TIM_Base_Start+0xc0>)
 8003b96:	4293      	cmp	r3, r2
 8003b98:	d00e      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003b9a:	687b      	ldr	r3, [r7, #4]
 8003b9c:	681b      	ldr	r3, [r3, #0]
 8003b9e:	4a1b      	ldr	r2, [pc, #108]	; (8003c0c <HAL_TIM_Base_Start+0xc4>)
 8003ba0:	4293      	cmp	r3, r2
 8003ba2:	d009      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a19      	ldr	r2, [pc, #100]	; (8003c10 <HAL_TIM_Base_Start+0xc8>)
 8003baa:	4293      	cmp	r3, r2
 8003bac:	d004      	beq.n	8003bb8 <HAL_TIM_Base_Start+0x70>
 8003bae:	687b      	ldr	r3, [r7, #4]
 8003bb0:	681b      	ldr	r3, [r3, #0]
 8003bb2:	4a18      	ldr	r2, [pc, #96]	; (8003c14 <HAL_TIM_Base_Start+0xcc>)
 8003bb4:	4293      	cmp	r3, r2
 8003bb6:	d111      	bne.n	8003bdc <HAL_TIM_Base_Start+0x94>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003bb8:	687b      	ldr	r3, [r7, #4]
 8003bba:	681b      	ldr	r3, [r3, #0]
 8003bbc:	689b      	ldr	r3, [r3, #8]
 8003bbe:	f003 0307 	and.w	r3, r3, #7
 8003bc2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	2b06      	cmp	r3, #6
 8003bc8:	d010      	beq.n	8003bec <HAL_TIM_Base_Start+0xa4>
    {
      __HAL_TIM_ENABLE(htim);
 8003bca:	687b      	ldr	r3, [r7, #4]
 8003bcc:	681b      	ldr	r3, [r3, #0]
 8003bce:	681a      	ldr	r2, [r3, #0]
 8003bd0:	687b      	ldr	r3, [r7, #4]
 8003bd2:	681b      	ldr	r3, [r3, #0]
 8003bd4:	f042 0201 	orr.w	r2, r2, #1
 8003bd8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003bda:	e007      	b.n	8003bec <HAL_TIM_Base_Start+0xa4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f042 0201 	orr.w	r2, r2, #1
 8003bea:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003bec:	2300      	movs	r3, #0
}
 8003bee:	4618      	mov	r0, r3
 8003bf0:	3714      	adds	r7, #20
 8003bf2:	46bd      	mov	sp, r7
 8003bf4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bf8:	4770      	bx	lr
 8003bfa:	bf00      	nop
 8003bfc:	40010000 	.word	0x40010000
 8003c00:	40000400 	.word	0x40000400
 8003c04:	40000800 	.word	0x40000800
 8003c08:	40000c00 	.word	0x40000c00
 8003c0c:	40010400 	.word	0x40010400
 8003c10:	40014000 	.word	0x40014000
 8003c14:	40001800 	.word	0x40001800

08003c18 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b085      	sub	sp, #20
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c26:	b2db      	uxtb	r3, r3
 8003c28:	2b01      	cmp	r3, #1
 8003c2a:	d001      	beq.n	8003c30 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8003c2c:	2301      	movs	r3, #1
 8003c2e:	e04e      	b.n	8003cce <HAL_TIM_Base_Start_IT+0xb6>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	2202      	movs	r2, #2
 8003c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8003c38:	687b      	ldr	r3, [r7, #4]
 8003c3a:	681b      	ldr	r3, [r3, #0]
 8003c3c:	68da      	ldr	r2, [r3, #12]
 8003c3e:	687b      	ldr	r3, [r7, #4]
 8003c40:	681b      	ldr	r3, [r3, #0]
 8003c42:	f042 0201 	orr.w	r2, r2, #1
 8003c46:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003c48:	687b      	ldr	r3, [r7, #4]
 8003c4a:	681b      	ldr	r3, [r3, #0]
 8003c4c:	4a23      	ldr	r2, [pc, #140]	; (8003cdc <HAL_TIM_Base_Start_IT+0xc4>)
 8003c4e:	4293      	cmp	r3, r2
 8003c50:	d022      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c52:	687b      	ldr	r3, [r7, #4]
 8003c54:	681b      	ldr	r3, [r3, #0]
 8003c56:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003c5a:	d01d      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c5c:	687b      	ldr	r3, [r7, #4]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a1f      	ldr	r2, [pc, #124]	; (8003ce0 <HAL_TIM_Base_Start_IT+0xc8>)
 8003c62:	4293      	cmp	r3, r2
 8003c64:	d018      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c66:	687b      	ldr	r3, [r7, #4]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	4a1e      	ldr	r2, [pc, #120]	; (8003ce4 <HAL_TIM_Base_Start_IT+0xcc>)
 8003c6c:	4293      	cmp	r3, r2
 8003c6e:	d013      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	681b      	ldr	r3, [r3, #0]
 8003c74:	4a1c      	ldr	r2, [pc, #112]	; (8003ce8 <HAL_TIM_Base_Start_IT+0xd0>)
 8003c76:	4293      	cmp	r3, r2
 8003c78:	d00e      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	681b      	ldr	r3, [r3, #0]
 8003c7e:	4a1b      	ldr	r2, [pc, #108]	; (8003cec <HAL_TIM_Base_Start_IT+0xd4>)
 8003c80:	4293      	cmp	r3, r2
 8003c82:	d009      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	4a19      	ldr	r2, [pc, #100]	; (8003cf0 <HAL_TIM_Base_Start_IT+0xd8>)
 8003c8a:	4293      	cmp	r3, r2
 8003c8c:	d004      	beq.n	8003c98 <HAL_TIM_Base_Start_IT+0x80>
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	4a18      	ldr	r2, [pc, #96]	; (8003cf4 <HAL_TIM_Base_Start_IT+0xdc>)
 8003c94:	4293      	cmp	r3, r2
 8003c96:	d111      	bne.n	8003cbc <HAL_TIM_Base_Start_IT+0xa4>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	681b      	ldr	r3, [r3, #0]
 8003c9c:	689b      	ldr	r3, [r3, #8]
 8003c9e:	f003 0307 	and.w	r3, r3, #7
 8003ca2:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2b06      	cmp	r3, #6
 8003ca8:	d010      	beq.n	8003ccc <HAL_TIM_Base_Start_IT+0xb4>
    {
      __HAL_TIM_ENABLE(htim);
 8003caa:	687b      	ldr	r3, [r7, #4]
 8003cac:	681b      	ldr	r3, [r3, #0]
 8003cae:	681a      	ldr	r2, [r3, #0]
 8003cb0:	687b      	ldr	r3, [r7, #4]
 8003cb2:	681b      	ldr	r3, [r3, #0]
 8003cb4:	f042 0201 	orr.w	r2, r2, #1
 8003cb8:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003cba:	e007      	b.n	8003ccc <HAL_TIM_Base_Start_IT+0xb4>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	681b      	ldr	r3, [r3, #0]
 8003cc0:	681a      	ldr	r2, [r3, #0]
 8003cc2:	687b      	ldr	r3, [r7, #4]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	f042 0201 	orr.w	r2, r2, #1
 8003cca:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ccc:	2300      	movs	r3, #0
}
 8003cce:	4618      	mov	r0, r3
 8003cd0:	3714      	adds	r7, #20
 8003cd2:	46bd      	mov	sp, r7
 8003cd4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cd8:	4770      	bx	lr
 8003cda:	bf00      	nop
 8003cdc:	40010000 	.word	0x40010000
 8003ce0:	40000400 	.word	0x40000400
 8003ce4:	40000800 	.word	0x40000800
 8003ce8:	40000c00 	.word	0x40000c00
 8003cec:	40010400 	.word	0x40010400
 8003cf0:	40014000 	.word	0x40014000
 8003cf4:	40001800 	.word	0x40001800

08003cf8 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003cf8:	b580      	push	{r7, lr}
 8003cfa:	b082      	sub	sp, #8
 8003cfc:	af00      	add	r7, sp, #0
 8003cfe:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	2b00      	cmp	r3, #0
 8003d04:	d101      	bne.n	8003d0a <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003d06:	2301      	movs	r3, #1
 8003d08:	e041      	b.n	8003d8e <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003d0a:	687b      	ldr	r3, [r7, #4]
 8003d0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d10:	b2db      	uxtb	r3, r3
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d106      	bne.n	8003d24 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003d16:	687b      	ldr	r3, [r7, #4]
 8003d18:	2200      	movs	r2, #0
 8003d1a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003d1e:	6878      	ldr	r0, [r7, #4]
 8003d20:	f000 f839 	bl	8003d96 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003d24:	687b      	ldr	r3, [r7, #4]
 8003d26:	2202      	movs	r2, #2
 8003d28:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003d2c:	687b      	ldr	r3, [r7, #4]
 8003d2e:	681a      	ldr	r2, [r3, #0]
 8003d30:	687b      	ldr	r3, [r7, #4]
 8003d32:	3304      	adds	r3, #4
 8003d34:	4619      	mov	r1, r3
 8003d36:	4610      	mov	r0, r2
 8003d38:	f000 fbba 	bl	80044b0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8003d3c:	687b      	ldr	r3, [r7, #4]
 8003d3e:	2201      	movs	r2, #1
 8003d40:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	2201      	movs	r2, #1
 8003d48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003d4c:	687b      	ldr	r3, [r7, #4]
 8003d4e:	2201      	movs	r2, #1
 8003d50:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	2201      	movs	r2, #1
 8003d58:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003d5c:	687b      	ldr	r3, [r7, #4]
 8003d5e:	2201      	movs	r2, #1
 8003d60:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	2201      	movs	r2, #1
 8003d68:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8003d6c:	687b      	ldr	r3, [r7, #4]
 8003d6e:	2201      	movs	r2, #1
 8003d70:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	2201      	movs	r2, #1
 8003d78:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	2201      	movs	r2, #1
 8003d80:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003d84:	687b      	ldr	r3, [r7, #4]
 8003d86:	2201      	movs	r2, #1
 8003d88:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003d8c:	2300      	movs	r3, #0
}
 8003d8e:	4618      	mov	r0, r3
 8003d90:	3708      	adds	r7, #8
 8003d92:	46bd      	mov	sp, r7
 8003d94:	bd80      	pop	{r7, pc}

08003d96 <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003d96:	b480      	push	{r7}
 8003d98:	b083      	sub	sp, #12
 8003d9a:	af00      	add	r7, sp, #0
 8003d9c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003d9e:	bf00      	nop
 8003da0:	370c      	adds	r7, #12
 8003da2:	46bd      	mov	sp, r7
 8003da4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003da8:	4770      	bx	lr
	...

08003dac <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003dac:	b580      	push	{r7, lr}
 8003dae:	b084      	sub	sp, #16
 8003db0:	af00      	add	r7, sp, #0
 8003db2:	6078      	str	r0, [r7, #4]
 8003db4:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8003db6:	683b      	ldr	r3, [r7, #0]
 8003db8:	2b00      	cmp	r3, #0
 8003dba:	d109      	bne.n	8003dd0 <HAL_TIM_PWM_Start+0x24>
 8003dbc:	687b      	ldr	r3, [r7, #4]
 8003dbe:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003dc2:	b2db      	uxtb	r3, r3
 8003dc4:	2b01      	cmp	r3, #1
 8003dc6:	bf14      	ite	ne
 8003dc8:	2301      	movne	r3, #1
 8003dca:	2300      	moveq	r3, #0
 8003dcc:	b2db      	uxtb	r3, r3
 8003dce:	e022      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003dd0:	683b      	ldr	r3, [r7, #0]
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d109      	bne.n	8003dea <HAL_TIM_PWM_Start+0x3e>
 8003dd6:	687b      	ldr	r3, [r7, #4]
 8003dd8:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8003ddc:	b2db      	uxtb	r3, r3
 8003dde:	2b01      	cmp	r3, #1
 8003de0:	bf14      	ite	ne
 8003de2:	2301      	movne	r3, #1
 8003de4:	2300      	moveq	r3, #0
 8003de6:	b2db      	uxtb	r3, r3
 8003de8:	e015      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003dea:	683b      	ldr	r3, [r7, #0]
 8003dec:	2b08      	cmp	r3, #8
 8003dee:	d109      	bne.n	8003e04 <HAL_TIM_PWM_Start+0x58>
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8003df6:	b2db      	uxtb	r3, r3
 8003df8:	2b01      	cmp	r3, #1
 8003dfa:	bf14      	ite	ne
 8003dfc:	2301      	movne	r3, #1
 8003dfe:	2300      	moveq	r3, #0
 8003e00:	b2db      	uxtb	r3, r3
 8003e02:	e008      	b.n	8003e16 <HAL_TIM_PWM_Start+0x6a>
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8003e0a:	b2db      	uxtb	r3, r3
 8003e0c:	2b01      	cmp	r3, #1
 8003e0e:	bf14      	ite	ne
 8003e10:	2301      	movne	r3, #1
 8003e12:	2300      	moveq	r3, #0
 8003e14:	b2db      	uxtb	r3, r3
 8003e16:	2b00      	cmp	r3, #0
 8003e18:	d001      	beq.n	8003e1e <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8003e1a:	2301      	movs	r3, #1
 8003e1c:	e07c      	b.n	8003f18 <HAL_TIM_PWM_Start+0x16c>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8003e1e:	683b      	ldr	r3, [r7, #0]
 8003e20:	2b00      	cmp	r3, #0
 8003e22:	d104      	bne.n	8003e2e <HAL_TIM_PWM_Start+0x82>
 8003e24:	687b      	ldr	r3, [r7, #4]
 8003e26:	2202      	movs	r2, #2
 8003e28:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8003e2c:	e013      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e2e:	683b      	ldr	r3, [r7, #0]
 8003e30:	2b04      	cmp	r3, #4
 8003e32:	d104      	bne.n	8003e3e <HAL_TIM_PWM_Start+0x92>
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	2202      	movs	r2, #2
 8003e38:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8003e3c:	e00b      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e3e:	683b      	ldr	r3, [r7, #0]
 8003e40:	2b08      	cmp	r3, #8
 8003e42:	d104      	bne.n	8003e4e <HAL_TIM_PWM_Start+0xa2>
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	2202      	movs	r2, #2
 8003e48:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8003e4c:	e003      	b.n	8003e56 <HAL_TIM_PWM_Start+0xaa>
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	2202      	movs	r2, #2
 8003e52:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	681b      	ldr	r3, [r3, #0]
 8003e5a:	2201      	movs	r2, #1
 8003e5c:	6839      	ldr	r1, [r7, #0]
 8003e5e:	4618      	mov	r0, r3
 8003e60:	f000 fe10 	bl	8004a84 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003e64:	687b      	ldr	r3, [r7, #4]
 8003e66:	681b      	ldr	r3, [r3, #0]
 8003e68:	4a2d      	ldr	r2, [pc, #180]	; (8003f20 <HAL_TIM_PWM_Start+0x174>)
 8003e6a:	4293      	cmp	r3, r2
 8003e6c:	d004      	beq.n	8003e78 <HAL_TIM_PWM_Start+0xcc>
 8003e6e:	687b      	ldr	r3, [r7, #4]
 8003e70:	681b      	ldr	r3, [r3, #0]
 8003e72:	4a2c      	ldr	r2, [pc, #176]	; (8003f24 <HAL_TIM_PWM_Start+0x178>)
 8003e74:	4293      	cmp	r3, r2
 8003e76:	d101      	bne.n	8003e7c <HAL_TIM_PWM_Start+0xd0>
 8003e78:	2301      	movs	r3, #1
 8003e7a:	e000      	b.n	8003e7e <HAL_TIM_PWM_Start+0xd2>
 8003e7c:	2300      	movs	r3, #0
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d007      	beq.n	8003e92 <HAL_TIM_PWM_Start+0xe6>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003e82:	687b      	ldr	r3, [r7, #4]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	681b      	ldr	r3, [r3, #0]
 8003e8c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003e90:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	681b      	ldr	r3, [r3, #0]
 8003e96:	4a22      	ldr	r2, [pc, #136]	; (8003f20 <HAL_TIM_PWM_Start+0x174>)
 8003e98:	4293      	cmp	r3, r2
 8003e9a:	d022      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	681b      	ldr	r3, [r3, #0]
 8003ea0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003ea4:	d01d      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003ea6:	687b      	ldr	r3, [r7, #4]
 8003ea8:	681b      	ldr	r3, [r3, #0]
 8003eaa:	4a1f      	ldr	r2, [pc, #124]	; (8003f28 <HAL_TIM_PWM_Start+0x17c>)
 8003eac:	4293      	cmp	r3, r2
 8003eae:	d018      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003eb0:	687b      	ldr	r3, [r7, #4]
 8003eb2:	681b      	ldr	r3, [r3, #0]
 8003eb4:	4a1d      	ldr	r2, [pc, #116]	; (8003f2c <HAL_TIM_PWM_Start+0x180>)
 8003eb6:	4293      	cmp	r3, r2
 8003eb8:	d013      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003eba:	687b      	ldr	r3, [r7, #4]
 8003ebc:	681b      	ldr	r3, [r3, #0]
 8003ebe:	4a1c      	ldr	r2, [pc, #112]	; (8003f30 <HAL_TIM_PWM_Start+0x184>)
 8003ec0:	4293      	cmp	r3, r2
 8003ec2:	d00e      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	4a16      	ldr	r2, [pc, #88]	; (8003f24 <HAL_TIM_PWM_Start+0x178>)
 8003eca:	4293      	cmp	r3, r2
 8003ecc:	d009      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	4a18      	ldr	r2, [pc, #96]	; (8003f34 <HAL_TIM_PWM_Start+0x188>)
 8003ed4:	4293      	cmp	r3, r2
 8003ed6:	d004      	beq.n	8003ee2 <HAL_TIM_PWM_Start+0x136>
 8003ed8:	687b      	ldr	r3, [r7, #4]
 8003eda:	681b      	ldr	r3, [r3, #0]
 8003edc:	4a16      	ldr	r2, [pc, #88]	; (8003f38 <HAL_TIM_PWM_Start+0x18c>)
 8003ede:	4293      	cmp	r3, r2
 8003ee0:	d111      	bne.n	8003f06 <HAL_TIM_PWM_Start+0x15a>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ee2:	687b      	ldr	r3, [r7, #4]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	689b      	ldr	r3, [r3, #8]
 8003ee8:	f003 0307 	and.w	r3, r3, #7
 8003eec:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	2b06      	cmp	r3, #6
 8003ef2:	d010      	beq.n	8003f16 <HAL_TIM_PWM_Start+0x16a>
    {
      __HAL_TIM_ENABLE(htim);
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	681a      	ldr	r2, [r3, #0]
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	681b      	ldr	r3, [r3, #0]
 8003efe:	f042 0201 	orr.w	r2, r2, #1
 8003f02:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003f04:	e007      	b.n	8003f16 <HAL_TIM_PWM_Start+0x16a>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	681a      	ldr	r2, [r3, #0]
 8003f0c:	687b      	ldr	r3, [r7, #4]
 8003f0e:	681b      	ldr	r3, [r3, #0]
 8003f10:	f042 0201 	orr.w	r2, r2, #1
 8003f14:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003f16:	2300      	movs	r3, #0
}
 8003f18:	4618      	mov	r0, r3
 8003f1a:	3710      	adds	r7, #16
 8003f1c:	46bd      	mov	sp, r7
 8003f1e:	bd80      	pop	{r7, pc}
 8003f20:	40010000 	.word	0x40010000
 8003f24:	40010400 	.word	0x40010400
 8003f28:	40000400 	.word	0x40000400
 8003f2c:	40000800 	.word	0x40000800
 8003f30:	40000c00 	.word	0x40000c00
 8003f34:	40014000 	.word	0x40014000
 8003f38:	40001800 	.word	0x40001800

08003f3c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b082      	sub	sp, #8
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691b      	ldr	r3, [r3, #16]
 8003f4a:	f003 0302 	and.w	r3, r3, #2
 8003f4e:	2b02      	cmp	r3, #2
 8003f50:	d122      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	681b      	ldr	r3, [r3, #0]
 8003f56:	68db      	ldr	r3, [r3, #12]
 8003f58:	f003 0302 	and.w	r3, r3, #2
 8003f5c:	2b02      	cmp	r3, #2
 8003f5e:	d11b      	bne.n	8003f98 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	f06f 0202 	mvn.w	r2, #2
 8003f68:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	2201      	movs	r2, #1
 8003f6e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003f70:	687b      	ldr	r3, [r7, #4]
 8003f72:	681b      	ldr	r3, [r3, #0]
 8003f74:	699b      	ldr	r3, [r3, #24]
 8003f76:	f003 0303 	and.w	r3, r3, #3
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d003      	beq.n	8003f86 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f000 fa77 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8003f84:	e005      	b.n	8003f92 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003f86:	6878      	ldr	r0, [r7, #4]
 8003f88:	f000 fa69 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003f8c:	6878      	ldr	r0, [r7, #4]
 8003f8e:	f000 fa7a 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003f92:	687b      	ldr	r3, [r7, #4]
 8003f94:	2200      	movs	r2, #0
 8003f96:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003f98:	687b      	ldr	r3, [r7, #4]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	691b      	ldr	r3, [r3, #16]
 8003f9e:	f003 0304 	and.w	r3, r3, #4
 8003fa2:	2b04      	cmp	r3, #4
 8003fa4:	d122      	bne.n	8003fec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	68db      	ldr	r3, [r3, #12]
 8003fac:	f003 0304 	and.w	r3, r3, #4
 8003fb0:	2b04      	cmp	r3, #4
 8003fb2:	d11b      	bne.n	8003fec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	f06f 0204 	mvn.w	r2, #4
 8003fbc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	2202      	movs	r2, #2
 8003fc2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	699b      	ldr	r3, [r3, #24]
 8003fca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d003      	beq.n	8003fda <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003fd2:	6878      	ldr	r0, [r7, #4]
 8003fd4:	f000 fa4d 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8003fd8:	e005      	b.n	8003fe6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003fda:	6878      	ldr	r0, [r7, #4]
 8003fdc:	f000 fa3f 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003fe0:	6878      	ldr	r0, [r7, #4]
 8003fe2:	f000 fa50 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003fe6:	687b      	ldr	r3, [r7, #4]
 8003fe8:	2200      	movs	r2, #0
 8003fea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	681b      	ldr	r3, [r3, #0]
 8003ff0:	691b      	ldr	r3, [r3, #16]
 8003ff2:	f003 0308 	and.w	r3, r3, #8
 8003ff6:	2b08      	cmp	r3, #8
 8003ff8:	d122      	bne.n	8004040 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	681b      	ldr	r3, [r3, #0]
 8003ffe:	68db      	ldr	r3, [r3, #12]
 8004000:	f003 0308 	and.w	r3, r3, #8
 8004004:	2b08      	cmp	r3, #8
 8004006:	d11b      	bne.n	8004040 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	681b      	ldr	r3, [r3, #0]
 800400c:	f06f 0208 	mvn.w	r2, #8
 8004010:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8004012:	687b      	ldr	r3, [r7, #4]
 8004014:	2204      	movs	r2, #4
 8004016:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	681b      	ldr	r3, [r3, #0]
 800401c:	69db      	ldr	r3, [r3, #28]
 800401e:	f003 0303 	and.w	r3, r3, #3
 8004022:	2b00      	cmp	r3, #0
 8004024:	d003      	beq.n	800402e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8004026:	6878      	ldr	r0, [r7, #4]
 8004028:	f000 fa23 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 800402c:	e005      	b.n	800403a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800402e:	6878      	ldr	r0, [r7, #4]
 8004030:	f000 fa15 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004034:	6878      	ldr	r0, [r7, #4]
 8004036:	f000 fa26 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800403a:	687b      	ldr	r3, [r7, #4]
 800403c:	2200      	movs	r2, #0
 800403e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	681b      	ldr	r3, [r3, #0]
 8004044:	691b      	ldr	r3, [r3, #16]
 8004046:	f003 0310 	and.w	r3, r3, #16
 800404a:	2b10      	cmp	r3, #16
 800404c:	d122      	bne.n	8004094 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	681b      	ldr	r3, [r3, #0]
 8004052:	68db      	ldr	r3, [r3, #12]
 8004054:	f003 0310 	and.w	r3, r3, #16
 8004058:	2b10      	cmp	r3, #16
 800405a:	d11b      	bne.n	8004094 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800405c:	687b      	ldr	r3, [r7, #4]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f06f 0210 	mvn.w	r2, #16
 8004064:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8004066:	687b      	ldr	r3, [r7, #4]
 8004068:	2208      	movs	r2, #8
 800406a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	681b      	ldr	r3, [r3, #0]
 8004070:	69db      	ldr	r3, [r3, #28]
 8004072:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8004076:	2b00      	cmp	r3, #0
 8004078:	d003      	beq.n	8004082 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800407a:	6878      	ldr	r0, [r7, #4]
 800407c:	f000 f9f9 	bl	8004472 <HAL_TIM_IC_CaptureCallback>
 8004080:	e005      	b.n	800408e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8004082:	6878      	ldr	r0, [r7, #4]
 8004084:	f000 f9eb 	bl	800445e <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8004088:	6878      	ldr	r0, [r7, #4]
 800408a:	f000 f9fc 	bl	8004486 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	2200      	movs	r2, #0
 8004092:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8004094:	687b      	ldr	r3, [r7, #4]
 8004096:	681b      	ldr	r3, [r3, #0]
 8004098:	691b      	ldr	r3, [r3, #16]
 800409a:	f003 0301 	and.w	r3, r3, #1
 800409e:	2b01      	cmp	r3, #1
 80040a0:	d10e      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80040a2:	687b      	ldr	r3, [r7, #4]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	68db      	ldr	r3, [r3, #12]
 80040a8:	f003 0301 	and.w	r3, r3, #1
 80040ac:	2b01      	cmp	r3, #1
 80040ae:	d107      	bne.n	80040c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	681b      	ldr	r3, [r3, #0]
 80040b4:	f06f 0201 	mvn.w	r2, #1
 80040b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80040ba:	6878      	ldr	r0, [r7, #4]
 80040bc:	f7fc fd38 	bl	8000b30 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80040c0:	687b      	ldr	r3, [r7, #4]
 80040c2:	681b      	ldr	r3, [r3, #0]
 80040c4:	691b      	ldr	r3, [r3, #16]
 80040c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040ca:	2b80      	cmp	r3, #128	; 0x80
 80040cc:	d10e      	bne.n	80040ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	68db      	ldr	r3, [r3, #12]
 80040d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80040d8:	2b80      	cmp	r3, #128	; 0x80
 80040da:	d107      	bne.n	80040ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	681b      	ldr	r3, [r3, #0]
 80040e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80040e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80040e6:	6878      	ldr	r0, [r7, #4]
 80040e8:	f000 fd78 	bl	8004bdc <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	681b      	ldr	r3, [r3, #0]
 80040f0:	691b      	ldr	r3, [r3, #16]
 80040f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80040f6:	2b40      	cmp	r3, #64	; 0x40
 80040f8:	d10e      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80040fa:	687b      	ldr	r3, [r7, #4]
 80040fc:	681b      	ldr	r3, [r3, #0]
 80040fe:	68db      	ldr	r3, [r3, #12]
 8004100:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004104:	2b40      	cmp	r3, #64	; 0x40
 8004106:	d107      	bne.n	8004118 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8004108:	687b      	ldr	r3, [r7, #4]
 800410a:	681b      	ldr	r3, [r3, #0]
 800410c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8004110:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8004112:	6878      	ldr	r0, [r7, #4]
 8004114:	f000 f9c1 	bl	800449a <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8004118:	687b      	ldr	r3, [r7, #4]
 800411a:	681b      	ldr	r3, [r3, #0]
 800411c:	691b      	ldr	r3, [r3, #16]
 800411e:	f003 0320 	and.w	r3, r3, #32
 8004122:	2b20      	cmp	r3, #32
 8004124:	d10e      	bne.n	8004144 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8004126:	687b      	ldr	r3, [r7, #4]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	68db      	ldr	r3, [r3, #12]
 800412c:	f003 0320 	and.w	r3, r3, #32
 8004130:	2b20      	cmp	r3, #32
 8004132:	d107      	bne.n	8004144 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	681b      	ldr	r3, [r3, #0]
 8004138:	f06f 0220 	mvn.w	r2, #32
 800413c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800413e:	6878      	ldr	r0, [r7, #4]
 8004140:	f000 fd42 	bl	8004bc8 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8004144:	bf00      	nop
 8004146:	3708      	adds	r7, #8
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}

0800414c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 800414c:	b580      	push	{r7, lr}
 800414e:	b086      	sub	sp, #24
 8004150:	af00      	add	r7, sp, #0
 8004152:	60f8      	str	r0, [r7, #12]
 8004154:	60b9      	str	r1, [r7, #8]
 8004156:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004158:	2300      	movs	r3, #0
 800415a:	75fb      	strb	r3, [r7, #23]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 800415c:	68fb      	ldr	r3, [r7, #12]
 800415e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004162:	2b01      	cmp	r3, #1
 8004164:	d101      	bne.n	800416a <HAL_TIM_PWM_ConfigChannel+0x1e>
 8004166:	2302      	movs	r3, #2
 8004168:	e0ae      	b.n	80042c8 <HAL_TIM_PWM_ConfigChannel+0x17c>
 800416a:	68fb      	ldr	r3, [r7, #12]
 800416c:	2201      	movs	r2, #1
 800416e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  switch (Channel)
 8004172:	687b      	ldr	r3, [r7, #4]
 8004174:	2b0c      	cmp	r3, #12
 8004176:	f200 809f 	bhi.w	80042b8 <HAL_TIM_PWM_ConfigChannel+0x16c>
 800417a:	a201      	add	r2, pc, #4	; (adr r2, 8004180 <HAL_TIM_PWM_ConfigChannel+0x34>)
 800417c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004180:	080041b5 	.word	0x080041b5
 8004184:	080042b9 	.word	0x080042b9
 8004188:	080042b9 	.word	0x080042b9
 800418c:	080042b9 	.word	0x080042b9
 8004190:	080041f5 	.word	0x080041f5
 8004194:	080042b9 	.word	0x080042b9
 8004198:	080042b9 	.word	0x080042b9
 800419c:	080042b9 	.word	0x080042b9
 80041a0:	08004237 	.word	0x08004237
 80041a4:	080042b9 	.word	0x080042b9
 80041a8:	080042b9 	.word	0x080042b9
 80041ac:	080042b9 	.word	0x080042b9
 80041b0:	08004277 	.word	0x08004277
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80041b4:	68fb      	ldr	r3, [r7, #12]
 80041b6:	681b      	ldr	r3, [r3, #0]
 80041b8:	68b9      	ldr	r1, [r7, #8]
 80041ba:	4618      	mov	r0, r3
 80041bc:	f000 fa18 	bl	80045f0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	699a      	ldr	r2, [r3, #24]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f042 0208 	orr.w	r2, r2, #8
 80041ce:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80041d0:	68fb      	ldr	r3, [r7, #12]
 80041d2:	681b      	ldr	r3, [r3, #0]
 80041d4:	699a      	ldr	r2, [r3, #24]
 80041d6:	68fb      	ldr	r3, [r7, #12]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	f022 0204 	bic.w	r2, r2, #4
 80041de:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	6999      	ldr	r1, [r3, #24]
 80041e6:	68bb      	ldr	r3, [r7, #8]
 80041e8:	691a      	ldr	r2, [r3, #16]
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	430a      	orrs	r2, r1
 80041f0:	619a      	str	r2, [r3, #24]
      break;
 80041f2:	e064      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80041f4:	68fb      	ldr	r3, [r7, #12]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	68b9      	ldr	r1, [r7, #8]
 80041fa:	4618      	mov	r0, r3
 80041fc:	f000 fa68 	bl	80046d0 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8004200:	68fb      	ldr	r3, [r7, #12]
 8004202:	681b      	ldr	r3, [r3, #0]
 8004204:	699a      	ldr	r2, [r3, #24]
 8004206:	68fb      	ldr	r3, [r7, #12]
 8004208:	681b      	ldr	r3, [r3, #0]
 800420a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800420e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	699a      	ldr	r2, [r3, #24]
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800421e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	681b      	ldr	r3, [r3, #0]
 8004224:	6999      	ldr	r1, [r3, #24]
 8004226:	68bb      	ldr	r3, [r7, #8]
 8004228:	691b      	ldr	r3, [r3, #16]
 800422a:	021a      	lsls	r2, r3, #8
 800422c:	68fb      	ldr	r3, [r7, #12]
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	430a      	orrs	r2, r1
 8004232:	619a      	str	r2, [r3, #24]
      break;
 8004234:	e043      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8004236:	68fb      	ldr	r3, [r7, #12]
 8004238:	681b      	ldr	r3, [r3, #0]
 800423a:	68b9      	ldr	r1, [r7, #8]
 800423c:	4618      	mov	r0, r3
 800423e:	f000 fabd 	bl	80047bc <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8004242:	68fb      	ldr	r3, [r7, #12]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	69da      	ldr	r2, [r3, #28]
 8004248:	68fb      	ldr	r3, [r7, #12]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f042 0208 	orr.w	r2, r2, #8
 8004250:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	681b      	ldr	r3, [r3, #0]
 8004256:	69da      	ldr	r2, [r3, #28]
 8004258:	68fb      	ldr	r3, [r7, #12]
 800425a:	681b      	ldr	r3, [r3, #0]
 800425c:	f022 0204 	bic.w	r2, r2, #4
 8004260:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	69d9      	ldr	r1, [r3, #28]
 8004268:	68bb      	ldr	r3, [r7, #8]
 800426a:	691a      	ldr	r2, [r3, #16]
 800426c:	68fb      	ldr	r3, [r7, #12]
 800426e:	681b      	ldr	r3, [r3, #0]
 8004270:	430a      	orrs	r2, r1
 8004272:	61da      	str	r2, [r3, #28]
      break;
 8004274:	e023      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	68b9      	ldr	r1, [r7, #8]
 800427c:	4618      	mov	r0, r3
 800427e:	f000 fb11 	bl	80048a4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8004282:	68fb      	ldr	r3, [r7, #12]
 8004284:	681b      	ldr	r3, [r3, #0]
 8004286:	69da      	ldr	r2, [r3, #28]
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004290:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8004292:	68fb      	ldr	r3, [r7, #12]
 8004294:	681b      	ldr	r3, [r3, #0]
 8004296:	69da      	ldr	r2, [r3, #28]
 8004298:	68fb      	ldr	r3, [r7, #12]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042a0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 80042a2:	68fb      	ldr	r3, [r7, #12]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	69d9      	ldr	r1, [r3, #28]
 80042a8:	68bb      	ldr	r3, [r7, #8]
 80042aa:	691b      	ldr	r3, [r3, #16]
 80042ac:	021a      	lsls	r2, r3, #8
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	430a      	orrs	r2, r1
 80042b4:	61da      	str	r2, [r3, #28]
      break;
 80042b6:	e002      	b.n	80042be <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      status = HAL_ERROR;
 80042b8:	2301      	movs	r3, #1
 80042ba:	75fb      	strb	r3, [r7, #23]
      break;
 80042bc:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80042be:	68fb      	ldr	r3, [r7, #12]
 80042c0:	2200      	movs	r2, #0
 80042c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 80042c6:	7dfb      	ldrb	r3, [r7, #23]
}
 80042c8:	4618      	mov	r0, r3
 80042ca:	3718      	adds	r7, #24
 80042cc:	46bd      	mov	sp, r7
 80042ce:	bd80      	pop	{r7, pc}

080042d0 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80042d0:	b580      	push	{r7, lr}
 80042d2:	b084      	sub	sp, #16
 80042d4:	af00      	add	r7, sp, #0
 80042d6:	6078      	str	r0, [r7, #4]
 80042d8:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80042da:	2300      	movs	r3, #0
 80042dc:	73fb      	strb	r3, [r7, #15]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80042e4:	2b01      	cmp	r3, #1
 80042e6:	d101      	bne.n	80042ec <HAL_TIM_ConfigClockSource+0x1c>
 80042e8:	2302      	movs	r3, #2
 80042ea:	e0b4      	b.n	8004456 <HAL_TIM_ConfigClockSource+0x186>
 80042ec:	687b      	ldr	r3, [r7, #4]
 80042ee:	2201      	movs	r2, #1
 80042f0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2202      	movs	r2, #2
 80042f8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80042fc:	687b      	ldr	r3, [r7, #4]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	689b      	ldr	r3, [r3, #8]
 8004302:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004304:	68bb      	ldr	r3, [r7, #8]
 8004306:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800430a:	60bb      	str	r3, [r7, #8]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800430c:	68bb      	ldr	r3, [r7, #8]
 800430e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004312:	60bb      	str	r3, [r7, #8]
  htim->Instance->SMCR = tmpsmcr;
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	68ba      	ldr	r2, [r7, #8]
 800431a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800431c:	683b      	ldr	r3, [r7, #0]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004324:	d03e      	beq.n	80043a4 <HAL_TIM_ConfigClockSource+0xd4>
 8004326:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800432a:	f200 8087 	bhi.w	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800432e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004332:	f000 8086 	beq.w	8004442 <HAL_TIM_ConfigClockSource+0x172>
 8004336:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800433a:	d87f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800433c:	2b70      	cmp	r3, #112	; 0x70
 800433e:	d01a      	beq.n	8004376 <HAL_TIM_ConfigClockSource+0xa6>
 8004340:	2b70      	cmp	r3, #112	; 0x70
 8004342:	d87b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004344:	2b60      	cmp	r3, #96	; 0x60
 8004346:	d050      	beq.n	80043ea <HAL_TIM_ConfigClockSource+0x11a>
 8004348:	2b60      	cmp	r3, #96	; 0x60
 800434a:	d877      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800434c:	2b50      	cmp	r3, #80	; 0x50
 800434e:	d03c      	beq.n	80043ca <HAL_TIM_ConfigClockSource+0xfa>
 8004350:	2b50      	cmp	r3, #80	; 0x50
 8004352:	d873      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004354:	2b40      	cmp	r3, #64	; 0x40
 8004356:	d058      	beq.n	800440a <HAL_TIM_ConfigClockSource+0x13a>
 8004358:	2b40      	cmp	r3, #64	; 0x40
 800435a:	d86f      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800435c:	2b30      	cmp	r3, #48	; 0x30
 800435e:	d064      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004360:	2b30      	cmp	r3, #48	; 0x30
 8004362:	d86b      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 8004364:	2b20      	cmp	r3, #32
 8004366:	d060      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004368:	2b20      	cmp	r3, #32
 800436a:	d867      	bhi.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
 800436c:	2b00      	cmp	r3, #0
 800436e:	d05c      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004370:	2b10      	cmp	r3, #16
 8004372:	d05a      	beq.n	800442a <HAL_TIM_ConfigClockSource+0x15a>
 8004374:	e062      	b.n	800443c <HAL_TIM_ConfigClockSource+0x16c>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 8004376:	687b      	ldr	r3, [r7, #4]
 8004378:	6818      	ldr	r0, [r3, #0]
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	6899      	ldr	r1, [r3, #8]
 800437e:	683b      	ldr	r3, [r7, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	683b      	ldr	r3, [r7, #0]
 8004384:	68db      	ldr	r3, [r3, #12]
 8004386:	f000 fb5d 	bl	8004a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);

      /* Select the External clock mode1 and the ETRF trigger */
      tmpsmcr = htim->Instance->SMCR;
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	689b      	ldr	r3, [r3, #8]
 8004390:	60bb      	str	r3, [r7, #8]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8004392:	68bb      	ldr	r3, [r7, #8]
 8004394:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8004398:	60bb      	str	r3, [r7, #8]
      /* Write to TIMx SMCR */
      htim->Instance->SMCR = tmpsmcr;
 800439a:	687b      	ldr	r3, [r7, #4]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	68ba      	ldr	r2, [r7, #8]
 80043a0:	609a      	str	r2, [r3, #8]
      break;
 80043a2:	e04f      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      assert_param(IS_TIM_CLOCKPRESCALER(sClockSourceConfig->ClockPrescaler));
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      /* Configure the ETR Clock source */
      TIM_ETR_SetConfig(htim->Instance,
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6818      	ldr	r0, [r3, #0]
 80043a8:	683b      	ldr	r3, [r7, #0]
 80043aa:	6899      	ldr	r1, [r3, #8]
 80043ac:	683b      	ldr	r3, [r7, #0]
 80043ae:	685a      	ldr	r2, [r3, #4]
 80043b0:	683b      	ldr	r3, [r7, #0]
 80043b2:	68db      	ldr	r3, [r3, #12]
 80043b4:	f000 fb46 	bl	8004a44 <TIM_ETR_SetConfig>
                        sClockSourceConfig->ClockPrescaler,
                        sClockSourceConfig->ClockPolarity,
                        sClockSourceConfig->ClockFilter);
      /* Enable the External clock mode2 */
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	689a      	ldr	r2, [r3, #8]
 80043be:	687b      	ldr	r3, [r7, #4]
 80043c0:	681b      	ldr	r3, [r3, #0]
 80043c2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80043c6:	609a      	str	r2, [r3, #8]
      break;
 80043c8:	e03c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	6818      	ldr	r0, [r3, #0]
 80043ce:	683b      	ldr	r3, [r7, #0]
 80043d0:	6859      	ldr	r1, [r3, #4]
 80043d2:	683b      	ldr	r3, [r7, #0]
 80043d4:	68db      	ldr	r3, [r3, #12]
 80043d6:	461a      	mov	r2, r3
 80043d8:	f000 faba 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	2150      	movs	r1, #80	; 0x50
 80043e2:	4618      	mov	r0, r3
 80043e4:	f000 fb13 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 80043e8:	e02c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI2 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI2_ConfigInputStage(htim->Instance,
 80043ea:	687b      	ldr	r3, [r7, #4]
 80043ec:	6818      	ldr	r0, [r3, #0]
 80043ee:	683b      	ldr	r3, [r7, #0]
 80043f0:	6859      	ldr	r1, [r3, #4]
 80043f2:	683b      	ldr	r3, [r7, #0]
 80043f4:	68db      	ldr	r3, [r3, #12]
 80043f6:	461a      	mov	r2, r3
 80043f8:	f000 fad9 	bl	80049ae <TIM_TI2_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	681b      	ldr	r3, [r3, #0]
 8004400:	2160      	movs	r1, #96	; 0x60
 8004402:	4618      	mov	r0, r3
 8004404:	f000 fb03 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8004408:	e01c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>

      /* Check TI1 input conditioning related parameters */
      assert_param(IS_TIM_CLOCKPOLARITY(sClockSourceConfig->ClockPolarity));
      assert_param(IS_TIM_CLOCKFILTER(sClockSourceConfig->ClockFilter));

      TIM_TI1_ConfigInputStage(htim->Instance,
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	6818      	ldr	r0, [r3, #0]
 800440e:	683b      	ldr	r3, [r7, #0]
 8004410:	6859      	ldr	r1, [r3, #4]
 8004412:	683b      	ldr	r3, [r7, #0]
 8004414:	68db      	ldr	r3, [r3, #12]
 8004416:	461a      	mov	r2, r3
 8004418:	f000 fa9a 	bl	8004950 <TIM_TI1_ConfigInputStage>
                               sClockSourceConfig->ClockPolarity,
                               sClockSourceConfig->ClockFilter);
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	2140      	movs	r1, #64	; 0x40
 8004422:	4618      	mov	r0, r3
 8004424:	f000 faf3 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 8004428:	e00c      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    case TIM_CLOCKSOURCE_ITR3:
    {
      /* Check whether or not the timer instance supports internal trigger input */
      assert_param(IS_TIM_CLOCKSOURCE_ITRX_INSTANCE(htim->Instance));

      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681a      	ldr	r2, [r3, #0]
 800442e:	683b      	ldr	r3, [r7, #0]
 8004430:	681b      	ldr	r3, [r3, #0]
 8004432:	4619      	mov	r1, r3
 8004434:	4610      	mov	r0, r2
 8004436:	f000 faea 	bl	8004a0e <TIM_ITRx_SetConfig>
      break;
 800443a:	e003      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
    }

    default:
      status = HAL_ERROR;
 800443c:	2301      	movs	r3, #1
 800443e:	73fb      	strb	r3, [r7, #15]
      break;
 8004440:	e000      	b.n	8004444 <HAL_TIM_ConfigClockSource+0x174>
      break;
 8004442:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	2201      	movs	r2, #1
 8004448:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	2200      	movs	r2, #0
 8004450:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return status;
 8004454:	7bfb      	ldrb	r3, [r7, #15]
}
 8004456:	4618      	mov	r0, r3
 8004458:	3710      	adds	r7, #16
 800445a:	46bd      	mov	sp, r7
 800445c:	bd80      	pop	{r7, pc}

0800445e <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800445e:	b480      	push	{r7}
 8004460:	b083      	sub	sp, #12
 8004462:	af00      	add	r7, sp, #0
 8004464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8004466:	bf00      	nop
 8004468:	370c      	adds	r7, #12
 800446a:	46bd      	mov	sp, r7
 800446c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004470:	4770      	bx	lr

08004472 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8004472:	b480      	push	{r7}
 8004474:	b083      	sub	sp, #12
 8004476:	af00      	add	r7, sp, #0
 8004478:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800447a:	bf00      	nop
 800447c:	370c      	adds	r7, #12
 800447e:	46bd      	mov	sp, r7
 8004480:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004484:	4770      	bx	lr

08004486 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8004486:	b480      	push	{r7}
 8004488:	b083      	sub	sp, #12
 800448a:	af00      	add	r7, sp, #0
 800448c:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 800448e:	bf00      	nop
 8004490:	370c      	adds	r7, #12
 8004492:	46bd      	mov	sp, r7
 8004494:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004498:	4770      	bx	lr

0800449a <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800449a:	b480      	push	{r7}
 800449c:	b083      	sub	sp, #12
 800449e:	af00      	add	r7, sp, #0
 80044a0:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80044a2:	bf00      	nop
 80044a4:	370c      	adds	r7, #12
 80044a6:	46bd      	mov	sp, r7
 80044a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80044ac:	4770      	bx	lr
	...

080044b0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80044b0:	b480      	push	{r7}
 80044b2:	b085      	sub	sp, #20
 80044b4:	af00      	add	r7, sp, #0
 80044b6:	6078      	str	r0, [r7, #4]
 80044b8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80044c0:	687b      	ldr	r3, [r7, #4]
 80044c2:	4a40      	ldr	r2, [pc, #256]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 80044c4:	4293      	cmp	r3, r2
 80044c6:	d013      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80044ce:	d00f      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d0:	687b      	ldr	r3, [r7, #4]
 80044d2:	4a3d      	ldr	r2, [pc, #244]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 80044d4:	4293      	cmp	r3, r2
 80044d6:	d00b      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044d8:	687b      	ldr	r3, [r7, #4]
 80044da:	4a3c      	ldr	r2, [pc, #240]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 80044dc:	4293      	cmp	r3, r2
 80044de:	d007      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	4a3b      	ldr	r2, [pc, #236]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 80044e4:	4293      	cmp	r3, r2
 80044e6:	d003      	beq.n	80044f0 <TIM_Base_SetConfig+0x40>
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	4a3a      	ldr	r2, [pc, #232]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80044ec:	4293      	cmp	r3, r2
 80044ee:	d108      	bne.n	8004502 <TIM_Base_SetConfig+0x52>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044f6:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80044f8:	683b      	ldr	r3, [r7, #0]
 80044fa:	685b      	ldr	r3, [r3, #4]
 80044fc:	68fa      	ldr	r2, [r7, #12]
 80044fe:	4313      	orrs	r3, r2
 8004500:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	4a2f      	ldr	r2, [pc, #188]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 8004506:	4293      	cmp	r3, r2
 8004508:	d02b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004510:	d027      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	4a2c      	ldr	r2, [pc, #176]	; (80045c8 <TIM_Base_SetConfig+0x118>)
 8004516:	4293      	cmp	r3, r2
 8004518:	d023      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	4a2b      	ldr	r2, [pc, #172]	; (80045cc <TIM_Base_SetConfig+0x11c>)
 800451e:	4293      	cmp	r3, r2
 8004520:	d01f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	4a2a      	ldr	r2, [pc, #168]	; (80045d0 <TIM_Base_SetConfig+0x120>)
 8004526:	4293      	cmp	r3, r2
 8004528:	d01b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	4a29      	ldr	r2, [pc, #164]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 800452e:	4293      	cmp	r3, r2
 8004530:	d017      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	4a28      	ldr	r2, [pc, #160]	; (80045d8 <TIM_Base_SetConfig+0x128>)
 8004536:	4293      	cmp	r3, r2
 8004538:	d013      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	4a27      	ldr	r2, [pc, #156]	; (80045dc <TIM_Base_SetConfig+0x12c>)
 800453e:	4293      	cmp	r3, r2
 8004540:	d00f      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	4a26      	ldr	r2, [pc, #152]	; (80045e0 <TIM_Base_SetConfig+0x130>)
 8004546:	4293      	cmp	r3, r2
 8004548:	d00b      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	4a25      	ldr	r2, [pc, #148]	; (80045e4 <TIM_Base_SetConfig+0x134>)
 800454e:	4293      	cmp	r3, r2
 8004550:	d007      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	4a24      	ldr	r2, [pc, #144]	; (80045e8 <TIM_Base_SetConfig+0x138>)
 8004556:	4293      	cmp	r3, r2
 8004558:	d003      	beq.n	8004562 <TIM_Base_SetConfig+0xb2>
 800455a:	687b      	ldr	r3, [r7, #4]
 800455c:	4a23      	ldr	r2, [pc, #140]	; (80045ec <TIM_Base_SetConfig+0x13c>)
 800455e:	4293      	cmp	r3, r2
 8004560:	d108      	bne.n	8004574 <TIM_Base_SetConfig+0xc4>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004562:	68fb      	ldr	r3, [r7, #12]
 8004564:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004568:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	68db      	ldr	r3, [r3, #12]
 800456e:	68fa      	ldr	r2, [r7, #12]
 8004570:	4313      	orrs	r3, r2
 8004572:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004574:	68fb      	ldr	r3, [r7, #12]
 8004576:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800457a:	683b      	ldr	r3, [r7, #0]
 800457c:	695b      	ldr	r3, [r3, #20]
 800457e:	4313      	orrs	r3, r2
 8004580:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	68fa      	ldr	r2, [r7, #12]
 8004586:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8004588:	683b      	ldr	r3, [r7, #0]
 800458a:	689a      	ldr	r2, [r3, #8]
 800458c:	687b      	ldr	r3, [r7, #4]
 800458e:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8004590:	683b      	ldr	r3, [r7, #0]
 8004592:	681a      	ldr	r2, [r3, #0]
 8004594:	687b      	ldr	r3, [r7, #4]
 8004596:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	4a0a      	ldr	r2, [pc, #40]	; (80045c4 <TIM_Base_SetConfig+0x114>)
 800459c:	4293      	cmp	r3, r2
 800459e:	d003      	beq.n	80045a8 <TIM_Base_SetConfig+0xf8>
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	4a0c      	ldr	r2, [pc, #48]	; (80045d4 <TIM_Base_SetConfig+0x124>)
 80045a4:	4293      	cmp	r3, r2
 80045a6:	d103      	bne.n	80045b0 <TIM_Base_SetConfig+0x100>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80045a8:	683b      	ldr	r3, [r7, #0]
 80045aa:	691a      	ldr	r2, [r3, #16]
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	2201      	movs	r2, #1
 80045b4:	615a      	str	r2, [r3, #20]
}
 80045b6:	bf00      	nop
 80045b8:	3714      	adds	r7, #20
 80045ba:	46bd      	mov	sp, r7
 80045bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045c0:	4770      	bx	lr
 80045c2:	bf00      	nop
 80045c4:	40010000 	.word	0x40010000
 80045c8:	40000400 	.word	0x40000400
 80045cc:	40000800 	.word	0x40000800
 80045d0:	40000c00 	.word	0x40000c00
 80045d4:	40010400 	.word	0x40010400
 80045d8:	40014000 	.word	0x40014000
 80045dc:	40014400 	.word	0x40014400
 80045e0:	40014800 	.word	0x40014800
 80045e4:	40001800 	.word	0x40001800
 80045e8:	40001c00 	.word	0x40001c00
 80045ec:	40002000 	.word	0x40002000

080045f0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80045f0:	b480      	push	{r7}
 80045f2:	b087      	sub	sp, #28
 80045f4:	af00      	add	r7, sp, #0
 80045f6:	6078      	str	r0, [r7, #4]
 80045f8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	6a1b      	ldr	r3, [r3, #32]
 80045fe:	f023 0201 	bic.w	r2, r3, #1
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	6a1b      	ldr	r3, [r3, #32]
 800460a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	685b      	ldr	r3, [r3, #4]
 8004610:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8004612:	687b      	ldr	r3, [r7, #4]
 8004614:	699b      	ldr	r3, [r3, #24]
 8004616:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004618:	68fb      	ldr	r3, [r7, #12]
 800461a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800461e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	f023 0303 	bic.w	r3, r3, #3
 8004626:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004628:	683b      	ldr	r3, [r7, #0]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	68fa      	ldr	r2, [r7, #12]
 800462e:	4313      	orrs	r3, r2
 8004630:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8004632:	697b      	ldr	r3, [r7, #20]
 8004634:	f023 0302 	bic.w	r3, r3, #2
 8004638:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800463a:	683b      	ldr	r3, [r7, #0]
 800463c:	689b      	ldr	r3, [r3, #8]
 800463e:	697a      	ldr	r2, [r7, #20]
 8004640:	4313      	orrs	r3, r2
 8004642:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	4a20      	ldr	r2, [pc, #128]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004648:	4293      	cmp	r3, r2
 800464a:	d003      	beq.n	8004654 <TIM_OC1_SetConfig+0x64>
 800464c:	687b      	ldr	r3, [r7, #4]
 800464e:	4a1f      	ldr	r2, [pc, #124]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 8004650:	4293      	cmp	r3, r2
 8004652:	d10c      	bne.n	800466e <TIM_OC1_SetConfig+0x7e>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004654:	697b      	ldr	r3, [r7, #20]
 8004656:	f023 0308 	bic.w	r3, r3, #8
 800465a:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	68db      	ldr	r3, [r3, #12]
 8004660:	697a      	ldr	r2, [r7, #20]
 8004662:	4313      	orrs	r3, r2
 8004664:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8004666:	697b      	ldr	r3, [r7, #20]
 8004668:	f023 0304 	bic.w	r3, r3, #4
 800466c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	4a15      	ldr	r2, [pc, #84]	; (80046c8 <TIM_OC1_SetConfig+0xd8>)
 8004672:	4293      	cmp	r3, r2
 8004674:	d003      	beq.n	800467e <TIM_OC1_SetConfig+0x8e>
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	4a14      	ldr	r2, [pc, #80]	; (80046cc <TIM_OC1_SetConfig+0xdc>)
 800467a:	4293      	cmp	r3, r2
 800467c:	d111      	bne.n	80046a2 <TIM_OC1_SetConfig+0xb2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800467e:	693b      	ldr	r3, [r7, #16]
 8004680:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004684:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004686:	693b      	ldr	r3, [r7, #16]
 8004688:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800468c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800468e:	683b      	ldr	r3, [r7, #0]
 8004690:	695b      	ldr	r3, [r3, #20]
 8004692:	693a      	ldr	r2, [r7, #16]
 8004694:	4313      	orrs	r3, r2
 8004696:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004698:	683b      	ldr	r3, [r7, #0]
 800469a:	699b      	ldr	r3, [r3, #24]
 800469c:	693a      	ldr	r2, [r7, #16]
 800469e:	4313      	orrs	r3, r2
 80046a0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80046a8:	687b      	ldr	r3, [r7, #4]
 80046aa:	68fa      	ldr	r2, [r7, #12]
 80046ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80046ae:	683b      	ldr	r3, [r7, #0]
 80046b0:	685a      	ldr	r2, [r3, #4]
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80046b6:	687b      	ldr	r3, [r7, #4]
 80046b8:	697a      	ldr	r2, [r7, #20]
 80046ba:	621a      	str	r2, [r3, #32]
}
 80046bc:	bf00      	nop
 80046be:	371c      	adds	r7, #28
 80046c0:	46bd      	mov	sp, r7
 80046c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c6:	4770      	bx	lr
 80046c8:	40010000 	.word	0x40010000
 80046cc:	40010400 	.word	0x40010400

080046d0 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80046d0:	b480      	push	{r7}
 80046d2:	b087      	sub	sp, #28
 80046d4:	af00      	add	r7, sp, #0
 80046d6:	6078      	str	r0, [r7, #4]
 80046d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	6a1b      	ldr	r3, [r3, #32]
 80046de:	f023 0210 	bic.w	r2, r3, #16
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	6a1b      	ldr	r3, [r3, #32]
 80046ea:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	685b      	ldr	r3, [r3, #4]
 80046f0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	699b      	ldr	r3, [r3, #24]
 80046f6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80046f8:	68fb      	ldr	r3, [r7, #12]
 80046fa:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80046fe:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8004706:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8004708:	683b      	ldr	r3, [r7, #0]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	021b      	lsls	r3, r3, #8
 800470e:	68fa      	ldr	r2, [r7, #12]
 8004710:	4313      	orrs	r3, r2
 8004712:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8004714:	697b      	ldr	r3, [r7, #20]
 8004716:	f023 0320 	bic.w	r3, r3, #32
 800471a:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 800471c:	683b      	ldr	r3, [r7, #0]
 800471e:	689b      	ldr	r3, [r3, #8]
 8004720:	011b      	lsls	r3, r3, #4
 8004722:	697a      	ldr	r2, [r7, #20]
 8004724:	4313      	orrs	r3, r2
 8004726:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	4a22      	ldr	r2, [pc, #136]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 800472c:	4293      	cmp	r3, r2
 800472e:	d003      	beq.n	8004738 <TIM_OC2_SetConfig+0x68>
 8004730:	687b      	ldr	r3, [r7, #4]
 8004732:	4a21      	ldr	r2, [pc, #132]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004734:	4293      	cmp	r3, r2
 8004736:	d10d      	bne.n	8004754 <TIM_OC2_SetConfig+0x84>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004738:	697b      	ldr	r3, [r7, #20]
 800473a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800473e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004740:	683b      	ldr	r3, [r7, #0]
 8004742:	68db      	ldr	r3, [r3, #12]
 8004744:	011b      	lsls	r3, r3, #4
 8004746:	697a      	ldr	r2, [r7, #20]
 8004748:	4313      	orrs	r3, r2
 800474a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800474c:	697b      	ldr	r3, [r7, #20]
 800474e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004752:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	4a17      	ldr	r2, [pc, #92]	; (80047b4 <TIM_OC2_SetConfig+0xe4>)
 8004758:	4293      	cmp	r3, r2
 800475a:	d003      	beq.n	8004764 <TIM_OC2_SetConfig+0x94>
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	4a16      	ldr	r2, [pc, #88]	; (80047b8 <TIM_OC2_SetConfig+0xe8>)
 8004760:	4293      	cmp	r3, r2
 8004762:	d113      	bne.n	800478c <TIM_OC2_SetConfig+0xbc>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8004764:	693b      	ldr	r3, [r7, #16]
 8004766:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800476a:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 800476c:	693b      	ldr	r3, [r7, #16]
 800476e:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004772:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8004774:	683b      	ldr	r3, [r7, #0]
 8004776:	695b      	ldr	r3, [r3, #20]
 8004778:	009b      	lsls	r3, r3, #2
 800477a:	693a      	ldr	r2, [r7, #16]
 800477c:	4313      	orrs	r3, r2
 800477e:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004780:	683b      	ldr	r3, [r7, #0]
 8004782:	699b      	ldr	r3, [r3, #24]
 8004784:	009b      	lsls	r3, r3, #2
 8004786:	693a      	ldr	r2, [r7, #16]
 8004788:	4313      	orrs	r3, r2
 800478a:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	693a      	ldr	r2, [r7, #16]
 8004790:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	68fa      	ldr	r2, [r7, #12]
 8004796:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004798:	683b      	ldr	r3, [r7, #0]
 800479a:	685a      	ldr	r2, [r3, #4]
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	697a      	ldr	r2, [r7, #20]
 80047a4:	621a      	str	r2, [r3, #32]
}
 80047a6:	bf00      	nop
 80047a8:	371c      	adds	r7, #28
 80047aa:	46bd      	mov	sp, r7
 80047ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047b0:	4770      	bx	lr
 80047b2:	bf00      	nop
 80047b4:	40010000 	.word	0x40010000
 80047b8:	40010400 	.word	0x40010400

080047bc <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80047bc:	b480      	push	{r7}
 80047be:	b087      	sub	sp, #28
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6a1b      	ldr	r3, [r3, #32]
 80047ca:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80047d2:	687b      	ldr	r3, [r7, #4]
 80047d4:	6a1b      	ldr	r3, [r3, #32]
 80047d6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	685b      	ldr	r3, [r3, #4]
 80047dc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	69db      	ldr	r3, [r3, #28]
 80047e2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047ea:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	f023 0303 	bic.w	r3, r3, #3
 80047f2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	68fa      	ldr	r2, [r7, #12]
 80047fa:	4313      	orrs	r3, r2
 80047fc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80047fe:	697b      	ldr	r3, [r7, #20]
 8004800:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004804:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8004806:	683b      	ldr	r3, [r7, #0]
 8004808:	689b      	ldr	r3, [r3, #8]
 800480a:	021b      	lsls	r3, r3, #8
 800480c:	697a      	ldr	r2, [r7, #20]
 800480e:	4313      	orrs	r3, r2
 8004810:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	4a21      	ldr	r2, [pc, #132]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004816:	4293      	cmp	r3, r2
 8004818:	d003      	beq.n	8004822 <TIM_OC3_SetConfig+0x66>
 800481a:	687b      	ldr	r3, [r7, #4]
 800481c:	4a20      	ldr	r2, [pc, #128]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800481e:	4293      	cmp	r3, r2
 8004820:	d10d      	bne.n	800483e <TIM_OC3_SetConfig+0x82>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8004822:	697b      	ldr	r3, [r7, #20]
 8004824:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8004828:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800482a:	683b      	ldr	r3, [r7, #0]
 800482c:	68db      	ldr	r3, [r3, #12]
 800482e:	021b      	lsls	r3, r3, #8
 8004830:	697a      	ldr	r2, [r7, #20]
 8004832:	4313      	orrs	r3, r2
 8004834:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004836:	697b      	ldr	r3, [r7, #20]
 8004838:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800483c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800483e:	687b      	ldr	r3, [r7, #4]
 8004840:	4a16      	ldr	r2, [pc, #88]	; (800489c <TIM_OC3_SetConfig+0xe0>)
 8004842:	4293      	cmp	r3, r2
 8004844:	d003      	beq.n	800484e <TIM_OC3_SetConfig+0x92>
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	4a15      	ldr	r2, [pc, #84]	; (80048a0 <TIM_OC3_SetConfig+0xe4>)
 800484a:	4293      	cmp	r3, r2
 800484c:	d113      	bne.n	8004876 <TIM_OC3_SetConfig+0xba>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 800484e:	693b      	ldr	r3, [r7, #16]
 8004850:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004854:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8004856:	693b      	ldr	r3, [r7, #16]
 8004858:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800485c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 800485e:	683b      	ldr	r3, [r7, #0]
 8004860:	695b      	ldr	r3, [r3, #20]
 8004862:	011b      	lsls	r3, r3, #4
 8004864:	693a      	ldr	r2, [r7, #16]
 8004866:	4313      	orrs	r3, r2
 8004868:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800486a:	683b      	ldr	r3, [r7, #0]
 800486c:	699b      	ldr	r3, [r3, #24]
 800486e:	011b      	lsls	r3, r3, #4
 8004870:	693a      	ldr	r2, [r7, #16]
 8004872:	4313      	orrs	r3, r2
 8004874:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	693a      	ldr	r2, [r7, #16]
 800487a:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	68fa      	ldr	r2, [r7, #12]
 8004880:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004882:	683b      	ldr	r3, [r7, #0]
 8004884:	685a      	ldr	r2, [r3, #4]
 8004886:	687b      	ldr	r3, [r7, #4]
 8004888:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	697a      	ldr	r2, [r7, #20]
 800488e:	621a      	str	r2, [r3, #32]
}
 8004890:	bf00      	nop
 8004892:	371c      	adds	r7, #28
 8004894:	46bd      	mov	sp, r7
 8004896:	f85d 7b04 	ldr.w	r7, [sp], #4
 800489a:	4770      	bx	lr
 800489c:	40010000 	.word	0x40010000
 80048a0:	40010400 	.word	0x40010400

080048a4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80048a4:	b480      	push	{r7}
 80048a6:	b087      	sub	sp, #28
 80048a8:	af00      	add	r7, sp, #0
 80048aa:	6078      	str	r0, [r7, #4]
 80048ac:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a1b      	ldr	r3, [r3, #32]
 80048b2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	6a1b      	ldr	r3, [r3, #32]
 80048be:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	685b      	ldr	r3, [r3, #4]
 80048c4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80048c6:	687b      	ldr	r3, [r7, #4]
 80048c8:	69db      	ldr	r3, [r3, #28]
 80048ca:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80048d2:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80048da:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80048dc:	683b      	ldr	r3, [r7, #0]
 80048de:	681b      	ldr	r3, [r3, #0]
 80048e0:	021b      	lsls	r3, r3, #8
 80048e2:	68fa      	ldr	r2, [r7, #12]
 80048e4:	4313      	orrs	r3, r2
 80048e6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80048e8:	693b      	ldr	r3, [r7, #16]
 80048ea:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80048ee:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80048f0:	683b      	ldr	r3, [r7, #0]
 80048f2:	689b      	ldr	r3, [r3, #8]
 80048f4:	031b      	lsls	r3, r3, #12
 80048f6:	693a      	ldr	r2, [r7, #16]
 80048f8:	4313      	orrs	r3, r2
 80048fa:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80048fc:	687b      	ldr	r3, [r7, #4]
 80048fe:	4a12      	ldr	r2, [pc, #72]	; (8004948 <TIM_OC4_SetConfig+0xa4>)
 8004900:	4293      	cmp	r3, r2
 8004902:	d003      	beq.n	800490c <TIM_OC4_SetConfig+0x68>
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	4a11      	ldr	r2, [pc, #68]	; (800494c <TIM_OC4_SetConfig+0xa8>)
 8004908:	4293      	cmp	r3, r2
 800490a:	d109      	bne.n	8004920 <TIM_OC4_SetConfig+0x7c>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 800490c:	697b      	ldr	r3, [r7, #20]
 800490e:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8004912:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8004914:	683b      	ldr	r3, [r7, #0]
 8004916:	695b      	ldr	r3, [r3, #20]
 8004918:	019b      	lsls	r3, r3, #6
 800491a:	697a      	ldr	r2, [r7, #20]
 800491c:	4313      	orrs	r3, r2
 800491e:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	697a      	ldr	r2, [r7, #20]
 8004924:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	68fa      	ldr	r2, [r7, #12]
 800492a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 800492c:	683b      	ldr	r3, [r7, #0]
 800492e:	685a      	ldr	r2, [r3, #4]
 8004930:	687b      	ldr	r3, [r7, #4]
 8004932:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	693a      	ldr	r2, [r7, #16]
 8004938:	621a      	str	r2, [r3, #32]
}
 800493a:	bf00      	nop
 800493c:	371c      	adds	r7, #28
 800493e:	46bd      	mov	sp, r7
 8004940:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004944:	4770      	bx	lr
 8004946:	bf00      	nop
 8004948:	40010000 	.word	0x40010000
 800494c:	40010400 	.word	0x40010400

08004950 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004950:	b480      	push	{r7}
 8004952:	b087      	sub	sp, #28
 8004954:	af00      	add	r7, sp, #0
 8004956:	60f8      	str	r0, [r7, #12]
 8004958:	60b9      	str	r1, [r7, #8]
 800495a:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 800495c:	68fb      	ldr	r3, [r7, #12]
 800495e:	6a1b      	ldr	r3, [r3, #32]
 8004960:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004962:	68fb      	ldr	r3, [r7, #12]
 8004964:	6a1b      	ldr	r3, [r3, #32]
 8004966:	f023 0201 	bic.w	r2, r3, #1
 800496a:	68fb      	ldr	r3, [r7, #12]
 800496c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	699b      	ldr	r3, [r3, #24]
 8004972:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004974:	693b      	ldr	r3, [r7, #16]
 8004976:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800497a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	011b      	lsls	r3, r3, #4
 8004980:	693a      	ldr	r2, [r7, #16]
 8004982:	4313      	orrs	r3, r2
 8004984:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8004986:	697b      	ldr	r3, [r7, #20]
 8004988:	f023 030a 	bic.w	r3, r3, #10
 800498c:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 800498e:	697a      	ldr	r2, [r7, #20]
 8004990:	68bb      	ldr	r3, [r7, #8]
 8004992:	4313      	orrs	r3, r2
 8004994:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8004996:	68fb      	ldr	r3, [r7, #12]
 8004998:	693a      	ldr	r2, [r7, #16]
 800499a:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 800499c:	68fb      	ldr	r3, [r7, #12]
 800499e:	697a      	ldr	r2, [r7, #20]
 80049a0:	621a      	str	r2, [r3, #32]
}
 80049a2:	bf00      	nop
 80049a4:	371c      	adds	r7, #28
 80049a6:	46bd      	mov	sp, r7
 80049a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049ac:	4770      	bx	lr

080049ae <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80049ae:	b480      	push	{r7}
 80049b0:	b087      	sub	sp, #28
 80049b2:	af00      	add	r7, sp, #0
 80049b4:	60f8      	str	r0, [r7, #12]
 80049b6:	60b9      	str	r1, [r7, #8]
 80049b8:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80049ba:	68fb      	ldr	r3, [r7, #12]
 80049bc:	6a1b      	ldr	r3, [r3, #32]
 80049be:	f023 0210 	bic.w	r2, r3, #16
 80049c2:	68fb      	ldr	r3, [r7, #12]
 80049c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80049c6:	68fb      	ldr	r3, [r7, #12]
 80049c8:	699b      	ldr	r3, [r3, #24]
 80049ca:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80049cc:	68fb      	ldr	r3, [r7, #12]
 80049ce:	6a1b      	ldr	r3, [r3, #32]
 80049d0:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80049d2:	697b      	ldr	r3, [r7, #20]
 80049d4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80049d8:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	031b      	lsls	r3, r3, #12
 80049de:	697a      	ldr	r2, [r7, #20]
 80049e0:	4313      	orrs	r3, r2
 80049e2:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80049e4:	693b      	ldr	r3, [r7, #16]
 80049e6:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80049ea:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80049ec:	68bb      	ldr	r3, [r7, #8]
 80049ee:	011b      	lsls	r3, r3, #4
 80049f0:	693a      	ldr	r2, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80049f6:	68fb      	ldr	r3, [r7, #12]
 80049f8:	697a      	ldr	r2, [r7, #20]
 80049fa:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80049fc:	68fb      	ldr	r3, [r7, #12]
 80049fe:	693a      	ldr	r2, [r7, #16]
 8004a00:	621a      	str	r2, [r3, #32]
}
 8004a02:	bf00      	nop
 8004a04:	371c      	adds	r7, #28
 8004a06:	46bd      	mov	sp, r7
 8004a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a0c:	4770      	bx	lr

08004a0e <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8004a0e:	b480      	push	{r7}
 8004a10:	b085      	sub	sp, #20
 8004a12:	af00      	add	r7, sp, #0
 8004a14:	6078      	str	r0, [r7, #4]
 8004a16:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	689b      	ldr	r3, [r3, #8]
 8004a1c:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8004a1e:	68fb      	ldr	r3, [r7, #12]
 8004a20:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004a24:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8004a26:	683a      	ldr	r2, [r7, #0]
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	4313      	orrs	r3, r2
 8004a2c:	f043 0307 	orr.w	r3, r3, #7
 8004a30:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a32:	687b      	ldr	r3, [r7, #4]
 8004a34:	68fa      	ldr	r2, [r7, #12]
 8004a36:	609a      	str	r2, [r3, #8]
}
 8004a38:	bf00      	nop
 8004a3a:	3714      	adds	r7, #20
 8004a3c:	46bd      	mov	sp, r7
 8004a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a42:	4770      	bx	lr

08004a44 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8004a44:	b480      	push	{r7}
 8004a46:	b087      	sub	sp, #28
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	60f8      	str	r0, [r7, #12]
 8004a4c:	60b9      	str	r1, [r7, #8]
 8004a4e:	607a      	str	r2, [r7, #4]
 8004a50:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004a52:	68fb      	ldr	r3, [r7, #12]
 8004a54:	689b      	ldr	r3, [r3, #8]
 8004a56:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8004a58:	697b      	ldr	r3, [r7, #20]
 8004a5a:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004a5e:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004a60:	683b      	ldr	r3, [r7, #0]
 8004a62:	021a      	lsls	r2, r3, #8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	431a      	orrs	r2, r3
 8004a68:	68bb      	ldr	r3, [r7, #8]
 8004a6a:	4313      	orrs	r3, r2
 8004a6c:	697a      	ldr	r2, [r7, #20]
 8004a6e:	4313      	orrs	r3, r2
 8004a70:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004a72:	68fb      	ldr	r3, [r7, #12]
 8004a74:	697a      	ldr	r2, [r7, #20]
 8004a76:	609a      	str	r2, [r3, #8]
}
 8004a78:	bf00      	nop
 8004a7a:	371c      	adds	r7, #28
 8004a7c:	46bd      	mov	sp, r7
 8004a7e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a82:	4770      	bx	lr

08004a84 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004a84:	b480      	push	{r7}
 8004a86:	b087      	sub	sp, #28
 8004a88:	af00      	add	r7, sp, #0
 8004a8a:	60f8      	str	r0, [r7, #12]
 8004a8c:	60b9      	str	r1, [r7, #8]
 8004a8e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004a90:	68bb      	ldr	r3, [r7, #8]
 8004a92:	f003 031f 	and.w	r3, r3, #31
 8004a96:	2201      	movs	r2, #1
 8004a98:	fa02 f303 	lsl.w	r3, r2, r3
 8004a9c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	6a1a      	ldr	r2, [r3, #32]
 8004aa2:	697b      	ldr	r3, [r7, #20]
 8004aa4:	43db      	mvns	r3, r3
 8004aa6:	401a      	ands	r2, r3
 8004aa8:	68fb      	ldr	r3, [r7, #12]
 8004aaa:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	6a1a      	ldr	r2, [r3, #32]
 8004ab0:	68bb      	ldr	r3, [r7, #8]
 8004ab2:	f003 031f 	and.w	r3, r3, #31
 8004ab6:	6879      	ldr	r1, [r7, #4]
 8004ab8:	fa01 f303 	lsl.w	r3, r1, r3
 8004abc:	431a      	orrs	r2, r3
 8004abe:	68fb      	ldr	r3, [r7, #12]
 8004ac0:	621a      	str	r2, [r3, #32]
}
 8004ac2:	bf00      	nop
 8004ac4:	371c      	adds	r7, #28
 8004ac6:	46bd      	mov	sp, r7
 8004ac8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004acc:	4770      	bx	lr
	...

08004ad0 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004ad0:	b480      	push	{r7}
 8004ad2:	b085      	sub	sp, #20
 8004ad4:	af00      	add	r7, sp, #0
 8004ad6:	6078      	str	r0, [r7, #4]
 8004ad8:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004ae0:	2b01      	cmp	r3, #1
 8004ae2:	d101      	bne.n	8004ae8 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004ae4:	2302      	movs	r3, #2
 8004ae6:	e05a      	b.n	8004b9e <HAL_TIMEx_MasterConfigSynchronization+0xce>
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	2201      	movs	r2, #1
 8004aec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	2202      	movs	r2, #2
 8004af4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8004af8:	687b      	ldr	r3, [r7, #4]
 8004afa:	681b      	ldr	r3, [r3, #0]
 8004afc:	685b      	ldr	r3, [r3, #4]
 8004afe:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8004b00:	687b      	ldr	r3, [r7, #4]
 8004b02:	681b      	ldr	r3, [r3, #0]
 8004b04:	689b      	ldr	r3, [r3, #8]
 8004b06:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8004b08:	68fb      	ldr	r3, [r7, #12]
 8004b0a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8004b0e:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8004b10:	683b      	ldr	r3, [r7, #0]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68fa      	ldr	r2, [r7, #12]
 8004b16:	4313      	orrs	r3, r2
 8004b18:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	681b      	ldr	r3, [r3, #0]
 8004b1e:	68fa      	ldr	r2, [r7, #12]
 8004b20:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	4a21      	ldr	r2, [pc, #132]	; (8004bac <HAL_TIMEx_MasterConfigSynchronization+0xdc>)
 8004b28:	4293      	cmp	r3, r2
 8004b2a:	d022      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004b34:	d01d      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b36:	687b      	ldr	r3, [r7, #4]
 8004b38:	681b      	ldr	r3, [r3, #0]
 8004b3a:	4a1d      	ldr	r2, [pc, #116]	; (8004bb0 <HAL_TIMEx_MasterConfigSynchronization+0xe0>)
 8004b3c:	4293      	cmp	r3, r2
 8004b3e:	d018      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b40:	687b      	ldr	r3, [r7, #4]
 8004b42:	681b      	ldr	r3, [r3, #0]
 8004b44:	4a1b      	ldr	r2, [pc, #108]	; (8004bb4 <HAL_TIMEx_MasterConfigSynchronization+0xe4>)
 8004b46:	4293      	cmp	r3, r2
 8004b48:	d013      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	681b      	ldr	r3, [r3, #0]
 8004b4e:	4a1a      	ldr	r2, [pc, #104]	; (8004bb8 <HAL_TIMEx_MasterConfigSynchronization+0xe8>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	d00e      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	4a18      	ldr	r2, [pc, #96]	; (8004bbc <HAL_TIMEx_MasterConfigSynchronization+0xec>)
 8004b5a:	4293      	cmp	r3, r2
 8004b5c:	d009      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	4a17      	ldr	r2, [pc, #92]	; (8004bc0 <HAL_TIMEx_MasterConfigSynchronization+0xf0>)
 8004b64:	4293      	cmp	r3, r2
 8004b66:	d004      	beq.n	8004b72 <HAL_TIMEx_MasterConfigSynchronization+0xa2>
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	4a15      	ldr	r2, [pc, #84]	; (8004bc4 <HAL_TIMEx_MasterConfigSynchronization+0xf4>)
 8004b6e:	4293      	cmp	r3, r2
 8004b70:	d10c      	bne.n	8004b8c <HAL_TIMEx_MasterConfigSynchronization+0xbc>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004b72:	68bb      	ldr	r3, [r7, #8]
 8004b74:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004b78:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8004b7a:	683b      	ldr	r3, [r7, #0]
 8004b7c:	685b      	ldr	r3, [r3, #4]
 8004b7e:	68ba      	ldr	r2, [r7, #8]
 8004b80:	4313      	orrs	r3, r2
 8004b82:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004b84:	687b      	ldr	r3, [r7, #4]
 8004b86:	681b      	ldr	r3, [r3, #0]
 8004b88:	68ba      	ldr	r2, [r7, #8]
 8004b8a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	2201      	movs	r2, #1
 8004b90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	2200      	movs	r2, #0
 8004b98:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004b9c:	2300      	movs	r3, #0
}
 8004b9e:	4618      	mov	r0, r3
 8004ba0:	3714      	adds	r7, #20
 8004ba2:	46bd      	mov	sp, r7
 8004ba4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ba8:	4770      	bx	lr
 8004baa:	bf00      	nop
 8004bac:	40010000 	.word	0x40010000
 8004bb0:	40000400 	.word	0x40000400
 8004bb4:	40000800 	.word	0x40000800
 8004bb8:	40000c00 	.word	0x40000c00
 8004bbc:	40010400 	.word	0x40010400
 8004bc0:	40014000 	.word	0x40014000
 8004bc4:	40001800 	.word	0x40001800

08004bc8 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004bc8:	b480      	push	{r7}
 8004bca:	b083      	sub	sp, #12
 8004bcc:	af00      	add	r7, sp, #0
 8004bce:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004bd0:	bf00      	nop
 8004bd2:	370c      	adds	r7, #12
 8004bd4:	46bd      	mov	sp, r7
 8004bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bda:	4770      	bx	lr

08004bdc <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004bdc:	b480      	push	{r7}
 8004bde:	b083      	sub	sp, #12
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8004be4:	bf00      	nop
 8004be6:	370c      	adds	r7, #12
 8004be8:	46bd      	mov	sp, r7
 8004bea:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004bee:	4770      	bx	lr

08004bf0 <MX_LWIP_Init>:

/**
  * LwIP initialization function
  */
void MX_LWIP_Init(void)
{
 8004bf0:	b580      	push	{r7, lr}
 8004bf2:	b084      	sub	sp, #16
 8004bf4:	af04      	add	r7, sp, #16
  /* IP addresses initialization */
  IP_ADDRESS[0] = 192;
 8004bf6:	4b98      	ldr	r3, [pc, #608]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004bf8:	22c0      	movs	r2, #192	; 0xc0
 8004bfa:	701a      	strb	r2, [r3, #0]
  IP_ADDRESS[1] = 168;
 8004bfc:	4b96      	ldr	r3, [pc, #600]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004bfe:	22a8      	movs	r2, #168	; 0xa8
 8004c00:	705a      	strb	r2, [r3, #1]
  IP_ADDRESS[2] = 12;
 8004c02:	4b95      	ldr	r3, [pc, #596]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c04:	220c      	movs	r2, #12
 8004c06:	709a      	strb	r2, [r3, #2]
  IP_ADDRESS[3] = 12;
 8004c08:	4b93      	ldr	r3, [pc, #588]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c0a:	220c      	movs	r2, #12
 8004c0c:	70da      	strb	r2, [r3, #3]
  NETMASK_ADDRESS[0] = 255;
 8004c0e:	4b93      	ldr	r3, [pc, #588]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004c10:	22ff      	movs	r2, #255	; 0xff
 8004c12:	701a      	strb	r2, [r3, #0]
  NETMASK_ADDRESS[1] = 255;
 8004c14:	4b91      	ldr	r3, [pc, #580]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004c16:	22ff      	movs	r2, #255	; 0xff
 8004c18:	705a      	strb	r2, [r3, #1]
  NETMASK_ADDRESS[2] = 255;
 8004c1a:	4b90      	ldr	r3, [pc, #576]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004c1c:	22ff      	movs	r2, #255	; 0xff
 8004c1e:	709a      	strb	r2, [r3, #2]
  NETMASK_ADDRESS[3] = 0;
 8004c20:	4b8e      	ldr	r3, [pc, #568]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004c22:	2200      	movs	r2, #0
 8004c24:	70da      	strb	r2, [r3, #3]
  GATEWAY_ADDRESS[0] = 192;
 8004c26:	4b8e      	ldr	r3, [pc, #568]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004c28:	22c0      	movs	r2, #192	; 0xc0
 8004c2a:	701a      	strb	r2, [r3, #0]
  GATEWAY_ADDRESS[1] = 168;
 8004c2c:	4b8c      	ldr	r3, [pc, #560]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004c2e:	22a8      	movs	r2, #168	; 0xa8
 8004c30:	705a      	strb	r2, [r3, #1]
  GATEWAY_ADDRESS[2] = 12;
 8004c32:	4b8b      	ldr	r3, [pc, #556]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004c34:	220c      	movs	r2, #12
 8004c36:	709a      	strb	r2, [r3, #2]
  GATEWAY_ADDRESS[3] = 1;
 8004c38:	4b89      	ldr	r3, [pc, #548]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004c3a:	2201      	movs	r2, #1
 8004c3c:	70da      	strb	r2, [r3, #3]

/* USER CODE BEGIN IP_ADDRESSES */
/* USER CODE END IP_ADDRESSES */

  /* Initilialize the LwIP stack with RTOS */
  tcpip_init( NULL, NULL );
 8004c3e:	2100      	movs	r1, #0
 8004c40:	2000      	movs	r0, #0
 8004c42:	f006 fed9 	bl	800b9f8 <tcpip_init>

  /* IP addresses initialization without DHCP (IPv4) */
  IP4_ADDR(&ipaddr, IP_ADDRESS[0], IP_ADDRESS[1], IP_ADDRESS[2], IP_ADDRESS[3]);
 8004c46:	4b84      	ldr	r3, [pc, #528]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c48:	781b      	ldrb	r3, [r3, #0]
 8004c4a:	061a      	lsls	r2, r3, #24
 8004c4c:	4b82      	ldr	r3, [pc, #520]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c4e:	785b      	ldrb	r3, [r3, #1]
 8004c50:	041b      	lsls	r3, r3, #16
 8004c52:	431a      	orrs	r2, r3
 8004c54:	4b80      	ldr	r3, [pc, #512]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c56:	789b      	ldrb	r3, [r3, #2]
 8004c58:	021b      	lsls	r3, r3, #8
 8004c5a:	4313      	orrs	r3, r2
 8004c5c:	4a7e      	ldr	r2, [pc, #504]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c5e:	78d2      	ldrb	r2, [r2, #3]
 8004c60:	4313      	orrs	r3, r2
 8004c62:	061a      	lsls	r2, r3, #24
 8004c64:	4b7c      	ldr	r3, [pc, #496]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c66:	781b      	ldrb	r3, [r3, #0]
 8004c68:	0619      	lsls	r1, r3, #24
 8004c6a:	4b7b      	ldr	r3, [pc, #492]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c6c:	785b      	ldrb	r3, [r3, #1]
 8004c6e:	041b      	lsls	r3, r3, #16
 8004c70:	4319      	orrs	r1, r3
 8004c72:	4b79      	ldr	r3, [pc, #484]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c74:	789b      	ldrb	r3, [r3, #2]
 8004c76:	021b      	lsls	r3, r3, #8
 8004c78:	430b      	orrs	r3, r1
 8004c7a:	4977      	ldr	r1, [pc, #476]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c7c:	78c9      	ldrb	r1, [r1, #3]
 8004c7e:	430b      	orrs	r3, r1
 8004c80:	021b      	lsls	r3, r3, #8
 8004c82:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004c86:	431a      	orrs	r2, r3
 8004c88:	4b73      	ldr	r3, [pc, #460]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c8a:	781b      	ldrb	r3, [r3, #0]
 8004c8c:	0619      	lsls	r1, r3, #24
 8004c8e:	4b72      	ldr	r3, [pc, #456]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c90:	785b      	ldrb	r3, [r3, #1]
 8004c92:	041b      	lsls	r3, r3, #16
 8004c94:	4319      	orrs	r1, r3
 8004c96:	4b70      	ldr	r3, [pc, #448]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004c98:	789b      	ldrb	r3, [r3, #2]
 8004c9a:	021b      	lsls	r3, r3, #8
 8004c9c:	430b      	orrs	r3, r1
 8004c9e:	496e      	ldr	r1, [pc, #440]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004ca0:	78c9      	ldrb	r1, [r1, #3]
 8004ca2:	430b      	orrs	r3, r1
 8004ca4:	0a1b      	lsrs	r3, r3, #8
 8004ca6:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004caa:	431a      	orrs	r2, r3
 8004cac:	4b6a      	ldr	r3, [pc, #424]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004cae:	781b      	ldrb	r3, [r3, #0]
 8004cb0:	0619      	lsls	r1, r3, #24
 8004cb2:	4b69      	ldr	r3, [pc, #420]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004cb4:	785b      	ldrb	r3, [r3, #1]
 8004cb6:	041b      	lsls	r3, r3, #16
 8004cb8:	4319      	orrs	r1, r3
 8004cba:	4b67      	ldr	r3, [pc, #412]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004cbc:	789b      	ldrb	r3, [r3, #2]
 8004cbe:	021b      	lsls	r3, r3, #8
 8004cc0:	430b      	orrs	r3, r1
 8004cc2:	4965      	ldr	r1, [pc, #404]	; (8004e58 <MX_LWIP_Init+0x268>)
 8004cc4:	78c9      	ldrb	r1, [r1, #3]
 8004cc6:	430b      	orrs	r3, r1
 8004cc8:	0e1b      	lsrs	r3, r3, #24
 8004cca:	4313      	orrs	r3, r2
 8004ccc:	4a65      	ldr	r2, [pc, #404]	; (8004e64 <MX_LWIP_Init+0x274>)
 8004cce:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&netmask, NETMASK_ADDRESS[0], NETMASK_ADDRESS[1] , NETMASK_ADDRESS[2], NETMASK_ADDRESS[3]);
 8004cd0:	4b62      	ldr	r3, [pc, #392]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004cd2:	781b      	ldrb	r3, [r3, #0]
 8004cd4:	061a      	lsls	r2, r3, #24
 8004cd6:	4b61      	ldr	r3, [pc, #388]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004cd8:	785b      	ldrb	r3, [r3, #1]
 8004cda:	041b      	lsls	r3, r3, #16
 8004cdc:	431a      	orrs	r2, r3
 8004cde:	4b5f      	ldr	r3, [pc, #380]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004ce0:	789b      	ldrb	r3, [r3, #2]
 8004ce2:	021b      	lsls	r3, r3, #8
 8004ce4:	4313      	orrs	r3, r2
 8004ce6:	4a5d      	ldr	r2, [pc, #372]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004ce8:	78d2      	ldrb	r2, [r2, #3]
 8004cea:	4313      	orrs	r3, r2
 8004cec:	061a      	lsls	r2, r3, #24
 8004cee:	4b5b      	ldr	r3, [pc, #364]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004cf0:	781b      	ldrb	r3, [r3, #0]
 8004cf2:	0619      	lsls	r1, r3, #24
 8004cf4:	4b59      	ldr	r3, [pc, #356]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004cf6:	785b      	ldrb	r3, [r3, #1]
 8004cf8:	041b      	lsls	r3, r3, #16
 8004cfa:	4319      	orrs	r1, r3
 8004cfc:	4b57      	ldr	r3, [pc, #348]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004cfe:	789b      	ldrb	r3, [r3, #2]
 8004d00:	021b      	lsls	r3, r3, #8
 8004d02:	430b      	orrs	r3, r1
 8004d04:	4955      	ldr	r1, [pc, #340]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d06:	78c9      	ldrb	r1, [r1, #3]
 8004d08:	430b      	orrs	r3, r1
 8004d0a:	021b      	lsls	r3, r3, #8
 8004d0c:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d10:	431a      	orrs	r2, r3
 8004d12:	4b52      	ldr	r3, [pc, #328]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d14:	781b      	ldrb	r3, [r3, #0]
 8004d16:	0619      	lsls	r1, r3, #24
 8004d18:	4b50      	ldr	r3, [pc, #320]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d1a:	785b      	ldrb	r3, [r3, #1]
 8004d1c:	041b      	lsls	r3, r3, #16
 8004d1e:	4319      	orrs	r1, r3
 8004d20:	4b4e      	ldr	r3, [pc, #312]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d22:	789b      	ldrb	r3, [r3, #2]
 8004d24:	021b      	lsls	r3, r3, #8
 8004d26:	430b      	orrs	r3, r1
 8004d28:	494c      	ldr	r1, [pc, #304]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d2a:	78c9      	ldrb	r1, [r1, #3]
 8004d2c:	430b      	orrs	r3, r1
 8004d2e:	0a1b      	lsrs	r3, r3, #8
 8004d30:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004d34:	431a      	orrs	r2, r3
 8004d36:	4b49      	ldr	r3, [pc, #292]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d38:	781b      	ldrb	r3, [r3, #0]
 8004d3a:	0619      	lsls	r1, r3, #24
 8004d3c:	4b47      	ldr	r3, [pc, #284]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d3e:	785b      	ldrb	r3, [r3, #1]
 8004d40:	041b      	lsls	r3, r3, #16
 8004d42:	4319      	orrs	r1, r3
 8004d44:	4b45      	ldr	r3, [pc, #276]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d46:	789b      	ldrb	r3, [r3, #2]
 8004d48:	021b      	lsls	r3, r3, #8
 8004d4a:	430b      	orrs	r3, r1
 8004d4c:	4943      	ldr	r1, [pc, #268]	; (8004e5c <MX_LWIP_Init+0x26c>)
 8004d4e:	78c9      	ldrb	r1, [r1, #3]
 8004d50:	430b      	orrs	r3, r1
 8004d52:	0e1b      	lsrs	r3, r3, #24
 8004d54:	4313      	orrs	r3, r2
 8004d56:	4a44      	ldr	r2, [pc, #272]	; (8004e68 <MX_LWIP_Init+0x278>)
 8004d58:	6013      	str	r3, [r2, #0]
  IP4_ADDR(&gw, GATEWAY_ADDRESS[0], GATEWAY_ADDRESS[1], GATEWAY_ADDRESS[2], GATEWAY_ADDRESS[3]);
 8004d5a:	4b41      	ldr	r3, [pc, #260]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d5c:	781b      	ldrb	r3, [r3, #0]
 8004d5e:	061a      	lsls	r2, r3, #24
 8004d60:	4b3f      	ldr	r3, [pc, #252]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d62:	785b      	ldrb	r3, [r3, #1]
 8004d64:	041b      	lsls	r3, r3, #16
 8004d66:	431a      	orrs	r2, r3
 8004d68:	4b3d      	ldr	r3, [pc, #244]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d6a:	789b      	ldrb	r3, [r3, #2]
 8004d6c:	021b      	lsls	r3, r3, #8
 8004d6e:	4313      	orrs	r3, r2
 8004d70:	4a3b      	ldr	r2, [pc, #236]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d72:	78d2      	ldrb	r2, [r2, #3]
 8004d74:	4313      	orrs	r3, r2
 8004d76:	061a      	lsls	r2, r3, #24
 8004d78:	4b39      	ldr	r3, [pc, #228]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d7a:	781b      	ldrb	r3, [r3, #0]
 8004d7c:	0619      	lsls	r1, r3, #24
 8004d7e:	4b38      	ldr	r3, [pc, #224]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d80:	785b      	ldrb	r3, [r3, #1]
 8004d82:	041b      	lsls	r3, r3, #16
 8004d84:	4319      	orrs	r1, r3
 8004d86:	4b36      	ldr	r3, [pc, #216]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d88:	789b      	ldrb	r3, [r3, #2]
 8004d8a:	021b      	lsls	r3, r3, #8
 8004d8c:	430b      	orrs	r3, r1
 8004d8e:	4934      	ldr	r1, [pc, #208]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d90:	78c9      	ldrb	r1, [r1, #3]
 8004d92:	430b      	orrs	r3, r1
 8004d94:	021b      	lsls	r3, r3, #8
 8004d96:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	4b30      	ldr	r3, [pc, #192]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004d9e:	781b      	ldrb	r3, [r3, #0]
 8004da0:	0619      	lsls	r1, r3, #24
 8004da2:	4b2f      	ldr	r3, [pc, #188]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004da4:	785b      	ldrb	r3, [r3, #1]
 8004da6:	041b      	lsls	r3, r3, #16
 8004da8:	4319      	orrs	r1, r3
 8004daa:	4b2d      	ldr	r3, [pc, #180]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004dac:	789b      	ldrb	r3, [r3, #2]
 8004dae:	021b      	lsls	r3, r3, #8
 8004db0:	430b      	orrs	r3, r1
 8004db2:	492b      	ldr	r1, [pc, #172]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004db4:	78c9      	ldrb	r1, [r1, #3]
 8004db6:	430b      	orrs	r3, r1
 8004db8:	0a1b      	lsrs	r3, r3, #8
 8004dba:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 8004dbe:	431a      	orrs	r2, r3
 8004dc0:	4b27      	ldr	r3, [pc, #156]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004dc2:	781b      	ldrb	r3, [r3, #0]
 8004dc4:	0619      	lsls	r1, r3, #24
 8004dc6:	4b26      	ldr	r3, [pc, #152]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004dc8:	785b      	ldrb	r3, [r3, #1]
 8004dca:	041b      	lsls	r3, r3, #16
 8004dcc:	4319      	orrs	r1, r3
 8004dce:	4b24      	ldr	r3, [pc, #144]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004dd0:	789b      	ldrb	r3, [r3, #2]
 8004dd2:	021b      	lsls	r3, r3, #8
 8004dd4:	430b      	orrs	r3, r1
 8004dd6:	4922      	ldr	r1, [pc, #136]	; (8004e60 <MX_LWIP_Init+0x270>)
 8004dd8:	78c9      	ldrb	r1, [r1, #3]
 8004dda:	430b      	orrs	r3, r1
 8004ddc:	0e1b      	lsrs	r3, r3, #24
 8004dde:	4313      	orrs	r3, r2
 8004de0:	4a22      	ldr	r2, [pc, #136]	; (8004e6c <MX_LWIP_Init+0x27c>)
 8004de2:	6013      	str	r3, [r2, #0]

  /* add the network interface (IPv4/IPv6) with RTOS */
  netif_add(&gnetif, &ipaddr, &netmask, &gw, NULL, &ethernetif_init, &tcpip_input);
 8004de4:	4b22      	ldr	r3, [pc, #136]	; (8004e70 <MX_LWIP_Init+0x280>)
 8004de6:	9302      	str	r3, [sp, #8]
 8004de8:	4b22      	ldr	r3, [pc, #136]	; (8004e74 <MX_LWIP_Init+0x284>)
 8004dea:	9301      	str	r3, [sp, #4]
 8004dec:	2300      	movs	r3, #0
 8004dee:	9300      	str	r3, [sp, #0]
 8004df0:	4b1e      	ldr	r3, [pc, #120]	; (8004e6c <MX_LWIP_Init+0x27c>)
 8004df2:	4a1d      	ldr	r2, [pc, #116]	; (8004e68 <MX_LWIP_Init+0x278>)
 8004df4:	491b      	ldr	r1, [pc, #108]	; (8004e64 <MX_LWIP_Init+0x274>)
 8004df6:	4820      	ldr	r0, [pc, #128]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004df8:	f007 fbc8 	bl	800c58c <netif_add>

  /* Registers the default network interface */
  netif_set_default(&gnetif);
 8004dfc:	481e      	ldr	r0, [pc, #120]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004dfe:	f007 fd77 	bl	800c8f0 <netif_set_default>

  if (netif_is_link_up(&gnetif))
 8004e02:	4b1d      	ldr	r3, [pc, #116]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004e04:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8004e08:	089b      	lsrs	r3, r3, #2
 8004e0a:	f003 0301 	and.w	r3, r3, #1
 8004e0e:	b2db      	uxtb	r3, r3
 8004e10:	2b00      	cmp	r3, #0
 8004e12:	d003      	beq.n	8004e1c <MX_LWIP_Init+0x22c>
  {
    /* When the netif is fully configured this function must be called */
    netif_set_up(&gnetif);
 8004e14:	4818      	ldr	r0, [pc, #96]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004e16:	f007 fd7b 	bl	800c910 <netif_set_up>
 8004e1a:	e002      	b.n	8004e22 <MX_LWIP_Init+0x232>
  }
  else
  {
    /* When the netif link is down this function must be called */
    netif_set_down(&gnetif);
 8004e1c:	4816      	ldr	r0, [pc, #88]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004e1e:	f007 fde3 	bl	800c9e8 <netif_set_down>
  }

  /* Set the link callback function, this function is called on change of link status*/
  netif_set_link_callback(&gnetif, ethernet_link_status_updated);
 8004e22:	4916      	ldr	r1, [pc, #88]	; (8004e7c <MX_LWIP_Init+0x28c>)
 8004e24:	4814      	ldr	r0, [pc, #80]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004e26:	f007 fe75 	bl	800cb14 <netif_set_link_callback>

  /* Create the Ethernet link handler thread */
/* USER CODE BEGIN H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8004e2a:	2224      	movs	r2, #36	; 0x24
 8004e2c:	2100      	movs	r1, #0
 8004e2e:	4814      	ldr	r0, [pc, #80]	; (8004e80 <MX_LWIP_Init+0x290>)
 8004e30:	f012 f87d 	bl	8016f2e <memset>
  attributes.name = "EthLink";
 8004e34:	4b12      	ldr	r3, [pc, #72]	; (8004e80 <MX_LWIP_Init+0x290>)
 8004e36:	4a13      	ldr	r2, [pc, #76]	; (8004e84 <MX_LWIP_Init+0x294>)
 8004e38:	601a      	str	r2, [r3, #0]
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8004e3a:	4b11      	ldr	r3, [pc, #68]	; (8004e80 <MX_LWIP_Init+0x290>)
 8004e3c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8004e40:	615a      	str	r2, [r3, #20]
  attributes.priority = osPriorityBelowNormal;
 8004e42:	4b0f      	ldr	r3, [pc, #60]	; (8004e80 <MX_LWIP_Init+0x290>)
 8004e44:	2210      	movs	r2, #16
 8004e46:	619a      	str	r2, [r3, #24]
  osThreadNew(ethernet_link_thread, &gnetif, &attributes);
 8004e48:	4a0d      	ldr	r2, [pc, #52]	; (8004e80 <MX_LWIP_Init+0x290>)
 8004e4a:	490b      	ldr	r1, [pc, #44]	; (8004e78 <MX_LWIP_Init+0x288>)
 8004e4c:	480e      	ldr	r0, [pc, #56]	; (8004e88 <MX_LWIP_Init+0x298>)
 8004e4e:	f000 fd8e 	bl	800596e <osThreadNew>
/* USER CODE END H7_OS_THREAD_NEW_CMSIS_RTOS_V2 */

/* USER CODE BEGIN 3 */

/* USER CODE END 3 */
}
 8004e52:	bf00      	nop
 8004e54:	46bd      	mov	sp, r7
 8004e56:	bd80      	pop	{r7, pc}
 8004e58:	200002dc 	.word	0x200002dc
 8004e5c:	200002e0 	.word	0x200002e0
 8004e60:	200002e4 	.word	0x200002e4
 8004e64:	200002d0 	.word	0x200002d0
 8004e68:	200002d4 	.word	0x200002d4
 8004e6c:	200002d8 	.word	0x200002d8
 8004e70:	0800b909 	.word	0x0800b909
 8004e74:	08005331 	.word	0x08005331
 8004e78:	2000029c 	.word	0x2000029c
 8004e7c:	08004e8d 	.word	0x08004e8d
 8004e80:	200002e8 	.word	0x200002e8
 8004e84:	08018114 	.word	0x08018114
 8004e88:	08005615 	.word	0x08005615

08004e8c <ethernet_link_status_updated>:
  * @brief  Notify the User about the network interface config status
  * @param  netif: the network interface
  * @retval None
  */
static void ethernet_link_status_updated(struct netif *netif)
{
 8004e8c:	b480      	push	{r7}
 8004e8e:	b083      	sub	sp, #12
 8004e90:	af00      	add	r7, sp, #0
 8004e92:	6078      	str	r0, [r7, #4]
  else /* netif is down */
  {
/* USER CODE BEGIN 6 */
/* USER CODE END 6 */
  }
}
 8004e94:	bf00      	nop
 8004e96:	370c      	adds	r7, #12
 8004e98:	46bd      	mov	sp, r7
 8004e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e9e:	4770      	bx	lr

08004ea0 <HAL_ETH_RxCpltCallback>:
  * @brief  Ethernet Rx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_RxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ea0:	b580      	push	{r7, lr}
 8004ea2:	b082      	sub	sp, #8
 8004ea4:	af00      	add	r7, sp, #0
 8004ea6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(RxPktSemaphore);
 8004ea8:	4b04      	ldr	r3, [pc, #16]	; (8004ebc <HAL_ETH_RxCpltCallback+0x1c>)
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4618      	mov	r0, r3
 8004eae:	f000 fff5 	bl	8005e9c <osSemaphoreRelease>
}
 8004eb2:	bf00      	nop
 8004eb4:	3708      	adds	r7, #8
 8004eb6:	46bd      	mov	sp, r7
 8004eb8:	bd80      	pop	{r7, pc}
 8004eba:	bf00      	nop
 8004ebc:	20004dd8 	.word	0x20004dd8

08004ec0 <HAL_ETH_TxCpltCallback>:
  * @brief  Ethernet Tx Transfer completed callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_TxCpltCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ec0:	b580      	push	{r7, lr}
 8004ec2:	b082      	sub	sp, #8
 8004ec4:	af00      	add	r7, sp, #0
 8004ec6:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(TxPktSemaphore);
 8004ec8:	4b04      	ldr	r3, [pc, #16]	; (8004edc <HAL_ETH_TxCpltCallback+0x1c>)
 8004eca:	681b      	ldr	r3, [r3, #0]
 8004ecc:	4618      	mov	r0, r3
 8004ece:	f000 ffe5 	bl	8005e9c <osSemaphoreRelease>
}
 8004ed2:	bf00      	nop
 8004ed4:	3708      	adds	r7, #8
 8004ed6:	46bd      	mov	sp, r7
 8004ed8:	bd80      	pop	{r7, pc}
 8004eda:	bf00      	nop
 8004edc:	20004ddc 	.word	0x20004ddc

08004ee0 <HAL_ETH_ErrorCallback>:
  * @brief  Ethernet DMA transfer error callback
  * @param  handlerEth: ETH handler
  * @retval None
  */
void HAL_ETH_ErrorCallback(ETH_HandleTypeDef *handlerEth)
{
 8004ee0:	b580      	push	{r7, lr}
 8004ee2:	b082      	sub	sp, #8
 8004ee4:	af00      	add	r7, sp, #0
 8004ee6:	6078      	str	r0, [r7, #4]
  if((HAL_ETH_GetDMAError(handlerEth) & ETH_DMASR_RBUS) == ETH_DMASR_RBUS)
 8004ee8:	6878      	ldr	r0, [r7, #4]
 8004eea:	f7fd fb1b 	bl	8002524 <HAL_ETH_GetDMAError>
 8004eee:	4603      	mov	r3, r0
 8004ef0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8004ef4:	2b80      	cmp	r3, #128	; 0x80
 8004ef6:	d104      	bne.n	8004f02 <HAL_ETH_ErrorCallback+0x22>
  {
     osSemaphoreRelease(RxPktSemaphore);
 8004ef8:	4b04      	ldr	r3, [pc, #16]	; (8004f0c <HAL_ETH_ErrorCallback+0x2c>)
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f000 ffcd 	bl	8005e9c <osSemaphoreRelease>
  }
}
 8004f02:	bf00      	nop
 8004f04:	3708      	adds	r7, #8
 8004f06:	46bd      	mov	sp, r7
 8004f08:	bd80      	pop	{r7, pc}
 8004f0a:	bf00      	nop
 8004f0c:	20004dd8 	.word	0x20004dd8

08004f10 <low_level_init>:
 *
 * @param netif the already initialized lwip network interface structure
 *        for this ethernetif
 */
static void low_level_init(struct netif *netif)
{
 8004f10:	b580      	push	{r7, lr}
 8004f12:	b0aa      	sub	sp, #168	; 0xa8
 8004f14:	af00      	add	r7, sp, #0
 8004f16:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_eth_init_status = HAL_OK;
 8004f18:	2300      	movs	r3, #0
 8004f1a:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f
/* USER CODE BEGIN OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  osThreadAttr_t attributes;
/* USER CODE END OS_THREAD_ATTR_CMSIS_RTOS_V2 */
  uint32_t duplex, speed = 0;
 8004f1e:	2300      	movs	r3, #0
 8004f20:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
  int32_t PHYLinkState = 0;
 8004f24:	2300      	movs	r3, #0
 8004f26:	f8c7 3098 	str.w	r3, [r7, #152]	; 0x98
  ETH_MACConfigTypeDef MACConf = {0};
 8004f2a:	f107 0310 	add.w	r3, r7, #16
 8004f2e:	2264      	movs	r2, #100	; 0x64
 8004f30:	2100      	movs	r1, #0
 8004f32:	4618      	mov	r0, r3
 8004f34:	f011 fffb 	bl	8016f2e <memset>
  /* Start ETH HAL Init */

   uint8_t MACAddr[6] ;
  heth.Instance = ETH;
 8004f38:	4b85      	ldr	r3, [pc, #532]	; (8005150 <low_level_init+0x240>)
 8004f3a:	4a86      	ldr	r2, [pc, #536]	; (8005154 <low_level_init+0x244>)
 8004f3c:	601a      	str	r2, [r3, #0]
  MACAddr[0] = 0x00;
 8004f3e:	2300      	movs	r3, #0
 8004f40:	723b      	strb	r3, [r7, #8]
  MACAddr[1] = 0x80;
 8004f42:	2380      	movs	r3, #128	; 0x80
 8004f44:	727b      	strb	r3, [r7, #9]
  MACAddr[2] = 0xE1;
 8004f46:	23e1      	movs	r3, #225	; 0xe1
 8004f48:	72bb      	strb	r3, [r7, #10]
  MACAddr[3] = 0x00;
 8004f4a:	2300      	movs	r3, #0
 8004f4c:	72fb      	strb	r3, [r7, #11]
  MACAddr[4] = 0x00;
 8004f4e:	2300      	movs	r3, #0
 8004f50:	733b      	strb	r3, [r7, #12]
  MACAddr[5] = 0x00;
 8004f52:	2300      	movs	r3, #0
 8004f54:	737b      	strb	r3, [r7, #13]
  heth.Init.MACAddr = &MACAddr[0];
 8004f56:	4a7e      	ldr	r2, [pc, #504]	; (8005150 <low_level_init+0x240>)
 8004f58:	f107 0308 	add.w	r3, r7, #8
 8004f5c:	6053      	str	r3, [r2, #4]
  heth.Init.MediaInterface = HAL_ETH_RMII_MODE;
 8004f5e:	4b7c      	ldr	r3, [pc, #496]	; (8005150 <low_level_init+0x240>)
 8004f60:	f44f 0200 	mov.w	r2, #8388608	; 0x800000
 8004f64:	609a      	str	r2, [r3, #8]
  heth.Init.TxDesc = DMATxDscrTab;
 8004f66:	4b7a      	ldr	r3, [pc, #488]	; (8005150 <low_level_init+0x240>)
 8004f68:	4a7b      	ldr	r2, [pc, #492]	; (8005158 <low_level_init+0x248>)
 8004f6a:	60da      	str	r2, [r3, #12]
  heth.Init.RxDesc = DMARxDscrTab;
 8004f6c:	4b78      	ldr	r3, [pc, #480]	; (8005150 <low_level_init+0x240>)
 8004f6e:	4a7b      	ldr	r2, [pc, #492]	; (800515c <low_level_init+0x24c>)
 8004f70:	611a      	str	r2, [r3, #16]
  heth.Init.RxBuffLen = 1536;
 8004f72:	4b77      	ldr	r3, [pc, #476]	; (8005150 <low_level_init+0x240>)
 8004f74:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 8004f78:	615a      	str	r2, [r3, #20]

  /* USER CODE BEGIN MACADDRESS */

  /* USER CODE END MACADDRESS */

  hal_eth_init_status = HAL_ETH_Init(&heth);
 8004f7a:	4875      	ldr	r0, [pc, #468]	; (8005150 <low_level_init+0x240>)
 8004f7c:	f7fc fc94 	bl	80018a8 <HAL_ETH_Init>
 8004f80:	4603      	mov	r3, r0
 8004f82:	f887 309f 	strb.w	r3, [r7, #159]	; 0x9f

  memset(&TxConfig, 0 , sizeof(ETH_TxPacketConfig));
 8004f86:	2238      	movs	r2, #56	; 0x38
 8004f88:	2100      	movs	r1, #0
 8004f8a:	4875      	ldr	r0, [pc, #468]	; (8005160 <low_level_init+0x250>)
 8004f8c:	f011 ffcf 	bl	8016f2e <memset>
  TxConfig.Attributes = ETH_TX_PACKETS_FEATURES_CSUM | ETH_TX_PACKETS_FEATURES_CRCPAD;
 8004f90:	4b73      	ldr	r3, [pc, #460]	; (8005160 <low_level_init+0x250>)
 8004f92:	2221      	movs	r2, #33	; 0x21
 8004f94:	601a      	str	r2, [r3, #0]
  TxConfig.ChecksumCtrl = ETH_CHECKSUM_IPHDR_PAYLOAD_INSERT_PHDR_CALC;
 8004f96:	4b72      	ldr	r3, [pc, #456]	; (8005160 <low_level_init+0x250>)
 8004f98:	f44f 0240 	mov.w	r2, #12582912	; 0xc00000
 8004f9c:	615a      	str	r2, [r3, #20]
  TxConfig.CRCPadCtrl = ETH_CRC_PAD_INSERT;
 8004f9e:	4b70      	ldr	r3, [pc, #448]	; (8005160 <low_level_init+0x250>)
 8004fa0:	2200      	movs	r2, #0
 8004fa2:	611a      	str	r2, [r3, #16]

  /* End ETH HAL Init */

  /* Initialize the RX POOL */
  LWIP_MEMPOOL_INIT(RX_POOL);
 8004fa4:	486f      	ldr	r0, [pc, #444]	; (8005164 <low_level_init+0x254>)
 8004fa6:	f007 f9ab 	bl	800c300 <memp_init_pool>

#if LWIP_ARP || LWIP_ETHERNET

  /* set MAC hardware address length */
  netif->hwaddr_len = ETH_HWADDR_LEN;
 8004faa:	687b      	ldr	r3, [r7, #4]
 8004fac:	2206      	movs	r2, #6
 8004fae:	f883 202c 	strb.w	r2, [r3, #44]	; 0x2c

  /* set MAC hardware address */
  netif->hwaddr[0] =  heth.Init.MACAddr[0];
 8004fb2:	4b67      	ldr	r3, [pc, #412]	; (8005150 <low_level_init+0x240>)
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	781a      	ldrb	r2, [r3, #0]
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	f883 2026 	strb.w	r2, [r3, #38]	; 0x26
  netif->hwaddr[1] =  heth.Init.MACAddr[1];
 8004fbe:	4b64      	ldr	r3, [pc, #400]	; (8005150 <low_level_init+0x240>)
 8004fc0:	685b      	ldr	r3, [r3, #4]
 8004fc2:	785a      	ldrb	r2, [r3, #1]
 8004fc4:	687b      	ldr	r3, [r7, #4]
 8004fc6:	f883 2027 	strb.w	r2, [r3, #39]	; 0x27
  netif->hwaddr[2] =  heth.Init.MACAddr[2];
 8004fca:	4b61      	ldr	r3, [pc, #388]	; (8005150 <low_level_init+0x240>)
 8004fcc:	685b      	ldr	r3, [r3, #4]
 8004fce:	789a      	ldrb	r2, [r3, #2]
 8004fd0:	687b      	ldr	r3, [r7, #4]
 8004fd2:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
  netif->hwaddr[3] =  heth.Init.MACAddr[3];
 8004fd6:	4b5e      	ldr	r3, [pc, #376]	; (8005150 <low_level_init+0x240>)
 8004fd8:	685b      	ldr	r3, [r3, #4]
 8004fda:	78da      	ldrb	r2, [r3, #3]
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	f883 2029 	strb.w	r2, [r3, #41]	; 0x29
  netif->hwaddr[4] =  heth.Init.MACAddr[4];
 8004fe2:	4b5b      	ldr	r3, [pc, #364]	; (8005150 <low_level_init+0x240>)
 8004fe4:	685b      	ldr	r3, [r3, #4]
 8004fe6:	791a      	ldrb	r2, [r3, #4]
 8004fe8:	687b      	ldr	r3, [r7, #4]
 8004fea:	f883 202a 	strb.w	r2, [r3, #42]	; 0x2a
  netif->hwaddr[5] =  heth.Init.MACAddr[5];
 8004fee:	4b58      	ldr	r3, [pc, #352]	; (8005150 <low_level_init+0x240>)
 8004ff0:	685b      	ldr	r3, [r3, #4]
 8004ff2:	795a      	ldrb	r2, [r3, #5]
 8004ff4:	687b      	ldr	r3, [r7, #4]
 8004ff6:	f883 202b 	strb.w	r2, [r3, #43]	; 0x2b

  /* maximum transfer unit */
  netif->mtu = ETH_MAX_PAYLOAD;
 8004ffa:	687b      	ldr	r3, [r7, #4]
 8004ffc:	f240 52dc 	movw	r2, #1500	; 0x5dc
 8005000:	849a      	strh	r2, [r3, #36]	; 0x24

  /* Accept broadcast address and ARP traffic */
  /* don't set NETIF_FLAG_ETHARP if this device is not an ethernet one */
  #if LWIP_ARP
    netif->flags |= NETIF_FLAG_BROADCAST | NETIF_FLAG_ETHARP;
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005008:	f043 030a 	orr.w	r3, r3, #10
 800500c:	b2da      	uxtb	r2, r3
 800500e:	687b      	ldr	r3, [r7, #4]
 8005010:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
  #else
    netif->flags |= NETIF_FLAG_BROADCAST;
  #endif /* LWIP_ARP */

  /* create a binary semaphore used for informing ethernetif of frame reception */
  RxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005014:	2200      	movs	r2, #0
 8005016:	2101      	movs	r1, #1
 8005018:	2001      	movs	r0, #1
 800501a:	f000 fe64 	bl	8005ce6 <osSemaphoreNew>
 800501e:	4603      	mov	r3, r0
 8005020:	4a51      	ldr	r2, [pc, #324]	; (8005168 <low_level_init+0x258>)
 8005022:	6013      	str	r3, [r2, #0]

  /* create a binary semaphore used for informing ethernetif of frame transmission */
  TxPktSemaphore = osSemaphoreNew(1, 1, NULL);
 8005024:	2200      	movs	r2, #0
 8005026:	2101      	movs	r1, #1
 8005028:	2001      	movs	r0, #1
 800502a:	f000 fe5c 	bl	8005ce6 <osSemaphoreNew>
 800502e:	4603      	mov	r3, r0
 8005030:	4a4e      	ldr	r2, [pc, #312]	; (800516c <low_level_init+0x25c>)
 8005032:	6013      	str	r3, [r2, #0]

  /* create the task that handles the ETH_MAC */
/* USER CODE BEGIN OS_THREAD_NEW_CMSIS_RTOS_V2 */
  memset(&attributes, 0x0, sizeof(osThreadAttr_t));
 8005034:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005038:	2224      	movs	r2, #36	; 0x24
 800503a:	2100      	movs	r1, #0
 800503c:	4618      	mov	r0, r3
 800503e:	f011 ff76 	bl	8016f2e <memset>
  attributes.name = "EthIf";
 8005042:	4b4b      	ldr	r3, [pc, #300]	; (8005170 <low_level_init+0x260>)
 8005044:	677b      	str	r3, [r7, #116]	; 0x74
  attributes.stack_size = INTERFACE_THREAD_STACK_SIZE;
 8005046:	f44f 73af 	mov.w	r3, #350	; 0x15e
 800504a:	f8c7 3088 	str.w	r3, [r7, #136]	; 0x88
  attributes.priority = osPriorityRealtime;
 800504e:	2330      	movs	r3, #48	; 0x30
 8005050:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
  osThreadNew(ethernetif_input, netif, &attributes);
 8005054:	f107 0374 	add.w	r3, r7, #116	; 0x74
 8005058:	461a      	mov	r2, r3
 800505a:	6879      	ldr	r1, [r7, #4]
 800505c:	4845      	ldr	r0, [pc, #276]	; (8005174 <low_level_init+0x264>)
 800505e:	f000 fc86 	bl	800596e <osThreadNew>

/* USER CODE BEGIN PHY_PRE_CONFIG */

/* USER CODE END PHY_PRE_CONFIG */
  /* Set PHY IO functions */
  LAN8742_RegisterBusIO(&LAN8742, &LAN8742_IOCtx);
 8005062:	4945      	ldr	r1, [pc, #276]	; (8005178 <low_level_init+0x268>)
 8005064:	4845      	ldr	r0, [pc, #276]	; (800517c <low_level_init+0x26c>)
 8005066:	f7fc f976 	bl	8001356 <LAN8742_RegisterBusIO>

  /* Initialize the LAN8742 ETH PHY */
  LAN8742_Init(&LAN8742);
 800506a:	4844      	ldr	r0, [pc, #272]	; (800517c <low_level_init+0x26c>)
 800506c:	f7fc f9a5 	bl	80013ba <LAN8742_Init>

  if (hal_eth_init_status == HAL_OK)
 8005070:	f897 309f 	ldrb.w	r3, [r7, #159]	; 0x9f
 8005074:	2b00      	cmp	r3, #0
 8005076:	d164      	bne.n	8005142 <low_level_init+0x232>
  {
    PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005078:	4840      	ldr	r0, [pc, #256]	; (800517c <low_level_init+0x26c>)
 800507a:	f7fc fa46 	bl	800150a <LAN8742_GetLinkState>
 800507e:	f8c7 0098 	str.w	r0, [r7, #152]	; 0x98

    /* Get link state */
    if(PHYLinkState <= LAN8742_STATUS_LINK_DOWN)
 8005082:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 8005086:	2b01      	cmp	r3, #1
 8005088:	dc06      	bgt.n	8005098 <low_level_init+0x188>
    {
      netif_set_link_down(netif);
 800508a:	6878      	ldr	r0, [r7, #4]
 800508c:	f007 fd12 	bl	800cab4 <netif_set_link_down>
      netif_set_down(netif);
 8005090:	6878      	ldr	r0, [r7, #4]
 8005092:	f007 fca9 	bl	800c9e8 <netif_set_down>
#endif /* LWIP_ARP || LWIP_ETHERNET */

/* USER CODE BEGIN LOW_LEVEL_INIT */

/* USER CODE END LOW_LEVEL_INIT */
}
 8005096:	e056      	b.n	8005146 <low_level_init+0x236>
      switch (PHYLinkState)
 8005098:	f8d7 3098 	ldr.w	r3, [r7, #152]	; 0x98
 800509c:	3b02      	subs	r3, #2
 800509e:	2b03      	cmp	r3, #3
 80050a0:	d82a      	bhi.n	80050f8 <low_level_init+0x1e8>
 80050a2:	a201      	add	r2, pc, #4	; (adr r2, 80050a8 <low_level_init+0x198>)
 80050a4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80050a8:	080050b9 	.word	0x080050b9
 80050ac:	080050cb 	.word	0x080050cb
 80050b0:	080050db 	.word	0x080050db
 80050b4:	080050eb 	.word	0x080050eb
        duplex = ETH_FULLDUPLEX_MODE;
 80050b8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050bc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80050c0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050c4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80050c8:	e01f      	b.n	800510a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80050ca:	2300      	movs	r3, #0
 80050cc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 80050d0:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80050d4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80050d8:	e017      	b.n	800510a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80050da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050de:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80050e2:	2300      	movs	r3, #0
 80050e4:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80050e8:	e00f      	b.n	800510a <low_level_init+0x1fa>
        duplex = ETH_HALFDUPLEX_MODE;
 80050ea:	2300      	movs	r3, #0
 80050ec:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_10M;
 80050f0:	2300      	movs	r3, #0
 80050f2:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 80050f6:	e008      	b.n	800510a <low_level_init+0x1fa>
        duplex = ETH_FULLDUPLEX_MODE;
 80050f8:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80050fc:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
        speed = ETH_SPEED_100M;
 8005100:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 8005104:	f8c7 30a0 	str.w	r3, [r7, #160]	; 0xa0
        break;
 8005108:	bf00      	nop
    HAL_ETH_GetMACConfig(&heth, &MACConf);
 800510a:	f107 0310 	add.w	r3, r7, #16
 800510e:	4619      	mov	r1, r3
 8005110:	480f      	ldr	r0, [pc, #60]	; (8005150 <low_level_init+0x240>)
 8005112:	f7fd f8ad 	bl	8002270 <HAL_ETH_GetMACConfig>
    MACConf.DuplexMode = duplex;
 8005116:	f8d7 30a4 	ldr.w	r3, [r7, #164]	; 0xa4
 800511a:	62bb      	str	r3, [r7, #40]	; 0x28
    MACConf.Speed = speed;
 800511c:	f8d7 30a0 	ldr.w	r3, [r7, #160]	; 0xa0
 8005120:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005122:	f107 0310 	add.w	r3, r7, #16
 8005126:	4619      	mov	r1, r3
 8005128:	4809      	ldr	r0, [pc, #36]	; (8005150 <low_level_init+0x240>)
 800512a:	f7fd f98b 	bl	8002444 <HAL_ETH_SetMACConfig>
    HAL_ETH_Start_IT(&heth);
 800512e:	4808      	ldr	r0, [pc, #32]	; (8005150 <low_level_init+0x240>)
 8005130:	f7fc fc38 	bl	80019a4 <HAL_ETH_Start_IT>
    netif_set_up(netif);
 8005134:	6878      	ldr	r0, [r7, #4]
 8005136:	f007 fbeb 	bl	800c910 <netif_set_up>
    netif_set_link_up(netif);
 800513a:	6878      	ldr	r0, [r7, #4]
 800513c:	f007 fc86 	bl	800ca4c <netif_set_link_up>
}
 8005140:	e001      	b.n	8005146 <low_level_init+0x236>
    Error_Handler();
 8005142:	f7fb fd07 	bl	8000b54 <Error_Handler>
}
 8005146:	bf00      	nop
 8005148:	37a8      	adds	r7, #168	; 0xa8
 800514a:	46bd      	mov	sp, r7
 800514c:	bd80      	pop	{r7, pc}
 800514e:	bf00      	nop
 8005150:	20004de0 	.word	0x20004de0
 8005154:	40028000 	.word	0x40028000
 8005158:	20004d38 	.word	0x20004d38
 800515c:	20004c98 	.word	0x20004c98
 8005160:	20004e90 	.word	0x20004e90
 8005164:	0801b6c0 	.word	0x0801b6c0
 8005168:	20004dd8 	.word	0x20004dd8
 800516c:	20004ddc 	.word	0x20004ddc
 8005170:	0801811c 	.word	0x0801811c
 8005174:	080052dd 	.word	0x080052dd
 8005178:	2000000c 	.word	0x2000000c
 800517c:	20004ec8 	.word	0x20004ec8

08005180 <low_level_output>:
 *       to become available since the stack doesn't retry to send a packet
 *       dropped because of memory failure (except for the TCP timers).
 */

static err_t low_level_output(struct netif *netif, struct pbuf *p)
{
 8005180:	b580      	push	{r7, lr}
 8005182:	b092      	sub	sp, #72	; 0x48
 8005184:	af00      	add	r7, sp, #0
 8005186:	6078      	str	r0, [r7, #4]
 8005188:	6039      	str	r1, [r7, #0]
  uint32_t i = 0U;
 800518a:	2300      	movs	r3, #0
 800518c:	647b      	str	r3, [r7, #68]	; 0x44
  struct pbuf *q = NULL;
 800518e:	2300      	movs	r3, #0
 8005190:	643b      	str	r3, [r7, #64]	; 0x40
  err_t errval = ERR_OK;
 8005192:	2300      	movs	r3, #0
 8005194:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  ETH_BufferTypeDef Txbuffer[ETH_TX_DESC_CNT] = {0};
 8005198:	f107 030c 	add.w	r3, r7, #12
 800519c:	2230      	movs	r2, #48	; 0x30
 800519e:	2100      	movs	r1, #0
 80051a0:	4618      	mov	r0, r3
 80051a2:	f011 fec4 	bl	8016f2e <memset>

  memset(Txbuffer, 0 , ETH_TX_DESC_CNT*sizeof(ETH_BufferTypeDef));
 80051a6:	f107 030c 	add.w	r3, r7, #12
 80051aa:	2230      	movs	r2, #48	; 0x30
 80051ac:	2100      	movs	r1, #0
 80051ae:	4618      	mov	r0, r3
 80051b0:	f011 febd 	bl	8016f2e <memset>

  for(q = p; q != NULL; q = q->next)
 80051b4:	683b      	ldr	r3, [r7, #0]
 80051b6:	643b      	str	r3, [r7, #64]	; 0x40
 80051b8:	e045      	b.n	8005246 <low_level_output+0xc6>
  {
    if(i >= ETH_TX_DESC_CNT)
 80051ba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051bc:	2b03      	cmp	r3, #3
 80051be:	d902      	bls.n	80051c6 <low_level_output+0x46>
      return ERR_IF;
 80051c0:	f06f 030b 	mvn.w	r3, #11
 80051c4:	e065      	b.n	8005292 <low_level_output+0x112>

    Txbuffer[i].buffer = q->payload;
 80051c6:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051c8:	6859      	ldr	r1, [r3, #4]
 80051ca:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051cc:	4613      	mov	r3, r2
 80051ce:	005b      	lsls	r3, r3, #1
 80051d0:	4413      	add	r3, r2
 80051d2:	009b      	lsls	r3, r3, #2
 80051d4:	3348      	adds	r3, #72	; 0x48
 80051d6:	443b      	add	r3, r7
 80051d8:	3b3c      	subs	r3, #60	; 0x3c
 80051da:	6019      	str	r1, [r3, #0]
    Txbuffer[i].len = q->len;
 80051dc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 80051de:	895b      	ldrh	r3, [r3, #10]
 80051e0:	4619      	mov	r1, r3
 80051e2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 80051e4:	4613      	mov	r3, r2
 80051e6:	005b      	lsls	r3, r3, #1
 80051e8:	4413      	add	r3, r2
 80051ea:	009b      	lsls	r3, r3, #2
 80051ec:	3348      	adds	r3, #72	; 0x48
 80051ee:	443b      	add	r3, r7
 80051f0:	3b38      	subs	r3, #56	; 0x38
 80051f2:	6019      	str	r1, [r3, #0]

    if(i>0)
 80051f4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051f6:	2b00      	cmp	r3, #0
 80051f8:	d011      	beq.n	800521e <low_level_output+0x9e>
    {
      Txbuffer[i-1].next = &Txbuffer[i];
 80051fa:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80051fc:	1e5a      	subs	r2, r3, #1
 80051fe:	f107 000c 	add.w	r0, r7, #12
 8005202:	6c79      	ldr	r1, [r7, #68]	; 0x44
 8005204:	460b      	mov	r3, r1
 8005206:	005b      	lsls	r3, r3, #1
 8005208:	440b      	add	r3, r1
 800520a:	009b      	lsls	r3, r3, #2
 800520c:	18c1      	adds	r1, r0, r3
 800520e:	4613      	mov	r3, r2
 8005210:	005b      	lsls	r3, r3, #1
 8005212:	4413      	add	r3, r2
 8005214:	009b      	lsls	r3, r3, #2
 8005216:	3348      	adds	r3, #72	; 0x48
 8005218:	443b      	add	r3, r7
 800521a:	3b34      	subs	r3, #52	; 0x34
 800521c:	6019      	str	r1, [r3, #0]
    }

    if(q->next == NULL)
 800521e:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	2b00      	cmp	r3, #0
 8005224:	d109      	bne.n	800523a <low_level_output+0xba>
    {
      Txbuffer[i].next = NULL;
 8005226:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8005228:	4613      	mov	r3, r2
 800522a:	005b      	lsls	r3, r3, #1
 800522c:	4413      	add	r3, r2
 800522e:	009b      	lsls	r3, r3, #2
 8005230:	3348      	adds	r3, #72	; 0x48
 8005232:	443b      	add	r3, r7
 8005234:	3b34      	subs	r3, #52	; 0x34
 8005236:	2200      	movs	r2, #0
 8005238:	601a      	str	r2, [r3, #0]
    }

    i++;
 800523a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 800523c:	3301      	adds	r3, #1
 800523e:	647b      	str	r3, [r7, #68]	; 0x44
  for(q = p; q != NULL; q = q->next)
 8005240:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005242:	681b      	ldr	r3, [r3, #0]
 8005244:	643b      	str	r3, [r7, #64]	; 0x40
 8005246:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8005248:	2b00      	cmp	r3, #0
 800524a:	d1b6      	bne.n	80051ba <low_level_output+0x3a>
  }

  TxConfig.Length = p->tot_len;
 800524c:	683b      	ldr	r3, [r7, #0]
 800524e:	891b      	ldrh	r3, [r3, #8]
 8005250:	461a      	mov	r2, r3
 8005252:	4b12      	ldr	r3, [pc, #72]	; (800529c <low_level_output+0x11c>)
 8005254:	605a      	str	r2, [r3, #4]
  TxConfig.TxBuffer = Txbuffer;
 8005256:	4a11      	ldr	r2, [pc, #68]	; (800529c <low_level_output+0x11c>)
 8005258:	f107 030c 	add.w	r3, r7, #12
 800525c:	6093      	str	r3, [r2, #8]
  TxConfig.pData = p;
 800525e:	4a0f      	ldr	r2, [pc, #60]	; (800529c <low_level_output+0x11c>)
 8005260:	683b      	ldr	r3, [r7, #0]
 8005262:	6353      	str	r3, [r2, #52]	; 0x34

  pbuf_ref(p);
 8005264:	6838      	ldr	r0, [r7, #0]
 8005266:	f008 f8a9 	bl	800d3bc <pbuf_ref>

  HAL_ETH_Transmit_IT(&heth, &TxConfig);
 800526a:	490c      	ldr	r1, [pc, #48]	; (800529c <low_level_output+0x11c>)
 800526c:	480c      	ldr	r0, [pc, #48]	; (80052a0 <low_level_output+0x120>)
 800526e:	f7fc fca6 	bl	8001bbe <HAL_ETH_Transmit_IT>
  while(osSemaphoreAcquire(TxPktSemaphore, TIME_WAITING_FOR_INPUT)!=osOK)
 8005272:	bf00      	nop
 8005274:	4b0b      	ldr	r3, [pc, #44]	; (80052a4 <low_level_output+0x124>)
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	f04f 31ff 	mov.w	r1, #4294967295
 800527c:	4618      	mov	r0, r3
 800527e:	f000 fdbb 	bl	8005df8 <osSemaphoreAcquire>
 8005282:	4603      	mov	r3, r0
 8005284:	2b00      	cmp	r3, #0
 8005286:	d1f5      	bne.n	8005274 <low_level_output+0xf4>

  {
  }

  HAL_ETH_ReleaseTxPacket(&heth);
 8005288:	4805      	ldr	r0, [pc, #20]	; (80052a0 <low_level_output+0x120>)
 800528a:	f7fc fe2b 	bl	8001ee4 <HAL_ETH_ReleaseTxPacket>

  return errval;
 800528e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8005292:	4618      	mov	r0, r3
 8005294:	3748      	adds	r7, #72	; 0x48
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	20004e90 	.word	0x20004e90
 80052a0:	20004de0 	.word	0x20004de0
 80052a4:	20004ddc 	.word	0x20004ddc

080052a8 <low_level_input>:
 * @param netif the lwip network interface structure for this ethernetif
 * @return a pbuf filled with the received packet (including MAC header)
 *         NULL on memory error
   */
static struct pbuf * low_level_input(struct netif *netif)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80052b0:	2300      	movs	r3, #0
 80052b2:	60fb      	str	r3, [r7, #12]

  if(RxAllocStatus == RX_ALLOC_OK)
 80052b4:	4b07      	ldr	r3, [pc, #28]	; (80052d4 <low_level_input+0x2c>)
 80052b6:	781b      	ldrb	r3, [r3, #0]
 80052b8:	2b00      	cmp	r3, #0
 80052ba:	d105      	bne.n	80052c8 <low_level_input+0x20>
  {
    HAL_ETH_ReadData(&heth, (void **)&p);
 80052bc:	f107 030c 	add.w	r3, r7, #12
 80052c0:	4619      	mov	r1, r3
 80052c2:	4805      	ldr	r0, [pc, #20]	; (80052d8 <low_level_input+0x30>)
 80052c4:	f7fc fcd7 	bl	8001c76 <HAL_ETH_ReadData>
  }

  return p;
 80052c8:	68fb      	ldr	r3, [r7, #12]
}
 80052ca:	4618      	mov	r0, r3
 80052cc:	3710      	adds	r7, #16
 80052ce:	46bd      	mov	sp, r7
 80052d0:	bd80      	pop	{r7, pc}
 80052d2:	bf00      	nop
 80052d4:	20004c94 	.word	0x20004c94
 80052d8:	20004de0 	.word	0x20004de0

080052dc <ethernetif_input>:
 * the appropriate input function is called.
 *
 * @param netif the lwip network interface structure for this ethernetif
 */
void ethernetif_input(void* argument)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b084      	sub	sp, #16
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  struct pbuf *p = NULL;
 80052e4:	2300      	movs	r3, #0
 80052e6:	60fb      	str	r3, [r7, #12]
  struct netif *netif = (struct netif *) argument;
 80052e8:	687b      	ldr	r3, [r7, #4]
 80052ea:	60bb      	str	r3, [r7, #8]

  for( ;; )
  {
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 80052ec:	4b0f      	ldr	r3, [pc, #60]	; (800532c <ethernetif_input+0x50>)
 80052ee:	681b      	ldr	r3, [r3, #0]
 80052f0:	f04f 31ff 	mov.w	r1, #4294967295
 80052f4:	4618      	mov	r0, r3
 80052f6:	f000 fd7f 	bl	8005df8 <osSemaphoreAcquire>
 80052fa:	4603      	mov	r3, r0
 80052fc:	2b00      	cmp	r3, #0
 80052fe:	d1f5      	bne.n	80052ec <ethernetif_input+0x10>
    {
      do
      {
        p = low_level_input( netif );
 8005300:	68b8      	ldr	r0, [r7, #8]
 8005302:	f7ff ffd1 	bl	80052a8 <low_level_input>
 8005306:	60f8      	str	r0, [r7, #12]
        if (p != NULL)
 8005308:	68fb      	ldr	r3, [r7, #12]
 800530a:	2b00      	cmp	r3, #0
 800530c:	d00a      	beq.n	8005324 <ethernetif_input+0x48>
        {
          if (netif->input( p, netif) != ERR_OK )
 800530e:	68bb      	ldr	r3, [r7, #8]
 8005310:	691b      	ldr	r3, [r3, #16]
 8005312:	68b9      	ldr	r1, [r7, #8]
 8005314:	68f8      	ldr	r0, [r7, #12]
 8005316:	4798      	blx	r3
 8005318:	4603      	mov	r3, r0
 800531a:	2b00      	cmp	r3, #0
 800531c:	d002      	beq.n	8005324 <ethernetif_input+0x48>
          {
            pbuf_free(p);
 800531e:	68f8      	ldr	r0, [r7, #12]
 8005320:	f007 ffa6 	bl	800d270 <pbuf_free>
          }
        }
      } while(p!=NULL);
 8005324:	68fb      	ldr	r3, [r7, #12]
 8005326:	2b00      	cmp	r3, #0
 8005328:	d1ea      	bne.n	8005300 <ethernetif_input+0x24>
    if (osSemaphoreAcquire(RxPktSemaphore, TIME_WAITING_FOR_INPUT) == osOK)
 800532a:	e7df      	b.n	80052ec <ethernetif_input+0x10>
 800532c:	20004dd8 	.word	0x20004dd8

08005330 <ethernetif_init>:
 * @return ERR_OK if the loopif is initialized
 *         ERR_MEM if private data couldn't be allocated
 *         any other err_t on error
 */
err_t ethernetif_init(struct netif *netif)
{
 8005330:	b580      	push	{r7, lr}
 8005332:	b082      	sub	sp, #8
 8005334:	af00      	add	r7, sp, #0
 8005336:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("netif != NULL", (netif != NULL));
 8005338:	687b      	ldr	r3, [r7, #4]
 800533a:	2b00      	cmp	r3, #0
 800533c:	d106      	bne.n	800534c <ethernetif_init+0x1c>
 800533e:	4b0e      	ldr	r3, [pc, #56]	; (8005378 <ethernetif_init+0x48>)
 8005340:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 8005344:	490d      	ldr	r1, [pc, #52]	; (800537c <ethernetif_init+0x4c>)
 8005346:	480e      	ldr	r0, [pc, #56]	; (8005380 <ethernetif_init+0x50>)
 8005348:	f011 fd52 	bl	8016df0 <iprintf>
   * The last argument should be replaced with your link speed, in units
   * of bits per second.
   */
  // MIB2_INIT_NETIF(netif, snmp_ifType_ethernet_csmacd, LINK_SPEED_OF_YOUR_NETIF_IN_BPS);

  netif->name[0] = IFNAME0;
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	2273      	movs	r2, #115	; 0x73
 8005350:	f883 202e 	strb.w	r2, [r3, #46]	; 0x2e
  netif->name[1] = IFNAME1;
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	2274      	movs	r2, #116	; 0x74
 8005358:	f883 202f 	strb.w	r2, [r3, #47]	; 0x2f
   * is available...) */

#if LWIP_IPV4
#if LWIP_ARP || LWIP_ETHERNET
#if LWIP_ARP
  netif->output = etharp_output;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	4a09      	ldr	r2, [pc, #36]	; (8005384 <ethernetif_init+0x54>)
 8005360:	615a      	str	r2, [r3, #20]

#if LWIP_IPV6
  netif->output_ip6 = ethip6_output;
#endif /* LWIP_IPV6 */

  netif->linkoutput = low_level_output;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	4a08      	ldr	r2, [pc, #32]	; (8005388 <ethernetif_init+0x58>)
 8005366:	619a      	str	r2, [r3, #24]

  /* initialize the hardware */
  low_level_init(netif);
 8005368:	6878      	ldr	r0, [r7, #4]
 800536a:	f7ff fdd1 	bl	8004f10 <low_level_init>

  return ERR_OK;
 800536e:	2300      	movs	r3, #0
}
 8005370:	4618      	mov	r0, r3
 8005372:	3708      	adds	r7, #8
 8005374:	46bd      	mov	sp, r7
 8005376:	bd80      	pop	{r7, pc}
 8005378:	08018124 	.word	0x08018124
 800537c:	08018140 	.word	0x08018140
 8005380:	08018150 	.word	0x08018150
 8005384:	08014bb5 	.word	0x08014bb5
 8005388:	08005181 	.word	0x08005181

0800538c <pbuf_free_custom>:
  * @brief  Custom Rx pbuf free callback
  * @param  pbuf: pbuf to be freed
  * @retval None
  */
void pbuf_free_custom(struct pbuf *p)
{
 800538c:	b580      	push	{r7, lr}
 800538e:	b084      	sub	sp, #16
 8005390:	af00      	add	r7, sp, #0
 8005392:	6078      	str	r0, [r7, #4]
  struct pbuf_custom* custom_pbuf = (struct pbuf_custom*)p;
 8005394:	687b      	ldr	r3, [r7, #4]
 8005396:	60fb      	str	r3, [r7, #12]
  LWIP_MEMPOOL_FREE(RX_POOL, custom_pbuf);
 8005398:	68f9      	ldr	r1, [r7, #12]
 800539a:	4809      	ldr	r0, [pc, #36]	; (80053c0 <pbuf_free_custom+0x34>)
 800539c:	f007 f8a0 	bl	800c4e0 <memp_free_pool>

  /* If the Rx Buffer Pool was exhausted, signal the ethernetif_input task to
   * call HAL_ETH_GetRxDataBuffer to rebuild the Rx descriptors. */

  if (RxAllocStatus == RX_ALLOC_ERROR)
 80053a0:	4b08      	ldr	r3, [pc, #32]	; (80053c4 <pbuf_free_custom+0x38>)
 80053a2:	781b      	ldrb	r3, [r3, #0]
 80053a4:	2b01      	cmp	r3, #1
 80053a6:	d107      	bne.n	80053b8 <pbuf_free_custom+0x2c>
  {
    RxAllocStatus = RX_ALLOC_OK;
 80053a8:	4b06      	ldr	r3, [pc, #24]	; (80053c4 <pbuf_free_custom+0x38>)
 80053aa:	2200      	movs	r2, #0
 80053ac:	701a      	strb	r2, [r3, #0]
    osSemaphoreRelease(RxPktSemaphore);
 80053ae:	4b06      	ldr	r3, [pc, #24]	; (80053c8 <pbuf_free_custom+0x3c>)
 80053b0:	681b      	ldr	r3, [r3, #0]
 80053b2:	4618      	mov	r0, r3
 80053b4:	f000 fd72 	bl	8005e9c <osSemaphoreRelease>
  }
}
 80053b8:	bf00      	nop
 80053ba:	3710      	adds	r7, #16
 80053bc:	46bd      	mov	sp, r7
 80053be:	bd80      	pop	{r7, pc}
 80053c0:	0801b6c0 	.word	0x0801b6c0
 80053c4:	20004c94 	.word	0x20004c94
 80053c8:	20004dd8 	.word	0x20004dd8

080053cc <sys_now>:
*         when LWIP_TIMERS == 1 and NO_SYS == 1
* @param  None
* @retval Current Time value
*/
u32_t sys_now(void)
{
 80053cc:	b580      	push	{r7, lr}
 80053ce:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 80053d0:	f7fc f958 	bl	8001684 <HAL_GetTick>
 80053d4:	4603      	mov	r3, r0
}
 80053d6:	4618      	mov	r0, r3
 80053d8:	bd80      	pop	{r7, pc}
	...

080053dc <HAL_ETH_MspInit>:
  * @param  ethHandle: ETH handle
  * @retval None
  */

void HAL_ETH_MspInit(ETH_HandleTypeDef* ethHandle)
{
 80053dc:	b580      	push	{r7, lr}
 80053de:	b08e      	sub	sp, #56	; 0x38
 80053e0:	af00      	add	r7, sp, #0
 80053e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80053e4:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80053e8:	2200      	movs	r2, #0
 80053ea:	601a      	str	r2, [r3, #0]
 80053ec:	605a      	str	r2, [r3, #4]
 80053ee:	609a      	str	r2, [r3, #8]
 80053f0:	60da      	str	r2, [r3, #12]
 80053f2:	611a      	str	r2, [r3, #16]
  if(ethHandle->Instance==ETH)
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	681b      	ldr	r3, [r3, #0]
 80053f8:	4a59      	ldr	r2, [pc, #356]	; (8005560 <HAL_ETH_MspInit+0x184>)
 80053fa:	4293      	cmp	r3, r2
 80053fc:	f040 80ac 	bne.w	8005558 <HAL_ETH_MspInit+0x17c>
  {
  /* USER CODE BEGIN ETH_MspInit 0 */

  /* USER CODE END ETH_MspInit 0 */
    /* Enable Peripheral clock */
    __HAL_RCC_ETH_CLK_ENABLE();
 8005400:	2300      	movs	r3, #0
 8005402:	623b      	str	r3, [r7, #32]
 8005404:	4b57      	ldr	r3, [pc, #348]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005406:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005408:	4a56      	ldr	r2, [pc, #344]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800540a:	f043 7300 	orr.w	r3, r3, #33554432	; 0x2000000
 800540e:	6313      	str	r3, [r2, #48]	; 0x30
 8005410:	4b54      	ldr	r3, [pc, #336]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005412:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005414:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005418:	623b      	str	r3, [r7, #32]
 800541a:	6a3b      	ldr	r3, [r7, #32]
 800541c:	2300      	movs	r3, #0
 800541e:	61fb      	str	r3, [r7, #28]
 8005420:	4b50      	ldr	r3, [pc, #320]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005422:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005424:	4a4f      	ldr	r2, [pc, #316]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005426:	f043 6380 	orr.w	r3, r3, #67108864	; 0x4000000
 800542a:	6313      	str	r3, [r2, #48]	; 0x30
 800542c:	4b4d      	ldr	r3, [pc, #308]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800542e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005430:	f003 6380 	and.w	r3, r3, #67108864	; 0x4000000
 8005434:	61fb      	str	r3, [r7, #28]
 8005436:	69fb      	ldr	r3, [r7, #28]
 8005438:	2300      	movs	r3, #0
 800543a:	61bb      	str	r3, [r7, #24]
 800543c:	4b49      	ldr	r3, [pc, #292]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800543e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005440:	4a48      	ldr	r2, [pc, #288]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005442:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
 8005446:	6313      	str	r3, [r2, #48]	; 0x30
 8005448:	4b46      	ldr	r3, [pc, #280]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800544a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800544c:	f003 6300 	and.w	r3, r3, #134217728	; 0x8000000
 8005450:	61bb      	str	r3, [r7, #24]
 8005452:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 8005454:	2300      	movs	r3, #0
 8005456:	617b      	str	r3, [r7, #20]
 8005458:	4b42      	ldr	r3, [pc, #264]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800545a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800545c:	4a41      	ldr	r2, [pc, #260]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800545e:	f043 0304 	orr.w	r3, r3, #4
 8005462:	6313      	str	r3, [r2, #48]	; 0x30
 8005464:	4b3f      	ldr	r3, [pc, #252]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005466:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005468:	f003 0304 	and.w	r3, r3, #4
 800546c:	617b      	str	r3, [r7, #20]
 800546e:	697b      	ldr	r3, [r7, #20]
    __HAL_RCC_GPIOA_CLK_ENABLE();
 8005470:	2300      	movs	r3, #0
 8005472:	613b      	str	r3, [r7, #16]
 8005474:	4b3b      	ldr	r3, [pc, #236]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005476:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005478:	4a3a      	ldr	r2, [pc, #232]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800547a:	f043 0301 	orr.w	r3, r3, #1
 800547e:	6313      	str	r3, [r2, #48]	; 0x30
 8005480:	4b38      	ldr	r3, [pc, #224]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005482:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005484:	f003 0301 	and.w	r3, r3, #1
 8005488:	613b      	str	r3, [r7, #16]
 800548a:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800548c:	2300      	movs	r3, #0
 800548e:	60fb      	str	r3, [r7, #12]
 8005490:	4b34      	ldr	r3, [pc, #208]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005492:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005494:	4a33      	ldr	r2, [pc, #204]	; (8005564 <HAL_ETH_MspInit+0x188>)
 8005496:	f043 0302 	orr.w	r3, r3, #2
 800549a:	6313      	str	r3, [r2, #48]	; 0x30
 800549c:	4b31      	ldr	r3, [pc, #196]	; (8005564 <HAL_ETH_MspInit+0x188>)
 800549e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054a0:	f003 0302 	and.w	r3, r3, #2
 80054a4:	60fb      	str	r3, [r7, #12]
 80054a6:	68fb      	ldr	r3, [r7, #12]
    __HAL_RCC_GPIOG_CLK_ENABLE();
 80054a8:	2300      	movs	r3, #0
 80054aa:	60bb      	str	r3, [r7, #8]
 80054ac:	4b2d      	ldr	r3, [pc, #180]	; (8005564 <HAL_ETH_MspInit+0x188>)
 80054ae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054b0:	4a2c      	ldr	r2, [pc, #176]	; (8005564 <HAL_ETH_MspInit+0x188>)
 80054b2:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80054b6:	6313      	str	r3, [r2, #48]	; 0x30
 80054b8:	4b2a      	ldr	r3, [pc, #168]	; (8005564 <HAL_ETH_MspInit+0x188>)
 80054ba:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80054bc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80054c0:	60bb      	str	r3, [r7, #8]
 80054c2:	68bb      	ldr	r3, [r7, #8]
    PC5     ------> ETH_RXD1
    PB13     ------> ETH_TXD1
    PG11     ------> ETH_TX_EN
    PG13     ------> ETH_TXD0
    */
    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_4|GPIO_PIN_5;
 80054c4:	2332      	movs	r3, #50	; 0x32
 80054c6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054c8:	2302      	movs	r3, #2
 80054ca:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054cc:	2300      	movs	r3, #0
 80054ce:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054d0:	2303      	movs	r3, #3
 80054d2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054d4:	230b      	movs	r3, #11
 80054d6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80054d8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054dc:	4619      	mov	r1, r3
 80054de:	4822      	ldr	r0, [pc, #136]	; (8005568 <HAL_ETH_MspInit+0x18c>)
 80054e0:	f7fd fc32 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_7;
 80054e4:	2386      	movs	r3, #134	; 0x86
 80054e6:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80054e8:	2302      	movs	r3, #2
 80054ea:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80054ec:	2300      	movs	r3, #0
 80054ee:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80054f0:	2303      	movs	r3, #3
 80054f2:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 80054f4:	230b      	movs	r3, #11
 80054f6:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80054f8:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80054fc:	4619      	mov	r1, r3
 80054fe:	481b      	ldr	r0, [pc, #108]	; (800556c <HAL_ETH_MspInit+0x190>)
 8005500:	f7fd fc22 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_13;
 8005504:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8005508:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800550a:	2302      	movs	r3, #2
 800550c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800550e:	2300      	movs	r3, #0
 8005510:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005512:	2303      	movs	r3, #3
 8005514:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005516:	230b      	movs	r3, #11
 8005518:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800551a:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800551e:	4619      	mov	r1, r3
 8005520:	4813      	ldr	r0, [pc, #76]	; (8005570 <HAL_ETH_MspInit+0x194>)
 8005522:	f7fd fc11 	bl	8002d48 <HAL_GPIO_Init>

    GPIO_InitStruct.Pin = GPIO_PIN_11|GPIO_PIN_13;
 8005526:	f44f 5320 	mov.w	r3, #10240	; 0x2800
 800552a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800552c:	2302      	movs	r3, #2
 800552e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8005530:	2300      	movs	r3, #0
 8005532:	62fb      	str	r3, [r7, #44]	; 0x2c
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8005534:	2303      	movs	r3, #3
 8005536:	633b      	str	r3, [r7, #48]	; 0x30
    GPIO_InitStruct.Alternate = GPIO_AF11_ETH;
 8005538:	230b      	movs	r3, #11
 800553a:	637b      	str	r3, [r7, #52]	; 0x34
    HAL_GPIO_Init(GPIOG, &GPIO_InitStruct);
 800553c:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8005540:	4619      	mov	r1, r3
 8005542:	480c      	ldr	r0, [pc, #48]	; (8005574 <HAL_ETH_MspInit+0x198>)
 8005544:	f7fd fc00 	bl	8002d48 <HAL_GPIO_Init>

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(ETH_IRQn, 5, 0);
 8005548:	2200      	movs	r2, #0
 800554a:	2105      	movs	r1, #5
 800554c:	203d      	movs	r0, #61	; 0x3d
 800554e:	f7fc f981 	bl	8001854 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(ETH_IRQn);
 8005552:	203d      	movs	r0, #61	; 0x3d
 8005554:	f7fc f99a 	bl	800188c <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN ETH_MspInit 1 */

  /* USER CODE END ETH_MspInit 1 */
  }
}
 8005558:	bf00      	nop
 800555a:	3738      	adds	r7, #56	; 0x38
 800555c:	46bd      	mov	sp, r7
 800555e:	bd80      	pop	{r7, pc}
 8005560:	40028000 	.word	0x40028000
 8005564:	40023800 	.word	0x40023800
 8005568:	40020800 	.word	0x40020800
 800556c:	40020000 	.word	0x40020000
 8005570:	40020400 	.word	0x40020400
 8005574:	40021800 	.word	0x40021800

08005578 <ETH_PHY_IO_Init>:
  * @brief  Initializes the MDIO interface GPIO and clocks.
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_Init(void)
{
 8005578:	b580      	push	{r7, lr}
 800557a:	af00      	add	r7, sp, #0
  /* We assume that MDIO GPIO configuration is already done
     in the ETH_MspInit() else it should be done here
  */

  /* Configure the MDIO Clock */
  HAL_ETH_SetMDIOClockRange(&heth);
 800557c:	4802      	ldr	r0, [pc, #8]	; (8005588 <ETH_PHY_IO_Init+0x10>)
 800557e:	f7fc ff7b 	bl	8002478 <HAL_ETH_SetMDIOClockRange>

  return 0;
 8005582:	2300      	movs	r3, #0
}
 8005584:	4618      	mov	r0, r3
 8005586:	bd80      	pop	{r7, pc}
 8005588:	20004de0 	.word	0x20004de0

0800558c <ETH_PHY_IO_DeInit>:
  * @brief  De-Initializes the MDIO interface .
  * @param  None
  * @retval 0 if OK, -1 if ERROR
  */
int32_t ETH_PHY_IO_DeInit (void)
{
 800558c:	b480      	push	{r7}
 800558e:	af00      	add	r7, sp, #0
  return 0;
 8005590:	2300      	movs	r3, #0
}
 8005592:	4618      	mov	r0, r3
 8005594:	46bd      	mov	sp, r7
 8005596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800559a:	4770      	bx	lr

0800559c <ETH_PHY_IO_ReadReg>:
  * @param  RegAddr: PHY register address
  * @param  pRegVal: pointer to hold the register value
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_ReadReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t *pRegVal)
{
 800559c:	b580      	push	{r7, lr}
 800559e:	b084      	sub	sp, #16
 80055a0:	af00      	add	r7, sp, #0
 80055a2:	60f8      	str	r0, [r7, #12]
 80055a4:	60b9      	str	r1, [r7, #8]
 80055a6:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_ReadPHYRegister(&heth, DevAddr, RegAddr, pRegVal) != HAL_OK)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	68ba      	ldr	r2, [r7, #8]
 80055ac:	68f9      	ldr	r1, [r7, #12]
 80055ae:	4807      	ldr	r0, [pc, #28]	; (80055cc <ETH_PHY_IO_ReadReg+0x30>)
 80055b0:	f7fc fdca 	bl	8002148 <HAL_ETH_ReadPHYRegister>
 80055b4:	4603      	mov	r3, r0
 80055b6:	2b00      	cmp	r3, #0
 80055b8:	d002      	beq.n	80055c0 <ETH_PHY_IO_ReadReg+0x24>
  {
    return -1;
 80055ba:	f04f 33ff 	mov.w	r3, #4294967295
 80055be:	e000      	b.n	80055c2 <ETH_PHY_IO_ReadReg+0x26>
  }

  return 0;
 80055c0:	2300      	movs	r3, #0
}
 80055c2:	4618      	mov	r0, r3
 80055c4:	3710      	adds	r7, #16
 80055c6:	46bd      	mov	sp, r7
 80055c8:	bd80      	pop	{r7, pc}
 80055ca:	bf00      	nop
 80055cc:	20004de0 	.word	0x20004de0

080055d0 <ETH_PHY_IO_WriteReg>:
  * @param  RegAddr: PHY register address
  * @param  RegVal: Value to be written
  * @retval 0 if OK -1 if Error
  */
int32_t ETH_PHY_IO_WriteReg(uint32_t DevAddr, uint32_t RegAddr, uint32_t RegVal)
{
 80055d0:	b580      	push	{r7, lr}
 80055d2:	b084      	sub	sp, #16
 80055d4:	af00      	add	r7, sp, #0
 80055d6:	60f8      	str	r0, [r7, #12]
 80055d8:	60b9      	str	r1, [r7, #8]
 80055da:	607a      	str	r2, [r7, #4]
  if(HAL_ETH_WritePHYRegister(&heth, DevAddr, RegAddr, RegVal) != HAL_OK)
 80055dc:	687b      	ldr	r3, [r7, #4]
 80055de:	68ba      	ldr	r2, [r7, #8]
 80055e0:	68f9      	ldr	r1, [r7, #12]
 80055e2:	4807      	ldr	r0, [pc, #28]	; (8005600 <ETH_PHY_IO_WriteReg+0x30>)
 80055e4:	f7fc fdfb 	bl	80021de <HAL_ETH_WritePHYRegister>
 80055e8:	4603      	mov	r3, r0
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d002      	beq.n	80055f4 <ETH_PHY_IO_WriteReg+0x24>
  {
    return -1;
 80055ee:	f04f 33ff 	mov.w	r3, #4294967295
 80055f2:	e000      	b.n	80055f6 <ETH_PHY_IO_WriteReg+0x26>
  }

  return 0;
 80055f4:	2300      	movs	r3, #0
}
 80055f6:	4618      	mov	r0, r3
 80055f8:	3710      	adds	r7, #16
 80055fa:	46bd      	mov	sp, r7
 80055fc:	bd80      	pop	{r7, pc}
 80055fe:	bf00      	nop
 8005600:	20004de0 	.word	0x20004de0

08005604 <ETH_PHY_IO_GetTick>:
/**
  * @brief  Get the time in millisecons used for internal PHY driver process.
  * @retval Time value
  */
int32_t ETH_PHY_IO_GetTick(void)
{
 8005604:	b580      	push	{r7, lr}
 8005606:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 8005608:	f7fc f83c 	bl	8001684 <HAL_GetTick>
 800560c:	4603      	mov	r3, r0
}
 800560e:	4618      	mov	r0, r3
 8005610:	bd80      	pop	{r7, pc}
	...

08005614 <ethernet_link_thread>:
/**
  * @brief  Check the ETH link state then update ETH driver and netif link accordingly.
  * @retval None
  */
void ethernet_link_thread(void* argument)
{
 8005614:	b580      	push	{r7, lr}
 8005616:	b0a0      	sub	sp, #128	; 0x80
 8005618:	af00      	add	r7, sp, #0
 800561a:	6078      	str	r0, [r7, #4]
  ETH_MACConfigTypeDef MACConf = {0};
 800561c:	f107 0308 	add.w	r3, r7, #8
 8005620:	2264      	movs	r2, #100	; 0x64
 8005622:	2100      	movs	r1, #0
 8005624:	4618      	mov	r0, r3
 8005626:	f011 fc82 	bl	8016f2e <memset>
  int32_t PHYLinkState = 0;
 800562a:	2300      	movs	r3, #0
 800562c:	673b      	str	r3, [r7, #112]	; 0x70
  uint32_t linkchanged = 0U, speed = 0U, duplex = 0U;
 800562e:	2300      	movs	r3, #0
 8005630:	67fb      	str	r3, [r7, #124]	; 0x7c
 8005632:	2300      	movs	r3, #0
 8005634:	67bb      	str	r3, [r7, #120]	; 0x78
 8005636:	2300      	movs	r3, #0
 8005638:	677b      	str	r3, [r7, #116]	; 0x74

  struct netif *netif = (struct netif *) argument;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	66fb      	str	r3, [r7, #108]	; 0x6c

/* USER CODE END ETH link init */

  for(;;)
  {
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 800563e:	483a      	ldr	r0, [pc, #232]	; (8005728 <ethernet_link_thread+0x114>)
 8005640:	f7fb ff63 	bl	800150a <LAN8742_GetLinkState>
 8005644:	6738      	str	r0, [r7, #112]	; 0x70

  if(netif_is_link_up(netif) && (PHYLinkState <= LAN8742_STATUS_LINK_DOWN))
 8005646:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005648:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800564c:	089b      	lsrs	r3, r3, #2
 800564e:	f003 0301 	and.w	r3, r3, #1
 8005652:	b2db      	uxtb	r3, r3
 8005654:	2b00      	cmp	r3, #0
 8005656:	d00c      	beq.n	8005672 <ethernet_link_thread+0x5e>
 8005658:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 800565a:	2b01      	cmp	r3, #1
 800565c:	dc09      	bgt.n	8005672 <ethernet_link_thread+0x5e>
  {
    HAL_ETH_Stop_IT(&heth);
 800565e:	4833      	ldr	r0, [pc, #204]	; (800572c <ethernet_link_thread+0x118>)
 8005660:	f7fc fa2e 	bl	8001ac0 <HAL_ETH_Stop_IT>
    netif_set_down(netif);
 8005664:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005666:	f007 f9bf 	bl	800c9e8 <netif_set_down>
    netif_set_link_down(netif);
 800566a:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800566c:	f007 fa22 	bl	800cab4 <netif_set_link_down>
 8005670:	e055      	b.n	800571e <ethernet_link_thread+0x10a>
  }
  else if(!netif_is_link_up(netif) && (PHYLinkState > LAN8742_STATUS_LINK_DOWN))
 8005672:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8005674:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8005678:	f003 0304 	and.w	r3, r3, #4
 800567c:	2b00      	cmp	r3, #0
 800567e:	d14e      	bne.n	800571e <ethernet_link_thread+0x10a>
 8005680:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005682:	2b01      	cmp	r3, #1
 8005684:	dd4b      	ble.n	800571e <ethernet_link_thread+0x10a>
  {
    switch (PHYLinkState)
 8005686:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8005688:	3b02      	subs	r3, #2
 800568a:	2b03      	cmp	r3, #3
 800568c:	d82a      	bhi.n	80056e4 <ethernet_link_thread+0xd0>
 800568e:	a201      	add	r2, pc, #4	; (adr r2, 8005694 <ethernet_link_thread+0x80>)
 8005690:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005694:	080056a5 	.word	0x080056a5
 8005698:	080056b7 	.word	0x080056b7
 800569c:	080056c7 	.word	0x080056c7
 80056a0:	080056d7 	.word	0x080056d7
    {
    case LAN8742_STATUS_100MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80056a4:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056a8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80056aa:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056ae:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056b0:	2301      	movs	r3, #1
 80056b2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056b4:	e017      	b.n	80056e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_100MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80056b6:	2300      	movs	r3, #0
 80056b8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_100M;
 80056ba:	f44f 4380 	mov.w	r3, #16384	; 0x4000
 80056be:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056c0:	2301      	movs	r3, #1
 80056c2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056c4:	e00f      	b.n	80056e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_FULLDUPLEX:
      duplex = ETH_FULLDUPLEX_MODE;
 80056c6:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80056ca:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80056cc:	2300      	movs	r3, #0
 80056ce:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056d0:	2301      	movs	r3, #1
 80056d2:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056d4:	e007      	b.n	80056e6 <ethernet_link_thread+0xd2>
    case LAN8742_STATUS_10MBITS_HALFDUPLEX:
      duplex = ETH_HALFDUPLEX_MODE;
 80056d6:	2300      	movs	r3, #0
 80056d8:	677b      	str	r3, [r7, #116]	; 0x74
      speed = ETH_SPEED_10M;
 80056da:	2300      	movs	r3, #0
 80056dc:	67bb      	str	r3, [r7, #120]	; 0x78
      linkchanged = 1;
 80056de:	2301      	movs	r3, #1
 80056e0:	67fb      	str	r3, [r7, #124]	; 0x7c
      break;
 80056e2:	e000      	b.n	80056e6 <ethernet_link_thread+0xd2>
    default:
      break;
 80056e4:	bf00      	nop
    }

    if(linkchanged)
 80056e6:	6ffb      	ldr	r3, [r7, #124]	; 0x7c
 80056e8:	2b00      	cmp	r3, #0
 80056ea:	d018      	beq.n	800571e <ethernet_link_thread+0x10a>
    {
      /* Get MAC Config MAC */
      HAL_ETH_GetMACConfig(&heth, &MACConf);
 80056ec:	f107 0308 	add.w	r3, r7, #8
 80056f0:	4619      	mov	r1, r3
 80056f2:	480e      	ldr	r0, [pc, #56]	; (800572c <ethernet_link_thread+0x118>)
 80056f4:	f7fc fdbc 	bl	8002270 <HAL_ETH_GetMACConfig>
      MACConf.DuplexMode = duplex;
 80056f8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80056fa:	623b      	str	r3, [r7, #32]
      MACConf.Speed = speed;
 80056fc:	6fbb      	ldr	r3, [r7, #120]	; 0x78
 80056fe:	61fb      	str	r3, [r7, #28]
      HAL_ETH_SetMACConfig(&heth, &MACConf);
 8005700:	f107 0308 	add.w	r3, r7, #8
 8005704:	4619      	mov	r1, r3
 8005706:	4809      	ldr	r0, [pc, #36]	; (800572c <ethernet_link_thread+0x118>)
 8005708:	f7fc fe9c 	bl	8002444 <HAL_ETH_SetMACConfig>
      HAL_ETH_Start_IT(&heth);
 800570c:	4807      	ldr	r0, [pc, #28]	; (800572c <ethernet_link_thread+0x118>)
 800570e:	f7fc f949 	bl	80019a4 <HAL_ETH_Start_IT>
      netif_set_up(netif);
 8005712:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 8005714:	f007 f8fc 	bl	800c910 <netif_set_up>
      netif_set_link_up(netif);
 8005718:	6ef8      	ldr	r0, [r7, #108]	; 0x6c
 800571a:	f007 f997 	bl	800ca4c <netif_set_link_up>

/* USER CODE BEGIN ETH link Thread core code for User BSP */

/* USER CODE END ETH link Thread core code for User BSP */

    osDelay(100);
 800571e:	2064      	movs	r0, #100	; 0x64
 8005720:	f000 f9b8 	bl	8005a94 <osDelay>
  PHYLinkState = LAN8742_GetLinkState(&LAN8742);
 8005724:	e78b      	b.n	800563e <ethernet_link_thread+0x2a>
 8005726:	bf00      	nop
 8005728:	20004ec8 	.word	0x20004ec8
 800572c:	20004de0 	.word	0x20004de0

08005730 <HAL_ETH_RxAllocateCallback>:
  }
}

void HAL_ETH_RxAllocateCallback(uint8_t **buff)
{
 8005730:	b580      	push	{r7, lr}
 8005732:	b086      	sub	sp, #24
 8005734:	af02      	add	r7, sp, #8
 8005736:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH RxAllocateCallback */
  struct pbuf_custom *p = LWIP_MEMPOOL_ALLOC(RX_POOL);
 8005738:	4812      	ldr	r0, [pc, #72]	; (8005784 <HAL_ETH_RxAllocateCallback+0x54>)
 800573a:	f006 fe5d 	bl	800c3f8 <memp_malloc_pool>
 800573e:	60f8      	str	r0, [r7, #12]
  if (p)
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b00      	cmp	r3, #0
 8005744:	d014      	beq.n	8005770 <HAL_ETH_RxAllocateCallback+0x40>
  {
    /* Get the buff from the struct pbuf address. */
    *buff = (uint8_t *)p + offsetof(RxBuff_t, buff);
 8005746:	68fb      	ldr	r3, [r7, #12]
 8005748:	f103 0220 	add.w	r2, r3, #32
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	601a      	str	r2, [r3, #0]
    p->custom_free_function = pbuf_free_custom;
 8005750:	68fb      	ldr	r3, [r7, #12]
 8005752:	4a0d      	ldr	r2, [pc, #52]	; (8005788 <HAL_ETH_RxAllocateCallback+0x58>)
 8005754:	611a      	str	r2, [r3, #16]
    /* Initialize the struct pbuf.
    * This must be performed whenever a buffer's allocated because it may be
    * changed by lwIP or the app, e.g., pbuf_free decrements ref. */
    pbuf_alloced_custom(PBUF_RAW, 0, PBUF_REF, p, *buff, ETH_RX_BUF_SIZE);
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	f44f 62c0 	mov.w	r2, #1536	; 0x600
 800575e:	9201      	str	r2, [sp, #4]
 8005760:	9300      	str	r3, [sp, #0]
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2241      	movs	r2, #65	; 0x41
 8005766:	2100      	movs	r1, #0
 8005768:	2000      	movs	r0, #0
 800576a:	f007 fbc7 	bl	800cefc <pbuf_alloced_custom>
  {
    RxAllocStatus = RX_ALLOC_ERROR;
    *buff = NULL;
  }
/* USER CODE END HAL ETH RxAllocateCallback */
}
 800576e:	e005      	b.n	800577c <HAL_ETH_RxAllocateCallback+0x4c>
    RxAllocStatus = RX_ALLOC_ERROR;
 8005770:	4b06      	ldr	r3, [pc, #24]	; (800578c <HAL_ETH_RxAllocateCallback+0x5c>)
 8005772:	2201      	movs	r2, #1
 8005774:	701a      	strb	r2, [r3, #0]
    *buff = NULL;
 8005776:	687b      	ldr	r3, [r7, #4]
 8005778:	2200      	movs	r2, #0
 800577a:	601a      	str	r2, [r3, #0]
}
 800577c:	bf00      	nop
 800577e:	3710      	adds	r7, #16
 8005780:	46bd      	mov	sp, r7
 8005782:	bd80      	pop	{r7, pc}
 8005784:	0801b6c0 	.word	0x0801b6c0
 8005788:	0800538d 	.word	0x0800538d
 800578c:	20004c94 	.word	0x20004c94

08005790 <HAL_ETH_RxLinkCallback>:

void HAL_ETH_RxLinkCallback(void **pStart, void **pEnd, uint8_t *buff, uint16_t Length)
{
 8005790:	b480      	push	{r7}
 8005792:	b089      	sub	sp, #36	; 0x24
 8005794:	af00      	add	r7, sp, #0
 8005796:	60f8      	str	r0, [r7, #12]
 8005798:	60b9      	str	r1, [r7, #8]
 800579a:	607a      	str	r2, [r7, #4]
 800579c:	807b      	strh	r3, [r7, #2]
/* USER CODE BEGIN HAL ETH RxLinkCallback */

  struct pbuf **ppStart = (struct pbuf **)pStart;
 800579e:	68fb      	ldr	r3, [r7, #12]
 80057a0:	61bb      	str	r3, [r7, #24]
  struct pbuf **ppEnd = (struct pbuf **)pEnd;
 80057a2:	68bb      	ldr	r3, [r7, #8]
 80057a4:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 80057a6:	2300      	movs	r3, #0
 80057a8:	61fb      	str	r3, [r7, #28]

  /* Get the struct pbuf from the buff address. */
  p = (struct pbuf *)(buff - offsetof(RxBuff_t, buff));
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	3b20      	subs	r3, #32
 80057ae:	61fb      	str	r3, [r7, #28]
  p->next = NULL;
 80057b0:	69fb      	ldr	r3, [r7, #28]
 80057b2:	2200      	movs	r2, #0
 80057b4:	601a      	str	r2, [r3, #0]
  p->tot_len = 0;
 80057b6:	69fb      	ldr	r3, [r7, #28]
 80057b8:	2200      	movs	r2, #0
 80057ba:	811a      	strh	r2, [r3, #8]
  p->len = Length;
 80057bc:	69fb      	ldr	r3, [r7, #28]
 80057be:	887a      	ldrh	r2, [r7, #2]
 80057c0:	815a      	strh	r2, [r3, #10]

  /* Chain the buffer. */
  if (!*ppStart)
 80057c2:	69bb      	ldr	r3, [r7, #24]
 80057c4:	681b      	ldr	r3, [r3, #0]
 80057c6:	2b00      	cmp	r3, #0
 80057c8:	d103      	bne.n	80057d2 <HAL_ETH_RxLinkCallback+0x42>
  {
    /* The first buffer of the packet. */
    *ppStart = p;
 80057ca:	69bb      	ldr	r3, [r7, #24]
 80057cc:	69fa      	ldr	r2, [r7, #28]
 80057ce:	601a      	str	r2, [r3, #0]
 80057d0:	e003      	b.n	80057da <HAL_ETH_RxLinkCallback+0x4a>
  }
  else
  {
    /* Chain the buffer to the end of the packet. */
    (*ppEnd)->next = p;
 80057d2:	697b      	ldr	r3, [r7, #20]
 80057d4:	681b      	ldr	r3, [r3, #0]
 80057d6:	69fa      	ldr	r2, [r7, #28]
 80057d8:	601a      	str	r2, [r3, #0]
  }
  *ppEnd  = p;
 80057da:	697b      	ldr	r3, [r7, #20]
 80057dc:	69fa      	ldr	r2, [r7, #28]
 80057de:	601a      	str	r2, [r3, #0]

  /* Update the total length of all the buffers of the chain. Each pbuf in the chain should have its tot_len
   * set to its own length, plus the length of all the following pbufs in the chain. */
  for (p = *ppStart; p != NULL; p = p->next)
 80057e0:	69bb      	ldr	r3, [r7, #24]
 80057e2:	681b      	ldr	r3, [r3, #0]
 80057e4:	61fb      	str	r3, [r7, #28]
 80057e6:	e009      	b.n	80057fc <HAL_ETH_RxLinkCallback+0x6c>
  {
    p->tot_len += Length;
 80057e8:	69fb      	ldr	r3, [r7, #28]
 80057ea:	891a      	ldrh	r2, [r3, #8]
 80057ec:	887b      	ldrh	r3, [r7, #2]
 80057ee:	4413      	add	r3, r2
 80057f0:	b29a      	uxth	r2, r3
 80057f2:	69fb      	ldr	r3, [r7, #28]
 80057f4:	811a      	strh	r2, [r3, #8]
  for (p = *ppStart; p != NULL; p = p->next)
 80057f6:	69fb      	ldr	r3, [r7, #28]
 80057f8:	681b      	ldr	r3, [r3, #0]
 80057fa:	61fb      	str	r3, [r7, #28]
 80057fc:	69fb      	ldr	r3, [r7, #28]
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1f2      	bne.n	80057e8 <HAL_ETH_RxLinkCallback+0x58>
  }

/* USER CODE END HAL ETH RxLinkCallback */
}
 8005802:	bf00      	nop
 8005804:	bf00      	nop
 8005806:	3724      	adds	r7, #36	; 0x24
 8005808:	46bd      	mov	sp, r7
 800580a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800580e:	4770      	bx	lr

08005810 <HAL_ETH_TxFreeCallback>:

void HAL_ETH_TxFreeCallback(uint32_t * buff)
{
 8005810:	b580      	push	{r7, lr}
 8005812:	b082      	sub	sp, #8
 8005814:	af00      	add	r7, sp, #0
 8005816:	6078      	str	r0, [r7, #4]
/* USER CODE BEGIN HAL ETH TxFreeCallback */

  pbuf_free((struct pbuf *)buff);
 8005818:	6878      	ldr	r0, [r7, #4]
 800581a:	f007 fd29 	bl	800d270 <pbuf_free>

/* USER CODE END HAL ETH TxFreeCallback */
}
 800581e:	bf00      	nop
 8005820:	3708      	adds	r7, #8
 8005822:	46bd      	mov	sp, r7
 8005824:	bd80      	pop	{r7, pc}
	...

08005828 <__NVIC_SetPriority>:
{
 8005828:	b480      	push	{r7}
 800582a:	b083      	sub	sp, #12
 800582c:	af00      	add	r7, sp, #0
 800582e:	4603      	mov	r3, r0
 8005830:	6039      	str	r1, [r7, #0]
 8005832:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8005834:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005838:	2b00      	cmp	r3, #0
 800583a:	db0a      	blt.n	8005852 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800583c:	683b      	ldr	r3, [r7, #0]
 800583e:	b2da      	uxtb	r2, r3
 8005840:	490c      	ldr	r1, [pc, #48]	; (8005874 <__NVIC_SetPriority+0x4c>)
 8005842:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8005846:	0112      	lsls	r2, r2, #4
 8005848:	b2d2      	uxtb	r2, r2
 800584a:	440b      	add	r3, r1
 800584c:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
}
 8005850:	e00a      	b.n	8005868 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8005852:	683b      	ldr	r3, [r7, #0]
 8005854:	b2da      	uxtb	r2, r3
 8005856:	4908      	ldr	r1, [pc, #32]	; (8005878 <__NVIC_SetPriority+0x50>)
 8005858:	79fb      	ldrb	r3, [r7, #7]
 800585a:	f003 030f 	and.w	r3, r3, #15
 800585e:	3b04      	subs	r3, #4
 8005860:	0112      	lsls	r2, r2, #4
 8005862:	b2d2      	uxtb	r2, r2
 8005864:	440b      	add	r3, r1
 8005866:	761a      	strb	r2, [r3, #24]
}
 8005868:	bf00      	nop
 800586a:	370c      	adds	r7, #12
 800586c:	46bd      	mov	sp, r7
 800586e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005872:	4770      	bx	lr
 8005874:	e000e100 	.word	0xe000e100
 8005878:	e000ed00 	.word	0xe000ed00

0800587c <SysTick_Handler>:

/*
  SysTick handler implementation that also clears overflow flag.
*/
#if (USE_CUSTOM_SYSTICK_HANDLER_IMPLEMENTATION == 0)
void SysTick_Handler (void) {
 800587c:	b580      	push	{r7, lr}
 800587e:	af00      	add	r7, sp, #0
  /* Clear overflow flag */
  SysTick->CTRL;
 8005880:	4b05      	ldr	r3, [pc, #20]	; (8005898 <SysTick_Handler+0x1c>)
 8005882:	681b      	ldr	r3, [r3, #0]

  if (xTaskGetSchedulerState() != taskSCHEDULER_NOT_STARTED) {
 8005884:	f002 fd60 	bl	8008348 <xTaskGetSchedulerState>
 8005888:	4603      	mov	r3, r0
 800588a:	2b01      	cmp	r3, #1
 800588c:	d001      	beq.n	8005892 <SysTick_Handler+0x16>
    /* Call tick handler */
    xPortSysTickHandler();
 800588e:	f003 fc43 	bl	8009118 <xPortSysTickHandler>
  }
}
 8005892:	bf00      	nop
 8005894:	bd80      	pop	{r7, pc}
 8005896:	bf00      	nop
 8005898:	e000e010 	.word	0xe000e010

0800589c <SVC_Setup>:
#endif /* SysTick */

/*
  Setup SVC to reset value.
*/
__STATIC_INLINE void SVC_Setup (void) {
 800589c:	b580      	push	{r7, lr}
 800589e:	af00      	add	r7, sp, #0
#if (__ARM_ARCH_7A__ == 0U)
  /* Service Call interrupt might be configured before kernel start     */
  /* and when its priority is lower or equal to BASEPRI, svc intruction */
  /* causes a Hard Fault.                                               */
  NVIC_SetPriority (SVCall_IRQ_NBR, 0U);
 80058a0:	2100      	movs	r1, #0
 80058a2:	f06f 0004 	mvn.w	r0, #4
 80058a6:	f7ff ffbf 	bl	8005828 <__NVIC_SetPriority>
#endif
}
 80058aa:	bf00      	nop
 80058ac:	bd80      	pop	{r7, pc}
	...

080058b0 <osKernelInitialize>:
static uint32_t OS_Tick_GetOverflow (void);
/* Get OS Tick interval */
static uint32_t OS_Tick_GetInterval (void);
/*---------------------------------------------------------------------------*/

osStatus_t osKernelInitialize (void) {
 80058b0:	b480      	push	{r7}
 80058b2:	b083      	sub	sp, #12
 80058b4:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058b6:	f3ef 8305 	mrs	r3, IPSR
 80058ba:	603b      	str	r3, [r7, #0]
  return(result);
 80058bc:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 80058be:	2b00      	cmp	r3, #0
 80058c0:	d003      	beq.n	80058ca <osKernelInitialize+0x1a>
    stat = osErrorISR;
 80058c2:	f06f 0305 	mvn.w	r3, #5
 80058c6:	607b      	str	r3, [r7, #4]
 80058c8:	e00c      	b.n	80058e4 <osKernelInitialize+0x34>
  }
  else {
    if (KernelState == osKernelInactive) {
 80058ca:	4b0a      	ldr	r3, [pc, #40]	; (80058f4 <osKernelInitialize+0x44>)
 80058cc:	681b      	ldr	r3, [r3, #0]
 80058ce:	2b00      	cmp	r3, #0
 80058d0:	d105      	bne.n	80058de <osKernelInitialize+0x2e>
        EvrFreeRTOSSetup(0U);
      #endif
      #if defined(USE_FreeRTOS_HEAP_5) && (HEAP_5_REGION_SETUP == 1)
        vPortDefineHeapRegions (configHEAP_5_REGIONS);
      #endif
      KernelState = osKernelReady;
 80058d2:	4b08      	ldr	r3, [pc, #32]	; (80058f4 <osKernelInitialize+0x44>)
 80058d4:	2201      	movs	r2, #1
 80058d6:	601a      	str	r2, [r3, #0]
      stat = osOK;
 80058d8:	2300      	movs	r3, #0
 80058da:	607b      	str	r3, [r7, #4]
 80058dc:	e002      	b.n	80058e4 <osKernelInitialize+0x34>
    } else {
      stat = osError;
 80058de:	f04f 33ff 	mov.w	r3, #4294967295
 80058e2:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 80058e4:	687b      	ldr	r3, [r7, #4]
}
 80058e6:	4618      	mov	r0, r3
 80058e8:	370c      	adds	r7, #12
 80058ea:	46bd      	mov	sp, r7
 80058ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f0:	4770      	bx	lr
 80058f2:	bf00      	nop
 80058f4:	20004ee8 	.word	0x20004ee8

080058f8 <osKernelStart>:
  }

  return (state);
}

osStatus_t osKernelStart (void) {
 80058f8:	b580      	push	{r7, lr}
 80058fa:	b082      	sub	sp, #8
 80058fc:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80058fe:	f3ef 8305 	mrs	r3, IPSR
 8005902:	603b      	str	r3, [r7, #0]
  return(result);
 8005904:	683b      	ldr	r3, [r7, #0]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005906:	2b00      	cmp	r3, #0
 8005908:	d003      	beq.n	8005912 <osKernelStart+0x1a>
    stat = osErrorISR;
 800590a:	f06f 0305 	mvn.w	r3, #5
 800590e:	607b      	str	r3, [r7, #4]
 8005910:	e010      	b.n	8005934 <osKernelStart+0x3c>
  }
  else {
    if (KernelState == osKernelReady) {
 8005912:	4b0b      	ldr	r3, [pc, #44]	; (8005940 <osKernelStart+0x48>)
 8005914:	681b      	ldr	r3, [r3, #0]
 8005916:	2b01      	cmp	r3, #1
 8005918:	d109      	bne.n	800592e <osKernelStart+0x36>
      /* Ensure SVC priority is at the reset value */
      SVC_Setup();
 800591a:	f7ff ffbf 	bl	800589c <SVC_Setup>
      /* Change state to enable IRQ masking check */
      KernelState = osKernelRunning;
 800591e:	4b08      	ldr	r3, [pc, #32]	; (8005940 <osKernelStart+0x48>)
 8005920:	2202      	movs	r2, #2
 8005922:	601a      	str	r2, [r3, #0]
      /* Start the kernel scheduler */
      vTaskStartScheduler();
 8005924:	f002 f86c 	bl	8007a00 <vTaskStartScheduler>
      stat = osOK;
 8005928:	2300      	movs	r3, #0
 800592a:	607b      	str	r3, [r7, #4]
 800592c:	e002      	b.n	8005934 <osKernelStart+0x3c>
    } else {
      stat = osError;
 800592e:	f04f 33ff 	mov.w	r3, #4294967295
 8005932:	607b      	str	r3, [r7, #4]
    }
  }

  return (stat);
 8005934:	687b      	ldr	r3, [r7, #4]
}
 8005936:	4618      	mov	r0, r3
 8005938:	3708      	adds	r7, #8
 800593a:	46bd      	mov	sp, r7
 800593c:	bd80      	pop	{r7, pc}
 800593e:	bf00      	nop
 8005940:	20004ee8 	.word	0x20004ee8

08005944 <osKernelGetTickCount>:
  }

  return (lock);
}

uint32_t osKernelGetTickCount (void) {
 8005944:	b580      	push	{r7, lr}
 8005946:	b082      	sub	sp, #8
 8005948:	af00      	add	r7, sp, #0
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800594a:	f3ef 8305 	mrs	r3, IPSR
 800594e:	603b      	str	r3, [r7, #0]
  return(result);
 8005950:	683b      	ldr	r3, [r7, #0]
  TickType_t ticks;

  if (IS_IRQ()) {
 8005952:	2b00      	cmp	r3, #0
 8005954:	d003      	beq.n	800595e <osKernelGetTickCount+0x1a>
    ticks = xTaskGetTickCountFromISR();
 8005956:	f002 f97f 	bl	8007c58 <xTaskGetTickCountFromISR>
 800595a:	6078      	str	r0, [r7, #4]
 800595c:	e002      	b.n	8005964 <osKernelGetTickCount+0x20>
  } else {
    ticks = xTaskGetTickCount();
 800595e:	f002 f96b 	bl	8007c38 <xTaskGetTickCount>
 8005962:	6078      	str	r0, [r7, #4]
  }

  return (ticks);
 8005964:	687b      	ldr	r3, [r7, #4]
}
 8005966:	4618      	mov	r0, r3
 8005968:	3708      	adds	r7, #8
 800596a:	46bd      	mov	sp, r7
 800596c:	bd80      	pop	{r7, pc}

0800596e <osThreadNew>:
  return (configCPU_CLOCK_HZ);
}

/*---------------------------------------------------------------------------*/

osThreadId_t osThreadNew (osThreadFunc_t func, void *argument, const osThreadAttr_t *attr) {
 800596e:	b580      	push	{r7, lr}
 8005970:	b08e      	sub	sp, #56	; 0x38
 8005972:	af04      	add	r7, sp, #16
 8005974:	60f8      	str	r0, [r7, #12]
 8005976:	60b9      	str	r1, [r7, #8]
 8005978:	607a      	str	r2, [r7, #4]
  uint32_t stack;
  TaskHandle_t hTask;
  UBaseType_t prio;
  int32_t mem;

  hTask = NULL;
 800597a:	2300      	movs	r3, #0
 800597c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800597e:	f3ef 8305 	mrs	r3, IPSR
 8005982:	617b      	str	r3, [r7, #20]
  return(result);
 8005984:	697b      	ldr	r3, [r7, #20]

  if (!IS_IRQ() && (func != NULL)) {
 8005986:	2b00      	cmp	r3, #0
 8005988:	d17f      	bne.n	8005a8a <osThreadNew+0x11c>
 800598a:	68fb      	ldr	r3, [r7, #12]
 800598c:	2b00      	cmp	r3, #0
 800598e:	d07c      	beq.n	8005a8a <osThreadNew+0x11c>
    stack = configMINIMAL_STACK_SIZE;
 8005990:	f44f 7380 	mov.w	r3, #256	; 0x100
 8005994:	623b      	str	r3, [r7, #32]
    prio  = (UBaseType_t)osPriorityNormal;
 8005996:	2318      	movs	r3, #24
 8005998:	61fb      	str	r3, [r7, #28]

    name = NULL;
 800599a:	2300      	movs	r3, #0
 800599c:	627b      	str	r3, [r7, #36]	; 0x24
    mem  = -1;
 800599e:	f04f 33ff 	mov.w	r3, #4294967295
 80059a2:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2b00      	cmp	r3, #0
 80059a8:	d045      	beq.n	8005a36 <osThreadNew+0xc8>
      if (attr->name != NULL) {
 80059aa:	687b      	ldr	r3, [r7, #4]
 80059ac:	681b      	ldr	r3, [r3, #0]
 80059ae:	2b00      	cmp	r3, #0
 80059b0:	d002      	beq.n	80059b8 <osThreadNew+0x4a>
        name = attr->name;
 80059b2:	687b      	ldr	r3, [r7, #4]
 80059b4:	681b      	ldr	r3, [r3, #0]
 80059b6:	627b      	str	r3, [r7, #36]	; 0x24
      }
      if (attr->priority != osPriorityNone) {
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	699b      	ldr	r3, [r3, #24]
 80059bc:	2b00      	cmp	r3, #0
 80059be:	d002      	beq.n	80059c6 <osThreadNew+0x58>
        prio = (UBaseType_t)attr->priority;
 80059c0:	687b      	ldr	r3, [r7, #4]
 80059c2:	699b      	ldr	r3, [r3, #24]
 80059c4:	61fb      	str	r3, [r7, #28]
      }

      if ((prio < osPriorityIdle) || (prio > osPriorityISR) || ((attr->attr_bits & osThreadJoinable) == osThreadJoinable)) {
 80059c6:	69fb      	ldr	r3, [r7, #28]
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d008      	beq.n	80059de <osThreadNew+0x70>
 80059cc:	69fb      	ldr	r3, [r7, #28]
 80059ce:	2b38      	cmp	r3, #56	; 0x38
 80059d0:	d805      	bhi.n	80059de <osThreadNew+0x70>
 80059d2:	687b      	ldr	r3, [r7, #4]
 80059d4:	685b      	ldr	r3, [r3, #4]
 80059d6:	f003 0301 	and.w	r3, r3, #1
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d001      	beq.n	80059e2 <osThreadNew+0x74>
        return (NULL);
 80059de:	2300      	movs	r3, #0
 80059e0:	e054      	b.n	8005a8c <osThreadNew+0x11e>
      }

      if (attr->stack_size > 0U) {
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	695b      	ldr	r3, [r3, #20]
 80059e6:	2b00      	cmp	r3, #0
 80059e8:	d003      	beq.n	80059f2 <osThreadNew+0x84>
        /* In FreeRTOS stack is not in bytes, but in sizeof(StackType_t) which is 4 on ARM ports.       */
        /* Stack size should be therefore 4 byte aligned in order to avoid division caused side effects */
        stack = attr->stack_size / sizeof(StackType_t);
 80059ea:	687b      	ldr	r3, [r7, #4]
 80059ec:	695b      	ldr	r3, [r3, #20]
 80059ee:	089b      	lsrs	r3, r3, #2
 80059f0:	623b      	str	r3, [r7, #32]
      }

      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	689b      	ldr	r3, [r3, #8]
 80059f6:	2b00      	cmp	r3, #0
 80059f8:	d00e      	beq.n	8005a18 <osThreadNew+0xaa>
 80059fa:	687b      	ldr	r3, [r7, #4]
 80059fc:	68db      	ldr	r3, [r3, #12]
 80059fe:	2ba7      	cmp	r3, #167	; 0xa7
 8005a00:	d90a      	bls.n	8005a18 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem    != NULL) && (attr->cb_size    >= sizeof(StaticTask_t)) &&
 8005a06:	2b00      	cmp	r3, #0
 8005a08:	d006      	beq.n	8005a18 <osThreadNew+0xaa>
          (attr->stack_mem != NULL) && (attr->stack_size >  0U)) {
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	695b      	ldr	r3, [r3, #20]
 8005a0e:	2b00      	cmp	r3, #0
 8005a10:	d002      	beq.n	8005a18 <osThreadNew+0xaa>
        mem = 1;
 8005a12:	2301      	movs	r3, #1
 8005a14:	61bb      	str	r3, [r7, #24]
 8005a16:	e010      	b.n	8005a3a <osThreadNew+0xcc>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) && (attr->stack_mem == NULL)) {
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	689b      	ldr	r3, [r3, #8]
 8005a1c:	2b00      	cmp	r3, #0
 8005a1e:	d10c      	bne.n	8005a3a <osThreadNew+0xcc>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	68db      	ldr	r3, [r3, #12]
 8005a24:	2b00      	cmp	r3, #0
 8005a26:	d108      	bne.n	8005a3a <osThreadNew+0xcc>
 8005a28:	687b      	ldr	r3, [r7, #4]
 8005a2a:	691b      	ldr	r3, [r3, #16]
 8005a2c:	2b00      	cmp	r3, #0
 8005a2e:	d104      	bne.n	8005a3a <osThreadNew+0xcc>
          mem = 0;
 8005a30:	2300      	movs	r3, #0
 8005a32:	61bb      	str	r3, [r7, #24]
 8005a34:	e001      	b.n	8005a3a <osThreadNew+0xcc>
        }
      }
    }
    else {
      mem = 0;
 8005a36:	2300      	movs	r3, #0
 8005a38:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005a3a:	69bb      	ldr	r3, [r7, #24]
 8005a3c:	2b01      	cmp	r3, #1
 8005a3e:	d110      	bne.n	8005a62 <osThreadNew+0xf4>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a40:	687b      	ldr	r3, [r7, #4]
 8005a42:	691b      	ldr	r3, [r3, #16]
                                                                                      (StaticTask_t *)attr->cb_mem);
 8005a44:	687a      	ldr	r2, [r7, #4]
 8005a46:	6892      	ldr	r2, [r2, #8]
        hTask = xTaskCreateStatic ((TaskFunction_t)func, name, stack, argument, prio, (StackType_t  *)attr->stack_mem,
 8005a48:	9202      	str	r2, [sp, #8]
 8005a4a:	9301      	str	r3, [sp, #4]
 8005a4c:	69fb      	ldr	r3, [r7, #28]
 8005a4e:	9300      	str	r3, [sp, #0]
 8005a50:	68bb      	ldr	r3, [r7, #8]
 8005a52:	6a3a      	ldr	r2, [r7, #32]
 8005a54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a56:	68f8      	ldr	r0, [r7, #12]
 8005a58:	f001 fde6 	bl	8007628 <xTaskCreateStatic>
 8005a5c:	4603      	mov	r3, r0
 8005a5e:	613b      	str	r3, [r7, #16]
 8005a60:	e013      	b.n	8005a8a <osThreadNew+0x11c>
      #endif
    }
    else {
      if (mem == 0) {
 8005a62:	69bb      	ldr	r3, [r7, #24]
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d110      	bne.n	8005a8a <osThreadNew+0x11c>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          if (xTaskCreate ((TaskFunction_t)func, name, (uint16_t)stack, argument, prio, &hTask) != pdPASS) {
 8005a68:	6a3b      	ldr	r3, [r7, #32]
 8005a6a:	b29a      	uxth	r2, r3
 8005a6c:	f107 0310 	add.w	r3, r7, #16
 8005a70:	9301      	str	r3, [sp, #4]
 8005a72:	69fb      	ldr	r3, [r7, #28]
 8005a74:	9300      	str	r3, [sp, #0]
 8005a76:	68bb      	ldr	r3, [r7, #8]
 8005a78:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8005a7a:	68f8      	ldr	r0, [r7, #12]
 8005a7c:	f001 fe31 	bl	80076e2 <xTaskCreate>
 8005a80:	4603      	mov	r3, r0
 8005a82:	2b01      	cmp	r3, #1
 8005a84:	d001      	beq.n	8005a8a <osThreadNew+0x11c>
            hTask = NULL;
 8005a86:	2300      	movs	r3, #0
 8005a88:	613b      	str	r3, [r7, #16]
        #endif
      }
    }
  }

  return ((osThreadId_t)hTask);
 8005a8a:	693b      	ldr	r3, [r7, #16]
}
 8005a8c:	4618      	mov	r0, r3
 8005a8e:	3728      	adds	r7, #40	; 0x28
 8005a90:	46bd      	mov	sp, r7
 8005a92:	bd80      	pop	{r7, pc}

08005a94 <osDelay>:
  /* Return flags before clearing */
  return (rflags);
}
#endif /* (configUSE_OS2_THREAD_FLAGS == 1) */

osStatus_t osDelay (uint32_t ticks) {
 8005a94:	b580      	push	{r7, lr}
 8005a96:	b084      	sub	sp, #16
 8005a98:	af00      	add	r7, sp, #0
 8005a9a:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005a9c:	f3ef 8305 	mrs	r3, IPSR
 8005aa0:	60bb      	str	r3, [r7, #8]
  return(result);
 8005aa2:	68bb      	ldr	r3, [r7, #8]
  osStatus_t stat;

  if (IS_IRQ()) {
 8005aa4:	2b00      	cmp	r3, #0
 8005aa6:	d003      	beq.n	8005ab0 <osDelay+0x1c>
    stat = osErrorISR;
 8005aa8:	f06f 0305 	mvn.w	r3, #5
 8005aac:	60fb      	str	r3, [r7, #12]
 8005aae:	e007      	b.n	8005ac0 <osDelay+0x2c>
  }
  else {
    stat = osOK;
 8005ab0:	2300      	movs	r3, #0
 8005ab2:	60fb      	str	r3, [r7, #12]

    if (ticks != 0U) {
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	2b00      	cmp	r3, #0
 8005ab8:	d002      	beq.n	8005ac0 <osDelay+0x2c>
      vTaskDelay(ticks);
 8005aba:	6878      	ldr	r0, [r7, #4]
 8005abc:	f001 ff6c 	bl	8007998 <vTaskDelay>
    }
  }

  return (stat);
 8005ac0:	68fb      	ldr	r3, [r7, #12]
}
 8005ac2:	4618      	mov	r0, r3
 8005ac4:	3710      	adds	r7, #16
 8005ac6:	46bd      	mov	sp, r7
 8005ac8:	bd80      	pop	{r7, pc}

08005aca <osMutexNew>:
}

/*---------------------------------------------------------------------------*/
#if (configUSE_OS2_MUTEX == 1)

osMutexId_t osMutexNew (const osMutexAttr_t *attr) {
 8005aca:	b580      	push	{r7, lr}
 8005acc:	b088      	sub	sp, #32
 8005ace:	af00      	add	r7, sp, #0
 8005ad0:	6078      	str	r0, [r7, #4]
  int32_t  mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hMutex = NULL;
 8005ad2:	2300      	movs	r3, #0
 8005ad4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005ad6:	f3ef 8305 	mrs	r3, IPSR
 8005ada:	60bb      	str	r3, [r7, #8]
  return(result);
 8005adc:	68bb      	ldr	r3, [r7, #8]

  if (!IS_IRQ()) {
 8005ade:	2b00      	cmp	r3, #0
 8005ae0:	d174      	bne.n	8005bcc <osMutexNew+0x102>
    if (attr != NULL) {
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	2b00      	cmp	r3, #0
 8005ae6:	d003      	beq.n	8005af0 <osMutexNew+0x26>
      type = attr->attr_bits;
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	685b      	ldr	r3, [r3, #4]
 8005aec:	61bb      	str	r3, [r7, #24]
 8005aee:	e001      	b.n	8005af4 <osMutexNew+0x2a>
    } else {
      type = 0U;
 8005af0:	2300      	movs	r3, #0
 8005af2:	61bb      	str	r3, [r7, #24]
    }

    if ((type & osMutexRecursive) == osMutexRecursive) {
 8005af4:	69bb      	ldr	r3, [r7, #24]
 8005af6:	f003 0301 	and.w	r3, r3, #1
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d002      	beq.n	8005b04 <osMutexNew+0x3a>
      rmtx = 1U;
 8005afe:	2301      	movs	r3, #1
 8005b00:	617b      	str	r3, [r7, #20]
 8005b02:	e001      	b.n	8005b08 <osMutexNew+0x3e>
    } else {
      rmtx = 0U;
 8005b04:	2300      	movs	r3, #0
 8005b06:	617b      	str	r3, [r7, #20]
    }

    if ((type & osMutexRobust) != osMutexRobust) {
 8005b08:	69bb      	ldr	r3, [r7, #24]
 8005b0a:	f003 0308 	and.w	r3, r3, #8
 8005b0e:	2b00      	cmp	r3, #0
 8005b10:	d15c      	bne.n	8005bcc <osMutexNew+0x102>
      mem = -1;
 8005b12:	f04f 33ff 	mov.w	r3, #4294967295
 8005b16:	613b      	str	r3, [r7, #16]

      if (attr != NULL) {
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	2b00      	cmp	r3, #0
 8005b1c:	d015      	beq.n	8005b4a <osMutexNew+0x80>
        if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	689b      	ldr	r3, [r3, #8]
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d006      	beq.n	8005b34 <osMutexNew+0x6a>
 8005b26:	687b      	ldr	r3, [r7, #4]
 8005b28:	68db      	ldr	r3, [r3, #12]
 8005b2a:	2b4f      	cmp	r3, #79	; 0x4f
 8005b2c:	d902      	bls.n	8005b34 <osMutexNew+0x6a>
          mem = 1;
 8005b2e:	2301      	movs	r3, #1
 8005b30:	613b      	str	r3, [r7, #16]
 8005b32:	e00c      	b.n	8005b4e <osMutexNew+0x84>
        }
        else {
          if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005b34:	687b      	ldr	r3, [r7, #4]
 8005b36:	689b      	ldr	r3, [r3, #8]
 8005b38:	2b00      	cmp	r3, #0
 8005b3a:	d108      	bne.n	8005b4e <osMutexNew+0x84>
 8005b3c:	687b      	ldr	r3, [r7, #4]
 8005b3e:	68db      	ldr	r3, [r3, #12]
 8005b40:	2b00      	cmp	r3, #0
 8005b42:	d104      	bne.n	8005b4e <osMutexNew+0x84>
            mem = 0;
 8005b44:	2300      	movs	r3, #0
 8005b46:	613b      	str	r3, [r7, #16]
 8005b48:	e001      	b.n	8005b4e <osMutexNew+0x84>
          }
        }
      }
      else {
        mem = 0;
 8005b4a:	2300      	movs	r3, #0
 8005b4c:	613b      	str	r3, [r7, #16]
      }

      if (mem == 1) {
 8005b4e:	693b      	ldr	r3, [r7, #16]
 8005b50:	2b01      	cmp	r3, #1
 8005b52:	d112      	bne.n	8005b7a <osMutexNew+0xb0>
        #if (configSUPPORT_STATIC_ALLOCATION == 1)
          if (rmtx != 0U) {
 8005b54:	697b      	ldr	r3, [r7, #20]
 8005b56:	2b00      	cmp	r3, #0
 8005b58:	d007      	beq.n	8005b6a <osMutexNew+0xa0>
            #if (configUSE_RECURSIVE_MUTEXES == 1)
            hMutex = xSemaphoreCreateRecursiveMutexStatic (attr->cb_mem);
 8005b5a:	687b      	ldr	r3, [r7, #4]
 8005b5c:	689b      	ldr	r3, [r3, #8]
 8005b5e:	4619      	mov	r1, r3
 8005b60:	2004      	movs	r0, #4
 8005b62:	f000 fdd0 	bl	8006706 <xQueueCreateMutexStatic>
 8005b66:	61f8      	str	r0, [r7, #28]
 8005b68:	e016      	b.n	8005b98 <osMutexNew+0xce>
            #endif
          }
          else {
            hMutex = xSemaphoreCreateMutexStatic (attr->cb_mem);
 8005b6a:	687b      	ldr	r3, [r7, #4]
 8005b6c:	689b      	ldr	r3, [r3, #8]
 8005b6e:	4619      	mov	r1, r3
 8005b70:	2001      	movs	r0, #1
 8005b72:	f000 fdc8 	bl	8006706 <xQueueCreateMutexStatic>
 8005b76:	61f8      	str	r0, [r7, #28]
 8005b78:	e00e      	b.n	8005b98 <osMutexNew+0xce>
          }
        #endif
      }
      else {
        if (mem == 0) {
 8005b7a:	693b      	ldr	r3, [r7, #16]
 8005b7c:	2b00      	cmp	r3, #0
 8005b7e:	d10b      	bne.n	8005b98 <osMutexNew+0xce>
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            if (rmtx != 0U) {
 8005b80:	697b      	ldr	r3, [r7, #20]
 8005b82:	2b00      	cmp	r3, #0
 8005b84:	d004      	beq.n	8005b90 <osMutexNew+0xc6>
              #if (configUSE_RECURSIVE_MUTEXES == 1)
              hMutex = xSemaphoreCreateRecursiveMutex ();
 8005b86:	2004      	movs	r0, #4
 8005b88:	f000 fda5 	bl	80066d6 <xQueueCreateMutex>
 8005b8c:	61f8      	str	r0, [r7, #28]
 8005b8e:	e003      	b.n	8005b98 <osMutexNew+0xce>
              #endif
            } else {
              hMutex = xSemaphoreCreateMutex ();
 8005b90:	2001      	movs	r0, #1
 8005b92:	f000 fda0 	bl	80066d6 <xQueueCreateMutex>
 8005b96:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }

      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hMutex != NULL) {
 8005b98:	69fb      	ldr	r3, [r7, #28]
 8005b9a:	2b00      	cmp	r3, #0
 8005b9c:	d00c      	beq.n	8005bb8 <osMutexNew+0xee>
        if (attr != NULL) {
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d003      	beq.n	8005bac <osMutexNew+0xe2>
          name = attr->name;
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	60fb      	str	r3, [r7, #12]
 8005baa:	e001      	b.n	8005bb0 <osMutexNew+0xe6>
        } else {
          name = NULL;
 8005bac:	2300      	movs	r3, #0
 8005bae:	60fb      	str	r3, [r7, #12]
        }
        vQueueAddToRegistry (hMutex, name);
 8005bb0:	68f9      	ldr	r1, [r7, #12]
 8005bb2:	69f8      	ldr	r0, [r7, #28]
 8005bb4:	f001 fcb0 	bl	8007518 <vQueueAddToRegistry>
      }
      #endif

      if ((hMutex != NULL) && (rmtx != 0U)) {
 8005bb8:	69fb      	ldr	r3, [r7, #28]
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d006      	beq.n	8005bcc <osMutexNew+0x102>
 8005bbe:	697b      	ldr	r3, [r7, #20]
 8005bc0:	2b00      	cmp	r3, #0
 8005bc2:	d003      	beq.n	8005bcc <osMutexNew+0x102>
        hMutex = (SemaphoreHandle_t)((uint32_t)hMutex | 1U);
 8005bc4:	69fb      	ldr	r3, [r7, #28]
 8005bc6:	f043 0301 	orr.w	r3, r3, #1
 8005bca:	61fb      	str	r3, [r7, #28]
      }
    }
  }

  return ((osMutexId_t)hMutex);
 8005bcc:	69fb      	ldr	r3, [r7, #28]
}
 8005bce:	4618      	mov	r0, r3
 8005bd0:	3720      	adds	r7, #32
 8005bd2:	46bd      	mov	sp, r7
 8005bd4:	bd80      	pop	{r7, pc}

08005bd6 <osMutexAcquire>:

osStatus_t osMutexAcquire (osMutexId_t mutex_id, uint32_t timeout) {
 8005bd6:	b580      	push	{r7, lr}
 8005bd8:	b086      	sub	sp, #24
 8005bda:	af00      	add	r7, sp, #0
 8005bdc:	6078      	str	r0, [r7, #4]
 8005bde:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	f023 0301 	bic.w	r3, r3, #1
 8005be6:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005be8:	687b      	ldr	r3, [r7, #4]
 8005bea:	f003 0301 	and.w	r3, r3, #1
 8005bee:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005bf0:	2300      	movs	r3, #0
 8005bf2:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005bf4:	f3ef 8305 	mrs	r3, IPSR
 8005bf8:	60bb      	str	r3, [r7, #8]
  return(result);
 8005bfa:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005bfc:	2b00      	cmp	r3, #0
 8005bfe:	d003      	beq.n	8005c08 <osMutexAcquire+0x32>
    stat = osErrorISR;
 8005c00:	f06f 0305 	mvn.w	r3, #5
 8005c04:	617b      	str	r3, [r7, #20]
 8005c06:	e02c      	b.n	8005c62 <osMutexAcquire+0x8c>
  }
  else if (hMutex == NULL) {
 8005c08:	693b      	ldr	r3, [r7, #16]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d103      	bne.n	8005c16 <osMutexAcquire+0x40>
    stat = osErrorParameter;
 8005c0e:	f06f 0303 	mvn.w	r3, #3
 8005c12:	617b      	str	r3, [r7, #20]
 8005c14:	e025      	b.n	8005c62 <osMutexAcquire+0x8c>
  }
  else {
    if (rmtx != 0U) {
 8005c16:	68fb      	ldr	r3, [r7, #12]
 8005c18:	2b00      	cmp	r3, #0
 8005c1a:	d011      	beq.n	8005c40 <osMutexAcquire+0x6a>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreTakeRecursive (hMutex, timeout) != pdPASS) {
 8005c1c:	6839      	ldr	r1, [r7, #0]
 8005c1e:	6938      	ldr	r0, [r7, #16]
 8005c20:	f000 fdc0 	bl	80067a4 <xQueueTakeMutexRecursive>
 8005c24:	4603      	mov	r3, r0
 8005c26:	2b01      	cmp	r3, #1
 8005c28:	d01b      	beq.n	8005c62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c2a:	683b      	ldr	r3, [r7, #0]
 8005c2c:	2b00      	cmp	r3, #0
 8005c2e:	d003      	beq.n	8005c38 <osMutexAcquire+0x62>
          stat = osErrorTimeout;
 8005c30:	f06f 0301 	mvn.w	r3, #1
 8005c34:	617b      	str	r3, [r7, #20]
 8005c36:	e014      	b.n	8005c62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c38:	f06f 0302 	mvn.w	r3, #2
 8005c3c:	617b      	str	r3, [r7, #20]
 8005c3e:	e010      	b.n	8005c62 <osMutexAcquire+0x8c>
        }
      }
      #endif
    }
    else {
      if (xSemaphoreTake (hMutex, timeout) != pdPASS) {
 8005c40:	6839      	ldr	r1, [r7, #0]
 8005c42:	6938      	ldr	r0, [r7, #16]
 8005c44:	f001 f954 	bl	8006ef0 <xQueueSemaphoreTake>
 8005c48:	4603      	mov	r3, r0
 8005c4a:	2b01      	cmp	r3, #1
 8005c4c:	d009      	beq.n	8005c62 <osMutexAcquire+0x8c>
        if (timeout != 0U) {
 8005c4e:	683b      	ldr	r3, [r7, #0]
 8005c50:	2b00      	cmp	r3, #0
 8005c52:	d003      	beq.n	8005c5c <osMutexAcquire+0x86>
          stat = osErrorTimeout;
 8005c54:	f06f 0301 	mvn.w	r3, #1
 8005c58:	617b      	str	r3, [r7, #20]
 8005c5a:	e002      	b.n	8005c62 <osMutexAcquire+0x8c>
        } else {
          stat = osErrorResource;
 8005c5c:	f06f 0302 	mvn.w	r3, #2
 8005c60:	617b      	str	r3, [r7, #20]
        }
      }
    }
  }

  return (stat);
 8005c62:	697b      	ldr	r3, [r7, #20]
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3718      	adds	r7, #24
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	bd80      	pop	{r7, pc}

08005c6c <osMutexRelease>:

osStatus_t osMutexRelease (osMutexId_t mutex_id) {
 8005c6c:	b580      	push	{r7, lr}
 8005c6e:	b086      	sub	sp, #24
 8005c70:	af00      	add	r7, sp, #0
 8005c72:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hMutex;
  osStatus_t stat;
  uint32_t rmtx;

  hMutex = (SemaphoreHandle_t)((uint32_t)mutex_id & ~1U);
 8005c74:	687b      	ldr	r3, [r7, #4]
 8005c76:	f023 0301 	bic.w	r3, r3, #1
 8005c7a:	613b      	str	r3, [r7, #16]

  rmtx = (uint32_t)mutex_id & 1U;
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	f003 0301 	and.w	r3, r3, #1
 8005c82:	60fb      	str	r3, [r7, #12]

  stat = osOK;
 8005c84:	2300      	movs	r3, #0
 8005c86:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005c88:	f3ef 8305 	mrs	r3, IPSR
 8005c8c:	60bb      	str	r3, [r7, #8]
  return(result);
 8005c8e:	68bb      	ldr	r3, [r7, #8]

  if (IS_IRQ()) {
 8005c90:	2b00      	cmp	r3, #0
 8005c92:	d003      	beq.n	8005c9c <osMutexRelease+0x30>
    stat = osErrorISR;
 8005c94:	f06f 0305 	mvn.w	r3, #5
 8005c98:	617b      	str	r3, [r7, #20]
 8005c9a:	e01f      	b.n	8005cdc <osMutexRelease+0x70>
  }
  else if (hMutex == NULL) {
 8005c9c:	693b      	ldr	r3, [r7, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d103      	bne.n	8005caa <osMutexRelease+0x3e>
    stat = osErrorParameter;
 8005ca2:	f06f 0303 	mvn.w	r3, #3
 8005ca6:	617b      	str	r3, [r7, #20]
 8005ca8:	e018      	b.n	8005cdc <osMutexRelease+0x70>
  }
  else {
    if (rmtx != 0U) {
 8005caa:	68fb      	ldr	r3, [r7, #12]
 8005cac:	2b00      	cmp	r3, #0
 8005cae:	d009      	beq.n	8005cc4 <osMutexRelease+0x58>
      #if (configUSE_RECURSIVE_MUTEXES == 1)
      if (xSemaphoreGiveRecursive (hMutex) != pdPASS) {
 8005cb0:	6938      	ldr	r0, [r7, #16]
 8005cb2:	f000 fd43 	bl	800673c <xQueueGiveMutexRecursive>
 8005cb6:	4603      	mov	r3, r0
 8005cb8:	2b01      	cmp	r3, #1
 8005cba:	d00f      	beq.n	8005cdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cbc:	f06f 0302 	mvn.w	r3, #2
 8005cc0:	617b      	str	r3, [r7, #20]
 8005cc2:	e00b      	b.n	8005cdc <osMutexRelease+0x70>
      }
      #endif
    }
    else {
      if (xSemaphoreGive (hMutex) != pdPASS) {
 8005cc4:	2300      	movs	r3, #0
 8005cc6:	2200      	movs	r2, #0
 8005cc8:	2100      	movs	r1, #0
 8005cca:	6938      	ldr	r0, [r7, #16]
 8005ccc:	f000 fe0a 	bl	80068e4 <xQueueGenericSend>
 8005cd0:	4603      	mov	r3, r0
 8005cd2:	2b01      	cmp	r3, #1
 8005cd4:	d002      	beq.n	8005cdc <osMutexRelease+0x70>
        stat = osErrorResource;
 8005cd6:	f06f 0302 	mvn.w	r3, #2
 8005cda:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005cdc:	697b      	ldr	r3, [r7, #20]
}
 8005cde:	4618      	mov	r0, r3
 8005ce0:	3718      	adds	r7, #24
 8005ce2:	46bd      	mov	sp, r7
 8005ce4:	bd80      	pop	{r7, pc}

08005ce6 <osSemaphoreNew>:
}
#endif /* (configUSE_OS2_MUTEX == 1) */

/*---------------------------------------------------------------------------*/

osSemaphoreId_t osSemaphoreNew (uint32_t max_count, uint32_t initial_count, const osSemaphoreAttr_t *attr) {
 8005ce6:	b580      	push	{r7, lr}
 8005ce8:	b08a      	sub	sp, #40	; 0x28
 8005cea:	af02      	add	r7, sp, #8
 8005cec:	60f8      	str	r0, [r7, #12]
 8005cee:	60b9      	str	r1, [r7, #8]
 8005cf0:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hSemaphore = NULL;
 8005cf2:	2300      	movs	r3, #0
 8005cf4:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005cf6:	f3ef 8305 	mrs	r3, IPSR
 8005cfa:	613b      	str	r3, [r7, #16]
  return(result);
 8005cfc:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (max_count > 0U) && (initial_count <= max_count)) {
 8005cfe:	2b00      	cmp	r3, #0
 8005d00:	d175      	bne.n	8005dee <osSemaphoreNew+0x108>
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d072      	beq.n	8005dee <osSemaphoreNew+0x108>
 8005d08:	68ba      	ldr	r2, [r7, #8]
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	429a      	cmp	r2, r3
 8005d0e:	d86e      	bhi.n	8005dee <osSemaphoreNew+0x108>
    mem = -1;
 8005d10:	f04f 33ff 	mov.w	r3, #4294967295
 8005d14:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005d16:	687b      	ldr	r3, [r7, #4]
 8005d18:	2b00      	cmp	r3, #0
 8005d1a:	d015      	beq.n	8005d48 <osSemaphoreNew+0x62>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticSemaphore_t))) {
 8005d1c:	687b      	ldr	r3, [r7, #4]
 8005d1e:	689b      	ldr	r3, [r3, #8]
 8005d20:	2b00      	cmp	r3, #0
 8005d22:	d006      	beq.n	8005d32 <osSemaphoreNew+0x4c>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	68db      	ldr	r3, [r3, #12]
 8005d28:	2b4f      	cmp	r3, #79	; 0x4f
 8005d2a:	d902      	bls.n	8005d32 <osSemaphoreNew+0x4c>
        mem = 1;
 8005d2c:	2301      	movs	r3, #1
 8005d2e:	61bb      	str	r3, [r7, #24]
 8005d30:	e00c      	b.n	8005d4c <osSemaphoreNew+0x66>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U)) {
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	689b      	ldr	r3, [r3, #8]
 8005d36:	2b00      	cmp	r3, #0
 8005d38:	d108      	bne.n	8005d4c <osSemaphoreNew+0x66>
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	68db      	ldr	r3, [r3, #12]
 8005d3e:	2b00      	cmp	r3, #0
 8005d40:	d104      	bne.n	8005d4c <osSemaphoreNew+0x66>
          mem = 0;
 8005d42:	2300      	movs	r3, #0
 8005d44:	61bb      	str	r3, [r7, #24]
 8005d46:	e001      	b.n	8005d4c <osSemaphoreNew+0x66>
        }
      }
    }
    else {
      mem = 0;
 8005d48:	2300      	movs	r3, #0
 8005d4a:	61bb      	str	r3, [r7, #24]
    }

    if (mem != -1) {
 8005d4c:	69bb      	ldr	r3, [r7, #24]
 8005d4e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005d52:	d04c      	beq.n	8005dee <osSemaphoreNew+0x108>
      if (max_count == 1U) {
 8005d54:	68fb      	ldr	r3, [r7, #12]
 8005d56:	2b01      	cmp	r3, #1
 8005d58:	d128      	bne.n	8005dac <osSemaphoreNew+0xc6>
        if (mem == 1) {
 8005d5a:	69bb      	ldr	r3, [r7, #24]
 8005d5c:	2b01      	cmp	r3, #1
 8005d5e:	d10a      	bne.n	8005d76 <osSemaphoreNew+0x90>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinaryStatic ((StaticSemaphore_t *)attr->cb_mem);
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	689b      	ldr	r3, [r3, #8]
 8005d64:	2203      	movs	r2, #3
 8005d66:	9200      	str	r2, [sp, #0]
 8005d68:	2200      	movs	r2, #0
 8005d6a:	2100      	movs	r1, #0
 8005d6c:	2001      	movs	r0, #1
 8005d6e:	f000 fbc3 	bl	80064f8 <xQueueGenericCreateStatic>
 8005d72:	61f8      	str	r0, [r7, #28]
 8005d74:	e005      	b.n	8005d82 <osSemaphoreNew+0x9c>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateBinary();
 8005d76:	2203      	movs	r2, #3
 8005d78:	2100      	movs	r1, #0
 8005d7a:	2001      	movs	r0, #1
 8005d7c:	f000 fc34 	bl	80065e8 <xQueueGenericCreate>
 8005d80:	61f8      	str	r0, [r7, #28]
          #endif
        }

        if ((hSemaphore != NULL) && (initial_count != 0U)) {
 8005d82:	69fb      	ldr	r3, [r7, #28]
 8005d84:	2b00      	cmp	r3, #0
 8005d86:	d022      	beq.n	8005dce <osSemaphoreNew+0xe8>
 8005d88:	68bb      	ldr	r3, [r7, #8]
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d01f      	beq.n	8005dce <osSemaphoreNew+0xe8>
          if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005d8e:	2300      	movs	r3, #0
 8005d90:	2200      	movs	r2, #0
 8005d92:	2100      	movs	r1, #0
 8005d94:	69f8      	ldr	r0, [r7, #28]
 8005d96:	f000 fda5 	bl	80068e4 <xQueueGenericSend>
 8005d9a:	4603      	mov	r3, r0
 8005d9c:	2b01      	cmp	r3, #1
 8005d9e:	d016      	beq.n	8005dce <osSemaphoreNew+0xe8>
            vSemaphoreDelete (hSemaphore);
 8005da0:	69f8      	ldr	r0, [r7, #28]
 8005da2:	f001 fa6d 	bl	8007280 <vQueueDelete>
            hSemaphore = NULL;
 8005da6:	2300      	movs	r3, #0
 8005da8:	61fb      	str	r3, [r7, #28]
 8005daa:	e010      	b.n	8005dce <osSemaphoreNew+0xe8>
          }
        }
      }
      else {
        if (mem == 1) {
 8005dac:	69bb      	ldr	r3, [r7, #24]
 8005dae:	2b01      	cmp	r3, #1
 8005db0:	d108      	bne.n	8005dc4 <osSemaphoreNew+0xde>
          #if (configSUPPORT_STATIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCountingStatic (max_count, initial_count, (StaticSemaphore_t *)attr->cb_mem);
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	689b      	ldr	r3, [r3, #8]
 8005db6:	461a      	mov	r2, r3
 8005db8:	68b9      	ldr	r1, [r7, #8]
 8005dba:	68f8      	ldr	r0, [r7, #12]
 8005dbc:	f000 fd28 	bl	8006810 <xQueueCreateCountingSemaphoreStatic>
 8005dc0:	61f8      	str	r0, [r7, #28]
 8005dc2:	e004      	b.n	8005dce <osSemaphoreNew+0xe8>
          #endif
        }
        else {
          #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
            hSemaphore = xSemaphoreCreateCounting (max_count, initial_count);
 8005dc4:	68b9      	ldr	r1, [r7, #8]
 8005dc6:	68f8      	ldr	r0, [r7, #12]
 8005dc8:	f000 fd59 	bl	800687e <xQueueCreateCountingSemaphore>
 8005dcc:	61f8      	str	r0, [r7, #28]
          #endif
        }
      }
      
      #if (configQUEUE_REGISTRY_SIZE > 0)
      if (hSemaphore != NULL) {
 8005dce:	69fb      	ldr	r3, [r7, #28]
 8005dd0:	2b00      	cmp	r3, #0
 8005dd2:	d00c      	beq.n	8005dee <osSemaphoreNew+0x108>
        if (attr != NULL) {
 8005dd4:	687b      	ldr	r3, [r7, #4]
 8005dd6:	2b00      	cmp	r3, #0
 8005dd8:	d003      	beq.n	8005de2 <osSemaphoreNew+0xfc>
          name = attr->name;
 8005dda:	687b      	ldr	r3, [r7, #4]
 8005ddc:	681b      	ldr	r3, [r3, #0]
 8005dde:	617b      	str	r3, [r7, #20]
 8005de0:	e001      	b.n	8005de6 <osSemaphoreNew+0x100>
        } else {
          name = NULL;
 8005de2:	2300      	movs	r3, #0
 8005de4:	617b      	str	r3, [r7, #20]
        }
        vQueueAddToRegistry (hSemaphore, name);
 8005de6:	6979      	ldr	r1, [r7, #20]
 8005de8:	69f8      	ldr	r0, [r7, #28]
 8005dea:	f001 fb95 	bl	8007518 <vQueueAddToRegistry>
      }
      #endif
    }
  }

  return ((osSemaphoreId_t)hSemaphore);
 8005dee:	69fb      	ldr	r3, [r7, #28]
}
 8005df0:	4618      	mov	r0, r3
 8005df2:	3720      	adds	r7, #32
 8005df4:	46bd      	mov	sp, r7
 8005df6:	bd80      	pop	{r7, pc}

08005df8 <osSemaphoreAcquire>:

osStatus_t osSemaphoreAcquire (osSemaphoreId_t semaphore_id, uint32_t timeout) {
 8005df8:	b580      	push	{r7, lr}
 8005dfa:	b086      	sub	sp, #24
 8005dfc:	af00      	add	r7, sp, #0
 8005dfe:	6078      	str	r0, [r7, #4]
 8005e00:	6039      	str	r1, [r7, #0]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005e06:	2300      	movs	r3, #0
 8005e08:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d103      	bne.n	8005e18 <osSemaphoreAcquire+0x20>
    stat = osErrorParameter;
 8005e10:	f06f 0303 	mvn.w	r3, #3
 8005e14:	617b      	str	r3, [r7, #20]
 8005e16:	e039      	b.n	8005e8c <osSemaphoreAcquire+0x94>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005e18:	f3ef 8305 	mrs	r3, IPSR
 8005e1c:	60fb      	str	r3, [r7, #12]
  return(result);
 8005e1e:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005e20:	2b00      	cmp	r3, #0
 8005e22:	d022      	beq.n	8005e6a <osSemaphoreAcquire+0x72>
    if (timeout != 0U) {
 8005e24:	683b      	ldr	r3, [r7, #0]
 8005e26:	2b00      	cmp	r3, #0
 8005e28:	d003      	beq.n	8005e32 <osSemaphoreAcquire+0x3a>
      stat = osErrorParameter;
 8005e2a:	f06f 0303 	mvn.w	r3, #3
 8005e2e:	617b      	str	r3, [r7, #20]
 8005e30:	e02c      	b.n	8005e8c <osSemaphoreAcquire+0x94>
    }
    else {
      yield = pdFALSE;
 8005e32:	2300      	movs	r3, #0
 8005e34:	60bb      	str	r3, [r7, #8]

      if (xSemaphoreTakeFromISR (hSemaphore, &yield) != pdPASS) {
 8005e36:	f107 0308 	add.w	r3, r7, #8
 8005e3a:	461a      	mov	r2, r3
 8005e3c:	2100      	movs	r1, #0
 8005e3e:	6938      	ldr	r0, [r7, #16]
 8005e40:	f001 f962 	bl	8007108 <xQueueReceiveFromISR>
 8005e44:	4603      	mov	r3, r0
 8005e46:	2b01      	cmp	r3, #1
 8005e48:	d003      	beq.n	8005e52 <osSemaphoreAcquire+0x5a>
        stat = osErrorResource;
 8005e4a:	f06f 0302 	mvn.w	r3, #2
 8005e4e:	617b      	str	r3, [r7, #20]
 8005e50:	e01c      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      } else {
        portYIELD_FROM_ISR (yield);
 8005e52:	68bb      	ldr	r3, [r7, #8]
 8005e54:	2b00      	cmp	r3, #0
 8005e56:	d019      	beq.n	8005e8c <osSemaphoreAcquire+0x94>
 8005e58:	4b0f      	ldr	r3, [pc, #60]	; (8005e98 <osSemaphoreAcquire+0xa0>)
 8005e5a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005e5e:	601a      	str	r2, [r3, #0]
 8005e60:	f3bf 8f4f 	dsb	sy
 8005e64:	f3bf 8f6f 	isb	sy
 8005e68:	e010      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      }
    }
  }
  else {
    if (xSemaphoreTake (hSemaphore, (TickType_t)timeout) != pdPASS) {
 8005e6a:	6839      	ldr	r1, [r7, #0]
 8005e6c:	6938      	ldr	r0, [r7, #16]
 8005e6e:	f001 f83f 	bl	8006ef0 <xQueueSemaphoreTake>
 8005e72:	4603      	mov	r3, r0
 8005e74:	2b01      	cmp	r3, #1
 8005e76:	d009      	beq.n	8005e8c <osSemaphoreAcquire+0x94>
      if (timeout != 0U) {
 8005e78:	683b      	ldr	r3, [r7, #0]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d003      	beq.n	8005e86 <osSemaphoreAcquire+0x8e>
        stat = osErrorTimeout;
 8005e7e:	f06f 0301 	mvn.w	r3, #1
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	e002      	b.n	8005e8c <osSemaphoreAcquire+0x94>
      } else {
        stat = osErrorResource;
 8005e86:	f06f 0302 	mvn.w	r3, #2
 8005e8a:	617b      	str	r3, [r7, #20]
      }
    }
  }

  return (stat);
 8005e8c:	697b      	ldr	r3, [r7, #20]
}
 8005e8e:	4618      	mov	r0, r3
 8005e90:	3718      	adds	r7, #24
 8005e92:	46bd      	mov	sp, r7
 8005e94:	bd80      	pop	{r7, pc}
 8005e96:	bf00      	nop
 8005e98:	e000ed04 	.word	0xe000ed04

08005e9c <osSemaphoreRelease>:

osStatus_t osSemaphoreRelease (osSemaphoreId_t semaphore_id) {
 8005e9c:	b580      	push	{r7, lr}
 8005e9e:	b086      	sub	sp, #24
 8005ea0:	af00      	add	r7, sp, #0
 8005ea2:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005ea4:	687b      	ldr	r3, [r7, #4]
 8005ea6:	613b      	str	r3, [r7, #16]
  osStatus_t stat;
  BaseType_t yield;

  stat = osOK;
 8005ea8:	2300      	movs	r3, #0
 8005eaa:	617b      	str	r3, [r7, #20]

  if (hSemaphore == NULL) {
 8005eac:	693b      	ldr	r3, [r7, #16]
 8005eae:	2b00      	cmp	r3, #0
 8005eb0:	d103      	bne.n	8005eba <osSemaphoreRelease+0x1e>
    stat = osErrorParameter;
 8005eb2:	f06f 0303 	mvn.w	r3, #3
 8005eb6:	617b      	str	r3, [r7, #20]
 8005eb8:	e02c      	b.n	8005f14 <osSemaphoreRelease+0x78>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005eba:	f3ef 8305 	mrs	r3, IPSR
 8005ebe:	60fb      	str	r3, [r7, #12]
  return(result);
 8005ec0:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 8005ec2:	2b00      	cmp	r3, #0
 8005ec4:	d01a      	beq.n	8005efc <osSemaphoreRelease+0x60>
    yield = pdFALSE;
 8005ec6:	2300      	movs	r3, #0
 8005ec8:	60bb      	str	r3, [r7, #8]

    if (xSemaphoreGiveFromISR (hSemaphore, &yield) != pdTRUE) {
 8005eca:	f107 0308 	add.w	r3, r7, #8
 8005ece:	4619      	mov	r1, r3
 8005ed0:	6938      	ldr	r0, [r7, #16]
 8005ed2:	f000 fea0 	bl	8006c16 <xQueueGiveFromISR>
 8005ed6:	4603      	mov	r3, r0
 8005ed8:	2b01      	cmp	r3, #1
 8005eda:	d003      	beq.n	8005ee4 <osSemaphoreRelease+0x48>
      stat = osErrorResource;
 8005edc:	f06f 0302 	mvn.w	r3, #2
 8005ee0:	617b      	str	r3, [r7, #20]
 8005ee2:	e017      	b.n	8005f14 <osSemaphoreRelease+0x78>
    } else {
      portYIELD_FROM_ISR (yield);
 8005ee4:	68bb      	ldr	r3, [r7, #8]
 8005ee6:	2b00      	cmp	r3, #0
 8005ee8:	d014      	beq.n	8005f14 <osSemaphoreRelease+0x78>
 8005eea:	4b0d      	ldr	r3, [pc, #52]	; (8005f20 <osSemaphoreRelease+0x84>)
 8005eec:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8005ef0:	601a      	str	r2, [r3, #0]
 8005ef2:	f3bf 8f4f 	dsb	sy
 8005ef6:	f3bf 8f6f 	isb	sy
 8005efa:	e00b      	b.n	8005f14 <osSemaphoreRelease+0x78>
    }
  }
  else {
    if (xSemaphoreGive (hSemaphore) != pdPASS) {
 8005efc:	2300      	movs	r3, #0
 8005efe:	2200      	movs	r2, #0
 8005f00:	2100      	movs	r1, #0
 8005f02:	6938      	ldr	r0, [r7, #16]
 8005f04:	f000 fcee 	bl	80068e4 <xQueueGenericSend>
 8005f08:	4603      	mov	r3, r0
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d002      	beq.n	8005f14 <osSemaphoreRelease+0x78>
      stat = osErrorResource;
 8005f0e:	f06f 0302 	mvn.w	r3, #2
 8005f12:	617b      	str	r3, [r7, #20]
    }
  }

  return (stat);
 8005f14:	697b      	ldr	r3, [r7, #20]
}
 8005f16:	4618      	mov	r0, r3
 8005f18:	3718      	adds	r7, #24
 8005f1a:	46bd      	mov	sp, r7
 8005f1c:	bd80      	pop	{r7, pc}
 8005f1e:	bf00      	nop
 8005f20:	e000ed04 	.word	0xe000ed04

08005f24 <osSemaphoreDelete>:
  }

  return (count);
}

osStatus_t osSemaphoreDelete (osSemaphoreId_t semaphore_id) {
 8005f24:	b580      	push	{r7, lr}
 8005f26:	b086      	sub	sp, #24
 8005f28:	af00      	add	r7, sp, #0
 8005f2a:	6078      	str	r0, [r7, #4]
  SemaphoreHandle_t hSemaphore = (SemaphoreHandle_t)semaphore_id;
 8005f2c:	687b      	ldr	r3, [r7, #4]
 8005f2e:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f30:	f3ef 8305 	mrs	r3, IPSR
 8005f34:	60fb      	str	r3, [r7, #12]
  return(result);
 8005f36:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8005f38:	2b00      	cmp	r3, #0
 8005f3a:	d003      	beq.n	8005f44 <osSemaphoreDelete+0x20>
    stat = osErrorISR;
 8005f3c:	f06f 0305 	mvn.w	r3, #5
 8005f40:	617b      	str	r3, [r7, #20]
 8005f42:	e00e      	b.n	8005f62 <osSemaphoreDelete+0x3e>
  }
  else if (hSemaphore == NULL) {
 8005f44:	693b      	ldr	r3, [r7, #16]
 8005f46:	2b00      	cmp	r3, #0
 8005f48:	d103      	bne.n	8005f52 <osSemaphoreDelete+0x2e>
    stat = osErrorParameter;
 8005f4a:	f06f 0303 	mvn.w	r3, #3
 8005f4e:	617b      	str	r3, [r7, #20]
 8005f50:	e007      	b.n	8005f62 <osSemaphoreDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hSemaphore);
 8005f52:	6938      	ldr	r0, [r7, #16]
 8005f54:	f001 fb0a 	bl	800756c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8005f58:	2300      	movs	r3, #0
 8005f5a:	617b      	str	r3, [r7, #20]
    vSemaphoreDelete (hSemaphore);
 8005f5c:	6938      	ldr	r0, [r7, #16]
 8005f5e:	f001 f98f 	bl	8007280 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 8005f62:	697b      	ldr	r3, [r7, #20]
}
 8005f64:	4618      	mov	r0, r3
 8005f66:	3718      	adds	r7, #24
 8005f68:	46bd      	mov	sp, r7
 8005f6a:	bd80      	pop	{r7, pc}

08005f6c <osMessageQueueNew>:

/*---------------------------------------------------------------------------*/

osMessageQueueId_t osMessageQueueNew (uint32_t msg_count, uint32_t msg_size, const osMessageQueueAttr_t *attr) {
 8005f6c:	b580      	push	{r7, lr}
 8005f6e:	b08a      	sub	sp, #40	; 0x28
 8005f70:	af02      	add	r7, sp, #8
 8005f72:	60f8      	str	r0, [r7, #12]
 8005f74:	60b9      	str	r1, [r7, #8]
 8005f76:	607a      	str	r2, [r7, #4]
  int32_t mem;
  #if (configQUEUE_REGISTRY_SIZE > 0)
  const char *name;
  #endif

  hQueue = NULL;
 8005f78:	2300      	movs	r3, #0
 8005f7a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 8005f7c:	f3ef 8305 	mrs	r3, IPSR
 8005f80:	613b      	str	r3, [r7, #16]
  return(result);
 8005f82:	693b      	ldr	r3, [r7, #16]

  if (!IS_IRQ() && (msg_count > 0U) && (msg_size > 0U)) {
 8005f84:	2b00      	cmp	r3, #0
 8005f86:	d15f      	bne.n	8006048 <osMessageQueueNew+0xdc>
 8005f88:	68fb      	ldr	r3, [r7, #12]
 8005f8a:	2b00      	cmp	r3, #0
 8005f8c:	d05c      	beq.n	8006048 <osMessageQueueNew+0xdc>
 8005f8e:	68bb      	ldr	r3, [r7, #8]
 8005f90:	2b00      	cmp	r3, #0
 8005f92:	d059      	beq.n	8006048 <osMessageQueueNew+0xdc>
    mem = -1;
 8005f94:	f04f 33ff 	mov.w	r3, #4294967295
 8005f98:	61bb      	str	r3, [r7, #24]

    if (attr != NULL) {
 8005f9a:	687b      	ldr	r3, [r7, #4]
 8005f9c:	2b00      	cmp	r3, #0
 8005f9e:	d029      	beq.n	8005ff4 <osMessageQueueNew+0x88>
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b00      	cmp	r3, #0
 8005fa6:	d012      	beq.n	8005fce <osMessageQueueNew+0x62>
 8005fa8:	687b      	ldr	r3, [r7, #4]
 8005faa:	68db      	ldr	r3, [r3, #12]
 8005fac:	2b4f      	cmp	r3, #79	; 0x4f
 8005fae:	d90e      	bls.n	8005fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005fb0:	687b      	ldr	r3, [r7, #4]
 8005fb2:	691b      	ldr	r3, [r3, #16]
      if ((attr->cb_mem != NULL) && (attr->cb_size >= sizeof(StaticQueue_t)) &&
 8005fb4:	2b00      	cmp	r3, #0
 8005fb6:	d00a      	beq.n	8005fce <osMessageQueueNew+0x62>
          (attr->mq_mem != NULL) && (attr->mq_size >= (msg_count * msg_size))) {
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	695a      	ldr	r2, [r3, #20]
 8005fbc:	68fb      	ldr	r3, [r7, #12]
 8005fbe:	68b9      	ldr	r1, [r7, #8]
 8005fc0:	fb01 f303 	mul.w	r3, r1, r3
 8005fc4:	429a      	cmp	r2, r3
 8005fc6:	d302      	bcc.n	8005fce <osMessageQueueNew+0x62>
        mem = 1;
 8005fc8:	2301      	movs	r3, #1
 8005fca:	61bb      	str	r3, [r7, #24]
 8005fcc:	e014      	b.n	8005ff8 <osMessageQueueNew+0x8c>
      }
      else {
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	689b      	ldr	r3, [r3, #8]
 8005fd2:	2b00      	cmp	r3, #0
 8005fd4:	d110      	bne.n	8005ff8 <osMessageQueueNew+0x8c>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	68db      	ldr	r3, [r3, #12]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d10c      	bne.n	8005ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	691b      	ldr	r3, [r3, #16]
        if ((attr->cb_mem == NULL) && (attr->cb_size == 0U) &&
 8005fe2:	2b00      	cmp	r3, #0
 8005fe4:	d108      	bne.n	8005ff8 <osMessageQueueNew+0x8c>
            (attr->mq_mem == NULL) && (attr->mq_size == 0U)) {
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	695b      	ldr	r3, [r3, #20]
 8005fea:	2b00      	cmp	r3, #0
 8005fec:	d104      	bne.n	8005ff8 <osMessageQueueNew+0x8c>
          mem = 0;
 8005fee:	2300      	movs	r3, #0
 8005ff0:	61bb      	str	r3, [r7, #24]
 8005ff2:	e001      	b.n	8005ff8 <osMessageQueueNew+0x8c>
        }
      }
    }
    else {
      mem = 0;
 8005ff4:	2300      	movs	r3, #0
 8005ff6:	61bb      	str	r3, [r7, #24]
    }

    if (mem == 1) {
 8005ff8:	69bb      	ldr	r3, [r7, #24]
 8005ffa:	2b01      	cmp	r3, #1
 8005ffc:	d10b      	bne.n	8006016 <osMessageQueueNew+0xaa>
      #if (configSUPPORT_STATIC_ALLOCATION == 1)
        hQueue = xQueueCreateStatic (msg_count, msg_size, attr->mq_mem, attr->cb_mem);
 8005ffe:	687b      	ldr	r3, [r7, #4]
 8006000:	691a      	ldr	r2, [r3, #16]
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	689b      	ldr	r3, [r3, #8]
 8006006:	2100      	movs	r1, #0
 8006008:	9100      	str	r1, [sp, #0]
 800600a:	68b9      	ldr	r1, [r7, #8]
 800600c:	68f8      	ldr	r0, [r7, #12]
 800600e:	f000 fa73 	bl	80064f8 <xQueueGenericCreateStatic>
 8006012:	61f8      	str	r0, [r7, #28]
 8006014:	e008      	b.n	8006028 <osMessageQueueNew+0xbc>
      #endif
    }
    else {
      if (mem == 0) {
 8006016:	69bb      	ldr	r3, [r7, #24]
 8006018:	2b00      	cmp	r3, #0
 800601a:	d105      	bne.n	8006028 <osMessageQueueNew+0xbc>
        #if (configSUPPORT_DYNAMIC_ALLOCATION == 1)
          hQueue = xQueueCreate (msg_count, msg_size);
 800601c:	2200      	movs	r2, #0
 800601e:	68b9      	ldr	r1, [r7, #8]
 8006020:	68f8      	ldr	r0, [r7, #12]
 8006022:	f000 fae1 	bl	80065e8 <xQueueGenericCreate>
 8006026:	61f8      	str	r0, [r7, #28]
        #endif
      }
    }

    #if (configQUEUE_REGISTRY_SIZE > 0)
    if (hQueue != NULL) {
 8006028:	69fb      	ldr	r3, [r7, #28]
 800602a:	2b00      	cmp	r3, #0
 800602c:	d00c      	beq.n	8006048 <osMessageQueueNew+0xdc>
      if (attr != NULL) {
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	2b00      	cmp	r3, #0
 8006032:	d003      	beq.n	800603c <osMessageQueueNew+0xd0>
        name = attr->name;
 8006034:	687b      	ldr	r3, [r7, #4]
 8006036:	681b      	ldr	r3, [r3, #0]
 8006038:	617b      	str	r3, [r7, #20]
 800603a:	e001      	b.n	8006040 <osMessageQueueNew+0xd4>
      } else {
        name = NULL;
 800603c:	2300      	movs	r3, #0
 800603e:	617b      	str	r3, [r7, #20]
      }
      vQueueAddToRegistry (hQueue, name);
 8006040:	6979      	ldr	r1, [r7, #20]
 8006042:	69f8      	ldr	r0, [r7, #28]
 8006044:	f001 fa68 	bl	8007518 <vQueueAddToRegistry>
    }
    #endif

  }

  return ((osMessageQueueId_t)hQueue);
 8006048:	69fb      	ldr	r3, [r7, #28]
}
 800604a:	4618      	mov	r0, r3
 800604c:	3720      	adds	r7, #32
 800604e:	46bd      	mov	sp, r7
 8006050:	bd80      	pop	{r7, pc}
	...

08006054 <osMessageQueuePut>:

osStatus_t osMessageQueuePut (osMessageQueueId_t mq_id, const void *msg_ptr, uint8_t msg_prio, uint32_t timeout) {
 8006054:	b580      	push	{r7, lr}
 8006056:	b088      	sub	sp, #32
 8006058:	af00      	add	r7, sp, #0
 800605a:	60f8      	str	r0, [r7, #12]
 800605c:	60b9      	str	r1, [r7, #8]
 800605e:	603b      	str	r3, [r7, #0]
 8006060:	4613      	mov	r3, r2
 8006062:	71fb      	strb	r3, [r7, #7]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006064:	68fb      	ldr	r3, [r7, #12]
 8006066:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006068:	2300      	movs	r3, #0
 800606a:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800606c:	f3ef 8305 	mrs	r3, IPSR
 8006070:	617b      	str	r3, [r7, #20]
  return(result);
 8006072:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006074:	2b00      	cmp	r3, #0
 8006076:	d028      	beq.n	80060ca <osMessageQueuePut+0x76>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006078:	69bb      	ldr	r3, [r7, #24]
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <osMessageQueuePut+0x36>
 800607e:	68bb      	ldr	r3, [r7, #8]
 8006080:	2b00      	cmp	r3, #0
 8006082:	d002      	beq.n	800608a <osMessageQueuePut+0x36>
 8006084:	683b      	ldr	r3, [r7, #0]
 8006086:	2b00      	cmp	r3, #0
 8006088:	d003      	beq.n	8006092 <osMessageQueuePut+0x3e>
      stat = osErrorParameter;
 800608a:	f06f 0303 	mvn.w	r3, #3
 800608e:	61fb      	str	r3, [r7, #28]
 8006090:	e038      	b.n	8006104 <osMessageQueuePut+0xb0>
    }
    else {
      yield = pdFALSE;
 8006092:	2300      	movs	r3, #0
 8006094:	613b      	str	r3, [r7, #16]

      if (xQueueSendToBackFromISR (hQueue, msg_ptr, &yield) != pdTRUE) {
 8006096:	f107 0210 	add.w	r2, r7, #16
 800609a:	2300      	movs	r3, #0
 800609c:	68b9      	ldr	r1, [r7, #8]
 800609e:	69b8      	ldr	r0, [r7, #24]
 80060a0:	f000 fd1e 	bl	8006ae0 <xQueueGenericSendFromISR>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d003      	beq.n	80060b2 <osMessageQueuePut+0x5e>
        stat = osErrorResource;
 80060aa:	f06f 0302 	mvn.w	r3, #2
 80060ae:	61fb      	str	r3, [r7, #28]
 80060b0:	e028      	b.n	8006104 <osMessageQueuePut+0xb0>
      } else {
        portYIELD_FROM_ISR (yield);
 80060b2:	693b      	ldr	r3, [r7, #16]
 80060b4:	2b00      	cmp	r3, #0
 80060b6:	d025      	beq.n	8006104 <osMessageQueuePut+0xb0>
 80060b8:	4b15      	ldr	r3, [pc, #84]	; (8006110 <osMessageQueuePut+0xbc>)
 80060ba:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80060be:	601a      	str	r2, [r3, #0]
 80060c0:	f3bf 8f4f 	dsb	sy
 80060c4:	f3bf 8f6f 	isb	sy
 80060c8:	e01c      	b.n	8006104 <osMessageQueuePut+0xb0>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 80060ca:	69bb      	ldr	r3, [r7, #24]
 80060cc:	2b00      	cmp	r3, #0
 80060ce:	d002      	beq.n	80060d6 <osMessageQueuePut+0x82>
 80060d0:	68bb      	ldr	r3, [r7, #8]
 80060d2:	2b00      	cmp	r3, #0
 80060d4:	d103      	bne.n	80060de <osMessageQueuePut+0x8a>
      stat = osErrorParameter;
 80060d6:	f06f 0303 	mvn.w	r3, #3
 80060da:	61fb      	str	r3, [r7, #28]
 80060dc:	e012      	b.n	8006104 <osMessageQueuePut+0xb0>
    }
    else {
      if (xQueueSendToBack (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 80060de:	2300      	movs	r3, #0
 80060e0:	683a      	ldr	r2, [r7, #0]
 80060e2:	68b9      	ldr	r1, [r7, #8]
 80060e4:	69b8      	ldr	r0, [r7, #24]
 80060e6:	f000 fbfd 	bl	80068e4 <xQueueGenericSend>
 80060ea:	4603      	mov	r3, r0
 80060ec:	2b01      	cmp	r3, #1
 80060ee:	d009      	beq.n	8006104 <osMessageQueuePut+0xb0>
        if (timeout != 0U) {
 80060f0:	683b      	ldr	r3, [r7, #0]
 80060f2:	2b00      	cmp	r3, #0
 80060f4:	d003      	beq.n	80060fe <osMessageQueuePut+0xaa>
          stat = osErrorTimeout;
 80060f6:	f06f 0301 	mvn.w	r3, #1
 80060fa:	61fb      	str	r3, [r7, #28]
 80060fc:	e002      	b.n	8006104 <osMessageQueuePut+0xb0>
        } else {
          stat = osErrorResource;
 80060fe:	f06f 0302 	mvn.w	r3, #2
 8006102:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 8006104:	69fb      	ldr	r3, [r7, #28]
}
 8006106:	4618      	mov	r0, r3
 8006108:	3720      	adds	r7, #32
 800610a:	46bd      	mov	sp, r7
 800610c:	bd80      	pop	{r7, pc}
 800610e:	bf00      	nop
 8006110:	e000ed04 	.word	0xe000ed04

08006114 <osMessageQueueGet>:

osStatus_t osMessageQueueGet (osMessageQueueId_t mq_id, void *msg_ptr, uint8_t *msg_prio, uint32_t timeout) {
 8006114:	b580      	push	{r7, lr}
 8006116:	b088      	sub	sp, #32
 8006118:	af00      	add	r7, sp, #0
 800611a:	60f8      	str	r0, [r7, #12]
 800611c:	60b9      	str	r1, [r7, #8]
 800611e:	607a      	str	r2, [r7, #4]
 8006120:	603b      	str	r3, [r7, #0]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006122:	68fb      	ldr	r3, [r7, #12]
 8006124:	61bb      	str	r3, [r7, #24]
  osStatus_t stat;
  BaseType_t yield;

  (void)msg_prio; /* Message priority is ignored */

  stat = osOK;
 8006126:	2300      	movs	r3, #0
 8006128:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800612a:	f3ef 8305 	mrs	r3, IPSR
 800612e:	617b      	str	r3, [r7, #20]
  return(result);
 8006130:	697b      	ldr	r3, [r7, #20]

  if (IS_IRQ()) {
 8006132:	2b00      	cmp	r3, #0
 8006134:	d028      	beq.n	8006188 <osMessageQueueGet+0x74>
    if ((hQueue == NULL) || (msg_ptr == NULL) || (timeout != 0U)) {
 8006136:	69bb      	ldr	r3, [r7, #24]
 8006138:	2b00      	cmp	r3, #0
 800613a:	d005      	beq.n	8006148 <osMessageQueueGet+0x34>
 800613c:	68bb      	ldr	r3, [r7, #8]
 800613e:	2b00      	cmp	r3, #0
 8006140:	d002      	beq.n	8006148 <osMessageQueueGet+0x34>
 8006142:	683b      	ldr	r3, [r7, #0]
 8006144:	2b00      	cmp	r3, #0
 8006146:	d003      	beq.n	8006150 <osMessageQueueGet+0x3c>
      stat = osErrorParameter;
 8006148:	f06f 0303 	mvn.w	r3, #3
 800614c:	61fb      	str	r3, [r7, #28]
 800614e:	e037      	b.n	80061c0 <osMessageQueueGet+0xac>
    }
    else {
      yield = pdFALSE;
 8006150:	2300      	movs	r3, #0
 8006152:	613b      	str	r3, [r7, #16]

      if (xQueueReceiveFromISR (hQueue, msg_ptr, &yield) != pdPASS) {
 8006154:	f107 0310 	add.w	r3, r7, #16
 8006158:	461a      	mov	r2, r3
 800615a:	68b9      	ldr	r1, [r7, #8]
 800615c:	69b8      	ldr	r0, [r7, #24]
 800615e:	f000 ffd3 	bl	8007108 <xQueueReceiveFromISR>
 8006162:	4603      	mov	r3, r0
 8006164:	2b01      	cmp	r3, #1
 8006166:	d003      	beq.n	8006170 <osMessageQueueGet+0x5c>
        stat = osErrorResource;
 8006168:	f06f 0302 	mvn.w	r3, #2
 800616c:	61fb      	str	r3, [r7, #28]
 800616e:	e027      	b.n	80061c0 <osMessageQueueGet+0xac>
      } else {
        portYIELD_FROM_ISR (yield);
 8006170:	693b      	ldr	r3, [r7, #16]
 8006172:	2b00      	cmp	r3, #0
 8006174:	d024      	beq.n	80061c0 <osMessageQueueGet+0xac>
 8006176:	4b15      	ldr	r3, [pc, #84]	; (80061cc <osMessageQueueGet+0xb8>)
 8006178:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800617c:	601a      	str	r2, [r3, #0]
 800617e:	f3bf 8f4f 	dsb	sy
 8006182:	f3bf 8f6f 	isb	sy
 8006186:	e01b      	b.n	80061c0 <osMessageQueueGet+0xac>
      }
    }
  }
  else {
    if ((hQueue == NULL) || (msg_ptr == NULL)) {
 8006188:	69bb      	ldr	r3, [r7, #24]
 800618a:	2b00      	cmp	r3, #0
 800618c:	d002      	beq.n	8006194 <osMessageQueueGet+0x80>
 800618e:	68bb      	ldr	r3, [r7, #8]
 8006190:	2b00      	cmp	r3, #0
 8006192:	d103      	bne.n	800619c <osMessageQueueGet+0x88>
      stat = osErrorParameter;
 8006194:	f06f 0303 	mvn.w	r3, #3
 8006198:	61fb      	str	r3, [r7, #28]
 800619a:	e011      	b.n	80061c0 <osMessageQueueGet+0xac>
    }
    else {
      if (xQueueReceive (hQueue, msg_ptr, (TickType_t)timeout) != pdPASS) {
 800619c:	683a      	ldr	r2, [r7, #0]
 800619e:	68b9      	ldr	r1, [r7, #8]
 80061a0:	69b8      	ldr	r0, [r7, #24]
 80061a2:	f000 fdc5 	bl	8006d30 <xQueueReceive>
 80061a6:	4603      	mov	r3, r0
 80061a8:	2b01      	cmp	r3, #1
 80061aa:	d009      	beq.n	80061c0 <osMessageQueueGet+0xac>
        if (timeout != 0U) {
 80061ac:	683b      	ldr	r3, [r7, #0]
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d003      	beq.n	80061ba <osMessageQueueGet+0xa6>
          stat = osErrorTimeout;
 80061b2:	f06f 0301 	mvn.w	r3, #1
 80061b6:	61fb      	str	r3, [r7, #28]
 80061b8:	e002      	b.n	80061c0 <osMessageQueueGet+0xac>
        } else {
          stat = osErrorResource;
 80061ba:	f06f 0302 	mvn.w	r3, #2
 80061be:	61fb      	str	r3, [r7, #28]
        }
      }
    }
  }

  return (stat);
 80061c0:	69fb      	ldr	r3, [r7, #28]
}
 80061c2:	4618      	mov	r0, r3
 80061c4:	3720      	adds	r7, #32
 80061c6:	46bd      	mov	sp, r7
 80061c8:	bd80      	pop	{r7, pc}
 80061ca:	bf00      	nop
 80061cc:	e000ed04 	.word	0xe000ed04

080061d0 <osMessageQueueGetCount>:
  }

  return (size);
}

uint32_t osMessageQueueGetCount (osMessageQueueId_t mq_id) {
 80061d0:	b580      	push	{r7, lr}
 80061d2:	b086      	sub	sp, #24
 80061d4:	af00      	add	r7, sp, #0
 80061d6:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 80061d8:	687b      	ldr	r3, [r7, #4]
 80061da:	613b      	str	r3, [r7, #16]
  UBaseType_t count;

  if (hQueue == NULL) {
 80061dc:	693b      	ldr	r3, [r7, #16]
 80061de:	2b00      	cmp	r3, #0
 80061e0:	d102      	bne.n	80061e8 <osMessageQueueGetCount+0x18>
    count = 0U;
 80061e2:	2300      	movs	r3, #0
 80061e4:	617b      	str	r3, [r7, #20]
 80061e6:	e00e      	b.n	8006206 <osMessageQueueGetCount+0x36>
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 80061e8:	f3ef 8305 	mrs	r3, IPSR
 80061ec:	60fb      	str	r3, [r7, #12]
  return(result);
 80061ee:	68fb      	ldr	r3, [r7, #12]
  }
  else if (IS_IRQ()) {
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d004      	beq.n	80061fe <osMessageQueueGetCount+0x2e>
    count = uxQueueMessagesWaitingFromISR (hQueue);
 80061f4:	6938      	ldr	r0, [r7, #16]
 80061f6:	f001 f825 	bl	8007244 <uxQueueMessagesWaitingFromISR>
 80061fa:	6178      	str	r0, [r7, #20]
 80061fc:	e003      	b.n	8006206 <osMessageQueueGetCount+0x36>
  }
  else {
    count = uxQueueMessagesWaiting (hQueue);
 80061fe:	6938      	ldr	r0, [r7, #16]
 8006200:	f001 f802 	bl	8007208 <uxQueueMessagesWaiting>
 8006204:	6178      	str	r0, [r7, #20]
  }

  return ((uint32_t)count);
 8006206:	697b      	ldr	r3, [r7, #20]
}
 8006208:	4618      	mov	r0, r3
 800620a:	3718      	adds	r7, #24
 800620c:	46bd      	mov	sp, r7
 800620e:	bd80      	pop	{r7, pc}

08006210 <osMessageQueueDelete>:
  }

  return (stat);
}

osStatus_t osMessageQueueDelete (osMessageQueueId_t mq_id) {
 8006210:	b580      	push	{r7, lr}
 8006212:	b086      	sub	sp, #24
 8006214:	af00      	add	r7, sp, #0
 8006216:	6078      	str	r0, [r7, #4]
  QueueHandle_t hQueue = (QueueHandle_t)mq_id;
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MRS %0, ipsr" : "=r" (result) );
 800621c:	f3ef 8305 	mrs	r3, IPSR
 8006220:	60fb      	str	r3, [r7, #12]
  return(result);
 8006222:	68fb      	ldr	r3, [r7, #12]
  osStatus_t stat;

#ifndef USE_FreeRTOS_HEAP_1
  if (IS_IRQ()) {
 8006224:	2b00      	cmp	r3, #0
 8006226:	d003      	beq.n	8006230 <osMessageQueueDelete+0x20>
    stat = osErrorISR;
 8006228:	f06f 0305 	mvn.w	r3, #5
 800622c:	617b      	str	r3, [r7, #20]
 800622e:	e00e      	b.n	800624e <osMessageQueueDelete+0x3e>
  }
  else if (hQueue == NULL) {
 8006230:	693b      	ldr	r3, [r7, #16]
 8006232:	2b00      	cmp	r3, #0
 8006234:	d103      	bne.n	800623e <osMessageQueueDelete+0x2e>
    stat = osErrorParameter;
 8006236:	f06f 0303 	mvn.w	r3, #3
 800623a:	617b      	str	r3, [r7, #20]
 800623c:	e007      	b.n	800624e <osMessageQueueDelete+0x3e>
  }
  else {
    #if (configQUEUE_REGISTRY_SIZE > 0)
    vQueueUnregisterQueue (hQueue);
 800623e:	6938      	ldr	r0, [r7, #16]
 8006240:	f001 f994 	bl	800756c <vQueueUnregisterQueue>
    #endif

    stat = osOK;
 8006244:	2300      	movs	r3, #0
 8006246:	617b      	str	r3, [r7, #20]
    vQueueDelete (hQueue);
 8006248:	6938      	ldr	r0, [r7, #16]
 800624a:	f001 f819 	bl	8007280 <vQueueDelete>
  }
#else
  stat = osError;
#endif

  return (stat);
 800624e:	697b      	ldr	r3, [r7, #20]
}
 8006250:	4618      	mov	r0, r3
 8006252:	3718      	adds	r7, #24
 8006254:	46bd      	mov	sp, r7
 8006256:	bd80      	pop	{r7, pc}

08006258 <vApplicationGetIdleTaskMemory>:

/*
  vApplicationGetIdleTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetIdleTaskMemory (StaticTask_t **ppxIdleTaskTCBBuffer, StackType_t **ppxIdleTaskStackBuffer, uint32_t *pulIdleTaskStackSize) {
 8006258:	b480      	push	{r7}
 800625a:	b085      	sub	sp, #20
 800625c:	af00      	add	r7, sp, #0
 800625e:	60f8      	str	r0, [r7, #12]
 8006260:	60b9      	str	r1, [r7, #8]
 8006262:	607a      	str	r2, [r7, #4]
  /* Idle task control block and stack */
  static StaticTask_t Idle_TCB;
  static StackType_t  Idle_Stack[configMINIMAL_STACK_SIZE];

  *ppxIdleTaskTCBBuffer   = &Idle_TCB;
 8006264:	68fb      	ldr	r3, [r7, #12]
 8006266:	4a07      	ldr	r2, [pc, #28]	; (8006284 <vApplicationGetIdleTaskMemory+0x2c>)
 8006268:	601a      	str	r2, [r3, #0]
  *ppxIdleTaskStackBuffer = &Idle_Stack[0];
 800626a:	68bb      	ldr	r3, [r7, #8]
 800626c:	4a06      	ldr	r2, [pc, #24]	; (8006288 <vApplicationGetIdleTaskMemory+0x30>)
 800626e:	601a      	str	r2, [r3, #0]
  *pulIdleTaskStackSize   = (uint32_t)configMINIMAL_STACK_SIZE;
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	f44f 7280 	mov.w	r2, #256	; 0x100
 8006276:	601a      	str	r2, [r3, #0]
}
 8006278:	bf00      	nop
 800627a:	3714      	adds	r7, #20
 800627c:	46bd      	mov	sp, r7
 800627e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006282:	4770      	bx	lr
 8006284:	20004eec 	.word	0x20004eec
 8006288:	20004f94 	.word	0x20004f94

0800628c <vApplicationGetTimerTaskMemory>:

/*
  vApplicationGetTimerTaskMemory gets called when configSUPPORT_STATIC_ALLOCATION
  equals to 1 and is required for static memory allocation support.
*/
__WEAK void vApplicationGetTimerTaskMemory (StaticTask_t **ppxTimerTaskTCBBuffer, StackType_t **ppxTimerTaskStackBuffer, uint32_t *pulTimerTaskStackSize) {
 800628c:	b480      	push	{r7}
 800628e:	b085      	sub	sp, #20
 8006290:	af00      	add	r7, sp, #0
 8006292:	60f8      	str	r0, [r7, #12]
 8006294:	60b9      	str	r1, [r7, #8]
 8006296:	607a      	str	r2, [r7, #4]
  /* Timer task control block and stack */
  static StaticTask_t Timer_TCB;
  static StackType_t  Timer_Stack[configTIMER_TASK_STACK_DEPTH];

  *ppxTimerTaskTCBBuffer   = &Timer_TCB;
 8006298:	68fb      	ldr	r3, [r7, #12]
 800629a:	4a07      	ldr	r2, [pc, #28]	; (80062b8 <vApplicationGetTimerTaskMemory+0x2c>)
 800629c:	601a      	str	r2, [r3, #0]
  *ppxTimerTaskStackBuffer = &Timer_Stack[0];
 800629e:	68bb      	ldr	r3, [r7, #8]
 80062a0:	4a06      	ldr	r2, [pc, #24]	; (80062bc <vApplicationGetTimerTaskMemory+0x30>)
 80062a2:	601a      	str	r2, [r3, #0]
  *pulTimerTaskStackSize   = (uint32_t)configTIMER_TASK_STACK_DEPTH;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	f44f 7200 	mov.w	r2, #512	; 0x200
 80062aa:	601a      	str	r2, [r3, #0]
}
 80062ac:	bf00      	nop
 80062ae:	3714      	adds	r7, #20
 80062b0:	46bd      	mov	sp, r7
 80062b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062b6:	4770      	bx	lr
 80062b8:	20005394 	.word	0x20005394
 80062bc:	2000543c 	.word	0x2000543c

080062c0 <vListInitialise>:
/*-----------------------------------------------------------
 * PUBLIC LIST API documented in list.h
 *----------------------------------------------------------*/

void vListInitialise( List_t * const pxList )
{
 80062c0:	b480      	push	{r7}
 80062c2:	b083      	sub	sp, #12
 80062c4:	af00      	add	r7, sp, #0
 80062c6:	6078      	str	r0, [r7, #4]
	/* The list structure contains a list item which is used to mark the
	end of the list.  To initialise the list the list end is inserted
	as the only list entry. */
	pxList->pxIndex = ( ListItem_t * ) &( pxList->xListEnd );			/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062c8:	687b      	ldr	r3, [r7, #4]
 80062ca:	f103 0208 	add.w	r2, r3, #8
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	605a      	str	r2, [r3, #4]

	/* The list end value is the highest possible value in the list to
	ensure it remains at the end of the list. */
	pxList->xListEnd.xItemValue = portMAX_DELAY;
 80062d2:	687b      	ldr	r3, [r7, #4]
 80062d4:	f04f 32ff 	mov.w	r2, #4294967295
 80062d8:	609a      	str	r2, [r3, #8]

	/* The list end next and previous pointers point to itself so we know
	when the list is empty. */
	pxList->xListEnd.pxNext = ( ListItem_t * ) &( pxList->xListEnd );	/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062da:	687b      	ldr	r3, [r7, #4]
 80062dc:	f103 0208 	add.w	r2, r3, #8
 80062e0:	687b      	ldr	r3, [r7, #4]
 80062e2:	60da      	str	r2, [r3, #12]
	pxList->xListEnd.pxPrevious = ( ListItem_t * ) &( pxList->xListEnd );/*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. */
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	f103 0208 	add.w	r2, r3, #8
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	611a      	str	r2, [r3, #16]

	pxList->uxNumberOfItems = ( UBaseType_t ) 0U;
 80062ee:	687b      	ldr	r3, [r7, #4]
 80062f0:	2200      	movs	r2, #0
 80062f2:	601a      	str	r2, [r3, #0]

	/* Write known values into the list if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_LIST_INTEGRITY_CHECK_1_VALUE( pxList );
	listSET_LIST_INTEGRITY_CHECK_2_VALUE( pxList );
}
 80062f4:	bf00      	nop
 80062f6:	370c      	adds	r7, #12
 80062f8:	46bd      	mov	sp, r7
 80062fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062fe:	4770      	bx	lr

08006300 <vListInitialiseItem>:
/*-----------------------------------------------------------*/

void vListInitialiseItem( ListItem_t * const pxItem )
{
 8006300:	b480      	push	{r7}
 8006302:	b083      	sub	sp, #12
 8006304:	af00      	add	r7, sp, #0
 8006306:	6078      	str	r0, [r7, #4]
	/* Make sure the list item is not recorded as being on a list. */
	pxItem->pxContainer = NULL;
 8006308:	687b      	ldr	r3, [r7, #4]
 800630a:	2200      	movs	r2, #0
 800630c:	611a      	str	r2, [r3, #16]

	/* Write known values into the list item if
	configUSE_LIST_DATA_INTEGRITY_CHECK_BYTES is set to 1. */
	listSET_FIRST_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
	listSET_SECOND_LIST_ITEM_INTEGRITY_CHECK_VALUE( pxItem );
}
 800630e:	bf00      	nop
 8006310:	370c      	adds	r7, #12
 8006312:	46bd      	mov	sp, r7
 8006314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006318:	4770      	bx	lr

0800631a <vListInsertEnd>:
/*-----------------------------------------------------------*/

void vListInsertEnd( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 800631a:	b480      	push	{r7}
 800631c:	b085      	sub	sp, #20
 800631e:	af00      	add	r7, sp, #0
 8006320:	6078      	str	r0, [r7, #4]
 8006322:	6039      	str	r1, [r7, #0]
ListItem_t * const pxIndex = pxList->pxIndex;
 8006324:	687b      	ldr	r3, [r7, #4]
 8006326:	685b      	ldr	r3, [r3, #4]
 8006328:	60fb      	str	r3, [r7, #12]
	listTEST_LIST_ITEM_INTEGRITY( pxNewListItem );

	/* Insert a new list item into pxList, but rather than sort the list,
	makes the new list item the last item to be removed by a call to
	listGET_OWNER_OF_NEXT_ENTRY(). */
	pxNewListItem->pxNext = pxIndex;
 800632a:	683b      	ldr	r3, [r7, #0]
 800632c:	68fa      	ldr	r2, [r7, #12]
 800632e:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxPrevious = pxIndex->pxPrevious;
 8006330:	68fb      	ldr	r3, [r7, #12]
 8006332:	689a      	ldr	r2, [r3, #8]
 8006334:	683b      	ldr	r3, [r7, #0]
 8006336:	609a      	str	r2, [r3, #8]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	pxIndex->pxPrevious->pxNext = pxNewListItem;
 8006338:	68fb      	ldr	r3, [r7, #12]
 800633a:	689b      	ldr	r3, [r3, #8]
 800633c:	683a      	ldr	r2, [r7, #0]
 800633e:	605a      	str	r2, [r3, #4]
	pxIndex->pxPrevious = pxNewListItem;
 8006340:	68fb      	ldr	r3, [r7, #12]
 8006342:	683a      	ldr	r2, [r7, #0]
 8006344:	609a      	str	r2, [r3, #8]

	/* Remember which list the item is in. */
	pxNewListItem->pxContainer = pxList;
 8006346:	683b      	ldr	r3, [r7, #0]
 8006348:	687a      	ldr	r2, [r7, #4]
 800634a:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	681b      	ldr	r3, [r3, #0]
 8006350:	1c5a      	adds	r2, r3, #1
 8006352:	687b      	ldr	r3, [r7, #4]
 8006354:	601a      	str	r2, [r3, #0]
}
 8006356:	bf00      	nop
 8006358:	3714      	adds	r7, #20
 800635a:	46bd      	mov	sp, r7
 800635c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006360:	4770      	bx	lr

08006362 <vListInsert>:
/*-----------------------------------------------------------*/

void vListInsert( List_t * const pxList, ListItem_t * const pxNewListItem )
{
 8006362:	b480      	push	{r7}
 8006364:	b085      	sub	sp, #20
 8006366:	af00      	add	r7, sp, #0
 8006368:	6078      	str	r0, [r7, #4]
 800636a:	6039      	str	r1, [r7, #0]
ListItem_t *pxIterator;
const TickType_t xValueOfInsertion = pxNewListItem->xItemValue;
 800636c:	683b      	ldr	r3, [r7, #0]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	60bb      	str	r3, [r7, #8]
	new list item should be placed after it.  This ensures that TCBs which are
	stored in ready lists (all of which have the same xItemValue value) get a
	share of the CPU.  However, if the xItemValue is the same as the back marker
	the iteration loop below will not end.  Therefore the value is checked
	first, and the algorithm slightly modified if necessary. */
	if( xValueOfInsertion == portMAX_DELAY )
 8006372:	68bb      	ldr	r3, [r7, #8]
 8006374:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006378:	d103      	bne.n	8006382 <vListInsert+0x20>
	{
		pxIterator = pxList->xListEnd.pxPrevious;
 800637a:	687b      	ldr	r3, [r7, #4]
 800637c:	691b      	ldr	r3, [r3, #16]
 800637e:	60fb      	str	r3, [r7, #12]
 8006380:	e00c      	b.n	800639c <vListInsert+0x3a>
			4) Using a queue or semaphore before it has been initialised or
			   before the scheduler has been started (are interrupts firing
			   before vTaskStartScheduler() has been called?).
		**********************************************************************/

		for( pxIterator = ( ListItem_t * ) &( pxList->xListEnd ); pxIterator->pxNext->xItemValue <= xValueOfInsertion; pxIterator = pxIterator->pxNext ) /*lint !e826 !e740 !e9087 The mini list structure is used as the list end to save RAM.  This is checked and valid. *//*lint !e440 The iterator moves to a different value, not xValueOfInsertion. */
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	3308      	adds	r3, #8
 8006386:	60fb      	str	r3, [r7, #12]
 8006388:	e002      	b.n	8006390 <vListInsert+0x2e>
 800638a:	68fb      	ldr	r3, [r7, #12]
 800638c:	685b      	ldr	r3, [r3, #4]
 800638e:	60fb      	str	r3, [r7, #12]
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	685b      	ldr	r3, [r3, #4]
 8006394:	681b      	ldr	r3, [r3, #0]
 8006396:	68ba      	ldr	r2, [r7, #8]
 8006398:	429a      	cmp	r2, r3
 800639a:	d2f6      	bcs.n	800638a <vListInsert+0x28>
			/* There is nothing to do here, just iterating to the wanted
			insertion position. */
		}
	}

	pxNewListItem->pxNext = pxIterator->pxNext;
 800639c:	68fb      	ldr	r3, [r7, #12]
 800639e:	685a      	ldr	r2, [r3, #4]
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	605a      	str	r2, [r3, #4]
	pxNewListItem->pxNext->pxPrevious = pxNewListItem;
 80063a4:	683b      	ldr	r3, [r7, #0]
 80063a6:	685b      	ldr	r3, [r3, #4]
 80063a8:	683a      	ldr	r2, [r7, #0]
 80063aa:	609a      	str	r2, [r3, #8]
	pxNewListItem->pxPrevious = pxIterator;
 80063ac:	683b      	ldr	r3, [r7, #0]
 80063ae:	68fa      	ldr	r2, [r7, #12]
 80063b0:	609a      	str	r2, [r3, #8]
	pxIterator->pxNext = pxNewListItem;
 80063b2:	68fb      	ldr	r3, [r7, #12]
 80063b4:	683a      	ldr	r2, [r7, #0]
 80063b6:	605a      	str	r2, [r3, #4]

	/* Remember which list the item is in.  This allows fast removal of the
	item later. */
	pxNewListItem->pxContainer = pxList;
 80063b8:	683b      	ldr	r3, [r7, #0]
 80063ba:	687a      	ldr	r2, [r7, #4]
 80063bc:	611a      	str	r2, [r3, #16]

	( pxList->uxNumberOfItems )++;
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	1c5a      	adds	r2, r3, #1
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	601a      	str	r2, [r3, #0]
}
 80063c8:	bf00      	nop
 80063ca:	3714      	adds	r7, #20
 80063cc:	46bd      	mov	sp, r7
 80063ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d2:	4770      	bx	lr

080063d4 <uxListRemove>:
/*-----------------------------------------------------------*/

UBaseType_t uxListRemove( ListItem_t * const pxItemToRemove )
{
 80063d4:	b480      	push	{r7}
 80063d6:	b085      	sub	sp, #20
 80063d8:	af00      	add	r7, sp, #0
 80063da:	6078      	str	r0, [r7, #4]
/* The list item knows which list it is in.  Obtain the list from the list
item. */
List_t * const pxList = pxItemToRemove->pxContainer;
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	691b      	ldr	r3, [r3, #16]
 80063e0:	60fb      	str	r3, [r7, #12]

	pxItemToRemove->pxNext->pxPrevious = pxItemToRemove->pxPrevious;
 80063e2:	687b      	ldr	r3, [r7, #4]
 80063e4:	685b      	ldr	r3, [r3, #4]
 80063e6:	687a      	ldr	r2, [r7, #4]
 80063e8:	6892      	ldr	r2, [r2, #8]
 80063ea:	609a      	str	r2, [r3, #8]
	pxItemToRemove->pxPrevious->pxNext = pxItemToRemove->pxNext;
 80063ec:	687b      	ldr	r3, [r7, #4]
 80063ee:	689b      	ldr	r3, [r3, #8]
 80063f0:	687a      	ldr	r2, [r7, #4]
 80063f2:	6852      	ldr	r2, [r2, #4]
 80063f4:	605a      	str	r2, [r3, #4]

	/* Only used during decision coverage testing. */
	mtCOVERAGE_TEST_DELAY();

	/* Make sure the index is left pointing to a valid item. */
	if( pxList->pxIndex == pxItemToRemove )
 80063f6:	68fb      	ldr	r3, [r7, #12]
 80063f8:	685b      	ldr	r3, [r3, #4]
 80063fa:	687a      	ldr	r2, [r7, #4]
 80063fc:	429a      	cmp	r2, r3
 80063fe:	d103      	bne.n	8006408 <uxListRemove+0x34>
	{
		pxList->pxIndex = pxItemToRemove->pxPrevious;
 8006400:	687b      	ldr	r3, [r7, #4]
 8006402:	689a      	ldr	r2, [r3, #8]
 8006404:	68fb      	ldr	r3, [r7, #12]
 8006406:	605a      	str	r2, [r3, #4]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxItemToRemove->pxContainer = NULL;
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	2200      	movs	r2, #0
 800640c:	611a      	str	r2, [r3, #16]
	( pxList->uxNumberOfItems )--;
 800640e:	68fb      	ldr	r3, [r7, #12]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	1e5a      	subs	r2, r3, #1
 8006414:	68fb      	ldr	r3, [r7, #12]
 8006416:	601a      	str	r2, [r3, #0]

	return pxList->uxNumberOfItems;
 8006418:	68fb      	ldr	r3, [r7, #12]
 800641a:	681b      	ldr	r3, [r3, #0]
}
 800641c:	4618      	mov	r0, r3
 800641e:	3714      	adds	r7, #20
 8006420:	46bd      	mov	sp, r7
 8006422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006426:	4770      	bx	lr

08006428 <xQueueGenericReset>:
	}														\
	taskEXIT_CRITICAL()
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericReset( QueueHandle_t xQueue, BaseType_t xNewQueue )
{
 8006428:	b580      	push	{r7, lr}
 800642a:	b084      	sub	sp, #16
 800642c:	af00      	add	r7, sp, #0
 800642e:	6078      	str	r0, [r7, #4]
 8006430:	6039      	str	r1, [r7, #0]
Queue_t * const pxQueue = xQueue;
 8006432:	687b      	ldr	r3, [r7, #4]
 8006434:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 8006436:	68fb      	ldr	r3, [r7, #12]
 8006438:	2b00      	cmp	r3, #0
 800643a:	d10a      	bne.n	8006452 <xQueueGenericReset+0x2a>

portFORCE_INLINE static void vPortRaiseBASEPRI( void )
{
uint32_t ulNewBASEPRI;

	__asm volatile
 800643c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006440:	f383 8811 	msr	BASEPRI, r3
 8006444:	f3bf 8f6f 	isb	sy
 8006448:	f3bf 8f4f 	dsb	sy
 800644c:	60bb      	str	r3, [r7, #8]
		"	msr basepri, %0											\n" \
		"	isb														\n" \
		"	dsb														\n" \
		:"=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);
}
 800644e:	bf00      	nop
 8006450:	e7fe      	b.n	8006450 <xQueueGenericReset+0x28>

	taskENTER_CRITICAL();
 8006452:	f002 fdcf 	bl	8008ff4 <vPortEnterCritical>
	{
		pxQueue->u.xQueue.pcTail = pxQueue->pcHead + ( pxQueue->uxLength * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006456:	68fb      	ldr	r3, [r7, #12]
 8006458:	681a      	ldr	r2, [r3, #0]
 800645a:	68fb      	ldr	r3, [r7, #12]
 800645c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800645e:	68f9      	ldr	r1, [r7, #12]
 8006460:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006462:	fb01 f303 	mul.w	r3, r1, r3
 8006466:	441a      	add	r2, r3
 8006468:	68fb      	ldr	r3, [r7, #12]
 800646a:	609a      	str	r2, [r3, #8]
		pxQueue->uxMessagesWaiting = ( UBaseType_t ) 0U;
 800646c:	68fb      	ldr	r3, [r7, #12]
 800646e:	2200      	movs	r2, #0
 8006470:	639a      	str	r2, [r3, #56]	; 0x38
		pxQueue->pcWriteTo = pxQueue->pcHead;
 8006472:	68fb      	ldr	r3, [r7, #12]
 8006474:	681a      	ldr	r2, [r3, #0]
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	605a      	str	r2, [r3, #4]
		pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead + ( ( pxQueue->uxLength - 1U ) * pxQueue->uxItemSize ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 800647a:	68fb      	ldr	r3, [r7, #12]
 800647c:	681a      	ldr	r2, [r3, #0]
 800647e:	68fb      	ldr	r3, [r7, #12]
 8006480:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006482:	3b01      	subs	r3, #1
 8006484:	68f9      	ldr	r1, [r7, #12]
 8006486:	6c09      	ldr	r1, [r1, #64]	; 0x40
 8006488:	fb01 f303 	mul.w	r3, r1, r3
 800648c:	441a      	add	r2, r3
 800648e:	68fb      	ldr	r3, [r7, #12]
 8006490:	60da      	str	r2, [r3, #12]
		pxQueue->cRxLock = queueUNLOCKED;
 8006492:	68fb      	ldr	r3, [r7, #12]
 8006494:	22ff      	movs	r2, #255	; 0xff
 8006496:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
		pxQueue->cTxLock = queueUNLOCKED;
 800649a:	68fb      	ldr	r3, [r7, #12]
 800649c:	22ff      	movs	r2, #255	; 0xff
 800649e:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

		if( xNewQueue == pdFALSE )
 80064a2:	683b      	ldr	r3, [r7, #0]
 80064a4:	2b00      	cmp	r3, #0
 80064a6:	d114      	bne.n	80064d2 <xQueueGenericReset+0xaa>
			/* If there are tasks blocked waiting to read from the queue, then
			the tasks will remain blocked as after this function exits the queue
			will still be empty.  If there are tasks blocked waiting to write to
			the queue, then one should be unblocked as after this function exits
			it will be possible to write to it. */
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80064a8:	68fb      	ldr	r3, [r7, #12]
 80064aa:	691b      	ldr	r3, [r3, #16]
 80064ac:	2b00      	cmp	r3, #0
 80064ae:	d01a      	beq.n	80064e6 <xQueueGenericReset+0xbe>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80064b0:	68fb      	ldr	r3, [r7, #12]
 80064b2:	3310      	adds	r3, #16
 80064b4:	4618      	mov	r0, r3
 80064b6:	f001 fd75 	bl	8007fa4 <xTaskRemoveFromEventList>
 80064ba:	4603      	mov	r3, r0
 80064bc:	2b00      	cmp	r3, #0
 80064be:	d012      	beq.n	80064e6 <xQueueGenericReset+0xbe>
				{
					queueYIELD_IF_USING_PREEMPTION();
 80064c0:	4b0c      	ldr	r3, [pc, #48]	; (80064f4 <xQueueGenericReset+0xcc>)
 80064c2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80064c6:	601a      	str	r2, [r3, #0]
 80064c8:	f3bf 8f4f 	dsb	sy
 80064cc:	f3bf 8f6f 	isb	sy
 80064d0:	e009      	b.n	80064e6 <xQueueGenericReset+0xbe>
			}
		}
		else
		{
			/* Ensure the event queues start in the correct state. */
			vListInitialise( &( pxQueue->xTasksWaitingToSend ) );
 80064d2:	68fb      	ldr	r3, [r7, #12]
 80064d4:	3310      	adds	r3, #16
 80064d6:	4618      	mov	r0, r3
 80064d8:	f7ff fef2 	bl	80062c0 <vListInitialise>
			vListInitialise( &( pxQueue->xTasksWaitingToReceive ) );
 80064dc:	68fb      	ldr	r3, [r7, #12]
 80064de:	3324      	adds	r3, #36	; 0x24
 80064e0:	4618      	mov	r0, r3
 80064e2:	f7ff feed 	bl	80062c0 <vListInitialise>
		}
	}
	taskEXIT_CRITICAL();
 80064e6:	f002 fdb5 	bl	8009054 <vPortExitCritical>

	/* A value is returned for calling semantic consistency with previous
	versions. */
	return pdPASS;
 80064ea:	2301      	movs	r3, #1
}
 80064ec:	4618      	mov	r0, r3
 80064ee:	3710      	adds	r7, #16
 80064f0:	46bd      	mov	sp, r7
 80064f2:	bd80      	pop	{r7, pc}
 80064f4:	e000ed04 	.word	0xe000ed04

080064f8 <xQueueGenericCreateStatic>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_STATIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreateStatic( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, StaticQueue_t *pxStaticQueue, const uint8_t ucQueueType )
	{
 80064f8:	b580      	push	{r7, lr}
 80064fa:	b08e      	sub	sp, #56	; 0x38
 80064fc:	af02      	add	r7, sp, #8
 80064fe:	60f8      	str	r0, [r7, #12]
 8006500:	60b9      	str	r1, [r7, #8]
 8006502:	607a      	str	r2, [r7, #4]
 8006504:	603b      	str	r3, [r7, #0]
	Queue_t *pxNewQueue;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 8006506:	68fb      	ldr	r3, [r7, #12]
 8006508:	2b00      	cmp	r3, #0
 800650a:	d10a      	bne.n	8006522 <xQueueGenericCreateStatic+0x2a>
	__asm volatile
 800650c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006510:	f383 8811 	msr	BASEPRI, r3
 8006514:	f3bf 8f6f 	isb	sy
 8006518:	f3bf 8f4f 	dsb	sy
 800651c:	62bb      	str	r3, [r7, #40]	; 0x28
}
 800651e:	bf00      	nop
 8006520:	e7fe      	b.n	8006520 <xQueueGenericCreateStatic+0x28>

		/* The StaticQueue_t structure and the queue storage area must be
		supplied. */
		configASSERT( pxStaticQueue != NULL );
 8006522:	683b      	ldr	r3, [r7, #0]
 8006524:	2b00      	cmp	r3, #0
 8006526:	d10a      	bne.n	800653e <xQueueGenericCreateStatic+0x46>
	__asm volatile
 8006528:	f04f 0350 	mov.w	r3, #80	; 0x50
 800652c:	f383 8811 	msr	BASEPRI, r3
 8006530:	f3bf 8f6f 	isb	sy
 8006534:	f3bf 8f4f 	dsb	sy
 8006538:	627b      	str	r3, [r7, #36]	; 0x24
}
 800653a:	bf00      	nop
 800653c:	e7fe      	b.n	800653c <xQueueGenericCreateStatic+0x44>

		/* A queue storage area should be provided if the item size is not 0, and
		should not be provided if the item size is 0. */
		configASSERT( !( ( pucQueueStorage != NULL ) && ( uxItemSize == 0 ) ) );
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	2b00      	cmp	r3, #0
 8006542:	d002      	beq.n	800654a <xQueueGenericCreateStatic+0x52>
 8006544:	68bb      	ldr	r3, [r7, #8]
 8006546:	2b00      	cmp	r3, #0
 8006548:	d001      	beq.n	800654e <xQueueGenericCreateStatic+0x56>
 800654a:	2301      	movs	r3, #1
 800654c:	e000      	b.n	8006550 <xQueueGenericCreateStatic+0x58>
 800654e:	2300      	movs	r3, #0
 8006550:	2b00      	cmp	r3, #0
 8006552:	d10a      	bne.n	800656a <xQueueGenericCreateStatic+0x72>
	__asm volatile
 8006554:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006558:	f383 8811 	msr	BASEPRI, r3
 800655c:	f3bf 8f6f 	isb	sy
 8006560:	f3bf 8f4f 	dsb	sy
 8006564:	623b      	str	r3, [r7, #32]
}
 8006566:	bf00      	nop
 8006568:	e7fe      	b.n	8006568 <xQueueGenericCreateStatic+0x70>
		configASSERT( !( ( pucQueueStorage == NULL ) && ( uxItemSize != 0 ) ) );
 800656a:	687b      	ldr	r3, [r7, #4]
 800656c:	2b00      	cmp	r3, #0
 800656e:	d102      	bne.n	8006576 <xQueueGenericCreateStatic+0x7e>
 8006570:	68bb      	ldr	r3, [r7, #8]
 8006572:	2b00      	cmp	r3, #0
 8006574:	d101      	bne.n	800657a <xQueueGenericCreateStatic+0x82>
 8006576:	2301      	movs	r3, #1
 8006578:	e000      	b.n	800657c <xQueueGenericCreateStatic+0x84>
 800657a:	2300      	movs	r3, #0
 800657c:	2b00      	cmp	r3, #0
 800657e:	d10a      	bne.n	8006596 <xQueueGenericCreateStatic+0x9e>
	__asm volatile
 8006580:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006584:	f383 8811 	msr	BASEPRI, r3
 8006588:	f3bf 8f6f 	isb	sy
 800658c:	f3bf 8f4f 	dsb	sy
 8006590:	61fb      	str	r3, [r7, #28]
}
 8006592:	bf00      	nop
 8006594:	e7fe      	b.n	8006594 <xQueueGenericCreateStatic+0x9c>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticQueue_t or StaticSemaphore_t equals the size of
			the real queue and semaphore structures. */
			volatile size_t xSize = sizeof( StaticQueue_t );
 8006596:	2350      	movs	r3, #80	; 0x50
 8006598:	617b      	str	r3, [r7, #20]
			configASSERT( xSize == sizeof( Queue_t ) );
 800659a:	697b      	ldr	r3, [r7, #20]
 800659c:	2b50      	cmp	r3, #80	; 0x50
 800659e:	d00a      	beq.n	80065b6 <xQueueGenericCreateStatic+0xbe>
	__asm volatile
 80065a0:	f04f 0350 	mov.w	r3, #80	; 0x50
 80065a4:	f383 8811 	msr	BASEPRI, r3
 80065a8:	f3bf 8f6f 	isb	sy
 80065ac:	f3bf 8f4f 	dsb	sy
 80065b0:	61bb      	str	r3, [r7, #24]
}
 80065b2:	bf00      	nop
 80065b4:	e7fe      	b.n	80065b4 <xQueueGenericCreateStatic+0xbc>
			( void ) xSize; /* Keeps lint quiet when configASSERT() is not defined. */
 80065b6:	697b      	ldr	r3, [r7, #20]
		#endif /* configASSERT_DEFINED */

		/* The address of a statically allocated queue was passed in, use it.
		The address of a statically allocated storage area was also passed in
		but is already set. */
		pxNewQueue = ( Queue_t * ) pxStaticQueue; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 80065b8:	683b      	ldr	r3, [r7, #0]
 80065ba:	62fb      	str	r3, [r7, #44]	; 0x2c

		if( pxNewQueue != NULL )
 80065bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065be:	2b00      	cmp	r3, #0
 80065c0:	d00d      	beq.n	80065de <xQueueGenericCreateStatic+0xe6>
			#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
			{
				/* Queues can be allocated wither statically or dynamically, so
				note this queue was allocated statically in case the queue is
				later deleted. */
				pxNewQueue->ucStaticallyAllocated = pdTRUE;
 80065c2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065c4:	2201      	movs	r2, #1
 80065c6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_DYNAMIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 80065ca:	f897 2038 	ldrb.w	r2, [r7, #56]	; 0x38
 80065ce:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80065d0:	9300      	str	r3, [sp, #0]
 80065d2:	4613      	mov	r3, r2
 80065d4:	687a      	ldr	r2, [r7, #4]
 80065d6:	68b9      	ldr	r1, [r7, #8]
 80065d8:	68f8      	ldr	r0, [r7, #12]
 80065da:	f000 f83f 	bl	800665c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 80065de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
	}
 80065e0:	4618      	mov	r0, r3
 80065e2:	3730      	adds	r7, #48	; 0x30
 80065e4:	46bd      	mov	sp, r7
 80065e6:	bd80      	pop	{r7, pc}

080065e8 <xQueueGenericCreate>:
/*-----------------------------------------------------------*/

#if( configSUPPORT_DYNAMIC_ALLOCATION == 1 )

	QueueHandle_t xQueueGenericCreate( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, const uint8_t ucQueueType )
	{
 80065e8:	b580      	push	{r7, lr}
 80065ea:	b08a      	sub	sp, #40	; 0x28
 80065ec:	af02      	add	r7, sp, #8
 80065ee:	60f8      	str	r0, [r7, #12]
 80065f0:	60b9      	str	r1, [r7, #8]
 80065f2:	4613      	mov	r3, r2
 80065f4:	71fb      	strb	r3, [r7, #7]
	Queue_t *pxNewQueue;
	size_t xQueueSizeInBytes;
	uint8_t *pucQueueStorage;

		configASSERT( uxQueueLength > ( UBaseType_t ) 0 );
 80065f6:	68fb      	ldr	r3, [r7, #12]
 80065f8:	2b00      	cmp	r3, #0
 80065fa:	d10a      	bne.n	8006612 <xQueueGenericCreate+0x2a>
	__asm volatile
 80065fc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006600:	f383 8811 	msr	BASEPRI, r3
 8006604:	f3bf 8f6f 	isb	sy
 8006608:	f3bf 8f4f 	dsb	sy
 800660c:	613b      	str	r3, [r7, #16]
}
 800660e:	bf00      	nop
 8006610:	e7fe      	b.n	8006610 <xQueueGenericCreate+0x28>

		/* Allocate enough space to hold the maximum number of items that
		can be in the queue at any time.  It is valid for uxItemSize to be
		zero in the case the queue is used as a semaphore. */
		xQueueSizeInBytes = ( size_t ) ( uxQueueLength * uxItemSize ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8006612:	68fb      	ldr	r3, [r7, #12]
 8006614:	68ba      	ldr	r2, [r7, #8]
 8006616:	fb02 f303 	mul.w	r3, r2, r3
 800661a:	61fb      	str	r3, [r7, #28]
		alignment requirements of the Queue_t structure - which in this case
		is an int8_t *.  Therefore, whenever the stack alignment requirements
		are greater than or equal to the pointer to char requirements the cast
		is safe.  In other cases alignment requirements are not strict (one or
		two bytes). */
		pxNewQueue = ( Queue_t * ) pvPortMalloc( sizeof( Queue_t ) + xQueueSizeInBytes ); /*lint !e9087 !e9079 see comment above. */
 800661c:	69fb      	ldr	r3, [r7, #28]
 800661e:	3350      	adds	r3, #80	; 0x50
 8006620:	4618      	mov	r0, r3
 8006622:	f002 fe09 	bl	8009238 <pvPortMalloc>
 8006626:	61b8      	str	r0, [r7, #24]

		if( pxNewQueue != NULL )
 8006628:	69bb      	ldr	r3, [r7, #24]
 800662a:	2b00      	cmp	r3, #0
 800662c:	d011      	beq.n	8006652 <xQueueGenericCreate+0x6a>
		{
			/* Jump past the queue structure to find the location of the queue
			storage area. */
			pucQueueStorage = ( uint8_t * ) pxNewQueue;
 800662e:	69bb      	ldr	r3, [r7, #24]
 8006630:	617b      	str	r3, [r7, #20]
			pucQueueStorage += sizeof( Queue_t ); /*lint !e9016 Pointer arithmetic allowed on char types, especially when it assists conveying intent. */
 8006632:	697b      	ldr	r3, [r7, #20]
 8006634:	3350      	adds	r3, #80	; 0x50
 8006636:	617b      	str	r3, [r7, #20]
			#if( configSUPPORT_STATIC_ALLOCATION == 1 )
			{
				/* Queues can be created either statically or dynamically, so
				note this task was created dynamically in case it is later
				deleted. */
				pxNewQueue->ucStaticallyAllocated = pdFALSE;
 8006638:	69bb      	ldr	r3, [r7, #24]
 800663a:	2200      	movs	r2, #0
 800663c:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46
			}
			#endif /* configSUPPORT_STATIC_ALLOCATION */

			prvInitialiseNewQueue( uxQueueLength, uxItemSize, pucQueueStorage, ucQueueType, pxNewQueue );
 8006640:	79fa      	ldrb	r2, [r7, #7]
 8006642:	69bb      	ldr	r3, [r7, #24]
 8006644:	9300      	str	r3, [sp, #0]
 8006646:	4613      	mov	r3, r2
 8006648:	697a      	ldr	r2, [r7, #20]
 800664a:	68b9      	ldr	r1, [r7, #8]
 800664c:	68f8      	ldr	r0, [r7, #12]
 800664e:	f000 f805 	bl	800665c <prvInitialiseNewQueue>
		{
			traceQUEUE_CREATE_FAILED( ucQueueType );
			mtCOVERAGE_TEST_MARKER();
		}

		return pxNewQueue;
 8006652:	69bb      	ldr	r3, [r7, #24]
	}
 8006654:	4618      	mov	r0, r3
 8006656:	3720      	adds	r7, #32
 8006658:	46bd      	mov	sp, r7
 800665a:	bd80      	pop	{r7, pc}

0800665c <prvInitialiseNewQueue>:

#endif /* configSUPPORT_STATIC_ALLOCATION */
/*-----------------------------------------------------------*/

static void prvInitialiseNewQueue( const UBaseType_t uxQueueLength, const UBaseType_t uxItemSize, uint8_t *pucQueueStorage, const uint8_t ucQueueType, Queue_t *pxNewQueue )
{
 800665c:	b580      	push	{r7, lr}
 800665e:	b084      	sub	sp, #16
 8006660:	af00      	add	r7, sp, #0
 8006662:	60f8      	str	r0, [r7, #12]
 8006664:	60b9      	str	r1, [r7, #8]
 8006666:	607a      	str	r2, [r7, #4]
 8006668:	70fb      	strb	r3, [r7, #3]
	/* Remove compiler warnings about unused parameters should
	configUSE_TRACE_FACILITY not be set to 1. */
	( void ) ucQueueType;

	if( uxItemSize == ( UBaseType_t ) 0 )
 800666a:	68bb      	ldr	r3, [r7, #8]
 800666c:	2b00      	cmp	r3, #0
 800666e:	d103      	bne.n	8006678 <prvInitialiseNewQueue+0x1c>
	{
		/* No RAM was allocated for the queue storage area, but PC head cannot
		be set to NULL because NULL is used as a key to say the queue is used as
		a mutex.  Therefore just set pcHead to point to the queue as a benign
		value that is known to be within the memory map. */
		pxNewQueue->pcHead = ( int8_t * ) pxNewQueue;
 8006670:	69bb      	ldr	r3, [r7, #24]
 8006672:	69ba      	ldr	r2, [r7, #24]
 8006674:	601a      	str	r2, [r3, #0]
 8006676:	e002      	b.n	800667e <prvInitialiseNewQueue+0x22>
	}
	else
	{
		/* Set the head to the start of the queue storage area. */
		pxNewQueue->pcHead = ( int8_t * ) pucQueueStorage;
 8006678:	69bb      	ldr	r3, [r7, #24]
 800667a:	687a      	ldr	r2, [r7, #4]
 800667c:	601a      	str	r2, [r3, #0]
	}

	/* Initialise the queue members as described where the queue type is
	defined. */
	pxNewQueue->uxLength = uxQueueLength;
 800667e:	69bb      	ldr	r3, [r7, #24]
 8006680:	68fa      	ldr	r2, [r7, #12]
 8006682:	63da      	str	r2, [r3, #60]	; 0x3c
	pxNewQueue->uxItemSize = uxItemSize;
 8006684:	69bb      	ldr	r3, [r7, #24]
 8006686:	68ba      	ldr	r2, [r7, #8]
 8006688:	641a      	str	r2, [r3, #64]	; 0x40
	( void ) xQueueGenericReset( pxNewQueue, pdTRUE );
 800668a:	2101      	movs	r1, #1
 800668c:	69b8      	ldr	r0, [r7, #24]
 800668e:	f7ff fecb 	bl	8006428 <xQueueGenericReset>

	#if ( configUSE_TRACE_FACILITY == 1 )
	{
		pxNewQueue->ucQueueType = ucQueueType;
 8006692:	69bb      	ldr	r3, [r7, #24]
 8006694:	78fa      	ldrb	r2, [r7, #3]
 8006696:	f883 204c 	strb.w	r2, [r3, #76]	; 0x4c
		pxNewQueue->pxQueueSetContainer = NULL;
	}
	#endif /* configUSE_QUEUE_SETS */

	traceQUEUE_CREATE( pxNewQueue );
}
 800669a:	bf00      	nop
 800669c:	3710      	adds	r7, #16
 800669e:	46bd      	mov	sp, r7
 80066a0:	bd80      	pop	{r7, pc}

080066a2 <prvInitialiseMutex>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static void prvInitialiseMutex( Queue_t *pxNewQueue )
	{
 80066a2:	b580      	push	{r7, lr}
 80066a4:	b082      	sub	sp, #8
 80066a6:	af00      	add	r7, sp, #0
 80066a8:	6078      	str	r0, [r7, #4]
		if( pxNewQueue != NULL )
 80066aa:	687b      	ldr	r3, [r7, #4]
 80066ac:	2b00      	cmp	r3, #0
 80066ae:	d00e      	beq.n	80066ce <prvInitialiseMutex+0x2c>
		{
			/* The queue create function will set all the queue structure members
			correctly for a generic queue, but this function is creating a
			mutex.  Overwrite those members that need to be set differently -
			in particular the information required for priority inheritance. */
			pxNewQueue->u.xSemaphore.xMutexHolder = NULL;
 80066b0:	687b      	ldr	r3, [r7, #4]
 80066b2:	2200      	movs	r2, #0
 80066b4:	609a      	str	r2, [r3, #8]
			pxNewQueue->uxQueueType = queueQUEUE_IS_MUTEX;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	601a      	str	r2, [r3, #0]

			/* In case this is a recursive mutex. */
			pxNewQueue->u.xSemaphore.uxRecursiveCallCount = 0;
 80066bc:	687b      	ldr	r3, [r7, #4]
 80066be:	2200      	movs	r2, #0
 80066c0:	60da      	str	r2, [r3, #12]

			traceCREATE_MUTEX( pxNewQueue );

			/* Start with the semaphore in the expected state. */
			( void ) xQueueGenericSend( pxNewQueue, NULL, ( TickType_t ) 0U, queueSEND_TO_BACK );
 80066c2:	2300      	movs	r3, #0
 80066c4:	2200      	movs	r2, #0
 80066c6:	2100      	movs	r1, #0
 80066c8:	6878      	ldr	r0, [r7, #4]
 80066ca:	f000 f90b 	bl	80068e4 <xQueueGenericSend>
		}
		else
		{
			traceCREATE_MUTEX_FAILED();
		}
	}
 80066ce:	bf00      	nop
 80066d0:	3708      	adds	r7, #8
 80066d2:	46bd      	mov	sp, r7
 80066d4:	bd80      	pop	{r7, pc}

080066d6 <xQueueCreateMutex>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutex( const uint8_t ucQueueType )
	{
 80066d6:	b580      	push	{r7, lr}
 80066d8:	b086      	sub	sp, #24
 80066da:	af00      	add	r7, sp, #0
 80066dc:	4603      	mov	r3, r0
 80066de:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 80066e0:	2301      	movs	r3, #1
 80066e2:	617b      	str	r3, [r7, #20]
 80066e4:	2300      	movs	r3, #0
 80066e6:	613b      	str	r3, [r7, #16]

		xNewQueue = xQueueGenericCreate( uxMutexLength, uxMutexSize, ucQueueType );
 80066e8:	79fb      	ldrb	r3, [r7, #7]
 80066ea:	461a      	mov	r2, r3
 80066ec:	6939      	ldr	r1, [r7, #16]
 80066ee:	6978      	ldr	r0, [r7, #20]
 80066f0:	f7ff ff7a 	bl	80065e8 <xQueueGenericCreate>
 80066f4:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 80066f6:	68f8      	ldr	r0, [r7, #12]
 80066f8:	f7ff ffd3 	bl	80066a2 <prvInitialiseMutex>

		return xNewQueue;
 80066fc:	68fb      	ldr	r3, [r7, #12]
	}
 80066fe:	4618      	mov	r0, r3
 8006700:	3718      	adds	r7, #24
 8006702:	46bd      	mov	sp, r7
 8006704:	bd80      	pop	{r7, pc}

08006706 <xQueueCreateMutexStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_MUTEXES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateMutexStatic( const uint8_t ucQueueType, StaticQueue_t *pxStaticQueue )
	{
 8006706:	b580      	push	{r7, lr}
 8006708:	b088      	sub	sp, #32
 800670a:	af02      	add	r7, sp, #8
 800670c:	4603      	mov	r3, r0
 800670e:	6039      	str	r1, [r7, #0]
 8006710:	71fb      	strb	r3, [r7, #7]
	QueueHandle_t xNewQueue;
	const UBaseType_t uxMutexLength = ( UBaseType_t ) 1, uxMutexSize = ( UBaseType_t ) 0;
 8006712:	2301      	movs	r3, #1
 8006714:	617b      	str	r3, [r7, #20]
 8006716:	2300      	movs	r3, #0
 8006718:	613b      	str	r3, [r7, #16]

		/* Prevent compiler warnings about unused parameters if
		configUSE_TRACE_FACILITY does not equal 1. */
		( void ) ucQueueType;

		xNewQueue = xQueueGenericCreateStatic( uxMutexLength, uxMutexSize, NULL, pxStaticQueue, ucQueueType );
 800671a:	79fb      	ldrb	r3, [r7, #7]
 800671c:	9300      	str	r3, [sp, #0]
 800671e:	683b      	ldr	r3, [r7, #0]
 8006720:	2200      	movs	r2, #0
 8006722:	6939      	ldr	r1, [r7, #16]
 8006724:	6978      	ldr	r0, [r7, #20]
 8006726:	f7ff fee7 	bl	80064f8 <xQueueGenericCreateStatic>
 800672a:	60f8      	str	r0, [r7, #12]
		prvInitialiseMutex( ( Queue_t * ) xNewQueue );
 800672c:	68f8      	ldr	r0, [r7, #12]
 800672e:	f7ff ffb8 	bl	80066a2 <prvInitialiseMutex>

		return xNewQueue;
 8006732:	68fb      	ldr	r3, [r7, #12]
	}
 8006734:	4618      	mov	r0, r3
 8006736:	3718      	adds	r7, #24
 8006738:	46bd      	mov	sp, r7
 800673a:	bd80      	pop	{r7, pc}

0800673c <xQueueGiveMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueGiveMutexRecursive( QueueHandle_t xMutex )
	{
 800673c:	b590      	push	{r4, r7, lr}
 800673e:	b087      	sub	sp, #28
 8006740:	af00      	add	r7, sp, #0
 8006742:	6078      	str	r0, [r7, #4]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 8006748:	693b      	ldr	r3, [r7, #16]
 800674a:	2b00      	cmp	r3, #0
 800674c:	d10a      	bne.n	8006764 <xQueueGiveMutexRecursive+0x28>
	__asm volatile
 800674e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006752:	f383 8811 	msr	BASEPRI, r3
 8006756:	f3bf 8f6f 	isb	sy
 800675a:	f3bf 8f4f 	dsb	sy
 800675e:	60fb      	str	r3, [r7, #12]
}
 8006760:	bf00      	nop
 8006762:	e7fe      	b.n	8006762 <xQueueGiveMutexRecursive+0x26>
		change outside of this task.  If this task does not hold the mutex then
		pxMutexHolder can never coincidentally equal the tasks handle, and as
		this is the only condition we are interested in it does not matter if
		pxMutexHolder is accessed simultaneously by another task.  Therefore no
		mutual exclusion is required to test the pxMutexHolder variable. */
		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 8006764:	693b      	ldr	r3, [r7, #16]
 8006766:	689c      	ldr	r4, [r3, #8]
 8006768:	f001 fdde 	bl	8008328 <xTaskGetCurrentTaskHandle>
 800676c:	4603      	mov	r3, r0
 800676e:	429c      	cmp	r4, r3
 8006770:	d111      	bne.n	8006796 <xQueueGiveMutexRecursive+0x5a>
			/* uxRecursiveCallCount cannot be zero if xMutexHolder is equal to
			the task handle, therefore no underflow check is required.  Also,
			uxRecursiveCallCount is only modified by the mutex holder, and as
			there can only be one, no mutual exclusion is required to modify the
			uxRecursiveCallCount member. */
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )--;
 8006772:	693b      	ldr	r3, [r7, #16]
 8006774:	68db      	ldr	r3, [r3, #12]
 8006776:	1e5a      	subs	r2, r3, #1
 8006778:	693b      	ldr	r3, [r7, #16]
 800677a:	60da      	str	r2, [r3, #12]

			/* Has the recursive call count unwound to 0? */
			if( pxMutex->u.xSemaphore.uxRecursiveCallCount == ( UBaseType_t ) 0 )
 800677c:	693b      	ldr	r3, [r7, #16]
 800677e:	68db      	ldr	r3, [r3, #12]
 8006780:	2b00      	cmp	r3, #0
 8006782:	d105      	bne.n	8006790 <xQueueGiveMutexRecursive+0x54>
			{
				/* Return the mutex.  This will automatically unblock any other
				task that might be waiting to access the mutex. */
				( void ) xQueueGenericSend( pxMutex, NULL, queueMUTEX_GIVE_BLOCK_TIME, queueSEND_TO_BACK );
 8006784:	2300      	movs	r3, #0
 8006786:	2200      	movs	r2, #0
 8006788:	2100      	movs	r1, #0
 800678a:	6938      	ldr	r0, [r7, #16]
 800678c:	f000 f8aa 	bl	80068e4 <xQueueGenericSend>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			xReturn = pdPASS;
 8006790:	2301      	movs	r3, #1
 8006792:	617b      	str	r3, [r7, #20]
 8006794:	e001      	b.n	800679a <xQueueGiveMutexRecursive+0x5e>
		}
		else
		{
			/* The mutex cannot be given because the calling task is not the
			holder. */
			xReturn = pdFAIL;
 8006796:	2300      	movs	r3, #0
 8006798:	617b      	str	r3, [r7, #20]

			traceGIVE_MUTEX_RECURSIVE_FAILED( pxMutex );
		}

		return xReturn;
 800679a:	697b      	ldr	r3, [r7, #20]
	}
 800679c:	4618      	mov	r0, r3
 800679e:	371c      	adds	r7, #28
 80067a0:	46bd      	mov	sp, r7
 80067a2:	bd90      	pop	{r4, r7, pc}

080067a4 <xQueueTakeMutexRecursive>:
/*-----------------------------------------------------------*/

#if ( configUSE_RECURSIVE_MUTEXES == 1 )

	BaseType_t xQueueTakeMutexRecursive( QueueHandle_t xMutex, TickType_t xTicksToWait )
	{
 80067a4:	b590      	push	{r4, r7, lr}
 80067a6:	b087      	sub	sp, #28
 80067a8:	af00      	add	r7, sp, #0
 80067aa:	6078      	str	r0, [r7, #4]
 80067ac:	6039      	str	r1, [r7, #0]
	BaseType_t xReturn;
	Queue_t * const pxMutex = ( Queue_t * ) xMutex;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	613b      	str	r3, [r7, #16]

		configASSERT( pxMutex );
 80067b2:	693b      	ldr	r3, [r7, #16]
 80067b4:	2b00      	cmp	r3, #0
 80067b6:	d10a      	bne.n	80067ce <xQueueTakeMutexRecursive+0x2a>
	__asm volatile
 80067b8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80067bc:	f383 8811 	msr	BASEPRI, r3
 80067c0:	f3bf 8f6f 	isb	sy
 80067c4:	f3bf 8f4f 	dsb	sy
 80067c8:	60fb      	str	r3, [r7, #12]
}
 80067ca:	bf00      	nop
 80067cc:	e7fe      	b.n	80067cc <xQueueTakeMutexRecursive+0x28>
		/* Comments regarding mutual exclusion as per those within
		xQueueGiveMutexRecursive(). */

		traceTAKE_MUTEX_RECURSIVE( pxMutex );

		if( pxMutex->u.xSemaphore.xMutexHolder == xTaskGetCurrentTaskHandle() )
 80067ce:	693b      	ldr	r3, [r7, #16]
 80067d0:	689c      	ldr	r4, [r3, #8]
 80067d2:	f001 fda9 	bl	8008328 <xTaskGetCurrentTaskHandle>
 80067d6:	4603      	mov	r3, r0
 80067d8:	429c      	cmp	r4, r3
 80067da:	d107      	bne.n	80067ec <xQueueTakeMutexRecursive+0x48>
		{
			( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067dc:	693b      	ldr	r3, [r7, #16]
 80067de:	68db      	ldr	r3, [r3, #12]
 80067e0:	1c5a      	adds	r2, r3, #1
 80067e2:	693b      	ldr	r3, [r7, #16]
 80067e4:	60da      	str	r2, [r3, #12]
			xReturn = pdPASS;
 80067e6:	2301      	movs	r3, #1
 80067e8:	617b      	str	r3, [r7, #20]
 80067ea:	e00c      	b.n	8006806 <xQueueTakeMutexRecursive+0x62>
		}
		else
		{
			xReturn = xQueueSemaphoreTake( pxMutex, xTicksToWait );
 80067ec:	6839      	ldr	r1, [r7, #0]
 80067ee:	6938      	ldr	r0, [r7, #16]
 80067f0:	f000 fb7e 	bl	8006ef0 <xQueueSemaphoreTake>
 80067f4:	6178      	str	r0, [r7, #20]

			/* pdPASS will only be returned if the mutex was successfully
			obtained.  The calling task may have entered the Blocked state
			before reaching here. */
			if( xReturn != pdFAIL )
 80067f6:	697b      	ldr	r3, [r7, #20]
 80067f8:	2b00      	cmp	r3, #0
 80067fa:	d004      	beq.n	8006806 <xQueueTakeMutexRecursive+0x62>
			{
				( pxMutex->u.xSemaphore.uxRecursiveCallCount )++;
 80067fc:	693b      	ldr	r3, [r7, #16]
 80067fe:	68db      	ldr	r3, [r3, #12]
 8006800:	1c5a      	adds	r2, r3, #1
 8006802:	693b      	ldr	r3, [r7, #16]
 8006804:	60da      	str	r2, [r3, #12]
			{
				traceTAKE_MUTEX_RECURSIVE_FAILED( pxMutex );
			}
		}

		return xReturn;
 8006806:	697b      	ldr	r3, [r7, #20]
	}
 8006808:	4618      	mov	r0, r3
 800680a:	371c      	adds	r7, #28
 800680c:	46bd      	mov	sp, r7
 800680e:	bd90      	pop	{r4, r7, pc}

08006810 <xQueueCreateCountingSemaphoreStatic>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphoreStatic( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount, StaticQueue_t *pxStaticQueue )
	{
 8006810:	b580      	push	{r7, lr}
 8006812:	b08a      	sub	sp, #40	; 0x28
 8006814:	af02      	add	r7, sp, #8
 8006816:	60f8      	str	r0, [r7, #12]
 8006818:	60b9      	str	r1, [r7, #8]
 800681a:	607a      	str	r2, [r7, #4]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 800681c:	68fb      	ldr	r3, [r7, #12]
 800681e:	2b00      	cmp	r3, #0
 8006820:	d10a      	bne.n	8006838 <xQueueCreateCountingSemaphoreStatic+0x28>
	__asm volatile
 8006822:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006826:	f383 8811 	msr	BASEPRI, r3
 800682a:	f3bf 8f6f 	isb	sy
 800682e:	f3bf 8f4f 	dsb	sy
 8006832:	61bb      	str	r3, [r7, #24]
}
 8006834:	bf00      	nop
 8006836:	e7fe      	b.n	8006836 <xQueueCreateCountingSemaphoreStatic+0x26>
		configASSERT( uxInitialCount <= uxMaxCount );
 8006838:	68ba      	ldr	r2, [r7, #8]
 800683a:	68fb      	ldr	r3, [r7, #12]
 800683c:	429a      	cmp	r2, r3
 800683e:	d90a      	bls.n	8006856 <xQueueCreateCountingSemaphoreStatic+0x46>
	__asm volatile
 8006840:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006844:	f383 8811 	msr	BASEPRI, r3
 8006848:	f3bf 8f6f 	isb	sy
 800684c:	f3bf 8f4f 	dsb	sy
 8006850:	617b      	str	r3, [r7, #20]
}
 8006852:	bf00      	nop
 8006854:	e7fe      	b.n	8006854 <xQueueCreateCountingSemaphoreStatic+0x44>

		xHandle = xQueueGenericCreateStatic( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, NULL, pxStaticQueue, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 8006856:	2302      	movs	r3, #2
 8006858:	9300      	str	r3, [sp, #0]
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	2200      	movs	r2, #0
 800685e:	2100      	movs	r1, #0
 8006860:	68f8      	ldr	r0, [r7, #12]
 8006862:	f7ff fe49 	bl	80064f8 <xQueueGenericCreateStatic>
 8006866:	61f8      	str	r0, [r7, #28]

		if( xHandle != NULL )
 8006868:	69fb      	ldr	r3, [r7, #28]
 800686a:	2b00      	cmp	r3, #0
 800686c:	d002      	beq.n	8006874 <xQueueCreateCountingSemaphoreStatic+0x64>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 800686e:	69fb      	ldr	r3, [r7, #28]
 8006870:	68ba      	ldr	r2, [r7, #8]
 8006872:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 8006874:	69fb      	ldr	r3, [r7, #28]
	}
 8006876:	4618      	mov	r0, r3
 8006878:	3720      	adds	r7, #32
 800687a:	46bd      	mov	sp, r7
 800687c:	bd80      	pop	{r7, pc}

0800687e <xQueueCreateCountingSemaphore>:
/*-----------------------------------------------------------*/

#if( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) )

	QueueHandle_t xQueueCreateCountingSemaphore( const UBaseType_t uxMaxCount, const UBaseType_t uxInitialCount )
	{
 800687e:	b580      	push	{r7, lr}
 8006880:	b086      	sub	sp, #24
 8006882:	af00      	add	r7, sp, #0
 8006884:	6078      	str	r0, [r7, #4]
 8006886:	6039      	str	r1, [r7, #0]
	QueueHandle_t xHandle;

		configASSERT( uxMaxCount != 0 );
 8006888:	687b      	ldr	r3, [r7, #4]
 800688a:	2b00      	cmp	r3, #0
 800688c:	d10a      	bne.n	80068a4 <xQueueCreateCountingSemaphore+0x26>
	__asm volatile
 800688e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006892:	f383 8811 	msr	BASEPRI, r3
 8006896:	f3bf 8f6f 	isb	sy
 800689a:	f3bf 8f4f 	dsb	sy
 800689e:	613b      	str	r3, [r7, #16]
}
 80068a0:	bf00      	nop
 80068a2:	e7fe      	b.n	80068a2 <xQueueCreateCountingSemaphore+0x24>
		configASSERT( uxInitialCount <= uxMaxCount );
 80068a4:	683a      	ldr	r2, [r7, #0]
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	429a      	cmp	r2, r3
 80068aa:	d90a      	bls.n	80068c2 <xQueueCreateCountingSemaphore+0x44>
	__asm volatile
 80068ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80068b0:	f383 8811 	msr	BASEPRI, r3
 80068b4:	f3bf 8f6f 	isb	sy
 80068b8:	f3bf 8f4f 	dsb	sy
 80068bc:	60fb      	str	r3, [r7, #12]
}
 80068be:	bf00      	nop
 80068c0:	e7fe      	b.n	80068c0 <xQueueCreateCountingSemaphore+0x42>

		xHandle = xQueueGenericCreate( uxMaxCount, queueSEMAPHORE_QUEUE_ITEM_LENGTH, queueQUEUE_TYPE_COUNTING_SEMAPHORE );
 80068c2:	2202      	movs	r2, #2
 80068c4:	2100      	movs	r1, #0
 80068c6:	6878      	ldr	r0, [r7, #4]
 80068c8:	f7ff fe8e 	bl	80065e8 <xQueueGenericCreate>
 80068cc:	6178      	str	r0, [r7, #20]

		if( xHandle != NULL )
 80068ce:	697b      	ldr	r3, [r7, #20]
 80068d0:	2b00      	cmp	r3, #0
 80068d2:	d002      	beq.n	80068da <xQueueCreateCountingSemaphore+0x5c>
		{
			( ( Queue_t * ) xHandle )->uxMessagesWaiting = uxInitialCount;
 80068d4:	697b      	ldr	r3, [r7, #20]
 80068d6:	683a      	ldr	r2, [r7, #0]
 80068d8:	639a      	str	r2, [r3, #56]	; 0x38
		else
		{
			traceCREATE_COUNTING_SEMAPHORE_FAILED();
		}

		return xHandle;
 80068da:	697b      	ldr	r3, [r7, #20]
	}
 80068dc:	4618      	mov	r0, r3
 80068de:	3718      	adds	r7, #24
 80068e0:	46bd      	mov	sp, r7
 80068e2:	bd80      	pop	{r7, pc}

080068e4 <xQueueGenericSend>:

#endif /* ( ( configUSE_COUNTING_SEMAPHORES == 1 ) && ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) ) */
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSend( QueueHandle_t xQueue, const void * const pvItemToQueue, TickType_t xTicksToWait, const BaseType_t xCopyPosition )
{
 80068e4:	b580      	push	{r7, lr}
 80068e6:	b08e      	sub	sp, #56	; 0x38
 80068e8:	af00      	add	r7, sp, #0
 80068ea:	60f8      	str	r0, [r7, #12]
 80068ec:	60b9      	str	r1, [r7, #8]
 80068ee:	607a      	str	r2, [r7, #4]
 80068f0:	603b      	str	r3, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE, xYieldRequired;
 80068f2:	2300      	movs	r3, #0
 80068f4:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 80068f6:	68fb      	ldr	r3, [r7, #12]
 80068f8:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 80068fa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80068fc:	2b00      	cmp	r3, #0
 80068fe:	d10a      	bne.n	8006916 <xQueueGenericSend+0x32>
	__asm volatile
 8006900:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006904:	f383 8811 	msr	BASEPRI, r3
 8006908:	f3bf 8f6f 	isb	sy
 800690c:	f3bf 8f4f 	dsb	sy
 8006910:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006912:	bf00      	nop
 8006914:	e7fe      	b.n	8006914 <xQueueGenericSend+0x30>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006916:	68bb      	ldr	r3, [r7, #8]
 8006918:	2b00      	cmp	r3, #0
 800691a:	d103      	bne.n	8006924 <xQueueGenericSend+0x40>
 800691c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800691e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006920:	2b00      	cmp	r3, #0
 8006922:	d101      	bne.n	8006928 <xQueueGenericSend+0x44>
 8006924:	2301      	movs	r3, #1
 8006926:	e000      	b.n	800692a <xQueueGenericSend+0x46>
 8006928:	2300      	movs	r3, #0
 800692a:	2b00      	cmp	r3, #0
 800692c:	d10a      	bne.n	8006944 <xQueueGenericSend+0x60>
	__asm volatile
 800692e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006932:	f383 8811 	msr	BASEPRI, r3
 8006936:	f3bf 8f6f 	isb	sy
 800693a:	f3bf 8f4f 	dsb	sy
 800693e:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006940:	bf00      	nop
 8006942:	e7fe      	b.n	8006942 <xQueueGenericSend+0x5e>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006944:	683b      	ldr	r3, [r7, #0]
 8006946:	2b02      	cmp	r3, #2
 8006948:	d103      	bne.n	8006952 <xQueueGenericSend+0x6e>
 800694a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800694c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800694e:	2b01      	cmp	r3, #1
 8006950:	d101      	bne.n	8006956 <xQueueGenericSend+0x72>
 8006952:	2301      	movs	r3, #1
 8006954:	e000      	b.n	8006958 <xQueueGenericSend+0x74>
 8006956:	2300      	movs	r3, #0
 8006958:	2b00      	cmp	r3, #0
 800695a:	d10a      	bne.n	8006972 <xQueueGenericSend+0x8e>
	__asm volatile
 800695c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006960:	f383 8811 	msr	BASEPRI, r3
 8006964:	f3bf 8f6f 	isb	sy
 8006968:	f3bf 8f4f 	dsb	sy
 800696c:	623b      	str	r3, [r7, #32]
}
 800696e:	bf00      	nop
 8006970:	e7fe      	b.n	8006970 <xQueueGenericSend+0x8c>
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006972:	f001 fce9 	bl	8008348 <xTaskGetSchedulerState>
 8006976:	4603      	mov	r3, r0
 8006978:	2b00      	cmp	r3, #0
 800697a:	d102      	bne.n	8006982 <xQueueGenericSend+0x9e>
 800697c:	687b      	ldr	r3, [r7, #4]
 800697e:	2b00      	cmp	r3, #0
 8006980:	d101      	bne.n	8006986 <xQueueGenericSend+0xa2>
 8006982:	2301      	movs	r3, #1
 8006984:	e000      	b.n	8006988 <xQueueGenericSend+0xa4>
 8006986:	2300      	movs	r3, #0
 8006988:	2b00      	cmp	r3, #0
 800698a:	d10a      	bne.n	80069a2 <xQueueGenericSend+0xbe>
	__asm volatile
 800698c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006990:	f383 8811 	msr	BASEPRI, r3
 8006994:	f3bf 8f6f 	isb	sy
 8006998:	f3bf 8f4f 	dsb	sy
 800699c:	61fb      	str	r3, [r7, #28]
}
 800699e:	bf00      	nop
 80069a0:	e7fe      	b.n	80069a0 <xQueueGenericSend+0xbc>
	/*lint -save -e904 This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 80069a2:	f002 fb27 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Is there room on the queue now?  The running task must be the
			highest priority task wanting to access the queue.  If the head item
			in the queue is to be overwritten then it does not matter if the
			queue is full. */
			if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 80069a6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069a8:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80069aa:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80069ae:	429a      	cmp	r2, r3
 80069b0:	d302      	bcc.n	80069b8 <xQueueGenericSend+0xd4>
 80069b2:	683b      	ldr	r3, [r7, #0]
 80069b4:	2b02      	cmp	r3, #2
 80069b6:	d129      	bne.n	8006a0c <xQueueGenericSend+0x128>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					xYieldRequired = prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 80069b8:	683a      	ldr	r2, [r7, #0]
 80069ba:	68b9      	ldr	r1, [r7, #8]
 80069bc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80069be:	f000 fc9a 	bl	80072f6 <prvCopyDataToQueue>
 80069c2:	62f8      	str	r0, [r7, #44]	; 0x2c

					/* If there was a task waiting for data to arrive on the
					queue then unblock it now. */
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 80069c4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80069c8:	2b00      	cmp	r3, #0
 80069ca:	d010      	beq.n	80069ee <xQueueGenericSend+0x10a>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 80069cc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80069ce:	3324      	adds	r3, #36	; 0x24
 80069d0:	4618      	mov	r0, r3
 80069d2:	f001 fae7 	bl	8007fa4 <xTaskRemoveFromEventList>
 80069d6:	4603      	mov	r3, r0
 80069d8:	2b00      	cmp	r3, #0
 80069da:	d013      	beq.n	8006a04 <xQueueGenericSend+0x120>
						{
							/* The unblocked task has a priority higher than
							our own so yield immediately.  Yes it is ok to do
							this from within the critical section - the kernel
							takes care of that. */
							queueYIELD_IF_USING_PREEMPTION();
 80069dc:	4b3f      	ldr	r3, [pc, #252]	; (8006adc <xQueueGenericSend+0x1f8>)
 80069de:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069e2:	601a      	str	r2, [r3, #0]
 80069e4:	f3bf 8f4f 	dsb	sy
 80069e8:	f3bf 8f6f 	isb	sy
 80069ec:	e00a      	b.n	8006a04 <xQueueGenericSend+0x120>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}
					}
					else if( xYieldRequired != pdFALSE )
 80069ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80069f0:	2b00      	cmp	r3, #0
 80069f2:	d007      	beq.n	8006a04 <xQueueGenericSend+0x120>
					{
						/* This path is a special case that will only get
						executed if the task was holding multiple mutexes and
						the mutexes were given back in an order that is
						different to that in which they were taken. */
						queueYIELD_IF_USING_PREEMPTION();
 80069f4:	4b39      	ldr	r3, [pc, #228]	; (8006adc <xQueueGenericSend+0x1f8>)
 80069f6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80069fa:	601a      	str	r2, [r3, #0]
 80069fc:	f3bf 8f4f 	dsb	sy
 8006a00:	f3bf 8f6f 	isb	sy
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif /* configUSE_QUEUE_SETS */

				taskEXIT_CRITICAL();
 8006a04:	f002 fb26 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006a08:	2301      	movs	r3, #1
 8006a0a:	e063      	b.n	8006ad4 <xQueueGenericSend+0x1f0>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006a0c:	687b      	ldr	r3, [r7, #4]
 8006a0e:	2b00      	cmp	r3, #0
 8006a10:	d103      	bne.n	8006a1a <xQueueGenericSend+0x136>
				{
					/* The queue was full and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006a12:	f002 fb1f 	bl	8009054 <vPortExitCritical>

					/* Return to the original privilege level before exiting
					the function. */
					traceQUEUE_SEND_FAILED( pxQueue );
					return errQUEUE_FULL;
 8006a16:	2300      	movs	r3, #0
 8006a18:	e05c      	b.n	8006ad4 <xQueueGenericSend+0x1f0>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006a1a:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006a1c:	2b00      	cmp	r3, #0
 8006a1e:	d106      	bne.n	8006a2e <xQueueGenericSend+0x14a>
				{
					/* The queue was full and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006a20:	f107 0314 	add.w	r3, r7, #20
 8006a24:	4618      	mov	r0, r3
 8006a26:	f001 fb21 	bl	800806c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006a2a:	2301      	movs	r3, #1
 8006a2c:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006a2e:	f002 fb11 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006a32:	f001 f855 	bl	8007ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006a36:	f002 fadd 	bl	8008ff4 <vPortEnterCritical>
 8006a3a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a3c:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006a40:	b25b      	sxtb	r3, r3
 8006a42:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a46:	d103      	bne.n	8006a50 <xQueueGenericSend+0x16c>
 8006a48:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006a50:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a52:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006a56:	b25b      	sxtb	r3, r3
 8006a58:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006a5c:	d103      	bne.n	8006a66 <xQueueGenericSend+0x182>
 8006a5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a60:	2200      	movs	r2, #0
 8006a62:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006a66:	f002 faf5 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006a6a:	1d3a      	adds	r2, r7, #4
 8006a6c:	f107 0314 	add.w	r3, r7, #20
 8006a70:	4611      	mov	r1, r2
 8006a72:	4618      	mov	r0, r3
 8006a74:	f001 fb10 	bl	8008098 <xTaskCheckForTimeOut>
 8006a78:	4603      	mov	r3, r0
 8006a7a:	2b00      	cmp	r3, #0
 8006a7c:	d124      	bne.n	8006ac8 <xQueueGenericSend+0x1e4>
		{
			if( prvIsQueueFull( pxQueue ) != pdFALSE )
 8006a7e:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a80:	f000 fd31 	bl	80074e6 <prvIsQueueFull>
 8006a84:	4603      	mov	r3, r0
 8006a86:	2b00      	cmp	r3, #0
 8006a88:	d018      	beq.n	8006abc <xQueueGenericSend+0x1d8>
			{
				traceBLOCKING_ON_QUEUE_SEND( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToSend ), xTicksToWait );
 8006a8a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006a8c:	3310      	adds	r3, #16
 8006a8e:	687a      	ldr	r2, [r7, #4]
 8006a90:	4611      	mov	r1, r2
 8006a92:	4618      	mov	r0, r3
 8006a94:	f001 fa36 	bl	8007f04 <vTaskPlaceOnEventList>
				/* Unlocking the queue means queue events can effect the
				event list.  It is possible that interrupts occurring now
				remove this task from the event list again - but as the
				scheduler is suspended the task will go onto the pending
				ready last instead of the actual ready list. */
				prvUnlockQueue( pxQueue );
 8006a98:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006a9a:	f000 fcbc 	bl	8007416 <prvUnlockQueue>
				/* Resuming the scheduler will move tasks from the pending
				ready list into the ready list - so it is feasible that this
				task is already in a ready list before it yields - in which
				case the yield will not cause a context switch unless there
				is also a higher priority task in the pending ready list. */
				if( xTaskResumeAll() == pdFALSE )
 8006a9e:	f001 f82d 	bl	8007afc <xTaskResumeAll>
 8006aa2:	4603      	mov	r3, r0
 8006aa4:	2b00      	cmp	r3, #0
 8006aa6:	f47f af7c 	bne.w	80069a2 <xQueueGenericSend+0xbe>
				{
					portYIELD_WITHIN_API();
 8006aaa:	4b0c      	ldr	r3, [pc, #48]	; (8006adc <xQueueGenericSend+0x1f8>)
 8006aac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006ab0:	601a      	str	r2, [r3, #0]
 8006ab2:	f3bf 8f4f 	dsb	sy
 8006ab6:	f3bf 8f6f 	isb	sy
 8006aba:	e772      	b.n	80069a2 <xQueueGenericSend+0xbe>
				}
			}
			else
			{
				/* Try again. */
				prvUnlockQueue( pxQueue );
 8006abc:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006abe:	f000 fcaa 	bl	8007416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ac2:	f001 f81b 	bl	8007afc <xTaskResumeAll>
 8006ac6:	e76c      	b.n	80069a2 <xQueueGenericSend+0xbe>
			}
		}
		else
		{
			/* The timeout has expired. */
			prvUnlockQueue( pxQueue );
 8006ac8:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8006aca:	f000 fca4 	bl	8007416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ace:	f001 f815 	bl	8007afc <xTaskResumeAll>

			traceQUEUE_SEND_FAILED( pxQueue );
			return errQUEUE_FULL;
 8006ad2:	2300      	movs	r3, #0
		}
	} /*lint -restore */
}
 8006ad4:	4618      	mov	r0, r3
 8006ad6:	3738      	adds	r7, #56	; 0x38
 8006ad8:	46bd      	mov	sp, r7
 8006ada:	bd80      	pop	{r7, pc}
 8006adc:	e000ed04 	.word	0xe000ed04

08006ae0 <xQueueGenericSendFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGenericSendFromISR( QueueHandle_t xQueue, const void * const pvItemToQueue, BaseType_t * const pxHigherPriorityTaskWoken, const BaseType_t xCopyPosition )
{
 8006ae0:	b580      	push	{r7, lr}
 8006ae2:	b090      	sub	sp, #64	; 0x40
 8006ae4:	af00      	add	r7, sp, #0
 8006ae6:	60f8      	str	r0, [r7, #12]
 8006ae8:	60b9      	str	r1, [r7, #8]
 8006aea:	607a      	str	r2, [r7, #4]
 8006aec:	603b      	str	r3, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006aee:	68fb      	ldr	r3, [r7, #12]
 8006af0:	63bb      	str	r3, [r7, #56]	; 0x38

	configASSERT( pxQueue );
 8006af2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006af4:	2b00      	cmp	r3, #0
 8006af6:	d10a      	bne.n	8006b0e <xQueueGenericSendFromISR+0x2e>
	__asm volatile
 8006af8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006afc:	f383 8811 	msr	BASEPRI, r3
 8006b00:	f3bf 8f6f 	isb	sy
 8006b04:	f3bf 8f4f 	dsb	sy
 8006b08:	62bb      	str	r3, [r7, #40]	; 0x28
}
 8006b0a:	bf00      	nop
 8006b0c:	e7fe      	b.n	8006b0c <xQueueGenericSendFromISR+0x2c>
	configASSERT( !( ( pvItemToQueue == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006b0e:	68bb      	ldr	r3, [r7, #8]
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d103      	bne.n	8006b1c <xQueueGenericSendFromISR+0x3c>
 8006b14:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b16:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b18:	2b00      	cmp	r3, #0
 8006b1a:	d101      	bne.n	8006b20 <xQueueGenericSendFromISR+0x40>
 8006b1c:	2301      	movs	r3, #1
 8006b1e:	e000      	b.n	8006b22 <xQueueGenericSendFromISR+0x42>
 8006b20:	2300      	movs	r3, #0
 8006b22:	2b00      	cmp	r3, #0
 8006b24:	d10a      	bne.n	8006b3c <xQueueGenericSendFromISR+0x5c>
	__asm volatile
 8006b26:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b2a:	f383 8811 	msr	BASEPRI, r3
 8006b2e:	f3bf 8f6f 	isb	sy
 8006b32:	f3bf 8f4f 	dsb	sy
 8006b36:	627b      	str	r3, [r7, #36]	; 0x24
}
 8006b38:	bf00      	nop
 8006b3a:	e7fe      	b.n	8006b3a <xQueueGenericSendFromISR+0x5a>
	configASSERT( !( ( xCopyPosition == queueOVERWRITE ) && ( pxQueue->uxLength != 1 ) ) );
 8006b3c:	683b      	ldr	r3, [r7, #0]
 8006b3e:	2b02      	cmp	r3, #2
 8006b40:	d103      	bne.n	8006b4a <xQueueGenericSendFromISR+0x6a>
 8006b42:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b44:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b46:	2b01      	cmp	r3, #1
 8006b48:	d101      	bne.n	8006b4e <xQueueGenericSendFromISR+0x6e>
 8006b4a:	2301      	movs	r3, #1
 8006b4c:	e000      	b.n	8006b50 <xQueueGenericSendFromISR+0x70>
 8006b4e:	2300      	movs	r3, #0
 8006b50:	2b00      	cmp	r3, #0
 8006b52:	d10a      	bne.n	8006b6a <xQueueGenericSendFromISR+0x8a>
	__asm volatile
 8006b54:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b58:	f383 8811 	msr	BASEPRI, r3
 8006b5c:	f3bf 8f6f 	isb	sy
 8006b60:	f3bf 8f4f 	dsb	sy
 8006b64:	623b      	str	r3, [r7, #32]
}
 8006b66:	bf00      	nop
 8006b68:	e7fe      	b.n	8006b68 <xQueueGenericSendFromISR+0x88>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006b6a:	f002 fb25 	bl	80091b8 <vPortValidateInterruptPriority>

portFORCE_INLINE static uint32_t ulPortRaiseBASEPRI( void )
{
uint32_t ulOriginalBASEPRI, ulNewBASEPRI;

	__asm volatile
 8006b6e:	f3ef 8211 	mrs	r2, BASEPRI
 8006b72:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006b76:	f383 8811 	msr	BASEPRI, r3
 8006b7a:	f3bf 8f6f 	isb	sy
 8006b7e:	f3bf 8f4f 	dsb	sy
 8006b82:	61fa      	str	r2, [r7, #28]
 8006b84:	61bb      	str	r3, [r7, #24]
		:"=r" (ulOriginalBASEPRI), "=r" (ulNewBASEPRI) : "i" ( configMAX_SYSCALL_INTERRUPT_PRIORITY ) : "memory"
	);

	/* This return will not be reached but is necessary to prevent compiler
	warnings. */
	return ulOriginalBASEPRI;
 8006b86:	69fb      	ldr	r3, [r7, #28]
	/* Similar to xQueueGenericSend, except without blocking if there is no room
	in the queue.  Also don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */
	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006b88:	637b      	str	r3, [r7, #52]	; 0x34
	{
		if( ( pxQueue->uxMessagesWaiting < pxQueue->uxLength ) || ( xCopyPosition == queueOVERWRITE ) )
 8006b8a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b8c:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8006b8e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b90:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006b92:	429a      	cmp	r2, r3
 8006b94:	d302      	bcc.n	8006b9c <xQueueGenericSendFromISR+0xbc>
 8006b96:	683b      	ldr	r3, [r7, #0]
 8006b98:	2b02      	cmp	r3, #2
 8006b9a:	d12f      	bne.n	8006bfc <xQueueGenericSendFromISR+0x11c>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006b9c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006b9e:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006ba2:	f887 3033 	strb.w	r3, [r7, #51]	; 0x33
			const UBaseType_t uxPreviousMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006ba6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006ba8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006baa:	62fb      	str	r3, [r7, #44]	; 0x2c
			/* Semaphores use xQueueGiveFromISR(), so pxQueue will not be a
			semaphore or mutex.  That means prvCopyDataToQueue() cannot result
			in a task disinheriting a priority and prvCopyDataToQueue() can be
			called here even though the disinherit function does not check if
			the scheduler is suspended before accessing the ready lists. */
			( void ) prvCopyDataToQueue( pxQueue, pvItemToQueue, xCopyPosition );
 8006bac:	683a      	ldr	r2, [r7, #0]
 8006bae:	68b9      	ldr	r1, [r7, #8]
 8006bb0:	6bb8      	ldr	r0, [r7, #56]	; 0x38
 8006bb2:	f000 fba0 	bl	80072f6 <prvCopyDataToQueue>

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006bb6:	f997 3033 	ldrsb.w	r3, [r7, #51]	; 0x33
 8006bba:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006bbe:	d112      	bne.n	8006be6 <xQueueGenericSendFromISR+0x106>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006bc0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bc2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006bc4:	2b00      	cmp	r3, #0
 8006bc6:	d016      	beq.n	8006bf6 <xQueueGenericSendFromISR+0x116>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006bc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bca:	3324      	adds	r3, #36	; 0x24
 8006bcc:	4618      	mov	r0, r3
 8006bce:	f001 f9e9 	bl	8007fa4 <xTaskRemoveFromEventList>
 8006bd2:	4603      	mov	r3, r0
 8006bd4:	2b00      	cmp	r3, #0
 8006bd6:	d00e      	beq.n	8006bf6 <xQueueGenericSendFromISR+0x116>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006bd8:	687b      	ldr	r3, [r7, #4]
 8006bda:	2b00      	cmp	r3, #0
 8006bdc:	d00b      	beq.n	8006bf6 <xQueueGenericSendFromISR+0x116>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	2201      	movs	r2, #1
 8006be2:	601a      	str	r2, [r3, #0]
 8006be4:	e007      	b.n	8006bf6 <xQueueGenericSendFromISR+0x116>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006be6:	f897 3033 	ldrb.w	r3, [r7, #51]	; 0x33
 8006bea:	3301      	adds	r3, #1
 8006bec:	b2db      	uxtb	r3, r3
 8006bee:	b25a      	sxtb	r2, r3
 8006bf0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8006bf2:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006bf6:	2301      	movs	r3, #1
 8006bf8:	63fb      	str	r3, [r7, #60]	; 0x3c
		{
 8006bfa:	e001      	b.n	8006c00 <xQueueGenericSendFromISR+0x120>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006bfc:	2300      	movs	r3, #0
 8006bfe:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006c00:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006c02:	617b      	str	r3, [r7, #20]
}
/*-----------------------------------------------------------*/

portFORCE_INLINE static void vPortSetBASEPRI( uint32_t ulNewMaskValue )
{
	__asm volatile
 8006c04:	697b      	ldr	r3, [r7, #20]
 8006c06:	f383 8811 	msr	BASEPRI, r3
	(
		"	msr basepri, %0	" :: "r" ( ulNewMaskValue ) : "memory"
	);
}
 8006c0a:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006c0c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
}
 8006c0e:	4618      	mov	r0, r3
 8006c10:	3740      	adds	r7, #64	; 0x40
 8006c12:	46bd      	mov	sp, r7
 8006c14:	bd80      	pop	{r7, pc}

08006c16 <xQueueGiveFromISR>:
/*-----------------------------------------------------------*/

BaseType_t xQueueGiveFromISR( QueueHandle_t xQueue, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8006c16:	b580      	push	{r7, lr}
 8006c18:	b08e      	sub	sp, #56	; 0x38
 8006c1a:	af00      	add	r7, sp, #0
 8006c1c:	6078      	str	r0, [r7, #4]
 8006c1e:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8006c20:	687b      	ldr	r3, [r7, #4]
 8006c22:	633b      	str	r3, [r7, #48]	; 0x30
	item size is 0.  Don't directly wake a task that was blocked on a queue
	read, instead return a flag to say whether a context switch is required or
	not (i.e. has a task with a higher priority than us been woken by this
	post). */

	configASSERT( pxQueue );
 8006c24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c26:	2b00      	cmp	r3, #0
 8006c28:	d10a      	bne.n	8006c40 <xQueueGiveFromISR+0x2a>
	__asm volatile
 8006c2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c2e:	f383 8811 	msr	BASEPRI, r3
 8006c32:	f3bf 8f6f 	isb	sy
 8006c36:	f3bf 8f4f 	dsb	sy
 8006c3a:	623b      	str	r3, [r7, #32]
}
 8006c3c:	bf00      	nop
 8006c3e:	e7fe      	b.n	8006c3e <xQueueGiveFromISR+0x28>

	/* xQueueGenericSendFromISR() should be used instead of xQueueGiveFromISR()
	if the item size is not 0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006c40:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c42:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d00a      	beq.n	8006c5e <xQueueGiveFromISR+0x48>
	__asm volatile
 8006c48:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c4c:	f383 8811 	msr	BASEPRI, r3
 8006c50:	f3bf 8f6f 	isb	sy
 8006c54:	f3bf 8f4f 	dsb	sy
 8006c58:	61fb      	str	r3, [r7, #28]
}
 8006c5a:	bf00      	nop
 8006c5c:	e7fe      	b.n	8006c5c <xQueueGiveFromISR+0x46>

	/* Normally a mutex would not be given from an interrupt, especially if
	there is a mutex holder, as priority inheritance makes no sense for an
	interrupts, only tasks. */
	configASSERT( !( ( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX ) && ( pxQueue->u.xSemaphore.xMutexHolder != NULL ) ) );
 8006c5e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c60:	681b      	ldr	r3, [r3, #0]
 8006c62:	2b00      	cmp	r3, #0
 8006c64:	d103      	bne.n	8006c6e <xQueueGiveFromISR+0x58>
 8006c66:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006c68:	689b      	ldr	r3, [r3, #8]
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d101      	bne.n	8006c72 <xQueueGiveFromISR+0x5c>
 8006c6e:	2301      	movs	r3, #1
 8006c70:	e000      	b.n	8006c74 <xQueueGiveFromISR+0x5e>
 8006c72:	2300      	movs	r3, #0
 8006c74:	2b00      	cmp	r3, #0
 8006c76:	d10a      	bne.n	8006c8e <xQueueGiveFromISR+0x78>
	__asm volatile
 8006c78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c7c:	f383 8811 	msr	BASEPRI, r3
 8006c80:	f3bf 8f6f 	isb	sy
 8006c84:	f3bf 8f4f 	dsb	sy
 8006c88:	61bb      	str	r3, [r7, #24]
}
 8006c8a:	bf00      	nop
 8006c8c:	e7fe      	b.n	8006c8c <xQueueGiveFromISR+0x76>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8006c8e:	f002 fa93 	bl	80091b8 <vPortValidateInterruptPriority>
	__asm volatile
 8006c92:	f3ef 8211 	mrs	r2, BASEPRI
 8006c96:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006c9a:	f383 8811 	msr	BASEPRI, r3
 8006c9e:	f3bf 8f6f 	isb	sy
 8006ca2:	f3bf 8f4f 	dsb	sy
 8006ca6:	617a      	str	r2, [r7, #20]
 8006ca8:	613b      	str	r3, [r7, #16]
	return ulOriginalBASEPRI;
 8006caa:	697b      	ldr	r3, [r7, #20]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8006cac:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006cae:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006cb2:	62bb      	str	r3, [r7, #40]	; 0x28

		/* When the queue is used to implement a semaphore no data is ever
		moved through the queue but it is still valid to see if the queue 'has
		space'. */
		if( uxMessagesWaiting < pxQueue->uxLength )
 8006cb4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cb6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8006cb8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8006cba:	429a      	cmp	r2, r3
 8006cbc:	d22b      	bcs.n	8006d16 <xQueueGiveFromISR+0x100>
		{
			const int8_t cTxLock = pxQueue->cTxLock;
 8006cbe:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cc0:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006cc4:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
			holder - and if there is a mutex holder then the mutex cannot be
			given from an ISR.  As this is the ISR version of the function it
			can be assumed there is no mutex holder and no need to determine if
			priority disinheritance is needed.  Simply increase the count of
			messages (semaphores) available. */
			pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 8006cc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006cca:	1c5a      	adds	r2, r3, #1
 8006ccc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cce:	639a      	str	r2, [r3, #56]	; 0x38

			/* The event list is not altered if the queue is locked.  This will
			be done when the queue is unlocked later. */
			if( cTxLock == queueUNLOCKED )
 8006cd0:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8006cd4:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006cd8:	d112      	bne.n	8006d00 <xQueueGiveFromISR+0xea>
						}
					}
				}
				#else /* configUSE_QUEUE_SETS */
				{
					if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 8006cda:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006cdc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cde:	2b00      	cmp	r3, #0
 8006ce0:	d016      	beq.n	8006d10 <xQueueGiveFromISR+0xfa>
					{
						if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8006ce2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006ce4:	3324      	adds	r3, #36	; 0x24
 8006ce6:	4618      	mov	r0, r3
 8006ce8:	f001 f95c 	bl	8007fa4 <xTaskRemoveFromEventList>
 8006cec:	4603      	mov	r3, r0
 8006cee:	2b00      	cmp	r3, #0
 8006cf0:	d00e      	beq.n	8006d10 <xQueueGiveFromISR+0xfa>
						{
							/* The task waiting has a higher priority so record that a
							context	switch is required. */
							if( pxHigherPriorityTaskWoken != NULL )
 8006cf2:	683b      	ldr	r3, [r7, #0]
 8006cf4:	2b00      	cmp	r3, #0
 8006cf6:	d00b      	beq.n	8006d10 <xQueueGiveFromISR+0xfa>
							{
								*pxHigherPriorityTaskWoken = pdTRUE;
 8006cf8:	683b      	ldr	r3, [r7, #0]
 8006cfa:	2201      	movs	r2, #1
 8006cfc:	601a      	str	r2, [r3, #0]
 8006cfe:	e007      	b.n	8006d10 <xQueueGiveFromISR+0xfa>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was posted while it was locked. */
				pxQueue->cTxLock = ( int8_t ) ( cTxLock + 1 );
 8006d00:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8006d04:	3301      	adds	r3, #1
 8006d06:	b2db      	uxtb	r3, r3
 8006d08:	b25a      	sxtb	r2, r3
 8006d0a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006d0c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
			}

			xReturn = pdPASS;
 8006d10:	2301      	movs	r3, #1
 8006d12:	637b      	str	r3, [r7, #52]	; 0x34
 8006d14:	e001      	b.n	8006d1a <xQueueGiveFromISR+0x104>
		}
		else
		{
			traceQUEUE_SEND_FROM_ISR_FAILED( pxQueue );
			xReturn = errQUEUE_FULL;
 8006d16:	2300      	movs	r3, #0
 8006d18:	637b      	str	r3, [r7, #52]	; 0x34
 8006d1a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006d1c:	60fb      	str	r3, [r7, #12]
	__asm volatile
 8006d1e:	68fb      	ldr	r3, [r7, #12]
 8006d20:	f383 8811 	msr	BASEPRI, r3
}
 8006d24:	bf00      	nop
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8006d26:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8006d28:	4618      	mov	r0, r3
 8006d2a:	3738      	adds	r7, #56	; 0x38
 8006d2c:	46bd      	mov	sp, r7
 8006d2e:	bd80      	pop	{r7, pc}

08006d30 <xQueueReceive>:
/*-----------------------------------------------------------*/

BaseType_t xQueueReceive( QueueHandle_t xQueue, void * const pvBuffer, TickType_t xTicksToWait )
{
 8006d30:	b580      	push	{r7, lr}
 8006d32:	b08c      	sub	sp, #48	; 0x30
 8006d34:	af00      	add	r7, sp, #0
 8006d36:	60f8      	str	r0, [r7, #12]
 8006d38:	60b9      	str	r1, [r7, #8]
 8006d3a:	607a      	str	r2, [r7, #4]
BaseType_t xEntryTimeSet = pdFALSE;
 8006d3c:	2300      	movs	r3, #0
 8006d3e:	62fb      	str	r3, [r7, #44]	; 0x2c
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006d40:	68fb      	ldr	r3, [r7, #12]
 8006d42:	62bb      	str	r3, [r7, #40]	; 0x28

	/* Check the pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006d44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d46:	2b00      	cmp	r3, #0
 8006d48:	d10a      	bne.n	8006d60 <xQueueReceive+0x30>
	__asm volatile
 8006d4a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d4e:	f383 8811 	msr	BASEPRI, r3
 8006d52:	f3bf 8f6f 	isb	sy
 8006d56:	f3bf 8f4f 	dsb	sy
 8006d5a:	623b      	str	r3, [r7, #32]
}
 8006d5c:	bf00      	nop
 8006d5e:	e7fe      	b.n	8006d5e <xQueueReceive+0x2e>

	/* The buffer into which data is received can only be NULL if the data size
	is zero (so no data is copied into the buffer. */
	configASSERT( !( ( ( pvBuffer ) == NULL ) && ( ( pxQueue )->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8006d60:	68bb      	ldr	r3, [r7, #8]
 8006d62:	2b00      	cmp	r3, #0
 8006d64:	d103      	bne.n	8006d6e <xQueueReceive+0x3e>
 8006d66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006d68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006d6a:	2b00      	cmp	r3, #0
 8006d6c:	d101      	bne.n	8006d72 <xQueueReceive+0x42>
 8006d6e:	2301      	movs	r3, #1
 8006d70:	e000      	b.n	8006d74 <xQueueReceive+0x44>
 8006d72:	2300      	movs	r3, #0
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	d10a      	bne.n	8006d8e <xQueueReceive+0x5e>
	__asm volatile
 8006d78:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006d7c:	f383 8811 	msr	BASEPRI, r3
 8006d80:	f3bf 8f6f 	isb	sy
 8006d84:	f3bf 8f4f 	dsb	sy
 8006d88:	61fb      	str	r3, [r7, #28]
}
 8006d8a:	bf00      	nop
 8006d8c:	e7fe      	b.n	8006d8c <xQueueReceive+0x5c>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006d8e:	f001 fadb 	bl	8008348 <xTaskGetSchedulerState>
 8006d92:	4603      	mov	r3, r0
 8006d94:	2b00      	cmp	r3, #0
 8006d96:	d102      	bne.n	8006d9e <xQueueReceive+0x6e>
 8006d98:	687b      	ldr	r3, [r7, #4]
 8006d9a:	2b00      	cmp	r3, #0
 8006d9c:	d101      	bne.n	8006da2 <xQueueReceive+0x72>
 8006d9e:	2301      	movs	r3, #1
 8006da0:	e000      	b.n	8006da4 <xQueueReceive+0x74>
 8006da2:	2300      	movs	r3, #0
 8006da4:	2b00      	cmp	r3, #0
 8006da6:	d10a      	bne.n	8006dbe <xQueueReceive+0x8e>
	__asm volatile
 8006da8:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006dac:	f383 8811 	msr	BASEPRI, r3
 8006db0:	f3bf 8f6f 	isb	sy
 8006db4:	f3bf 8f4f 	dsb	sy
 8006db8:	61bb      	str	r3, [r7, #24]
}
 8006dba:	bf00      	nop
 8006dbc:	e7fe      	b.n	8006dbc <xQueueReceive+0x8c>
	/*lint -save -e904  This function relaxes the coding standard somewhat to
	allow return statements within the function itself.  This is done in the
	interest of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006dbe:	f002 f919 	bl	8008ff4 <vPortEnterCritical>
		{
			const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8006dc2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006dc4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006dc6:	627b      	str	r3, [r7, #36]	; 0x24

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8006dc8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d01f      	beq.n	8006e0e <xQueueReceive+0xde>
			{
				/* Data available, remove one item. */
				prvCopyDataFromQueue( pxQueue, pvBuffer );
 8006dce:	68b9      	ldr	r1, [r7, #8]
 8006dd0:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006dd2:	f000 fafa 	bl	80073ca <prvCopyDataFromQueue>
				traceQUEUE_RECEIVE( pxQueue );
				pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 8006dd6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8006dd8:	1e5a      	subs	r2, r3, #1
 8006dda:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006ddc:	639a      	str	r2, [r3, #56]	; 0x38

				/* There is now space in the queue, were any tasks waiting to
				post to the queue?  If so, unblock the highest priority waiting
				task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006dde:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	2b00      	cmp	r3, #0
 8006de4:	d00f      	beq.n	8006e06 <xQueueReceive+0xd6>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006de6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006de8:	3310      	adds	r3, #16
 8006dea:	4618      	mov	r0, r3
 8006dec:	f001 f8da 	bl	8007fa4 <xTaskRemoveFromEventList>
 8006df0:	4603      	mov	r3, r0
 8006df2:	2b00      	cmp	r3, #0
 8006df4:	d007      	beq.n	8006e06 <xQueueReceive+0xd6>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006df6:	4b3d      	ldr	r3, [pc, #244]	; (8006eec <xQueueReceive+0x1bc>)
 8006df8:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006dfc:	601a      	str	r2, [r3, #0]
 8006dfe:	f3bf 8f4f 	dsb	sy
 8006e02:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006e06:	f002 f925 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006e0a:	2301      	movs	r3, #1
 8006e0c:	e069      	b.n	8006ee2 <xQueueReceive+0x1b2>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006e0e:	687b      	ldr	r3, [r7, #4]
 8006e10:	2b00      	cmp	r3, #0
 8006e12:	d103      	bne.n	8006e1c <xQueueReceive+0xec>
				{
					/* The queue was empty and no block time is specified (or
					the block time has expired) so leave now. */
					taskEXIT_CRITICAL();
 8006e14:	f002 f91e 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006e18:	2300      	movs	r3, #0
 8006e1a:	e062      	b.n	8006ee2 <xQueueReceive+0x1b2>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006e1c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006e1e:	2b00      	cmp	r3, #0
 8006e20:	d106      	bne.n	8006e30 <xQueueReceive+0x100>
				{
					/* The queue was empty and a block time was specified so
					configure the timeout structure. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006e22:	f107 0310 	add.w	r3, r7, #16
 8006e26:	4618      	mov	r0, r3
 8006e28:	f001 f920 	bl	800806c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8006e2c:	2301      	movs	r3, #1
 8006e2e:	62fb      	str	r3, [r7, #44]	; 0x2c
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8006e30:	f002 f910 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can send to and receive from the queue
		now the critical section has been exited. */

		vTaskSuspendAll();
 8006e34:	f000 fe54 	bl	8007ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8006e38:	f002 f8dc 	bl	8008ff4 <vPortEnterCritical>
 8006e3c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e3e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8006e42:	b25b      	sxtb	r3, r3
 8006e44:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e48:	d103      	bne.n	8006e52 <xQueueReceive+0x122>
 8006e4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e4c:	2200      	movs	r2, #0
 8006e4e:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006e52:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e54:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8006e58:	b25b      	sxtb	r3, r3
 8006e5a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006e5e:	d103      	bne.n	8006e68 <xQueueReceive+0x138>
 8006e60:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e62:	2200      	movs	r2, #0
 8006e64:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8006e68:	f002 f8f4 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8006e6c:	1d3a      	adds	r2, r7, #4
 8006e6e:	f107 0310 	add.w	r3, r7, #16
 8006e72:	4611      	mov	r1, r2
 8006e74:	4618      	mov	r0, r3
 8006e76:	f001 f90f 	bl	8008098 <xTaskCheckForTimeOut>
 8006e7a:	4603      	mov	r3, r0
 8006e7c:	2b00      	cmp	r3, #0
 8006e7e:	d123      	bne.n	8006ec8 <xQueueReceive+0x198>
		{
			/* The timeout has not expired.  If the queue is still empty place
			the task on the list of tasks waiting to receive from the queue. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006e80:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e82:	f000 fb1a 	bl	80074ba <prvIsQueueEmpty>
 8006e86:	4603      	mov	r3, r0
 8006e88:	2b00      	cmp	r3, #0
 8006e8a:	d017      	beq.n	8006ebc <xQueueReceive+0x18c>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );
				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8006e8c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006e8e:	3324      	adds	r3, #36	; 0x24
 8006e90:	687a      	ldr	r2, [r7, #4]
 8006e92:	4611      	mov	r1, r2
 8006e94:	4618      	mov	r0, r3
 8006e96:	f001 f835 	bl	8007f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 8006e9a:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006e9c:	f000 fabb 	bl	8007416 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8006ea0:	f000 fe2c 	bl	8007afc <xTaskResumeAll>
 8006ea4:	4603      	mov	r3, r0
 8006ea6:	2b00      	cmp	r3, #0
 8006ea8:	d189      	bne.n	8006dbe <xQueueReceive+0x8e>
				{
					portYIELD_WITHIN_API();
 8006eaa:	4b10      	ldr	r3, [pc, #64]	; (8006eec <xQueueReceive+0x1bc>)
 8006eac:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006eb0:	601a      	str	r2, [r3, #0]
 8006eb2:	f3bf 8f4f 	dsb	sy
 8006eb6:	f3bf 8f6f 	isb	sy
 8006eba:	e780      	b.n	8006dbe <xQueueReceive+0x8e>
			}
			else
			{
				/* The queue contains data again.  Loop back to try and read the
				data. */
				prvUnlockQueue( pxQueue );
 8006ebc:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ebe:	f000 faaa 	bl	8007416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 8006ec2:	f000 fe1b 	bl	8007afc <xTaskResumeAll>
 8006ec6:	e77a      	b.n	8006dbe <xQueueReceive+0x8e>
		}
		else
		{
			/* Timed out.  If there is no data in the queue exit, otherwise loop
			back and attempt to read the data. */
			prvUnlockQueue( pxQueue );
 8006ec8:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006eca:	f000 faa4 	bl	8007416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 8006ece:	f000 fe15 	bl	8007afc <xTaskResumeAll>

			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8006ed2:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8006ed4:	f000 faf1 	bl	80074ba <prvIsQueueEmpty>
 8006ed8:	4603      	mov	r3, r0
 8006eda:	2b00      	cmp	r3, #0
 8006edc:	f43f af6f 	beq.w	8006dbe <xQueueReceive+0x8e>
			{
				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 8006ee0:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 8006ee2:	4618      	mov	r0, r3
 8006ee4:	3730      	adds	r7, #48	; 0x30
 8006ee6:	46bd      	mov	sp, r7
 8006ee8:	bd80      	pop	{r7, pc}
 8006eea:	bf00      	nop
 8006eec:	e000ed04 	.word	0xe000ed04

08006ef0 <xQueueSemaphoreTake>:
/*-----------------------------------------------------------*/

BaseType_t xQueueSemaphoreTake( QueueHandle_t xQueue, TickType_t xTicksToWait )
{
 8006ef0:	b580      	push	{r7, lr}
 8006ef2:	b08e      	sub	sp, #56	; 0x38
 8006ef4:	af00      	add	r7, sp, #0
 8006ef6:	6078      	str	r0, [r7, #4]
 8006ef8:	6039      	str	r1, [r7, #0]
BaseType_t xEntryTimeSet = pdFALSE;
 8006efa:	2300      	movs	r3, #0
 8006efc:	637b      	str	r3, [r7, #52]	; 0x34
TimeOut_t xTimeOut;
Queue_t * const pxQueue = xQueue;
 8006efe:	687b      	ldr	r3, [r7, #4]
 8006f00:	62fb      	str	r3, [r7, #44]	; 0x2c

#if( configUSE_MUTEXES == 1 )
	BaseType_t xInheritanceOccurred = pdFALSE;
 8006f02:	2300      	movs	r3, #0
 8006f04:	633b      	str	r3, [r7, #48]	; 0x30
#endif

	/* Check the queue pointer is not NULL. */
	configASSERT( ( pxQueue ) );
 8006f06:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f08:	2b00      	cmp	r3, #0
 8006f0a:	d10a      	bne.n	8006f22 <xQueueSemaphoreTake+0x32>
	__asm volatile
 8006f0c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f10:	f383 8811 	msr	BASEPRI, r3
 8006f14:	f3bf 8f6f 	isb	sy
 8006f18:	f3bf 8f4f 	dsb	sy
 8006f1c:	623b      	str	r3, [r7, #32]
}
 8006f1e:	bf00      	nop
 8006f20:	e7fe      	b.n	8006f20 <xQueueSemaphoreTake+0x30>

	/* Check this really is a semaphore, in which case the item size will be
	0. */
	configASSERT( pxQueue->uxItemSize == 0 );
 8006f22:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006f26:	2b00      	cmp	r3, #0
 8006f28:	d00a      	beq.n	8006f40 <xQueueSemaphoreTake+0x50>
	__asm volatile
 8006f2a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f2e:	f383 8811 	msr	BASEPRI, r3
 8006f32:	f3bf 8f6f 	isb	sy
 8006f36:	f3bf 8f4f 	dsb	sy
 8006f3a:	61fb      	str	r3, [r7, #28]
}
 8006f3c:	bf00      	nop
 8006f3e:	e7fe      	b.n	8006f3e <xQueueSemaphoreTake+0x4e>

	/* Cannot block if the scheduler is suspended. */
	#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )
	{
		configASSERT( !( ( xTaskGetSchedulerState() == taskSCHEDULER_SUSPENDED ) && ( xTicksToWait != 0 ) ) );
 8006f40:	f001 fa02 	bl	8008348 <xTaskGetSchedulerState>
 8006f44:	4603      	mov	r3, r0
 8006f46:	2b00      	cmp	r3, #0
 8006f48:	d102      	bne.n	8006f50 <xQueueSemaphoreTake+0x60>
 8006f4a:	683b      	ldr	r3, [r7, #0]
 8006f4c:	2b00      	cmp	r3, #0
 8006f4e:	d101      	bne.n	8006f54 <xQueueSemaphoreTake+0x64>
 8006f50:	2301      	movs	r3, #1
 8006f52:	e000      	b.n	8006f56 <xQueueSemaphoreTake+0x66>
 8006f54:	2300      	movs	r3, #0
 8006f56:	2b00      	cmp	r3, #0
 8006f58:	d10a      	bne.n	8006f70 <xQueueSemaphoreTake+0x80>
	__asm volatile
 8006f5a:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006f5e:	f383 8811 	msr	BASEPRI, r3
 8006f62:	f3bf 8f6f 	isb	sy
 8006f66:	f3bf 8f4f 	dsb	sy
 8006f6a:	61bb      	str	r3, [r7, #24]
}
 8006f6c:	bf00      	nop
 8006f6e:	e7fe      	b.n	8006f6e <xQueueSemaphoreTake+0x7e>
	/*lint -save -e904 This function relaxes the coding standard somewhat to allow return
	statements within the function itself.  This is done in the interest
	of execution time efficiency. */
	for( ;; )
	{
		taskENTER_CRITICAL();
 8006f70:	f002 f840 	bl	8008ff4 <vPortEnterCritical>
		{
			/* Semaphores are queues with an item size of 0, and where the
			number of messages in the queue is the semaphore's count value. */
			const UBaseType_t uxSemaphoreCount = pxQueue->uxMessagesWaiting;
 8006f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f76:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006f78:	62bb      	str	r3, [r7, #40]	; 0x28

			/* Is there data in the queue now?  To be running the calling task
			must be the highest priority task wanting to access the queue. */
			if( uxSemaphoreCount > ( UBaseType_t ) 0 )
 8006f7a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f7c:	2b00      	cmp	r3, #0
 8006f7e:	d024      	beq.n	8006fca <xQueueSemaphoreTake+0xda>
			{
				traceQUEUE_RECEIVE( pxQueue );

				/* Semaphores are queues with a data size of zero and where the
				messages waiting is the semaphore's count.  Reduce the count. */
				pxQueue->uxMessagesWaiting = uxSemaphoreCount - ( UBaseType_t ) 1;
 8006f80:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8006f82:	1e5a      	subs	r2, r3, #1
 8006f84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f86:	639a      	str	r2, [r3, #56]	; 0x38

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8006f88:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f8a:	681b      	ldr	r3, [r3, #0]
 8006f8c:	2b00      	cmp	r3, #0
 8006f8e:	d104      	bne.n	8006f9a <xQueueSemaphoreTake+0xaa>
					{
						/* Record the information required to implement
						priority inheritance should it become necessary. */
						pxQueue->u.xSemaphore.xMutexHolder = pvTaskIncrementMutexHeldCount();
 8006f90:	f001 fb50 	bl	8008634 <pvTaskIncrementMutexHeldCount>
 8006f94:	4602      	mov	r2, r0
 8006f96:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f98:	609a      	str	r2, [r3, #8]
				}
				#endif /* configUSE_MUTEXES */

				/* Check to see if other tasks are blocked waiting to give the
				semaphore, and if so, unblock the highest priority such task. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8006f9a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006f9c:	691b      	ldr	r3, [r3, #16]
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d00f      	beq.n	8006fc2 <xQueueSemaphoreTake+0xd2>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 8006fa2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8006fa4:	3310      	adds	r3, #16
 8006fa6:	4618      	mov	r0, r3
 8006fa8:	f000 fffc 	bl	8007fa4 <xTaskRemoveFromEventList>
 8006fac:	4603      	mov	r3, r0
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d007      	beq.n	8006fc2 <xQueueSemaphoreTake+0xd2>
					{
						queueYIELD_IF_USING_PREEMPTION();
 8006fb2:	4b54      	ldr	r3, [pc, #336]	; (8007104 <xQueueSemaphoreTake+0x214>)
 8006fb4:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8006fb8:	601a      	str	r2, [r3, #0]
 8006fba:	f3bf 8f4f 	dsb	sy
 8006fbe:	f3bf 8f6f 	isb	sy
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				taskEXIT_CRITICAL();
 8006fc2:	f002 f847 	bl	8009054 <vPortExitCritical>
				return pdPASS;
 8006fc6:	2301      	movs	r3, #1
 8006fc8:	e097      	b.n	80070fa <xQueueSemaphoreTake+0x20a>
			}
			else
			{
				if( xTicksToWait == ( TickType_t ) 0 )
 8006fca:	683b      	ldr	r3, [r7, #0]
 8006fcc:	2b00      	cmp	r3, #0
 8006fce:	d111      	bne.n	8006ff4 <xQueueSemaphoreTake+0x104>
					/* For inheritance to have occurred there must have been an
					initial timeout, and an adjusted timeout cannot become 0, as
					if it were 0 the function would have exited. */
					#if( configUSE_MUTEXES == 1 )
					{
						configASSERT( xInheritanceOccurred == pdFALSE );
 8006fd0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8006fd2:	2b00      	cmp	r3, #0
 8006fd4:	d00a      	beq.n	8006fec <xQueueSemaphoreTake+0xfc>
	__asm volatile
 8006fd6:	f04f 0350 	mov.w	r3, #80	; 0x50
 8006fda:	f383 8811 	msr	BASEPRI, r3
 8006fde:	f3bf 8f6f 	isb	sy
 8006fe2:	f3bf 8f4f 	dsb	sy
 8006fe6:	617b      	str	r3, [r7, #20]
}
 8006fe8:	bf00      	nop
 8006fea:	e7fe      	b.n	8006fea <xQueueSemaphoreTake+0xfa>
					}
					#endif /* configUSE_MUTEXES */

					/* The semaphore count was 0 and no block time is specified
					(or the block time has expired) so exit now. */
					taskEXIT_CRITICAL();
 8006fec:	f002 f832 	bl	8009054 <vPortExitCritical>
					traceQUEUE_RECEIVE_FAILED( pxQueue );
					return errQUEUE_EMPTY;
 8006ff0:	2300      	movs	r3, #0
 8006ff2:	e082      	b.n	80070fa <xQueueSemaphoreTake+0x20a>
				}
				else if( xEntryTimeSet == pdFALSE )
 8006ff4:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8006ff6:	2b00      	cmp	r3, #0
 8006ff8:	d106      	bne.n	8007008 <xQueueSemaphoreTake+0x118>
				{
					/* The semaphore count was 0 and a block time was specified
					so configure the timeout structure ready to block. */
					vTaskInternalSetTimeOutState( &xTimeOut );
 8006ffa:	f107 030c 	add.w	r3, r7, #12
 8006ffe:	4618      	mov	r0, r3
 8007000:	f001 f834 	bl	800806c <vTaskInternalSetTimeOutState>
					xEntryTimeSet = pdTRUE;
 8007004:	2301      	movs	r3, #1
 8007006:	637b      	str	r3, [r7, #52]	; 0x34
					/* Entry time was already set. */
					mtCOVERAGE_TEST_MARKER();
				}
			}
		}
		taskEXIT_CRITICAL();
 8007008:	f002 f824 	bl	8009054 <vPortExitCritical>

		/* Interrupts and other tasks can give to and take from the semaphore
		now the critical section has been exited. */

		vTaskSuspendAll();
 800700c:	f000 fd68 	bl	8007ae0 <vTaskSuspendAll>
		prvLockQueue( pxQueue );
 8007010:	f001 fff0 	bl	8008ff4 <vPortEnterCritical>
 8007014:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007016:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 800701a:	b25b      	sxtb	r3, r3
 800701c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007020:	d103      	bne.n	800702a <xQueueSemaphoreTake+0x13a>
 8007022:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007024:	2200      	movs	r2, #0
 8007026:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800702a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800702c:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007030:	b25b      	sxtb	r3, r3
 8007032:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007036:	d103      	bne.n	8007040 <xQueueSemaphoreTake+0x150>
 8007038:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800703a:	2200      	movs	r2, #0
 800703c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007040:	f002 f808 	bl	8009054 <vPortExitCritical>

		/* Update the timeout state to see if it has expired yet. */
		if( xTaskCheckForTimeOut( &xTimeOut, &xTicksToWait ) == pdFALSE )
 8007044:	463a      	mov	r2, r7
 8007046:	f107 030c 	add.w	r3, r7, #12
 800704a:	4611      	mov	r1, r2
 800704c:	4618      	mov	r0, r3
 800704e:	f001 f823 	bl	8008098 <xTaskCheckForTimeOut>
 8007052:	4603      	mov	r3, r0
 8007054:	2b00      	cmp	r3, #0
 8007056:	d132      	bne.n	80070be <xQueueSemaphoreTake+0x1ce>
		{
			/* A block time is specified and not expired.  If the semaphore
			count is 0 then enter the Blocked state to wait for a semaphore to
			become available.  As semaphores are implemented with queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 8007058:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800705a:	f000 fa2e 	bl	80074ba <prvIsQueueEmpty>
 800705e:	4603      	mov	r3, r0
 8007060:	2b00      	cmp	r3, #0
 8007062:	d026      	beq.n	80070b2 <xQueueSemaphoreTake+0x1c2>
			{
				traceBLOCKING_ON_QUEUE_RECEIVE( pxQueue );

				#if ( configUSE_MUTEXES == 1 )
				{
					if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007064:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	2b00      	cmp	r3, #0
 800706a:	d109      	bne.n	8007080 <xQueueSemaphoreTake+0x190>
					{
						taskENTER_CRITICAL();
 800706c:	f001 ffc2 	bl	8008ff4 <vPortEnterCritical>
						{
							xInheritanceOccurred = xTaskPriorityInherit( pxQueue->u.xSemaphore.xMutexHolder );
 8007070:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	4618      	mov	r0, r3
 8007076:	f001 f985 	bl	8008384 <xTaskPriorityInherit>
 800707a:	6338      	str	r0, [r7, #48]	; 0x30
						}
						taskEXIT_CRITICAL();
 800707c:	f001 ffea 	bl	8009054 <vPortExitCritical>
						mtCOVERAGE_TEST_MARKER();
					}
				}
				#endif

				vTaskPlaceOnEventList( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait );
 8007080:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007082:	3324      	adds	r3, #36	; 0x24
 8007084:	683a      	ldr	r2, [r7, #0]
 8007086:	4611      	mov	r1, r2
 8007088:	4618      	mov	r0, r3
 800708a:	f000 ff3b 	bl	8007f04 <vTaskPlaceOnEventList>
				prvUnlockQueue( pxQueue );
 800708e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 8007090:	f000 f9c1 	bl	8007416 <prvUnlockQueue>
				if( xTaskResumeAll() == pdFALSE )
 8007094:	f000 fd32 	bl	8007afc <xTaskResumeAll>
 8007098:	4603      	mov	r3, r0
 800709a:	2b00      	cmp	r3, #0
 800709c:	f47f af68 	bne.w	8006f70 <xQueueSemaphoreTake+0x80>
				{
					portYIELD_WITHIN_API();
 80070a0:	4b18      	ldr	r3, [pc, #96]	; (8007104 <xQueueSemaphoreTake+0x214>)
 80070a2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80070a6:	601a      	str	r2, [r3, #0]
 80070a8:	f3bf 8f4f 	dsb	sy
 80070ac:	f3bf 8f6f 	isb	sy
 80070b0:	e75e      	b.n	8006f70 <xQueueSemaphoreTake+0x80>
			}
			else
			{
				/* There was no timeout and the semaphore count was not 0, so
				attempt to take the semaphore again. */
				prvUnlockQueue( pxQueue );
 80070b2:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070b4:	f000 f9af 	bl	8007416 <prvUnlockQueue>
				( void ) xTaskResumeAll();
 80070b8:	f000 fd20 	bl	8007afc <xTaskResumeAll>
 80070bc:	e758      	b.n	8006f70 <xQueueSemaphoreTake+0x80>
			}
		}
		else
		{
			/* Timed out. */
			prvUnlockQueue( pxQueue );
 80070be:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070c0:	f000 f9a9 	bl	8007416 <prvUnlockQueue>
			( void ) xTaskResumeAll();
 80070c4:	f000 fd1a 	bl	8007afc <xTaskResumeAll>

			/* If the semaphore count is 0 exit now as the timeout has
			expired.  Otherwise return to attempt to take the semaphore that is
			known to be available.  As semaphores are implemented by queues the
			queue being empty is equivalent to the semaphore count being 0. */
			if( prvIsQueueEmpty( pxQueue ) != pdFALSE )
 80070c8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070ca:	f000 f9f6 	bl	80074ba <prvIsQueueEmpty>
 80070ce:	4603      	mov	r3, r0
 80070d0:	2b00      	cmp	r3, #0
 80070d2:	f43f af4d 	beq.w	8006f70 <xQueueSemaphoreTake+0x80>
				#if ( configUSE_MUTEXES == 1 )
				{
					/* xInheritanceOccurred could only have be set if
					pxQueue->uxQueueType == queueQUEUE_IS_MUTEX so no need to
					test the mutex type again to check it is actually a mutex. */
					if( xInheritanceOccurred != pdFALSE )
 80070d6:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80070d8:	2b00      	cmp	r3, #0
 80070da:	d00d      	beq.n	80070f8 <xQueueSemaphoreTake+0x208>
					{
						taskENTER_CRITICAL();
 80070dc:	f001 ff8a 	bl	8008ff4 <vPortEnterCritical>
							/* This task blocking on the mutex caused another
							task to inherit this task's priority.  Now this task
							has timed out the priority should be disinherited
							again, but only as low as the next highest priority
							task that is waiting for the same mutex. */
							uxHighestWaitingPriority = prvGetDisinheritPriorityAfterTimeout( pxQueue );
 80070e0:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 80070e2:	f000 f8f0 	bl	80072c6 <prvGetDisinheritPriorityAfterTimeout>
 80070e6:	6278      	str	r0, [r7, #36]	; 0x24
							vTaskPriorityDisinheritAfterTimeout( pxQueue->u.xSemaphore.xMutexHolder, uxHighestWaitingPriority );
 80070e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80070ea:	689b      	ldr	r3, [r3, #8]
 80070ec:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80070ee:	4618      	mov	r0, r3
 80070f0:	f001 fa1e 	bl	8008530 <vTaskPriorityDisinheritAfterTimeout>
						}
						taskEXIT_CRITICAL();
 80070f4:	f001 ffae 	bl	8009054 <vPortExitCritical>
					}
				}
				#endif /* configUSE_MUTEXES */

				traceQUEUE_RECEIVE_FAILED( pxQueue );
				return errQUEUE_EMPTY;
 80070f8:	2300      	movs	r3, #0
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	} /*lint -restore */
}
 80070fa:	4618      	mov	r0, r3
 80070fc:	3738      	adds	r7, #56	; 0x38
 80070fe:	46bd      	mov	sp, r7
 8007100:	bd80      	pop	{r7, pc}
 8007102:	bf00      	nop
 8007104:	e000ed04 	.word	0xe000ed04

08007108 <xQueueReceiveFromISR>:
	} /*lint -restore */
}
/*-----------------------------------------------------------*/

BaseType_t xQueueReceiveFromISR( QueueHandle_t xQueue, void * const pvBuffer, BaseType_t * const pxHigherPriorityTaskWoken )
{
 8007108:	b580      	push	{r7, lr}
 800710a:	b08e      	sub	sp, #56	; 0x38
 800710c:	af00      	add	r7, sp, #0
 800710e:	60f8      	str	r0, [r7, #12]
 8007110:	60b9      	str	r1, [r7, #8]
 8007112:	607a      	str	r2, [r7, #4]
BaseType_t xReturn;
UBaseType_t uxSavedInterruptStatus;
Queue_t * const pxQueue = xQueue;
 8007114:	68fb      	ldr	r3, [r7, #12]
 8007116:	633b      	str	r3, [r7, #48]	; 0x30

	configASSERT( pxQueue );
 8007118:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800711a:	2b00      	cmp	r3, #0
 800711c:	d10a      	bne.n	8007134 <xQueueReceiveFromISR+0x2c>
	__asm volatile
 800711e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007122:	f383 8811 	msr	BASEPRI, r3
 8007126:	f3bf 8f6f 	isb	sy
 800712a:	f3bf 8f4f 	dsb	sy
 800712e:	623b      	str	r3, [r7, #32]
}
 8007130:	bf00      	nop
 8007132:	e7fe      	b.n	8007132 <xQueueReceiveFromISR+0x2a>
	configASSERT( !( ( pvBuffer == NULL ) && ( pxQueue->uxItemSize != ( UBaseType_t ) 0U ) ) );
 8007134:	68bb      	ldr	r3, [r7, #8]
 8007136:	2b00      	cmp	r3, #0
 8007138:	d103      	bne.n	8007142 <xQueueReceiveFromISR+0x3a>
 800713a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800713c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800713e:	2b00      	cmp	r3, #0
 8007140:	d101      	bne.n	8007146 <xQueueReceiveFromISR+0x3e>
 8007142:	2301      	movs	r3, #1
 8007144:	e000      	b.n	8007148 <xQueueReceiveFromISR+0x40>
 8007146:	2300      	movs	r3, #0
 8007148:	2b00      	cmp	r3, #0
 800714a:	d10a      	bne.n	8007162 <xQueueReceiveFromISR+0x5a>
	__asm volatile
 800714c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007150:	f383 8811 	msr	BASEPRI, r3
 8007154:	f3bf 8f6f 	isb	sy
 8007158:	f3bf 8f4f 	dsb	sy
 800715c:	61fb      	str	r3, [r7, #28]
}
 800715e:	bf00      	nop
 8007160:	e7fe      	b.n	8007160 <xQueueReceiveFromISR+0x58>
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: http://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007162:	f002 f829 	bl	80091b8 <vPortValidateInterruptPriority>
	__asm volatile
 8007166:	f3ef 8211 	mrs	r2, BASEPRI
 800716a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800716e:	f383 8811 	msr	BASEPRI, r3
 8007172:	f3bf 8f6f 	isb	sy
 8007176:	f3bf 8f4f 	dsb	sy
 800717a:	61ba      	str	r2, [r7, #24]
 800717c:	617b      	str	r3, [r7, #20]
	return ulOriginalBASEPRI;
 800717e:	69bb      	ldr	r3, [r7, #24]

	uxSavedInterruptStatus = portSET_INTERRUPT_MASK_FROM_ISR();
 8007180:	62fb      	str	r3, [r7, #44]	; 0x2c
	{
		const UBaseType_t uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007182:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007184:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007186:	62bb      	str	r3, [r7, #40]	; 0x28

		/* Cannot block in an ISR, so check there is data available. */
		if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 8007188:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800718a:	2b00      	cmp	r3, #0
 800718c:	d02f      	beq.n	80071ee <xQueueReceiveFromISR+0xe6>
		{
			const int8_t cRxLock = pxQueue->cRxLock;
 800718e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007190:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007194:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

			traceQUEUE_RECEIVE_FROM_ISR( pxQueue );

			prvCopyDataFromQueue( pxQueue, pvBuffer );
 8007198:	68b9      	ldr	r1, [r7, #8]
 800719a:	6b38      	ldr	r0, [r7, #48]	; 0x30
 800719c:	f000 f915 	bl	80073ca <prvCopyDataFromQueue>
			pxQueue->uxMessagesWaiting = uxMessagesWaiting - ( UBaseType_t ) 1;
 80071a0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80071a2:	1e5a      	subs	r2, r3, #1
 80071a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071a6:	639a      	str	r2, [r3, #56]	; 0x38

			/* If the queue is locked the event list will not be modified.
			Instead update the lock count so the task that unlocks the queue
			will know that an ISR has removed data while the queue was
			locked. */
			if( cRxLock == queueUNLOCKED )
 80071a8:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 80071ac:	f1b3 3fff 	cmp.w	r3, #4294967295
 80071b0:	d112      	bne.n	80071d8 <xQueueReceiveFromISR+0xd0>
			{
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 80071b2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071b4:	691b      	ldr	r3, [r3, #16]
 80071b6:	2b00      	cmp	r3, #0
 80071b8:	d016      	beq.n	80071e8 <xQueueReceiveFromISR+0xe0>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 80071ba:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071bc:	3310      	adds	r3, #16
 80071be:	4618      	mov	r0, r3
 80071c0:	f000 fef0 	bl	8007fa4 <xTaskRemoveFromEventList>
 80071c4:	4603      	mov	r3, r0
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d00e      	beq.n	80071e8 <xQueueReceiveFromISR+0xe0>
					{
						/* The task waiting has a higher priority than us so
						force a context switch. */
						if( pxHigherPriorityTaskWoken != NULL )
 80071ca:	687b      	ldr	r3, [r7, #4]
 80071cc:	2b00      	cmp	r3, #0
 80071ce:	d00b      	beq.n	80071e8 <xQueueReceiveFromISR+0xe0>
						{
							*pxHigherPriorityTaskWoken = pdTRUE;
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	2201      	movs	r2, #1
 80071d4:	601a      	str	r2, [r3, #0]
 80071d6:	e007      	b.n	80071e8 <xQueueReceiveFromISR+0xe0>
			}
			else
			{
				/* Increment the lock count so the task that unlocks the queue
				knows that data was removed while it was locked. */
				pxQueue->cRxLock = ( int8_t ) ( cRxLock + 1 );
 80071d8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80071dc:	3301      	adds	r3, #1
 80071de:	b2db      	uxtb	r3, r3
 80071e0:	b25a      	sxtb	r2, r3
 80071e2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80071e4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
			}

			xReturn = pdPASS;
 80071e8:	2301      	movs	r3, #1
 80071ea:	637b      	str	r3, [r7, #52]	; 0x34
 80071ec:	e001      	b.n	80071f2 <xQueueReceiveFromISR+0xea>
		}
		else
		{
			xReturn = pdFAIL;
 80071ee:	2300      	movs	r3, #0
 80071f0:	637b      	str	r3, [r7, #52]	; 0x34
 80071f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80071f4:	613b      	str	r3, [r7, #16]
	__asm volatile
 80071f6:	693b      	ldr	r3, [r7, #16]
 80071f8:	f383 8811 	msr	BASEPRI, r3
}
 80071fc:	bf00      	nop
			traceQUEUE_RECEIVE_FROM_ISR_FAILED( pxQueue );
		}
	}
	portCLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 80071fe:	6b7b      	ldr	r3, [r7, #52]	; 0x34
}
 8007200:	4618      	mov	r0, r3
 8007202:	3738      	adds	r7, #56	; 0x38
 8007204:	46bd      	mov	sp, r7
 8007206:	bd80      	pop	{r7, pc}

08007208 <uxQueueMessagesWaiting>:
	return xReturn;
}
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaiting( const QueueHandle_t xQueue )
{
 8007208:	b580      	push	{r7, lr}
 800720a:	b084      	sub	sp, #16
 800720c:	af00      	add	r7, sp, #0
 800720e:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;

	configASSERT( xQueue );
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2b00      	cmp	r3, #0
 8007214:	d10a      	bne.n	800722c <uxQueueMessagesWaiting+0x24>
	__asm volatile
 8007216:	f04f 0350 	mov.w	r3, #80	; 0x50
 800721a:	f383 8811 	msr	BASEPRI, r3
 800721e:	f3bf 8f6f 	isb	sy
 8007222:	f3bf 8f4f 	dsb	sy
 8007226:	60bb      	str	r3, [r7, #8]
}
 8007228:	bf00      	nop
 800722a:	e7fe      	b.n	800722a <uxQueueMessagesWaiting+0x22>

	taskENTER_CRITICAL();
 800722c:	f001 fee2 	bl	8008ff4 <vPortEnterCritical>
	{
		uxReturn = ( ( Queue_t * ) xQueue )->uxMessagesWaiting;
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007234:	60fb      	str	r3, [r7, #12]
	}
	taskEXIT_CRITICAL();
 8007236:	f001 ff0d 	bl	8009054 <vPortExitCritical>

	return uxReturn;
 800723a:	68fb      	ldr	r3, [r7, #12]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 800723c:	4618      	mov	r0, r3
 800723e:	3710      	adds	r7, #16
 8007240:	46bd      	mov	sp, r7
 8007242:	bd80      	pop	{r7, pc}

08007244 <uxQueueMessagesWaitingFromISR>:
	return uxReturn;
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
/*-----------------------------------------------------------*/

UBaseType_t uxQueueMessagesWaitingFromISR( const QueueHandle_t xQueue )
{
 8007244:	b480      	push	{r7}
 8007246:	b087      	sub	sp, #28
 8007248:	af00      	add	r7, sp, #0
 800724a:	6078      	str	r0, [r7, #4]
UBaseType_t uxReturn;
Queue_t * const pxQueue = xQueue;
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	617b      	str	r3, [r7, #20]

	configASSERT( pxQueue );
 8007250:	697b      	ldr	r3, [r7, #20]
 8007252:	2b00      	cmp	r3, #0
 8007254:	d10a      	bne.n	800726c <uxQueueMessagesWaitingFromISR+0x28>
	__asm volatile
 8007256:	f04f 0350 	mov.w	r3, #80	; 0x50
 800725a:	f383 8811 	msr	BASEPRI, r3
 800725e:	f3bf 8f6f 	isb	sy
 8007262:	f3bf 8f4f 	dsb	sy
 8007266:	60fb      	str	r3, [r7, #12]
}
 8007268:	bf00      	nop
 800726a:	e7fe      	b.n	800726a <uxQueueMessagesWaitingFromISR+0x26>
	uxReturn = pxQueue->uxMessagesWaiting;
 800726c:	697b      	ldr	r3, [r7, #20]
 800726e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007270:	613b      	str	r3, [r7, #16]

	return uxReturn;
 8007272:	693b      	ldr	r3, [r7, #16]
} /*lint !e818 Pointer cannot be declared const as xQueue is a typedef not pointer. */
 8007274:	4618      	mov	r0, r3
 8007276:	371c      	adds	r7, #28
 8007278:	46bd      	mov	sp, r7
 800727a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800727e:	4770      	bx	lr

08007280 <vQueueDelete>:
/*-----------------------------------------------------------*/

void vQueueDelete( QueueHandle_t xQueue )
{
 8007280:	b580      	push	{r7, lr}
 8007282:	b084      	sub	sp, #16
 8007284:	af00      	add	r7, sp, #0
 8007286:	6078      	str	r0, [r7, #4]
Queue_t * const pxQueue = xQueue;
 8007288:	687b      	ldr	r3, [r7, #4]
 800728a:	60fb      	str	r3, [r7, #12]

	configASSERT( pxQueue );
 800728c:	68fb      	ldr	r3, [r7, #12]
 800728e:	2b00      	cmp	r3, #0
 8007290:	d10a      	bne.n	80072a8 <vQueueDelete+0x28>
	__asm volatile
 8007292:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007296:	f383 8811 	msr	BASEPRI, r3
 800729a:	f3bf 8f6f 	isb	sy
 800729e:	f3bf 8f4f 	dsb	sy
 80072a2:	60bb      	str	r3, [r7, #8]
}
 80072a4:	bf00      	nop
 80072a6:	e7fe      	b.n	80072a6 <vQueueDelete+0x26>
	traceQUEUE_DELETE( pxQueue );

	#if ( configQUEUE_REGISTRY_SIZE > 0 )
	{
		vQueueUnregisterQueue( pxQueue );
 80072a8:	68f8      	ldr	r0, [r7, #12]
 80072aa:	f000 f95f 	bl	800756c <vQueueUnregisterQueue>
	}
	#elif( ( configSUPPORT_DYNAMIC_ALLOCATION == 1 ) && ( configSUPPORT_STATIC_ALLOCATION == 1 ) )
	{
		/* The queue could have been allocated statically or dynamically, so
		check before attempting to free the memory. */
		if( pxQueue->ucStaticallyAllocated == ( uint8_t ) pdFALSE )
 80072ae:	68fb      	ldr	r3, [r7, #12]
 80072b0:	f893 3046 	ldrb.w	r3, [r3, #70]	; 0x46
 80072b4:	2b00      	cmp	r3, #0
 80072b6:	d102      	bne.n	80072be <vQueueDelete+0x3e>
		{
			vPortFree( pxQueue );
 80072b8:	68f8      	ldr	r0, [r7, #12]
 80072ba:	f002 f889 	bl	80093d0 <vPortFree>
		/* The queue must have been statically allocated, so is not going to be
		deleted.  Avoid compiler warnings about the unused parameter. */
		( void ) pxQueue;
	}
	#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
}
 80072be:	bf00      	nop
 80072c0:	3710      	adds	r7, #16
 80072c2:	46bd      	mov	sp, r7
 80072c4:	bd80      	pop	{r7, pc}

080072c6 <prvGetDisinheritPriorityAfterTimeout>:
/*-----------------------------------------------------------*/

#if( configUSE_MUTEXES == 1 )

	static UBaseType_t prvGetDisinheritPriorityAfterTimeout( const Queue_t * const pxQueue )
	{
 80072c6:	b480      	push	{r7}
 80072c8:	b085      	sub	sp, #20
 80072ca:	af00      	add	r7, sp, #0
 80072cc:	6078      	str	r0, [r7, #4]
		priority, but the waiting task times out, then the holder should
		disinherit the priority - but only down to the highest priority of any
		other tasks that are waiting for the same mutex.  For this purpose,
		return the priority of the highest priority task that is waiting for the
		mutex. */
		if( listCURRENT_LIST_LENGTH( &( pxQueue->xTasksWaitingToReceive ) ) > 0U )
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80072d2:	2b00      	cmp	r3, #0
 80072d4:	d006      	beq.n	80072e4 <prvGetDisinheritPriorityAfterTimeout+0x1e>
		{
			uxHighestPriorityOfWaitingTasks = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) listGET_ITEM_VALUE_OF_HEAD_ENTRY( &( pxQueue->xTasksWaitingToReceive ) );
 80072d6:	687b      	ldr	r3, [r7, #4]
 80072d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80072da:	681b      	ldr	r3, [r3, #0]
 80072dc:	f1c3 0338 	rsb	r3, r3, #56	; 0x38
 80072e0:	60fb      	str	r3, [r7, #12]
 80072e2:	e001      	b.n	80072e8 <prvGetDisinheritPriorityAfterTimeout+0x22>
		}
		else
		{
			uxHighestPriorityOfWaitingTasks = tskIDLE_PRIORITY;
 80072e4:	2300      	movs	r3, #0
 80072e6:	60fb      	str	r3, [r7, #12]
		}

		return uxHighestPriorityOfWaitingTasks;
 80072e8:	68fb      	ldr	r3, [r7, #12]
	}
 80072ea:	4618      	mov	r0, r3
 80072ec:	3714      	adds	r7, #20
 80072ee:	46bd      	mov	sp, r7
 80072f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072f4:	4770      	bx	lr

080072f6 <prvCopyDataToQueue>:

#endif /* configUSE_MUTEXES */
/*-----------------------------------------------------------*/

static BaseType_t prvCopyDataToQueue( Queue_t * const pxQueue, const void *pvItemToQueue, const BaseType_t xPosition )
{
 80072f6:	b580      	push	{r7, lr}
 80072f8:	b086      	sub	sp, #24
 80072fa:	af00      	add	r7, sp, #0
 80072fc:	60f8      	str	r0, [r7, #12]
 80072fe:	60b9      	str	r1, [r7, #8]
 8007300:	607a      	str	r2, [r7, #4]
BaseType_t xReturn = pdFALSE;
 8007302:	2300      	movs	r3, #0
 8007304:	617b      	str	r3, [r7, #20]
UBaseType_t uxMessagesWaiting;

	/* This function is called from a critical section. */

	uxMessagesWaiting = pxQueue->uxMessagesWaiting;
 8007306:	68fb      	ldr	r3, [r7, #12]
 8007308:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800730a:	613b      	str	r3, [r7, #16]

	if( pxQueue->uxItemSize == ( UBaseType_t ) 0 )
 800730c:	68fb      	ldr	r3, [r7, #12]
 800730e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007310:	2b00      	cmp	r3, #0
 8007312:	d10d      	bne.n	8007330 <prvCopyDataToQueue+0x3a>
	{
		#if ( configUSE_MUTEXES == 1 )
		{
			if( pxQueue->uxQueueType == queueQUEUE_IS_MUTEX )
 8007314:	68fb      	ldr	r3, [r7, #12]
 8007316:	681b      	ldr	r3, [r3, #0]
 8007318:	2b00      	cmp	r3, #0
 800731a:	d14d      	bne.n	80073b8 <prvCopyDataToQueue+0xc2>
			{
				/* The mutex is no longer being held. */
				xReturn = xTaskPriorityDisinherit( pxQueue->u.xSemaphore.xMutexHolder );
 800731c:	68fb      	ldr	r3, [r7, #12]
 800731e:	689b      	ldr	r3, [r3, #8]
 8007320:	4618      	mov	r0, r3
 8007322:	f001 f897 	bl	8008454 <xTaskPriorityDisinherit>
 8007326:	6178      	str	r0, [r7, #20]
				pxQueue->u.xSemaphore.xMutexHolder = NULL;
 8007328:	68fb      	ldr	r3, [r7, #12]
 800732a:	2200      	movs	r2, #0
 800732c:	609a      	str	r2, [r3, #8]
 800732e:	e043      	b.n	80073b8 <prvCopyDataToQueue+0xc2>
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configUSE_MUTEXES */
	}
	else if( xPosition == queueSEND_TO_BACK )
 8007330:	687b      	ldr	r3, [r7, #4]
 8007332:	2b00      	cmp	r3, #0
 8007334:	d119      	bne.n	800736a <prvCopyDataToQueue+0x74>
	{
		( void ) memcpy( ( void * ) pxQueue->pcWriteTo, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports, plus previous logic ensures a null pointer can only be passed to memcpy() if the copy size is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 8007336:	68fb      	ldr	r3, [r7, #12]
 8007338:	6858      	ldr	r0, [r3, #4]
 800733a:	68fb      	ldr	r3, [r7, #12]
 800733c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800733e:	461a      	mov	r2, r3
 8007340:	68b9      	ldr	r1, [r7, #8]
 8007342:	f00f fed1 	bl	80170e8 <memcpy>
		pxQueue->pcWriteTo += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 8007346:	68fb      	ldr	r3, [r7, #12]
 8007348:	685a      	ldr	r2, [r3, #4]
 800734a:	68fb      	ldr	r3, [r7, #12]
 800734c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800734e:	441a      	add	r2, r3
 8007350:	68fb      	ldr	r3, [r7, #12]
 8007352:	605a      	str	r2, [r3, #4]
		if( pxQueue->pcWriteTo >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 8007354:	68fb      	ldr	r3, [r7, #12]
 8007356:	685a      	ldr	r2, [r3, #4]
 8007358:	68fb      	ldr	r3, [r7, #12]
 800735a:	689b      	ldr	r3, [r3, #8]
 800735c:	429a      	cmp	r2, r3
 800735e:	d32b      	bcc.n	80073b8 <prvCopyDataToQueue+0xc2>
		{
			pxQueue->pcWriteTo = pxQueue->pcHead;
 8007360:	68fb      	ldr	r3, [r7, #12]
 8007362:	681a      	ldr	r2, [r3, #0]
 8007364:	68fb      	ldr	r3, [r7, #12]
 8007366:	605a      	str	r2, [r3, #4]
 8007368:	e026      	b.n	80073b8 <prvCopyDataToQueue+0xc2>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		( void ) memcpy( ( void * ) pxQueue->u.xQueue.pcReadFrom, pvItemToQueue, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e9087 !e418 MISRA exception as the casts are only redundant for some ports.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes.  Assert checks null pointer only used when length is 0. */
 800736a:	68fb      	ldr	r3, [r7, #12]
 800736c:	68d8      	ldr	r0, [r3, #12]
 800736e:	68fb      	ldr	r3, [r7, #12]
 8007370:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007372:	461a      	mov	r2, r3
 8007374:	68b9      	ldr	r1, [r7, #8]
 8007376:	f00f feb7 	bl	80170e8 <memcpy>
		pxQueue->u.xQueue.pcReadFrom -= pxQueue->uxItemSize;
 800737a:	68fb      	ldr	r3, [r7, #12]
 800737c:	68da      	ldr	r2, [r3, #12]
 800737e:	68fb      	ldr	r3, [r7, #12]
 8007380:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007382:	425b      	negs	r3, r3
 8007384:	441a      	add	r2, r3
 8007386:	68fb      	ldr	r3, [r7, #12]
 8007388:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom < pxQueue->pcHead ) /*lint !e946 MISRA exception justified as comparison of pointers is the cleanest solution. */
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	68da      	ldr	r2, [r3, #12]
 800738e:	68fb      	ldr	r3, [r7, #12]
 8007390:	681b      	ldr	r3, [r3, #0]
 8007392:	429a      	cmp	r2, r3
 8007394:	d207      	bcs.n	80073a6 <prvCopyDataToQueue+0xb0>
		{
			pxQueue->u.xQueue.pcReadFrom = ( pxQueue->u.xQueue.pcTail - pxQueue->uxItemSize );
 8007396:	68fb      	ldr	r3, [r7, #12]
 8007398:	689a      	ldr	r2, [r3, #8]
 800739a:	68fb      	ldr	r3, [r7, #12]
 800739c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800739e:	425b      	negs	r3, r3
 80073a0:	441a      	add	r2, r3
 80073a2:	68fb      	ldr	r3, [r7, #12]
 80073a4:	60da      	str	r2, [r3, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		if( xPosition == queueOVERWRITE )
 80073a6:	687b      	ldr	r3, [r7, #4]
 80073a8:	2b02      	cmp	r3, #2
 80073aa:	d105      	bne.n	80073b8 <prvCopyDataToQueue+0xc2>
		{
			if( uxMessagesWaiting > ( UBaseType_t ) 0 )
 80073ac:	693b      	ldr	r3, [r7, #16]
 80073ae:	2b00      	cmp	r3, #0
 80073b0:	d002      	beq.n	80073b8 <prvCopyDataToQueue+0xc2>
			{
				/* An item is not being added but overwritten, so subtract
				one from the recorded number of items in the queue so when
				one is added again below the number of recorded items remains
				correct. */
				--uxMessagesWaiting;
 80073b2:	693b      	ldr	r3, [r7, #16]
 80073b4:	3b01      	subs	r3, #1
 80073b6:	613b      	str	r3, [r7, #16]
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxQueue->uxMessagesWaiting = uxMessagesWaiting + ( UBaseType_t ) 1;
 80073b8:	693b      	ldr	r3, [r7, #16]
 80073ba:	1c5a      	adds	r2, r3, #1
 80073bc:	68fb      	ldr	r3, [r7, #12]
 80073be:	639a      	str	r2, [r3, #56]	; 0x38

	return xReturn;
 80073c0:	697b      	ldr	r3, [r7, #20]
}
 80073c2:	4618      	mov	r0, r3
 80073c4:	3718      	adds	r7, #24
 80073c6:	46bd      	mov	sp, r7
 80073c8:	bd80      	pop	{r7, pc}

080073ca <prvCopyDataFromQueue>:
/*-----------------------------------------------------------*/

static void prvCopyDataFromQueue( Queue_t * const pxQueue, void * const pvBuffer )
{
 80073ca:	b580      	push	{r7, lr}
 80073cc:	b082      	sub	sp, #8
 80073ce:	af00      	add	r7, sp, #0
 80073d0:	6078      	str	r0, [r7, #4]
 80073d2:	6039      	str	r1, [r7, #0]
	if( pxQueue->uxItemSize != ( UBaseType_t ) 0 )
 80073d4:	687b      	ldr	r3, [r7, #4]
 80073d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073d8:	2b00      	cmp	r3, #0
 80073da:	d018      	beq.n	800740e <prvCopyDataFromQueue+0x44>
	{
		pxQueue->u.xQueue.pcReadFrom += pxQueue->uxItemSize; /*lint !e9016 Pointer arithmetic on char types ok, especially in this use case where it is the clearest way of conveying intent. */
 80073dc:	687b      	ldr	r3, [r7, #4]
 80073de:	68da      	ldr	r2, [r3, #12]
 80073e0:	687b      	ldr	r3, [r7, #4]
 80073e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80073e4:	441a      	add	r2, r3
 80073e6:	687b      	ldr	r3, [r7, #4]
 80073e8:	60da      	str	r2, [r3, #12]
		if( pxQueue->u.xQueue.pcReadFrom >= pxQueue->u.xQueue.pcTail ) /*lint !e946 MISRA exception justified as use of the relational operator is the cleanest solutions. */
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	68da      	ldr	r2, [r3, #12]
 80073ee:	687b      	ldr	r3, [r7, #4]
 80073f0:	689b      	ldr	r3, [r3, #8]
 80073f2:	429a      	cmp	r2, r3
 80073f4:	d303      	bcc.n	80073fe <prvCopyDataFromQueue+0x34>
		{
			pxQueue->u.xQueue.pcReadFrom = pxQueue->pcHead;
 80073f6:	687b      	ldr	r3, [r7, #4]
 80073f8:	681a      	ldr	r2, [r3, #0]
 80073fa:	687b      	ldr	r3, [r7, #4]
 80073fc:	60da      	str	r2, [r3, #12]
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		( void ) memcpy( ( void * ) pvBuffer, ( void * ) pxQueue->u.xQueue.pcReadFrom, ( size_t ) pxQueue->uxItemSize ); /*lint !e961 !e418 !e9087 MISRA exception as the casts are only redundant for some ports.  Also previous logic ensures a null pointer can only be passed to memcpy() when the count is 0.  Cast to void required by function signature and safe as no alignment requirement and copy length specified in bytes. */
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	68d9      	ldr	r1, [r3, #12]
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007406:	461a      	mov	r2, r3
 8007408:	6838      	ldr	r0, [r7, #0]
 800740a:	f00f fe6d 	bl	80170e8 <memcpy>
	}
}
 800740e:	bf00      	nop
 8007410:	3708      	adds	r7, #8
 8007412:	46bd      	mov	sp, r7
 8007414:	bd80      	pop	{r7, pc}

08007416 <prvUnlockQueue>:
/*-----------------------------------------------------------*/

static void prvUnlockQueue( Queue_t * const pxQueue )
{
 8007416:	b580      	push	{r7, lr}
 8007418:	b084      	sub	sp, #16
 800741a:	af00      	add	r7, sp, #0
 800741c:	6078      	str	r0, [r7, #4]

	/* The lock counts contains the number of extra data items placed or
	removed from the queue while the queue was locked.  When a queue is
	locked items can be added or removed, but the event lists cannot be
	updated. */
	taskENTER_CRITICAL();
 800741e:	f001 fde9 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cTxLock = pxQueue->cTxLock;
 8007422:	687b      	ldr	r3, [r7, #4]
 8007424:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 8007428:	73fb      	strb	r3, [r7, #15]

		/* See if data was added to the queue while it was locked. */
		while( cTxLock > queueLOCKED_UNMODIFIED )
 800742a:	e011      	b.n	8007450 <prvUnlockQueue+0x3a>
			}
			#else /* configUSE_QUEUE_SETS */
			{
				/* Tasks that are removed from the event list will get added to
				the pending ready list as the scheduler is still suspended. */
				if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToReceive ) ) == pdFALSE )
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8007430:	2b00      	cmp	r3, #0
 8007432:	d012      	beq.n	800745a <prvUnlockQueue+0x44>
				{
					if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToReceive ) ) != pdFALSE )
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	3324      	adds	r3, #36	; 0x24
 8007438:	4618      	mov	r0, r3
 800743a:	f000 fdb3 	bl	8007fa4 <xTaskRemoveFromEventList>
 800743e:	4603      	mov	r3, r0
 8007440:	2b00      	cmp	r3, #0
 8007442:	d001      	beq.n	8007448 <prvUnlockQueue+0x32>
					{
						/* The task waiting has a higher priority so record that
						a context switch is required. */
						vTaskMissedYield();
 8007444:	f000 fe8a 	bl	800815c <vTaskMissedYield>
					break;
				}
			}
			#endif /* configUSE_QUEUE_SETS */

			--cTxLock;
 8007448:	7bfb      	ldrb	r3, [r7, #15]
 800744a:	3b01      	subs	r3, #1
 800744c:	b2db      	uxtb	r3, r3
 800744e:	73fb      	strb	r3, [r7, #15]
		while( cTxLock > queueLOCKED_UNMODIFIED )
 8007450:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8007454:	2b00      	cmp	r3, #0
 8007456:	dce9      	bgt.n	800742c <prvUnlockQueue+0x16>
 8007458:	e000      	b.n	800745c <prvUnlockQueue+0x46>
					break;
 800745a:	bf00      	nop
		}

		pxQueue->cTxLock = queueUNLOCKED;
 800745c:	687b      	ldr	r3, [r7, #4]
 800745e:	22ff      	movs	r2, #255	; 0xff
 8007460:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
	}
	taskEXIT_CRITICAL();
 8007464:	f001 fdf6 	bl	8009054 <vPortExitCritical>

	/* Do the same for the Rx lock. */
	taskENTER_CRITICAL();
 8007468:	f001 fdc4 	bl	8008ff4 <vPortEnterCritical>
	{
		int8_t cRxLock = pxQueue->cRxLock;
 800746c:	687b      	ldr	r3, [r7, #4]
 800746e:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 8007472:	73bb      	strb	r3, [r7, #14]

		while( cRxLock > queueLOCKED_UNMODIFIED )
 8007474:	e011      	b.n	800749a <prvUnlockQueue+0x84>
		{
			if( listLIST_IS_EMPTY( &( pxQueue->xTasksWaitingToSend ) ) == pdFALSE )
 8007476:	687b      	ldr	r3, [r7, #4]
 8007478:	691b      	ldr	r3, [r3, #16]
 800747a:	2b00      	cmp	r3, #0
 800747c:	d012      	beq.n	80074a4 <prvUnlockQueue+0x8e>
			{
				if( xTaskRemoveFromEventList( &( pxQueue->xTasksWaitingToSend ) ) != pdFALSE )
 800747e:	687b      	ldr	r3, [r7, #4]
 8007480:	3310      	adds	r3, #16
 8007482:	4618      	mov	r0, r3
 8007484:	f000 fd8e 	bl	8007fa4 <xTaskRemoveFromEventList>
 8007488:	4603      	mov	r3, r0
 800748a:	2b00      	cmp	r3, #0
 800748c:	d001      	beq.n	8007492 <prvUnlockQueue+0x7c>
				{
					vTaskMissedYield();
 800748e:	f000 fe65 	bl	800815c <vTaskMissedYield>
				else
				{
					mtCOVERAGE_TEST_MARKER();
				}

				--cRxLock;
 8007492:	7bbb      	ldrb	r3, [r7, #14]
 8007494:	3b01      	subs	r3, #1
 8007496:	b2db      	uxtb	r3, r3
 8007498:	73bb      	strb	r3, [r7, #14]
		while( cRxLock > queueLOCKED_UNMODIFIED )
 800749a:	f997 300e 	ldrsb.w	r3, [r7, #14]
 800749e:	2b00      	cmp	r3, #0
 80074a0:	dce9      	bgt.n	8007476 <prvUnlockQueue+0x60>
 80074a2:	e000      	b.n	80074a6 <prvUnlockQueue+0x90>
			}
			else
			{
				break;
 80074a4:	bf00      	nop
			}
		}

		pxQueue->cRxLock = queueUNLOCKED;
 80074a6:	687b      	ldr	r3, [r7, #4]
 80074a8:	22ff      	movs	r2, #255	; 0xff
 80074aa:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
	}
	taskEXIT_CRITICAL();
 80074ae:	f001 fdd1 	bl	8009054 <vPortExitCritical>
}
 80074b2:	bf00      	nop
 80074b4:	3710      	adds	r7, #16
 80074b6:	46bd      	mov	sp, r7
 80074b8:	bd80      	pop	{r7, pc}

080074ba <prvIsQueueEmpty>:
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueEmpty( const Queue_t *pxQueue )
{
 80074ba:	b580      	push	{r7, lr}
 80074bc:	b084      	sub	sp, #16
 80074be:	af00      	add	r7, sp, #0
 80074c0:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074c2:	f001 fd97 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t )  0 )
 80074c6:	687b      	ldr	r3, [r7, #4]
 80074c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80074ca:	2b00      	cmp	r3, #0
 80074cc:	d102      	bne.n	80074d4 <prvIsQueueEmpty+0x1a>
		{
			xReturn = pdTRUE;
 80074ce:	2301      	movs	r3, #1
 80074d0:	60fb      	str	r3, [r7, #12]
 80074d2:	e001      	b.n	80074d8 <prvIsQueueEmpty+0x1e>
		}
		else
		{
			xReturn = pdFALSE;
 80074d4:	2300      	movs	r3, #0
 80074d6:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 80074d8:	f001 fdbc 	bl	8009054 <vPortExitCritical>

	return xReturn;
 80074dc:	68fb      	ldr	r3, [r7, #12]
}
 80074de:	4618      	mov	r0, r3
 80074e0:	3710      	adds	r7, #16
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}

080074e6 <prvIsQueueFull>:
	return xReturn;
} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
/*-----------------------------------------------------------*/

static BaseType_t prvIsQueueFull( const Queue_t *pxQueue )
{
 80074e6:	b580      	push	{r7, lr}
 80074e8:	b084      	sub	sp, #16
 80074ea:	af00      	add	r7, sp, #0
 80074ec:	6078      	str	r0, [r7, #4]
BaseType_t xReturn;

	taskENTER_CRITICAL();
 80074ee:	f001 fd81 	bl	8008ff4 <vPortEnterCritical>
	{
		if( pxQueue->uxMessagesWaiting == pxQueue->uxLength )
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 80074f6:	687b      	ldr	r3, [r7, #4]
 80074f8:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80074fa:	429a      	cmp	r2, r3
 80074fc:	d102      	bne.n	8007504 <prvIsQueueFull+0x1e>
		{
			xReturn = pdTRUE;
 80074fe:	2301      	movs	r3, #1
 8007500:	60fb      	str	r3, [r7, #12]
 8007502:	e001      	b.n	8007508 <prvIsQueueFull+0x22>
		}
		else
		{
			xReturn = pdFALSE;
 8007504:	2300      	movs	r3, #0
 8007506:	60fb      	str	r3, [r7, #12]
		}
	}
	taskEXIT_CRITICAL();
 8007508:	f001 fda4 	bl	8009054 <vPortExitCritical>

	return xReturn;
 800750c:	68fb      	ldr	r3, [r7, #12]
}
 800750e:	4618      	mov	r0, r3
 8007510:	3710      	adds	r7, #16
 8007512:	46bd      	mov	sp, r7
 8007514:	bd80      	pop	{r7, pc}
	...

08007518 <vQueueAddToRegistry>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueAddToRegistry( QueueHandle_t xQueue, const char *pcQueueName ) /*lint !e971 Unqualified char types are allowed for strings and single characters only. */
	{
 8007518:	b480      	push	{r7}
 800751a:	b085      	sub	sp, #20
 800751c:	af00      	add	r7, sp, #0
 800751e:	6078      	str	r0, [r7, #4]
 8007520:	6039      	str	r1, [r7, #0]
	UBaseType_t ux;

		/* See if there is an empty space in the registry.  A NULL name denotes
		a free slot. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007522:	2300      	movs	r3, #0
 8007524:	60fb      	str	r3, [r7, #12]
 8007526:	e014      	b.n	8007552 <vQueueAddToRegistry+0x3a>
		{
			if( xQueueRegistry[ ux ].pcQueueName == NULL )
 8007528:	4a0f      	ldr	r2, [pc, #60]	; (8007568 <vQueueAddToRegistry+0x50>)
 800752a:	68fb      	ldr	r3, [r7, #12]
 800752c:	f852 3033 	ldr.w	r3, [r2, r3, lsl #3]
 8007530:	2b00      	cmp	r3, #0
 8007532:	d10b      	bne.n	800754c <vQueueAddToRegistry+0x34>
			{
				/* Store the information on this queue. */
				xQueueRegistry[ ux ].pcQueueName = pcQueueName;
 8007534:	490c      	ldr	r1, [pc, #48]	; (8007568 <vQueueAddToRegistry+0x50>)
 8007536:	68fb      	ldr	r3, [r7, #12]
 8007538:	683a      	ldr	r2, [r7, #0]
 800753a:	f841 2033 	str.w	r2, [r1, r3, lsl #3]
				xQueueRegistry[ ux ].xHandle = xQueue;
 800753e:	4a0a      	ldr	r2, [pc, #40]	; (8007568 <vQueueAddToRegistry+0x50>)
 8007540:	68fb      	ldr	r3, [r7, #12]
 8007542:	00db      	lsls	r3, r3, #3
 8007544:	4413      	add	r3, r2
 8007546:	687a      	ldr	r2, [r7, #4]
 8007548:	605a      	str	r2, [r3, #4]

				traceQUEUE_REGISTRY_ADD( xQueue, pcQueueName );
				break;
 800754a:	e006      	b.n	800755a <vQueueAddToRegistry+0x42>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 800754c:	68fb      	ldr	r3, [r7, #12]
 800754e:	3301      	adds	r3, #1
 8007550:	60fb      	str	r3, [r7, #12]
 8007552:	68fb      	ldr	r3, [r7, #12]
 8007554:	2b07      	cmp	r3, #7
 8007556:	d9e7      	bls.n	8007528 <vQueueAddToRegistry+0x10>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}
	}
 8007558:	bf00      	nop
 800755a:	bf00      	nop
 800755c:	3714      	adds	r7, #20
 800755e:	46bd      	mov	sp, r7
 8007560:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007564:	4770      	bx	lr
 8007566:	bf00      	nop
 8007568:	20005c3c 	.word	0x20005c3c

0800756c <vQueueUnregisterQueue>:
/*-----------------------------------------------------------*/

#if ( configQUEUE_REGISTRY_SIZE > 0 )

	void vQueueUnregisterQueue( QueueHandle_t xQueue )
	{
 800756c:	b480      	push	{r7}
 800756e:	b085      	sub	sp, #20
 8007570:	af00      	add	r7, sp, #0
 8007572:	6078      	str	r0, [r7, #4]
	UBaseType_t ux;

		/* See if the handle of the queue being unregistered in actually in the
		registry. */
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 8007574:	2300      	movs	r3, #0
 8007576:	60fb      	str	r3, [r7, #12]
 8007578:	e016      	b.n	80075a8 <vQueueUnregisterQueue+0x3c>
		{
			if( xQueueRegistry[ ux ].xHandle == xQueue )
 800757a:	4a10      	ldr	r2, [pc, #64]	; (80075bc <vQueueUnregisterQueue+0x50>)
 800757c:	68fb      	ldr	r3, [r7, #12]
 800757e:	00db      	lsls	r3, r3, #3
 8007580:	4413      	add	r3, r2
 8007582:	685b      	ldr	r3, [r3, #4]
 8007584:	687a      	ldr	r2, [r7, #4]
 8007586:	429a      	cmp	r2, r3
 8007588:	d10b      	bne.n	80075a2 <vQueueUnregisterQueue+0x36>
			{
				/* Set the name to NULL to show that this slot if free again. */
				xQueueRegistry[ ux ].pcQueueName = NULL;
 800758a:	4a0c      	ldr	r2, [pc, #48]	; (80075bc <vQueueUnregisterQueue+0x50>)
 800758c:	68fb      	ldr	r3, [r7, #12]
 800758e:	2100      	movs	r1, #0
 8007590:	f842 1033 	str.w	r1, [r2, r3, lsl #3]

				/* Set the handle to NULL to ensure the same queue handle cannot
				appear in the registry twice if it is added, removed, then
				added again. */
				xQueueRegistry[ ux ].xHandle = ( QueueHandle_t ) 0;
 8007594:	4a09      	ldr	r2, [pc, #36]	; (80075bc <vQueueUnregisterQueue+0x50>)
 8007596:	68fb      	ldr	r3, [r7, #12]
 8007598:	00db      	lsls	r3, r3, #3
 800759a:	4413      	add	r3, r2
 800759c:	2200      	movs	r2, #0
 800759e:	605a      	str	r2, [r3, #4]
				break;
 80075a0:	e006      	b.n	80075b0 <vQueueUnregisterQueue+0x44>
		for( ux = ( UBaseType_t ) 0U; ux < ( UBaseType_t ) configQUEUE_REGISTRY_SIZE; ux++ )
 80075a2:	68fb      	ldr	r3, [r7, #12]
 80075a4:	3301      	adds	r3, #1
 80075a6:	60fb      	str	r3, [r7, #12]
 80075a8:	68fb      	ldr	r3, [r7, #12]
 80075aa:	2b07      	cmp	r3, #7
 80075ac:	d9e5      	bls.n	800757a <vQueueUnregisterQueue+0xe>
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

	} /*lint !e818 xQueue could not be pointer to const because it is a typedef. */
 80075ae:	bf00      	nop
 80075b0:	bf00      	nop
 80075b2:	3714      	adds	r7, #20
 80075b4:	46bd      	mov	sp, r7
 80075b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075ba:	4770      	bx	lr
 80075bc:	20005c3c 	.word	0x20005c3c

080075c0 <vQueueWaitForMessageRestricted>:
/*-----------------------------------------------------------*/

#if ( configUSE_TIMERS == 1 )

	void vQueueWaitForMessageRestricted( QueueHandle_t xQueue, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 80075c0:	b580      	push	{r7, lr}
 80075c2:	b086      	sub	sp, #24
 80075c4:	af00      	add	r7, sp, #0
 80075c6:	60f8      	str	r0, [r7, #12]
 80075c8:	60b9      	str	r1, [r7, #8]
 80075ca:	607a      	str	r2, [r7, #4]
	Queue_t * const pxQueue = xQueue;
 80075cc:	68fb      	ldr	r3, [r7, #12]
 80075ce:	617b      	str	r3, [r7, #20]
		will not actually cause the task to block, just place it on a blocked
		list.  It will not block until the scheduler is unlocked - at which
		time a yield will be performed.  If an item is added to the queue while
		the queue is locked, and the calling task blocks on the queue, then the
		calling task will be immediately unblocked when the queue is unlocked. */
		prvLockQueue( pxQueue );
 80075d0:	f001 fd10 	bl	8008ff4 <vPortEnterCritical>
 80075d4:	697b      	ldr	r3, [r7, #20]
 80075d6:	f893 3044 	ldrb.w	r3, [r3, #68]	; 0x44
 80075da:	b25b      	sxtb	r3, r3
 80075dc:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075e0:	d103      	bne.n	80075ea <vQueueWaitForMessageRestricted+0x2a>
 80075e2:	697b      	ldr	r3, [r7, #20]
 80075e4:	2200      	movs	r2, #0
 80075e6:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80075ea:	697b      	ldr	r3, [r7, #20]
 80075ec:	f893 3045 	ldrb.w	r3, [r3, #69]	; 0x45
 80075f0:	b25b      	sxtb	r3, r3
 80075f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80075f6:	d103      	bne.n	8007600 <vQueueWaitForMessageRestricted+0x40>
 80075f8:	697b      	ldr	r3, [r7, #20]
 80075fa:	2200      	movs	r2, #0
 80075fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45
 8007600:	f001 fd28 	bl	8009054 <vPortExitCritical>
		if( pxQueue->uxMessagesWaiting == ( UBaseType_t ) 0U )
 8007604:	697b      	ldr	r3, [r7, #20]
 8007606:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007608:	2b00      	cmp	r3, #0
 800760a:	d106      	bne.n	800761a <vQueueWaitForMessageRestricted+0x5a>
		{
			/* There is nothing in the queue, block for the specified period. */
			vTaskPlaceOnEventListRestricted( &( pxQueue->xTasksWaitingToReceive ), xTicksToWait, xWaitIndefinitely );
 800760c:	697b      	ldr	r3, [r7, #20]
 800760e:	3324      	adds	r3, #36	; 0x24
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	68b9      	ldr	r1, [r7, #8]
 8007614:	4618      	mov	r0, r3
 8007616:	f000 fc99 	bl	8007f4c <vTaskPlaceOnEventListRestricted>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
		prvUnlockQueue( pxQueue );
 800761a:	6978      	ldr	r0, [r7, #20]
 800761c:	f7ff fefb 	bl	8007416 <prvUnlockQueue>
	}
 8007620:	bf00      	nop
 8007622:	3718      	adds	r7, #24
 8007624:	46bd      	mov	sp, r7
 8007626:	bd80      	pop	{r7, pc}

08007628 <xTaskCreateStatic>:
									const uint32_t ulStackDepth,
									void * const pvParameters,
									UBaseType_t uxPriority,
									StackType_t * const puxStackBuffer,
									StaticTask_t * const pxTaskBuffer )
	{
 8007628:	b580      	push	{r7, lr}
 800762a:	b08e      	sub	sp, #56	; 0x38
 800762c:	af04      	add	r7, sp, #16
 800762e:	60f8      	str	r0, [r7, #12]
 8007630:	60b9      	str	r1, [r7, #8]
 8007632:	607a      	str	r2, [r7, #4]
 8007634:	603b      	str	r3, [r7, #0]
	TCB_t *pxNewTCB;
	TaskHandle_t xReturn;

		configASSERT( puxStackBuffer != NULL );
 8007636:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007638:	2b00      	cmp	r3, #0
 800763a:	d10a      	bne.n	8007652 <xTaskCreateStatic+0x2a>
	__asm volatile
 800763c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007640:	f383 8811 	msr	BASEPRI, r3
 8007644:	f3bf 8f6f 	isb	sy
 8007648:	f3bf 8f4f 	dsb	sy
 800764c:	623b      	str	r3, [r7, #32]
}
 800764e:	bf00      	nop
 8007650:	e7fe      	b.n	8007650 <xTaskCreateStatic+0x28>
		configASSERT( pxTaskBuffer != NULL );
 8007652:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007654:	2b00      	cmp	r3, #0
 8007656:	d10a      	bne.n	800766e <xTaskCreateStatic+0x46>
	__asm volatile
 8007658:	f04f 0350 	mov.w	r3, #80	; 0x50
 800765c:	f383 8811 	msr	BASEPRI, r3
 8007660:	f3bf 8f6f 	isb	sy
 8007664:	f3bf 8f4f 	dsb	sy
 8007668:	61fb      	str	r3, [r7, #28]
}
 800766a:	bf00      	nop
 800766c:	e7fe      	b.n	800766c <xTaskCreateStatic+0x44>
		#if( configASSERT_DEFINED == 1 )
		{
			/* Sanity check that the size of the structure used to declare a
			variable of type StaticTask_t equals the size of the real task
			structure. */
			volatile size_t xSize = sizeof( StaticTask_t );
 800766e:	23a8      	movs	r3, #168	; 0xa8
 8007670:	613b      	str	r3, [r7, #16]
			configASSERT( xSize == sizeof( TCB_t ) );
 8007672:	693b      	ldr	r3, [r7, #16]
 8007674:	2ba8      	cmp	r3, #168	; 0xa8
 8007676:	d00a      	beq.n	800768e <xTaskCreateStatic+0x66>
	__asm volatile
 8007678:	f04f 0350 	mov.w	r3, #80	; 0x50
 800767c:	f383 8811 	msr	BASEPRI, r3
 8007680:	f3bf 8f6f 	isb	sy
 8007684:	f3bf 8f4f 	dsb	sy
 8007688:	61bb      	str	r3, [r7, #24]
}
 800768a:	bf00      	nop
 800768c:	e7fe      	b.n	800768c <xTaskCreateStatic+0x64>
			( void ) xSize; /* Prevent lint warning when configASSERT() is not used. */
 800768e:	693b      	ldr	r3, [r7, #16]
		}
		#endif /* configASSERT_DEFINED */


		if( ( pxTaskBuffer != NULL ) && ( puxStackBuffer != NULL ) )
 8007690:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8007692:	2b00      	cmp	r3, #0
 8007694:	d01e      	beq.n	80076d4 <xTaskCreateStatic+0xac>
 8007696:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8007698:	2b00      	cmp	r3, #0
 800769a:	d01b      	beq.n	80076d4 <xTaskCreateStatic+0xac>
		{
			/* The memory used for the task's TCB and stack are passed into this
			function - use them. */
			pxNewTCB = ( TCB_t * ) pxTaskBuffer; /*lint !e740 !e9087 Unusual cast is ok as the structures are designed to have the same alignment, and the size is checked by an assert. */
 800769c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800769e:	627b      	str	r3, [r7, #36]	; 0x24
			pxNewTCB->pxStack = ( StackType_t * ) puxStackBuffer;
 80076a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a2:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80076a4:	631a      	str	r2, [r3, #48]	; 0x30

			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created statically in case the task is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskSTATICALLY_ALLOCATED_STACK_AND_TCB;
 80076a6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076a8:	2202      	movs	r2, #2
 80076aa:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ulStackDepth, pvParameters, uxPriority, &xReturn, pxNewTCB, NULL );
 80076ae:	2300      	movs	r3, #0
 80076b0:	9303      	str	r3, [sp, #12]
 80076b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80076b4:	9302      	str	r3, [sp, #8]
 80076b6:	f107 0314 	add.w	r3, r7, #20
 80076ba:	9301      	str	r3, [sp, #4]
 80076bc:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80076be:	9300      	str	r3, [sp, #0]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	687a      	ldr	r2, [r7, #4]
 80076c4:	68b9      	ldr	r1, [r7, #8]
 80076c6:	68f8      	ldr	r0, [r7, #12]
 80076c8:	f000 f850 	bl	800776c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 80076cc:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80076ce:	f000 f8f3 	bl	80078b8 <prvAddNewTaskToReadyList>
 80076d2:	e001      	b.n	80076d8 <xTaskCreateStatic+0xb0>
		}
		else
		{
			xReturn = NULL;
 80076d4:	2300      	movs	r3, #0
 80076d6:	617b      	str	r3, [r7, #20]
		}

		return xReturn;
 80076d8:	697b      	ldr	r3, [r7, #20]
	}
 80076da:	4618      	mov	r0, r3
 80076dc:	3728      	adds	r7, #40	; 0x28
 80076de:	46bd      	mov	sp, r7
 80076e0:	bd80      	pop	{r7, pc}

080076e2 <xTaskCreate>:
							const char * const pcName,		/*lint !e971 Unqualified char types are allowed for strings and single characters only. */
							const configSTACK_DEPTH_TYPE usStackDepth,
							void * const pvParameters,
							UBaseType_t uxPriority,
							TaskHandle_t * const pxCreatedTask )
	{
 80076e2:	b580      	push	{r7, lr}
 80076e4:	b08c      	sub	sp, #48	; 0x30
 80076e6:	af04      	add	r7, sp, #16
 80076e8:	60f8      	str	r0, [r7, #12]
 80076ea:	60b9      	str	r1, [r7, #8]
 80076ec:	603b      	str	r3, [r7, #0]
 80076ee:	4613      	mov	r3, r2
 80076f0:	80fb      	strh	r3, [r7, #6]
		#else /* portSTACK_GROWTH */
		{
		StackType_t *pxStack;

			/* Allocate space for the stack used by the task being created. */
			pxStack = pvPortMalloc( ( ( ( size_t ) usStackDepth ) * sizeof( StackType_t ) ) ); /*lint !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack and this allocation is the stack. */
 80076f2:	88fb      	ldrh	r3, [r7, #6]
 80076f4:	009b      	lsls	r3, r3, #2
 80076f6:	4618      	mov	r0, r3
 80076f8:	f001 fd9e 	bl	8009238 <pvPortMalloc>
 80076fc:	6178      	str	r0, [r7, #20]

			if( pxStack != NULL )
 80076fe:	697b      	ldr	r3, [r7, #20]
 8007700:	2b00      	cmp	r3, #0
 8007702:	d00e      	beq.n	8007722 <xTaskCreate+0x40>
			{
				/* Allocate space for the TCB. */
				pxNewTCB = ( TCB_t * ) pvPortMalloc( sizeof( TCB_t ) ); /*lint !e9087 !e9079 All values returned by pvPortMalloc() have at least the alignment required by the MCU's stack, and the first member of TCB_t is always a pointer to the task's stack. */
 8007704:	20a8      	movs	r0, #168	; 0xa8
 8007706:	f001 fd97 	bl	8009238 <pvPortMalloc>
 800770a:	61f8      	str	r0, [r7, #28]

				if( pxNewTCB != NULL )
 800770c:	69fb      	ldr	r3, [r7, #28]
 800770e:	2b00      	cmp	r3, #0
 8007710:	d003      	beq.n	800771a <xTaskCreate+0x38>
				{
					/* Store the stack location in the TCB. */
					pxNewTCB->pxStack = pxStack;
 8007712:	69fb      	ldr	r3, [r7, #28]
 8007714:	697a      	ldr	r2, [r7, #20]
 8007716:	631a      	str	r2, [r3, #48]	; 0x30
 8007718:	e005      	b.n	8007726 <xTaskCreate+0x44>
				}
				else
				{
					/* The stack cannot be used as the TCB was not created.  Free
					it again. */
					vPortFree( pxStack );
 800771a:	6978      	ldr	r0, [r7, #20]
 800771c:	f001 fe58 	bl	80093d0 <vPortFree>
 8007720:	e001      	b.n	8007726 <xTaskCreate+0x44>
				}
			}
			else
			{
				pxNewTCB = NULL;
 8007722:	2300      	movs	r3, #0
 8007724:	61fb      	str	r3, [r7, #28]
			}
		}
		#endif /* portSTACK_GROWTH */

		if( pxNewTCB != NULL )
 8007726:	69fb      	ldr	r3, [r7, #28]
 8007728:	2b00      	cmp	r3, #0
 800772a:	d017      	beq.n	800775c <xTaskCreate+0x7a>
		{
			#if( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e9029 !e731 Macro has been consolidated for readability reasons. */
			{
				/* Tasks can be created statically or dynamically, so note this
				task was created dynamically in case it is later deleted. */
				pxNewTCB->ucStaticallyAllocated = tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB;
 800772c:	69fb      	ldr	r3, [r7, #28]
 800772e:	2200      	movs	r2, #0
 8007730:	f883 20a5 	strb.w	r2, [r3, #165]	; 0xa5
			}
			#endif /* tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE */

			prvInitialiseNewTask( pxTaskCode, pcName, ( uint32_t ) usStackDepth, pvParameters, uxPriority, pxCreatedTask, pxNewTCB, NULL );
 8007734:	88fa      	ldrh	r2, [r7, #6]
 8007736:	2300      	movs	r3, #0
 8007738:	9303      	str	r3, [sp, #12]
 800773a:	69fb      	ldr	r3, [r7, #28]
 800773c:	9302      	str	r3, [sp, #8]
 800773e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8007740:	9301      	str	r3, [sp, #4]
 8007742:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007744:	9300      	str	r3, [sp, #0]
 8007746:	683b      	ldr	r3, [r7, #0]
 8007748:	68b9      	ldr	r1, [r7, #8]
 800774a:	68f8      	ldr	r0, [r7, #12]
 800774c:	f000 f80e 	bl	800776c <prvInitialiseNewTask>
			prvAddNewTaskToReadyList( pxNewTCB );
 8007750:	69f8      	ldr	r0, [r7, #28]
 8007752:	f000 f8b1 	bl	80078b8 <prvAddNewTaskToReadyList>
			xReturn = pdPASS;
 8007756:	2301      	movs	r3, #1
 8007758:	61bb      	str	r3, [r7, #24]
 800775a:	e002      	b.n	8007762 <xTaskCreate+0x80>
		}
		else
		{
			xReturn = errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY;
 800775c:	f04f 33ff 	mov.w	r3, #4294967295
 8007760:	61bb      	str	r3, [r7, #24]
		}

		return xReturn;
 8007762:	69bb      	ldr	r3, [r7, #24]
	}
 8007764:	4618      	mov	r0, r3
 8007766:	3720      	adds	r7, #32
 8007768:	46bd      	mov	sp, r7
 800776a:	bd80      	pop	{r7, pc}

0800776c <prvInitialiseNewTask>:
									void * const pvParameters,
									UBaseType_t uxPriority,
									TaskHandle_t * const pxCreatedTask,
									TCB_t *pxNewTCB,
									const MemoryRegion_t * const xRegions )
{
 800776c:	b580      	push	{r7, lr}
 800776e:	b088      	sub	sp, #32
 8007770:	af00      	add	r7, sp, #0
 8007772:	60f8      	str	r0, [r7, #12]
 8007774:	60b9      	str	r1, [r7, #8]
 8007776:	607a      	str	r2, [r7, #4]
 8007778:	603b      	str	r3, [r7, #0]

	/* Avoid dependency on memset() if it is not required. */
	#if( tskSET_NEW_STACKS_TO_KNOWN_VALUE == 1 )
	{
		/* Fill the stack with a known value to assist debugging. */
		( void ) memset( pxNewTCB->pxStack, ( int ) tskSTACK_FILL_BYTE, ( size_t ) ulStackDepth * sizeof( StackType_t ) );
 800777a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800777c:	6b18      	ldr	r0, [r3, #48]	; 0x30
 800777e:	687b      	ldr	r3, [r7, #4]
 8007780:	009b      	lsls	r3, r3, #2
 8007782:	461a      	mov	r2, r3
 8007784:	21a5      	movs	r1, #165	; 0xa5
 8007786:	f00f fbd2 	bl	8016f2e <memset>
	grows from high memory to low (as per the 80x86) or vice versa.
	portSTACK_GROWTH is used to make the result positive or negative as required
	by the port. */
	#if( portSTACK_GROWTH < 0 )
	{
		pxTopOfStack = &( pxNewTCB->pxStack[ ulStackDepth - ( uint32_t ) 1 ] );
 800778a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800778c:	6b1a      	ldr	r2, [r3, #48]	; 0x30
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
 8007794:	3b01      	subs	r3, #1
 8007796:	009b      	lsls	r3, r3, #2
 8007798:	4413      	add	r3, r2
 800779a:	61bb      	str	r3, [r7, #24]
		pxTopOfStack = ( StackType_t * ) ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack ) & ( ~( ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) ) ); /*lint !e923 !e9033 !e9078 MISRA exception.  Avoiding casts between pointers and integers is not practical.  Size differences accounted for using portPOINTER_SIZE_TYPE type.  Checked by assert(). */
 800779c:	69bb      	ldr	r3, [r7, #24]
 800779e:	f023 0307 	bic.w	r3, r3, #7
 80077a2:	61bb      	str	r3, [r7, #24]

		/* Check the alignment of the calculated top of stack is correct. */
		configASSERT( ( ( ( portPOINTER_SIZE_TYPE ) pxTopOfStack & ( portPOINTER_SIZE_TYPE ) portBYTE_ALIGNMENT_MASK ) == 0UL ) );
 80077a4:	69bb      	ldr	r3, [r7, #24]
 80077a6:	f003 0307 	and.w	r3, r3, #7
 80077aa:	2b00      	cmp	r3, #0
 80077ac:	d00a      	beq.n	80077c4 <prvInitialiseNewTask+0x58>
	__asm volatile
 80077ae:	f04f 0350 	mov.w	r3, #80	; 0x50
 80077b2:	f383 8811 	msr	BASEPRI, r3
 80077b6:	f3bf 8f6f 	isb	sy
 80077ba:	f3bf 8f4f 	dsb	sy
 80077be:	617b      	str	r3, [r7, #20]
}
 80077c0:	bf00      	nop
 80077c2:	e7fe      	b.n	80077c2 <prvInitialiseNewTask+0x56>
		pxNewTCB->pxEndOfStack = pxNewTCB->pxStack + ( ulStackDepth - ( uint32_t ) 1 );
	}
	#endif /* portSTACK_GROWTH */

	/* Store the task name in the TCB. */
	if( pcName != NULL )
 80077c4:	68bb      	ldr	r3, [r7, #8]
 80077c6:	2b00      	cmp	r3, #0
 80077c8:	d01f      	beq.n	800780a <prvInitialiseNewTask+0x9e>
	{
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077ca:	2300      	movs	r3, #0
 80077cc:	61fb      	str	r3, [r7, #28]
 80077ce:	e012      	b.n	80077f6 <prvInitialiseNewTask+0x8a>
		{
			pxNewTCB->pcTaskName[ x ] = pcName[ x ];
 80077d0:	68ba      	ldr	r2, [r7, #8]
 80077d2:	69fb      	ldr	r3, [r7, #28]
 80077d4:	4413      	add	r3, r2
 80077d6:	7819      	ldrb	r1, [r3, #0]
 80077d8:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80077da:	69fb      	ldr	r3, [r7, #28]
 80077dc:	4413      	add	r3, r2
 80077de:	3334      	adds	r3, #52	; 0x34
 80077e0:	460a      	mov	r2, r1
 80077e2:	701a      	strb	r2, [r3, #0]

			/* Don't copy all configMAX_TASK_NAME_LEN if the string is shorter than
			configMAX_TASK_NAME_LEN characters just in case the memory after the
			string is not accessible (extremely unlikely). */
			if( pcName[ x ] == ( char ) 0x00 )
 80077e4:	68ba      	ldr	r2, [r7, #8]
 80077e6:	69fb      	ldr	r3, [r7, #28]
 80077e8:	4413      	add	r3, r2
 80077ea:	781b      	ldrb	r3, [r3, #0]
 80077ec:	2b00      	cmp	r3, #0
 80077ee:	d006      	beq.n	80077fe <prvInitialiseNewTask+0x92>
		for( x = ( UBaseType_t ) 0; x < ( UBaseType_t ) configMAX_TASK_NAME_LEN; x++ )
 80077f0:	69fb      	ldr	r3, [r7, #28]
 80077f2:	3301      	adds	r3, #1
 80077f4:	61fb      	str	r3, [r7, #28]
 80077f6:	69fb      	ldr	r3, [r7, #28]
 80077f8:	2b0f      	cmp	r3, #15
 80077fa:	d9e9      	bls.n	80077d0 <prvInitialiseNewTask+0x64>
 80077fc:	e000      	b.n	8007800 <prvInitialiseNewTask+0x94>
			{
				break;
 80077fe:	bf00      	nop
			}
		}

		/* Ensure the name string is terminated in the case that the string length
		was greater or equal to configMAX_TASK_NAME_LEN. */
		pxNewTCB->pcTaskName[ configMAX_TASK_NAME_LEN - 1 ] = '\0';
 8007800:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007802:	2200      	movs	r2, #0
 8007804:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007808:	e003      	b.n	8007812 <prvInitialiseNewTask+0xa6>
	}
	else
	{
		/* The task has not been given a name, so just ensure there is a NULL
		terminator when it is read out. */
		pxNewTCB->pcTaskName[ 0 ] = 0x00;
 800780a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800780c:	2200      	movs	r2, #0
 800780e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
	}

	/* This is used as an array index so must ensure it's not too large.  First
	remove the privilege bit if one is present. */
	if( uxPriority >= ( UBaseType_t ) configMAX_PRIORITIES )
 8007812:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8007814:	2b37      	cmp	r3, #55	; 0x37
 8007816:	d901      	bls.n	800781c <prvInitialiseNewTask+0xb0>
	{
		uxPriority = ( UBaseType_t ) configMAX_PRIORITIES - ( UBaseType_t ) 1U;
 8007818:	2337      	movs	r3, #55	; 0x37
 800781a:	62bb      	str	r3, [r7, #40]	; 0x28
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	pxNewTCB->uxPriority = uxPriority;
 800781c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800781e:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007820:	62da      	str	r2, [r3, #44]	; 0x2c
	#if ( configUSE_MUTEXES == 1 )
	{
		pxNewTCB->uxBasePriority = uxPriority;
 8007822:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007824:	6aba      	ldr	r2, [r7, #40]	; 0x28
 8007826:	64da      	str	r2, [r3, #76]	; 0x4c
		pxNewTCB->uxMutexesHeld = 0;
 8007828:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800782a:	2200      	movs	r2, #0
 800782c:	651a      	str	r2, [r3, #80]	; 0x50
	}
	#endif /* configUSE_MUTEXES */

	vListInitialiseItem( &( pxNewTCB->xStateListItem ) );
 800782e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007830:	3304      	adds	r3, #4
 8007832:	4618      	mov	r0, r3
 8007834:	f7fe fd64 	bl	8006300 <vListInitialiseItem>
	vListInitialiseItem( &( pxNewTCB->xEventListItem ) );
 8007838:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800783a:	3318      	adds	r3, #24
 800783c:	4618      	mov	r0, r3
 800783e:	f7fe fd5f 	bl	8006300 <vListInitialiseItem>

	/* Set the pxNewTCB as a link back from the ListItem_t.  This is so we can get
	back to	the containing TCB from a generic item in a list. */
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xStateListItem ), pxNewTCB );
 8007842:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007844:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007846:	611a      	str	r2, [r3, #16]

	/* Event lists are always in priority order. */
	listSET_LIST_ITEM_VALUE( &( pxNewTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007848:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800784a:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 800784e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007850:	619a      	str	r2, [r3, #24]
	listSET_LIST_ITEM_OWNER( &( pxNewTCB->xEventListItem ), pxNewTCB );
 8007852:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007854:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8007856:	625a      	str	r2, [r3, #36]	; 0x24
	}
	#endif

	#if ( configUSE_TASK_NOTIFICATIONS == 1 )
	{
		pxNewTCB->ulNotifiedValue = 0;
 8007858:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800785a:	2200      	movs	r2, #0
 800785c:	f8c3 20a0 	str.w	r2, [r3, #160]	; 0xa0
		pxNewTCB->ucNotifyState = taskNOT_WAITING_NOTIFICATION;
 8007860:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007862:	2200      	movs	r2, #0
 8007864:	f883 20a4 	strb.w	r2, [r3, #164]	; 0xa4
	#if ( configUSE_NEWLIB_REENTRANT == 1 )
	{
		/* Initialise this task's Newlib reent structure.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		_REENT_INIT_PTR( ( &( pxNewTCB->xNewLib_reent ) ) );
 8007868:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800786a:	3354      	adds	r3, #84	; 0x54
 800786c:	224c      	movs	r2, #76	; 0x4c
 800786e:	2100      	movs	r1, #0
 8007870:	4618      	mov	r0, r3
 8007872:	f00f fb5c 	bl	8016f2e <memset>
 8007876:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007878:	4a0c      	ldr	r2, [pc, #48]	; (80078ac <prvInitialiseNewTask+0x140>)
 800787a:	659a      	str	r2, [r3, #88]	; 0x58
 800787c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800787e:	4a0c      	ldr	r2, [pc, #48]	; (80078b0 <prvInitialiseNewTask+0x144>)
 8007880:	65da      	str	r2, [r3, #92]	; 0x5c
 8007882:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007884:	4a0b      	ldr	r2, [pc, #44]	; (80078b4 <prvInitialiseNewTask+0x148>)
 8007886:	661a      	str	r2, [r3, #96]	; 0x60
			}
			#endif /* portSTACK_GROWTH */
		}
		#else /* portHAS_STACK_OVERFLOW_CHECKING */
		{
			pxNewTCB->pxTopOfStack = pxPortInitialiseStack( pxTopOfStack, pxTaskCode, pvParameters );
 8007888:	683a      	ldr	r2, [r7, #0]
 800788a:	68f9      	ldr	r1, [r7, #12]
 800788c:	69b8      	ldr	r0, [r7, #24]
 800788e:	f001 fa87 	bl	8008da0 <pxPortInitialiseStack>
 8007892:	4602      	mov	r2, r0
 8007894:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8007896:	601a      	str	r2, [r3, #0]
		}
		#endif /* portHAS_STACK_OVERFLOW_CHECKING */
	}
	#endif /* portUSING_MPU_WRAPPERS */

	if( pxCreatedTask != NULL )
 8007898:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800789a:	2b00      	cmp	r3, #0
 800789c:	d002      	beq.n	80078a4 <prvInitialiseNewTask+0x138>
	{
		/* Pass the handle out in an anonymous way.  The handle can be used to
		change the created task's priority, delete the created task, etc.*/
		*pxCreatedTask = ( TaskHandle_t ) pxNewTCB;
 800789e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80078a0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80078a2:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80078a4:	bf00      	nop
 80078a6:	3720      	adds	r7, #32
 80078a8:	46bd      	mov	sp, r7
 80078aa:	bd80      	pop	{r7, pc}
 80078ac:	2000f954 	.word	0x2000f954
 80078b0:	2000f9bc 	.word	0x2000f9bc
 80078b4:	2000fa24 	.word	0x2000fa24

080078b8 <prvAddNewTaskToReadyList>:
/*-----------------------------------------------------------*/

static void prvAddNewTaskToReadyList( TCB_t *pxNewTCB )
{
 80078b8:	b580      	push	{r7, lr}
 80078ba:	b082      	sub	sp, #8
 80078bc:	af00      	add	r7, sp, #0
 80078be:	6078      	str	r0, [r7, #4]
	/* Ensure interrupts don't access the task lists while the lists are being
	updated. */
	taskENTER_CRITICAL();
 80078c0:	f001 fb98 	bl	8008ff4 <vPortEnterCritical>
	{
		uxCurrentNumberOfTasks++;
 80078c4:	4b2d      	ldr	r3, [pc, #180]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	3301      	adds	r3, #1
 80078ca:	4a2c      	ldr	r2, [pc, #176]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078cc:	6013      	str	r3, [r2, #0]
		if( pxCurrentTCB == NULL )
 80078ce:	4b2c      	ldr	r3, [pc, #176]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	2b00      	cmp	r3, #0
 80078d4:	d109      	bne.n	80078ea <prvAddNewTaskToReadyList+0x32>
		{
			/* There are no other tasks, or all the other tasks are in
			the suspended state - make this the current task. */
			pxCurrentTCB = pxNewTCB;
 80078d6:	4a2a      	ldr	r2, [pc, #168]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078d8:	687b      	ldr	r3, [r7, #4]
 80078da:	6013      	str	r3, [r2, #0]

			if( uxCurrentNumberOfTasks == ( UBaseType_t ) 1 )
 80078dc:	4b27      	ldr	r3, [pc, #156]	; (800797c <prvAddNewTaskToReadyList+0xc4>)
 80078de:	681b      	ldr	r3, [r3, #0]
 80078e0:	2b01      	cmp	r3, #1
 80078e2:	d110      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				/* This is the first task to be created so do the preliminary
				initialisation required.  We will not recover if this call
				fails, but we will report the failure. */
				prvInitialiseTaskLists();
 80078e4:	f000 fc5e 	bl	80081a4 <prvInitialiseTaskLists>
 80078e8:	e00d      	b.n	8007906 <prvAddNewTaskToReadyList+0x4e>
		else
		{
			/* If the scheduler is not already running, make this task the
			current task if it is the highest priority task to be created
			so far. */
			if( xSchedulerRunning == pdFALSE )
 80078ea:	4b26      	ldr	r3, [pc, #152]	; (8007984 <prvAddNewTaskToReadyList+0xcc>)
 80078ec:	681b      	ldr	r3, [r3, #0]
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d109      	bne.n	8007906 <prvAddNewTaskToReadyList+0x4e>
			{
				if( pxCurrentTCB->uxPriority <= pxNewTCB->uxPriority )
 80078f2:	4b23      	ldr	r3, [pc, #140]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80078f8:	687b      	ldr	r3, [r7, #4]
 80078fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80078fc:	429a      	cmp	r2, r3
 80078fe:	d802      	bhi.n	8007906 <prvAddNewTaskToReadyList+0x4e>
				{
					pxCurrentTCB = pxNewTCB;
 8007900:	4a1f      	ldr	r2, [pc, #124]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007902:	687b      	ldr	r3, [r7, #4]
 8007904:	6013      	str	r3, [r2, #0]
			{
				mtCOVERAGE_TEST_MARKER();
			}
		}

		uxTaskNumber++;
 8007906:	4b20      	ldr	r3, [pc, #128]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007908:	681b      	ldr	r3, [r3, #0]
 800790a:	3301      	adds	r3, #1
 800790c:	4a1e      	ldr	r2, [pc, #120]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 800790e:	6013      	str	r3, [r2, #0]

		#if ( configUSE_TRACE_FACILITY == 1 )
		{
			/* Add a counter into the TCB for tracing only. */
			pxNewTCB->uxTCBNumber = uxTaskNumber;
 8007910:	4b1d      	ldr	r3, [pc, #116]	; (8007988 <prvAddNewTaskToReadyList+0xd0>)
 8007912:	681a      	ldr	r2, [r3, #0]
 8007914:	687b      	ldr	r3, [r7, #4]
 8007916:	645a      	str	r2, [r3, #68]	; 0x44
		}
		#endif /* configUSE_TRACE_FACILITY */
		traceTASK_CREATE( pxNewTCB );

		prvAddTaskToReadyList( pxNewTCB );
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800791c:	4b1b      	ldr	r3, [pc, #108]	; (800798c <prvAddNewTaskToReadyList+0xd4>)
 800791e:	681b      	ldr	r3, [r3, #0]
 8007920:	429a      	cmp	r2, r3
 8007922:	d903      	bls.n	800792c <prvAddNewTaskToReadyList+0x74>
 8007924:	687b      	ldr	r3, [r7, #4]
 8007926:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007928:	4a18      	ldr	r2, [pc, #96]	; (800798c <prvAddNewTaskToReadyList+0xd4>)
 800792a:	6013      	str	r3, [r2, #0]
 800792c:	687b      	ldr	r3, [r7, #4]
 800792e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007930:	4613      	mov	r3, r2
 8007932:	009b      	lsls	r3, r3, #2
 8007934:	4413      	add	r3, r2
 8007936:	009b      	lsls	r3, r3, #2
 8007938:	4a15      	ldr	r2, [pc, #84]	; (8007990 <prvAddNewTaskToReadyList+0xd8>)
 800793a:	441a      	add	r2, r3
 800793c:	687b      	ldr	r3, [r7, #4]
 800793e:	3304      	adds	r3, #4
 8007940:	4619      	mov	r1, r3
 8007942:	4610      	mov	r0, r2
 8007944:	f7fe fce9 	bl	800631a <vListInsertEnd>

		portSETUP_TCB( pxNewTCB );
	}
	taskEXIT_CRITICAL();
 8007948:	f001 fb84 	bl	8009054 <vPortExitCritical>

	if( xSchedulerRunning != pdFALSE )
 800794c:	4b0d      	ldr	r3, [pc, #52]	; (8007984 <prvAddNewTaskToReadyList+0xcc>)
 800794e:	681b      	ldr	r3, [r3, #0]
 8007950:	2b00      	cmp	r3, #0
 8007952:	d00e      	beq.n	8007972 <prvAddNewTaskToReadyList+0xba>
	{
		/* If the created task is of a higher priority than the current task
		then it should run now. */
		if( pxCurrentTCB->uxPriority < pxNewTCB->uxPriority )
 8007954:	4b0a      	ldr	r3, [pc, #40]	; (8007980 <prvAddNewTaskToReadyList+0xc8>)
 8007956:	681b      	ldr	r3, [r3, #0]
 8007958:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800795a:	687b      	ldr	r3, [r7, #4]
 800795c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800795e:	429a      	cmp	r2, r3
 8007960:	d207      	bcs.n	8007972 <prvAddNewTaskToReadyList+0xba>
		{
			taskYIELD_IF_USING_PREEMPTION();
 8007962:	4b0c      	ldr	r3, [pc, #48]	; (8007994 <prvAddNewTaskToReadyList+0xdc>)
 8007964:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007968:	601a      	str	r2, [r3, #0]
 800796a:	f3bf 8f4f 	dsb	sy
 800796e:	f3bf 8f6f 	isb	sy
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 8007972:	bf00      	nop
 8007974:	3708      	adds	r7, #8
 8007976:	46bd      	mov	sp, r7
 8007978:	bd80      	pop	{r7, pc}
 800797a:	bf00      	nop
 800797c:	20006150 	.word	0x20006150
 8007980:	20005c7c 	.word	0x20005c7c
 8007984:	2000615c 	.word	0x2000615c
 8007988:	2000616c 	.word	0x2000616c
 800798c:	20006158 	.word	0x20006158
 8007990:	20005c80 	.word	0x20005c80
 8007994:	e000ed04 	.word	0xe000ed04

08007998 <vTaskDelay>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelay == 1 )

	void vTaskDelay( const TickType_t xTicksToDelay )
	{
 8007998:	b580      	push	{r7, lr}
 800799a:	b084      	sub	sp, #16
 800799c:	af00      	add	r7, sp, #0
 800799e:	6078      	str	r0, [r7, #4]
	BaseType_t xAlreadyYielded = pdFALSE;
 80079a0:	2300      	movs	r3, #0
 80079a2:	60fb      	str	r3, [r7, #12]

		/* A delay time of zero just forces a reschedule. */
		if( xTicksToDelay > ( TickType_t ) 0U )
 80079a4:	687b      	ldr	r3, [r7, #4]
 80079a6:	2b00      	cmp	r3, #0
 80079a8:	d017      	beq.n	80079da <vTaskDelay+0x42>
		{
			configASSERT( uxSchedulerSuspended == 0 );
 80079aa:	4b13      	ldr	r3, [pc, #76]	; (80079f8 <vTaskDelay+0x60>)
 80079ac:	681b      	ldr	r3, [r3, #0]
 80079ae:	2b00      	cmp	r3, #0
 80079b0:	d00a      	beq.n	80079c8 <vTaskDelay+0x30>
	__asm volatile
 80079b2:	f04f 0350 	mov.w	r3, #80	; 0x50
 80079b6:	f383 8811 	msr	BASEPRI, r3
 80079ba:	f3bf 8f6f 	isb	sy
 80079be:	f3bf 8f4f 	dsb	sy
 80079c2:	60bb      	str	r3, [r7, #8]
}
 80079c4:	bf00      	nop
 80079c6:	e7fe      	b.n	80079c6 <vTaskDelay+0x2e>
			vTaskSuspendAll();
 80079c8:	f000 f88a 	bl	8007ae0 <vTaskSuspendAll>
				list or removed from the blocked list until the scheduler
				is resumed.

				This task cannot be in an event list as it is the currently
				executing task. */
				prvAddCurrentTaskToDelayedList( xTicksToDelay, pdFALSE );
 80079cc:	2100      	movs	r1, #0
 80079ce:	6878      	ldr	r0, [r7, #4]
 80079d0:	f000 fe44 	bl	800865c <prvAddCurrentTaskToDelayedList>
			}
			xAlreadyYielded = xTaskResumeAll();
 80079d4:	f000 f892 	bl	8007afc <xTaskResumeAll>
 80079d8:	60f8      	str	r0, [r7, #12]
			mtCOVERAGE_TEST_MARKER();
		}

		/* Force a reschedule if xTaskResumeAll has not already done so, we may
		have put ourselves to sleep. */
		if( xAlreadyYielded == pdFALSE )
 80079da:	68fb      	ldr	r3, [r7, #12]
 80079dc:	2b00      	cmp	r3, #0
 80079de:	d107      	bne.n	80079f0 <vTaskDelay+0x58>
		{
			portYIELD_WITHIN_API();
 80079e0:	4b06      	ldr	r3, [pc, #24]	; (80079fc <vTaskDelay+0x64>)
 80079e2:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 80079e6:	601a      	str	r2, [r3, #0]
 80079e8:	f3bf 8f4f 	dsb	sy
 80079ec:	f3bf 8f6f 	isb	sy
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 80079f0:	bf00      	nop
 80079f2:	3710      	adds	r7, #16
 80079f4:	46bd      	mov	sp, r7
 80079f6:	bd80      	pop	{r7, pc}
 80079f8:	20006178 	.word	0x20006178
 80079fc:	e000ed04 	.word	0xe000ed04

08007a00 <vTaskStartScheduler>:

#endif /* ( ( INCLUDE_xTaskResumeFromISR == 1 ) && ( INCLUDE_vTaskSuspend == 1 ) ) */
/*-----------------------------------------------------------*/

void vTaskStartScheduler( void )
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af04      	add	r7, sp, #16
BaseType_t xReturn;

	/* Add the idle task at the lowest priority. */
	#if( configSUPPORT_STATIC_ALLOCATION == 1 )
	{
		StaticTask_t *pxIdleTaskTCBBuffer = NULL;
 8007a06:	2300      	movs	r3, #0
 8007a08:	60bb      	str	r3, [r7, #8]
		StackType_t *pxIdleTaskStackBuffer = NULL;
 8007a0a:	2300      	movs	r3, #0
 8007a0c:	607b      	str	r3, [r7, #4]
		uint32_t ulIdleTaskStackSize;

		/* The Idle task is created using user provided RAM - obtain the
		address of the RAM then create the idle task. */
		vApplicationGetIdleTaskMemory( &pxIdleTaskTCBBuffer, &pxIdleTaskStackBuffer, &ulIdleTaskStackSize );
 8007a0e:	463a      	mov	r2, r7
 8007a10:	1d39      	adds	r1, r7, #4
 8007a12:	f107 0308 	add.w	r3, r7, #8
 8007a16:	4618      	mov	r0, r3
 8007a18:	f7fe fc1e 	bl	8006258 <vApplicationGetIdleTaskMemory>
		xIdleTaskHandle = xTaskCreateStatic(	prvIdleTask,
 8007a1c:	6839      	ldr	r1, [r7, #0]
 8007a1e:	687b      	ldr	r3, [r7, #4]
 8007a20:	68ba      	ldr	r2, [r7, #8]
 8007a22:	9202      	str	r2, [sp, #8]
 8007a24:	9301      	str	r3, [sp, #4]
 8007a26:	2300      	movs	r3, #0
 8007a28:	9300      	str	r3, [sp, #0]
 8007a2a:	2300      	movs	r3, #0
 8007a2c:	460a      	mov	r2, r1
 8007a2e:	4924      	ldr	r1, [pc, #144]	; (8007ac0 <vTaskStartScheduler+0xc0>)
 8007a30:	4824      	ldr	r0, [pc, #144]	; (8007ac4 <vTaskStartScheduler+0xc4>)
 8007a32:	f7ff fdf9 	bl	8007628 <xTaskCreateStatic>
 8007a36:	4603      	mov	r3, r0
 8007a38:	4a23      	ldr	r2, [pc, #140]	; (8007ac8 <vTaskStartScheduler+0xc8>)
 8007a3a:	6013      	str	r3, [r2, #0]
												( void * ) NULL, /*lint !e961.  The cast is not redundant for all compilers. */
												portPRIVILEGE_BIT, /* In effect ( tskIDLE_PRIORITY | portPRIVILEGE_BIT ), but tskIDLE_PRIORITY is zero. */
												pxIdleTaskStackBuffer,
												pxIdleTaskTCBBuffer ); /*lint !e961 MISRA exception, justified as it is not a redundant explicit cast to all supported compilers. */

		if( xIdleTaskHandle != NULL )
 8007a3c:	4b22      	ldr	r3, [pc, #136]	; (8007ac8 <vTaskStartScheduler+0xc8>)
 8007a3e:	681b      	ldr	r3, [r3, #0]
 8007a40:	2b00      	cmp	r3, #0
 8007a42:	d002      	beq.n	8007a4a <vTaskStartScheduler+0x4a>
		{
			xReturn = pdPASS;
 8007a44:	2301      	movs	r3, #1
 8007a46:	617b      	str	r3, [r7, #20]
 8007a48:	e001      	b.n	8007a4e <vTaskStartScheduler+0x4e>
		}
		else
		{
			xReturn = pdFAIL;
 8007a4a:	2300      	movs	r3, #0
 8007a4c:	617b      	str	r3, [r7, #20]
	}
	#endif /* configSUPPORT_STATIC_ALLOCATION */

	#if ( configUSE_TIMERS == 1 )
	{
		if( xReturn == pdPASS )
 8007a4e:	697b      	ldr	r3, [r7, #20]
 8007a50:	2b01      	cmp	r3, #1
 8007a52:	d102      	bne.n	8007a5a <vTaskStartScheduler+0x5a>
		{
			xReturn = xTimerCreateTimerTask();
 8007a54:	f000 fe56 	bl	8008704 <xTimerCreateTimerTask>
 8007a58:	6178      	str	r0, [r7, #20]
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif /* configUSE_TIMERS */

	if( xReturn == pdPASS )
 8007a5a:	697b      	ldr	r3, [r7, #20]
 8007a5c:	2b01      	cmp	r3, #1
 8007a5e:	d11b      	bne.n	8007a98 <vTaskStartScheduler+0x98>
	__asm volatile
 8007a60:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007a64:	f383 8811 	msr	BASEPRI, r3
 8007a68:	f3bf 8f6f 	isb	sy
 8007a6c:	f3bf 8f4f 	dsb	sy
 8007a70:	613b      	str	r3, [r7, #16]
}
 8007a72:	bf00      	nop
		{
			/* Switch Newlib's _impure_ptr variable to point to the _reent
			structure specific to the task that will run first.
			See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007a74:	4b15      	ldr	r3, [pc, #84]	; (8007acc <vTaskStartScheduler+0xcc>)
 8007a76:	681b      	ldr	r3, [r3, #0]
 8007a78:	3354      	adds	r3, #84	; 0x54
 8007a7a:	4a15      	ldr	r2, [pc, #84]	; (8007ad0 <vTaskStartScheduler+0xd0>)
 8007a7c:	6013      	str	r3, [r2, #0]
		}
		#endif /* configUSE_NEWLIB_REENTRANT */

		xNextTaskUnblockTime = portMAX_DELAY;
 8007a7e:	4b15      	ldr	r3, [pc, #84]	; (8007ad4 <vTaskStartScheduler+0xd4>)
 8007a80:	f04f 32ff 	mov.w	r2, #4294967295
 8007a84:	601a      	str	r2, [r3, #0]
		xSchedulerRunning = pdTRUE;
 8007a86:	4b14      	ldr	r3, [pc, #80]	; (8007ad8 <vTaskStartScheduler+0xd8>)
 8007a88:	2201      	movs	r2, #1
 8007a8a:	601a      	str	r2, [r3, #0]
		xTickCount = ( TickType_t ) configINITIAL_TICK_COUNT;
 8007a8c:	4b13      	ldr	r3, [pc, #76]	; (8007adc <vTaskStartScheduler+0xdc>)
 8007a8e:	2200      	movs	r2, #0
 8007a90:	601a      	str	r2, [r3, #0]

		traceTASK_SWITCHED_IN();

		/* Setting up the timer tick is hardware specific and thus in the
		portable interface. */
		if( xPortStartScheduler() != pdFALSE )
 8007a92:	f001 fa0d 	bl	8008eb0 <xPortStartScheduler>
	}

	/* Prevent compiler warnings if INCLUDE_xTaskGetIdleTaskHandle is set to 0,
	meaning xIdleTaskHandle is not used anywhere else. */
	( void ) xIdleTaskHandle;
}
 8007a96:	e00e      	b.n	8007ab6 <vTaskStartScheduler+0xb6>
		configASSERT( xReturn != errCOULD_NOT_ALLOCATE_REQUIRED_MEMORY );
 8007a98:	697b      	ldr	r3, [r7, #20]
 8007a9a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8007a9e:	d10a      	bne.n	8007ab6 <vTaskStartScheduler+0xb6>
	__asm volatile
 8007aa0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007aa4:	f383 8811 	msr	BASEPRI, r3
 8007aa8:	f3bf 8f6f 	isb	sy
 8007aac:	f3bf 8f4f 	dsb	sy
 8007ab0:	60fb      	str	r3, [r7, #12]
}
 8007ab2:	bf00      	nop
 8007ab4:	e7fe      	b.n	8007ab4 <vTaskStartScheduler+0xb4>
}
 8007ab6:	bf00      	nop
 8007ab8:	3718      	adds	r7, #24
 8007aba:	46bd      	mov	sp, r7
 8007abc:	bd80      	pop	{r7, pc}
 8007abe:	bf00      	nop
 8007ac0:	08018178 	.word	0x08018178
 8007ac4:	08008175 	.word	0x08008175
 8007ac8:	20006174 	.word	0x20006174
 8007acc:	20005c7c 	.word	0x20005c7c
 8007ad0:	20000088 	.word	0x20000088
 8007ad4:	20006170 	.word	0x20006170
 8007ad8:	2000615c 	.word	0x2000615c
 8007adc:	20006154 	.word	0x20006154

08007ae0 <vTaskSuspendAll>:
	vPortEndScheduler();
}
/*----------------------------------------------------------*/

void vTaskSuspendAll( void )
{
 8007ae0:	b480      	push	{r7}
 8007ae2:	af00      	add	r7, sp, #0
	do not otherwise exhibit real time behaviour. */
	portSOFTWARE_BARRIER();

	/* The scheduler is suspended if uxSchedulerSuspended is non-zero.  An increment
	is used to allow calls to vTaskSuspendAll() to nest. */
	++uxSchedulerSuspended;
 8007ae4:	4b04      	ldr	r3, [pc, #16]	; (8007af8 <vTaskSuspendAll+0x18>)
 8007ae6:	681b      	ldr	r3, [r3, #0]
 8007ae8:	3301      	adds	r3, #1
 8007aea:	4a03      	ldr	r2, [pc, #12]	; (8007af8 <vTaskSuspendAll+0x18>)
 8007aec:	6013      	str	r3, [r2, #0]

	/* Enforces ordering for ports and optimised compilers that may otherwise place
	the above increment elsewhere. */
	portMEMORY_BARRIER();
}
 8007aee:	bf00      	nop
 8007af0:	46bd      	mov	sp, r7
 8007af2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007af6:	4770      	bx	lr
 8007af8:	20006178 	.word	0x20006178

08007afc <xTaskResumeAll>:

#endif /* configUSE_TICKLESS_IDLE */
/*----------------------------------------------------------*/

BaseType_t xTaskResumeAll( void )
{
 8007afc:	b580      	push	{r7, lr}
 8007afe:	b084      	sub	sp, #16
 8007b00:	af00      	add	r7, sp, #0
TCB_t *pxTCB = NULL;
 8007b02:	2300      	movs	r3, #0
 8007b04:	60fb      	str	r3, [r7, #12]
BaseType_t xAlreadyYielded = pdFALSE;
 8007b06:	2300      	movs	r3, #0
 8007b08:	60bb      	str	r3, [r7, #8]

	/* If uxSchedulerSuspended is zero then this function does not match a
	previous call to vTaskSuspendAll(). */
	configASSERT( uxSchedulerSuspended );
 8007b0a:	4b42      	ldr	r3, [pc, #264]	; (8007c14 <xTaskResumeAll+0x118>)
 8007b0c:	681b      	ldr	r3, [r3, #0]
 8007b0e:	2b00      	cmp	r3, #0
 8007b10:	d10a      	bne.n	8007b28 <xTaskResumeAll+0x2c>
	__asm volatile
 8007b12:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007b16:	f383 8811 	msr	BASEPRI, r3
 8007b1a:	f3bf 8f6f 	isb	sy
 8007b1e:	f3bf 8f4f 	dsb	sy
 8007b22:	603b      	str	r3, [r7, #0]
}
 8007b24:	bf00      	nop
 8007b26:	e7fe      	b.n	8007b26 <xTaskResumeAll+0x2a>
	/* It is possible that an ISR caused a task to be removed from an event
	list while the scheduler was suspended.  If this was the case then the
	removed task will have been added to the xPendingReadyList.  Once the
	scheduler has been resumed it is safe to move all the pending ready
	tasks from this list into their appropriate ready list. */
	taskENTER_CRITICAL();
 8007b28:	f001 fa64 	bl	8008ff4 <vPortEnterCritical>
	{
		--uxSchedulerSuspended;
 8007b2c:	4b39      	ldr	r3, [pc, #228]	; (8007c14 <xTaskResumeAll+0x118>)
 8007b2e:	681b      	ldr	r3, [r3, #0]
 8007b30:	3b01      	subs	r3, #1
 8007b32:	4a38      	ldr	r2, [pc, #224]	; (8007c14 <xTaskResumeAll+0x118>)
 8007b34:	6013      	str	r3, [r2, #0]

		if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007b36:	4b37      	ldr	r3, [pc, #220]	; (8007c14 <xTaskResumeAll+0x118>)
 8007b38:	681b      	ldr	r3, [r3, #0]
 8007b3a:	2b00      	cmp	r3, #0
 8007b3c:	d162      	bne.n	8007c04 <xTaskResumeAll+0x108>
		{
			if( uxCurrentNumberOfTasks > ( UBaseType_t ) 0U )
 8007b3e:	4b36      	ldr	r3, [pc, #216]	; (8007c18 <xTaskResumeAll+0x11c>)
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d05e      	beq.n	8007c04 <xTaskResumeAll+0x108>
			{
				/* Move any readied tasks from the pending list into the
				appropriate ready list. */
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007b46:	e02f      	b.n	8007ba8 <xTaskResumeAll+0xac>
				{
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xPendingReadyList ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007b48:	4b34      	ldr	r3, [pc, #208]	; (8007c1c <xTaskResumeAll+0x120>)
 8007b4a:	68db      	ldr	r3, [r3, #12]
 8007b4c:	68db      	ldr	r3, [r3, #12]
 8007b4e:	60fb      	str	r3, [r7, #12]
					( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007b50:	68fb      	ldr	r3, [r7, #12]
 8007b52:	3318      	adds	r3, #24
 8007b54:	4618      	mov	r0, r3
 8007b56:	f7fe fc3d 	bl	80063d4 <uxListRemove>
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007b5a:	68fb      	ldr	r3, [r7, #12]
 8007b5c:	3304      	adds	r3, #4
 8007b5e:	4618      	mov	r0, r3
 8007b60:	f7fe fc38 	bl	80063d4 <uxListRemove>
					prvAddTaskToReadyList( pxTCB );
 8007b64:	68fb      	ldr	r3, [r7, #12]
 8007b66:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b68:	4b2d      	ldr	r3, [pc, #180]	; (8007c20 <xTaskResumeAll+0x124>)
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	429a      	cmp	r2, r3
 8007b6e:	d903      	bls.n	8007b78 <xTaskResumeAll+0x7c>
 8007b70:	68fb      	ldr	r3, [r7, #12]
 8007b72:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b74:	4a2a      	ldr	r2, [pc, #168]	; (8007c20 <xTaskResumeAll+0x124>)
 8007b76:	6013      	str	r3, [r2, #0]
 8007b78:	68fb      	ldr	r3, [r7, #12]
 8007b7a:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b7c:	4613      	mov	r3, r2
 8007b7e:	009b      	lsls	r3, r3, #2
 8007b80:	4413      	add	r3, r2
 8007b82:	009b      	lsls	r3, r3, #2
 8007b84:	4a27      	ldr	r2, [pc, #156]	; (8007c24 <xTaskResumeAll+0x128>)
 8007b86:	441a      	add	r2, r3
 8007b88:	68fb      	ldr	r3, [r7, #12]
 8007b8a:	3304      	adds	r3, #4
 8007b8c:	4619      	mov	r1, r3
 8007b8e:	4610      	mov	r0, r2
 8007b90:	f7fe fbc3 	bl	800631a <vListInsertEnd>

					/* If the moved task has a priority higher than the current
					task then a yield must be performed. */
					if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007b98:	4b23      	ldr	r3, [pc, #140]	; (8007c28 <xTaskResumeAll+0x12c>)
 8007b9a:	681b      	ldr	r3, [r3, #0]
 8007b9c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007b9e:	429a      	cmp	r2, r3
 8007ba0:	d302      	bcc.n	8007ba8 <xTaskResumeAll+0xac>
					{
						xYieldPending = pdTRUE;
 8007ba2:	4b22      	ldr	r3, [pc, #136]	; (8007c2c <xTaskResumeAll+0x130>)
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	601a      	str	r2, [r3, #0]
				while( listLIST_IS_EMPTY( &xPendingReadyList ) == pdFALSE )
 8007ba8:	4b1c      	ldr	r3, [pc, #112]	; (8007c1c <xTaskResumeAll+0x120>)
 8007baa:	681b      	ldr	r3, [r3, #0]
 8007bac:	2b00      	cmp	r3, #0
 8007bae:	d1cb      	bne.n	8007b48 <xTaskResumeAll+0x4c>
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( pxTCB != NULL )
 8007bb0:	68fb      	ldr	r3, [r7, #12]
 8007bb2:	2b00      	cmp	r3, #0
 8007bb4:	d001      	beq.n	8007bba <xTaskResumeAll+0xbe>
					which may have prevented the next unblock time from being
					re-calculated, in which case re-calculate it now.  Mainly
					important for low power tickless implementations, where
					this can prevent an unnecessary exit from low power
					state. */
					prvResetNextTaskUnblockTime();
 8007bb6:	f000 fb97 	bl	80082e8 <prvResetNextTaskUnblockTime>
				/* If any ticks occurred while the scheduler was suspended then
				they should be processed now.  This ensures the tick count does
				not	slip, and that any delayed tasks are resumed at the correct
				time. */
				{
					TickType_t xPendedCounts = xPendedTicks; /* Non-volatile copy. */
 8007bba:	4b1d      	ldr	r3, [pc, #116]	; (8007c30 <xTaskResumeAll+0x134>)
 8007bbc:	681b      	ldr	r3, [r3, #0]
 8007bbe:	607b      	str	r3, [r7, #4]

					if( xPendedCounts > ( TickType_t ) 0U )
 8007bc0:	687b      	ldr	r3, [r7, #4]
 8007bc2:	2b00      	cmp	r3, #0
 8007bc4:	d010      	beq.n	8007be8 <xTaskResumeAll+0xec>
					{
						do
						{
							if( xTaskIncrementTick() != pdFALSE )
 8007bc6:	f000 f859 	bl	8007c7c <xTaskIncrementTick>
 8007bca:	4603      	mov	r3, r0
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	d002      	beq.n	8007bd6 <xTaskResumeAll+0xda>
							{
								xYieldPending = pdTRUE;
 8007bd0:	4b16      	ldr	r3, [pc, #88]	; (8007c2c <xTaskResumeAll+0x130>)
 8007bd2:	2201      	movs	r2, #1
 8007bd4:	601a      	str	r2, [r3, #0]
							}
							else
							{
								mtCOVERAGE_TEST_MARKER();
							}
							--xPendedCounts;
 8007bd6:	687b      	ldr	r3, [r7, #4]
 8007bd8:	3b01      	subs	r3, #1
 8007bda:	607b      	str	r3, [r7, #4]
						} while( xPendedCounts > ( TickType_t ) 0U );
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	2b00      	cmp	r3, #0
 8007be0:	d1f1      	bne.n	8007bc6 <xTaskResumeAll+0xca>

						xPendedTicks = 0;
 8007be2:	4b13      	ldr	r3, [pc, #76]	; (8007c30 <xTaskResumeAll+0x134>)
 8007be4:	2200      	movs	r2, #0
 8007be6:	601a      	str	r2, [r3, #0]
					{
						mtCOVERAGE_TEST_MARKER();
					}
				}

				if( xYieldPending != pdFALSE )
 8007be8:	4b10      	ldr	r3, [pc, #64]	; (8007c2c <xTaskResumeAll+0x130>)
 8007bea:	681b      	ldr	r3, [r3, #0]
 8007bec:	2b00      	cmp	r3, #0
 8007bee:	d009      	beq.n	8007c04 <xTaskResumeAll+0x108>
				{
					#if( configUSE_PREEMPTION != 0 )
					{
						xAlreadyYielded = pdTRUE;
 8007bf0:	2301      	movs	r3, #1
 8007bf2:	60bb      	str	r3, [r7, #8]
					}
					#endif
					taskYIELD_IF_USING_PREEMPTION();
 8007bf4:	4b0f      	ldr	r3, [pc, #60]	; (8007c34 <xTaskResumeAll+0x138>)
 8007bf6:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8007bfa:	601a      	str	r2, [r3, #0]
 8007bfc:	f3bf 8f4f 	dsb	sy
 8007c00:	f3bf 8f6f 	isb	sy
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8007c04:	f001 fa26 	bl	8009054 <vPortExitCritical>

	return xAlreadyYielded;
 8007c08:	68bb      	ldr	r3, [r7, #8]
}
 8007c0a:	4618      	mov	r0, r3
 8007c0c:	3710      	adds	r7, #16
 8007c0e:	46bd      	mov	sp, r7
 8007c10:	bd80      	pop	{r7, pc}
 8007c12:	bf00      	nop
 8007c14:	20006178 	.word	0x20006178
 8007c18:	20006150 	.word	0x20006150
 8007c1c:	20006110 	.word	0x20006110
 8007c20:	20006158 	.word	0x20006158
 8007c24:	20005c80 	.word	0x20005c80
 8007c28:	20005c7c 	.word	0x20005c7c
 8007c2c:	20006164 	.word	0x20006164
 8007c30:	20006160 	.word	0x20006160
 8007c34:	e000ed04 	.word	0xe000ed04

08007c38 <xTaskGetTickCount>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCount( void )
{
 8007c38:	b480      	push	{r7}
 8007c3a:	b083      	sub	sp, #12
 8007c3c:	af00      	add	r7, sp, #0
TickType_t xTicks;

	/* Critical section required if running on a 16 bit processor. */
	portTICK_TYPE_ENTER_CRITICAL();
	{
		xTicks = xTickCount;
 8007c3e:	4b05      	ldr	r3, [pc, #20]	; (8007c54 <xTaskGetTickCount+0x1c>)
 8007c40:	681b      	ldr	r3, [r3, #0]
 8007c42:	607b      	str	r3, [r7, #4]
	}
	portTICK_TYPE_EXIT_CRITICAL();

	return xTicks;
 8007c44:	687b      	ldr	r3, [r7, #4]
}
 8007c46:	4618      	mov	r0, r3
 8007c48:	370c      	adds	r7, #12
 8007c4a:	46bd      	mov	sp, r7
 8007c4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c50:	4770      	bx	lr
 8007c52:	bf00      	nop
 8007c54:	20006154 	.word	0x20006154

08007c58 <xTaskGetTickCountFromISR>:
/*-----------------------------------------------------------*/

TickType_t xTaskGetTickCountFromISR( void )
{
 8007c58:	b580      	push	{r7, lr}
 8007c5a:	b082      	sub	sp, #8
 8007c5c:	af00      	add	r7, sp, #0
	that have been assigned a priority at or (logically) below the maximum
	system call	interrupt priority.  FreeRTOS maintains a separate interrupt
	safe API to ensure interrupt entry is as fast and as simple as possible.
	More information (albeit Cortex-M specific) is provided on the following
	link: https://www.freertos.org/RTOS-Cortex-M3-M4.html */
	portASSERT_IF_INTERRUPT_PRIORITY_INVALID();
 8007c5e:	f001 faab 	bl	80091b8 <vPortValidateInterruptPriority>

	uxSavedInterruptStatus = portTICK_TYPE_SET_INTERRUPT_MASK_FROM_ISR();
 8007c62:	2300      	movs	r3, #0
 8007c64:	607b      	str	r3, [r7, #4]
	{
		xReturn = xTickCount;
 8007c66:	4b04      	ldr	r3, [pc, #16]	; (8007c78 <xTaskGetTickCountFromISR+0x20>)
 8007c68:	681b      	ldr	r3, [r3, #0]
 8007c6a:	603b      	str	r3, [r7, #0]
	}
	portTICK_TYPE_CLEAR_INTERRUPT_MASK_FROM_ISR( uxSavedInterruptStatus );

	return xReturn;
 8007c6c:	683b      	ldr	r3, [r7, #0]
}
 8007c6e:	4618      	mov	r0, r3
 8007c70:	3708      	adds	r7, #8
 8007c72:	46bd      	mov	sp, r7
 8007c74:	bd80      	pop	{r7, pc}
 8007c76:	bf00      	nop
 8007c78:	20006154 	.word	0x20006154

08007c7c <xTaskIncrementTick>:

#endif /* INCLUDE_xTaskAbortDelay */
/*----------------------------------------------------------*/

BaseType_t xTaskIncrementTick( void )
{
 8007c7c:	b580      	push	{r7, lr}
 8007c7e:	b086      	sub	sp, #24
 8007c80:	af00      	add	r7, sp, #0
TCB_t * pxTCB;
TickType_t xItemValue;
BaseType_t xSwitchRequired = pdFALSE;
 8007c82:	2300      	movs	r3, #0
 8007c84:	617b      	str	r3, [r7, #20]

	/* Called by the portable layer each time a tick interrupt occurs.
	Increments the tick then checks to see if the new tick value will cause any
	tasks to be unblocked. */
	traceTASK_INCREMENT_TICK( xTickCount );
	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007c86:	4b4f      	ldr	r3, [pc, #316]	; (8007dc4 <xTaskIncrementTick+0x148>)
 8007c88:	681b      	ldr	r3, [r3, #0]
 8007c8a:	2b00      	cmp	r3, #0
 8007c8c:	f040 808f 	bne.w	8007dae <xTaskIncrementTick+0x132>
	{
		/* Minor optimisation.  The tick count cannot change in this
		block. */
		const TickType_t xConstTickCount = xTickCount + ( TickType_t ) 1;
 8007c90:	4b4d      	ldr	r3, [pc, #308]	; (8007dc8 <xTaskIncrementTick+0x14c>)
 8007c92:	681b      	ldr	r3, [r3, #0]
 8007c94:	3301      	adds	r3, #1
 8007c96:	613b      	str	r3, [r7, #16]

		/* Increment the RTOS tick, switching the delayed and overflowed
		delayed lists if it wraps to 0. */
		xTickCount = xConstTickCount;
 8007c98:	4a4b      	ldr	r2, [pc, #300]	; (8007dc8 <xTaskIncrementTick+0x14c>)
 8007c9a:	693b      	ldr	r3, [r7, #16]
 8007c9c:	6013      	str	r3, [r2, #0]

		if( xConstTickCount == ( TickType_t ) 0U ) /*lint !e774 'if' does not always evaluate to false as it is looking for an overflow. */
 8007c9e:	693b      	ldr	r3, [r7, #16]
 8007ca0:	2b00      	cmp	r3, #0
 8007ca2:	d120      	bne.n	8007ce6 <xTaskIncrementTick+0x6a>
		{
			taskSWITCH_DELAYED_LISTS();
 8007ca4:	4b49      	ldr	r3, [pc, #292]	; (8007dcc <xTaskIncrementTick+0x150>)
 8007ca6:	681b      	ldr	r3, [r3, #0]
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	2b00      	cmp	r3, #0
 8007cac:	d00a      	beq.n	8007cc4 <xTaskIncrementTick+0x48>
	__asm volatile
 8007cae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007cb2:	f383 8811 	msr	BASEPRI, r3
 8007cb6:	f3bf 8f6f 	isb	sy
 8007cba:	f3bf 8f4f 	dsb	sy
 8007cbe:	603b      	str	r3, [r7, #0]
}
 8007cc0:	bf00      	nop
 8007cc2:	e7fe      	b.n	8007cc2 <xTaskIncrementTick+0x46>
 8007cc4:	4b41      	ldr	r3, [pc, #260]	; (8007dcc <xTaskIncrementTick+0x150>)
 8007cc6:	681b      	ldr	r3, [r3, #0]
 8007cc8:	60fb      	str	r3, [r7, #12]
 8007cca:	4b41      	ldr	r3, [pc, #260]	; (8007dd0 <xTaskIncrementTick+0x154>)
 8007ccc:	681b      	ldr	r3, [r3, #0]
 8007cce:	4a3f      	ldr	r2, [pc, #252]	; (8007dcc <xTaskIncrementTick+0x150>)
 8007cd0:	6013      	str	r3, [r2, #0]
 8007cd2:	4a3f      	ldr	r2, [pc, #252]	; (8007dd0 <xTaskIncrementTick+0x154>)
 8007cd4:	68fb      	ldr	r3, [r7, #12]
 8007cd6:	6013      	str	r3, [r2, #0]
 8007cd8:	4b3e      	ldr	r3, [pc, #248]	; (8007dd4 <xTaskIncrementTick+0x158>)
 8007cda:	681b      	ldr	r3, [r3, #0]
 8007cdc:	3301      	adds	r3, #1
 8007cde:	4a3d      	ldr	r2, [pc, #244]	; (8007dd4 <xTaskIncrementTick+0x158>)
 8007ce0:	6013      	str	r3, [r2, #0]
 8007ce2:	f000 fb01 	bl	80082e8 <prvResetNextTaskUnblockTime>

		/* See if this tick has made a timeout expire.  Tasks are stored in
		the	queue in the order of their wake time - meaning once one task
		has been found whose block time has not expired there is no need to
		look any further down the list. */
		if( xConstTickCount >= xNextTaskUnblockTime )
 8007ce6:	4b3c      	ldr	r3, [pc, #240]	; (8007dd8 <xTaskIncrementTick+0x15c>)
 8007ce8:	681b      	ldr	r3, [r3, #0]
 8007cea:	693a      	ldr	r2, [r7, #16]
 8007cec:	429a      	cmp	r2, r3
 8007cee:	d349      	bcc.n	8007d84 <xTaskIncrementTick+0x108>
		{
			for( ;; )
			{
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007cf0:	4b36      	ldr	r3, [pc, #216]	; (8007dcc <xTaskIncrementTick+0x150>)
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	681b      	ldr	r3, [r3, #0]
 8007cf6:	2b00      	cmp	r3, #0
 8007cf8:	d104      	bne.n	8007d04 <xTaskIncrementTick+0x88>
					/* The delayed list is empty.  Set xNextTaskUnblockTime
					to the maximum possible value so it is extremely
					unlikely that the
					if( xTickCount >= xNextTaskUnblockTime ) test will pass
					next time through. */
					xNextTaskUnblockTime = portMAX_DELAY; /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8007cfa:	4b37      	ldr	r3, [pc, #220]	; (8007dd8 <xTaskIncrementTick+0x15c>)
 8007cfc:	f04f 32ff 	mov.w	r2, #4294967295
 8007d00:	601a      	str	r2, [r3, #0]
					break;
 8007d02:	e03f      	b.n	8007d84 <xTaskIncrementTick+0x108>
				{
					/* The delayed list is not empty, get the value of the
					item at the head of the delayed list.  This is the time
					at which the task at the head of the delayed list must
					be removed from the Blocked state. */
					pxTCB = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007d04:	4b31      	ldr	r3, [pc, #196]	; (8007dcc <xTaskIncrementTick+0x150>)
 8007d06:	681b      	ldr	r3, [r3, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	68db      	ldr	r3, [r3, #12]
 8007d0c:	60bb      	str	r3, [r7, #8]
					xItemValue = listGET_LIST_ITEM_VALUE( &( pxTCB->xStateListItem ) );
 8007d0e:	68bb      	ldr	r3, [r7, #8]
 8007d10:	685b      	ldr	r3, [r3, #4]
 8007d12:	607b      	str	r3, [r7, #4]

					if( xConstTickCount < xItemValue )
 8007d14:	693a      	ldr	r2, [r7, #16]
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	429a      	cmp	r2, r3
 8007d1a:	d203      	bcs.n	8007d24 <xTaskIncrementTick+0xa8>
						/* It is not time to unblock this item yet, but the
						item value is the time at which the task at the head
						of the blocked list must be removed from the Blocked
						state -	so record the item value in
						xNextTaskUnblockTime. */
						xNextTaskUnblockTime = xItemValue;
 8007d1c:	4a2e      	ldr	r2, [pc, #184]	; (8007dd8 <xTaskIncrementTick+0x15c>)
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	6013      	str	r3, [r2, #0]
						break; /*lint !e9011 Code structure here is deedmed easier to understand with multiple breaks. */
 8007d22:	e02f      	b.n	8007d84 <xTaskIncrementTick+0x108>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* It is time to remove the item from the Blocked state. */
					( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8007d24:	68bb      	ldr	r3, [r7, #8]
 8007d26:	3304      	adds	r3, #4
 8007d28:	4618      	mov	r0, r3
 8007d2a:	f7fe fb53 	bl	80063d4 <uxListRemove>

					/* Is the task waiting on an event also?  If so remove
					it from the event list. */
					if( listLIST_ITEM_CONTAINER( &( pxTCB->xEventListItem ) ) != NULL )
 8007d2e:	68bb      	ldr	r3, [r7, #8]
 8007d30:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8007d32:	2b00      	cmp	r3, #0
 8007d34:	d004      	beq.n	8007d40 <xTaskIncrementTick+0xc4>
					{
						( void ) uxListRemove( &( pxTCB->xEventListItem ) );
 8007d36:	68bb      	ldr	r3, [r7, #8]
 8007d38:	3318      	adds	r3, #24
 8007d3a:	4618      	mov	r0, r3
 8007d3c:	f7fe fb4a 	bl	80063d4 <uxListRemove>
						mtCOVERAGE_TEST_MARKER();
					}

					/* Place the unblocked task into the appropriate ready
					list. */
					prvAddTaskToReadyList( pxTCB );
 8007d40:	68bb      	ldr	r3, [r7, #8]
 8007d42:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d44:	4b25      	ldr	r3, [pc, #148]	; (8007ddc <xTaskIncrementTick+0x160>)
 8007d46:	681b      	ldr	r3, [r3, #0]
 8007d48:	429a      	cmp	r2, r3
 8007d4a:	d903      	bls.n	8007d54 <xTaskIncrementTick+0xd8>
 8007d4c:	68bb      	ldr	r3, [r7, #8]
 8007d4e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d50:	4a22      	ldr	r2, [pc, #136]	; (8007ddc <xTaskIncrementTick+0x160>)
 8007d52:	6013      	str	r3, [r2, #0]
 8007d54:	68bb      	ldr	r3, [r7, #8]
 8007d56:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d58:	4613      	mov	r3, r2
 8007d5a:	009b      	lsls	r3, r3, #2
 8007d5c:	4413      	add	r3, r2
 8007d5e:	009b      	lsls	r3, r3, #2
 8007d60:	4a1f      	ldr	r2, [pc, #124]	; (8007de0 <xTaskIncrementTick+0x164>)
 8007d62:	441a      	add	r2, r3
 8007d64:	68bb      	ldr	r3, [r7, #8]
 8007d66:	3304      	adds	r3, #4
 8007d68:	4619      	mov	r1, r3
 8007d6a:	4610      	mov	r0, r2
 8007d6c:	f7fe fad5 	bl	800631a <vListInsertEnd>
					{
						/* Preemption is on, but a context switch should
						only be performed if the unblocked task has a
						priority that is equal to or higher than the
						currently executing task. */
						if( pxTCB->uxPriority >= pxCurrentTCB->uxPriority )
 8007d70:	68bb      	ldr	r3, [r7, #8]
 8007d72:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d74:	4b1b      	ldr	r3, [pc, #108]	; (8007de4 <xTaskIncrementTick+0x168>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007d7a:	429a      	cmp	r2, r3
 8007d7c:	d3b8      	bcc.n	8007cf0 <xTaskIncrementTick+0x74>
						{
							xSwitchRequired = pdTRUE;
 8007d7e:	2301      	movs	r3, #1
 8007d80:	617b      	str	r3, [r7, #20]
				if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 8007d82:	e7b5      	b.n	8007cf0 <xTaskIncrementTick+0x74>
		/* Tasks of equal priority to the currently running task will share
		processing time (time slice) if preemption is on, and the application
		writer has not explicitly turned time slicing off. */
		#if ( ( configUSE_PREEMPTION == 1 ) && ( configUSE_TIME_SLICING == 1 ) )
		{
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ pxCurrentTCB->uxPriority ] ) ) > ( UBaseType_t ) 1 )
 8007d84:	4b17      	ldr	r3, [pc, #92]	; (8007de4 <xTaskIncrementTick+0x168>)
 8007d86:	681b      	ldr	r3, [r3, #0]
 8007d88:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007d8a:	4915      	ldr	r1, [pc, #84]	; (8007de0 <xTaskIncrementTick+0x164>)
 8007d8c:	4613      	mov	r3, r2
 8007d8e:	009b      	lsls	r3, r3, #2
 8007d90:	4413      	add	r3, r2
 8007d92:	009b      	lsls	r3, r3, #2
 8007d94:	440b      	add	r3, r1
 8007d96:	681b      	ldr	r3, [r3, #0]
 8007d98:	2b01      	cmp	r3, #1
 8007d9a:	d901      	bls.n	8007da0 <xTaskIncrementTick+0x124>
			{
				xSwitchRequired = pdTRUE;
 8007d9c:	2301      	movs	r3, #1
 8007d9e:	617b      	str	r3, [r7, #20]
		}
		#endif /* configUSE_TICK_HOOK */

		#if ( configUSE_PREEMPTION == 1 )
		{
			if( xYieldPending != pdFALSE )
 8007da0:	4b11      	ldr	r3, [pc, #68]	; (8007de8 <xTaskIncrementTick+0x16c>)
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	2b00      	cmp	r3, #0
 8007da6:	d007      	beq.n	8007db8 <xTaskIncrementTick+0x13c>
			{
				xSwitchRequired = pdTRUE;
 8007da8:	2301      	movs	r3, #1
 8007daa:	617b      	str	r3, [r7, #20]
 8007dac:	e004      	b.n	8007db8 <xTaskIncrementTick+0x13c>
		}
		#endif /* configUSE_PREEMPTION */
	}
	else
	{
		++xPendedTicks;
 8007dae:	4b0f      	ldr	r3, [pc, #60]	; (8007dec <xTaskIncrementTick+0x170>)
 8007db0:	681b      	ldr	r3, [r3, #0]
 8007db2:	3301      	adds	r3, #1
 8007db4:	4a0d      	ldr	r2, [pc, #52]	; (8007dec <xTaskIncrementTick+0x170>)
 8007db6:	6013      	str	r3, [r2, #0]
			vApplicationTickHook();
		}
		#endif
	}

	return xSwitchRequired;
 8007db8:	697b      	ldr	r3, [r7, #20]
}
 8007dba:	4618      	mov	r0, r3
 8007dbc:	3718      	adds	r7, #24
 8007dbe:	46bd      	mov	sp, r7
 8007dc0:	bd80      	pop	{r7, pc}
 8007dc2:	bf00      	nop
 8007dc4:	20006178 	.word	0x20006178
 8007dc8:	20006154 	.word	0x20006154
 8007dcc:	20006108 	.word	0x20006108
 8007dd0:	2000610c 	.word	0x2000610c
 8007dd4:	20006168 	.word	0x20006168
 8007dd8:	20006170 	.word	0x20006170
 8007ddc:	20006158 	.word	0x20006158
 8007de0:	20005c80 	.word	0x20005c80
 8007de4:	20005c7c 	.word	0x20005c7c
 8007de8:	20006164 	.word	0x20006164
 8007dec:	20006160 	.word	0x20006160

08007df0 <vTaskSwitchContext>:

#endif /* configUSE_APPLICATION_TASK_TAG */
/*-----------------------------------------------------------*/

void vTaskSwitchContext( void )
{
 8007df0:	b580      	push	{r7, lr}
 8007df2:	b086      	sub	sp, #24
 8007df4:	af00      	add	r7, sp, #0
	if( uxSchedulerSuspended != ( UBaseType_t ) pdFALSE )
 8007df6:	4b3d      	ldr	r3, [pc, #244]	; (8007eec <vTaskSwitchContext+0xfc>)
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	2b00      	cmp	r3, #0
 8007dfc:	d003      	beq.n	8007e06 <vTaskSwitchContext+0x16>
	{
		/* The scheduler is currently suspended - do not allow a context
		switch. */
		xYieldPending = pdTRUE;
 8007dfe:	4b3c      	ldr	r3, [pc, #240]	; (8007ef0 <vTaskSwitchContext+0x100>)
 8007e00:	2201      	movs	r2, #1
 8007e02:	601a      	str	r2, [r3, #0]
			for additional information. */
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
		}
		#endif /* configUSE_NEWLIB_REENTRANT */
	}
}
 8007e04:	e06d      	b.n	8007ee2 <vTaskSwitchContext+0xf2>
		xYieldPending = pdFALSE;
 8007e06:	4b3a      	ldr	r3, [pc, #232]	; (8007ef0 <vTaskSwitchContext+0x100>)
 8007e08:	2200      	movs	r2, #0
 8007e0a:	601a      	str	r2, [r3, #0]
		taskCHECK_FOR_STACK_OVERFLOW();
 8007e0c:	4b39      	ldr	r3, [pc, #228]	; (8007ef4 <vTaskSwitchContext+0x104>)
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007e12:	613b      	str	r3, [r7, #16]
 8007e14:	f04f 33a5 	mov.w	r3, #2779096485	; 0xa5a5a5a5
 8007e18:	60fb      	str	r3, [r7, #12]
 8007e1a:	693b      	ldr	r3, [r7, #16]
 8007e1c:	681b      	ldr	r3, [r3, #0]
 8007e1e:	68fa      	ldr	r2, [r7, #12]
 8007e20:	429a      	cmp	r2, r3
 8007e22:	d111      	bne.n	8007e48 <vTaskSwitchContext+0x58>
 8007e24:	693b      	ldr	r3, [r7, #16]
 8007e26:	3304      	adds	r3, #4
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	68fa      	ldr	r2, [r7, #12]
 8007e2c:	429a      	cmp	r2, r3
 8007e2e:	d10b      	bne.n	8007e48 <vTaskSwitchContext+0x58>
 8007e30:	693b      	ldr	r3, [r7, #16]
 8007e32:	3308      	adds	r3, #8
 8007e34:	681b      	ldr	r3, [r3, #0]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	429a      	cmp	r2, r3
 8007e3a:	d105      	bne.n	8007e48 <vTaskSwitchContext+0x58>
 8007e3c:	693b      	ldr	r3, [r7, #16]
 8007e3e:	330c      	adds	r3, #12
 8007e40:	681b      	ldr	r3, [r3, #0]
 8007e42:	68fa      	ldr	r2, [r7, #12]
 8007e44:	429a      	cmp	r2, r3
 8007e46:	d008      	beq.n	8007e5a <vTaskSwitchContext+0x6a>
 8007e48:	4b2a      	ldr	r3, [pc, #168]	; (8007ef4 <vTaskSwitchContext+0x104>)
 8007e4a:	681a      	ldr	r2, [r3, #0]
 8007e4c:	4b29      	ldr	r3, [pc, #164]	; (8007ef4 <vTaskSwitchContext+0x104>)
 8007e4e:	681b      	ldr	r3, [r3, #0]
 8007e50:	3334      	adds	r3, #52	; 0x34
 8007e52:	4619      	mov	r1, r3
 8007e54:	4610      	mov	r0, r2
 8007e56:	f7f8 fbb1 	bl	80005bc <vApplicationStackOverflowHook>
		taskSELECT_HIGHEST_PRIORITY_TASK(); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007e5a:	4b27      	ldr	r3, [pc, #156]	; (8007ef8 <vTaskSwitchContext+0x108>)
 8007e5c:	681b      	ldr	r3, [r3, #0]
 8007e5e:	617b      	str	r3, [r7, #20]
 8007e60:	e010      	b.n	8007e84 <vTaskSwitchContext+0x94>
 8007e62:	697b      	ldr	r3, [r7, #20]
 8007e64:	2b00      	cmp	r3, #0
 8007e66:	d10a      	bne.n	8007e7e <vTaskSwitchContext+0x8e>
	__asm volatile
 8007e68:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007e6c:	f383 8811 	msr	BASEPRI, r3
 8007e70:	f3bf 8f6f 	isb	sy
 8007e74:	f3bf 8f4f 	dsb	sy
 8007e78:	607b      	str	r3, [r7, #4]
}
 8007e7a:	bf00      	nop
 8007e7c:	e7fe      	b.n	8007e7c <vTaskSwitchContext+0x8c>
 8007e7e:	697b      	ldr	r3, [r7, #20]
 8007e80:	3b01      	subs	r3, #1
 8007e82:	617b      	str	r3, [r7, #20]
 8007e84:	491d      	ldr	r1, [pc, #116]	; (8007efc <vTaskSwitchContext+0x10c>)
 8007e86:	697a      	ldr	r2, [r7, #20]
 8007e88:	4613      	mov	r3, r2
 8007e8a:	009b      	lsls	r3, r3, #2
 8007e8c:	4413      	add	r3, r2
 8007e8e:	009b      	lsls	r3, r3, #2
 8007e90:	440b      	add	r3, r1
 8007e92:	681b      	ldr	r3, [r3, #0]
 8007e94:	2b00      	cmp	r3, #0
 8007e96:	d0e4      	beq.n	8007e62 <vTaskSwitchContext+0x72>
 8007e98:	697a      	ldr	r2, [r7, #20]
 8007e9a:	4613      	mov	r3, r2
 8007e9c:	009b      	lsls	r3, r3, #2
 8007e9e:	4413      	add	r3, r2
 8007ea0:	009b      	lsls	r3, r3, #2
 8007ea2:	4a16      	ldr	r2, [pc, #88]	; (8007efc <vTaskSwitchContext+0x10c>)
 8007ea4:	4413      	add	r3, r2
 8007ea6:	60bb      	str	r3, [r7, #8]
 8007ea8:	68bb      	ldr	r3, [r7, #8]
 8007eaa:	685b      	ldr	r3, [r3, #4]
 8007eac:	685a      	ldr	r2, [r3, #4]
 8007eae:	68bb      	ldr	r3, [r7, #8]
 8007eb0:	605a      	str	r2, [r3, #4]
 8007eb2:	68bb      	ldr	r3, [r7, #8]
 8007eb4:	685a      	ldr	r2, [r3, #4]
 8007eb6:	68bb      	ldr	r3, [r7, #8]
 8007eb8:	3308      	adds	r3, #8
 8007eba:	429a      	cmp	r2, r3
 8007ebc:	d104      	bne.n	8007ec8 <vTaskSwitchContext+0xd8>
 8007ebe:	68bb      	ldr	r3, [r7, #8]
 8007ec0:	685b      	ldr	r3, [r3, #4]
 8007ec2:	685a      	ldr	r2, [r3, #4]
 8007ec4:	68bb      	ldr	r3, [r7, #8]
 8007ec6:	605a      	str	r2, [r3, #4]
 8007ec8:	68bb      	ldr	r3, [r7, #8]
 8007eca:	685b      	ldr	r3, [r3, #4]
 8007ecc:	68db      	ldr	r3, [r3, #12]
 8007ece:	4a09      	ldr	r2, [pc, #36]	; (8007ef4 <vTaskSwitchContext+0x104>)
 8007ed0:	6013      	str	r3, [r2, #0]
 8007ed2:	4a09      	ldr	r2, [pc, #36]	; (8007ef8 <vTaskSwitchContext+0x108>)
 8007ed4:	697b      	ldr	r3, [r7, #20]
 8007ed6:	6013      	str	r3, [r2, #0]
			_impure_ptr = &( pxCurrentTCB->xNewLib_reent );
 8007ed8:	4b06      	ldr	r3, [pc, #24]	; (8007ef4 <vTaskSwitchContext+0x104>)
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	3354      	adds	r3, #84	; 0x54
 8007ede:	4a08      	ldr	r2, [pc, #32]	; (8007f00 <vTaskSwitchContext+0x110>)
 8007ee0:	6013      	str	r3, [r2, #0]
}
 8007ee2:	bf00      	nop
 8007ee4:	3718      	adds	r7, #24
 8007ee6:	46bd      	mov	sp, r7
 8007ee8:	bd80      	pop	{r7, pc}
 8007eea:	bf00      	nop
 8007eec:	20006178 	.word	0x20006178
 8007ef0:	20006164 	.word	0x20006164
 8007ef4:	20005c7c 	.word	0x20005c7c
 8007ef8:	20006158 	.word	0x20006158
 8007efc:	20005c80 	.word	0x20005c80
 8007f00:	20000088 	.word	0x20000088

08007f04 <vTaskPlaceOnEventList>:
/*-----------------------------------------------------------*/

void vTaskPlaceOnEventList( List_t * const pxEventList, const TickType_t xTicksToWait )
{
 8007f04:	b580      	push	{r7, lr}
 8007f06:	b084      	sub	sp, #16
 8007f08:	af00      	add	r7, sp, #0
 8007f0a:	6078      	str	r0, [r7, #4]
 8007f0c:	6039      	str	r1, [r7, #0]
	configASSERT( pxEventList );
 8007f0e:	687b      	ldr	r3, [r7, #4]
 8007f10:	2b00      	cmp	r3, #0
 8007f12:	d10a      	bne.n	8007f2a <vTaskPlaceOnEventList+0x26>
	__asm volatile
 8007f14:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f18:	f383 8811 	msr	BASEPRI, r3
 8007f1c:	f3bf 8f6f 	isb	sy
 8007f20:	f3bf 8f4f 	dsb	sy
 8007f24:	60fb      	str	r3, [r7, #12]
}
 8007f26:	bf00      	nop
 8007f28:	e7fe      	b.n	8007f28 <vTaskPlaceOnEventList+0x24>

	/* Place the event list item of the TCB in the appropriate event list.
	This is placed in the list in priority order so the highest priority task
	is the first to be woken by the event.  The queue that contains the event
	list is locked, preventing simultaneous access from interrupts. */
	vListInsert( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f2a:	4b07      	ldr	r3, [pc, #28]	; (8007f48 <vTaskPlaceOnEventList+0x44>)
 8007f2c:	681b      	ldr	r3, [r3, #0]
 8007f2e:	3318      	adds	r3, #24
 8007f30:	4619      	mov	r1, r3
 8007f32:	6878      	ldr	r0, [r7, #4]
 8007f34:	f7fe fa15 	bl	8006362 <vListInsert>

	prvAddCurrentTaskToDelayedList( xTicksToWait, pdTRUE );
 8007f38:	2101      	movs	r1, #1
 8007f3a:	6838      	ldr	r0, [r7, #0]
 8007f3c:	f000 fb8e 	bl	800865c <prvAddCurrentTaskToDelayedList>
}
 8007f40:	bf00      	nop
 8007f42:	3710      	adds	r7, #16
 8007f44:	46bd      	mov	sp, r7
 8007f46:	bd80      	pop	{r7, pc}
 8007f48:	20005c7c 	.word	0x20005c7c

08007f4c <vTaskPlaceOnEventListRestricted>:
/*-----------------------------------------------------------*/

#if( configUSE_TIMERS == 1 )

	void vTaskPlaceOnEventListRestricted( List_t * const pxEventList, TickType_t xTicksToWait, const BaseType_t xWaitIndefinitely )
	{
 8007f4c:	b580      	push	{r7, lr}
 8007f4e:	b086      	sub	sp, #24
 8007f50:	af00      	add	r7, sp, #0
 8007f52:	60f8      	str	r0, [r7, #12]
 8007f54:	60b9      	str	r1, [r7, #8]
 8007f56:	607a      	str	r2, [r7, #4]
		configASSERT( pxEventList );
 8007f58:	68fb      	ldr	r3, [r7, #12]
 8007f5a:	2b00      	cmp	r3, #0
 8007f5c:	d10a      	bne.n	8007f74 <vTaskPlaceOnEventListRestricted+0x28>
	__asm volatile
 8007f5e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007f62:	f383 8811 	msr	BASEPRI, r3
 8007f66:	f3bf 8f6f 	isb	sy
 8007f6a:	f3bf 8f4f 	dsb	sy
 8007f6e:	617b      	str	r3, [r7, #20]
}
 8007f70:	bf00      	nop
 8007f72:	e7fe      	b.n	8007f72 <vTaskPlaceOnEventListRestricted+0x26>

		/* Place the event list item of the TCB in the appropriate event list.
		In this case it is assume that this is the only task that is going to
		be waiting on this event list, so the faster vListInsertEnd() function
		can be used in place of vListInsert. */
		vListInsertEnd( pxEventList, &( pxCurrentTCB->xEventListItem ) );
 8007f74:	4b0a      	ldr	r3, [pc, #40]	; (8007fa0 <vTaskPlaceOnEventListRestricted+0x54>)
 8007f76:	681b      	ldr	r3, [r3, #0]
 8007f78:	3318      	adds	r3, #24
 8007f7a:	4619      	mov	r1, r3
 8007f7c:	68f8      	ldr	r0, [r7, #12]
 8007f7e:	f7fe f9cc 	bl	800631a <vListInsertEnd>

		/* If the task should block indefinitely then set the block time to a
		value that will be recognised as an indefinite delay inside the
		prvAddCurrentTaskToDelayedList() function. */
		if( xWaitIndefinitely != pdFALSE )
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	2b00      	cmp	r3, #0
 8007f86:	d002      	beq.n	8007f8e <vTaskPlaceOnEventListRestricted+0x42>
		{
			xTicksToWait = portMAX_DELAY;
 8007f88:	f04f 33ff 	mov.w	r3, #4294967295
 8007f8c:	60bb      	str	r3, [r7, #8]
		}

		traceTASK_DELAY_UNTIL( ( xTickCount + xTicksToWait ) );
		prvAddCurrentTaskToDelayedList( xTicksToWait, xWaitIndefinitely );
 8007f8e:	6879      	ldr	r1, [r7, #4]
 8007f90:	68b8      	ldr	r0, [r7, #8]
 8007f92:	f000 fb63 	bl	800865c <prvAddCurrentTaskToDelayedList>
	}
 8007f96:	bf00      	nop
 8007f98:	3718      	adds	r7, #24
 8007f9a:	46bd      	mov	sp, r7
 8007f9c:	bd80      	pop	{r7, pc}
 8007f9e:	bf00      	nop
 8007fa0:	20005c7c 	.word	0x20005c7c

08007fa4 <xTaskRemoveFromEventList>:

#endif /* configUSE_TIMERS */
/*-----------------------------------------------------------*/

BaseType_t xTaskRemoveFromEventList( const List_t * const pxEventList )
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	6078      	str	r0, [r7, #4]
	get called - the lock count on the queue will get modified instead.  This
	means exclusive access to the event list is guaranteed here.

	This function assumes that a check has already been made to ensure that
	pxEventList is not empty. */
	pxUnblockedTCB = listGET_OWNER_OF_HEAD_ENTRY( pxEventList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8007fac:	687b      	ldr	r3, [r7, #4]
 8007fae:	68db      	ldr	r3, [r3, #12]
 8007fb0:	68db      	ldr	r3, [r3, #12]
 8007fb2:	613b      	str	r3, [r7, #16]
	configASSERT( pxUnblockedTCB );
 8007fb4:	693b      	ldr	r3, [r7, #16]
 8007fb6:	2b00      	cmp	r3, #0
 8007fb8:	d10a      	bne.n	8007fd0 <xTaskRemoveFromEventList+0x2c>
	__asm volatile
 8007fba:	f04f 0350 	mov.w	r3, #80	; 0x50
 8007fbe:	f383 8811 	msr	BASEPRI, r3
 8007fc2:	f3bf 8f6f 	isb	sy
 8007fc6:	f3bf 8f4f 	dsb	sy
 8007fca:	60fb      	str	r3, [r7, #12]
}
 8007fcc:	bf00      	nop
 8007fce:	e7fe      	b.n	8007fce <xTaskRemoveFromEventList+0x2a>
	( void ) uxListRemove( &( pxUnblockedTCB->xEventListItem ) );
 8007fd0:	693b      	ldr	r3, [r7, #16]
 8007fd2:	3318      	adds	r3, #24
 8007fd4:	4618      	mov	r0, r3
 8007fd6:	f7fe f9fd 	bl	80063d4 <uxListRemove>

	if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 8007fda:	4b1e      	ldr	r3, [pc, #120]	; (8008054 <xTaskRemoveFromEventList+0xb0>)
 8007fdc:	681b      	ldr	r3, [r3, #0]
 8007fde:	2b00      	cmp	r3, #0
 8007fe0:	d11d      	bne.n	800801e <xTaskRemoveFromEventList+0x7a>
	{
		( void ) uxListRemove( &( pxUnblockedTCB->xStateListItem ) );
 8007fe2:	693b      	ldr	r3, [r7, #16]
 8007fe4:	3304      	adds	r3, #4
 8007fe6:	4618      	mov	r0, r3
 8007fe8:	f7fe f9f4 	bl	80063d4 <uxListRemove>
		prvAddTaskToReadyList( pxUnblockedTCB );
 8007fec:	693b      	ldr	r3, [r7, #16]
 8007fee:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8007ff0:	4b19      	ldr	r3, [pc, #100]	; (8008058 <xTaskRemoveFromEventList+0xb4>)
 8007ff2:	681b      	ldr	r3, [r3, #0]
 8007ff4:	429a      	cmp	r2, r3
 8007ff6:	d903      	bls.n	8008000 <xTaskRemoveFromEventList+0x5c>
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8007ffc:	4a16      	ldr	r2, [pc, #88]	; (8008058 <xTaskRemoveFromEventList+0xb4>)
 8007ffe:	6013      	str	r3, [r2, #0]
 8008000:	693b      	ldr	r3, [r7, #16]
 8008002:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008004:	4613      	mov	r3, r2
 8008006:	009b      	lsls	r3, r3, #2
 8008008:	4413      	add	r3, r2
 800800a:	009b      	lsls	r3, r3, #2
 800800c:	4a13      	ldr	r2, [pc, #76]	; (800805c <xTaskRemoveFromEventList+0xb8>)
 800800e:	441a      	add	r2, r3
 8008010:	693b      	ldr	r3, [r7, #16]
 8008012:	3304      	adds	r3, #4
 8008014:	4619      	mov	r1, r3
 8008016:	4610      	mov	r0, r2
 8008018:	f7fe f97f 	bl	800631a <vListInsertEnd>
 800801c:	e005      	b.n	800802a <xTaskRemoveFromEventList+0x86>
	}
	else
	{
		/* The delayed and ready lists cannot be accessed, so hold this task
		pending until the scheduler is resumed. */
		vListInsertEnd( &( xPendingReadyList ), &( pxUnblockedTCB->xEventListItem ) );
 800801e:	693b      	ldr	r3, [r7, #16]
 8008020:	3318      	adds	r3, #24
 8008022:	4619      	mov	r1, r3
 8008024:	480e      	ldr	r0, [pc, #56]	; (8008060 <xTaskRemoveFromEventList+0xbc>)
 8008026:	f7fe f978 	bl	800631a <vListInsertEnd>
	}

	if( pxUnblockedTCB->uxPriority > pxCurrentTCB->uxPriority )
 800802a:	693b      	ldr	r3, [r7, #16]
 800802c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800802e:	4b0d      	ldr	r3, [pc, #52]	; (8008064 <xTaskRemoveFromEventList+0xc0>)
 8008030:	681b      	ldr	r3, [r3, #0]
 8008032:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008034:	429a      	cmp	r2, r3
 8008036:	d905      	bls.n	8008044 <xTaskRemoveFromEventList+0xa0>
	{
		/* Return true if the task removed from the event list has a higher
		priority than the calling task.  This allows the calling task to know if
		it should force a context switch now. */
		xReturn = pdTRUE;
 8008038:	2301      	movs	r3, #1
 800803a:	617b      	str	r3, [r7, #20]

		/* Mark that a yield is pending in case the user is not using the
		"xHigherPriorityTaskWoken" parameter to an ISR safe FreeRTOS function. */
		xYieldPending = pdTRUE;
 800803c:	4b0a      	ldr	r3, [pc, #40]	; (8008068 <xTaskRemoveFromEventList+0xc4>)
 800803e:	2201      	movs	r2, #1
 8008040:	601a      	str	r2, [r3, #0]
 8008042:	e001      	b.n	8008048 <xTaskRemoveFromEventList+0xa4>
	}
	else
	{
		xReturn = pdFALSE;
 8008044:	2300      	movs	r3, #0
 8008046:	617b      	str	r3, [r7, #20]
	}

	return xReturn;
 8008048:	697b      	ldr	r3, [r7, #20]
}
 800804a:	4618      	mov	r0, r3
 800804c:	3718      	adds	r7, #24
 800804e:	46bd      	mov	sp, r7
 8008050:	bd80      	pop	{r7, pc}
 8008052:	bf00      	nop
 8008054:	20006178 	.word	0x20006178
 8008058:	20006158 	.word	0x20006158
 800805c:	20005c80 	.word	0x20005c80
 8008060:	20006110 	.word	0x20006110
 8008064:	20005c7c 	.word	0x20005c7c
 8008068:	20006164 	.word	0x20006164

0800806c <vTaskInternalSetTimeOutState>:
	taskEXIT_CRITICAL();
}
/*-----------------------------------------------------------*/

void vTaskInternalSetTimeOutState( TimeOut_t * const pxTimeOut )
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
	/* For internal use only as it does not use a critical section. */
	pxTimeOut->xOverflowCount = xNumOfOverflows;
 8008074:	4b06      	ldr	r3, [pc, #24]	; (8008090 <vTaskInternalSetTimeOutState+0x24>)
 8008076:	681a      	ldr	r2, [r3, #0]
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	601a      	str	r2, [r3, #0]
	pxTimeOut->xTimeOnEntering = xTickCount;
 800807c:	4b05      	ldr	r3, [pc, #20]	; (8008094 <vTaskInternalSetTimeOutState+0x28>)
 800807e:	681a      	ldr	r2, [r3, #0]
 8008080:	687b      	ldr	r3, [r7, #4]
 8008082:	605a      	str	r2, [r3, #4]
}
 8008084:	bf00      	nop
 8008086:	370c      	adds	r7, #12
 8008088:	46bd      	mov	sp, r7
 800808a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800808e:	4770      	bx	lr
 8008090:	20006168 	.word	0x20006168
 8008094:	20006154 	.word	0x20006154

08008098 <xTaskCheckForTimeOut>:
/*-----------------------------------------------------------*/

BaseType_t xTaskCheckForTimeOut( TimeOut_t * const pxTimeOut, TickType_t * const pxTicksToWait )
{
 8008098:	b580      	push	{r7, lr}
 800809a:	b088      	sub	sp, #32
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
 80080a0:	6039      	str	r1, [r7, #0]
BaseType_t xReturn;

	configASSERT( pxTimeOut );
 80080a2:	687b      	ldr	r3, [r7, #4]
 80080a4:	2b00      	cmp	r3, #0
 80080a6:	d10a      	bne.n	80080be <xTaskCheckForTimeOut+0x26>
	__asm volatile
 80080a8:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080ac:	f383 8811 	msr	BASEPRI, r3
 80080b0:	f3bf 8f6f 	isb	sy
 80080b4:	f3bf 8f4f 	dsb	sy
 80080b8:	613b      	str	r3, [r7, #16]
}
 80080ba:	bf00      	nop
 80080bc:	e7fe      	b.n	80080bc <xTaskCheckForTimeOut+0x24>
	configASSERT( pxTicksToWait );
 80080be:	683b      	ldr	r3, [r7, #0]
 80080c0:	2b00      	cmp	r3, #0
 80080c2:	d10a      	bne.n	80080da <xTaskCheckForTimeOut+0x42>
	__asm volatile
 80080c4:	f04f 0350 	mov.w	r3, #80	; 0x50
 80080c8:	f383 8811 	msr	BASEPRI, r3
 80080cc:	f3bf 8f6f 	isb	sy
 80080d0:	f3bf 8f4f 	dsb	sy
 80080d4:	60fb      	str	r3, [r7, #12]
}
 80080d6:	bf00      	nop
 80080d8:	e7fe      	b.n	80080d8 <xTaskCheckForTimeOut+0x40>

	taskENTER_CRITICAL();
 80080da:	f000 ff8b 	bl	8008ff4 <vPortEnterCritical>
	{
		/* Minor optimisation.  The tick count cannot change in this block. */
		const TickType_t xConstTickCount = xTickCount;
 80080de:	4b1d      	ldr	r3, [pc, #116]	; (8008154 <xTaskCheckForTimeOut+0xbc>)
 80080e0:	681b      	ldr	r3, [r3, #0]
 80080e2:	61bb      	str	r3, [r7, #24]
		const TickType_t xElapsedTime = xConstTickCount - pxTimeOut->xTimeOnEntering;
 80080e4:	687b      	ldr	r3, [r7, #4]
 80080e6:	685b      	ldr	r3, [r3, #4]
 80080e8:	69ba      	ldr	r2, [r7, #24]
 80080ea:	1ad3      	subs	r3, r2, r3
 80080ec:	617b      	str	r3, [r7, #20]
			}
			else
		#endif

		#if ( INCLUDE_vTaskSuspend == 1 )
			if( *pxTicksToWait == portMAX_DELAY )
 80080ee:	683b      	ldr	r3, [r7, #0]
 80080f0:	681b      	ldr	r3, [r3, #0]
 80080f2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80080f6:	d102      	bne.n	80080fe <xTaskCheckForTimeOut+0x66>
			{
				/* If INCLUDE_vTaskSuspend is set to 1 and the block time
				specified is the maximum block time then the task should block
				indefinitely, and therefore never time out. */
				xReturn = pdFALSE;
 80080f8:	2300      	movs	r3, #0
 80080fa:	61fb      	str	r3, [r7, #28]
 80080fc:	e023      	b.n	8008146 <xTaskCheckForTimeOut+0xae>
			}
			else
		#endif

		if( ( xNumOfOverflows != pxTimeOut->xOverflowCount ) && ( xConstTickCount >= pxTimeOut->xTimeOnEntering ) ) /*lint !e525 Indentation preferred as is to make code within pre-processor directives clearer. */
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	681a      	ldr	r2, [r3, #0]
 8008102:	4b15      	ldr	r3, [pc, #84]	; (8008158 <xTaskCheckForTimeOut+0xc0>)
 8008104:	681b      	ldr	r3, [r3, #0]
 8008106:	429a      	cmp	r2, r3
 8008108:	d007      	beq.n	800811a <xTaskCheckForTimeOut+0x82>
 800810a:	687b      	ldr	r3, [r7, #4]
 800810c:	685b      	ldr	r3, [r3, #4]
 800810e:	69ba      	ldr	r2, [r7, #24]
 8008110:	429a      	cmp	r2, r3
 8008112:	d302      	bcc.n	800811a <xTaskCheckForTimeOut+0x82>
			/* The tick count is greater than the time at which
			vTaskSetTimeout() was called, but has also overflowed since
			vTaskSetTimeOut() was called.  It must have wrapped all the way
			around and gone past again. This passed since vTaskSetTimeout()
			was called. */
			xReturn = pdTRUE;
 8008114:	2301      	movs	r3, #1
 8008116:	61fb      	str	r3, [r7, #28]
 8008118:	e015      	b.n	8008146 <xTaskCheckForTimeOut+0xae>
		}
		else if( xElapsedTime < *pxTicksToWait ) /*lint !e961 Explicit casting is only redundant with some compilers, whereas others require it to prevent integer conversion errors. */
 800811a:	683b      	ldr	r3, [r7, #0]
 800811c:	681b      	ldr	r3, [r3, #0]
 800811e:	697a      	ldr	r2, [r7, #20]
 8008120:	429a      	cmp	r2, r3
 8008122:	d20b      	bcs.n	800813c <xTaskCheckForTimeOut+0xa4>
		{
			/* Not a genuine timeout. Adjust parameters for time remaining. */
			*pxTicksToWait -= xElapsedTime;
 8008124:	683b      	ldr	r3, [r7, #0]
 8008126:	681a      	ldr	r2, [r3, #0]
 8008128:	697b      	ldr	r3, [r7, #20]
 800812a:	1ad2      	subs	r2, r2, r3
 800812c:	683b      	ldr	r3, [r7, #0]
 800812e:	601a      	str	r2, [r3, #0]
			vTaskInternalSetTimeOutState( pxTimeOut );
 8008130:	6878      	ldr	r0, [r7, #4]
 8008132:	f7ff ff9b 	bl	800806c <vTaskInternalSetTimeOutState>
			xReturn = pdFALSE;
 8008136:	2300      	movs	r3, #0
 8008138:	61fb      	str	r3, [r7, #28]
 800813a:	e004      	b.n	8008146 <xTaskCheckForTimeOut+0xae>
		}
		else
		{
			*pxTicksToWait = 0;
 800813c:	683b      	ldr	r3, [r7, #0]
 800813e:	2200      	movs	r2, #0
 8008140:	601a      	str	r2, [r3, #0]
			xReturn = pdTRUE;
 8008142:	2301      	movs	r3, #1
 8008144:	61fb      	str	r3, [r7, #28]
		}
	}
	taskEXIT_CRITICAL();
 8008146:	f000 ff85 	bl	8009054 <vPortExitCritical>

	return xReturn;
 800814a:	69fb      	ldr	r3, [r7, #28]
}
 800814c:	4618      	mov	r0, r3
 800814e:	3720      	adds	r7, #32
 8008150:	46bd      	mov	sp, r7
 8008152:	bd80      	pop	{r7, pc}
 8008154:	20006154 	.word	0x20006154
 8008158:	20006168 	.word	0x20006168

0800815c <vTaskMissedYield>:
/*-----------------------------------------------------------*/

void vTaskMissedYield( void )
{
 800815c:	b480      	push	{r7}
 800815e:	af00      	add	r7, sp, #0
	xYieldPending = pdTRUE;
 8008160:	4b03      	ldr	r3, [pc, #12]	; (8008170 <vTaskMissedYield+0x14>)
 8008162:	2201      	movs	r2, #1
 8008164:	601a      	str	r2, [r3, #0]
}
 8008166:	bf00      	nop
 8008168:	46bd      	mov	sp, r7
 800816a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800816e:	4770      	bx	lr
 8008170:	20006164 	.word	0x20006164

08008174 <prvIdleTask>:
 *
 * void prvIdleTask( void *pvParameters );
 *
 */
static portTASK_FUNCTION( prvIdleTask, pvParameters )
{
 8008174:	b580      	push	{r7, lr}
 8008176:	b082      	sub	sp, #8
 8008178:	af00      	add	r7, sp, #0
 800817a:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* See if any tasks have deleted themselves - if so then the idle task
		is responsible for freeing the deleted task's TCB and stack. */
		prvCheckTasksWaitingTermination();
 800817c:	f000 f852 	bl	8008224 <prvCheckTasksWaitingTermination>

			A critical region is not required here as we are just reading from
			the list, and an occasional incorrect value will not matter.  If
			the ready list at the idle priority contains more than one task
			then a task other than the idle task is ready to execute. */
			if( listCURRENT_LIST_LENGTH( &( pxReadyTasksLists[ tskIDLE_PRIORITY ] ) ) > ( UBaseType_t ) 1 )
 8008180:	4b06      	ldr	r3, [pc, #24]	; (800819c <prvIdleTask+0x28>)
 8008182:	681b      	ldr	r3, [r3, #0]
 8008184:	2b01      	cmp	r3, #1
 8008186:	d9f9      	bls.n	800817c <prvIdleTask+0x8>
			{
				taskYIELD();
 8008188:	4b05      	ldr	r3, [pc, #20]	; (80081a0 <prvIdleTask+0x2c>)
 800818a:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 800818e:	601a      	str	r2, [r3, #0]
 8008190:	f3bf 8f4f 	dsb	sy
 8008194:	f3bf 8f6f 	isb	sy
		prvCheckTasksWaitingTermination();
 8008198:	e7f0      	b.n	800817c <prvIdleTask+0x8>
 800819a:	bf00      	nop
 800819c:	20005c80 	.word	0x20005c80
 80081a0:	e000ed04 	.word	0xe000ed04

080081a4 <prvInitialiseTaskLists>:

#endif /* portUSING_MPU_WRAPPERS */
/*-----------------------------------------------------------*/

static void prvInitialiseTaskLists( void )
{
 80081a4:	b580      	push	{r7, lr}
 80081a6:	b082      	sub	sp, #8
 80081a8:	af00      	add	r7, sp, #0
UBaseType_t uxPriority;

	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081aa:	2300      	movs	r3, #0
 80081ac:	607b      	str	r3, [r7, #4]
 80081ae:	e00c      	b.n	80081ca <prvInitialiseTaskLists+0x26>
	{
		vListInitialise( &( pxReadyTasksLists[ uxPriority ] ) );
 80081b0:	687a      	ldr	r2, [r7, #4]
 80081b2:	4613      	mov	r3, r2
 80081b4:	009b      	lsls	r3, r3, #2
 80081b6:	4413      	add	r3, r2
 80081b8:	009b      	lsls	r3, r3, #2
 80081ba:	4a12      	ldr	r2, [pc, #72]	; (8008204 <prvInitialiseTaskLists+0x60>)
 80081bc:	4413      	add	r3, r2
 80081be:	4618      	mov	r0, r3
 80081c0:	f7fe f87e 	bl	80062c0 <vListInitialise>
	for( uxPriority = ( UBaseType_t ) 0U; uxPriority < ( UBaseType_t ) configMAX_PRIORITIES; uxPriority++ )
 80081c4:	687b      	ldr	r3, [r7, #4]
 80081c6:	3301      	adds	r3, #1
 80081c8:	607b      	str	r3, [r7, #4]
 80081ca:	687b      	ldr	r3, [r7, #4]
 80081cc:	2b37      	cmp	r3, #55	; 0x37
 80081ce:	d9ef      	bls.n	80081b0 <prvInitialiseTaskLists+0xc>
	}

	vListInitialise( &xDelayedTaskList1 );
 80081d0:	480d      	ldr	r0, [pc, #52]	; (8008208 <prvInitialiseTaskLists+0x64>)
 80081d2:	f7fe f875 	bl	80062c0 <vListInitialise>
	vListInitialise( &xDelayedTaskList2 );
 80081d6:	480d      	ldr	r0, [pc, #52]	; (800820c <prvInitialiseTaskLists+0x68>)
 80081d8:	f7fe f872 	bl	80062c0 <vListInitialise>
	vListInitialise( &xPendingReadyList );
 80081dc:	480c      	ldr	r0, [pc, #48]	; (8008210 <prvInitialiseTaskLists+0x6c>)
 80081de:	f7fe f86f 	bl	80062c0 <vListInitialise>

	#if ( INCLUDE_vTaskDelete == 1 )
	{
		vListInitialise( &xTasksWaitingTermination );
 80081e2:	480c      	ldr	r0, [pc, #48]	; (8008214 <prvInitialiseTaskLists+0x70>)
 80081e4:	f7fe f86c 	bl	80062c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskDelete */

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		vListInitialise( &xSuspendedTaskList );
 80081e8:	480b      	ldr	r0, [pc, #44]	; (8008218 <prvInitialiseTaskLists+0x74>)
 80081ea:	f7fe f869 	bl	80062c0 <vListInitialise>
	}
	#endif /* INCLUDE_vTaskSuspend */

	/* Start with pxDelayedTaskList using list1 and the pxOverflowDelayedTaskList
	using list2. */
	pxDelayedTaskList = &xDelayedTaskList1;
 80081ee:	4b0b      	ldr	r3, [pc, #44]	; (800821c <prvInitialiseTaskLists+0x78>)
 80081f0:	4a05      	ldr	r2, [pc, #20]	; (8008208 <prvInitialiseTaskLists+0x64>)
 80081f2:	601a      	str	r2, [r3, #0]
	pxOverflowDelayedTaskList = &xDelayedTaskList2;
 80081f4:	4b0a      	ldr	r3, [pc, #40]	; (8008220 <prvInitialiseTaskLists+0x7c>)
 80081f6:	4a05      	ldr	r2, [pc, #20]	; (800820c <prvInitialiseTaskLists+0x68>)
 80081f8:	601a      	str	r2, [r3, #0]
}
 80081fa:	bf00      	nop
 80081fc:	3708      	adds	r7, #8
 80081fe:	46bd      	mov	sp, r7
 8008200:	bd80      	pop	{r7, pc}
 8008202:	bf00      	nop
 8008204:	20005c80 	.word	0x20005c80
 8008208:	200060e0 	.word	0x200060e0
 800820c:	200060f4 	.word	0x200060f4
 8008210:	20006110 	.word	0x20006110
 8008214:	20006124 	.word	0x20006124
 8008218:	2000613c 	.word	0x2000613c
 800821c:	20006108 	.word	0x20006108
 8008220:	2000610c 	.word	0x2000610c

08008224 <prvCheckTasksWaitingTermination>:
/*-----------------------------------------------------------*/

static void prvCheckTasksWaitingTermination( void )
{
 8008224:	b580      	push	{r7, lr}
 8008226:	b082      	sub	sp, #8
 8008228:	af00      	add	r7, sp, #0
	{
		TCB_t *pxTCB;

		/* uxDeletedTasksWaitingCleanUp is used to prevent taskENTER_CRITICAL()
		being called too often in the idle task. */
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 800822a:	e019      	b.n	8008260 <prvCheckTasksWaitingTermination+0x3c>
		{
			taskENTER_CRITICAL();
 800822c:	f000 fee2 	bl	8008ff4 <vPortEnterCritical>
			{
				pxTCB = listGET_OWNER_OF_HEAD_ENTRY( ( &xTasksWaitingTermination ) ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008230:	4b10      	ldr	r3, [pc, #64]	; (8008274 <prvCheckTasksWaitingTermination+0x50>)
 8008232:	68db      	ldr	r3, [r3, #12]
 8008234:	68db      	ldr	r3, [r3, #12]
 8008236:	607b      	str	r3, [r7, #4]
				( void ) uxListRemove( &( pxTCB->xStateListItem ) );
 8008238:	687b      	ldr	r3, [r7, #4]
 800823a:	3304      	adds	r3, #4
 800823c:	4618      	mov	r0, r3
 800823e:	f7fe f8c9 	bl	80063d4 <uxListRemove>
				--uxCurrentNumberOfTasks;
 8008242:	4b0d      	ldr	r3, [pc, #52]	; (8008278 <prvCheckTasksWaitingTermination+0x54>)
 8008244:	681b      	ldr	r3, [r3, #0]
 8008246:	3b01      	subs	r3, #1
 8008248:	4a0b      	ldr	r2, [pc, #44]	; (8008278 <prvCheckTasksWaitingTermination+0x54>)
 800824a:	6013      	str	r3, [r2, #0]
				--uxDeletedTasksWaitingCleanUp;
 800824c:	4b0b      	ldr	r3, [pc, #44]	; (800827c <prvCheckTasksWaitingTermination+0x58>)
 800824e:	681b      	ldr	r3, [r3, #0]
 8008250:	3b01      	subs	r3, #1
 8008252:	4a0a      	ldr	r2, [pc, #40]	; (800827c <prvCheckTasksWaitingTermination+0x58>)
 8008254:	6013      	str	r3, [r2, #0]
			}
			taskEXIT_CRITICAL();
 8008256:	f000 fefd 	bl	8009054 <vPortExitCritical>

			prvDeleteTCB( pxTCB );
 800825a:	6878      	ldr	r0, [r7, #4]
 800825c:	f000 f810 	bl	8008280 <prvDeleteTCB>
		while( uxDeletedTasksWaitingCleanUp > ( UBaseType_t ) 0U )
 8008260:	4b06      	ldr	r3, [pc, #24]	; (800827c <prvCheckTasksWaitingTermination+0x58>)
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	2b00      	cmp	r3, #0
 8008266:	d1e1      	bne.n	800822c <prvCheckTasksWaitingTermination+0x8>
		}
	}
	#endif /* INCLUDE_vTaskDelete */
}
 8008268:	bf00      	nop
 800826a:	bf00      	nop
 800826c:	3708      	adds	r7, #8
 800826e:	46bd      	mov	sp, r7
 8008270:	bd80      	pop	{r7, pc}
 8008272:	bf00      	nop
 8008274:	20006124 	.word	0x20006124
 8008278:	20006150 	.word	0x20006150
 800827c:	20006138 	.word	0x20006138

08008280 <prvDeleteTCB>:
/*-----------------------------------------------------------*/

#if ( INCLUDE_vTaskDelete == 1 )

	static void prvDeleteTCB( TCB_t *pxTCB )
	{
 8008280:	b580      	push	{r7, lr}
 8008282:	b084      	sub	sp, #16
 8008284:	af00      	add	r7, sp, #0
 8008286:	6078      	str	r0, [r7, #4]
		to the task to free any memory allocated at the application level.
		See the third party link http://www.nadler.com/embedded/newlibAndFreeRTOS.html
		for additional information. */
		#if ( configUSE_NEWLIB_REENTRANT == 1 )
		{
			_reclaim_reent( &( pxTCB->xNewLib_reent ) );
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	3354      	adds	r3, #84	; 0x54
 800828c:	4618      	mov	r0, r3
 800828e:	f00e fe79 	bl	8016f84 <_reclaim_reent>
		#elif( tskSTATIC_AND_DYNAMIC_ALLOCATION_POSSIBLE != 0 ) /*lint !e731 !e9029 Macro has been consolidated for readability reasons. */
		{
			/* The task could have been allocated statically or dynamically, so
			check what was statically allocated before trying to free the
			memory. */
			if( pxTCB->ucStaticallyAllocated == tskDYNAMICALLY_ALLOCATED_STACK_AND_TCB )
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 8008298:	2b00      	cmp	r3, #0
 800829a:	d108      	bne.n	80082ae <prvDeleteTCB+0x2e>
			{
				/* Both the stack and TCB were allocated dynamically, so both
				must be freed. */
				vPortFree( pxTCB->pxStack );
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082a0:	4618      	mov	r0, r3
 80082a2:	f001 f895 	bl	80093d0 <vPortFree>
				vPortFree( pxTCB );
 80082a6:	6878      	ldr	r0, [r7, #4]
 80082a8:	f001 f892 	bl	80093d0 <vPortFree>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
				mtCOVERAGE_TEST_MARKER();
			}
		}
		#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
	}
 80082ac:	e018      	b.n	80082e0 <prvDeleteTCB+0x60>
			else if( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_ONLY )
 80082ae:	687b      	ldr	r3, [r7, #4]
 80082b0:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80082b4:	2b01      	cmp	r3, #1
 80082b6:	d103      	bne.n	80082c0 <prvDeleteTCB+0x40>
				vPortFree( pxTCB );
 80082b8:	6878      	ldr	r0, [r7, #4]
 80082ba:	f001 f889 	bl	80093d0 <vPortFree>
	}
 80082be:	e00f      	b.n	80082e0 <prvDeleteTCB+0x60>
				configASSERT( pxTCB->ucStaticallyAllocated == tskSTATICALLY_ALLOCATED_STACK_AND_TCB	);
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	f893 30a5 	ldrb.w	r3, [r3, #165]	; 0xa5
 80082c6:	2b02      	cmp	r3, #2
 80082c8:	d00a      	beq.n	80082e0 <prvDeleteTCB+0x60>
	__asm volatile
 80082ca:	f04f 0350 	mov.w	r3, #80	; 0x50
 80082ce:	f383 8811 	msr	BASEPRI, r3
 80082d2:	f3bf 8f6f 	isb	sy
 80082d6:	f3bf 8f4f 	dsb	sy
 80082da:	60fb      	str	r3, [r7, #12]
}
 80082dc:	bf00      	nop
 80082de:	e7fe      	b.n	80082de <prvDeleteTCB+0x5e>
	}
 80082e0:	bf00      	nop
 80082e2:	3710      	adds	r7, #16
 80082e4:	46bd      	mov	sp, r7
 80082e6:	bd80      	pop	{r7, pc}

080082e8 <prvResetNextTaskUnblockTime>:

#endif /* INCLUDE_vTaskDelete */
/*-----------------------------------------------------------*/

static void prvResetNextTaskUnblockTime( void )
{
 80082e8:	b480      	push	{r7}
 80082ea:	b083      	sub	sp, #12
 80082ec:	af00      	add	r7, sp, #0
TCB_t *pxTCB;

	if( listLIST_IS_EMPTY( pxDelayedTaskList ) != pdFALSE )
 80082ee:	4b0c      	ldr	r3, [pc, #48]	; (8008320 <prvResetNextTaskUnblockTime+0x38>)
 80082f0:	681b      	ldr	r3, [r3, #0]
 80082f2:	681b      	ldr	r3, [r3, #0]
 80082f4:	2b00      	cmp	r3, #0
 80082f6:	d104      	bne.n	8008302 <prvResetNextTaskUnblockTime+0x1a>
	{
		/* The new current delayed list is empty.  Set xNextTaskUnblockTime to
		the maximum possible value so it is	extremely unlikely that the
		if( xTickCount >= xNextTaskUnblockTime ) test will pass until
		there is an item in the delayed list. */
		xNextTaskUnblockTime = portMAX_DELAY;
 80082f8:	4b0a      	ldr	r3, [pc, #40]	; (8008324 <prvResetNextTaskUnblockTime+0x3c>)
 80082fa:	f04f 32ff 	mov.w	r2, #4294967295
 80082fe:	601a      	str	r2, [r3, #0]
		which the task at the head of the delayed list should be removed
		from the Blocked state. */
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
	}
}
 8008300:	e008      	b.n	8008314 <prvResetNextTaskUnblockTime+0x2c>
		( pxTCB ) = listGET_OWNER_OF_HEAD_ENTRY( pxDelayedTaskList ); /*lint !e9079 void * is used as this macro is used with timers and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008302:	4b07      	ldr	r3, [pc, #28]	; (8008320 <prvResetNextTaskUnblockTime+0x38>)
 8008304:	681b      	ldr	r3, [r3, #0]
 8008306:	68db      	ldr	r3, [r3, #12]
 8008308:	68db      	ldr	r3, [r3, #12]
 800830a:	607b      	str	r3, [r7, #4]
		xNextTaskUnblockTime = listGET_LIST_ITEM_VALUE( &( ( pxTCB )->xStateListItem ) );
 800830c:	687b      	ldr	r3, [r7, #4]
 800830e:	685b      	ldr	r3, [r3, #4]
 8008310:	4a04      	ldr	r2, [pc, #16]	; (8008324 <prvResetNextTaskUnblockTime+0x3c>)
 8008312:	6013      	str	r3, [r2, #0]
}
 8008314:	bf00      	nop
 8008316:	370c      	adds	r7, #12
 8008318:	46bd      	mov	sp, r7
 800831a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800831e:	4770      	bx	lr
 8008320:	20006108 	.word	0x20006108
 8008324:	20006170 	.word	0x20006170

08008328 <xTaskGetCurrentTaskHandle>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetCurrentTaskHandle == 1 ) || ( configUSE_MUTEXES == 1 ) )

	TaskHandle_t xTaskGetCurrentTaskHandle( void )
	{
 8008328:	b480      	push	{r7}
 800832a:	b083      	sub	sp, #12
 800832c:	af00      	add	r7, sp, #0
	TaskHandle_t xReturn;

		/* A critical section is not required as this is not called from
		an interrupt and the current TCB will always be the same for any
		individual execution thread. */
		xReturn = pxCurrentTCB;
 800832e:	4b05      	ldr	r3, [pc, #20]	; (8008344 <xTaskGetCurrentTaskHandle+0x1c>)
 8008330:	681b      	ldr	r3, [r3, #0]
 8008332:	607b      	str	r3, [r7, #4]

		return xReturn;
 8008334:	687b      	ldr	r3, [r7, #4]
	}
 8008336:	4618      	mov	r0, r3
 8008338:	370c      	adds	r7, #12
 800833a:	46bd      	mov	sp, r7
 800833c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008340:	4770      	bx	lr
 8008342:	bf00      	nop
 8008344:	20005c7c 	.word	0x20005c7c

08008348 <xTaskGetSchedulerState>:
/*-----------------------------------------------------------*/

#if ( ( INCLUDE_xTaskGetSchedulerState == 1 ) || ( configUSE_TIMERS == 1 ) )

	BaseType_t xTaskGetSchedulerState( void )
	{
 8008348:	b480      	push	{r7}
 800834a:	b083      	sub	sp, #12
 800834c:	af00      	add	r7, sp, #0
	BaseType_t xReturn;

		if( xSchedulerRunning == pdFALSE )
 800834e:	4b0b      	ldr	r3, [pc, #44]	; (800837c <xTaskGetSchedulerState+0x34>)
 8008350:	681b      	ldr	r3, [r3, #0]
 8008352:	2b00      	cmp	r3, #0
 8008354:	d102      	bne.n	800835c <xTaskGetSchedulerState+0x14>
		{
			xReturn = taskSCHEDULER_NOT_STARTED;
 8008356:	2301      	movs	r3, #1
 8008358:	607b      	str	r3, [r7, #4]
 800835a:	e008      	b.n	800836e <xTaskGetSchedulerState+0x26>
		}
		else
		{
			if( uxSchedulerSuspended == ( UBaseType_t ) pdFALSE )
 800835c:	4b08      	ldr	r3, [pc, #32]	; (8008380 <xTaskGetSchedulerState+0x38>)
 800835e:	681b      	ldr	r3, [r3, #0]
 8008360:	2b00      	cmp	r3, #0
 8008362:	d102      	bne.n	800836a <xTaskGetSchedulerState+0x22>
			{
				xReturn = taskSCHEDULER_RUNNING;
 8008364:	2302      	movs	r3, #2
 8008366:	607b      	str	r3, [r7, #4]
 8008368:	e001      	b.n	800836e <xTaskGetSchedulerState+0x26>
			}
			else
			{
				xReturn = taskSCHEDULER_SUSPENDED;
 800836a:	2300      	movs	r3, #0
 800836c:	607b      	str	r3, [r7, #4]
			}
		}

		return xReturn;
 800836e:	687b      	ldr	r3, [r7, #4]
	}
 8008370:	4618      	mov	r0, r3
 8008372:	370c      	adds	r7, #12
 8008374:	46bd      	mov	sp, r7
 8008376:	f85d 7b04 	ldr.w	r7, [sp], #4
 800837a:	4770      	bx	lr
 800837c:	2000615c 	.word	0x2000615c
 8008380:	20006178 	.word	0x20006178

08008384 <xTaskPriorityInherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityInherit( TaskHandle_t const pxMutexHolder )
	{
 8008384:	b580      	push	{r7, lr}
 8008386:	b084      	sub	sp, #16
 8008388:	af00      	add	r7, sp, #0
 800838a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxMutexHolderTCB = pxMutexHolder;
 800838c:	687b      	ldr	r3, [r7, #4]
 800838e:	60bb      	str	r3, [r7, #8]
	BaseType_t xReturn = pdFALSE;
 8008390:	2300      	movs	r3, #0
 8008392:	60fb      	str	r3, [r7, #12]

		/* If the mutex was given back by an interrupt while the queue was
		locked then the mutex holder might now be NULL.  _RB_ Is this still
		needed as interrupts can no longer use mutexes? */
		if( pxMutexHolder != NULL )
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	2b00      	cmp	r3, #0
 8008398:	d051      	beq.n	800843e <xTaskPriorityInherit+0xba>
		{
			/* If the holder of the mutex has a priority below the priority of
			the task attempting to obtain the mutex then it will temporarily
			inherit the priority of the task attempting to obtain the mutex. */
			if( pxMutexHolderTCB->uxPriority < pxCurrentTCB->uxPriority )
 800839a:	68bb      	ldr	r3, [r7, #8]
 800839c:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800839e:	4b2a      	ldr	r3, [pc, #168]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083a4:	429a      	cmp	r2, r3
 80083a6:	d241      	bcs.n	800842c <xTaskPriorityInherit+0xa8>
			{
				/* Adjust the mutex holder state to account for its new
				priority.  Only reset the event list item value if the value is
				not being used for anything else. */
				if( ( listGET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80083a8:	68bb      	ldr	r3, [r7, #8]
 80083aa:	699b      	ldr	r3, [r3, #24]
 80083ac:	2b00      	cmp	r3, #0
 80083ae:	db06      	blt.n	80083be <xTaskPriorityInherit+0x3a>
				{
					listSET_LIST_ITEM_VALUE( &( pxMutexHolderTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxCurrentTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80083b0:	4b25      	ldr	r3, [pc, #148]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083b2:	681b      	ldr	r3, [r3, #0]
 80083b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083b6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80083ba:	68bb      	ldr	r3, [r7, #8]
 80083bc:	619a      	str	r2, [r3, #24]
					mtCOVERAGE_TEST_MARKER();
				}

				/* If the task being modified is in the ready state it will need
				to be moved into a new list. */
				if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ pxMutexHolderTCB->uxPriority ] ), &( pxMutexHolderTCB->xStateListItem ) ) != pdFALSE )
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	6959      	ldr	r1, [r3, #20]
 80083c2:	68bb      	ldr	r3, [r7, #8]
 80083c4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083c6:	4613      	mov	r3, r2
 80083c8:	009b      	lsls	r3, r3, #2
 80083ca:	4413      	add	r3, r2
 80083cc:	009b      	lsls	r3, r3, #2
 80083ce:	4a1f      	ldr	r2, [pc, #124]	; (800844c <xTaskPriorityInherit+0xc8>)
 80083d0:	4413      	add	r3, r2
 80083d2:	4299      	cmp	r1, r3
 80083d4:	d122      	bne.n	800841c <xTaskPriorityInherit+0x98>
				{
					if( uxListRemove( &( pxMutexHolderTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80083d6:	68bb      	ldr	r3, [r7, #8]
 80083d8:	3304      	adds	r3, #4
 80083da:	4618      	mov	r0, r3
 80083dc:	f7fd fffa 	bl	80063d4 <uxListRemove>
					{
						mtCOVERAGE_TEST_MARKER();
					}

					/* Inherit the priority before being moved into the new list. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 80083e0:	4b19      	ldr	r3, [pc, #100]	; (8008448 <xTaskPriorityInherit+0xc4>)
 80083e2:	681b      	ldr	r3, [r3, #0]
 80083e4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083e6:	68bb      	ldr	r3, [r7, #8]
 80083e8:	62da      	str	r2, [r3, #44]	; 0x2c
					prvAddTaskToReadyList( pxMutexHolderTCB );
 80083ea:	68bb      	ldr	r3, [r7, #8]
 80083ec:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80083ee:	4b18      	ldr	r3, [pc, #96]	; (8008450 <xTaskPriorityInherit+0xcc>)
 80083f0:	681b      	ldr	r3, [r3, #0]
 80083f2:	429a      	cmp	r2, r3
 80083f4:	d903      	bls.n	80083fe <xTaskPriorityInherit+0x7a>
 80083f6:	68bb      	ldr	r3, [r7, #8]
 80083f8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80083fa:	4a15      	ldr	r2, [pc, #84]	; (8008450 <xTaskPriorityInherit+0xcc>)
 80083fc:	6013      	str	r3, [r2, #0]
 80083fe:	68bb      	ldr	r3, [r7, #8]
 8008400:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008402:	4613      	mov	r3, r2
 8008404:	009b      	lsls	r3, r3, #2
 8008406:	4413      	add	r3, r2
 8008408:	009b      	lsls	r3, r3, #2
 800840a:	4a10      	ldr	r2, [pc, #64]	; (800844c <xTaskPriorityInherit+0xc8>)
 800840c:	441a      	add	r2, r3
 800840e:	68bb      	ldr	r3, [r7, #8]
 8008410:	3304      	adds	r3, #4
 8008412:	4619      	mov	r1, r3
 8008414:	4610      	mov	r0, r2
 8008416:	f7fd ff80 	bl	800631a <vListInsertEnd>
 800841a:	e004      	b.n	8008426 <xTaskPriorityInherit+0xa2>
				}
				else
				{
					/* Just inherit the priority. */
					pxMutexHolderTCB->uxPriority = pxCurrentTCB->uxPriority;
 800841c:	4b0a      	ldr	r3, [pc, #40]	; (8008448 <xTaskPriorityInherit+0xc4>)
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008422:	68bb      	ldr	r3, [r7, #8]
 8008424:	62da      	str	r2, [r3, #44]	; 0x2c
				}

				traceTASK_PRIORITY_INHERIT( pxMutexHolderTCB, pxCurrentTCB->uxPriority );

				/* Inheritance occurred. */
				xReturn = pdTRUE;
 8008426:	2301      	movs	r3, #1
 8008428:	60fb      	str	r3, [r7, #12]
 800842a:	e008      	b.n	800843e <xTaskPriorityInherit+0xba>
			}
			else
			{
				if( pxMutexHolderTCB->uxBasePriority < pxCurrentTCB->uxPriority )
 800842c:	68bb      	ldr	r3, [r7, #8]
 800842e:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 8008430:	4b05      	ldr	r3, [pc, #20]	; (8008448 <xTaskPriorityInherit+0xc4>)
 8008432:	681b      	ldr	r3, [r3, #0]
 8008434:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008436:	429a      	cmp	r2, r3
 8008438:	d201      	bcs.n	800843e <xTaskPriorityInherit+0xba>
					current priority of the mutex holder is not lower than the
					priority of the task attempting to take the mutex.
					Therefore the mutex holder must have already inherited a
					priority, but inheritance would have occurred if that had
					not been the case. */
					xReturn = pdTRUE;
 800843a:	2301      	movs	r3, #1
 800843c:	60fb      	str	r3, [r7, #12]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 800843e:	68fb      	ldr	r3, [r7, #12]
	}
 8008440:	4618      	mov	r0, r3
 8008442:	3710      	adds	r7, #16
 8008444:	46bd      	mov	sp, r7
 8008446:	bd80      	pop	{r7, pc}
 8008448:	20005c7c 	.word	0x20005c7c
 800844c:	20005c80 	.word	0x20005c80
 8008450:	20006158 	.word	0x20006158

08008454 <xTaskPriorityDisinherit>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	BaseType_t xTaskPriorityDisinherit( TaskHandle_t const pxMutexHolder )
	{
 8008454:	b580      	push	{r7, lr}
 8008456:	b086      	sub	sp, #24
 8008458:	af00      	add	r7, sp, #0
 800845a:	6078      	str	r0, [r7, #4]
	TCB_t * const pxTCB = pxMutexHolder;
 800845c:	687b      	ldr	r3, [r7, #4]
 800845e:	613b      	str	r3, [r7, #16]
	BaseType_t xReturn = pdFALSE;
 8008460:	2300      	movs	r3, #0
 8008462:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008464:	687b      	ldr	r3, [r7, #4]
 8008466:	2b00      	cmp	r3, #0
 8008468:	d056      	beq.n	8008518 <xTaskPriorityDisinherit+0xc4>
		{
			/* A task can only have an inherited priority if it holds the mutex.
			If the mutex is held by a task then it cannot be given from an
			interrupt, and if a mutex is given by the holding task then it must
			be the running state task. */
			configASSERT( pxTCB == pxCurrentTCB );
 800846a:	4b2e      	ldr	r3, [pc, #184]	; (8008524 <xTaskPriorityDisinherit+0xd0>)
 800846c:	681b      	ldr	r3, [r3, #0]
 800846e:	693a      	ldr	r2, [r7, #16]
 8008470:	429a      	cmp	r2, r3
 8008472:	d00a      	beq.n	800848a <xTaskPriorityDisinherit+0x36>
	__asm volatile
 8008474:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008478:	f383 8811 	msr	BASEPRI, r3
 800847c:	f3bf 8f6f 	isb	sy
 8008480:	f3bf 8f4f 	dsb	sy
 8008484:	60fb      	str	r3, [r7, #12]
}
 8008486:	bf00      	nop
 8008488:	e7fe      	b.n	8008488 <xTaskPriorityDisinherit+0x34>
			configASSERT( pxTCB->uxMutexesHeld );
 800848a:	693b      	ldr	r3, [r7, #16]
 800848c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800848e:	2b00      	cmp	r3, #0
 8008490:	d10a      	bne.n	80084a8 <xTaskPriorityDisinherit+0x54>
	__asm volatile
 8008492:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008496:	f383 8811 	msr	BASEPRI, r3
 800849a:	f3bf 8f6f 	isb	sy
 800849e:	f3bf 8f4f 	dsb	sy
 80084a2:	60bb      	str	r3, [r7, #8]
}
 80084a4:	bf00      	nop
 80084a6:	e7fe      	b.n	80084a6 <xTaskPriorityDisinherit+0x52>
			( pxTCB->uxMutexesHeld )--;
 80084a8:	693b      	ldr	r3, [r7, #16]
 80084aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084ac:	1e5a      	subs	r2, r3, #1
 80084ae:	693b      	ldr	r3, [r7, #16]
 80084b0:	651a      	str	r2, [r3, #80]	; 0x50

			/* Has the holder of the mutex inherited the priority of another
			task? */
			if( pxTCB->uxPriority != pxTCB->uxBasePriority )
 80084b2:	693b      	ldr	r3, [r7, #16]
 80084b4:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084b6:	693b      	ldr	r3, [r7, #16]
 80084b8:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 80084ba:	429a      	cmp	r2, r3
 80084bc:	d02c      	beq.n	8008518 <xTaskPriorityDisinherit+0xc4>
			{
				/* Only disinherit if no other mutexes are held. */
				if( pxTCB->uxMutexesHeld == ( UBaseType_t ) 0 )
 80084be:	693b      	ldr	r3, [r7, #16]
 80084c0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d128      	bne.n	8008518 <xTaskPriorityDisinherit+0xc4>
					/* A task can only have an inherited priority if it holds
					the mutex.  If the mutex is held by a task then it cannot be
					given from an interrupt, and if a mutex is given by the
					holding task then it must be the running state task.  Remove
					the holding task from the ready/delayed list. */
					if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80084c6:	693b      	ldr	r3, [r7, #16]
 80084c8:	3304      	adds	r3, #4
 80084ca:	4618      	mov	r0, r3
 80084cc:	f7fd ff82 	bl	80063d4 <uxListRemove>
					}

					/* Disinherit the priority before adding the task into the
					new	ready list. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					pxTCB->uxPriority = pxTCB->uxBasePriority;
 80084d0:	693b      	ldr	r3, [r7, #16]
 80084d2:	6cda      	ldr	r2, [r3, #76]	; 0x4c
 80084d4:	693b      	ldr	r3, [r7, #16]
 80084d6:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Reset the event list item value.  It cannot be in use for
					any other purpose if this task is running, and it must be
					running to give back the mutex. */
					listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) pxTCB->uxPriority ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80084d8:	693b      	ldr	r3, [r7, #16]
 80084da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084dc:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80084e0:	693b      	ldr	r3, [r7, #16]
 80084e2:	619a      	str	r2, [r3, #24]
					prvAddTaskToReadyList( pxTCB );
 80084e4:	693b      	ldr	r3, [r7, #16]
 80084e6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084e8:	4b0f      	ldr	r3, [pc, #60]	; (8008528 <xTaskPriorityDisinherit+0xd4>)
 80084ea:	681b      	ldr	r3, [r3, #0]
 80084ec:	429a      	cmp	r2, r3
 80084ee:	d903      	bls.n	80084f8 <xTaskPriorityDisinherit+0xa4>
 80084f0:	693b      	ldr	r3, [r7, #16]
 80084f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80084f4:	4a0c      	ldr	r2, [pc, #48]	; (8008528 <xTaskPriorityDisinherit+0xd4>)
 80084f6:	6013      	str	r3, [r2, #0]
 80084f8:	693b      	ldr	r3, [r7, #16]
 80084fa:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80084fc:	4613      	mov	r3, r2
 80084fe:	009b      	lsls	r3, r3, #2
 8008500:	4413      	add	r3, r2
 8008502:	009b      	lsls	r3, r3, #2
 8008504:	4a09      	ldr	r2, [pc, #36]	; (800852c <xTaskPriorityDisinherit+0xd8>)
 8008506:	441a      	add	r2, r3
 8008508:	693b      	ldr	r3, [r7, #16]
 800850a:	3304      	adds	r3, #4
 800850c:	4619      	mov	r1, r3
 800850e:	4610      	mov	r0, r2
 8008510:	f7fd ff03 	bl	800631a <vListInsertEnd>
					in an order different to that in which they were taken.
					If a context switch did not occur when the first mutex was
					returned, even if a task was waiting on it, then a context
					switch should occur when the last mutex is returned whether
					a task is waiting on it or not. */
					xReturn = pdTRUE;
 8008514:	2301      	movs	r3, #1
 8008516:	617b      	str	r3, [r7, #20]
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}

		return xReturn;
 8008518:	697b      	ldr	r3, [r7, #20]
	}
 800851a:	4618      	mov	r0, r3
 800851c:	3718      	adds	r7, #24
 800851e:	46bd      	mov	sp, r7
 8008520:	bd80      	pop	{r7, pc}
 8008522:	bf00      	nop
 8008524:	20005c7c 	.word	0x20005c7c
 8008528:	20006158 	.word	0x20006158
 800852c:	20005c80 	.word	0x20005c80

08008530 <vTaskPriorityDisinheritAfterTimeout>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	void vTaskPriorityDisinheritAfterTimeout( TaskHandle_t const pxMutexHolder, UBaseType_t uxHighestPriorityWaitingTask )
	{
 8008530:	b580      	push	{r7, lr}
 8008532:	b088      	sub	sp, #32
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]
 8008538:	6039      	str	r1, [r7, #0]
	TCB_t * const pxTCB = pxMutexHolder;
 800853a:	687b      	ldr	r3, [r7, #4]
 800853c:	61bb      	str	r3, [r7, #24]
	UBaseType_t uxPriorityUsedOnEntry, uxPriorityToUse;
	const UBaseType_t uxOnlyOneMutexHeld = ( UBaseType_t ) 1;
 800853e:	2301      	movs	r3, #1
 8008540:	617b      	str	r3, [r7, #20]

		if( pxMutexHolder != NULL )
 8008542:	687b      	ldr	r3, [r7, #4]
 8008544:	2b00      	cmp	r3, #0
 8008546:	d06a      	beq.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
		{
			/* If pxMutexHolder is not NULL then the holder must hold at least
			one mutex. */
			configASSERT( pxTCB->uxMutexesHeld );
 8008548:	69bb      	ldr	r3, [r7, #24]
 800854a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800854c:	2b00      	cmp	r3, #0
 800854e:	d10a      	bne.n	8008566 <vTaskPriorityDisinheritAfterTimeout+0x36>
	__asm volatile
 8008550:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008554:	f383 8811 	msr	BASEPRI, r3
 8008558:	f3bf 8f6f 	isb	sy
 800855c:	f3bf 8f4f 	dsb	sy
 8008560:	60fb      	str	r3, [r7, #12]
}
 8008562:	bf00      	nop
 8008564:	e7fe      	b.n	8008564 <vTaskPriorityDisinheritAfterTimeout+0x34>

			/* Determine the priority to which the priority of the task that
			holds the mutex should be set.  This will be the greater of the
			holding task's base priority and the priority of the highest
			priority task that is waiting to obtain the mutex. */
			if( pxTCB->uxBasePriority < uxHighestPriorityWaitingTask )
 8008566:	69bb      	ldr	r3, [r7, #24]
 8008568:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800856a:	683a      	ldr	r2, [r7, #0]
 800856c:	429a      	cmp	r2, r3
 800856e:	d902      	bls.n	8008576 <vTaskPriorityDisinheritAfterTimeout+0x46>
			{
				uxPriorityToUse = uxHighestPriorityWaitingTask;
 8008570:	683b      	ldr	r3, [r7, #0]
 8008572:	61fb      	str	r3, [r7, #28]
 8008574:	e002      	b.n	800857c <vTaskPriorityDisinheritAfterTimeout+0x4c>
			}
			else
			{
				uxPriorityToUse = pxTCB->uxBasePriority;
 8008576:	69bb      	ldr	r3, [r7, #24]
 8008578:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800857a:	61fb      	str	r3, [r7, #28]
			}

			/* Does the priority need to change? */
			if( pxTCB->uxPriority != uxPriorityToUse )
 800857c:	69bb      	ldr	r3, [r7, #24]
 800857e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8008580:	69fa      	ldr	r2, [r7, #28]
 8008582:	429a      	cmp	r2, r3
 8008584:	d04b      	beq.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
			{
				/* Only disinherit if no other mutexes are held.  This is a
				simplification in the priority inheritance implementation.  If
				the task that holds the mutex is also holding other mutexes then
				the other mutexes may have caused the priority inheritance. */
				if( pxTCB->uxMutexesHeld == uxOnlyOneMutexHeld )
 8008586:	69bb      	ldr	r3, [r7, #24]
 8008588:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800858a:	697a      	ldr	r2, [r7, #20]
 800858c:	429a      	cmp	r2, r3
 800858e:	d146      	bne.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
				{
					/* If a task has timed out because it already holds the
					mutex it was trying to obtain then it cannot of inherited
					its own priority. */
					configASSERT( pxTCB != pxCurrentTCB );
 8008590:	4b25      	ldr	r3, [pc, #148]	; (8008628 <vTaskPriorityDisinheritAfterTimeout+0xf8>)
 8008592:	681b      	ldr	r3, [r3, #0]
 8008594:	69ba      	ldr	r2, [r7, #24]
 8008596:	429a      	cmp	r2, r3
 8008598:	d10a      	bne.n	80085b0 <vTaskPriorityDisinheritAfterTimeout+0x80>
	__asm volatile
 800859a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800859e:	f383 8811 	msr	BASEPRI, r3
 80085a2:	f3bf 8f6f 	isb	sy
 80085a6:	f3bf 8f4f 	dsb	sy
 80085aa:	60bb      	str	r3, [r7, #8]
}
 80085ac:	bf00      	nop
 80085ae:	e7fe      	b.n	80085ae <vTaskPriorityDisinheritAfterTimeout+0x7e>

					/* Disinherit the priority, remembering the previous
					priority to facilitate determining the subject task's
					state. */
					traceTASK_PRIORITY_DISINHERIT( pxTCB, pxTCB->uxBasePriority );
					uxPriorityUsedOnEntry = pxTCB->uxPriority;
 80085b0:	69bb      	ldr	r3, [r7, #24]
 80085b2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085b4:	613b      	str	r3, [r7, #16]
					pxTCB->uxPriority = uxPriorityToUse;
 80085b6:	69bb      	ldr	r3, [r7, #24]
 80085b8:	69fa      	ldr	r2, [r7, #28]
 80085ba:	62da      	str	r2, [r3, #44]	; 0x2c

					/* Only reset the event list item value if the value is not
					being used for anything else. */
					if( ( listGET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ) ) & taskEVENT_LIST_ITEM_VALUE_IN_USE ) == 0UL )
 80085bc:	69bb      	ldr	r3, [r7, #24]
 80085be:	699b      	ldr	r3, [r3, #24]
 80085c0:	2b00      	cmp	r3, #0
 80085c2:	db04      	blt.n	80085ce <vTaskPriorityDisinheritAfterTimeout+0x9e>
					{
						listSET_LIST_ITEM_VALUE( &( pxTCB->xEventListItem ), ( TickType_t ) configMAX_PRIORITIES - ( TickType_t ) uxPriorityToUse ); /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 80085c4:	69fb      	ldr	r3, [r7, #28]
 80085c6:	f1c3 0238 	rsb	r2, r3, #56	; 0x38
 80085ca:	69bb      	ldr	r3, [r7, #24]
 80085cc:	619a      	str	r2, [r3, #24]
					then the task that holds the mutex could be in either the
					Ready, Blocked or Suspended states.  Only remove the task
					from its current state list if it is in the Ready state as
					the task's priority is going to change and there is one
					Ready list per priority. */
					if( listIS_CONTAINED_WITHIN( &( pxReadyTasksLists[ uxPriorityUsedOnEntry ] ), &( pxTCB->xStateListItem ) ) != pdFALSE )
 80085ce:	69bb      	ldr	r3, [r7, #24]
 80085d0:	6959      	ldr	r1, [r3, #20]
 80085d2:	693a      	ldr	r2, [r7, #16]
 80085d4:	4613      	mov	r3, r2
 80085d6:	009b      	lsls	r3, r3, #2
 80085d8:	4413      	add	r3, r2
 80085da:	009b      	lsls	r3, r3, #2
 80085dc:	4a13      	ldr	r2, [pc, #76]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 80085de:	4413      	add	r3, r2
 80085e0:	4299      	cmp	r1, r3
 80085e2:	d11c      	bne.n	800861e <vTaskPriorityDisinheritAfterTimeout+0xee>
					{
						if( uxListRemove( &( pxTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 80085e4:	69bb      	ldr	r3, [r7, #24]
 80085e6:	3304      	adds	r3, #4
 80085e8:	4618      	mov	r0, r3
 80085ea:	f7fd fef3 	bl	80063d4 <uxListRemove>
						else
						{
							mtCOVERAGE_TEST_MARKER();
						}

						prvAddTaskToReadyList( pxTCB );
 80085ee:	69bb      	ldr	r3, [r7, #24]
 80085f0:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80085f2:	4b0f      	ldr	r3, [pc, #60]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 80085f4:	681b      	ldr	r3, [r3, #0]
 80085f6:	429a      	cmp	r2, r3
 80085f8:	d903      	bls.n	8008602 <vTaskPriorityDisinheritAfterTimeout+0xd2>
 80085fa:	69bb      	ldr	r3, [r7, #24]
 80085fc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80085fe:	4a0c      	ldr	r2, [pc, #48]	; (8008630 <vTaskPriorityDisinheritAfterTimeout+0x100>)
 8008600:	6013      	str	r3, [r2, #0]
 8008602:	69bb      	ldr	r3, [r7, #24]
 8008604:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8008606:	4613      	mov	r3, r2
 8008608:	009b      	lsls	r3, r3, #2
 800860a:	4413      	add	r3, r2
 800860c:	009b      	lsls	r3, r3, #2
 800860e:	4a07      	ldr	r2, [pc, #28]	; (800862c <vTaskPriorityDisinheritAfterTimeout+0xfc>)
 8008610:	441a      	add	r2, r3
 8008612:	69bb      	ldr	r3, [r7, #24]
 8008614:	3304      	adds	r3, #4
 8008616:	4619      	mov	r1, r3
 8008618:	4610      	mov	r0, r2
 800861a:	f7fd fe7e 	bl	800631a <vListInsertEnd>
		}
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
 800861e:	bf00      	nop
 8008620:	3720      	adds	r7, #32
 8008622:	46bd      	mov	sp, r7
 8008624:	bd80      	pop	{r7, pc}
 8008626:	bf00      	nop
 8008628:	20005c7c 	.word	0x20005c7c
 800862c:	20005c80 	.word	0x20005c80
 8008630:	20006158 	.word	0x20006158

08008634 <pvTaskIncrementMutexHeldCount>:
/*-----------------------------------------------------------*/

#if ( configUSE_MUTEXES == 1 )

	TaskHandle_t pvTaskIncrementMutexHeldCount( void )
	{
 8008634:	b480      	push	{r7}
 8008636:	af00      	add	r7, sp, #0
		/* If xSemaphoreCreateMutex() is called before any tasks have been created
		then pxCurrentTCB will be NULL. */
		if( pxCurrentTCB != NULL )
 8008638:	4b07      	ldr	r3, [pc, #28]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 800863a:	681b      	ldr	r3, [r3, #0]
 800863c:	2b00      	cmp	r3, #0
 800863e:	d004      	beq.n	800864a <pvTaskIncrementMutexHeldCount+0x16>
		{
			( pxCurrentTCB->uxMutexesHeld )++;
 8008640:	4b05      	ldr	r3, [pc, #20]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 8008642:	681b      	ldr	r3, [r3, #0]
 8008644:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8008646:	3201      	adds	r2, #1
 8008648:	651a      	str	r2, [r3, #80]	; 0x50
		}

		return pxCurrentTCB;
 800864a:	4b03      	ldr	r3, [pc, #12]	; (8008658 <pvTaskIncrementMutexHeldCount+0x24>)
 800864c:	681b      	ldr	r3, [r3, #0]
	}
 800864e:	4618      	mov	r0, r3
 8008650:	46bd      	mov	sp, r7
 8008652:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008656:	4770      	bx	lr
 8008658:	20005c7c 	.word	0x20005c7c

0800865c <prvAddCurrentTaskToDelayedList>:

#endif
/*-----------------------------------------------------------*/

static void prvAddCurrentTaskToDelayedList( TickType_t xTicksToWait, const BaseType_t xCanBlockIndefinitely )
{
 800865c:	b580      	push	{r7, lr}
 800865e:	b084      	sub	sp, #16
 8008660:	af00      	add	r7, sp, #0
 8008662:	6078      	str	r0, [r7, #4]
 8008664:	6039      	str	r1, [r7, #0]
TickType_t xTimeToWake;
const TickType_t xConstTickCount = xTickCount;
 8008666:	4b21      	ldr	r3, [pc, #132]	; (80086ec <prvAddCurrentTaskToDelayedList+0x90>)
 8008668:	681b      	ldr	r3, [r3, #0]
 800866a:	60fb      	str	r3, [r7, #12]
	}
	#endif

	/* Remove the task from the ready list before adding it to the blocked list
	as the same list item is used for both lists. */
	if( uxListRemove( &( pxCurrentTCB->xStateListItem ) ) == ( UBaseType_t ) 0 )
 800866c:	4b20      	ldr	r3, [pc, #128]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 800866e:	681b      	ldr	r3, [r3, #0]
 8008670:	3304      	adds	r3, #4
 8008672:	4618      	mov	r0, r3
 8008674:	f7fd feae 	bl	80063d4 <uxListRemove>
		mtCOVERAGE_TEST_MARKER();
	}

	#if ( INCLUDE_vTaskSuspend == 1 )
	{
		if( ( xTicksToWait == portMAX_DELAY ) && ( xCanBlockIndefinitely != pdFALSE ) )
 8008678:	687b      	ldr	r3, [r7, #4]
 800867a:	f1b3 3fff 	cmp.w	r3, #4294967295
 800867e:	d10a      	bne.n	8008696 <prvAddCurrentTaskToDelayedList+0x3a>
 8008680:	683b      	ldr	r3, [r7, #0]
 8008682:	2b00      	cmp	r3, #0
 8008684:	d007      	beq.n	8008696 <prvAddCurrentTaskToDelayedList+0x3a>
		{
			/* Add the task to the suspended task list instead of a delayed task
			list to ensure it is not woken by a timing event.  It will block
			indefinitely. */
			vListInsertEnd( &xSuspendedTaskList, &( pxCurrentTCB->xStateListItem ) );
 8008686:	4b1a      	ldr	r3, [pc, #104]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 8008688:	681b      	ldr	r3, [r3, #0]
 800868a:	3304      	adds	r3, #4
 800868c:	4619      	mov	r1, r3
 800868e:	4819      	ldr	r0, [pc, #100]	; (80086f4 <prvAddCurrentTaskToDelayedList+0x98>)
 8008690:	f7fd fe43 	bl	800631a <vListInsertEnd>

		/* Avoid compiler warning when INCLUDE_vTaskSuspend is not 1. */
		( void ) xCanBlockIndefinitely;
	}
	#endif /* INCLUDE_vTaskSuspend */
}
 8008694:	e026      	b.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
			xTimeToWake = xConstTickCount + xTicksToWait;
 8008696:	68fa      	ldr	r2, [r7, #12]
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	4413      	add	r3, r2
 800869c:	60bb      	str	r3, [r7, #8]
			listSET_LIST_ITEM_VALUE( &( pxCurrentTCB->xStateListItem ), xTimeToWake );
 800869e:	4b14      	ldr	r3, [pc, #80]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086a0:	681b      	ldr	r3, [r3, #0]
 80086a2:	68ba      	ldr	r2, [r7, #8]
 80086a4:	605a      	str	r2, [r3, #4]
			if( xTimeToWake < xConstTickCount )
 80086a6:	68ba      	ldr	r2, [r7, #8]
 80086a8:	68fb      	ldr	r3, [r7, #12]
 80086aa:	429a      	cmp	r2, r3
 80086ac:	d209      	bcs.n	80086c2 <prvAddCurrentTaskToDelayedList+0x66>
				vListInsert( pxOverflowDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086ae:	4b12      	ldr	r3, [pc, #72]	; (80086f8 <prvAddCurrentTaskToDelayedList+0x9c>)
 80086b0:	681a      	ldr	r2, [r3, #0]
 80086b2:	4b0f      	ldr	r3, [pc, #60]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086b4:	681b      	ldr	r3, [r3, #0]
 80086b6:	3304      	adds	r3, #4
 80086b8:	4619      	mov	r1, r3
 80086ba:	4610      	mov	r0, r2
 80086bc:	f7fd fe51 	bl	8006362 <vListInsert>
}
 80086c0:	e010      	b.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
				vListInsert( pxDelayedTaskList, &( pxCurrentTCB->xStateListItem ) );
 80086c2:	4b0e      	ldr	r3, [pc, #56]	; (80086fc <prvAddCurrentTaskToDelayedList+0xa0>)
 80086c4:	681a      	ldr	r2, [r3, #0]
 80086c6:	4b0a      	ldr	r3, [pc, #40]	; (80086f0 <prvAddCurrentTaskToDelayedList+0x94>)
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	3304      	adds	r3, #4
 80086cc:	4619      	mov	r1, r3
 80086ce:	4610      	mov	r0, r2
 80086d0:	f7fd fe47 	bl	8006362 <vListInsert>
				if( xTimeToWake < xNextTaskUnblockTime )
 80086d4:	4b0a      	ldr	r3, [pc, #40]	; (8008700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086d6:	681b      	ldr	r3, [r3, #0]
 80086d8:	68ba      	ldr	r2, [r7, #8]
 80086da:	429a      	cmp	r2, r3
 80086dc:	d202      	bcs.n	80086e4 <prvAddCurrentTaskToDelayedList+0x88>
					xNextTaskUnblockTime = xTimeToWake;
 80086de:	4a08      	ldr	r2, [pc, #32]	; (8008700 <prvAddCurrentTaskToDelayedList+0xa4>)
 80086e0:	68bb      	ldr	r3, [r7, #8]
 80086e2:	6013      	str	r3, [r2, #0]
}
 80086e4:	bf00      	nop
 80086e6:	3710      	adds	r7, #16
 80086e8:	46bd      	mov	sp, r7
 80086ea:	bd80      	pop	{r7, pc}
 80086ec:	20006154 	.word	0x20006154
 80086f0:	20005c7c 	.word	0x20005c7c
 80086f4:	2000613c 	.word	0x2000613c
 80086f8:	2000610c 	.word	0x2000610c
 80086fc:	20006108 	.word	0x20006108
 8008700:	20006170 	.word	0x20006170

08008704 <xTimerCreateTimerTask>:
									TimerCallbackFunction_t pxCallbackFunction,
									Timer_t *pxNewTimer ) PRIVILEGED_FUNCTION;
/*-----------------------------------------------------------*/

BaseType_t xTimerCreateTimerTask( void )
{
 8008704:	b580      	push	{r7, lr}
 8008706:	b08a      	sub	sp, #40	; 0x28
 8008708:	af04      	add	r7, sp, #16
BaseType_t xReturn = pdFAIL;
 800870a:	2300      	movs	r3, #0
 800870c:	617b      	str	r3, [r7, #20]

	/* This function is called when the scheduler is started if
	configUSE_TIMERS is set to 1.  Check that the infrastructure used by the
	timer service task has been created/initialised.  If timers have already
	been created then the initialisation will already have been performed. */
	prvCheckForValidListAndQueue();
 800870e:	f000 fb07 	bl	8008d20 <prvCheckForValidListAndQueue>

	if( xTimerQueue != NULL )
 8008712:	4b1c      	ldr	r3, [pc, #112]	; (8008784 <xTimerCreateTimerTask+0x80>)
 8008714:	681b      	ldr	r3, [r3, #0]
 8008716:	2b00      	cmp	r3, #0
 8008718:	d021      	beq.n	800875e <xTimerCreateTimerTask+0x5a>
	{
		#if( configSUPPORT_STATIC_ALLOCATION == 1 )
		{
			StaticTask_t *pxTimerTaskTCBBuffer = NULL;
 800871a:	2300      	movs	r3, #0
 800871c:	60fb      	str	r3, [r7, #12]
			StackType_t *pxTimerTaskStackBuffer = NULL;
 800871e:	2300      	movs	r3, #0
 8008720:	60bb      	str	r3, [r7, #8]
			uint32_t ulTimerTaskStackSize;

			vApplicationGetTimerTaskMemory( &pxTimerTaskTCBBuffer, &pxTimerTaskStackBuffer, &ulTimerTaskStackSize );
 8008722:	1d3a      	adds	r2, r7, #4
 8008724:	f107 0108 	add.w	r1, r7, #8
 8008728:	f107 030c 	add.w	r3, r7, #12
 800872c:	4618      	mov	r0, r3
 800872e:	f7fd fdad 	bl	800628c <vApplicationGetTimerTaskMemory>
			xTimerTaskHandle = xTaskCreateStatic(	prvTimerTask,
 8008732:	6879      	ldr	r1, [r7, #4]
 8008734:	68bb      	ldr	r3, [r7, #8]
 8008736:	68fa      	ldr	r2, [r7, #12]
 8008738:	9202      	str	r2, [sp, #8]
 800873a:	9301      	str	r3, [sp, #4]
 800873c:	2302      	movs	r3, #2
 800873e:	9300      	str	r3, [sp, #0]
 8008740:	2300      	movs	r3, #0
 8008742:	460a      	mov	r2, r1
 8008744:	4910      	ldr	r1, [pc, #64]	; (8008788 <xTimerCreateTimerTask+0x84>)
 8008746:	4811      	ldr	r0, [pc, #68]	; (800878c <xTimerCreateTimerTask+0x88>)
 8008748:	f7fe ff6e 	bl	8007628 <xTaskCreateStatic>
 800874c:	4603      	mov	r3, r0
 800874e:	4a10      	ldr	r2, [pc, #64]	; (8008790 <xTimerCreateTimerTask+0x8c>)
 8008750:	6013      	str	r3, [r2, #0]
													NULL,
													( ( UBaseType_t ) configTIMER_TASK_PRIORITY ) | portPRIVILEGE_BIT,
													pxTimerTaskStackBuffer,
													pxTimerTaskTCBBuffer );

			if( xTimerTaskHandle != NULL )
 8008752:	4b0f      	ldr	r3, [pc, #60]	; (8008790 <xTimerCreateTimerTask+0x8c>)
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	2b00      	cmp	r3, #0
 8008758:	d001      	beq.n	800875e <xTimerCreateTimerTask+0x5a>
			{
				xReturn = pdPASS;
 800875a:	2301      	movs	r3, #1
 800875c:	617b      	str	r3, [r7, #20]
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	configASSERT( xReturn );
 800875e:	697b      	ldr	r3, [r7, #20]
 8008760:	2b00      	cmp	r3, #0
 8008762:	d10a      	bne.n	800877a <xTimerCreateTimerTask+0x76>
	__asm volatile
 8008764:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008768:	f383 8811 	msr	BASEPRI, r3
 800876c:	f3bf 8f6f 	isb	sy
 8008770:	f3bf 8f4f 	dsb	sy
 8008774:	613b      	str	r3, [r7, #16]
}
 8008776:	bf00      	nop
 8008778:	e7fe      	b.n	8008778 <xTimerCreateTimerTask+0x74>
	return xReturn;
 800877a:	697b      	ldr	r3, [r7, #20]
}
 800877c:	4618      	mov	r0, r3
 800877e:	3718      	adds	r7, #24
 8008780:	46bd      	mov	sp, r7
 8008782:	bd80      	pop	{r7, pc}
 8008784:	200061ac 	.word	0x200061ac
 8008788:	08018180 	.word	0x08018180
 800878c:	080088c9 	.word	0x080088c9
 8008790:	200061b0 	.word	0x200061b0

08008794 <xTimerGenericCommand>:
	}
}
/*-----------------------------------------------------------*/

BaseType_t xTimerGenericCommand( TimerHandle_t xTimer, const BaseType_t xCommandID, const TickType_t xOptionalValue, BaseType_t * const pxHigherPriorityTaskWoken, const TickType_t xTicksToWait )
{
 8008794:	b580      	push	{r7, lr}
 8008796:	b08a      	sub	sp, #40	; 0x28
 8008798:	af00      	add	r7, sp, #0
 800879a:	60f8      	str	r0, [r7, #12]
 800879c:	60b9      	str	r1, [r7, #8]
 800879e:	607a      	str	r2, [r7, #4]
 80087a0:	603b      	str	r3, [r7, #0]
BaseType_t xReturn = pdFAIL;
 80087a2:	2300      	movs	r3, #0
 80087a4:	627b      	str	r3, [r7, #36]	; 0x24
DaemonTaskMessage_t xMessage;

	configASSERT( xTimer );
 80087a6:	68fb      	ldr	r3, [r7, #12]
 80087a8:	2b00      	cmp	r3, #0
 80087aa:	d10a      	bne.n	80087c2 <xTimerGenericCommand+0x2e>
	__asm volatile
 80087ac:	f04f 0350 	mov.w	r3, #80	; 0x50
 80087b0:	f383 8811 	msr	BASEPRI, r3
 80087b4:	f3bf 8f6f 	isb	sy
 80087b8:	f3bf 8f4f 	dsb	sy
 80087bc:	623b      	str	r3, [r7, #32]
}
 80087be:	bf00      	nop
 80087c0:	e7fe      	b.n	80087c0 <xTimerGenericCommand+0x2c>

	/* Send a message to the timer service task to perform a particular action
	on a particular timer definition. */
	if( xTimerQueue != NULL )
 80087c2:	4b1a      	ldr	r3, [pc, #104]	; (800882c <xTimerGenericCommand+0x98>)
 80087c4:	681b      	ldr	r3, [r3, #0]
 80087c6:	2b00      	cmp	r3, #0
 80087c8:	d02a      	beq.n	8008820 <xTimerGenericCommand+0x8c>
	{
		/* Send a command to the timer service task to start the xTimer timer. */
		xMessage.xMessageID = xCommandID;
 80087ca:	68bb      	ldr	r3, [r7, #8]
 80087cc:	613b      	str	r3, [r7, #16]
		xMessage.u.xTimerParameters.xMessageValue = xOptionalValue;
 80087ce:	687b      	ldr	r3, [r7, #4]
 80087d0:	617b      	str	r3, [r7, #20]
		xMessage.u.xTimerParameters.pxTimer = xTimer;
 80087d2:	68fb      	ldr	r3, [r7, #12]
 80087d4:	61bb      	str	r3, [r7, #24]

		if( xCommandID < tmrFIRST_FROM_ISR_COMMAND )
 80087d6:	68bb      	ldr	r3, [r7, #8]
 80087d8:	2b05      	cmp	r3, #5
 80087da:	dc18      	bgt.n	800880e <xTimerGenericCommand+0x7a>
		{
			if( xTaskGetSchedulerState() == taskSCHEDULER_RUNNING )
 80087dc:	f7ff fdb4 	bl	8008348 <xTaskGetSchedulerState>
 80087e0:	4603      	mov	r3, r0
 80087e2:	2b02      	cmp	r3, #2
 80087e4:	d109      	bne.n	80087fa <xTimerGenericCommand+0x66>
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, xTicksToWait );
 80087e6:	4b11      	ldr	r3, [pc, #68]	; (800882c <xTimerGenericCommand+0x98>)
 80087e8:	6818      	ldr	r0, [r3, #0]
 80087ea:	f107 0110 	add.w	r1, r7, #16
 80087ee:	2300      	movs	r3, #0
 80087f0:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80087f2:	f7fe f877 	bl	80068e4 <xQueueGenericSend>
 80087f6:	6278      	str	r0, [r7, #36]	; 0x24
 80087f8:	e012      	b.n	8008820 <xTimerGenericCommand+0x8c>
			}
			else
			{
				xReturn = xQueueSendToBack( xTimerQueue, &xMessage, tmrNO_DELAY );
 80087fa:	4b0c      	ldr	r3, [pc, #48]	; (800882c <xTimerGenericCommand+0x98>)
 80087fc:	6818      	ldr	r0, [r3, #0]
 80087fe:	f107 0110 	add.w	r1, r7, #16
 8008802:	2300      	movs	r3, #0
 8008804:	2200      	movs	r2, #0
 8008806:	f7fe f86d 	bl	80068e4 <xQueueGenericSend>
 800880a:	6278      	str	r0, [r7, #36]	; 0x24
 800880c:	e008      	b.n	8008820 <xTimerGenericCommand+0x8c>
			}
		}
		else
		{
			xReturn = xQueueSendToBackFromISR( xTimerQueue, &xMessage, pxHigherPriorityTaskWoken );
 800880e:	4b07      	ldr	r3, [pc, #28]	; (800882c <xTimerGenericCommand+0x98>)
 8008810:	6818      	ldr	r0, [r3, #0]
 8008812:	f107 0110 	add.w	r1, r7, #16
 8008816:	2300      	movs	r3, #0
 8008818:	683a      	ldr	r2, [r7, #0]
 800881a:	f7fe f961 	bl	8006ae0 <xQueueGenericSendFromISR>
 800881e:	6278      	str	r0, [r7, #36]	; 0x24
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}

	return xReturn;
 8008820:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 8008822:	4618      	mov	r0, r3
 8008824:	3728      	adds	r7, #40	; 0x28
 8008826:	46bd      	mov	sp, r7
 8008828:	bd80      	pop	{r7, pc}
 800882a:	bf00      	nop
 800882c:	200061ac 	.word	0x200061ac

08008830 <prvProcessExpiredTimer>:
	return pxTimer->pcTimerName;
}
/*-----------------------------------------------------------*/

static void prvProcessExpiredTimer( const TickType_t xNextExpireTime, const TickType_t xTimeNow )
{
 8008830:	b580      	push	{r7, lr}
 8008832:	b088      	sub	sp, #32
 8008834:	af02      	add	r7, sp, #8
 8008836:	6078      	str	r0, [r7, #4]
 8008838:	6039      	str	r1, [r7, #0]
BaseType_t xResult;
Timer_t * const pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 800883a:	4b22      	ldr	r3, [pc, #136]	; (80088c4 <prvProcessExpiredTimer+0x94>)
 800883c:	681b      	ldr	r3, [r3, #0]
 800883e:	68db      	ldr	r3, [r3, #12]
 8008840:	68db      	ldr	r3, [r3, #12]
 8008842:	617b      	str	r3, [r7, #20]

	/* Remove the timer from the list of active timers.  A check has already
	been performed to ensure the list is not empty. */
	( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008844:	697b      	ldr	r3, [r7, #20]
 8008846:	3304      	adds	r3, #4
 8008848:	4618      	mov	r0, r3
 800884a:	f7fd fdc3 	bl	80063d4 <uxListRemove>
	traceTIMER_EXPIRED( pxTimer );

	/* If the timer is an auto-reload timer then calculate the next
	expiry time and re-insert the timer in the list of active timers. */
	if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 800884e:	697b      	ldr	r3, [r7, #20]
 8008850:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008854:	f003 0304 	and.w	r3, r3, #4
 8008858:	2b00      	cmp	r3, #0
 800885a:	d022      	beq.n	80088a2 <prvProcessExpiredTimer+0x72>
	{
		/* The timer is inserted into a list using a time relative to anything
		other than the current time.  It will therefore be inserted into the
		correct list relative to the time this task thinks it is now. */
		if( prvInsertTimerInActiveList( pxTimer, ( xNextExpireTime + pxTimer->xTimerPeriodInTicks ), xTimeNow, xNextExpireTime ) != pdFALSE )
 800885c:	697b      	ldr	r3, [r7, #20]
 800885e:	699a      	ldr	r2, [r3, #24]
 8008860:	687b      	ldr	r3, [r7, #4]
 8008862:	18d1      	adds	r1, r2, r3
 8008864:	687b      	ldr	r3, [r7, #4]
 8008866:	683a      	ldr	r2, [r7, #0]
 8008868:	6978      	ldr	r0, [r7, #20]
 800886a:	f000 f8d1 	bl	8008a10 <prvInsertTimerInActiveList>
 800886e:	4603      	mov	r3, r0
 8008870:	2b00      	cmp	r3, #0
 8008872:	d01f      	beq.n	80088b4 <prvProcessExpiredTimer+0x84>
		{
			/* The timer expired before it was added to the active timer
			list.  Reload it now.  */
			xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008874:	2300      	movs	r3, #0
 8008876:	9300      	str	r3, [sp, #0]
 8008878:	2300      	movs	r3, #0
 800887a:	687a      	ldr	r2, [r7, #4]
 800887c:	2100      	movs	r1, #0
 800887e:	6978      	ldr	r0, [r7, #20]
 8008880:	f7ff ff88 	bl	8008794 <xTimerGenericCommand>
 8008884:	6138      	str	r0, [r7, #16]
			configASSERT( xResult );
 8008886:	693b      	ldr	r3, [r7, #16]
 8008888:	2b00      	cmp	r3, #0
 800888a:	d113      	bne.n	80088b4 <prvProcessExpiredTimer+0x84>
	__asm volatile
 800888c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008890:	f383 8811 	msr	BASEPRI, r3
 8008894:	f3bf 8f6f 	isb	sy
 8008898:	f3bf 8f4f 	dsb	sy
 800889c:	60fb      	str	r3, [r7, #12]
}
 800889e:	bf00      	nop
 80088a0:	e7fe      	b.n	80088a0 <prvProcessExpiredTimer+0x70>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	else
	{
		pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 80088a2:	697b      	ldr	r3, [r7, #20]
 80088a4:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 80088a8:	f023 0301 	bic.w	r3, r3, #1
 80088ac:	b2da      	uxtb	r2, r3
 80088ae:	697b      	ldr	r3, [r7, #20]
 80088b0:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
		mtCOVERAGE_TEST_MARKER();
	}

	/* Call the timer callback. */
	pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 80088b4:	697b      	ldr	r3, [r7, #20]
 80088b6:	6a1b      	ldr	r3, [r3, #32]
 80088b8:	6978      	ldr	r0, [r7, #20]
 80088ba:	4798      	blx	r3
}
 80088bc:	bf00      	nop
 80088be:	3718      	adds	r7, #24
 80088c0:	46bd      	mov	sp, r7
 80088c2:	bd80      	pop	{r7, pc}
 80088c4:	200061a4 	.word	0x200061a4

080088c8 <prvTimerTask>:
/*-----------------------------------------------------------*/

static portTASK_FUNCTION( prvTimerTask, pvParameters )
{
 80088c8:	b580      	push	{r7, lr}
 80088ca:	b084      	sub	sp, #16
 80088cc:	af00      	add	r7, sp, #0
 80088ce:	6078      	str	r0, [r7, #4]

	for( ;; )
	{
		/* Query the timers list to see if it contains any timers, and if so,
		obtain the time at which the next timer will expire. */
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088d0:	f107 0308 	add.w	r3, r7, #8
 80088d4:	4618      	mov	r0, r3
 80088d6:	f000 f857 	bl	8008988 <prvGetNextExpireTime>
 80088da:	60f8      	str	r0, [r7, #12]

		/* If a timer has expired, process it.  Otherwise, block this task
		until either a timer does expire, or a command is received. */
		prvProcessTimerOrBlockTask( xNextExpireTime, xListWasEmpty );
 80088dc:	68bb      	ldr	r3, [r7, #8]
 80088de:	4619      	mov	r1, r3
 80088e0:	68f8      	ldr	r0, [r7, #12]
 80088e2:	f000 f803 	bl	80088ec <prvProcessTimerOrBlockTask>

		/* Empty the command queue. */
		prvProcessReceivedCommands();
 80088e6:	f000 f8d5 	bl	8008a94 <prvProcessReceivedCommands>
		xNextExpireTime = prvGetNextExpireTime( &xListWasEmpty );
 80088ea:	e7f1      	b.n	80088d0 <prvTimerTask+0x8>

080088ec <prvProcessTimerOrBlockTask>:
	}
}
/*-----------------------------------------------------------*/

static void prvProcessTimerOrBlockTask( const TickType_t xNextExpireTime, BaseType_t xListWasEmpty )
{
 80088ec:	b580      	push	{r7, lr}
 80088ee:	b084      	sub	sp, #16
 80088f0:	af00      	add	r7, sp, #0
 80088f2:	6078      	str	r0, [r7, #4]
 80088f4:	6039      	str	r1, [r7, #0]
TickType_t xTimeNow;
BaseType_t xTimerListsWereSwitched;

	vTaskSuspendAll();
 80088f6:	f7ff f8f3 	bl	8007ae0 <vTaskSuspendAll>
		/* Obtain the time now to make an assessment as to whether the timer
		has expired or not.  If obtaining the time causes the lists to switch
		then don't process this timer as any timers that remained in the list
		when the lists were switched will have been processed within the
		prvSampleTimeNow() function. */
		xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 80088fa:	f107 0308 	add.w	r3, r7, #8
 80088fe:	4618      	mov	r0, r3
 8008900:	f000 f866 	bl	80089d0 <prvSampleTimeNow>
 8008904:	60f8      	str	r0, [r7, #12]
		if( xTimerListsWereSwitched == pdFALSE )
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	2b00      	cmp	r3, #0
 800890a:	d130      	bne.n	800896e <prvProcessTimerOrBlockTask+0x82>
		{
			/* The tick count has not overflowed, has the timer expired? */
			if( ( xListWasEmpty == pdFALSE ) && ( xNextExpireTime <= xTimeNow ) )
 800890c:	683b      	ldr	r3, [r7, #0]
 800890e:	2b00      	cmp	r3, #0
 8008910:	d10a      	bne.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
 8008912:	687a      	ldr	r2, [r7, #4]
 8008914:	68fb      	ldr	r3, [r7, #12]
 8008916:	429a      	cmp	r2, r3
 8008918:	d806      	bhi.n	8008928 <prvProcessTimerOrBlockTask+0x3c>
			{
				( void ) xTaskResumeAll();
 800891a:	f7ff f8ef 	bl	8007afc <xTaskResumeAll>
				prvProcessExpiredTimer( xNextExpireTime, xTimeNow );
 800891e:	68f9      	ldr	r1, [r7, #12]
 8008920:	6878      	ldr	r0, [r7, #4]
 8008922:	f7ff ff85 	bl	8008830 <prvProcessExpiredTimer>
		else
		{
			( void ) xTaskResumeAll();
		}
	}
}
 8008926:	e024      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
				if( xListWasEmpty != pdFALSE )
 8008928:	683b      	ldr	r3, [r7, #0]
 800892a:	2b00      	cmp	r3, #0
 800892c:	d008      	beq.n	8008940 <prvProcessTimerOrBlockTask+0x54>
					xListWasEmpty = listLIST_IS_EMPTY( pxOverflowTimerList );
 800892e:	4b13      	ldr	r3, [pc, #76]	; (800897c <prvProcessTimerOrBlockTask+0x90>)
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	681b      	ldr	r3, [r3, #0]
 8008934:	2b00      	cmp	r3, #0
 8008936:	d101      	bne.n	800893c <prvProcessTimerOrBlockTask+0x50>
 8008938:	2301      	movs	r3, #1
 800893a:	e000      	b.n	800893e <prvProcessTimerOrBlockTask+0x52>
 800893c:	2300      	movs	r3, #0
 800893e:	603b      	str	r3, [r7, #0]
				vQueueWaitForMessageRestricted( xTimerQueue, ( xNextExpireTime - xTimeNow ), xListWasEmpty );
 8008940:	4b0f      	ldr	r3, [pc, #60]	; (8008980 <prvProcessTimerOrBlockTask+0x94>)
 8008942:	6818      	ldr	r0, [r3, #0]
 8008944:	687a      	ldr	r2, [r7, #4]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	1ad3      	subs	r3, r2, r3
 800894a:	683a      	ldr	r2, [r7, #0]
 800894c:	4619      	mov	r1, r3
 800894e:	f7fe fe37 	bl	80075c0 <vQueueWaitForMessageRestricted>
				if( xTaskResumeAll() == pdFALSE )
 8008952:	f7ff f8d3 	bl	8007afc <xTaskResumeAll>
 8008956:	4603      	mov	r3, r0
 8008958:	2b00      	cmp	r3, #0
 800895a:	d10a      	bne.n	8008972 <prvProcessTimerOrBlockTask+0x86>
					portYIELD_WITHIN_API();
 800895c:	4b09      	ldr	r3, [pc, #36]	; (8008984 <prvProcessTimerOrBlockTask+0x98>)
 800895e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8008962:	601a      	str	r2, [r3, #0]
 8008964:	f3bf 8f4f 	dsb	sy
 8008968:	f3bf 8f6f 	isb	sy
}
 800896c:	e001      	b.n	8008972 <prvProcessTimerOrBlockTask+0x86>
			( void ) xTaskResumeAll();
 800896e:	f7ff f8c5 	bl	8007afc <xTaskResumeAll>
}
 8008972:	bf00      	nop
 8008974:	3710      	adds	r7, #16
 8008976:	46bd      	mov	sp, r7
 8008978:	bd80      	pop	{r7, pc}
 800897a:	bf00      	nop
 800897c:	200061a8 	.word	0x200061a8
 8008980:	200061ac 	.word	0x200061ac
 8008984:	e000ed04 	.word	0xe000ed04

08008988 <prvGetNextExpireTime>:
/*-----------------------------------------------------------*/

static TickType_t prvGetNextExpireTime( BaseType_t * const pxListWasEmpty )
{
 8008988:	b480      	push	{r7}
 800898a:	b085      	sub	sp, #20
 800898c:	af00      	add	r7, sp, #0
 800898e:	6078      	str	r0, [r7, #4]
	the timer with the nearest expiry time will expire.  If there are no
	active timers then just set the next expire time to 0.  That will cause
	this task to unblock when the tick count overflows, at which point the
	timer lists will be switched and the next expiry time can be
	re-assessed.  */
	*pxListWasEmpty = listLIST_IS_EMPTY( pxCurrentTimerList );
 8008990:	4b0e      	ldr	r3, [pc, #56]	; (80089cc <prvGetNextExpireTime+0x44>)
 8008992:	681b      	ldr	r3, [r3, #0]
 8008994:	681b      	ldr	r3, [r3, #0]
 8008996:	2b00      	cmp	r3, #0
 8008998:	d101      	bne.n	800899e <prvGetNextExpireTime+0x16>
 800899a:	2201      	movs	r2, #1
 800899c:	e000      	b.n	80089a0 <prvGetNextExpireTime+0x18>
 800899e:	2200      	movs	r2, #0
 80089a0:	687b      	ldr	r3, [r7, #4]
 80089a2:	601a      	str	r2, [r3, #0]
	if( *pxListWasEmpty == pdFALSE )
 80089a4:	687b      	ldr	r3, [r7, #4]
 80089a6:	681b      	ldr	r3, [r3, #0]
 80089a8:	2b00      	cmp	r3, #0
 80089aa:	d105      	bne.n	80089b8 <prvGetNextExpireTime+0x30>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 80089ac:	4b07      	ldr	r3, [pc, #28]	; (80089cc <prvGetNextExpireTime+0x44>)
 80089ae:	681b      	ldr	r3, [r3, #0]
 80089b0:	68db      	ldr	r3, [r3, #12]
 80089b2:	681b      	ldr	r3, [r3, #0]
 80089b4:	60fb      	str	r3, [r7, #12]
 80089b6:	e001      	b.n	80089bc <prvGetNextExpireTime+0x34>
	}
	else
	{
		/* Ensure the task unblocks when the tick count rolls over. */
		xNextExpireTime = ( TickType_t ) 0U;
 80089b8:	2300      	movs	r3, #0
 80089ba:	60fb      	str	r3, [r7, #12]
	}

	return xNextExpireTime;
 80089bc:	68fb      	ldr	r3, [r7, #12]
}
 80089be:	4618      	mov	r0, r3
 80089c0:	3714      	adds	r7, #20
 80089c2:	46bd      	mov	sp, r7
 80089c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089c8:	4770      	bx	lr
 80089ca:	bf00      	nop
 80089cc:	200061a4 	.word	0x200061a4

080089d0 <prvSampleTimeNow>:
/*-----------------------------------------------------------*/

static TickType_t prvSampleTimeNow( BaseType_t * const pxTimerListsWereSwitched )
{
 80089d0:	b580      	push	{r7, lr}
 80089d2:	b084      	sub	sp, #16
 80089d4:	af00      	add	r7, sp, #0
 80089d6:	6078      	str	r0, [r7, #4]
TickType_t xTimeNow;
PRIVILEGED_DATA static TickType_t xLastTime = ( TickType_t ) 0U; /*lint !e956 Variable is only accessible to one task. */

	xTimeNow = xTaskGetTickCount();
 80089d8:	f7ff f92e 	bl	8007c38 <xTaskGetTickCount>
 80089dc:	60f8      	str	r0, [r7, #12]

	if( xTimeNow < xLastTime )
 80089de:	4b0b      	ldr	r3, [pc, #44]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089e0:	681b      	ldr	r3, [r3, #0]
 80089e2:	68fa      	ldr	r2, [r7, #12]
 80089e4:	429a      	cmp	r2, r3
 80089e6:	d205      	bcs.n	80089f4 <prvSampleTimeNow+0x24>
	{
		prvSwitchTimerLists();
 80089e8:	f000 f936 	bl	8008c58 <prvSwitchTimerLists>
		*pxTimerListsWereSwitched = pdTRUE;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	2201      	movs	r2, #1
 80089f0:	601a      	str	r2, [r3, #0]
 80089f2:	e002      	b.n	80089fa <prvSampleTimeNow+0x2a>
	}
	else
	{
		*pxTimerListsWereSwitched = pdFALSE;
 80089f4:	687b      	ldr	r3, [r7, #4]
 80089f6:	2200      	movs	r2, #0
 80089f8:	601a      	str	r2, [r3, #0]
	}

	xLastTime = xTimeNow;
 80089fa:	4a04      	ldr	r2, [pc, #16]	; (8008a0c <prvSampleTimeNow+0x3c>)
 80089fc:	68fb      	ldr	r3, [r7, #12]
 80089fe:	6013      	str	r3, [r2, #0]

	return xTimeNow;
 8008a00:	68fb      	ldr	r3, [r7, #12]
}
 8008a02:	4618      	mov	r0, r3
 8008a04:	3710      	adds	r7, #16
 8008a06:	46bd      	mov	sp, r7
 8008a08:	bd80      	pop	{r7, pc}
 8008a0a:	bf00      	nop
 8008a0c:	200061b4 	.word	0x200061b4

08008a10 <prvInsertTimerInActiveList>:
/*-----------------------------------------------------------*/

static BaseType_t prvInsertTimerInActiveList( Timer_t * const pxTimer, const TickType_t xNextExpiryTime, const TickType_t xTimeNow, const TickType_t xCommandTime )
{
 8008a10:	b580      	push	{r7, lr}
 8008a12:	b086      	sub	sp, #24
 8008a14:	af00      	add	r7, sp, #0
 8008a16:	60f8      	str	r0, [r7, #12]
 8008a18:	60b9      	str	r1, [r7, #8]
 8008a1a:	607a      	str	r2, [r7, #4]
 8008a1c:	603b      	str	r3, [r7, #0]
BaseType_t xProcessTimerNow = pdFALSE;
 8008a1e:	2300      	movs	r3, #0
 8008a20:	617b      	str	r3, [r7, #20]

	listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xNextExpiryTime );
 8008a22:	68fb      	ldr	r3, [r7, #12]
 8008a24:	68ba      	ldr	r2, [r7, #8]
 8008a26:	605a      	str	r2, [r3, #4]
	listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008a28:	68fb      	ldr	r3, [r7, #12]
 8008a2a:	68fa      	ldr	r2, [r7, #12]
 8008a2c:	611a      	str	r2, [r3, #16]

	if( xNextExpiryTime <= xTimeNow )
 8008a2e:	68ba      	ldr	r2, [r7, #8]
 8008a30:	687b      	ldr	r3, [r7, #4]
 8008a32:	429a      	cmp	r2, r3
 8008a34:	d812      	bhi.n	8008a5c <prvInsertTimerInActiveList+0x4c>
	{
		/* Has the expiry time elapsed between the command to start/reset a
		timer was issued, and the time the command was processed? */
		if( ( ( TickType_t ) ( xTimeNow - xCommandTime ) ) >= pxTimer->xTimerPeriodInTicks ) /*lint !e961 MISRA exception as the casts are only redundant for some ports. */
 8008a36:	687a      	ldr	r2, [r7, #4]
 8008a38:	683b      	ldr	r3, [r7, #0]
 8008a3a:	1ad2      	subs	r2, r2, r3
 8008a3c:	68fb      	ldr	r3, [r7, #12]
 8008a3e:	699b      	ldr	r3, [r3, #24]
 8008a40:	429a      	cmp	r2, r3
 8008a42:	d302      	bcc.n	8008a4a <prvInsertTimerInActiveList+0x3a>
		{
			/* The time between a command being issued and the command being
			processed actually exceeds the timers period.  */
			xProcessTimerNow = pdTRUE;
 8008a44:	2301      	movs	r3, #1
 8008a46:	617b      	str	r3, [r7, #20]
 8008a48:	e01b      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxOverflowTimerList, &( pxTimer->xTimerListItem ) );
 8008a4a:	4b10      	ldr	r3, [pc, #64]	; (8008a8c <prvInsertTimerInActiveList+0x7c>)
 8008a4c:	681a      	ldr	r2, [r3, #0]
 8008a4e:	68fb      	ldr	r3, [r7, #12]
 8008a50:	3304      	adds	r3, #4
 8008a52:	4619      	mov	r1, r3
 8008a54:	4610      	mov	r0, r2
 8008a56:	f7fd fc84 	bl	8006362 <vListInsert>
 8008a5a:	e012      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
	}
	else
	{
		if( ( xTimeNow < xCommandTime ) && ( xNextExpiryTime >= xCommandTime ) )
 8008a5c:	687a      	ldr	r2, [r7, #4]
 8008a5e:	683b      	ldr	r3, [r7, #0]
 8008a60:	429a      	cmp	r2, r3
 8008a62:	d206      	bcs.n	8008a72 <prvInsertTimerInActiveList+0x62>
 8008a64:	68ba      	ldr	r2, [r7, #8]
 8008a66:	683b      	ldr	r3, [r7, #0]
 8008a68:	429a      	cmp	r2, r3
 8008a6a:	d302      	bcc.n	8008a72 <prvInsertTimerInActiveList+0x62>
		{
			/* If, since the command was issued, the tick count has overflowed
			but the expiry time has not, then the timer must have already passed
			its expiry time and should be processed immediately. */
			xProcessTimerNow = pdTRUE;
 8008a6c:	2301      	movs	r3, #1
 8008a6e:	617b      	str	r3, [r7, #20]
 8008a70:	e007      	b.n	8008a82 <prvInsertTimerInActiveList+0x72>
		}
		else
		{
			vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008a72:	4b07      	ldr	r3, [pc, #28]	; (8008a90 <prvInsertTimerInActiveList+0x80>)
 8008a74:	681a      	ldr	r2, [r3, #0]
 8008a76:	68fb      	ldr	r3, [r7, #12]
 8008a78:	3304      	adds	r3, #4
 8008a7a:	4619      	mov	r1, r3
 8008a7c:	4610      	mov	r0, r2
 8008a7e:	f7fd fc70 	bl	8006362 <vListInsert>
		}
	}

	return xProcessTimerNow;
 8008a82:	697b      	ldr	r3, [r7, #20]
}
 8008a84:	4618      	mov	r0, r3
 8008a86:	3718      	adds	r7, #24
 8008a88:	46bd      	mov	sp, r7
 8008a8a:	bd80      	pop	{r7, pc}
 8008a8c:	200061a8 	.word	0x200061a8
 8008a90:	200061a4 	.word	0x200061a4

08008a94 <prvProcessReceivedCommands>:
/*-----------------------------------------------------------*/

static void	prvProcessReceivedCommands( void )
{
 8008a94:	b580      	push	{r7, lr}
 8008a96:	b08e      	sub	sp, #56	; 0x38
 8008a98:	af02      	add	r7, sp, #8
DaemonTaskMessage_t xMessage;
Timer_t *pxTimer;
BaseType_t xTimerListsWereSwitched, xResult;
TickType_t xTimeNow;

	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008a9a:	e0ca      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
	{
		#if ( INCLUDE_xTimerPendFunctionCall == 1 )
		{
			/* Negative commands are pended function calls rather than timer
			commands. */
			if( xMessage.xMessageID < ( BaseType_t ) 0 )
 8008a9c:	687b      	ldr	r3, [r7, #4]
 8008a9e:	2b00      	cmp	r3, #0
 8008aa0:	da18      	bge.n	8008ad4 <prvProcessReceivedCommands+0x40>
			{
				const CallbackParameters_t * const pxCallback = &( xMessage.u.xCallbackParameters );
 8008aa2:	1d3b      	adds	r3, r7, #4
 8008aa4:	3304      	adds	r3, #4
 8008aa6:	62fb      	str	r3, [r7, #44]	; 0x2c

				/* The timer uses the xCallbackParameters member to request a
				callback be executed.  Check the callback is not NULL. */
				configASSERT( pxCallback );
 8008aa8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008aaa:	2b00      	cmp	r3, #0
 8008aac:	d10a      	bne.n	8008ac4 <prvProcessReceivedCommands+0x30>
	__asm volatile
 8008aae:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ab2:	f383 8811 	msr	BASEPRI, r3
 8008ab6:	f3bf 8f6f 	isb	sy
 8008aba:	f3bf 8f4f 	dsb	sy
 8008abe:	61fb      	str	r3, [r7, #28]
}
 8008ac0:	bf00      	nop
 8008ac2:	e7fe      	b.n	8008ac2 <prvProcessReceivedCommands+0x2e>

				/* Call the function. */
				pxCallback->pxCallbackFunction( pxCallback->pvParameter1, pxCallback->ulParameter2 );
 8008ac4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8008ac6:	681b      	ldr	r3, [r3, #0]
 8008ac8:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008aca:	6850      	ldr	r0, [r2, #4]
 8008acc:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8008ace:	6892      	ldr	r2, [r2, #8]
 8008ad0:	4611      	mov	r1, r2
 8008ad2:	4798      	blx	r3
		}
		#endif /* INCLUDE_xTimerPendFunctionCall */

		/* Commands that are positive are timer commands rather than pended
		function calls. */
		if( xMessage.xMessageID >= ( BaseType_t ) 0 )
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	2b00      	cmp	r3, #0
 8008ad8:	f2c0 80ab 	blt.w	8008c32 <prvProcessReceivedCommands+0x19e>
		{
			/* The messages uses the xTimerParameters member to work on a
			software timer. */
			pxTimer = xMessage.u.xTimerParameters.pxTimer;
 8008adc:	68fb      	ldr	r3, [r7, #12]
 8008ade:	62bb      	str	r3, [r7, #40]	; 0x28

			if( listIS_CONTAINED_WITHIN( NULL, &( pxTimer->xTimerListItem ) ) == pdFALSE ) /*lint !e961. The cast is only redundant when NULL is passed into the macro. */
 8008ae0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008ae2:	695b      	ldr	r3, [r3, #20]
 8008ae4:	2b00      	cmp	r3, #0
 8008ae6:	d004      	beq.n	8008af2 <prvProcessReceivedCommands+0x5e>
			{
				/* The timer is in a list, remove it. */
				( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008ae8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008aea:	3304      	adds	r3, #4
 8008aec:	4618      	mov	r0, r3
 8008aee:	f7fd fc71 	bl	80063d4 <uxListRemove>
			it must be present in the function call.  prvSampleTimeNow() must be
			called after the message is received from xTimerQueue so there is no
			possibility of a higher priority task adding a message to the message
			queue with a time that is ahead of the timer daemon task (because it
			pre-empted the timer daemon task after the xTimeNow value was set). */
			xTimeNow = prvSampleTimeNow( &xTimerListsWereSwitched );
 8008af2:	463b      	mov	r3, r7
 8008af4:	4618      	mov	r0, r3
 8008af6:	f7ff ff6b 	bl	80089d0 <prvSampleTimeNow>
 8008afa:	6278      	str	r0, [r7, #36]	; 0x24

			switch( xMessage.xMessageID )
 8008afc:	687b      	ldr	r3, [r7, #4]
 8008afe:	2b09      	cmp	r3, #9
 8008b00:	f200 8096 	bhi.w	8008c30 <prvProcessReceivedCommands+0x19c>
 8008b04:	a201      	add	r2, pc, #4	; (adr r2, 8008b0c <prvProcessReceivedCommands+0x78>)
 8008b06:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8008b0a:	bf00      	nop
 8008b0c:	08008b35 	.word	0x08008b35
 8008b10:	08008b35 	.word	0x08008b35
 8008b14:	08008b35 	.word	0x08008b35
 8008b18:	08008ba9 	.word	0x08008ba9
 8008b1c:	08008bbd 	.word	0x08008bbd
 8008b20:	08008c07 	.word	0x08008c07
 8008b24:	08008b35 	.word	0x08008b35
 8008b28:	08008b35 	.word	0x08008b35
 8008b2c:	08008ba9 	.word	0x08008ba9
 8008b30:	08008bbd 	.word	0x08008bbd
				case tmrCOMMAND_START_FROM_ISR :
				case tmrCOMMAND_RESET :
				case tmrCOMMAND_RESET_FROM_ISR :
				case tmrCOMMAND_START_DONT_TRACE :
					/* Start or restart a timer. */
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008b34:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b36:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b3a:	f043 0301 	orr.w	r3, r3, #1
 8008b3e:	b2da      	uxtb	r2, r3
 8008b40:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b42:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					if( prvInsertTimerInActiveList( pxTimer,  xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, xTimeNow, xMessage.u.xTimerParameters.xMessageValue ) != pdFALSE )
 8008b46:	68ba      	ldr	r2, [r7, #8]
 8008b48:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b4a:	699b      	ldr	r3, [r3, #24]
 8008b4c:	18d1      	adds	r1, r2, r3
 8008b4e:	68bb      	ldr	r3, [r7, #8]
 8008b50:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008b52:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b54:	f7ff ff5c 	bl	8008a10 <prvInsertTimerInActiveList>
 8008b58:	4603      	mov	r3, r0
 8008b5a:	2b00      	cmp	r3, #0
 8008b5c:	d069      	beq.n	8008c32 <prvProcessReceivedCommands+0x19e>
					{
						/* The timer expired before it was added to the active
						timer list.  Process it now. */
						pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008b5e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b60:	6a1b      	ldr	r3, [r3, #32]
 8008b62:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b64:	4798      	blx	r3
						traceTIMER_EXPIRED( pxTimer );

						if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008b66:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b68:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008b6c:	f003 0304 	and.w	r3, r3, #4
 8008b70:	2b00      	cmp	r3, #0
 8008b72:	d05e      	beq.n	8008c32 <prvProcessReceivedCommands+0x19e>
						{
							xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xMessage.u.xTimerParameters.xMessageValue + pxTimer->xTimerPeriodInTicks, NULL, tmrNO_DELAY );
 8008b74:	68ba      	ldr	r2, [r7, #8]
 8008b76:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008b78:	699b      	ldr	r3, [r3, #24]
 8008b7a:	441a      	add	r2, r3
 8008b7c:	2300      	movs	r3, #0
 8008b7e:	9300      	str	r3, [sp, #0]
 8008b80:	2300      	movs	r3, #0
 8008b82:	2100      	movs	r1, #0
 8008b84:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008b86:	f7ff fe05 	bl	8008794 <xTimerGenericCommand>
 8008b8a:	6238      	str	r0, [r7, #32]
							configASSERT( xResult );
 8008b8c:	6a3b      	ldr	r3, [r7, #32]
 8008b8e:	2b00      	cmp	r3, #0
 8008b90:	d14f      	bne.n	8008c32 <prvProcessReceivedCommands+0x19e>
	__asm volatile
 8008b92:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008b96:	f383 8811 	msr	BASEPRI, r3
 8008b9a:	f3bf 8f6f 	isb	sy
 8008b9e:	f3bf 8f4f 	dsb	sy
 8008ba2:	61bb      	str	r3, [r7, #24]
}
 8008ba4:	bf00      	nop
 8008ba6:	e7fe      	b.n	8008ba6 <prvProcessReceivedCommands+0x112>
					break;

				case tmrCOMMAND_STOP :
				case tmrCOMMAND_STOP_FROM_ISR :
					/* The timer has already been removed from the active list. */
					pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008ba8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008baa:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bae:	f023 0301 	bic.w	r3, r3, #1
 8008bb2:	b2da      	uxtb	r2, r3
 8008bb4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bb6:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					break;
 8008bba:	e03a      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>

				case tmrCOMMAND_CHANGE_PERIOD :
				case tmrCOMMAND_CHANGE_PERIOD_FROM_ISR :
					pxTimer->ucStatus |= tmrSTATUS_IS_ACTIVE;
 8008bbc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bbe:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008bc2:	f043 0301 	orr.w	r3, r3, #1
 8008bc6:	b2da      	uxtb	r2, r3
 8008bc8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bca:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
					pxTimer->xTimerPeriodInTicks = xMessage.u.xTimerParameters.xMessageValue;
 8008bce:	68ba      	ldr	r2, [r7, #8]
 8008bd0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd2:	619a      	str	r2, [r3, #24]
					configASSERT( ( pxTimer->xTimerPeriodInTicks > 0 ) );
 8008bd4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bd6:	699b      	ldr	r3, [r3, #24]
 8008bd8:	2b00      	cmp	r3, #0
 8008bda:	d10a      	bne.n	8008bf2 <prvProcessReceivedCommands+0x15e>
	__asm volatile
 8008bdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008be0:	f383 8811 	msr	BASEPRI, r3
 8008be4:	f3bf 8f6f 	isb	sy
 8008be8:	f3bf 8f4f 	dsb	sy
 8008bec:	617b      	str	r3, [r7, #20]
}
 8008bee:	bf00      	nop
 8008bf0:	e7fe      	b.n	8008bf0 <prvProcessReceivedCommands+0x15c>
					be longer or shorter than the old one.  The command time is
					therefore set to the current time, and as the period cannot
					be zero the next expiry time can only be in the future,
					meaning (unlike for the xTimerStart() case above) there is
					no fail case that needs to be handled here. */
					( void ) prvInsertTimerInActiveList( pxTimer, ( xTimeNow + pxTimer->xTimerPeriodInTicks ), xTimeNow, xTimeNow );
 8008bf2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008bf4:	699a      	ldr	r2, [r3, #24]
 8008bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bf8:	18d1      	adds	r1, r2, r3
 8008bfa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008bfc:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8008bfe:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c00:	f7ff ff06 	bl	8008a10 <prvInsertTimerInActiveList>
					break;
 8008c04:	e015      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
					#if ( configSUPPORT_DYNAMIC_ALLOCATION == 1 )
					{
						/* The timer has already been removed from the active list,
						just free up the memory if the memory was dynamically
						allocated. */
						if( ( pxTimer->ucStatus & tmrSTATUS_IS_STATICALLY_ALLOCATED ) == ( uint8_t ) 0 )
 8008c06:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c08:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c0c:	f003 0302 	and.w	r3, r3, #2
 8008c10:	2b00      	cmp	r3, #0
 8008c12:	d103      	bne.n	8008c1c <prvProcessReceivedCommands+0x188>
						{
							vPortFree( pxTimer );
 8008c14:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8008c16:	f000 fbdb 	bl	80093d0 <vPortFree>
 8008c1a:	e00a      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>
						}
						else
						{
							pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
 8008c1c:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c1e:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c22:	f023 0301 	bic.w	r3, r3, #1
 8008c26:	b2da      	uxtb	r2, r3
 8008c28:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8008c2a:	f883 2028 	strb.w	r2, [r3, #40]	; 0x28
						no need to free the memory - just mark the timer as
						"not active". */
						pxTimer->ucStatus &= ~tmrSTATUS_IS_ACTIVE;
					}
					#endif /* configSUPPORT_DYNAMIC_ALLOCATION */
					break;
 8008c2e:	e000      	b.n	8008c32 <prvProcessReceivedCommands+0x19e>

				default	:
					/* Don't expect to get here. */
					break;
 8008c30:	bf00      	nop
	while( xQueueReceive( xTimerQueue, &xMessage, tmrNO_DELAY ) != pdFAIL ) /*lint !e603 xMessage does not have to be initialised as it is passed out, not in, and it is not used unless xQueueReceive() returns pdTRUE. */
 8008c32:	4b08      	ldr	r3, [pc, #32]	; (8008c54 <prvProcessReceivedCommands+0x1c0>)
 8008c34:	681b      	ldr	r3, [r3, #0]
 8008c36:	1d39      	adds	r1, r7, #4
 8008c38:	2200      	movs	r2, #0
 8008c3a:	4618      	mov	r0, r3
 8008c3c:	f7fe f878 	bl	8006d30 <xQueueReceive>
 8008c40:	4603      	mov	r3, r0
 8008c42:	2b00      	cmp	r3, #0
 8008c44:	f47f af2a 	bne.w	8008a9c <prvProcessReceivedCommands+0x8>
			}
		}
	}
}
 8008c48:	bf00      	nop
 8008c4a:	bf00      	nop
 8008c4c:	3730      	adds	r7, #48	; 0x30
 8008c4e:	46bd      	mov	sp, r7
 8008c50:	bd80      	pop	{r7, pc}
 8008c52:	bf00      	nop
 8008c54:	200061ac 	.word	0x200061ac

08008c58 <prvSwitchTimerLists>:
/*-----------------------------------------------------------*/

static void prvSwitchTimerLists( void )
{
 8008c58:	b580      	push	{r7, lr}
 8008c5a:	b088      	sub	sp, #32
 8008c5c:	af02      	add	r7, sp, #8

	/* The tick count has overflowed.  The timer lists must be switched.
	If there are any timers still referenced from the current timer list
	then they must have expired and should be processed before the lists
	are switched. */
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008c5e:	e048      	b.n	8008cf2 <prvSwitchTimerLists+0x9a>
	{
		xNextExpireTime = listGET_ITEM_VALUE_OF_HEAD_ENTRY( pxCurrentTimerList );
 8008c60:	4b2d      	ldr	r3, [pc, #180]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008c62:	681b      	ldr	r3, [r3, #0]
 8008c64:	68db      	ldr	r3, [r3, #12]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	613b      	str	r3, [r7, #16]

		/* Remove the timer from the list. */
		pxTimer = ( Timer_t * ) listGET_OWNER_OF_HEAD_ENTRY( pxCurrentTimerList ); /*lint !e9087 !e9079 void * is used as this macro is used with tasks and co-routines too.  Alignment is known to be fine as the type of the pointer stored and retrieved is the same. */
 8008c6a:	4b2b      	ldr	r3, [pc, #172]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	68db      	ldr	r3, [r3, #12]
 8008c70:	68db      	ldr	r3, [r3, #12]
 8008c72:	60fb      	str	r3, [r7, #12]
		( void ) uxListRemove( &( pxTimer->xTimerListItem ) );
 8008c74:	68fb      	ldr	r3, [r7, #12]
 8008c76:	3304      	adds	r3, #4
 8008c78:	4618      	mov	r0, r3
 8008c7a:	f7fd fbab 	bl	80063d4 <uxListRemove>
		traceTIMER_EXPIRED( pxTimer );

		/* Execute its callback, then send a command to restart the timer if
		it is an auto-reload timer.  It cannot be restarted here as the lists
		have not yet been switched. */
		pxTimer->pxCallbackFunction( ( TimerHandle_t ) pxTimer );
 8008c7e:	68fb      	ldr	r3, [r7, #12]
 8008c80:	6a1b      	ldr	r3, [r3, #32]
 8008c82:	68f8      	ldr	r0, [r7, #12]
 8008c84:	4798      	blx	r3

		if( ( pxTimer->ucStatus & tmrSTATUS_IS_AUTORELOAD ) != 0 )
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	f893 3028 	ldrb.w	r3, [r3, #40]	; 0x28
 8008c8c:	f003 0304 	and.w	r3, r3, #4
 8008c90:	2b00      	cmp	r3, #0
 8008c92:	d02e      	beq.n	8008cf2 <prvSwitchTimerLists+0x9a>
			the timer going into the same timer list then it has already expired
			and the timer should be re-inserted into the current list so it is
			processed again within this loop.  Otherwise a command should be sent
			to restart the timer to ensure it is only inserted into a list after
			the lists have been swapped. */
			xReloadTime = ( xNextExpireTime + pxTimer->xTimerPeriodInTicks );
 8008c94:	68fb      	ldr	r3, [r7, #12]
 8008c96:	699b      	ldr	r3, [r3, #24]
 8008c98:	693a      	ldr	r2, [r7, #16]
 8008c9a:	4413      	add	r3, r2
 8008c9c:	60bb      	str	r3, [r7, #8]
			if( xReloadTime > xNextExpireTime )
 8008c9e:	68ba      	ldr	r2, [r7, #8]
 8008ca0:	693b      	ldr	r3, [r7, #16]
 8008ca2:	429a      	cmp	r2, r3
 8008ca4:	d90e      	bls.n	8008cc4 <prvSwitchTimerLists+0x6c>
			{
				listSET_LIST_ITEM_VALUE( &( pxTimer->xTimerListItem ), xReloadTime );
 8008ca6:	68fb      	ldr	r3, [r7, #12]
 8008ca8:	68ba      	ldr	r2, [r7, #8]
 8008caa:	605a      	str	r2, [r3, #4]
				listSET_LIST_ITEM_OWNER( &( pxTimer->xTimerListItem ), pxTimer );
 8008cac:	68fb      	ldr	r3, [r7, #12]
 8008cae:	68fa      	ldr	r2, [r7, #12]
 8008cb0:	611a      	str	r2, [r3, #16]
				vListInsert( pxCurrentTimerList, &( pxTimer->xTimerListItem ) );
 8008cb2:	4b19      	ldr	r3, [pc, #100]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cb4:	681a      	ldr	r2, [r3, #0]
 8008cb6:	68fb      	ldr	r3, [r7, #12]
 8008cb8:	3304      	adds	r3, #4
 8008cba:	4619      	mov	r1, r3
 8008cbc:	4610      	mov	r0, r2
 8008cbe:	f7fd fb50 	bl	8006362 <vListInsert>
 8008cc2:	e016      	b.n	8008cf2 <prvSwitchTimerLists+0x9a>
			}
			else
			{
				xResult = xTimerGenericCommand( pxTimer, tmrCOMMAND_START_DONT_TRACE, xNextExpireTime, NULL, tmrNO_DELAY );
 8008cc4:	2300      	movs	r3, #0
 8008cc6:	9300      	str	r3, [sp, #0]
 8008cc8:	2300      	movs	r3, #0
 8008cca:	693a      	ldr	r2, [r7, #16]
 8008ccc:	2100      	movs	r1, #0
 8008cce:	68f8      	ldr	r0, [r7, #12]
 8008cd0:	f7ff fd60 	bl	8008794 <xTimerGenericCommand>
 8008cd4:	6078      	str	r0, [r7, #4]
				configASSERT( xResult );
 8008cd6:	687b      	ldr	r3, [r7, #4]
 8008cd8:	2b00      	cmp	r3, #0
 8008cda:	d10a      	bne.n	8008cf2 <prvSwitchTimerLists+0x9a>
	__asm volatile
 8008cdc:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ce0:	f383 8811 	msr	BASEPRI, r3
 8008ce4:	f3bf 8f6f 	isb	sy
 8008ce8:	f3bf 8f4f 	dsb	sy
 8008cec:	603b      	str	r3, [r7, #0]
}
 8008cee:	bf00      	nop
 8008cf0:	e7fe      	b.n	8008cf0 <prvSwitchTimerLists+0x98>
	while( listLIST_IS_EMPTY( pxCurrentTimerList ) == pdFALSE )
 8008cf2:	4b09      	ldr	r3, [pc, #36]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cf4:	681b      	ldr	r3, [r3, #0]
 8008cf6:	681b      	ldr	r3, [r3, #0]
 8008cf8:	2b00      	cmp	r3, #0
 8008cfa:	d1b1      	bne.n	8008c60 <prvSwitchTimerLists+0x8>
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}

	pxTemp = pxCurrentTimerList;
 8008cfc:	4b06      	ldr	r3, [pc, #24]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008cfe:	681b      	ldr	r3, [r3, #0]
 8008d00:	617b      	str	r3, [r7, #20]
	pxCurrentTimerList = pxOverflowTimerList;
 8008d02:	4b06      	ldr	r3, [pc, #24]	; (8008d1c <prvSwitchTimerLists+0xc4>)
 8008d04:	681b      	ldr	r3, [r3, #0]
 8008d06:	4a04      	ldr	r2, [pc, #16]	; (8008d18 <prvSwitchTimerLists+0xc0>)
 8008d08:	6013      	str	r3, [r2, #0]
	pxOverflowTimerList = pxTemp;
 8008d0a:	4a04      	ldr	r2, [pc, #16]	; (8008d1c <prvSwitchTimerLists+0xc4>)
 8008d0c:	697b      	ldr	r3, [r7, #20]
 8008d0e:	6013      	str	r3, [r2, #0]
}
 8008d10:	bf00      	nop
 8008d12:	3718      	adds	r7, #24
 8008d14:	46bd      	mov	sp, r7
 8008d16:	bd80      	pop	{r7, pc}
 8008d18:	200061a4 	.word	0x200061a4
 8008d1c:	200061a8 	.word	0x200061a8

08008d20 <prvCheckForValidListAndQueue>:
/*-----------------------------------------------------------*/

static void prvCheckForValidListAndQueue( void )
{
 8008d20:	b580      	push	{r7, lr}
 8008d22:	b082      	sub	sp, #8
 8008d24:	af02      	add	r7, sp, #8
	/* Check that the list from which active timers are referenced, and the
	queue used to communicate with the timer service, have been
	initialised. */
	taskENTER_CRITICAL();
 8008d26:	f000 f965 	bl	8008ff4 <vPortEnterCritical>
	{
		if( xTimerQueue == NULL )
 8008d2a:	4b15      	ldr	r3, [pc, #84]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d2c:	681b      	ldr	r3, [r3, #0]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d120      	bne.n	8008d74 <prvCheckForValidListAndQueue+0x54>
		{
			vListInitialise( &xActiveTimerList1 );
 8008d32:	4814      	ldr	r0, [pc, #80]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d34:	f7fd fac4 	bl	80062c0 <vListInitialise>
			vListInitialise( &xActiveTimerList2 );
 8008d38:	4813      	ldr	r0, [pc, #76]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d3a:	f7fd fac1 	bl	80062c0 <vListInitialise>
			pxCurrentTimerList = &xActiveTimerList1;
 8008d3e:	4b13      	ldr	r3, [pc, #76]	; (8008d8c <prvCheckForValidListAndQueue+0x6c>)
 8008d40:	4a10      	ldr	r2, [pc, #64]	; (8008d84 <prvCheckForValidListAndQueue+0x64>)
 8008d42:	601a      	str	r2, [r3, #0]
			pxOverflowTimerList = &xActiveTimerList2;
 8008d44:	4b12      	ldr	r3, [pc, #72]	; (8008d90 <prvCheckForValidListAndQueue+0x70>)
 8008d46:	4a10      	ldr	r2, [pc, #64]	; (8008d88 <prvCheckForValidListAndQueue+0x68>)
 8008d48:	601a      	str	r2, [r3, #0]
				/* The timer queue is allocated statically in case
				configSUPPORT_DYNAMIC_ALLOCATION is 0. */
				static StaticQueue_t xStaticTimerQueue; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */
				static uint8_t ucStaticTimerQueueStorage[ ( size_t ) configTIMER_QUEUE_LENGTH * sizeof( DaemonTaskMessage_t ) ]; /*lint !e956 Ok to declare in this manner to prevent additional conditional compilation guards in other locations. */

				xTimerQueue = xQueueCreateStatic( ( UBaseType_t ) configTIMER_QUEUE_LENGTH, ( UBaseType_t ) sizeof( DaemonTaskMessage_t ), &( ucStaticTimerQueueStorage[ 0 ] ), &xStaticTimerQueue );
 8008d4a:	2300      	movs	r3, #0
 8008d4c:	9300      	str	r3, [sp, #0]
 8008d4e:	4b11      	ldr	r3, [pc, #68]	; (8008d94 <prvCheckForValidListAndQueue+0x74>)
 8008d50:	4a11      	ldr	r2, [pc, #68]	; (8008d98 <prvCheckForValidListAndQueue+0x78>)
 8008d52:	2110      	movs	r1, #16
 8008d54:	200a      	movs	r0, #10
 8008d56:	f7fd fbcf 	bl	80064f8 <xQueueGenericCreateStatic>
 8008d5a:	4603      	mov	r3, r0
 8008d5c:	4a08      	ldr	r2, [pc, #32]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d5e:	6013      	str	r3, [r2, #0]
			}
			#endif

			#if ( configQUEUE_REGISTRY_SIZE > 0 )
			{
				if( xTimerQueue != NULL )
 8008d60:	4b07      	ldr	r3, [pc, #28]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d62:	681b      	ldr	r3, [r3, #0]
 8008d64:	2b00      	cmp	r3, #0
 8008d66:	d005      	beq.n	8008d74 <prvCheckForValidListAndQueue+0x54>
				{
					vQueueAddToRegistry( xTimerQueue, "TmrQ" );
 8008d68:	4b05      	ldr	r3, [pc, #20]	; (8008d80 <prvCheckForValidListAndQueue+0x60>)
 8008d6a:	681b      	ldr	r3, [r3, #0]
 8008d6c:	490b      	ldr	r1, [pc, #44]	; (8008d9c <prvCheckForValidListAndQueue+0x7c>)
 8008d6e:	4618      	mov	r0, r3
 8008d70:	f7fe fbd2 	bl	8007518 <vQueueAddToRegistry>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
	taskEXIT_CRITICAL();
 8008d74:	f000 f96e 	bl	8009054 <vPortExitCritical>
}
 8008d78:	bf00      	nop
 8008d7a:	46bd      	mov	sp, r7
 8008d7c:	bd80      	pop	{r7, pc}
 8008d7e:	bf00      	nop
 8008d80:	200061ac 	.word	0x200061ac
 8008d84:	2000617c 	.word	0x2000617c
 8008d88:	20006190 	.word	0x20006190
 8008d8c:	200061a4 	.word	0x200061a4
 8008d90:	200061a8 	.word	0x200061a8
 8008d94:	20006258 	.word	0x20006258
 8008d98:	200061b8 	.word	0x200061b8
 8008d9c:	08018188 	.word	0x08018188

08008da0 <pxPortInitialiseStack>:

/*
 * See header file for description.
 */
StackType_t *pxPortInitialiseStack( StackType_t *pxTopOfStack, TaskFunction_t pxCode, void *pvParameters )
{
 8008da0:	b480      	push	{r7}
 8008da2:	b085      	sub	sp, #20
 8008da4:	af00      	add	r7, sp, #0
 8008da6:	60f8      	str	r0, [r7, #12]
 8008da8:	60b9      	str	r1, [r7, #8]
 8008daa:	607a      	str	r2, [r7, #4]
	/* Simulate the stack frame as it would be created by a context switch
	interrupt. */

	/* Offset added to account for the way the MCU uses the stack on entry/exit
	of interrupts, and to ensure alignment. */
	pxTopOfStack--;
 8008dac:	68fb      	ldr	r3, [r7, #12]
 8008dae:	3b04      	subs	r3, #4
 8008db0:	60fb      	str	r3, [r7, #12]

	*pxTopOfStack = portINITIAL_XPSR;	/* xPSR */
 8008db2:	68fb      	ldr	r3, [r7, #12]
 8008db4:	f04f 7280 	mov.w	r2, #16777216	; 0x1000000
 8008db8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dba:	68fb      	ldr	r3, [r7, #12]
 8008dbc:	3b04      	subs	r3, #4
 8008dbe:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( ( StackType_t ) pxCode ) & portSTART_ADDRESS_MASK;	/* PC */
 8008dc0:	68bb      	ldr	r3, [r7, #8]
 8008dc2:	f023 0201 	bic.w	r2, r3, #1
 8008dc6:	68fb      	ldr	r3, [r7, #12]
 8008dc8:	601a      	str	r2, [r3, #0]
	pxTopOfStack--;
 8008dca:	68fb      	ldr	r3, [r7, #12]
 8008dcc:	3b04      	subs	r3, #4
 8008dce:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) portTASK_RETURN_ADDRESS;	/* LR */
 8008dd0:	4a0c      	ldr	r2, [pc, #48]	; (8008e04 <pxPortInitialiseStack+0x64>)
 8008dd2:	68fb      	ldr	r3, [r7, #12]
 8008dd4:	601a      	str	r2, [r3, #0]

	/* Save code space by skipping register initialisation. */
	pxTopOfStack -= 5;	/* R12, R3, R2 and R1. */
 8008dd6:	68fb      	ldr	r3, [r7, #12]
 8008dd8:	3b14      	subs	r3, #20
 8008dda:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = ( StackType_t ) pvParameters;	/* R0 */
 8008ddc:	687a      	ldr	r2, [r7, #4]
 8008dde:	68fb      	ldr	r3, [r7, #12]
 8008de0:	601a      	str	r2, [r3, #0]

	/* A save method is being used that requires each task to maintain its
	own exec return value. */
	pxTopOfStack--;
 8008de2:	68fb      	ldr	r3, [r7, #12]
 8008de4:	3b04      	subs	r3, #4
 8008de6:	60fb      	str	r3, [r7, #12]
	*pxTopOfStack = portINITIAL_EXC_RETURN;
 8008de8:	68fb      	ldr	r3, [r7, #12]
 8008dea:	f06f 0202 	mvn.w	r2, #2
 8008dee:	601a      	str	r2, [r3, #0]

	pxTopOfStack -= 8;	/* R11, R10, R9, R8, R7, R6, R5 and R4. */
 8008df0:	68fb      	ldr	r3, [r7, #12]
 8008df2:	3b20      	subs	r3, #32
 8008df4:	60fb      	str	r3, [r7, #12]

	return pxTopOfStack;
 8008df6:	68fb      	ldr	r3, [r7, #12]
}
 8008df8:	4618      	mov	r0, r3
 8008dfa:	3714      	adds	r7, #20
 8008dfc:	46bd      	mov	sp, r7
 8008dfe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e02:	4770      	bx	lr
 8008e04:	08008e09 	.word	0x08008e09

08008e08 <prvTaskExitError>:
/*-----------------------------------------------------------*/

static void prvTaskExitError( void )
{
 8008e08:	b480      	push	{r7}
 8008e0a:	b085      	sub	sp, #20
 8008e0c:	af00      	add	r7, sp, #0
volatile uint32_t ulDummy = 0;
 8008e0e:	2300      	movs	r3, #0
 8008e10:	607b      	str	r3, [r7, #4]
	its caller as there is nothing to return to.  If a task wants to exit it
	should instead call vTaskDelete( NULL ).

	Artificially force an assert() to be triggered if configASSERT() is
	defined, then stop here so application writers can catch the error. */
	configASSERT( uxCriticalNesting == ~0UL );
 8008e12:	4b12      	ldr	r3, [pc, #72]	; (8008e5c <prvTaskExitError+0x54>)
 8008e14:	681b      	ldr	r3, [r3, #0]
 8008e16:	f1b3 3fff 	cmp.w	r3, #4294967295
 8008e1a:	d00a      	beq.n	8008e32 <prvTaskExitError+0x2a>
	__asm volatile
 8008e1c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e20:	f383 8811 	msr	BASEPRI, r3
 8008e24:	f3bf 8f6f 	isb	sy
 8008e28:	f3bf 8f4f 	dsb	sy
 8008e2c:	60fb      	str	r3, [r7, #12]
}
 8008e2e:	bf00      	nop
 8008e30:	e7fe      	b.n	8008e30 <prvTaskExitError+0x28>
	__asm volatile
 8008e32:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008e36:	f383 8811 	msr	BASEPRI, r3
 8008e3a:	f3bf 8f6f 	isb	sy
 8008e3e:	f3bf 8f4f 	dsb	sy
 8008e42:	60bb      	str	r3, [r7, #8]
}
 8008e44:	bf00      	nop
	portDISABLE_INTERRUPTS();
	while( ulDummy == 0 )
 8008e46:	bf00      	nop
 8008e48:	687b      	ldr	r3, [r7, #4]
 8008e4a:	2b00      	cmp	r3, #0
 8008e4c:	d0fc      	beq.n	8008e48 <prvTaskExitError+0x40>
		about code appearing after this function is called - making ulDummy
		volatile makes the compiler think the function could return and
		therefore not output an 'unreachable code' warning for code that appears
		after it. */
	}
}
 8008e4e:	bf00      	nop
 8008e50:	bf00      	nop
 8008e52:	3714      	adds	r7, #20
 8008e54:	46bd      	mov	sp, r7
 8008e56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008e5a:	4770      	bx	lr
 8008e5c:	20000020 	.word	0x20000020

08008e60 <SVC_Handler>:
/*-----------------------------------------------------------*/

void vPortSVCHandler( void )
{
	__asm volatile (
 8008e60:	4b07      	ldr	r3, [pc, #28]	; (8008e80 <pxCurrentTCBConst2>)
 8008e62:	6819      	ldr	r1, [r3, #0]
 8008e64:	6808      	ldr	r0, [r1, #0]
 8008e66:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008e6a:	f380 8809 	msr	PSP, r0
 8008e6e:	f3bf 8f6f 	isb	sy
 8008e72:	f04f 0000 	mov.w	r0, #0
 8008e76:	f380 8811 	msr	BASEPRI, r0
 8008e7a:	4770      	bx	lr
 8008e7c:	f3af 8000 	nop.w

08008e80 <pxCurrentTCBConst2>:
 8008e80:	20005c7c 	.word	0x20005c7c
					"	bx r14							\n"
					"									\n"
					"	.align 4						\n"
					"pxCurrentTCBConst2: .word pxCurrentTCB				\n"
				);
}
 8008e84:	bf00      	nop
 8008e86:	bf00      	nop

08008e88 <prvPortStartFirstTask>:
{
	/* Start the first task.  This also clears the bit that indicates the FPU is
	in use in case the FPU was used before the scheduler was started - which
	would otherwise result in the unnecessary leaving of space in the SVC stack
	for lazy saving of FPU registers. */
	__asm volatile(
 8008e88:	4808      	ldr	r0, [pc, #32]	; (8008eac <prvPortStartFirstTask+0x24>)
 8008e8a:	6800      	ldr	r0, [r0, #0]
 8008e8c:	6800      	ldr	r0, [r0, #0]
 8008e8e:	f380 8808 	msr	MSP, r0
 8008e92:	f04f 0000 	mov.w	r0, #0
 8008e96:	f380 8814 	msr	CONTROL, r0
 8008e9a:	b662      	cpsie	i
 8008e9c:	b661      	cpsie	f
 8008e9e:	f3bf 8f4f 	dsb	sy
 8008ea2:	f3bf 8f6f 	isb	sy
 8008ea6:	df00      	svc	0
 8008ea8:	bf00      	nop
					" dsb					\n"
					" isb					\n"
					" svc 0					\n" /* System call to start first task. */
					" nop					\n"
				);
}
 8008eaa:	bf00      	nop
 8008eac:	e000ed08 	.word	0xe000ed08

08008eb0 <xPortStartScheduler>:

/*
 * See header file for description.
 */
BaseType_t xPortStartScheduler( void )
{
 8008eb0:	b580      	push	{r7, lr}
 8008eb2:	b086      	sub	sp, #24
 8008eb4:	af00      	add	r7, sp, #0
	configASSERT( configMAX_SYSCALL_INTERRUPT_PRIORITY );

	/* This port can be used on all revisions of the Cortex-M7 core other than
	the r0p1 parts.  r0p1 parts should use the port from the
	/source/portable/GCC/ARM_CM7/r0p1 directory. */
	configASSERT( portCPUID != portCORTEX_M7_r0p1_ID );
 8008eb6:	4b46      	ldr	r3, [pc, #280]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008eb8:	681b      	ldr	r3, [r3, #0]
 8008eba:	4a46      	ldr	r2, [pc, #280]	; (8008fd4 <xPortStartScheduler+0x124>)
 8008ebc:	4293      	cmp	r3, r2
 8008ebe:	d10a      	bne.n	8008ed6 <xPortStartScheduler+0x26>
	__asm volatile
 8008ec0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ec4:	f383 8811 	msr	BASEPRI, r3
 8008ec8:	f3bf 8f6f 	isb	sy
 8008ecc:	f3bf 8f4f 	dsb	sy
 8008ed0:	613b      	str	r3, [r7, #16]
}
 8008ed2:	bf00      	nop
 8008ed4:	e7fe      	b.n	8008ed4 <xPortStartScheduler+0x24>
	configASSERT( portCPUID != portCORTEX_M7_r0p0_ID );
 8008ed6:	4b3e      	ldr	r3, [pc, #248]	; (8008fd0 <xPortStartScheduler+0x120>)
 8008ed8:	681b      	ldr	r3, [r3, #0]
 8008eda:	4a3f      	ldr	r2, [pc, #252]	; (8008fd8 <xPortStartScheduler+0x128>)
 8008edc:	4293      	cmp	r3, r2
 8008ede:	d10a      	bne.n	8008ef6 <xPortStartScheduler+0x46>
	__asm volatile
 8008ee0:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ee4:	f383 8811 	msr	BASEPRI, r3
 8008ee8:	f3bf 8f6f 	isb	sy
 8008eec:	f3bf 8f4f 	dsb	sy
 8008ef0:	60fb      	str	r3, [r7, #12]
}
 8008ef2:	bf00      	nop
 8008ef4:	e7fe      	b.n	8008ef4 <xPortStartScheduler+0x44>

	#if( configASSERT_DEFINED == 1 )
	{
		volatile uint32_t ulOriginalPriority;
		volatile uint8_t * const pucFirstUserPriorityRegister = ( volatile uint8_t * const ) ( portNVIC_IP_REGISTERS_OFFSET_16 + portFIRST_USER_INTERRUPT_NUMBER );
 8008ef6:	4b39      	ldr	r3, [pc, #228]	; (8008fdc <xPortStartScheduler+0x12c>)
 8008ef8:	617b      	str	r3, [r7, #20]
		functions can be called.  ISR safe functions are those that end in
		"FromISR".  FreeRTOS maintains separate thread and ISR API functions to
		ensure interrupt entry is as fast and simple as possible.

		Save the interrupt priority value that is about to be clobbered. */
		ulOriginalPriority = *pucFirstUserPriorityRegister;
 8008efa:	697b      	ldr	r3, [r7, #20]
 8008efc:	781b      	ldrb	r3, [r3, #0]
 8008efe:	b2db      	uxtb	r3, r3
 8008f00:	607b      	str	r3, [r7, #4]

		/* Determine the number of priority bits available.  First write to all
		possible bits. */
		*pucFirstUserPriorityRegister = portMAX_8_BIT_VALUE;
 8008f02:	697b      	ldr	r3, [r7, #20]
 8008f04:	22ff      	movs	r2, #255	; 0xff
 8008f06:	701a      	strb	r2, [r3, #0]

		/* Read the value back to see how many bits stuck. */
		ucMaxPriorityValue = *pucFirstUserPriorityRegister;
 8008f08:	697b      	ldr	r3, [r7, #20]
 8008f0a:	781b      	ldrb	r3, [r3, #0]
 8008f0c:	b2db      	uxtb	r3, r3
 8008f0e:	70fb      	strb	r3, [r7, #3]

		/* Use the same mask on the maximum system call priority. */
		ucMaxSysCallPriority = configMAX_SYSCALL_INTERRUPT_PRIORITY & ucMaxPriorityValue;
 8008f10:	78fb      	ldrb	r3, [r7, #3]
 8008f12:	b2db      	uxtb	r3, r3
 8008f14:	f003 0350 	and.w	r3, r3, #80	; 0x50
 8008f18:	b2da      	uxtb	r2, r3
 8008f1a:	4b31      	ldr	r3, [pc, #196]	; (8008fe0 <xPortStartScheduler+0x130>)
 8008f1c:	701a      	strb	r2, [r3, #0]

		/* Calculate the maximum acceptable priority group value for the number
		of bits read back. */
		ulMaxPRIGROUPValue = portMAX_PRIGROUP_BITS;
 8008f1e:	4b31      	ldr	r3, [pc, #196]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f20:	2207      	movs	r2, #7
 8008f22:	601a      	str	r2, [r3, #0]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f24:	e009      	b.n	8008f3a <xPortStartScheduler+0x8a>
		{
			ulMaxPRIGROUPValue--;
 8008f26:	4b2f      	ldr	r3, [pc, #188]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f28:	681b      	ldr	r3, [r3, #0]
 8008f2a:	3b01      	subs	r3, #1
 8008f2c:	4a2d      	ldr	r2, [pc, #180]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f2e:	6013      	str	r3, [r2, #0]
			ucMaxPriorityValue <<= ( uint8_t ) 0x01;
 8008f30:	78fb      	ldrb	r3, [r7, #3]
 8008f32:	b2db      	uxtb	r3, r3
 8008f34:	005b      	lsls	r3, r3, #1
 8008f36:	b2db      	uxtb	r3, r3
 8008f38:	70fb      	strb	r3, [r7, #3]
		while( ( ucMaxPriorityValue & portTOP_BIT_OF_BYTE ) == portTOP_BIT_OF_BYTE )
 8008f3a:	78fb      	ldrb	r3, [r7, #3]
 8008f3c:	b2db      	uxtb	r3, r3
 8008f3e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008f42:	2b80      	cmp	r3, #128	; 0x80
 8008f44:	d0ef      	beq.n	8008f26 <xPortStartScheduler+0x76>
		#ifdef configPRIO_BITS
		{
			/* Check the FreeRTOS configuration that defines the number of
			priority bits matches the number of priority bits actually queried
			from the hardware. */
			configASSERT( ( portMAX_PRIGROUP_BITS - ulMaxPRIGROUPValue ) == configPRIO_BITS );
 8008f46:	4b27      	ldr	r3, [pc, #156]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f48:	681b      	ldr	r3, [r3, #0]
 8008f4a:	f1c3 0307 	rsb	r3, r3, #7
 8008f4e:	2b04      	cmp	r3, #4
 8008f50:	d00a      	beq.n	8008f68 <xPortStartScheduler+0xb8>
	__asm volatile
 8008f52:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008f56:	f383 8811 	msr	BASEPRI, r3
 8008f5a:	f3bf 8f6f 	isb	sy
 8008f5e:	f3bf 8f4f 	dsb	sy
 8008f62:	60bb      	str	r3, [r7, #8]
}
 8008f64:	bf00      	nop
 8008f66:	e7fe      	b.n	8008f66 <xPortStartScheduler+0xb6>
		}
		#endif

		/* Shift the priority group value back to its position within the AIRCR
		register. */
		ulMaxPRIGROUPValue <<= portPRIGROUP_SHIFT;
 8008f68:	4b1e      	ldr	r3, [pc, #120]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f6a:	681b      	ldr	r3, [r3, #0]
 8008f6c:	021b      	lsls	r3, r3, #8
 8008f6e:	4a1d      	ldr	r2, [pc, #116]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f70:	6013      	str	r3, [r2, #0]
		ulMaxPRIGROUPValue &= portPRIORITY_GROUP_MASK;
 8008f72:	4b1c      	ldr	r3, [pc, #112]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f74:	681b      	ldr	r3, [r3, #0]
 8008f76:	f403 63e0 	and.w	r3, r3, #1792	; 0x700
 8008f7a:	4a1a      	ldr	r2, [pc, #104]	; (8008fe4 <xPortStartScheduler+0x134>)
 8008f7c:	6013      	str	r3, [r2, #0]

		/* Restore the clobbered interrupt priority register to its original
		value. */
		*pucFirstUserPriorityRegister = ulOriginalPriority;
 8008f7e:	687b      	ldr	r3, [r7, #4]
 8008f80:	b2da      	uxtb	r2, r3
 8008f82:	697b      	ldr	r3, [r7, #20]
 8008f84:	701a      	strb	r2, [r3, #0]
	}
	#endif /* conifgASSERT_DEFINED */

	/* Make PendSV and SysTick the lowest priority interrupts. */
	portNVIC_SYSPRI2_REG |= portNVIC_PENDSV_PRI;
 8008f86:	4b18      	ldr	r3, [pc, #96]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f88:	681b      	ldr	r3, [r3, #0]
 8008f8a:	4a17      	ldr	r2, [pc, #92]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f8c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8008f90:	6013      	str	r3, [r2, #0]
	portNVIC_SYSPRI2_REG |= portNVIC_SYSTICK_PRI;
 8008f92:	4b15      	ldr	r3, [pc, #84]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f94:	681b      	ldr	r3, [r3, #0]
 8008f96:	4a14      	ldr	r2, [pc, #80]	; (8008fe8 <xPortStartScheduler+0x138>)
 8008f98:	f043 4370 	orr.w	r3, r3, #4026531840	; 0xf0000000
 8008f9c:	6013      	str	r3, [r2, #0]

	/* Start the timer that generates the tick ISR.  Interrupts are disabled
	here already. */
	vPortSetupTimerInterrupt();
 8008f9e:	f000 f8dd 	bl	800915c <vPortSetupTimerInterrupt>

	/* Initialise the critical nesting count ready for the first task. */
	uxCriticalNesting = 0;
 8008fa2:	4b12      	ldr	r3, [pc, #72]	; (8008fec <xPortStartScheduler+0x13c>)
 8008fa4:	2200      	movs	r2, #0
 8008fa6:	601a      	str	r2, [r3, #0]

	/* Ensure the VFP is enabled - it should be anyway. */
	vPortEnableVFP();
 8008fa8:	f000 f8fc 	bl	80091a4 <vPortEnableVFP>

	/* Lazy save always. */
	*( portFPCCR ) |= portASPEN_AND_LSPEN_BITS;
 8008fac:	4b10      	ldr	r3, [pc, #64]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fae:	681b      	ldr	r3, [r3, #0]
 8008fb0:	4a0f      	ldr	r2, [pc, #60]	; (8008ff0 <xPortStartScheduler+0x140>)
 8008fb2:	f043 4340 	orr.w	r3, r3, #3221225472	; 0xc0000000
 8008fb6:	6013      	str	r3, [r2, #0]

	/* Start the first task. */
	prvPortStartFirstTask();
 8008fb8:	f7ff ff66 	bl	8008e88 <prvPortStartFirstTask>
	exit error function to prevent compiler warnings about a static function
	not being called in the case that the application writer overrides this
	functionality by defining configTASK_RETURN_ADDRESS.  Call
	vTaskSwitchContext() so link time optimisation does not remove the
	symbol. */
	vTaskSwitchContext();
 8008fbc:	f7fe ff18 	bl	8007df0 <vTaskSwitchContext>
	prvTaskExitError();
 8008fc0:	f7ff ff22 	bl	8008e08 <prvTaskExitError>

	/* Should not get here! */
	return 0;
 8008fc4:	2300      	movs	r3, #0
}
 8008fc6:	4618      	mov	r0, r3
 8008fc8:	3718      	adds	r7, #24
 8008fca:	46bd      	mov	sp, r7
 8008fcc:	bd80      	pop	{r7, pc}
 8008fce:	bf00      	nop
 8008fd0:	e000ed00 	.word	0xe000ed00
 8008fd4:	410fc271 	.word	0x410fc271
 8008fd8:	410fc270 	.word	0x410fc270
 8008fdc:	e000e400 	.word	0xe000e400
 8008fe0:	200062a8 	.word	0x200062a8
 8008fe4:	200062ac 	.word	0x200062ac
 8008fe8:	e000ed20 	.word	0xe000ed20
 8008fec:	20000020 	.word	0x20000020
 8008ff0:	e000ef34 	.word	0xe000ef34

08008ff4 <vPortEnterCritical>:
	configASSERT( uxCriticalNesting == 1000UL );
}
/*-----------------------------------------------------------*/

void vPortEnterCritical( void )
{
 8008ff4:	b480      	push	{r7}
 8008ff6:	b083      	sub	sp, #12
 8008ff8:	af00      	add	r7, sp, #0
	__asm volatile
 8008ffa:	f04f 0350 	mov.w	r3, #80	; 0x50
 8008ffe:	f383 8811 	msr	BASEPRI, r3
 8009002:	f3bf 8f6f 	isb	sy
 8009006:	f3bf 8f4f 	dsb	sy
 800900a:	607b      	str	r3, [r7, #4]
}
 800900c:	bf00      	nop
	portDISABLE_INTERRUPTS();
	uxCriticalNesting++;
 800900e:	4b0f      	ldr	r3, [pc, #60]	; (800904c <vPortEnterCritical+0x58>)
 8009010:	681b      	ldr	r3, [r3, #0]
 8009012:	3301      	adds	r3, #1
 8009014:	4a0d      	ldr	r2, [pc, #52]	; (800904c <vPortEnterCritical+0x58>)
 8009016:	6013      	str	r3, [r2, #0]
	/* This is not the interrupt safe version of the enter critical function so
	assert() if it is being called from an interrupt context.  Only API
	functions that end in "FromISR" can be used in an interrupt.  Only assert if
	the critical nesting count is 1 to protect against recursive calls if the
	assert function also uses a critical section. */
	if( uxCriticalNesting == 1 )
 8009018:	4b0c      	ldr	r3, [pc, #48]	; (800904c <vPortEnterCritical+0x58>)
 800901a:	681b      	ldr	r3, [r3, #0]
 800901c:	2b01      	cmp	r3, #1
 800901e:	d10f      	bne.n	8009040 <vPortEnterCritical+0x4c>
	{
		configASSERT( ( portNVIC_INT_CTRL_REG & portVECTACTIVE_MASK ) == 0 );
 8009020:	4b0b      	ldr	r3, [pc, #44]	; (8009050 <vPortEnterCritical+0x5c>)
 8009022:	681b      	ldr	r3, [r3, #0]
 8009024:	b2db      	uxtb	r3, r3
 8009026:	2b00      	cmp	r3, #0
 8009028:	d00a      	beq.n	8009040 <vPortEnterCritical+0x4c>
	__asm volatile
 800902a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800902e:	f383 8811 	msr	BASEPRI, r3
 8009032:	f3bf 8f6f 	isb	sy
 8009036:	f3bf 8f4f 	dsb	sy
 800903a:	603b      	str	r3, [r7, #0]
}
 800903c:	bf00      	nop
 800903e:	e7fe      	b.n	800903e <vPortEnterCritical+0x4a>
	}
}
 8009040:	bf00      	nop
 8009042:	370c      	adds	r7, #12
 8009044:	46bd      	mov	sp, r7
 8009046:	f85d 7b04 	ldr.w	r7, [sp], #4
 800904a:	4770      	bx	lr
 800904c:	20000020 	.word	0x20000020
 8009050:	e000ed04 	.word	0xe000ed04

08009054 <vPortExitCritical>:
/*-----------------------------------------------------------*/

void vPortExitCritical( void )
{
 8009054:	b480      	push	{r7}
 8009056:	b083      	sub	sp, #12
 8009058:	af00      	add	r7, sp, #0
	configASSERT( uxCriticalNesting );
 800905a:	4b12      	ldr	r3, [pc, #72]	; (80090a4 <vPortExitCritical+0x50>)
 800905c:	681b      	ldr	r3, [r3, #0]
 800905e:	2b00      	cmp	r3, #0
 8009060:	d10a      	bne.n	8009078 <vPortExitCritical+0x24>
	__asm volatile
 8009062:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009066:	f383 8811 	msr	BASEPRI, r3
 800906a:	f3bf 8f6f 	isb	sy
 800906e:	f3bf 8f4f 	dsb	sy
 8009072:	607b      	str	r3, [r7, #4]
}
 8009074:	bf00      	nop
 8009076:	e7fe      	b.n	8009076 <vPortExitCritical+0x22>
	uxCriticalNesting--;
 8009078:	4b0a      	ldr	r3, [pc, #40]	; (80090a4 <vPortExitCritical+0x50>)
 800907a:	681b      	ldr	r3, [r3, #0]
 800907c:	3b01      	subs	r3, #1
 800907e:	4a09      	ldr	r2, [pc, #36]	; (80090a4 <vPortExitCritical+0x50>)
 8009080:	6013      	str	r3, [r2, #0]
	if( uxCriticalNesting == 0 )
 8009082:	4b08      	ldr	r3, [pc, #32]	; (80090a4 <vPortExitCritical+0x50>)
 8009084:	681b      	ldr	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d105      	bne.n	8009096 <vPortExitCritical+0x42>
 800908a:	2300      	movs	r3, #0
 800908c:	603b      	str	r3, [r7, #0]
	__asm volatile
 800908e:	683b      	ldr	r3, [r7, #0]
 8009090:	f383 8811 	msr	BASEPRI, r3
}
 8009094:	bf00      	nop
	{
		portENABLE_INTERRUPTS();
	}
}
 8009096:	bf00      	nop
 8009098:	370c      	adds	r7, #12
 800909a:	46bd      	mov	sp, r7
 800909c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80090a0:	4770      	bx	lr
 80090a2:	bf00      	nop
 80090a4:	20000020 	.word	0x20000020
	...

080090b0 <PendSV_Handler>:

void xPortPendSVHandler( void )
{
	/* This is a naked function. */

	__asm volatile
 80090b0:	f3ef 8009 	mrs	r0, PSP
 80090b4:	f3bf 8f6f 	isb	sy
 80090b8:	4b15      	ldr	r3, [pc, #84]	; (8009110 <pxCurrentTCBConst>)
 80090ba:	681a      	ldr	r2, [r3, #0]
 80090bc:	f01e 0f10 	tst.w	lr, #16
 80090c0:	bf08      	it	eq
 80090c2:	ed20 8a10 	vstmdbeq	r0!, {s16-s31}
 80090c6:	e920 4ff0 	stmdb	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090ca:	6010      	str	r0, [r2, #0]
 80090cc:	e92d 0009 	stmdb	sp!, {r0, r3}
 80090d0:	f04f 0050 	mov.w	r0, #80	; 0x50
 80090d4:	f380 8811 	msr	BASEPRI, r0
 80090d8:	f3bf 8f4f 	dsb	sy
 80090dc:	f3bf 8f6f 	isb	sy
 80090e0:	f7fe fe86 	bl	8007df0 <vTaskSwitchContext>
 80090e4:	f04f 0000 	mov.w	r0, #0
 80090e8:	f380 8811 	msr	BASEPRI, r0
 80090ec:	bc09      	pop	{r0, r3}
 80090ee:	6819      	ldr	r1, [r3, #0]
 80090f0:	6808      	ldr	r0, [r1, #0]
 80090f2:	e8b0 4ff0 	ldmia.w	r0!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80090f6:	f01e 0f10 	tst.w	lr, #16
 80090fa:	bf08      	it	eq
 80090fc:	ecb0 8a10 	vldmiaeq	r0!, {s16-s31}
 8009100:	f380 8809 	msr	PSP, r0
 8009104:	f3bf 8f6f 	isb	sy
 8009108:	4770      	bx	lr
 800910a:	bf00      	nop
 800910c:	f3af 8000 	nop.w

08009110 <pxCurrentTCBConst>:
 8009110:	20005c7c 	.word	0x20005c7c
	"										\n"
	"	.align 4							\n"
	"pxCurrentTCBConst: .word pxCurrentTCB	\n"
	::"i"(configMAX_SYSCALL_INTERRUPT_PRIORITY)
	);
}
 8009114:	bf00      	nop
 8009116:	bf00      	nop

08009118 <xPortSysTickHandler>:
/*-----------------------------------------------------------*/

void xPortSysTickHandler( void )
{
 8009118:	b580      	push	{r7, lr}
 800911a:	b082      	sub	sp, #8
 800911c:	af00      	add	r7, sp, #0
	__asm volatile
 800911e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009122:	f383 8811 	msr	BASEPRI, r3
 8009126:	f3bf 8f6f 	isb	sy
 800912a:	f3bf 8f4f 	dsb	sy
 800912e:	607b      	str	r3, [r7, #4]
}
 8009130:	bf00      	nop
	save and then restore the interrupt mask value as its value is already
	known. */
	portDISABLE_INTERRUPTS();
	{
		/* Increment the RTOS tick. */
		if( xTaskIncrementTick() != pdFALSE )
 8009132:	f7fe fda3 	bl	8007c7c <xTaskIncrementTick>
 8009136:	4603      	mov	r3, r0
 8009138:	2b00      	cmp	r3, #0
 800913a:	d003      	beq.n	8009144 <xPortSysTickHandler+0x2c>
		{
			/* A context switch is required.  Context switching is performed in
			the PendSV interrupt.  Pend the PendSV interrupt. */
			portNVIC_INT_CTRL_REG = portNVIC_PENDSVSET_BIT;
 800913c:	4b06      	ldr	r3, [pc, #24]	; (8009158 <xPortSysTickHandler+0x40>)
 800913e:	f04f 5280 	mov.w	r2, #268435456	; 0x10000000
 8009142:	601a      	str	r2, [r3, #0]
 8009144:	2300      	movs	r3, #0
 8009146:	603b      	str	r3, [r7, #0]
	__asm volatile
 8009148:	683b      	ldr	r3, [r7, #0]
 800914a:	f383 8811 	msr	BASEPRI, r3
}
 800914e:	bf00      	nop
		}
	}
	portENABLE_INTERRUPTS();
}
 8009150:	bf00      	nop
 8009152:	3708      	adds	r7, #8
 8009154:	46bd      	mov	sp, r7
 8009156:	bd80      	pop	{r7, pc}
 8009158:	e000ed04 	.word	0xe000ed04

0800915c <vPortSetupTimerInterrupt>:
/*
 * Setup the systick timer to generate the tick interrupts at the required
 * frequency.
 */
__attribute__(( weak )) void vPortSetupTimerInterrupt( void )
{
 800915c:	b480      	push	{r7}
 800915e:	af00      	add	r7, sp, #0
		ulStoppedTimerCompensation = portMISSED_COUNTS_FACTOR / ( configCPU_CLOCK_HZ / configSYSTICK_CLOCK_HZ );
	}
	#endif /* configUSE_TICKLESS_IDLE */

	/* Stop and clear the SysTick. */
	portNVIC_SYSTICK_CTRL_REG = 0UL;
 8009160:	4b0b      	ldr	r3, [pc, #44]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009162:	2200      	movs	r2, #0
 8009164:	601a      	str	r2, [r3, #0]
	portNVIC_SYSTICK_CURRENT_VALUE_REG = 0UL;
 8009166:	4b0b      	ldr	r3, [pc, #44]	; (8009194 <vPortSetupTimerInterrupt+0x38>)
 8009168:	2200      	movs	r2, #0
 800916a:	601a      	str	r2, [r3, #0]

	/* Configure SysTick to interrupt at the requested rate. */
	portNVIC_SYSTICK_LOAD_REG = ( configSYSTICK_CLOCK_HZ / configTICK_RATE_HZ ) - 1UL;
 800916c:	4b0a      	ldr	r3, [pc, #40]	; (8009198 <vPortSetupTimerInterrupt+0x3c>)
 800916e:	681b      	ldr	r3, [r3, #0]
 8009170:	4a0a      	ldr	r2, [pc, #40]	; (800919c <vPortSetupTimerInterrupt+0x40>)
 8009172:	fba2 2303 	umull	r2, r3, r2, r3
 8009176:	099b      	lsrs	r3, r3, #6
 8009178:	4a09      	ldr	r2, [pc, #36]	; (80091a0 <vPortSetupTimerInterrupt+0x44>)
 800917a:	3b01      	subs	r3, #1
 800917c:	6013      	str	r3, [r2, #0]
	portNVIC_SYSTICK_CTRL_REG = ( portNVIC_SYSTICK_CLK_BIT | portNVIC_SYSTICK_INT_BIT | portNVIC_SYSTICK_ENABLE_BIT );
 800917e:	4b04      	ldr	r3, [pc, #16]	; (8009190 <vPortSetupTimerInterrupt+0x34>)
 8009180:	2207      	movs	r2, #7
 8009182:	601a      	str	r2, [r3, #0]
}
 8009184:	bf00      	nop
 8009186:	46bd      	mov	sp, r7
 8009188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800918c:	4770      	bx	lr
 800918e:	bf00      	nop
 8009190:	e000e010 	.word	0xe000e010
 8009194:	e000e018 	.word	0xe000e018
 8009198:	20000000 	.word	0x20000000
 800919c:	10624dd3 	.word	0x10624dd3
 80091a0:	e000e014 	.word	0xe000e014

080091a4 <vPortEnableVFP>:
/*-----------------------------------------------------------*/

/* This is a naked function. */
static void vPortEnableVFP( void )
{
	__asm volatile
 80091a4:	f8df 000c 	ldr.w	r0, [pc, #12]	; 80091b4 <vPortEnableVFP+0x10>
 80091a8:	6801      	ldr	r1, [r0, #0]
 80091aa:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 80091ae:	6001      	str	r1, [r0, #0]
 80091b0:	4770      	bx	lr
		"								\n"
		"	orr r1, r1, #( 0xf << 20 )	\n" /* Enable CP10 and CP11 coprocessors, then save back. */
		"	str r1, [r0]				\n"
		"	bx r14						"
	);
}
 80091b2:	bf00      	nop
 80091b4:	e000ed88 	.word	0xe000ed88

080091b8 <vPortValidateInterruptPriority>:
/*-----------------------------------------------------------*/

#if( configASSERT_DEFINED == 1 )

	void vPortValidateInterruptPriority( void )
	{
 80091b8:	b480      	push	{r7}
 80091ba:	b085      	sub	sp, #20
 80091bc:	af00      	add	r7, sp, #0
	uint32_t ulCurrentInterrupt;
	uint8_t ucCurrentPriority;

		/* Obtain the number of the currently executing interrupt. */
		__asm volatile( "mrs %0, ipsr" : "=r"( ulCurrentInterrupt ) :: "memory" );
 80091be:	f3ef 8305 	mrs	r3, IPSR
 80091c2:	60fb      	str	r3, [r7, #12]

		/* Is the interrupt number a user defined interrupt? */
		if( ulCurrentInterrupt >= portFIRST_USER_INTERRUPT_NUMBER )
 80091c4:	68fb      	ldr	r3, [r7, #12]
 80091c6:	2b0f      	cmp	r3, #15
 80091c8:	d914      	bls.n	80091f4 <vPortValidateInterruptPriority+0x3c>
		{
			/* Look up the interrupt's priority. */
			ucCurrentPriority = pcInterruptPriorityRegisters[ ulCurrentInterrupt ];
 80091ca:	4a17      	ldr	r2, [pc, #92]	; (8009228 <vPortValidateInterruptPriority+0x70>)
 80091cc:	68fb      	ldr	r3, [r7, #12]
 80091ce:	4413      	add	r3, r2
 80091d0:	781b      	ldrb	r3, [r3, #0]
 80091d2:	72fb      	strb	r3, [r7, #11]
			interrupt entry is as fast and simple as possible.

			The following links provide detailed information:
			http://www.freertos.org/RTOS-Cortex-M3-M4.html
			http://www.freertos.org/FAQHelp.html */
			configASSERT( ucCurrentPriority >= ucMaxSysCallPriority );
 80091d4:	4b15      	ldr	r3, [pc, #84]	; (800922c <vPortValidateInterruptPriority+0x74>)
 80091d6:	781b      	ldrb	r3, [r3, #0]
 80091d8:	7afa      	ldrb	r2, [r7, #11]
 80091da:	429a      	cmp	r2, r3
 80091dc:	d20a      	bcs.n	80091f4 <vPortValidateInterruptPriority+0x3c>
	__asm volatile
 80091de:	f04f 0350 	mov.w	r3, #80	; 0x50
 80091e2:	f383 8811 	msr	BASEPRI, r3
 80091e6:	f3bf 8f6f 	isb	sy
 80091ea:	f3bf 8f4f 	dsb	sy
 80091ee:	607b      	str	r3, [r7, #4]
}
 80091f0:	bf00      	nop
 80091f2:	e7fe      	b.n	80091f2 <vPortValidateInterruptPriority+0x3a>
		configuration then the correct setting can be achieved on all Cortex-M
		devices by calling NVIC_SetPriorityGrouping( 0 ); before starting the
		scheduler.  Note however that some vendor specific peripheral libraries
		assume a non-zero priority group setting, in which cases using a value
		of zero will result in unpredictable behaviour. */
		configASSERT( ( portAIRCR_REG & portPRIORITY_GROUP_MASK ) <= ulMaxPRIGROUPValue );
 80091f4:	4b0e      	ldr	r3, [pc, #56]	; (8009230 <vPortValidateInterruptPriority+0x78>)
 80091f6:	681b      	ldr	r3, [r3, #0]
 80091f8:	f403 62e0 	and.w	r2, r3, #1792	; 0x700
 80091fc:	4b0d      	ldr	r3, [pc, #52]	; (8009234 <vPortValidateInterruptPriority+0x7c>)
 80091fe:	681b      	ldr	r3, [r3, #0]
 8009200:	429a      	cmp	r2, r3
 8009202:	d90a      	bls.n	800921a <vPortValidateInterruptPriority+0x62>
	__asm volatile
 8009204:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009208:	f383 8811 	msr	BASEPRI, r3
 800920c:	f3bf 8f6f 	isb	sy
 8009210:	f3bf 8f4f 	dsb	sy
 8009214:	603b      	str	r3, [r7, #0]
}
 8009216:	bf00      	nop
 8009218:	e7fe      	b.n	8009218 <vPortValidateInterruptPriority+0x60>
	}
 800921a:	bf00      	nop
 800921c:	3714      	adds	r7, #20
 800921e:	46bd      	mov	sp, r7
 8009220:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009224:	4770      	bx	lr
 8009226:	bf00      	nop
 8009228:	e000e3f0 	.word	0xe000e3f0
 800922c:	200062a8 	.word	0x200062a8
 8009230:	e000ed0c 	.word	0xe000ed0c
 8009234:	200062ac 	.word	0x200062ac

08009238 <pvPortMalloc>:
static size_t xBlockAllocatedBit = 0;

/*-----------------------------------------------------------*/

void *pvPortMalloc( size_t xWantedSize )
{
 8009238:	b580      	push	{r7, lr}
 800923a:	b08a      	sub	sp, #40	; 0x28
 800923c:	af00      	add	r7, sp, #0
 800923e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxBlock, *pxPreviousBlock, *pxNewBlockLink;
void *pvReturn = NULL;
 8009240:	2300      	movs	r3, #0
 8009242:	61fb      	str	r3, [r7, #28]

	vTaskSuspendAll();
 8009244:	f7fe fc4c 	bl	8007ae0 <vTaskSuspendAll>
	{
		/* If this is the first call to malloc then the heap will require
		initialisation to setup the list of free blocks. */
		if( pxEnd == NULL )
 8009248:	4b5b      	ldr	r3, [pc, #364]	; (80093b8 <pvPortMalloc+0x180>)
 800924a:	681b      	ldr	r3, [r3, #0]
 800924c:	2b00      	cmp	r3, #0
 800924e:	d101      	bne.n	8009254 <pvPortMalloc+0x1c>
		{
			prvHeapInit();
 8009250:	f000 f920 	bl	8009494 <prvHeapInit>

		/* Check the requested block size is not so large that the top bit is
		set.  The top bit of the block size member of the BlockLink_t structure
		is used to determine who owns the block - the application or the
		kernel, so it must be free. */
		if( ( xWantedSize & xBlockAllocatedBit ) == 0 )
 8009254:	4b59      	ldr	r3, [pc, #356]	; (80093bc <pvPortMalloc+0x184>)
 8009256:	681a      	ldr	r2, [r3, #0]
 8009258:	687b      	ldr	r3, [r7, #4]
 800925a:	4013      	ands	r3, r2
 800925c:	2b00      	cmp	r3, #0
 800925e:	f040 8093 	bne.w	8009388 <pvPortMalloc+0x150>
		{
			/* The wanted size is increased so it can contain a BlockLink_t
			structure in addition to the requested amount of bytes. */
			if( xWantedSize > 0 )
 8009262:	687b      	ldr	r3, [r7, #4]
 8009264:	2b00      	cmp	r3, #0
 8009266:	d01d      	beq.n	80092a4 <pvPortMalloc+0x6c>
			{
				xWantedSize += xHeapStructSize;
 8009268:	2208      	movs	r2, #8
 800926a:	687b      	ldr	r3, [r7, #4]
 800926c:	4413      	add	r3, r2
 800926e:	607b      	str	r3, [r7, #4]

				/* Ensure that blocks are always aligned to the required number
				of bytes. */
				if( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) != 0x00 )
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	f003 0307 	and.w	r3, r3, #7
 8009276:	2b00      	cmp	r3, #0
 8009278:	d014      	beq.n	80092a4 <pvPortMalloc+0x6c>
				{
					/* Byte alignment required. */
					xWantedSize += ( portBYTE_ALIGNMENT - ( xWantedSize & portBYTE_ALIGNMENT_MASK ) );
 800927a:	687b      	ldr	r3, [r7, #4]
 800927c:	f023 0307 	bic.w	r3, r3, #7
 8009280:	3308      	adds	r3, #8
 8009282:	607b      	str	r3, [r7, #4]
					configASSERT( ( xWantedSize & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009284:	687b      	ldr	r3, [r7, #4]
 8009286:	f003 0307 	and.w	r3, r3, #7
 800928a:	2b00      	cmp	r3, #0
 800928c:	d00a      	beq.n	80092a4 <pvPortMalloc+0x6c>
	__asm volatile
 800928e:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009292:	f383 8811 	msr	BASEPRI, r3
 8009296:	f3bf 8f6f 	isb	sy
 800929a:	f3bf 8f4f 	dsb	sy
 800929e:	617b      	str	r3, [r7, #20]
}
 80092a0:	bf00      	nop
 80092a2:	e7fe      	b.n	80092a2 <pvPortMalloc+0x6a>
			else
			{
				mtCOVERAGE_TEST_MARKER();
			}

			if( ( xWantedSize > 0 ) && ( xWantedSize <= xFreeBytesRemaining ) )
 80092a4:	687b      	ldr	r3, [r7, #4]
 80092a6:	2b00      	cmp	r3, #0
 80092a8:	d06e      	beq.n	8009388 <pvPortMalloc+0x150>
 80092aa:	4b45      	ldr	r3, [pc, #276]	; (80093c0 <pvPortMalloc+0x188>)
 80092ac:	681b      	ldr	r3, [r3, #0]
 80092ae:	687a      	ldr	r2, [r7, #4]
 80092b0:	429a      	cmp	r2, r3
 80092b2:	d869      	bhi.n	8009388 <pvPortMalloc+0x150>
			{
				/* Traverse the list from the start	(lowest address) block until
				one	of adequate size is found. */
				pxPreviousBlock = &xStart;
 80092b4:	4b43      	ldr	r3, [pc, #268]	; (80093c4 <pvPortMalloc+0x18c>)
 80092b6:	623b      	str	r3, [r7, #32]
				pxBlock = xStart.pxNextFreeBlock;
 80092b8:	4b42      	ldr	r3, [pc, #264]	; (80093c4 <pvPortMalloc+0x18c>)
 80092ba:	681b      	ldr	r3, [r3, #0]
 80092bc:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092be:	e004      	b.n	80092ca <pvPortMalloc+0x92>
				{
					pxPreviousBlock = pxBlock;
 80092c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c2:	623b      	str	r3, [r7, #32]
					pxBlock = pxBlock->pxNextFreeBlock;
 80092c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092c6:	681b      	ldr	r3, [r3, #0]
 80092c8:	627b      	str	r3, [r7, #36]	; 0x24
				while( ( pxBlock->xBlockSize < xWantedSize ) && ( pxBlock->pxNextFreeBlock != NULL ) )
 80092ca:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092cc:	685b      	ldr	r3, [r3, #4]
 80092ce:	687a      	ldr	r2, [r7, #4]
 80092d0:	429a      	cmp	r2, r3
 80092d2:	d903      	bls.n	80092dc <pvPortMalloc+0xa4>
 80092d4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092d6:	681b      	ldr	r3, [r3, #0]
 80092d8:	2b00      	cmp	r3, #0
 80092da:	d1f1      	bne.n	80092c0 <pvPortMalloc+0x88>
				}

				/* If the end marker was reached then a block of adequate size
				was	not found. */
				if( pxBlock != pxEnd )
 80092dc:	4b36      	ldr	r3, [pc, #216]	; (80093b8 <pvPortMalloc+0x180>)
 80092de:	681b      	ldr	r3, [r3, #0]
 80092e0:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 80092e2:	429a      	cmp	r2, r3
 80092e4:	d050      	beq.n	8009388 <pvPortMalloc+0x150>
				{
					/* Return the memory space pointed to - jumping over the
					BlockLink_t structure at its start. */
					pvReturn = ( void * ) ( ( ( uint8_t * ) pxPreviousBlock->pxNextFreeBlock ) + xHeapStructSize );
 80092e6:	6a3b      	ldr	r3, [r7, #32]
 80092e8:	681b      	ldr	r3, [r3, #0]
 80092ea:	2208      	movs	r2, #8
 80092ec:	4413      	add	r3, r2
 80092ee:	61fb      	str	r3, [r7, #28]

					/* This block is being returned for use so must be taken out
					of the list of free blocks. */
					pxPreviousBlock->pxNextFreeBlock = pxBlock->pxNextFreeBlock;
 80092f0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092f2:	681a      	ldr	r2, [r3, #0]
 80092f4:	6a3b      	ldr	r3, [r7, #32]
 80092f6:	601a      	str	r2, [r3, #0]

					/* If the block is larger than required it can be split into
					two. */
					if( ( pxBlock->xBlockSize - xWantedSize ) > heapMINIMUM_BLOCK_SIZE )
 80092f8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80092fa:	685a      	ldr	r2, [r3, #4]
 80092fc:	687b      	ldr	r3, [r7, #4]
 80092fe:	1ad2      	subs	r2, r2, r3
 8009300:	2308      	movs	r3, #8
 8009302:	005b      	lsls	r3, r3, #1
 8009304:	429a      	cmp	r2, r3
 8009306:	d91f      	bls.n	8009348 <pvPortMalloc+0x110>
					{
						/* This block is to be split into two.  Create a new
						block following the number of bytes requested. The void
						cast is used to prevent byte alignment warnings from the
						compiler. */
						pxNewBlockLink = ( void * ) ( ( ( uint8_t * ) pxBlock ) + xWantedSize );
 8009308:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800930a:	687b      	ldr	r3, [r7, #4]
 800930c:	4413      	add	r3, r2
 800930e:	61bb      	str	r3, [r7, #24]
						configASSERT( ( ( ( size_t ) pxNewBlockLink ) & portBYTE_ALIGNMENT_MASK ) == 0 );
 8009310:	69bb      	ldr	r3, [r7, #24]
 8009312:	f003 0307 	and.w	r3, r3, #7
 8009316:	2b00      	cmp	r3, #0
 8009318:	d00a      	beq.n	8009330 <pvPortMalloc+0xf8>
	__asm volatile
 800931a:	f04f 0350 	mov.w	r3, #80	; 0x50
 800931e:	f383 8811 	msr	BASEPRI, r3
 8009322:	f3bf 8f6f 	isb	sy
 8009326:	f3bf 8f4f 	dsb	sy
 800932a:	613b      	str	r3, [r7, #16]
}
 800932c:	bf00      	nop
 800932e:	e7fe      	b.n	800932e <pvPortMalloc+0xf6>

						/* Calculate the sizes of two blocks split from the
						single block. */
						pxNewBlockLink->xBlockSize = pxBlock->xBlockSize - xWantedSize;
 8009330:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009332:	685a      	ldr	r2, [r3, #4]
 8009334:	687b      	ldr	r3, [r7, #4]
 8009336:	1ad2      	subs	r2, r2, r3
 8009338:	69bb      	ldr	r3, [r7, #24]
 800933a:	605a      	str	r2, [r3, #4]
						pxBlock->xBlockSize = xWantedSize;
 800933c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800933e:	687a      	ldr	r2, [r7, #4]
 8009340:	605a      	str	r2, [r3, #4]

						/* Insert the new block into the list of free blocks. */
						prvInsertBlockIntoFreeList( pxNewBlockLink );
 8009342:	69b8      	ldr	r0, [r7, #24]
 8009344:	f000 f908 	bl	8009558 <prvInsertBlockIntoFreeList>
					else
					{
						mtCOVERAGE_TEST_MARKER();
					}

					xFreeBytesRemaining -= pxBlock->xBlockSize;
 8009348:	4b1d      	ldr	r3, [pc, #116]	; (80093c0 <pvPortMalloc+0x188>)
 800934a:	681a      	ldr	r2, [r3, #0]
 800934c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800934e:	685b      	ldr	r3, [r3, #4]
 8009350:	1ad3      	subs	r3, r2, r3
 8009352:	4a1b      	ldr	r2, [pc, #108]	; (80093c0 <pvPortMalloc+0x188>)
 8009354:	6013      	str	r3, [r2, #0]

					if( xFreeBytesRemaining < xMinimumEverFreeBytesRemaining )
 8009356:	4b1a      	ldr	r3, [pc, #104]	; (80093c0 <pvPortMalloc+0x188>)
 8009358:	681a      	ldr	r2, [r3, #0]
 800935a:	4b1b      	ldr	r3, [pc, #108]	; (80093c8 <pvPortMalloc+0x190>)
 800935c:	681b      	ldr	r3, [r3, #0]
 800935e:	429a      	cmp	r2, r3
 8009360:	d203      	bcs.n	800936a <pvPortMalloc+0x132>
					{
						xMinimumEverFreeBytesRemaining = xFreeBytesRemaining;
 8009362:	4b17      	ldr	r3, [pc, #92]	; (80093c0 <pvPortMalloc+0x188>)
 8009364:	681b      	ldr	r3, [r3, #0]
 8009366:	4a18      	ldr	r2, [pc, #96]	; (80093c8 <pvPortMalloc+0x190>)
 8009368:	6013      	str	r3, [r2, #0]
						mtCOVERAGE_TEST_MARKER();
					}

					/* The block is being returned - it is allocated and owned
					by the application and has no "next" block. */
					pxBlock->xBlockSize |= xBlockAllocatedBit;
 800936a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800936c:	685a      	ldr	r2, [r3, #4]
 800936e:	4b13      	ldr	r3, [pc, #76]	; (80093bc <pvPortMalloc+0x184>)
 8009370:	681b      	ldr	r3, [r3, #0]
 8009372:	431a      	orrs	r2, r3
 8009374:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8009376:	605a      	str	r2, [r3, #4]
					pxBlock->pxNextFreeBlock = NULL;
 8009378:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800937a:	2200      	movs	r2, #0
 800937c:	601a      	str	r2, [r3, #0]
					xNumberOfSuccessfulAllocations++;
 800937e:	4b13      	ldr	r3, [pc, #76]	; (80093cc <pvPortMalloc+0x194>)
 8009380:	681b      	ldr	r3, [r3, #0]
 8009382:	3301      	adds	r3, #1
 8009384:	4a11      	ldr	r2, [pc, #68]	; (80093cc <pvPortMalloc+0x194>)
 8009386:	6013      	str	r3, [r2, #0]
			mtCOVERAGE_TEST_MARKER();
		}

		traceMALLOC( pvReturn, xWantedSize );
	}
	( void ) xTaskResumeAll();
 8009388:	f7fe fbb8 	bl	8007afc <xTaskResumeAll>
			mtCOVERAGE_TEST_MARKER();
		}
	}
	#endif

	configASSERT( ( ( ( size_t ) pvReturn ) & ( size_t ) portBYTE_ALIGNMENT_MASK ) == 0 );
 800938c:	69fb      	ldr	r3, [r7, #28]
 800938e:	f003 0307 	and.w	r3, r3, #7
 8009392:	2b00      	cmp	r3, #0
 8009394:	d00a      	beq.n	80093ac <pvPortMalloc+0x174>
	__asm volatile
 8009396:	f04f 0350 	mov.w	r3, #80	; 0x50
 800939a:	f383 8811 	msr	BASEPRI, r3
 800939e:	f3bf 8f6f 	isb	sy
 80093a2:	f3bf 8f4f 	dsb	sy
 80093a6:	60fb      	str	r3, [r7, #12]
}
 80093a8:	bf00      	nop
 80093aa:	e7fe      	b.n	80093aa <pvPortMalloc+0x172>
	return pvReturn;
 80093ac:	69fb      	ldr	r3, [r7, #28]
}
 80093ae:	4618      	mov	r0, r3
 80093b0:	3728      	adds	r7, #40	; 0x28
 80093b2:	46bd      	mov	sp, r7
 80093b4:	bd80      	pop	{r7, pc}
 80093b6:	bf00      	nop
 80093b8:	20009eb8 	.word	0x20009eb8
 80093bc:	20009ecc 	.word	0x20009ecc
 80093c0:	20009ebc 	.word	0x20009ebc
 80093c4:	20009eb0 	.word	0x20009eb0
 80093c8:	20009ec0 	.word	0x20009ec0
 80093cc:	20009ec4 	.word	0x20009ec4

080093d0 <vPortFree>:
/*-----------------------------------------------------------*/

void vPortFree( void *pv )
{
 80093d0:	b580      	push	{r7, lr}
 80093d2:	b086      	sub	sp, #24
 80093d4:	af00      	add	r7, sp, #0
 80093d6:	6078      	str	r0, [r7, #4]
uint8_t *puc = ( uint8_t * ) pv;
 80093d8:	687b      	ldr	r3, [r7, #4]
 80093da:	617b      	str	r3, [r7, #20]
BlockLink_t *pxLink;

	if( pv != NULL )
 80093dc:	687b      	ldr	r3, [r7, #4]
 80093de:	2b00      	cmp	r3, #0
 80093e0:	d04d      	beq.n	800947e <vPortFree+0xae>
	{
		/* The memory being freed will have an BlockLink_t structure immediately
		before it. */
		puc -= xHeapStructSize;
 80093e2:	2308      	movs	r3, #8
 80093e4:	425b      	negs	r3, r3
 80093e6:	697a      	ldr	r2, [r7, #20]
 80093e8:	4413      	add	r3, r2
 80093ea:	617b      	str	r3, [r7, #20]

		/* This casting is to keep the compiler from issuing warnings. */
		pxLink = ( void * ) puc;
 80093ec:	697b      	ldr	r3, [r7, #20]
 80093ee:	613b      	str	r3, [r7, #16]

		/* Check the block is actually allocated. */
		configASSERT( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 );
 80093f0:	693b      	ldr	r3, [r7, #16]
 80093f2:	685a      	ldr	r2, [r3, #4]
 80093f4:	4b24      	ldr	r3, [pc, #144]	; (8009488 <vPortFree+0xb8>)
 80093f6:	681b      	ldr	r3, [r3, #0]
 80093f8:	4013      	ands	r3, r2
 80093fa:	2b00      	cmp	r3, #0
 80093fc:	d10a      	bne.n	8009414 <vPortFree+0x44>
	__asm volatile
 80093fe:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009402:	f383 8811 	msr	BASEPRI, r3
 8009406:	f3bf 8f6f 	isb	sy
 800940a:	f3bf 8f4f 	dsb	sy
 800940e:	60fb      	str	r3, [r7, #12]
}
 8009410:	bf00      	nop
 8009412:	e7fe      	b.n	8009412 <vPortFree+0x42>
		configASSERT( pxLink->pxNextFreeBlock == NULL );
 8009414:	693b      	ldr	r3, [r7, #16]
 8009416:	681b      	ldr	r3, [r3, #0]
 8009418:	2b00      	cmp	r3, #0
 800941a:	d00a      	beq.n	8009432 <vPortFree+0x62>
	__asm volatile
 800941c:	f04f 0350 	mov.w	r3, #80	; 0x50
 8009420:	f383 8811 	msr	BASEPRI, r3
 8009424:	f3bf 8f6f 	isb	sy
 8009428:	f3bf 8f4f 	dsb	sy
 800942c:	60bb      	str	r3, [r7, #8]
}
 800942e:	bf00      	nop
 8009430:	e7fe      	b.n	8009430 <vPortFree+0x60>

		if( ( pxLink->xBlockSize & xBlockAllocatedBit ) != 0 )
 8009432:	693b      	ldr	r3, [r7, #16]
 8009434:	685a      	ldr	r2, [r3, #4]
 8009436:	4b14      	ldr	r3, [pc, #80]	; (8009488 <vPortFree+0xb8>)
 8009438:	681b      	ldr	r3, [r3, #0]
 800943a:	4013      	ands	r3, r2
 800943c:	2b00      	cmp	r3, #0
 800943e:	d01e      	beq.n	800947e <vPortFree+0xae>
		{
			if( pxLink->pxNextFreeBlock == NULL )
 8009440:	693b      	ldr	r3, [r7, #16]
 8009442:	681b      	ldr	r3, [r3, #0]
 8009444:	2b00      	cmp	r3, #0
 8009446:	d11a      	bne.n	800947e <vPortFree+0xae>
			{
				/* The block is being returned to the heap - it is no longer
				allocated. */
				pxLink->xBlockSize &= ~xBlockAllocatedBit;
 8009448:	693b      	ldr	r3, [r7, #16]
 800944a:	685a      	ldr	r2, [r3, #4]
 800944c:	4b0e      	ldr	r3, [pc, #56]	; (8009488 <vPortFree+0xb8>)
 800944e:	681b      	ldr	r3, [r3, #0]
 8009450:	43db      	mvns	r3, r3
 8009452:	401a      	ands	r2, r3
 8009454:	693b      	ldr	r3, [r7, #16]
 8009456:	605a      	str	r2, [r3, #4]

				vTaskSuspendAll();
 8009458:	f7fe fb42 	bl	8007ae0 <vTaskSuspendAll>
				{
					/* Add this block to the list of free blocks. */
					xFreeBytesRemaining += pxLink->xBlockSize;
 800945c:	693b      	ldr	r3, [r7, #16]
 800945e:	685a      	ldr	r2, [r3, #4]
 8009460:	4b0a      	ldr	r3, [pc, #40]	; (800948c <vPortFree+0xbc>)
 8009462:	681b      	ldr	r3, [r3, #0]
 8009464:	4413      	add	r3, r2
 8009466:	4a09      	ldr	r2, [pc, #36]	; (800948c <vPortFree+0xbc>)
 8009468:	6013      	str	r3, [r2, #0]
					traceFREE( pv, pxLink->xBlockSize );
					prvInsertBlockIntoFreeList( ( ( BlockLink_t * ) pxLink ) );
 800946a:	6938      	ldr	r0, [r7, #16]
 800946c:	f000 f874 	bl	8009558 <prvInsertBlockIntoFreeList>
					xNumberOfSuccessfulFrees++;
 8009470:	4b07      	ldr	r3, [pc, #28]	; (8009490 <vPortFree+0xc0>)
 8009472:	681b      	ldr	r3, [r3, #0]
 8009474:	3301      	adds	r3, #1
 8009476:	4a06      	ldr	r2, [pc, #24]	; (8009490 <vPortFree+0xc0>)
 8009478:	6013      	str	r3, [r2, #0]
				}
				( void ) xTaskResumeAll();
 800947a:	f7fe fb3f 	bl	8007afc <xTaskResumeAll>
		else
		{
			mtCOVERAGE_TEST_MARKER();
		}
	}
}
 800947e:	bf00      	nop
 8009480:	3718      	adds	r7, #24
 8009482:	46bd      	mov	sp, r7
 8009484:	bd80      	pop	{r7, pc}
 8009486:	bf00      	nop
 8009488:	20009ecc 	.word	0x20009ecc
 800948c:	20009ebc 	.word	0x20009ebc
 8009490:	20009ec8 	.word	0x20009ec8

08009494 <prvHeapInit>:
	/* This just exists to keep the linker quiet. */
}
/*-----------------------------------------------------------*/

static void prvHeapInit( void )
{
 8009494:	b480      	push	{r7}
 8009496:	b085      	sub	sp, #20
 8009498:	af00      	add	r7, sp, #0
BlockLink_t *pxFirstFreeBlock;
uint8_t *pucAlignedHeap;
size_t uxAddress;
size_t xTotalHeapSize = configTOTAL_HEAP_SIZE;
 800949a:	f44f 5370 	mov.w	r3, #15360	; 0x3c00
 800949e:	60bb      	str	r3, [r7, #8]

	/* Ensure the heap starts on a correctly aligned boundary. */
	uxAddress = ( size_t ) ucHeap;
 80094a0:	4b27      	ldr	r3, [pc, #156]	; (8009540 <prvHeapInit+0xac>)
 80094a2:	60fb      	str	r3, [r7, #12]

	if( ( uxAddress & portBYTE_ALIGNMENT_MASK ) != 0 )
 80094a4:	68fb      	ldr	r3, [r7, #12]
 80094a6:	f003 0307 	and.w	r3, r3, #7
 80094aa:	2b00      	cmp	r3, #0
 80094ac:	d00c      	beq.n	80094c8 <prvHeapInit+0x34>
	{
		uxAddress += ( portBYTE_ALIGNMENT - 1 );
 80094ae:	68fb      	ldr	r3, [r7, #12]
 80094b0:	3307      	adds	r3, #7
 80094b2:	60fb      	str	r3, [r7, #12]
		uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094b4:	68fb      	ldr	r3, [r7, #12]
 80094b6:	f023 0307 	bic.w	r3, r3, #7
 80094ba:	60fb      	str	r3, [r7, #12]
		xTotalHeapSize -= uxAddress - ( size_t ) ucHeap;
 80094bc:	68ba      	ldr	r2, [r7, #8]
 80094be:	68fb      	ldr	r3, [r7, #12]
 80094c0:	1ad3      	subs	r3, r2, r3
 80094c2:	4a1f      	ldr	r2, [pc, #124]	; (8009540 <prvHeapInit+0xac>)
 80094c4:	4413      	add	r3, r2
 80094c6:	60bb      	str	r3, [r7, #8]
	}

	pucAlignedHeap = ( uint8_t * ) uxAddress;
 80094c8:	68fb      	ldr	r3, [r7, #12]
 80094ca:	607b      	str	r3, [r7, #4]

	/* xStart is used to hold a pointer to the first item in the list of free
	blocks.  The void cast is used to prevent compiler warnings. */
	xStart.pxNextFreeBlock = ( void * ) pucAlignedHeap;
 80094cc:	4a1d      	ldr	r2, [pc, #116]	; (8009544 <prvHeapInit+0xb0>)
 80094ce:	687b      	ldr	r3, [r7, #4]
 80094d0:	6013      	str	r3, [r2, #0]
	xStart.xBlockSize = ( size_t ) 0;
 80094d2:	4b1c      	ldr	r3, [pc, #112]	; (8009544 <prvHeapInit+0xb0>)
 80094d4:	2200      	movs	r2, #0
 80094d6:	605a      	str	r2, [r3, #4]

	/* pxEnd is used to mark the end of the list of free blocks and is inserted
	at the end of the heap space. */
	uxAddress = ( ( size_t ) pucAlignedHeap ) + xTotalHeapSize;
 80094d8:	687b      	ldr	r3, [r7, #4]
 80094da:	68ba      	ldr	r2, [r7, #8]
 80094dc:	4413      	add	r3, r2
 80094de:	60fb      	str	r3, [r7, #12]
	uxAddress -= xHeapStructSize;
 80094e0:	2208      	movs	r2, #8
 80094e2:	68fb      	ldr	r3, [r7, #12]
 80094e4:	1a9b      	subs	r3, r3, r2
 80094e6:	60fb      	str	r3, [r7, #12]
	uxAddress &= ~( ( size_t ) portBYTE_ALIGNMENT_MASK );
 80094e8:	68fb      	ldr	r3, [r7, #12]
 80094ea:	f023 0307 	bic.w	r3, r3, #7
 80094ee:	60fb      	str	r3, [r7, #12]
	pxEnd = ( void * ) uxAddress;
 80094f0:	68fb      	ldr	r3, [r7, #12]
 80094f2:	4a15      	ldr	r2, [pc, #84]	; (8009548 <prvHeapInit+0xb4>)
 80094f4:	6013      	str	r3, [r2, #0]
	pxEnd->xBlockSize = 0;
 80094f6:	4b14      	ldr	r3, [pc, #80]	; (8009548 <prvHeapInit+0xb4>)
 80094f8:	681b      	ldr	r3, [r3, #0]
 80094fa:	2200      	movs	r2, #0
 80094fc:	605a      	str	r2, [r3, #4]
	pxEnd->pxNextFreeBlock = NULL;
 80094fe:	4b12      	ldr	r3, [pc, #72]	; (8009548 <prvHeapInit+0xb4>)
 8009500:	681b      	ldr	r3, [r3, #0]
 8009502:	2200      	movs	r2, #0
 8009504:	601a      	str	r2, [r3, #0]

	/* To start with there is a single free block that is sized to take up the
	entire heap space, minus the space taken by pxEnd. */
	pxFirstFreeBlock = ( void * ) pucAlignedHeap;
 8009506:	687b      	ldr	r3, [r7, #4]
 8009508:	603b      	str	r3, [r7, #0]
	pxFirstFreeBlock->xBlockSize = uxAddress - ( size_t ) pxFirstFreeBlock;
 800950a:	683b      	ldr	r3, [r7, #0]
 800950c:	68fa      	ldr	r2, [r7, #12]
 800950e:	1ad2      	subs	r2, r2, r3
 8009510:	683b      	ldr	r3, [r7, #0]
 8009512:	605a      	str	r2, [r3, #4]
	pxFirstFreeBlock->pxNextFreeBlock = pxEnd;
 8009514:	4b0c      	ldr	r3, [pc, #48]	; (8009548 <prvHeapInit+0xb4>)
 8009516:	681a      	ldr	r2, [r3, #0]
 8009518:	683b      	ldr	r3, [r7, #0]
 800951a:	601a      	str	r2, [r3, #0]

	/* Only one block exists - and it covers the entire usable heap space. */
	xMinimumEverFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 800951c:	683b      	ldr	r3, [r7, #0]
 800951e:	685b      	ldr	r3, [r3, #4]
 8009520:	4a0a      	ldr	r2, [pc, #40]	; (800954c <prvHeapInit+0xb8>)
 8009522:	6013      	str	r3, [r2, #0]
	xFreeBytesRemaining = pxFirstFreeBlock->xBlockSize;
 8009524:	683b      	ldr	r3, [r7, #0]
 8009526:	685b      	ldr	r3, [r3, #4]
 8009528:	4a09      	ldr	r2, [pc, #36]	; (8009550 <prvHeapInit+0xbc>)
 800952a:	6013      	str	r3, [r2, #0]

	/* Work out the position of the top bit in a size_t variable. */
	xBlockAllocatedBit = ( ( size_t ) 1 ) << ( ( sizeof( size_t ) * heapBITS_PER_BYTE ) - 1 );
 800952c:	4b09      	ldr	r3, [pc, #36]	; (8009554 <prvHeapInit+0xc0>)
 800952e:	f04f 4200 	mov.w	r2, #2147483648	; 0x80000000
 8009532:	601a      	str	r2, [r3, #0]
}
 8009534:	bf00      	nop
 8009536:	3714      	adds	r7, #20
 8009538:	46bd      	mov	sp, r7
 800953a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800953e:	4770      	bx	lr
 8009540:	200062b0 	.word	0x200062b0
 8009544:	20009eb0 	.word	0x20009eb0
 8009548:	20009eb8 	.word	0x20009eb8
 800954c:	20009ec0 	.word	0x20009ec0
 8009550:	20009ebc 	.word	0x20009ebc
 8009554:	20009ecc 	.word	0x20009ecc

08009558 <prvInsertBlockIntoFreeList>:
/*-----------------------------------------------------------*/

static void prvInsertBlockIntoFreeList( BlockLink_t *pxBlockToInsert )
{
 8009558:	b480      	push	{r7}
 800955a:	b085      	sub	sp, #20
 800955c:	af00      	add	r7, sp, #0
 800955e:	6078      	str	r0, [r7, #4]
BlockLink_t *pxIterator;
uint8_t *puc;

	/* Iterate through the list until a block is found that has a higher address
	than the block being inserted. */
	for( pxIterator = &xStart; pxIterator->pxNextFreeBlock < pxBlockToInsert; pxIterator = pxIterator->pxNextFreeBlock )
 8009560:	4b28      	ldr	r3, [pc, #160]	; (8009604 <prvInsertBlockIntoFreeList+0xac>)
 8009562:	60fb      	str	r3, [r7, #12]
 8009564:	e002      	b.n	800956c <prvInsertBlockIntoFreeList+0x14>
 8009566:	68fb      	ldr	r3, [r7, #12]
 8009568:	681b      	ldr	r3, [r3, #0]
 800956a:	60fb      	str	r3, [r7, #12]
 800956c:	68fb      	ldr	r3, [r7, #12]
 800956e:	681b      	ldr	r3, [r3, #0]
 8009570:	687a      	ldr	r2, [r7, #4]
 8009572:	429a      	cmp	r2, r3
 8009574:	d8f7      	bhi.n	8009566 <prvInsertBlockIntoFreeList+0xe>
		/* Nothing to do here, just iterate to the right position. */
	}

	/* Do the block being inserted, and the block it is being inserted after
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxIterator;
 8009576:	68fb      	ldr	r3, [r7, #12]
 8009578:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxIterator->xBlockSize ) == ( uint8_t * ) pxBlockToInsert )
 800957a:	68fb      	ldr	r3, [r7, #12]
 800957c:	685b      	ldr	r3, [r3, #4]
 800957e:	68ba      	ldr	r2, [r7, #8]
 8009580:	4413      	add	r3, r2
 8009582:	687a      	ldr	r2, [r7, #4]
 8009584:	429a      	cmp	r2, r3
 8009586:	d108      	bne.n	800959a <prvInsertBlockIntoFreeList+0x42>
	{
		pxIterator->xBlockSize += pxBlockToInsert->xBlockSize;
 8009588:	68fb      	ldr	r3, [r7, #12]
 800958a:	685a      	ldr	r2, [r3, #4]
 800958c:	687b      	ldr	r3, [r7, #4]
 800958e:	685b      	ldr	r3, [r3, #4]
 8009590:	441a      	add	r2, r3
 8009592:	68fb      	ldr	r3, [r7, #12]
 8009594:	605a      	str	r2, [r3, #4]
		pxBlockToInsert = pxIterator;
 8009596:	68fb      	ldr	r3, [r7, #12]
 8009598:	607b      	str	r3, [r7, #4]
		mtCOVERAGE_TEST_MARKER();
	}

	/* Do the block being inserted, and the block it is being inserted before
	make a contiguous block of memory? */
	puc = ( uint8_t * ) pxBlockToInsert;
 800959a:	687b      	ldr	r3, [r7, #4]
 800959c:	60bb      	str	r3, [r7, #8]
	if( ( puc + pxBlockToInsert->xBlockSize ) == ( uint8_t * ) pxIterator->pxNextFreeBlock )
 800959e:	687b      	ldr	r3, [r7, #4]
 80095a0:	685b      	ldr	r3, [r3, #4]
 80095a2:	68ba      	ldr	r2, [r7, #8]
 80095a4:	441a      	add	r2, r3
 80095a6:	68fb      	ldr	r3, [r7, #12]
 80095a8:	681b      	ldr	r3, [r3, #0]
 80095aa:	429a      	cmp	r2, r3
 80095ac:	d118      	bne.n	80095e0 <prvInsertBlockIntoFreeList+0x88>
	{
		if( pxIterator->pxNextFreeBlock != pxEnd )
 80095ae:	68fb      	ldr	r3, [r7, #12]
 80095b0:	681a      	ldr	r2, [r3, #0]
 80095b2:	4b15      	ldr	r3, [pc, #84]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095b4:	681b      	ldr	r3, [r3, #0]
 80095b6:	429a      	cmp	r2, r3
 80095b8:	d00d      	beq.n	80095d6 <prvInsertBlockIntoFreeList+0x7e>
		{
			/* Form one big block from the two blocks. */
			pxBlockToInsert->xBlockSize += pxIterator->pxNextFreeBlock->xBlockSize;
 80095ba:	687b      	ldr	r3, [r7, #4]
 80095bc:	685a      	ldr	r2, [r3, #4]
 80095be:	68fb      	ldr	r3, [r7, #12]
 80095c0:	681b      	ldr	r3, [r3, #0]
 80095c2:	685b      	ldr	r3, [r3, #4]
 80095c4:	441a      	add	r2, r3
 80095c6:	687b      	ldr	r3, [r7, #4]
 80095c8:	605a      	str	r2, [r3, #4]
			pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock->pxNextFreeBlock;
 80095ca:	68fb      	ldr	r3, [r7, #12]
 80095cc:	681b      	ldr	r3, [r3, #0]
 80095ce:	681a      	ldr	r2, [r3, #0]
 80095d0:	687b      	ldr	r3, [r7, #4]
 80095d2:	601a      	str	r2, [r3, #0]
 80095d4:	e008      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
		else
		{
			pxBlockToInsert->pxNextFreeBlock = pxEnd;
 80095d6:	4b0c      	ldr	r3, [pc, #48]	; (8009608 <prvInsertBlockIntoFreeList+0xb0>)
 80095d8:	681a      	ldr	r2, [r3, #0]
 80095da:	687b      	ldr	r3, [r7, #4]
 80095dc:	601a      	str	r2, [r3, #0]
 80095de:	e003      	b.n	80095e8 <prvInsertBlockIntoFreeList+0x90>
		}
	}
	else
	{
		pxBlockToInsert->pxNextFreeBlock = pxIterator->pxNextFreeBlock;
 80095e0:	68fb      	ldr	r3, [r7, #12]
 80095e2:	681a      	ldr	r2, [r3, #0]
 80095e4:	687b      	ldr	r3, [r7, #4]
 80095e6:	601a      	str	r2, [r3, #0]

	/* If the block being inserted plugged a gab, so was merged with the block
	before and the block after, then it's pxNextFreeBlock pointer will have
	already been set, and should not be set here as that would make it point
	to itself. */
	if( pxIterator != pxBlockToInsert )
 80095e8:	68fa      	ldr	r2, [r7, #12]
 80095ea:	687b      	ldr	r3, [r7, #4]
 80095ec:	429a      	cmp	r2, r3
 80095ee:	d002      	beq.n	80095f6 <prvInsertBlockIntoFreeList+0x9e>
	{
		pxIterator->pxNextFreeBlock = pxBlockToInsert;
 80095f0:	68fb      	ldr	r3, [r7, #12]
 80095f2:	687a      	ldr	r2, [r7, #4]
 80095f4:	601a      	str	r2, [r3, #0]
	}
	else
	{
		mtCOVERAGE_TEST_MARKER();
	}
}
 80095f6:	bf00      	nop
 80095f8:	3714      	adds	r7, #20
 80095fa:	46bd      	mov	sp, r7
 80095fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8009600:	4770      	bx	lr
 8009602:	bf00      	nop
 8009604:	20009eb0 	.word	0x20009eb0
 8009608:	20009eb8 	.word	0x20009eb8

0800960c <netconn_apimsg>:
 * @param apimsg a struct containing the function to call and its parameters
 * @return ERR_OK if the function was called, another err_t if not
 */
static err_t
netconn_apimsg(tcpip_callback_fn fn, struct api_msg *apimsg)
{
 800960c:	b580      	push	{r7, lr}
 800960e:	b084      	sub	sp, #16
 8009610:	af00      	add	r7, sp, #0
 8009612:	6078      	str	r0, [r7, #4]
 8009614:	6039      	str	r1, [r7, #0]

#if LWIP_NETCONN_SEM_PER_THREAD
  apimsg->op_completed_sem = LWIP_NETCONN_THREAD_SEM_GET();
#endif /* LWIP_NETCONN_SEM_PER_THREAD */

  err = tcpip_send_msg_wait_sem(fn, apimsg, LWIP_API_MSG_SEM(apimsg));
 8009616:	683b      	ldr	r3, [r7, #0]
 8009618:	681b      	ldr	r3, [r3, #0]
 800961a:	330c      	adds	r3, #12
 800961c:	461a      	mov	r2, r3
 800961e:	6839      	ldr	r1, [r7, #0]
 8009620:	6878      	ldr	r0, [r7, #4]
 8009622:	f002 f9d3 	bl	800b9cc <tcpip_send_msg_wait_sem>
 8009626:	4603      	mov	r3, r0
 8009628:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800962a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800962e:	2b00      	cmp	r3, #0
 8009630:	d103      	bne.n	800963a <netconn_apimsg+0x2e>
    return apimsg->err;
 8009632:	683b      	ldr	r3, [r7, #0]
 8009634:	f993 3004 	ldrsb.w	r3, [r3, #4]
 8009638:	e001      	b.n	800963e <netconn_apimsg+0x32>
  }
  return err;
 800963a:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800963e:	4618      	mov	r0, r3
 8009640:	3710      	adds	r7, #16
 8009642:	46bd      	mov	sp, r7
 8009644:	bd80      	pop	{r7, pc}
	...

08009648 <netconn_new_with_proto_and_callback>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_new_with_proto_and_callback(enum netconn_type t, u8_t proto, netconn_callback callback)
{
 8009648:	b580      	push	{r7, lr}
 800964a:	b08c      	sub	sp, #48	; 0x30
 800964c:	af00      	add	r7, sp, #0
 800964e:	4603      	mov	r3, r0
 8009650:	603a      	str	r2, [r7, #0]
 8009652:	71fb      	strb	r3, [r7, #7]
 8009654:	460b      	mov	r3, r1
 8009656:	71bb      	strb	r3, [r7, #6]
  struct netconn *conn;
  API_MSG_VAR_DECLARE(msg);
  API_MSG_VAR_ALLOC_RETURN_NULL(msg);

  conn = netconn_alloc(t, callback);
 8009658:	79fb      	ldrb	r3, [r7, #7]
 800965a:	6839      	ldr	r1, [r7, #0]
 800965c:	4618      	mov	r0, r3
 800965e:	f000 ffe7 	bl	800a630 <netconn_alloc>
 8009662:	62f8      	str	r0, [r7, #44]	; 0x2c
  if (conn != NULL) {
 8009664:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009666:	2b00      	cmp	r3, #0
 8009668:	d054      	beq.n	8009714 <netconn_new_with_proto_and_callback+0xcc>
    err_t err;

    API_MSG_VAR_REF(msg).msg.n.proto = proto;
 800966a:	79bb      	ldrb	r3, [r7, #6]
 800966c:	743b      	strb	r3, [r7, #16]
    API_MSG_VAR_REF(msg).conn = conn;
 800966e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009670:	60bb      	str	r3, [r7, #8]
    err = netconn_apimsg(lwip_netconn_do_newconn, &API_MSG_VAR_REF(msg));
 8009672:	f107 0308 	add.w	r3, r7, #8
 8009676:	4619      	mov	r1, r3
 8009678:	4829      	ldr	r0, [pc, #164]	; (8009720 <netconn_new_with_proto_and_callback+0xd8>)
 800967a:	f7ff ffc7 	bl	800960c <netconn_apimsg>
 800967e:	4603      	mov	r3, r0
 8009680:	f887 302b 	strb.w	r3, [r7, #43]	; 0x2b
    if (err != ERR_OK) {
 8009684:	f997 302b 	ldrsb.w	r3, [r7, #43]	; 0x2b
 8009688:	2b00      	cmp	r3, #0
 800968a:	d043      	beq.n	8009714 <netconn_new_with_proto_and_callback+0xcc>
      LWIP_ASSERT("freeing conn without freeing pcb", conn->pcb.tcp == NULL);
 800968c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800968e:	685b      	ldr	r3, [r3, #4]
 8009690:	2b00      	cmp	r3, #0
 8009692:	d005      	beq.n	80096a0 <netconn_new_with_proto_and_callback+0x58>
 8009694:	4b23      	ldr	r3, [pc, #140]	; (8009724 <netconn_new_with_proto_and_callback+0xdc>)
 8009696:	22a3      	movs	r2, #163	; 0xa3
 8009698:	4923      	ldr	r1, [pc, #140]	; (8009728 <netconn_new_with_proto_and_callback+0xe0>)
 800969a:	4824      	ldr	r0, [pc, #144]	; (800972c <netconn_new_with_proto_and_callback+0xe4>)
 800969c:	f00d fba8 	bl	8016df0 <iprintf>
      LWIP_ASSERT("conn has no recvmbox", sys_mbox_valid(&conn->recvmbox));
 80096a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096a2:	3310      	adds	r3, #16
 80096a4:	4618      	mov	r0, r3
 80096a6:	f00d f98d 	bl	80169c4 <sys_mbox_valid>
 80096aa:	4603      	mov	r3, r0
 80096ac:	2b00      	cmp	r3, #0
 80096ae:	d105      	bne.n	80096bc <netconn_new_with_proto_and_callback+0x74>
 80096b0:	4b1c      	ldr	r3, [pc, #112]	; (8009724 <netconn_new_with_proto_and_callback+0xdc>)
 80096b2:	22a4      	movs	r2, #164	; 0xa4
 80096b4:	491e      	ldr	r1, [pc, #120]	; (8009730 <netconn_new_with_proto_and_callback+0xe8>)
 80096b6:	481d      	ldr	r0, [pc, #116]	; (800972c <netconn_new_with_proto_and_callback+0xe4>)
 80096b8:	f00d fb9a 	bl	8016df0 <iprintf>
#if LWIP_TCP
      LWIP_ASSERT("conn->acceptmbox shouldn't exist", !sys_mbox_valid(&conn->acceptmbox));
 80096bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096be:	3314      	adds	r3, #20
 80096c0:	4618      	mov	r0, r3
 80096c2:	f00d f97f 	bl	80169c4 <sys_mbox_valid>
 80096c6:	4603      	mov	r3, r0
 80096c8:	2b00      	cmp	r3, #0
 80096ca:	d005      	beq.n	80096d8 <netconn_new_with_proto_and_callback+0x90>
 80096cc:	4b15      	ldr	r3, [pc, #84]	; (8009724 <netconn_new_with_proto_and_callback+0xdc>)
 80096ce:	22a6      	movs	r2, #166	; 0xa6
 80096d0:	4918      	ldr	r1, [pc, #96]	; (8009734 <netconn_new_with_proto_and_callback+0xec>)
 80096d2:	4816      	ldr	r0, [pc, #88]	; (800972c <netconn_new_with_proto_and_callback+0xe4>)
 80096d4:	f00d fb8c 	bl	8016df0 <iprintf>
#endif /* LWIP_TCP */
#if !LWIP_NETCONN_SEM_PER_THREAD
      LWIP_ASSERT("conn has no op_completed", sys_sem_valid(&conn->op_completed));
 80096d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096da:	330c      	adds	r3, #12
 80096dc:	4618      	mov	r0, r3
 80096de:	f00d f9ff 	bl	8016ae0 <sys_sem_valid>
 80096e2:	4603      	mov	r3, r0
 80096e4:	2b00      	cmp	r3, #0
 80096e6:	d105      	bne.n	80096f4 <netconn_new_with_proto_and_callback+0xac>
 80096e8:	4b0e      	ldr	r3, [pc, #56]	; (8009724 <netconn_new_with_proto_and_callback+0xdc>)
 80096ea:	22a9      	movs	r2, #169	; 0xa9
 80096ec:	4912      	ldr	r1, [pc, #72]	; (8009738 <netconn_new_with_proto_and_callback+0xf0>)
 80096ee:	480f      	ldr	r0, [pc, #60]	; (800972c <netconn_new_with_proto_and_callback+0xe4>)
 80096f0:	f00d fb7e 	bl	8016df0 <iprintf>
      sys_sem_free(&conn->op_completed);
 80096f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80096f6:	330c      	adds	r3, #12
 80096f8:	4618      	mov	r0, r3
 80096fa:	f00d f9e4 	bl	8016ac6 <sys_sem_free>
#endif /* !LWIP_NETCONN_SEM_PER_THREAD */
      sys_mbox_free(&conn->recvmbox);
 80096fe:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009700:	3310      	adds	r3, #16
 8009702:	4618      	mov	r0, r3
 8009704:	f00d f8ea 	bl	80168dc <sys_mbox_free>
      memp_free(MEMP_NETCONN, conn);
 8009708:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800970a:	2007      	movs	r0, #7
 800970c:	f002 ff0c 	bl	800c528 <memp_free>
      API_MSG_VAR_FREE(msg);
      return NULL;
 8009710:	2300      	movs	r3, #0
 8009712:	e000      	b.n	8009716 <netconn_new_with_proto_and_callback+0xce>
    }
  }
  API_MSG_VAR_FREE(msg);
  return conn;
 8009714:	6afb      	ldr	r3, [r7, #44]	; 0x2c
}
 8009716:	4618      	mov	r0, r3
 8009718:	3730      	adds	r7, #48	; 0x30
 800971a:	46bd      	mov	sp, r7
 800971c:	bd80      	pop	{r7, pc}
 800971e:	bf00      	nop
 8009720:	0800a605 	.word	0x0800a605
 8009724:	08018190 	.word	0x08018190
 8009728:	080181c4 	.word	0x080181c4
 800972c:	080181e8 	.word	0x080181e8
 8009730:	08018210 	.word	0x08018210
 8009734:	08018228 	.word	0x08018228
 8009738:	0801824c 	.word	0x0801824c

0800973c <netconn_prepare_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_prepare_delete(struct netconn *conn)
{
 800973c:	b580      	push	{r7, lr}
 800973e:	b08c      	sub	sp, #48	; 0x30
 8009740:	af00      	add	r7, sp, #0
 8009742:	6078      	str	r0, [r7, #4]
  err_t err;
  API_MSG_VAR_DECLARE(msg);

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 8009744:	687b      	ldr	r3, [r7, #4]
 8009746:	2b00      	cmp	r3, #0
 8009748:	d101      	bne.n	800974e <netconn_prepare_delete+0x12>
    return ERR_OK;
 800974a:	2300      	movs	r3, #0
 800974c:	e014      	b.n	8009778 <netconn_prepare_delete+0x3c>
  }

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800974e:	687b      	ldr	r3, [r7, #4]
 8009750:	60fb      	str	r3, [r7, #12]
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#if LWIP_TCP
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009752:	2329      	movs	r3, #41	; 0x29
 8009754:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_TCP */
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  err = netconn_apimsg(lwip_netconn_do_delconn, &API_MSG_VAR_REF(msg));
 8009756:	f107 030c 	add.w	r3, r7, #12
 800975a:	4619      	mov	r1, r3
 800975c:	4808      	ldr	r0, [pc, #32]	; (8009780 <netconn_prepare_delete+0x44>)
 800975e:	f7ff ff55 	bl	800960c <netconn_apimsg>
 8009762:	4603      	mov	r3, r0
 8009764:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  if (err != ERR_OK) {
 8009768:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 800976c:	2b00      	cmp	r3, #0
 800976e:	d002      	beq.n	8009776 <netconn_prepare_delete+0x3a>
    return err;
 8009770:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
 8009774:	e000      	b.n	8009778 <netconn_prepare_delete+0x3c>
  }
  return ERR_OK;
 8009776:	2300      	movs	r3, #0
}
 8009778:	4618      	mov	r0, r3
 800977a:	3730      	adds	r7, #48	; 0x30
 800977c:	46bd      	mov	sp, r7
 800977e:	bd80      	pop	{r7, pc}
 8009780:	0800ab71 	.word	0x0800ab71

08009784 <netconn_delete>:
 * @param conn the netconn to delete
 * @return ERR_OK if the connection was deleted
 */
err_t
netconn_delete(struct netconn *conn)
{
 8009784:	b580      	push	{r7, lr}
 8009786:	b084      	sub	sp, #16
 8009788:	af00      	add	r7, sp, #0
 800978a:	6078      	str	r0, [r7, #4]
  err_t err;

  /* No ASSERT here because possible to get a (conn == NULL) if we got an accept error */
  if (conn == NULL) {
 800978c:	687b      	ldr	r3, [r7, #4]
 800978e:	2b00      	cmp	r3, #0
 8009790:	d101      	bne.n	8009796 <netconn_delete+0x12>
    return ERR_OK;
 8009792:	2300      	movs	r3, #0
 8009794:	e00d      	b.n	80097b2 <netconn_delete+0x2e>
    /* Already called netconn_prepare_delete() before */
    err = ERR_OK;
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    err = netconn_prepare_delete(conn);
 8009796:	6878      	ldr	r0, [r7, #4]
 8009798:	f7ff ffd0 	bl	800973c <netconn_prepare_delete>
 800979c:	4603      	mov	r3, r0
 800979e:	73fb      	strb	r3, [r7, #15]
  }
  if (err == ERR_OK) {
 80097a0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80097a4:	2b00      	cmp	r3, #0
 80097a6:	d102      	bne.n	80097ae <netconn_delete+0x2a>
    netconn_free(conn);
 80097a8:	6878      	ldr	r0, [r7, #4]
 80097aa:	f000 ffaf 	bl	800a70c <netconn_free>
  }
  return err;
 80097ae:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 80097b2:	4618      	mov	r0, r3
 80097b4:	3710      	adds	r7, #16
 80097b6:	46bd      	mov	sp, r7
 80097b8:	bd80      	pop	{r7, pc}
	...

080097bc <netconn_bind>:
 * @param port the local port to bind the netconn to (not used for RAW)
 * @return ERR_OK if bound, any other err_t on failure
 */
err_t
netconn_bind(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 80097bc:	b580      	push	{r7, lr}
 80097be:	b08e      	sub	sp, #56	; 0x38
 80097c0:	af00      	add	r7, sp, #0
 80097c2:	60f8      	str	r0, [r7, #12]
 80097c4:	60b9      	str	r1, [r7, #8]
 80097c6:	4613      	mov	r3, r2
 80097c8:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_bind: invalid conn", (conn != NULL), return ERR_ARG;);
 80097ca:	68fb      	ldr	r3, [r7, #12]
 80097cc:	2b00      	cmp	r3, #0
 80097ce:	d109      	bne.n	80097e4 <netconn_bind+0x28>
 80097d0:	4b11      	ldr	r3, [pc, #68]	; (8009818 <netconn_bind+0x5c>)
 80097d2:	f44f 729c 	mov.w	r2, #312	; 0x138
 80097d6:	4911      	ldr	r1, [pc, #68]	; (800981c <netconn_bind+0x60>)
 80097d8:	4811      	ldr	r0, [pc, #68]	; (8009820 <netconn_bind+0x64>)
 80097da:	f00d fb09 	bl	8016df0 <iprintf>
 80097de:	f06f 030f 	mvn.w	r3, #15
 80097e2:	e015      	b.n	8009810 <netconn_bind+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 80097e4:	68bb      	ldr	r3, [r7, #8]
 80097e6:	2b00      	cmp	r3, #0
 80097e8:	d101      	bne.n	80097ee <netconn_bind+0x32>
    addr = IP4_ADDR_ANY;
 80097ea:	4b0e      	ldr	r3, [pc, #56]	; (8009824 <netconn_bind+0x68>)
 80097ec:	60bb      	str	r3, [r7, #8]
    addr = IP_ANY_TYPE;
  }
#endif /* LWIP_IPV4 && LWIP_IPV6 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 80097ee:	68fb      	ldr	r3, [r7, #12]
 80097f0:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 80097f2:	68bb      	ldr	r3, [r7, #8]
 80097f4:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 80097f6:	88fb      	ldrh	r3, [r7, #6]
 80097f8:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_bind, &API_MSG_VAR_REF(msg));
 80097fa:	f107 0314 	add.w	r3, r7, #20
 80097fe:	4619      	mov	r1, r3
 8009800:	4809      	ldr	r0, [pc, #36]	; (8009828 <netconn_bind+0x6c>)
 8009802:	f7ff ff03 	bl	800960c <netconn_apimsg>
 8009806:	4603      	mov	r3, r0
 8009808:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800980c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009810:	4618      	mov	r0, r3
 8009812:	3738      	adds	r7, #56	; 0x38
 8009814:	46bd      	mov	sp, r7
 8009816:	bd80      	pop	{r7, pc}
 8009818:	08018190 	.word	0x08018190
 800981c:	080182c8 	.word	0x080182c8
 8009820:	080181e8 	.word	0x080181e8
 8009824:	0801b7e0 	.word	0x0801b7e0
 8009828:	0800ad39 	.word	0x0800ad39

0800982c <netconn_connect>:
 * @param port the remote port to connect to (no used for RAW)
 * @return ERR_OK if connected, return value of tcp_/udp_/raw_connect otherwise
 */
err_t
netconn_connect(struct netconn *conn, const ip_addr_t *addr, u16_t port)
{
 800982c:	b580      	push	{r7, lr}
 800982e:	b08e      	sub	sp, #56	; 0x38
 8009830:	af00      	add	r7, sp, #0
 8009832:	60f8      	str	r0, [r7, #12]
 8009834:	60b9      	str	r1, [r7, #8]
 8009836:	4613      	mov	r3, r2
 8009838:	80fb      	strh	r3, [r7, #6]
  API_MSG_VAR_DECLARE(msg);
  err_t err;

  LWIP_ERROR("netconn_connect: invalid conn", (conn != NULL), return ERR_ARG;);
 800983a:	68fb      	ldr	r3, [r7, #12]
 800983c:	2b00      	cmp	r3, #0
 800983e:	d109      	bne.n	8009854 <netconn_connect+0x28>
 8009840:	4b11      	ldr	r3, [pc, #68]	; (8009888 <netconn_connect+0x5c>)
 8009842:	f44f 72bf 	mov.w	r2, #382	; 0x17e
 8009846:	4911      	ldr	r1, [pc, #68]	; (800988c <netconn_connect+0x60>)
 8009848:	4811      	ldr	r0, [pc, #68]	; (8009890 <netconn_connect+0x64>)
 800984a:	f00d fad1 	bl	8016df0 <iprintf>
 800984e:	f06f 030f 	mvn.w	r3, #15
 8009852:	e015      	b.n	8009880 <netconn_connect+0x54>

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IP_ADDR_ANY alias) to subsequent functions */
  if (addr == NULL) {
 8009854:	68bb      	ldr	r3, [r7, #8]
 8009856:	2b00      	cmp	r3, #0
 8009858:	d101      	bne.n	800985e <netconn_connect+0x32>
    addr = IP4_ADDR_ANY;
 800985a:	4b0e      	ldr	r3, [pc, #56]	; (8009894 <netconn_connect+0x68>)
 800985c:	60bb      	str	r3, [r7, #8]
  }
#endif /* LWIP_IPV4 */

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 800985e:	68fb      	ldr	r3, [r7, #12]
 8009860:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.bc.ipaddr = API_MSG_VAR_REF(addr);
 8009862:	68bb      	ldr	r3, [r7, #8]
 8009864:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.bc.port = port;
 8009866:	88fb      	ldrh	r3, [r7, #6]
 8009868:	843b      	strh	r3, [r7, #32]
  err = netconn_apimsg(lwip_netconn_do_connect, &API_MSG_VAR_REF(msg));
 800986a:	f107 0314 	add.w	r3, r7, #20
 800986e:	4619      	mov	r1, r3
 8009870:	4809      	ldr	r0, [pc, #36]	; (8009898 <netconn_connect+0x6c>)
 8009872:	f7ff fecb 	bl	800960c <netconn_apimsg>
 8009876:	4603      	mov	r3, r0
 8009878:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  API_MSG_VAR_FREE(msg);

  return err;
 800987c:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009880:	4618      	mov	r0, r3
 8009882:	3738      	adds	r7, #56	; 0x38
 8009884:	46bd      	mov	sp, r7
 8009886:	bd80      	pop	{r7, pc}
 8009888:	08018190 	.word	0x08018190
 800988c:	08018304 	.word	0x08018304
 8009890:	080181e8 	.word	0x080181e8
 8009894:	0801b7e0 	.word	0x0801b7e0
 8009898:	0800aecd 	.word	0x0800aecd

0800989c <netconn_recv_data>:
 *         ERR_WOULDBLOCK if the netconn is nonblocking but would block to wait for data
 *         ERR_TIMEOUT if the netconn has a receive timeout and no data was received
 */
static err_t
netconn_recv_data(struct netconn *conn, void **new_buf, u8_t apiflags)
{
 800989c:	b580      	push	{r7, lr}
 800989e:	b088      	sub	sp, #32
 80098a0:	af00      	add	r7, sp, #0
 80098a2:	60f8      	str	r0, [r7, #12]
 80098a4:	60b9      	str	r1, [r7, #8]
 80098a6:	4613      	mov	r3, r2
 80098a8:	71fb      	strb	r3, [r7, #7]
  void *buf = NULL;
 80098aa:	2300      	movs	r3, #0
 80098ac:	61bb      	str	r3, [r7, #24]
  u16_t len;

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 80098ae:	68bb      	ldr	r3, [r7, #8]
 80098b0:	2b00      	cmp	r3, #0
 80098b2:	d109      	bne.n	80098c8 <netconn_recv_data+0x2c>
 80098b4:	4b58      	ldr	r3, [pc, #352]	; (8009a18 <netconn_recv_data+0x17c>)
 80098b6:	f44f 7212 	mov.w	r2, #584	; 0x248
 80098ba:	4958      	ldr	r1, [pc, #352]	; (8009a1c <netconn_recv_data+0x180>)
 80098bc:	4858      	ldr	r0, [pc, #352]	; (8009a20 <netconn_recv_data+0x184>)
 80098be:	f00d fa97 	bl	8016df0 <iprintf>
 80098c2:	f06f 030f 	mvn.w	r3, #15
 80098c6:	e0a2      	b.n	8009a0e <netconn_recv_data+0x172>
  *new_buf = NULL;
 80098c8:	68bb      	ldr	r3, [r7, #8]
 80098ca:	2200      	movs	r2, #0
 80098cc:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 80098ce:	68fb      	ldr	r3, [r7, #12]
 80098d0:	2b00      	cmp	r3, #0
 80098d2:	d109      	bne.n	80098e8 <netconn_recv_data+0x4c>
 80098d4:	4b50      	ldr	r3, [pc, #320]	; (8009a18 <netconn_recv_data+0x17c>)
 80098d6:	f240 224a 	movw	r2, #586	; 0x24a
 80098da:	4952      	ldr	r1, [pc, #328]	; (8009a24 <netconn_recv_data+0x188>)
 80098dc:	4850      	ldr	r0, [pc, #320]	; (8009a20 <netconn_recv_data+0x184>)
 80098de:	f00d fa87 	bl	8016df0 <iprintf>
 80098e2:	f06f 030f 	mvn.w	r3, #15
 80098e6:	e092      	b.n	8009a0e <netconn_recv_data+0x172>

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 80098e8:	68fb      	ldr	r3, [r7, #12]
 80098ea:	3310      	adds	r3, #16
 80098ec:	4618      	mov	r0, r3
 80098ee:	f00d f869 	bl	80169c4 <sys_mbox_valid>
 80098f2:	4603      	mov	r3, r0
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	d10e      	bne.n	8009916 <netconn_recv_data+0x7a>
    err_t err = netconn_err(conn);
 80098f8:	68f8      	ldr	r0, [r7, #12]
 80098fa:	f000 fad4 	bl	8009ea6 <netconn_err>
 80098fe:	4603      	mov	r3, r0
 8009900:	773b      	strb	r3, [r7, #28]
    if (err != ERR_OK) {
 8009902:	f997 301c 	ldrsb.w	r3, [r7, #28]
 8009906:	2b00      	cmp	r3, #0
 8009908:	d002      	beq.n	8009910 <netconn_recv_data+0x74>
      /* return pending error */
      return err;
 800990a:	f997 301c 	ldrsb.w	r3, [r7, #28]
 800990e:	e07e      	b.n	8009a0e <netconn_recv_data+0x172>
    }
    return ERR_CONN;
 8009910:	f06f 030a 	mvn.w	r3, #10
 8009914:	e07b      	b.n	8009a0e <netconn_recv_data+0x172>
  }

  NETCONN_MBOX_WAITING_INC(conn);
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009916:	68fb      	ldr	r3, [r7, #12]
 8009918:	7f1b      	ldrb	r3, [r3, #28]
 800991a:	f003 0302 	and.w	r3, r3, #2
 800991e:	2b00      	cmp	r3, #0
 8009920:	d10f      	bne.n	8009942 <netconn_recv_data+0xa6>
 8009922:	79fb      	ldrb	r3, [r7, #7]
 8009924:	f003 0304 	and.w	r3, r3, #4
 8009928:	2b00      	cmp	r3, #0
 800992a:	d10a      	bne.n	8009942 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 800992c:	68fb      	ldr	r3, [r7, #12]
 800992e:	7f1b      	ldrb	r3, [r3, #28]
 8009930:	f003 0301 	and.w	r3, r3, #1
  if (netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK) ||
 8009934:	2b00      	cmp	r3, #0
 8009936:	d104      	bne.n	8009942 <netconn_recv_data+0xa6>
      (conn->flags & NETCONN_FLAG_MBOXCLOSED) || (conn->pending_err != ERR_OK)) {
 8009938:	68fb      	ldr	r3, [r7, #12]
 800993a:	f993 3008 	ldrsb.w	r3, [r3, #8]
 800993e:	2b00      	cmp	r3, #0
 8009940:	d023      	beq.n	800998a <netconn_recv_data+0xee>
    if (sys_arch_mbox_tryfetch(&conn->recvmbox, &buf) == SYS_ARCH_TIMEOUT) {
 8009942:	68fb      	ldr	r3, [r7, #12]
 8009944:	3310      	adds	r3, #16
 8009946:	f107 0218 	add.w	r2, r7, #24
 800994a:	4611      	mov	r1, r2
 800994c:	4618      	mov	r0, r3
 800994e:	f00d f822 	bl	8016996 <sys_arch_mbox_tryfetch>
 8009952:	4603      	mov	r3, r0
 8009954:	f1b3 3fff 	cmp.w	r3, #4294967295
 8009958:	d11f      	bne.n	800999a <netconn_recv_data+0xfe>
      err_t err;
      NETCONN_MBOX_WAITING_DEC(conn);
      err = netconn_err(conn);
 800995a:	68f8      	ldr	r0, [r7, #12]
 800995c:	f000 faa3 	bl	8009ea6 <netconn_err>
 8009960:	4603      	mov	r3, r0
 8009962:	777b      	strb	r3, [r7, #29]
      if (err != ERR_OK) {
 8009964:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009968:	2b00      	cmp	r3, #0
 800996a:	d002      	beq.n	8009972 <netconn_recv_data+0xd6>
        /* return pending error */
        return err;
 800996c:	f997 301d 	ldrsb.w	r3, [r7, #29]
 8009970:	e04d      	b.n	8009a0e <netconn_recv_data+0x172>
      }
      if (conn->flags & NETCONN_FLAG_MBOXCLOSED) {
 8009972:	68fb      	ldr	r3, [r7, #12]
 8009974:	7f1b      	ldrb	r3, [r3, #28]
 8009976:	f003 0301 	and.w	r3, r3, #1
 800997a:	2b00      	cmp	r3, #0
 800997c:	d002      	beq.n	8009984 <netconn_recv_data+0xe8>
        return ERR_CONN;
 800997e:	f06f 030a 	mvn.w	r3, #10
 8009982:	e044      	b.n	8009a0e <netconn_recv_data+0x172>
      }
      return ERR_WOULDBLOCK;
 8009984:	f06f 0306 	mvn.w	r3, #6
 8009988:	e041      	b.n	8009a0e <netconn_recv_data+0x172>
    if (sys_arch_mbox_fetch(&conn->recvmbox, &buf, conn->recv_timeout) == SYS_ARCH_TIMEOUT) {
      NETCONN_MBOX_WAITING_DEC(conn);
      return ERR_TIMEOUT;
    }
#else
    sys_arch_mbox_fetch(&conn->recvmbox, &buf, 0);
 800998a:	68fb      	ldr	r3, [r7, #12]
 800998c:	3310      	adds	r3, #16
 800998e:	f107 0118 	add.w	r1, r7, #24
 8009992:	2200      	movs	r2, #0
 8009994:	4618      	mov	r0, r3
 8009996:	f00c ffcd 	bl	8016934 <sys_arch_mbox_fetch>
  }
#endif

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 800999a:	68fb      	ldr	r3, [r7, #12]
 800999c:	781b      	ldrb	r3, [r3, #0]
 800999e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80099a2:	2b10      	cmp	r3, #16
 80099a4:	d117      	bne.n	80099d6 <netconn_recv_data+0x13a>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    err_t err;
    /* Check if this is an error message or a pbuf */
    if (lwip_netconn_is_err_msg(buf, &err)) {
 80099a6:	69bb      	ldr	r3, [r7, #24]
 80099a8:	f107 0217 	add.w	r2, r7, #23
 80099ac:	4611      	mov	r1, r2
 80099ae:	4618      	mov	r0, r3
 80099b0:	f000 faca 	bl	8009f48 <lwip_netconn_is_err_msg>
 80099b4:	4603      	mov	r3, r0
 80099b6:	2b00      	cmp	r3, #0
 80099b8:	d009      	beq.n	80099ce <netconn_recv_data+0x132>
      /* new_buf has been zeroed above already */
      if (err == ERR_CLSD) {
 80099ba:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099be:	f113 0f0f 	cmn.w	r3, #15
 80099c2:	d101      	bne.n	80099c8 <netconn_recv_data+0x12c>
        /* connection closed translates to ERR_OK with *new_buf == NULL */
        return ERR_OK;
 80099c4:	2300      	movs	r3, #0
 80099c6:	e022      	b.n	8009a0e <netconn_recv_data+0x172>
      }
      return err;
 80099c8:	f997 3017 	ldrsb.w	r3, [r7, #23]
 80099cc:	e01f      	b.n	8009a0e <netconn_recv_data+0x172>
    }
    len = ((struct pbuf *)buf)->tot_len;
 80099ce:	69bb      	ldr	r3, [r7, #24]
 80099d0:	891b      	ldrh	r3, [r3, #8]
 80099d2:	83fb      	strh	r3, [r7, #30]
 80099d4:	e00d      	b.n	80099f2 <netconn_recv_data+0x156>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
#if (LWIP_UDP || LWIP_RAW)
  {
    LWIP_ASSERT("buf != NULL", buf != NULL);
 80099d6:	69bb      	ldr	r3, [r7, #24]
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d106      	bne.n	80099ea <netconn_recv_data+0x14e>
 80099dc:	4b0e      	ldr	r3, [pc, #56]	; (8009a18 <netconn_recv_data+0x17c>)
 80099de:	f240 2291 	movw	r2, #657	; 0x291
 80099e2:	4911      	ldr	r1, [pc, #68]	; (8009a28 <netconn_recv_data+0x18c>)
 80099e4:	480e      	ldr	r0, [pc, #56]	; (8009a20 <netconn_recv_data+0x184>)
 80099e6:	f00d fa03 	bl	8016df0 <iprintf>
    len = netbuf_len((struct netbuf *)buf);
 80099ea:	69bb      	ldr	r3, [r7, #24]
 80099ec:	681b      	ldr	r3, [r3, #0]
 80099ee:	891b      	ldrh	r3, [r3, #8]
 80099f0:	83fb      	strh	r3, [r7, #30]

#if LWIP_SO_RCVBUF
  SYS_ARCH_DEC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
  /* Register event with callback */
  API_EVENT(conn, NETCONN_EVT_RCVMINUS, len);
 80099f2:	68fb      	ldr	r3, [r7, #12]
 80099f4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099f6:	2b00      	cmp	r3, #0
 80099f8:	d005      	beq.n	8009a06 <netconn_recv_data+0x16a>
 80099fa:	68fb      	ldr	r3, [r7, #12]
 80099fc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80099fe:	8bfa      	ldrh	r2, [r7, #30]
 8009a00:	2101      	movs	r1, #1
 8009a02:	68f8      	ldr	r0, [r7, #12]
 8009a04:	4798      	blx	r3

  LWIP_DEBUGF(API_LIB_DEBUG, ("netconn_recv_data: received %p, len=%"U16_F"\n", buf, len));

  *new_buf = buf;
 8009a06:	69ba      	ldr	r2, [r7, #24]
 8009a08:	68bb      	ldr	r3, [r7, #8]
 8009a0a:	601a      	str	r2, [r3, #0]
  /* don't set conn->last_err: it's only ERR_OK, anyway */
  return ERR_OK;
 8009a0c:	2300      	movs	r3, #0
}
 8009a0e:	4618      	mov	r0, r3
 8009a10:	3720      	adds	r7, #32
 8009a12:	46bd      	mov	sp, r7
 8009a14:	bd80      	pop	{r7, pc}
 8009a16:	bf00      	nop
 8009a18:	08018190 	.word	0x08018190
 8009a1c:	080183a8 	.word	0x080183a8
 8009a20:	080181e8 	.word	0x080181e8
 8009a24:	080183c8 	.word	0x080183c8
 8009a28:	080183e4 	.word	0x080183e4

08009a2c <netconn_tcp_recvd_msg>:

#if LWIP_TCP
static err_t
netconn_tcp_recvd_msg(struct netconn *conn, size_t len, struct api_msg *msg)
{
 8009a2c:	b580      	push	{r7, lr}
 8009a2e:	b084      	sub	sp, #16
 8009a30:	af00      	add	r7, sp, #0
 8009a32:	60f8      	str	r0, [r7, #12]
 8009a34:	60b9      	str	r1, [r7, #8]
 8009a36:	607a      	str	r2, [r7, #4]
  LWIP_ERROR("netconn_recv_tcp_pbuf: invalid conn", (conn != NULL) &&
 8009a38:	68fb      	ldr	r3, [r7, #12]
 8009a3a:	2b00      	cmp	r3, #0
 8009a3c:	d005      	beq.n	8009a4a <netconn_tcp_recvd_msg+0x1e>
 8009a3e:	68fb      	ldr	r3, [r7, #12]
 8009a40:	781b      	ldrb	r3, [r3, #0]
 8009a42:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009a46:	2b10      	cmp	r3, #16
 8009a48:	d009      	beq.n	8009a5e <netconn_tcp_recvd_msg+0x32>
 8009a4a:	4b0c      	ldr	r3, [pc, #48]	; (8009a7c <netconn_tcp_recvd_msg+0x50>)
 8009a4c:	f240 22a7 	movw	r2, #679	; 0x2a7
 8009a50:	490b      	ldr	r1, [pc, #44]	; (8009a80 <netconn_tcp_recvd_msg+0x54>)
 8009a52:	480c      	ldr	r0, [pc, #48]	; (8009a84 <netconn_tcp_recvd_msg+0x58>)
 8009a54:	f00d f9cc 	bl	8016df0 <iprintf>
 8009a58:	f06f 030f 	mvn.w	r3, #15
 8009a5c:	e00a      	b.n	8009a74 <netconn_tcp_recvd_msg+0x48>
             NETCONNTYPE_GROUP(netconn_type(conn)) == NETCONN_TCP, return ERR_ARG;);

  msg->conn = conn;
 8009a5e:	687b      	ldr	r3, [r7, #4]
 8009a60:	68fa      	ldr	r2, [r7, #12]
 8009a62:	601a      	str	r2, [r3, #0]
  msg->msg.r.len = len;
 8009a64:	687b      	ldr	r3, [r7, #4]
 8009a66:	68ba      	ldr	r2, [r7, #8]
 8009a68:	609a      	str	r2, [r3, #8]

  return netconn_apimsg(lwip_netconn_do_recv, msg);
 8009a6a:	6879      	ldr	r1, [r7, #4]
 8009a6c:	4806      	ldr	r0, [pc, #24]	; (8009a88 <netconn_tcp_recvd_msg+0x5c>)
 8009a6e:	f7ff fdcd 	bl	800960c <netconn_apimsg>
 8009a72:	4603      	mov	r3, r0
}
 8009a74:	4618      	mov	r0, r3
 8009a76:	3710      	adds	r7, #16
 8009a78:	46bd      	mov	sp, r7
 8009a7a:	bd80      	pop	{r7, pc}
 8009a7c:	08018190 	.word	0x08018190
 8009a80:	080183f0 	.word	0x080183f0
 8009a84:	080181e8 	.word	0x080181e8
 8009a88:	0800b049 	.word	0x0800b049

08009a8c <netconn_recv_data_tcp>:
  return err;
}

static err_t
netconn_recv_data_tcp(struct netconn *conn, struct pbuf **new_buf, u8_t apiflags)
{
 8009a8c:	b580      	push	{r7, lr}
 8009a8e:	b090      	sub	sp, #64	; 0x40
 8009a90:	af00      	add	r7, sp, #0
 8009a92:	60f8      	str	r0, [r7, #12]
 8009a94:	60b9      	str	r1, [r7, #8]
 8009a96:	4613      	mov	r3, r2
 8009a98:	71fb      	strb	r3, [r7, #7]
  API_MSG_VAR_DECLARE(msg);
#if LWIP_MPU_COMPATIBLE
  msg = NULL;
#endif

  if (!NETCONN_RECVMBOX_WAITABLE(conn)) {
 8009a9a:	68fb      	ldr	r3, [r7, #12]
 8009a9c:	3310      	adds	r3, #16
 8009a9e:	4618      	mov	r0, r3
 8009aa0:	f00c ff90 	bl	80169c4 <sys_mbox_valid>
 8009aa4:	4603      	mov	r3, r0
 8009aa6:	2b00      	cmp	r3, #0
 8009aa8:	d102      	bne.n	8009ab0 <netconn_recv_data_tcp+0x24>
    /* This only happens when calling this function more than once *after* receiving FIN */
    return ERR_CONN;
 8009aaa:	f06f 030a 	mvn.w	r3, #10
 8009aae:	e06d      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
  }
  if (netconn_is_flag_set(conn, NETCONN_FIN_RX_PENDING)) {
 8009ab0:	68fb      	ldr	r3, [r7, #12]
 8009ab2:	7f1b      	ldrb	r3, [r3, #28]
 8009ab4:	b25b      	sxtb	r3, r3
 8009ab6:	2b00      	cmp	r3, #0
 8009ab8:	da07      	bge.n	8009aca <netconn_recv_data_tcp+0x3e>
    netconn_clear_flags(conn, NETCONN_FIN_RX_PENDING);
 8009aba:	68fb      	ldr	r3, [r7, #12]
 8009abc:	7f1b      	ldrb	r3, [r3, #28]
 8009abe:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8009ac2:	b2da      	uxtb	r2, r3
 8009ac4:	68fb      	ldr	r3, [r7, #12]
 8009ac6:	771a      	strb	r2, [r3, #28]
    goto handle_fin;
 8009ac8:	e039      	b.n	8009b3e <netconn_recv_data_tcp+0xb2>
    /* need to allocate API message here so empty message pool does not result in event loss
      * see bug #47512: MPU_COMPATIBLE may fail on empty pool */
    API_MSG_VAR_ALLOC(msg);
  }

  err = netconn_recv_data(conn, (void **)new_buf, apiflags);
 8009aca:	79fb      	ldrb	r3, [r7, #7]
 8009acc:	461a      	mov	r2, r3
 8009ace:	68b9      	ldr	r1, [r7, #8]
 8009ad0:	68f8      	ldr	r0, [r7, #12]
 8009ad2:	f7ff fee3 	bl	800989c <netconn_recv_data>
 8009ad6:	4603      	mov	r3, r0
 8009ad8:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  if (err != ERR_OK) {
 8009adc:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ae0:	2b00      	cmp	r3, #0
 8009ae2:	d002      	beq.n	8009aea <netconn_recv_data_tcp+0x5e>
    if (!(apiflags & NETCONN_NOAUTORCVD)) {
      API_MSG_VAR_FREE(msg);
    }
    return err;
 8009ae4:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009ae8:	e050      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
  }
  buf = *new_buf;
 8009aea:	68bb      	ldr	r3, [r7, #8]
 8009aec:	681b      	ldr	r3, [r3, #0]
 8009aee:	63bb      	str	r3, [r7, #56]	; 0x38
  if (!(apiflags & NETCONN_NOAUTORCVD)) {
 8009af0:	79fb      	ldrb	r3, [r7, #7]
 8009af2:	f003 0308 	and.w	r3, r3, #8
 8009af6:	2b00      	cmp	r3, #0
 8009af8:	d10e      	bne.n	8009b18 <netconn_recv_data_tcp+0x8c>
    /* Let the stack know that we have taken the data. */
    u16_t len = buf ? buf->tot_len : 1;
 8009afa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009afc:	2b00      	cmp	r3, #0
 8009afe:	d002      	beq.n	8009b06 <netconn_recv_data_tcp+0x7a>
 8009b00:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b02:	891b      	ldrh	r3, [r3, #8]
 8009b04:	e000      	b.n	8009b08 <netconn_recv_data_tcp+0x7c>
 8009b06:	2301      	movs	r3, #1
 8009b08:	86fb      	strh	r3, [r7, #54]	; 0x36
    /* don't care for the return value of lwip_netconn_do_recv */
    /* @todo: this should really be fixed, e.g. by retrying in poll on error */
    netconn_tcp_recvd_msg(conn, len,  &API_VAR_REF(msg));
 8009b0a:	8efb      	ldrh	r3, [r7, #54]	; 0x36
 8009b0c:	f107 0214 	add.w	r2, r7, #20
 8009b10:	4619      	mov	r1, r3
 8009b12:	68f8      	ldr	r0, [r7, #12]
 8009b14:	f7ff ff8a 	bl	8009a2c <netconn_tcp_recvd_msg>
    API_MSG_VAR_FREE(msg);
  }

  /* If we are closed, we indicate that we no longer wish to use the socket */
  if (buf == NULL) {
 8009b18:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d134      	bne.n	8009b88 <netconn_recv_data_tcp+0xfc>
    if (apiflags & NETCONN_NOFIN) {
 8009b1e:	79fb      	ldrb	r3, [r7, #7]
 8009b20:	f003 0310 	and.w	r3, r3, #16
 8009b24:	2b00      	cmp	r3, #0
 8009b26:	d009      	beq.n	8009b3c <netconn_recv_data_tcp+0xb0>
      /* received a FIN but the caller cannot handle it right now:
         re-enqueue it and return "no data" */
      netconn_set_flags(conn, NETCONN_FIN_RX_PENDING);
 8009b28:	68fb      	ldr	r3, [r7, #12]
 8009b2a:	7f1b      	ldrb	r3, [r3, #28]
 8009b2c:	f063 037f 	orn	r3, r3, #127	; 0x7f
 8009b30:	b2da      	uxtb	r2, r3
 8009b32:	68fb      	ldr	r3, [r7, #12]
 8009b34:	771a      	strb	r2, [r3, #28]
      return ERR_WOULDBLOCK;
 8009b36:	f06f 0306 	mvn.w	r3, #6
 8009b3a:	e027      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
    } else {
handle_fin:
 8009b3c:	bf00      	nop
      API_EVENT(conn, NETCONN_EVT_RCVMINUS, 0);
 8009b3e:	68fb      	ldr	r3, [r7, #12]
 8009b40:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b42:	2b00      	cmp	r3, #0
 8009b44:	d005      	beq.n	8009b52 <netconn_recv_data_tcp+0xc6>
 8009b46:	68fb      	ldr	r3, [r7, #12]
 8009b48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8009b4a:	2200      	movs	r2, #0
 8009b4c:	2101      	movs	r1, #1
 8009b4e:	68f8      	ldr	r0, [r7, #12]
 8009b50:	4798      	blx	r3
      if (conn->pcb.ip == NULL) {
 8009b52:	68fb      	ldr	r3, [r7, #12]
 8009b54:	685b      	ldr	r3, [r3, #4]
 8009b56:	2b00      	cmp	r3, #0
 8009b58:	d10f      	bne.n	8009b7a <netconn_recv_data_tcp+0xee>
        /* race condition: RST during recv */
        err = netconn_err(conn);
 8009b5a:	68f8      	ldr	r0, [r7, #12]
 8009b5c:	f000 f9a3 	bl	8009ea6 <netconn_err>
 8009b60:	4603      	mov	r3, r0
 8009b62:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
        if (err != ERR_OK) {
 8009b66:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b6a:	2b00      	cmp	r3, #0
 8009b6c:	d002      	beq.n	8009b74 <netconn_recv_data_tcp+0xe8>
          return err;
 8009b6e:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
 8009b72:	e00b      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
        }
        return ERR_RST;
 8009b74:	f06f 030d 	mvn.w	r3, #13
 8009b78:	e008      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
      }
      /* RX side is closed, so deallocate the recvmbox */
      netconn_close_shutdown(conn, NETCONN_SHUT_RD);
 8009b7a:	2101      	movs	r1, #1
 8009b7c:	68f8      	ldr	r0, [r7, #12]
 8009b7e:	f000 f955 	bl	8009e2c <netconn_close_shutdown>
      /* Don' store ERR_CLSD as conn->err since we are only half-closed */
      return ERR_CLSD;
 8009b82:	f06f 030e 	mvn.w	r3, #14
 8009b86:	e001      	b.n	8009b8c <netconn_recv_data_tcp+0x100>
    }
  }
  return err;
 8009b88:	f997 303f 	ldrsb.w	r3, [r7, #63]	; 0x3f
}
 8009b8c:	4618      	mov	r0, r3
 8009b8e:	3740      	adds	r7, #64	; 0x40
 8009b90:	46bd      	mov	sp, r7
 8009b92:	bd80      	pop	{r7, pc}

08009b94 <netconn_recv>:
 * @return ERR_OK if data has been received, an error code otherwise (timeout,
 *                memory error or another error)
 */
err_t
netconn_recv(struct netconn *conn, struct netbuf **new_buf)
{
 8009b94:	b580      	push	{r7, lr}
 8009b96:	b086      	sub	sp, #24
 8009b98:	af00      	add	r7, sp, #0
 8009b9a:	6078      	str	r0, [r7, #4]
 8009b9c:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  struct netbuf *buf = NULL;
 8009b9e:	2300      	movs	r3, #0
 8009ba0:	617b      	str	r3, [r7, #20]
  err_t err;
#endif /* LWIP_TCP */

  LWIP_ERROR("netconn_recv: invalid pointer", (new_buf != NULL), return ERR_ARG;);
 8009ba2:	683b      	ldr	r3, [r7, #0]
 8009ba4:	2b00      	cmp	r3, #0
 8009ba6:	d109      	bne.n	8009bbc <netconn_recv+0x28>
 8009ba8:	4b32      	ldr	r3, [pc, #200]	; (8009c74 <netconn_recv+0xe0>)
 8009baa:	f240 3263 	movw	r2, #867	; 0x363
 8009bae:	4932      	ldr	r1, [pc, #200]	; (8009c78 <netconn_recv+0xe4>)
 8009bb0:	4832      	ldr	r0, [pc, #200]	; (8009c7c <netconn_recv+0xe8>)
 8009bb2:	f00d f91d 	bl	8016df0 <iprintf>
 8009bb6:	f06f 030f 	mvn.w	r3, #15
 8009bba:	e056      	b.n	8009c6a <netconn_recv+0xd6>
  *new_buf = NULL;
 8009bbc:	683b      	ldr	r3, [r7, #0]
 8009bbe:	2200      	movs	r2, #0
 8009bc0:	601a      	str	r2, [r3, #0]
  LWIP_ERROR("netconn_recv: invalid conn",    (conn != NULL),    return ERR_ARG;);
 8009bc2:	687b      	ldr	r3, [r7, #4]
 8009bc4:	2b00      	cmp	r3, #0
 8009bc6:	d109      	bne.n	8009bdc <netconn_recv+0x48>
 8009bc8:	4b2a      	ldr	r3, [pc, #168]	; (8009c74 <netconn_recv+0xe0>)
 8009bca:	f240 3265 	movw	r2, #869	; 0x365
 8009bce:	492c      	ldr	r1, [pc, #176]	; (8009c80 <netconn_recv+0xec>)
 8009bd0:	482a      	ldr	r0, [pc, #168]	; (8009c7c <netconn_recv+0xe8>)
 8009bd2:	f00d f90d 	bl	8016df0 <iprintf>
 8009bd6:	f06f 030f 	mvn.w	r3, #15
 8009bda:	e046      	b.n	8009c6a <netconn_recv+0xd6>

#if LWIP_TCP
#if (LWIP_UDP || LWIP_RAW)
  if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP)
 8009bdc:	687b      	ldr	r3, [r7, #4]
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009be4:	2b10      	cmp	r3, #16
 8009be6:	d13a      	bne.n	8009c5e <netconn_recv+0xca>
#endif /* (LWIP_UDP || LWIP_RAW) */
  {
    struct pbuf *p = NULL;
 8009be8:	2300      	movs	r3, #0
 8009bea:	60fb      	str	r3, [r7, #12]
    /* This is not a listening netconn, since recvmbox is set */

    buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 8009bec:	2006      	movs	r0, #6
 8009bee:	f002 fc25 	bl	800c43c <memp_malloc>
 8009bf2:	6178      	str	r0, [r7, #20]
    if (buf == NULL) {
 8009bf4:	697b      	ldr	r3, [r7, #20]
 8009bf6:	2b00      	cmp	r3, #0
 8009bf8:	d102      	bne.n	8009c00 <netconn_recv+0x6c>
      return ERR_MEM;
 8009bfa:	f04f 33ff 	mov.w	r3, #4294967295
 8009bfe:	e034      	b.n	8009c6a <netconn_recv+0xd6>
    }

    err = netconn_recv_data_tcp(conn, &p, 0);
 8009c00:	f107 030c 	add.w	r3, r7, #12
 8009c04:	2200      	movs	r2, #0
 8009c06:	4619      	mov	r1, r3
 8009c08:	6878      	ldr	r0, [r7, #4]
 8009c0a:	f7ff ff3f 	bl	8009a8c <netconn_recv_data_tcp>
 8009c0e:	4603      	mov	r3, r0
 8009c10:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8009c12:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c16:	2b00      	cmp	r3, #0
 8009c18:	d006      	beq.n	8009c28 <netconn_recv+0x94>
      memp_free(MEMP_NETBUF, buf);
 8009c1a:	6979      	ldr	r1, [r7, #20]
 8009c1c:	2006      	movs	r0, #6
 8009c1e:	f002 fc83 	bl	800c528 <memp_free>
      return err;
 8009c22:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8009c26:	e020      	b.n	8009c6a <netconn_recv+0xd6>
    }
    LWIP_ASSERT("p != NULL", p != NULL);
 8009c28:	68fb      	ldr	r3, [r7, #12]
 8009c2a:	2b00      	cmp	r3, #0
 8009c2c:	d106      	bne.n	8009c3c <netconn_recv+0xa8>
 8009c2e:	4b11      	ldr	r3, [pc, #68]	; (8009c74 <netconn_recv+0xe0>)
 8009c30:	f240 3279 	movw	r2, #889	; 0x379
 8009c34:	4913      	ldr	r1, [pc, #76]	; (8009c84 <netconn_recv+0xf0>)
 8009c36:	4811      	ldr	r0, [pc, #68]	; (8009c7c <netconn_recv+0xe8>)
 8009c38:	f00d f8da 	bl	8016df0 <iprintf>

    buf->p = p;
 8009c3c:	68fa      	ldr	r2, [r7, #12]
 8009c3e:	697b      	ldr	r3, [r7, #20]
 8009c40:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 8009c42:	68fa      	ldr	r2, [r7, #12]
 8009c44:	697b      	ldr	r3, [r7, #20]
 8009c46:	605a      	str	r2, [r3, #4]
    buf->port = 0;
 8009c48:	697b      	ldr	r3, [r7, #20]
 8009c4a:	2200      	movs	r2, #0
 8009c4c:	819a      	strh	r2, [r3, #12]
    ip_addr_set_zero(&buf->addr);
 8009c4e:	697b      	ldr	r3, [r7, #20]
 8009c50:	2200      	movs	r2, #0
 8009c52:	609a      	str	r2, [r3, #8]
    *new_buf = buf;
 8009c54:	683b      	ldr	r3, [r7, #0]
 8009c56:	697a      	ldr	r2, [r7, #20]
 8009c58:	601a      	str	r2, [r3, #0]
    /* don't set conn->last_err: it's only ERR_OK, anyway */
    return ERR_OK;
 8009c5a:	2300      	movs	r3, #0
 8009c5c:	e005      	b.n	8009c6a <netconn_recv+0xd6>
#if LWIP_TCP && (LWIP_UDP || LWIP_RAW)
  else
#endif /* LWIP_TCP && (LWIP_UDP || LWIP_RAW) */
  {
#if (LWIP_UDP || LWIP_RAW)
    return netconn_recv_data(conn, (void **)new_buf, 0);
 8009c5e:	2200      	movs	r2, #0
 8009c60:	6839      	ldr	r1, [r7, #0]
 8009c62:	6878      	ldr	r0, [r7, #4]
 8009c64:	f7ff fe1a 	bl	800989c <netconn_recv_data>
 8009c68:	4603      	mov	r3, r0
#endif /* (LWIP_UDP || LWIP_RAW) */
  }
}
 8009c6a:	4618      	mov	r0, r3
 8009c6c:	3718      	adds	r7, #24
 8009c6e:	46bd      	mov	sp, r7
 8009c70:	bd80      	pop	{r7, pc}
 8009c72:	bf00      	nop
 8009c74:	08018190 	.word	0x08018190
 8009c78:	080183a8 	.word	0x080183a8
 8009c7c:	080181e8 	.word	0x080181e8
 8009c80:	080183c8 	.word	0x080183c8
 8009c84:	08018440 	.word	0x08018440

08009c88 <netconn_write_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_partly(struct netconn *conn, const void *dataptr, size_t size,
                     u8_t apiflags, size_t *bytes_written)
{
 8009c88:	b580      	push	{r7, lr}
 8009c8a:	b088      	sub	sp, #32
 8009c8c:	af02      	add	r7, sp, #8
 8009c8e:	60f8      	str	r0, [r7, #12]
 8009c90:	60b9      	str	r1, [r7, #8]
 8009c92:	607a      	str	r2, [r7, #4]
 8009c94:	70fb      	strb	r3, [r7, #3]
  struct netvector vector;
  vector.ptr = dataptr;
 8009c96:	68bb      	ldr	r3, [r7, #8]
 8009c98:	613b      	str	r3, [r7, #16]
  vector.len = size;
 8009c9a:	687b      	ldr	r3, [r7, #4]
 8009c9c:	617b      	str	r3, [r7, #20]
  return netconn_write_vectors_partly(conn, &vector, 1, apiflags, bytes_written);
 8009c9e:	78fa      	ldrb	r2, [r7, #3]
 8009ca0:	f107 0110 	add.w	r1, r7, #16
 8009ca4:	6a3b      	ldr	r3, [r7, #32]
 8009ca6:	9300      	str	r3, [sp, #0]
 8009ca8:	4613      	mov	r3, r2
 8009caa:	2201      	movs	r2, #1
 8009cac:	68f8      	ldr	r0, [r7, #12]
 8009cae:	f000 f805 	bl	8009cbc <netconn_write_vectors_partly>
 8009cb2:	4603      	mov	r3, r0
}
 8009cb4:	4618      	mov	r0, r3
 8009cb6:	3718      	adds	r7, #24
 8009cb8:	46bd      	mov	sp, r7
 8009cba:	bd80      	pop	{r7, pc}

08009cbc <netconn_write_vectors_partly>:
 * @return ERR_OK if data was sent, any other err_t on error
 */
err_t
netconn_write_vectors_partly(struct netconn *conn, struct netvector *vectors, u16_t vectorcnt,
                             u8_t apiflags, size_t *bytes_written)
{
 8009cbc:	b580      	push	{r7, lr}
 8009cbe:	b092      	sub	sp, #72	; 0x48
 8009cc0:	af00      	add	r7, sp, #0
 8009cc2:	60f8      	str	r0, [r7, #12]
 8009cc4:	60b9      	str	r1, [r7, #8]
 8009cc6:	4611      	mov	r1, r2
 8009cc8:	461a      	mov	r2, r3
 8009cca:	460b      	mov	r3, r1
 8009ccc:	80fb      	strh	r3, [r7, #6]
 8009cce:	4613      	mov	r3, r2
 8009cd0:	717b      	strb	r3, [r7, #5]
  err_t err;
  u8_t dontblock;
  size_t size;
  int i;

  LWIP_ERROR("netconn_write: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009cd2:	68fb      	ldr	r3, [r7, #12]
 8009cd4:	2b00      	cmp	r3, #0
 8009cd6:	d109      	bne.n	8009cec <netconn_write_vectors_partly+0x30>
 8009cd8:	4b4e      	ldr	r3, [pc, #312]	; (8009e14 <netconn_write_vectors_partly+0x158>)
 8009cda:	f240 32ee 	movw	r2, #1006	; 0x3ee
 8009cde:	494e      	ldr	r1, [pc, #312]	; (8009e18 <netconn_write_vectors_partly+0x15c>)
 8009ce0:	484e      	ldr	r0, [pc, #312]	; (8009e1c <netconn_write_vectors_partly+0x160>)
 8009ce2:	f00d f885 	bl	8016df0 <iprintf>
 8009ce6:	f06f 030f 	mvn.w	r3, #15
 8009cea:	e08e      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
  LWIP_ERROR("netconn_write: invalid conn->type",  (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP), return ERR_VAL;);
 8009cec:	68fb      	ldr	r3, [r7, #12]
 8009cee:	781b      	ldrb	r3, [r3, #0]
 8009cf0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009cf4:	2b10      	cmp	r3, #16
 8009cf6:	d009      	beq.n	8009d0c <netconn_write_vectors_partly+0x50>
 8009cf8:	4b46      	ldr	r3, [pc, #280]	; (8009e14 <netconn_write_vectors_partly+0x158>)
 8009cfa:	f240 32ef 	movw	r2, #1007	; 0x3ef
 8009cfe:	4948      	ldr	r1, [pc, #288]	; (8009e20 <netconn_write_vectors_partly+0x164>)
 8009d00:	4846      	ldr	r0, [pc, #280]	; (8009e1c <netconn_write_vectors_partly+0x160>)
 8009d02:	f00d f875 	bl	8016df0 <iprintf>
 8009d06:	f06f 0305 	mvn.w	r3, #5
 8009d0a:	e07e      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 8009d0c:	68fb      	ldr	r3, [r7, #12]
 8009d0e:	7f1b      	ldrb	r3, [r3, #28]
 8009d10:	f003 0302 	and.w	r3, r3, #2
 8009d14:	2b00      	cmp	r3, #0
 8009d16:	d104      	bne.n	8009d22 <netconn_write_vectors_partly+0x66>
 8009d18:	797b      	ldrb	r3, [r7, #5]
 8009d1a:	f003 0304 	and.w	r3, r3, #4
 8009d1e:	2b00      	cmp	r3, #0
 8009d20:	d001      	beq.n	8009d26 <netconn_write_vectors_partly+0x6a>
 8009d22:	2301      	movs	r3, #1
 8009d24:	e000      	b.n	8009d28 <netconn_write_vectors_partly+0x6c>
 8009d26:	2300      	movs	r3, #0
 8009d28:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
#if LWIP_SO_SNDTIMEO
  if (conn->send_timeout != 0) {
    dontblock = 1;
  }
#endif /* LWIP_SO_SNDTIMEO */
  if (dontblock && !bytes_written) {
 8009d2c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009d30:	2b00      	cmp	r3, #0
 8009d32:	d005      	beq.n	8009d40 <netconn_write_vectors_partly+0x84>
 8009d34:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d36:	2b00      	cmp	r3, #0
 8009d38:	d102      	bne.n	8009d40 <netconn_write_vectors_partly+0x84>
    /* This implies netconn_write() cannot be used for non-blocking send, since
       it has no way to return the number of bytes written. */
    return ERR_VAL;
 8009d3a:	f06f 0305 	mvn.w	r3, #5
 8009d3e:	e064      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
  }

  /* sum up the total size */
  size = 0;
 8009d40:	2300      	movs	r3, #0
 8009d42:	647b      	str	r3, [r7, #68]	; 0x44
  for (i = 0; i < vectorcnt; i++) {
 8009d44:	2300      	movs	r3, #0
 8009d46:	643b      	str	r3, [r7, #64]	; 0x40
 8009d48:	e015      	b.n	8009d76 <netconn_write_vectors_partly+0xba>
    size += vectors[i].len;
 8009d4a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d4c:	00db      	lsls	r3, r3, #3
 8009d4e:	68ba      	ldr	r2, [r7, #8]
 8009d50:	4413      	add	r3, r2
 8009d52:	685b      	ldr	r3, [r3, #4]
 8009d54:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d56:	4413      	add	r3, r2
 8009d58:	647b      	str	r3, [r7, #68]	; 0x44
    if (size < vectors[i].len) {
 8009d5a:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d5c:	00db      	lsls	r3, r3, #3
 8009d5e:	68ba      	ldr	r2, [r7, #8]
 8009d60:	4413      	add	r3, r2
 8009d62:	685b      	ldr	r3, [r3, #4]
 8009d64:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009d66:	429a      	cmp	r2, r3
 8009d68:	d202      	bcs.n	8009d70 <netconn_write_vectors_partly+0xb4>
      /* overflow */
      return ERR_VAL;
 8009d6a:	f06f 0305 	mvn.w	r3, #5
 8009d6e:	e04c      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
  for (i = 0; i < vectorcnt; i++) {
 8009d70:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8009d72:	3301      	adds	r3, #1
 8009d74:	643b      	str	r3, [r7, #64]	; 0x40
 8009d76:	88fb      	ldrh	r3, [r7, #6]
 8009d78:	6c3a      	ldr	r2, [r7, #64]	; 0x40
 8009d7a:	429a      	cmp	r2, r3
 8009d7c:	dbe5      	blt.n	8009d4a <netconn_write_vectors_partly+0x8e>
    }
  }
  if (size == 0) {
 8009d7e:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d80:	2b00      	cmp	r3, #0
 8009d82:	d101      	bne.n	8009d88 <netconn_write_vectors_partly+0xcc>
    return ERR_OK;
 8009d84:	2300      	movs	r3, #0
 8009d86:	e040      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
  } else if (size > SSIZE_MAX) {
 8009d88:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009d8a:	2b00      	cmp	r3, #0
 8009d8c:	da0a      	bge.n	8009da4 <netconn_write_vectors_partly+0xe8>
    ssize_t limited;
    /* this is required by the socket layer (cannot send full size_t range) */
    if (!bytes_written) {
 8009d8e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009d90:	2b00      	cmp	r3, #0
 8009d92:	d102      	bne.n	8009d9a <netconn_write_vectors_partly+0xde>
      return ERR_VAL;
 8009d94:	f06f 0305 	mvn.w	r3, #5
 8009d98:	e037      	b.n	8009e0a <netconn_write_vectors_partly+0x14e>
    }
    /* limit the amount of data to send */
    limited = SSIZE_MAX;
 8009d9a:	f06f 4300 	mvn.w	r3, #2147483648	; 0x80000000
 8009d9e:	63bb      	str	r3, [r7, #56]	; 0x38
    size = (size_t)limited;
 8009da0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8009da2:	647b      	str	r3, [r7, #68]	; 0x44
  }

  API_MSG_VAR_ALLOC(msg);
  /* non-blocking write sends as much  */
  API_MSG_VAR_REF(msg).conn = conn;
 8009da4:	68fb      	ldr	r3, [r7, #12]
 8009da6:	617b      	str	r3, [r7, #20]
  API_MSG_VAR_REF(msg).msg.w.vector = vectors;
 8009da8:	68bb      	ldr	r3, [r7, #8]
 8009daa:	61fb      	str	r3, [r7, #28]
  API_MSG_VAR_REF(msg).msg.w.vector_cnt = vectorcnt;
 8009dac:	88fb      	ldrh	r3, [r7, #6]
 8009dae:	843b      	strh	r3, [r7, #32]
  API_MSG_VAR_REF(msg).msg.w.vector_off = 0;
 8009db0:	2300      	movs	r3, #0
 8009db2:	627b      	str	r3, [r7, #36]	; 0x24
  API_MSG_VAR_REF(msg).msg.w.apiflags = apiflags;
 8009db4:	797b      	ldrb	r3, [r7, #5]
 8009db6:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
  API_MSG_VAR_REF(msg).msg.w.len = size;
 8009dba:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8009dbc:	62bb      	str	r3, [r7, #40]	; 0x28
  API_MSG_VAR_REF(msg).msg.w.offset = 0;
 8009dbe:	2300      	movs	r3, #0
 8009dc0:	62fb      	str	r3, [r7, #44]	; 0x2c
#endif /* LWIP_SO_SNDTIMEO */

  /* For locking the core: this _can_ be delayed on low memory/low send buffer,
     but if it is, this is done inside api_msg.c:do_write(), so we can use the
     non-blocking version here. */
  err = netconn_apimsg(lwip_netconn_do_write, &API_MSG_VAR_REF(msg));
 8009dc2:	f107 0314 	add.w	r3, r7, #20
 8009dc6:	4619      	mov	r1, r3
 8009dc8:	4816      	ldr	r0, [pc, #88]	; (8009e24 <netconn_write_vectors_partly+0x168>)
 8009dca:	f7ff fc1f 	bl	800960c <netconn_apimsg>
 8009dce:	4603      	mov	r3, r0
 8009dd0:	f887 3037 	strb.w	r3, [r7, #55]	; 0x37
  if (err == ERR_OK) {
 8009dd4:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
 8009dd8:	2b00      	cmp	r3, #0
 8009dda:	d114      	bne.n	8009e06 <netconn_write_vectors_partly+0x14a>
    if (bytes_written != NULL) {
 8009ddc:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009dde:	2b00      	cmp	r3, #0
 8009de0:	d002      	beq.n	8009de8 <netconn_write_vectors_partly+0x12c>
      *bytes_written = API_MSG_VAR_REF(msg).msg.w.offset;
 8009de2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8009de4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8009de6:	601a      	str	r2, [r3, #0]
    }
    /* for blocking, check all requested bytes were written, NOTE: send_timeout is
       treated as dontblock (see dontblock assignment above) */
    if (!dontblock) {
 8009de8:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8009dec:	2b00      	cmp	r3, #0
 8009dee:	d10a      	bne.n	8009e06 <netconn_write_vectors_partly+0x14a>
      LWIP_ASSERT("do_write failed to write all bytes", API_MSG_VAR_REF(msg).msg.w.offset == size);
 8009df0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8009df2:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8009df4:	429a      	cmp	r2, r3
 8009df6:	d006      	beq.n	8009e06 <netconn_write_vectors_partly+0x14a>
 8009df8:	4b06      	ldr	r3, [pc, #24]	; (8009e14 <netconn_write_vectors_partly+0x158>)
 8009dfa:	f44f 6286 	mov.w	r2, #1072	; 0x430
 8009dfe:	490a      	ldr	r1, [pc, #40]	; (8009e28 <netconn_write_vectors_partly+0x16c>)
 8009e00:	4806      	ldr	r0, [pc, #24]	; (8009e1c <netconn_write_vectors_partly+0x160>)
 8009e02:	f00c fff5 	bl	8016df0 <iprintf>
    }
  }
  API_MSG_VAR_FREE(msg);

  return err;
 8009e06:	f997 3037 	ldrsb.w	r3, [r7, #55]	; 0x37
}
 8009e0a:	4618      	mov	r0, r3
 8009e0c:	3748      	adds	r7, #72	; 0x48
 8009e0e:	46bd      	mov	sp, r7
 8009e10:	bd80      	pop	{r7, pc}
 8009e12:	bf00      	nop
 8009e14:	08018190 	.word	0x08018190
 8009e18:	08018468 	.word	0x08018468
 8009e1c:	080181e8 	.word	0x080181e8
 8009e20:	08018484 	.word	0x08018484
 8009e24:	0800b44d 	.word	0x0800b44d
 8009e28:	080184a8 	.word	0x080184a8

08009e2c <netconn_close_shutdown>:
 * @param how fully close or only shutdown one side?
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
static err_t
netconn_close_shutdown(struct netconn *conn, u8_t how)
{
 8009e2c:	b580      	push	{r7, lr}
 8009e2e:	b08c      	sub	sp, #48	; 0x30
 8009e30:	af00      	add	r7, sp, #0
 8009e32:	6078      	str	r0, [r7, #4]
 8009e34:	460b      	mov	r3, r1
 8009e36:	70fb      	strb	r3, [r7, #3]
  API_MSG_VAR_DECLARE(msg);
  err_t err;
  LWIP_UNUSED_ARG(how);

  LWIP_ERROR("netconn_close: invalid conn",  (conn != NULL), return ERR_ARG;);
 8009e38:	687b      	ldr	r3, [r7, #4]
 8009e3a:	2b00      	cmp	r3, #0
 8009e3c:	d109      	bne.n	8009e52 <netconn_close_shutdown+0x26>
 8009e3e:	4b0f      	ldr	r3, [pc, #60]	; (8009e7c <netconn_close_shutdown+0x50>)
 8009e40:	f240 4247 	movw	r2, #1095	; 0x447
 8009e44:	490e      	ldr	r1, [pc, #56]	; (8009e80 <netconn_close_shutdown+0x54>)
 8009e46:	480f      	ldr	r0, [pc, #60]	; (8009e84 <netconn_close_shutdown+0x58>)
 8009e48:	f00c ffd2 	bl	8016df0 <iprintf>
 8009e4c:	f06f 030f 	mvn.w	r3, #15
 8009e50:	e010      	b.n	8009e74 <netconn_close_shutdown+0x48>

  API_MSG_VAR_ALLOC(msg);
  API_MSG_VAR_REF(msg).conn = conn;
 8009e52:	687b      	ldr	r3, [r7, #4]
 8009e54:	60fb      	str	r3, [r7, #12]
#if LWIP_TCP
  /* shutting down both ends is the same as closing */
  API_MSG_VAR_REF(msg).msg.sd.shut = how;
 8009e56:	78fb      	ldrb	r3, [r7, #3]
 8009e58:	753b      	strb	r3, [r7, #20]
#if LWIP_SO_SNDTIMEO || LWIP_SO_LINGER
  /* get the time we started, which is later compared to
     sys_now() + conn->send_timeout */
  API_MSG_VAR_REF(msg).msg.sd.time_started = sys_now();
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
  API_MSG_VAR_REF(msg).msg.sd.polls_left =
 8009e5a:	2329      	movs	r3, #41	; 0x29
 8009e5c:	757b      	strb	r3, [r7, #21]
    ((LWIP_TCP_CLOSE_TIMEOUT_MS_DEFAULT + TCP_SLOW_INTERVAL - 1) / TCP_SLOW_INTERVAL) + 1;
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
#endif /* LWIP_TCP */
  err = netconn_apimsg(lwip_netconn_do_close, &API_MSG_VAR_REF(msg));
 8009e5e:	f107 030c 	add.w	r3, r7, #12
 8009e62:	4619      	mov	r1, r3
 8009e64:	4808      	ldr	r0, [pc, #32]	; (8009e88 <netconn_close_shutdown+0x5c>)
 8009e66:	f7ff fbd1 	bl	800960c <netconn_apimsg>
 8009e6a:	4603      	mov	r3, r0
 8009e6c:	f887 302f 	strb.w	r3, [r7, #47]	; 0x2f
  API_MSG_VAR_FREE(msg);

  return err;
 8009e70:	f997 302f 	ldrsb.w	r3, [r7, #47]	; 0x2f
}
 8009e74:	4618      	mov	r0, r3
 8009e76:	3730      	adds	r7, #48	; 0x30
 8009e78:	46bd      	mov	sp, r7
 8009e7a:	bd80      	pop	{r7, pc}
 8009e7c:	08018190 	.word	0x08018190
 8009e80:	080184cc 	.word	0x080184cc
 8009e84:	080181e8 	.word	0x080181e8
 8009e88:	0800b565 	.word	0x0800b565

08009e8c <netconn_close>:
 * @param conn the TCP netconn to close
 * @return ERR_OK if the netconn was closed, any other err_t on error
 */
err_t
netconn_close(struct netconn *conn)
{
 8009e8c:	b580      	push	{r7, lr}
 8009e8e:	b082      	sub	sp, #8
 8009e90:	af00      	add	r7, sp, #0
 8009e92:	6078      	str	r0, [r7, #4]
  /* shutting down both ends is the same as closing */
  return netconn_close_shutdown(conn, NETCONN_SHUT_RDWR);
 8009e94:	2103      	movs	r1, #3
 8009e96:	6878      	ldr	r0, [r7, #4]
 8009e98:	f7ff ffc8 	bl	8009e2c <netconn_close_shutdown>
 8009e9c:	4603      	mov	r3, r0
}
 8009e9e:	4618      	mov	r0, r3
 8009ea0:	3708      	adds	r7, #8
 8009ea2:	46bd      	mov	sp, r7
 8009ea4:	bd80      	pop	{r7, pc}

08009ea6 <netconn_err>:
 * @param conn the netconn to get the error from
 * @return and pending error or ERR_OK if no error was pending
 */
err_t
netconn_err(struct netconn *conn)
{
 8009ea6:	b580      	push	{r7, lr}
 8009ea8:	b084      	sub	sp, #16
 8009eaa:	af00      	add	r7, sp, #0
 8009eac:	6078      	str	r0, [r7, #4]
  err_t err;
  SYS_ARCH_DECL_PROTECT(lev);
  if (conn == NULL) {
 8009eae:	687b      	ldr	r3, [r7, #4]
 8009eb0:	2b00      	cmp	r3, #0
 8009eb2:	d101      	bne.n	8009eb8 <netconn_err+0x12>
    return ERR_OK;
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	e00d      	b.n	8009ed4 <netconn_err+0x2e>
  }
  SYS_ARCH_PROTECT(lev);
 8009eb8:	f00c fe8e 	bl	8016bd8 <sys_arch_protect>
 8009ebc:	60f8      	str	r0, [r7, #12]
  err = conn->pending_err;
 8009ebe:	687b      	ldr	r3, [r7, #4]
 8009ec0:	7a1b      	ldrb	r3, [r3, #8]
 8009ec2:	72fb      	strb	r3, [r7, #11]
  conn->pending_err = ERR_OK;
 8009ec4:	687b      	ldr	r3, [r7, #4]
 8009ec6:	2200      	movs	r2, #0
 8009ec8:	721a      	strb	r2, [r3, #8]
  SYS_ARCH_UNPROTECT(lev);
 8009eca:	68f8      	ldr	r0, [r7, #12]
 8009ecc:	f00c fe92 	bl	8016bf4 <sys_arch_unprotect>
  return err;
 8009ed0:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 8009ed4:	4618      	mov	r0, r3
 8009ed6:	3710      	adds	r7, #16
 8009ed8:	46bd      	mov	sp, r7
 8009eda:	bd80      	pop	{r7, pc}

08009edc <lwip_netconn_err_to_msg>:
const u8_t netconn_closed = 0;

/** Translate an error to a unique void* passed via an mbox */
static void *
lwip_netconn_err_to_msg(err_t err)
{
 8009edc:	b580      	push	{r7, lr}
 8009ede:	b082      	sub	sp, #8
 8009ee0:	af00      	add	r7, sp, #0
 8009ee2:	4603      	mov	r3, r0
 8009ee4:	71fb      	strb	r3, [r7, #7]
  switch (err) {
 8009ee6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009eea:	f113 0f0d 	cmn.w	r3, #13
 8009eee:	d009      	beq.n	8009f04 <lwip_netconn_err_to_msg+0x28>
 8009ef0:	f113 0f0d 	cmn.w	r3, #13
 8009ef4:	dc0c      	bgt.n	8009f10 <lwip_netconn_err_to_msg+0x34>
 8009ef6:	f113 0f0f 	cmn.w	r3, #15
 8009efa:	d007      	beq.n	8009f0c <lwip_netconn_err_to_msg+0x30>
 8009efc:	f113 0f0e 	cmn.w	r3, #14
 8009f00:	d002      	beq.n	8009f08 <lwip_netconn_err_to_msg+0x2c>
 8009f02:	e005      	b.n	8009f10 <lwip_netconn_err_to_msg+0x34>
    case ERR_ABRT:
      return LWIP_CONST_CAST(void *, &netconn_aborted);
 8009f04:	4b0a      	ldr	r3, [pc, #40]	; (8009f30 <lwip_netconn_err_to_msg+0x54>)
 8009f06:	e00e      	b.n	8009f26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_RST:
      return LWIP_CONST_CAST(void *, &netconn_reset);
 8009f08:	4b0a      	ldr	r3, [pc, #40]	; (8009f34 <lwip_netconn_err_to_msg+0x58>)
 8009f0a:	e00c      	b.n	8009f26 <lwip_netconn_err_to_msg+0x4a>
    case ERR_CLSD:
      return LWIP_CONST_CAST(void *, &netconn_closed);
 8009f0c:	4b0a      	ldr	r3, [pc, #40]	; (8009f38 <lwip_netconn_err_to_msg+0x5c>)
 8009f0e:	e00a      	b.n	8009f26 <lwip_netconn_err_to_msg+0x4a>
    default:
      LWIP_ASSERT("unhandled error", err == ERR_OK);
 8009f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8009f14:	2b00      	cmp	r3, #0
 8009f16:	d005      	beq.n	8009f24 <lwip_netconn_err_to_msg+0x48>
 8009f18:	4b08      	ldr	r3, [pc, #32]	; (8009f3c <lwip_netconn_err_to_msg+0x60>)
 8009f1a:	227d      	movs	r2, #125	; 0x7d
 8009f1c:	4908      	ldr	r1, [pc, #32]	; (8009f40 <lwip_netconn_err_to_msg+0x64>)
 8009f1e:	4809      	ldr	r0, [pc, #36]	; (8009f44 <lwip_netconn_err_to_msg+0x68>)
 8009f20:	f00c ff66 	bl	8016df0 <iprintf>
      return NULL;
 8009f24:	2300      	movs	r3, #0
  }
}
 8009f26:	4618      	mov	r0, r3
 8009f28:	3708      	adds	r7, #8
 8009f2a:	46bd      	mov	sp, r7
 8009f2c:	bd80      	pop	{r7, pc}
 8009f2e:	bf00      	nop
 8009f30:	0801b6cc 	.word	0x0801b6cc
 8009f34:	0801b6cd 	.word	0x0801b6cd
 8009f38:	0801b6ce 	.word	0x0801b6ce
 8009f3c:	080184e8 	.word	0x080184e8
 8009f40:	0801851c 	.word	0x0801851c
 8009f44:	0801852c 	.word	0x0801852c

08009f48 <lwip_netconn_is_err_msg>:

int
lwip_netconn_is_err_msg(void *msg, err_t *err)
{
 8009f48:	b580      	push	{r7, lr}
 8009f4a:	b082      	sub	sp, #8
 8009f4c:	af00      	add	r7, sp, #0
 8009f4e:	6078      	str	r0, [r7, #4]
 8009f50:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("err != NULL", err != NULL);
 8009f52:	683b      	ldr	r3, [r7, #0]
 8009f54:	2b00      	cmp	r3, #0
 8009f56:	d105      	bne.n	8009f64 <lwip_netconn_is_err_msg+0x1c>
 8009f58:	4b12      	ldr	r3, [pc, #72]	; (8009fa4 <lwip_netconn_is_err_msg+0x5c>)
 8009f5a:	2285      	movs	r2, #133	; 0x85
 8009f5c:	4912      	ldr	r1, [pc, #72]	; (8009fa8 <lwip_netconn_is_err_msg+0x60>)
 8009f5e:	4813      	ldr	r0, [pc, #76]	; (8009fac <lwip_netconn_is_err_msg+0x64>)
 8009f60:	f00c ff46 	bl	8016df0 <iprintf>

  if (msg == &netconn_aborted) {
 8009f64:	687b      	ldr	r3, [r7, #4]
 8009f66:	4a12      	ldr	r2, [pc, #72]	; (8009fb0 <lwip_netconn_is_err_msg+0x68>)
 8009f68:	4293      	cmp	r3, r2
 8009f6a:	d104      	bne.n	8009f76 <lwip_netconn_is_err_msg+0x2e>
    *err = ERR_ABRT;
 8009f6c:	683b      	ldr	r3, [r7, #0]
 8009f6e:	22f3      	movs	r2, #243	; 0xf3
 8009f70:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f72:	2301      	movs	r3, #1
 8009f74:	e012      	b.n	8009f9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_reset) {
 8009f76:	687b      	ldr	r3, [r7, #4]
 8009f78:	4a0e      	ldr	r2, [pc, #56]	; (8009fb4 <lwip_netconn_is_err_msg+0x6c>)
 8009f7a:	4293      	cmp	r3, r2
 8009f7c:	d104      	bne.n	8009f88 <lwip_netconn_is_err_msg+0x40>
    *err = ERR_RST;
 8009f7e:	683b      	ldr	r3, [r7, #0]
 8009f80:	22f2      	movs	r2, #242	; 0xf2
 8009f82:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f84:	2301      	movs	r3, #1
 8009f86:	e009      	b.n	8009f9c <lwip_netconn_is_err_msg+0x54>
  } else if (msg == &netconn_closed) {
 8009f88:	687b      	ldr	r3, [r7, #4]
 8009f8a:	4a0b      	ldr	r2, [pc, #44]	; (8009fb8 <lwip_netconn_is_err_msg+0x70>)
 8009f8c:	4293      	cmp	r3, r2
 8009f8e:	d104      	bne.n	8009f9a <lwip_netconn_is_err_msg+0x52>
    *err = ERR_CLSD;
 8009f90:	683b      	ldr	r3, [r7, #0]
 8009f92:	22f1      	movs	r2, #241	; 0xf1
 8009f94:	701a      	strb	r2, [r3, #0]
    return 1;
 8009f96:	2301      	movs	r3, #1
 8009f98:	e000      	b.n	8009f9c <lwip_netconn_is_err_msg+0x54>
  }
  return 0;
 8009f9a:	2300      	movs	r3, #0
}
 8009f9c:	4618      	mov	r0, r3
 8009f9e:	3708      	adds	r7, #8
 8009fa0:	46bd      	mov	sp, r7
 8009fa2:	bd80      	pop	{r7, pc}
 8009fa4:	080184e8 	.word	0x080184e8
 8009fa8:	08018554 	.word	0x08018554
 8009fac:	0801852c 	.word	0x0801852c
 8009fb0:	0801b6cc 	.word	0x0801b6cc
 8009fb4:	0801b6cd 	.word	0x0801b6cd
 8009fb8:	0801b6ce 	.word	0x0801b6ce

08009fbc <recv_udp>:
 * @see udp.h (struct udp_pcb.recv) for parameters
 */
static void
recv_udp(void *arg, struct udp_pcb *pcb, struct pbuf *p,
         const ip_addr_t *addr, u16_t port)
{
 8009fbc:	b580      	push	{r7, lr}
 8009fbe:	b088      	sub	sp, #32
 8009fc0:	af00      	add	r7, sp, #0
 8009fc2:	60f8      	str	r0, [r7, #12]
 8009fc4:	60b9      	str	r1, [r7, #8]
 8009fc6:	607a      	str	r2, [r7, #4]
 8009fc8:	603b      	str	r3, [r7, #0]
#if LWIP_SO_RCVBUF
  int recv_avail;
#endif /* LWIP_SO_RCVBUF */

  LWIP_UNUSED_ARG(pcb); /* only used for asserts... */
  LWIP_ASSERT("recv_udp must have a pcb argument", pcb != NULL);
 8009fca:	68bb      	ldr	r3, [r7, #8]
 8009fcc:	2b00      	cmp	r3, #0
 8009fce:	d105      	bne.n	8009fdc <recv_udp+0x20>
 8009fd0:	4b34      	ldr	r3, [pc, #208]	; (800a0a4 <recv_udp+0xe8>)
 8009fd2:	22e5      	movs	r2, #229	; 0xe5
 8009fd4:	4934      	ldr	r1, [pc, #208]	; (800a0a8 <recv_udp+0xec>)
 8009fd6:	4835      	ldr	r0, [pc, #212]	; (800a0ac <recv_udp+0xf0>)
 8009fd8:	f00c ff0a 	bl	8016df0 <iprintf>
  LWIP_ASSERT("recv_udp must have an argument", arg != NULL);
 8009fdc:	68fb      	ldr	r3, [r7, #12]
 8009fde:	2b00      	cmp	r3, #0
 8009fe0:	d105      	bne.n	8009fee <recv_udp+0x32>
 8009fe2:	4b30      	ldr	r3, [pc, #192]	; (800a0a4 <recv_udp+0xe8>)
 8009fe4:	22e6      	movs	r2, #230	; 0xe6
 8009fe6:	4932      	ldr	r1, [pc, #200]	; (800a0b0 <recv_udp+0xf4>)
 8009fe8:	4830      	ldr	r0, [pc, #192]	; (800a0ac <recv_udp+0xf0>)
 8009fea:	f00c ff01 	bl	8016df0 <iprintf>
  conn = (struct netconn *)arg;
 8009fee:	68fb      	ldr	r3, [r7, #12]
 8009ff0:	61fb      	str	r3, [r7, #28]

  if (conn == NULL) {
 8009ff2:	69fb      	ldr	r3, [r7, #28]
 8009ff4:	2b00      	cmp	r3, #0
 8009ff6:	d103      	bne.n	800a000 <recv_udp+0x44>
    pbuf_free(p);
 8009ff8:	6878      	ldr	r0, [r7, #4]
 8009ffa:	f003 f939 	bl	800d270 <pbuf_free>
    return;
 8009ffe:	e04d      	b.n	800a09c <recv_udp+0xe0>
  }

  LWIP_ASSERT("recv_udp: recv for wrong pcb!", conn->pcb.udp == pcb);
 800a000:	69fb      	ldr	r3, [r7, #28]
 800a002:	685b      	ldr	r3, [r3, #4]
 800a004:	68ba      	ldr	r2, [r7, #8]
 800a006:	429a      	cmp	r2, r3
 800a008:	d005      	beq.n	800a016 <recv_udp+0x5a>
 800a00a:	4b26      	ldr	r3, [pc, #152]	; (800a0a4 <recv_udp+0xe8>)
 800a00c:	22ee      	movs	r2, #238	; 0xee
 800a00e:	4929      	ldr	r1, [pc, #164]	; (800a0b4 <recv_udp+0xf8>)
 800a010:	4826      	ldr	r0, [pc, #152]	; (800a0ac <recv_udp+0xf0>)
 800a012:	f00c feed 	bl	8016df0 <iprintf>
#if LWIP_SO_RCVBUF
  SYS_ARCH_GET(conn->recv_avail, recv_avail);
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox) ||
      ((recv_avail + (int)(p->tot_len)) > conn->recv_bufsize)) {
#else  /* LWIP_SO_RCVBUF */
  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a016:	69fb      	ldr	r3, [r7, #28]
 800a018:	3310      	adds	r3, #16
 800a01a:	4618      	mov	r0, r3
 800a01c:	f00c fcd2 	bl	80169c4 <sys_mbox_valid>
 800a020:	4603      	mov	r3, r0
 800a022:	2b00      	cmp	r3, #0
 800a024:	d103      	bne.n	800a02e <recv_udp+0x72>
#endif /* LWIP_SO_RCVBUF */
    pbuf_free(p);
 800a026:	6878      	ldr	r0, [r7, #4]
 800a028:	f003 f922 	bl	800d270 <pbuf_free>
    return;
 800a02c:	e036      	b.n	800a09c <recv_udp+0xe0>
  }

  buf = (struct netbuf *)memp_malloc(MEMP_NETBUF);
 800a02e:	2006      	movs	r0, #6
 800a030:	f002 fa04 	bl	800c43c <memp_malloc>
 800a034:	61b8      	str	r0, [r7, #24]
  if (buf == NULL) {
 800a036:	69bb      	ldr	r3, [r7, #24]
 800a038:	2b00      	cmp	r3, #0
 800a03a:	d103      	bne.n	800a044 <recv_udp+0x88>
    pbuf_free(p);
 800a03c:	6878      	ldr	r0, [r7, #4]
 800a03e:	f003 f917 	bl	800d270 <pbuf_free>
    return;
 800a042:	e02b      	b.n	800a09c <recv_udp+0xe0>
  } else {
    buf->p = p;
 800a044:	69bb      	ldr	r3, [r7, #24]
 800a046:	687a      	ldr	r2, [r7, #4]
 800a048:	601a      	str	r2, [r3, #0]
    buf->ptr = p;
 800a04a:	69bb      	ldr	r3, [r7, #24]
 800a04c:	687a      	ldr	r2, [r7, #4]
 800a04e:	605a      	str	r2, [r3, #4]
    ip_addr_set(&buf->addr, addr);
 800a050:	683b      	ldr	r3, [r7, #0]
 800a052:	2b00      	cmp	r3, #0
 800a054:	d002      	beq.n	800a05c <recv_udp+0xa0>
 800a056:	683b      	ldr	r3, [r7, #0]
 800a058:	681b      	ldr	r3, [r3, #0]
 800a05a:	e000      	b.n	800a05e <recv_udp+0xa2>
 800a05c:	2300      	movs	r3, #0
 800a05e:	69ba      	ldr	r2, [r7, #24]
 800a060:	6093      	str	r3, [r2, #8]
    buf->port = port;
 800a062:	69bb      	ldr	r3, [r7, #24]
 800a064:	8d3a      	ldrh	r2, [r7, #40]	; 0x28
 800a066:	819a      	strh	r2, [r3, #12]
      buf->toport_chksum = udphdr->dest;
    }
#endif /* LWIP_NETBUF_RECVINFO */
  }

  len = p->tot_len;
 800a068:	687b      	ldr	r3, [r7, #4]
 800a06a:	891b      	ldrh	r3, [r3, #8]
 800a06c:	82fb      	strh	r3, [r7, #22]
  if (sys_mbox_trypost(&conn->recvmbox, buf) != ERR_OK) {
 800a06e:	69fb      	ldr	r3, [r7, #28]
 800a070:	3310      	adds	r3, #16
 800a072:	69b9      	ldr	r1, [r7, #24]
 800a074:	4618      	mov	r0, r3
 800a076:	f00c fc43 	bl	8016900 <sys_mbox_trypost>
 800a07a:	4603      	mov	r3, r0
 800a07c:	2b00      	cmp	r3, #0
 800a07e:	d003      	beq.n	800a088 <recv_udp+0xcc>
    netbuf_delete(buf);
 800a080:	69b8      	ldr	r0, [r7, #24]
 800a082:	f001 fafb 	bl	800b67c <netbuf_delete>
    return;
 800a086:	e009      	b.n	800a09c <recv_udp+0xe0>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a088:	69fb      	ldr	r3, [r7, #28]
 800a08a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a08c:	2b00      	cmp	r3, #0
 800a08e:	d005      	beq.n	800a09c <recv_udp+0xe0>
 800a090:	69fb      	ldr	r3, [r7, #28]
 800a092:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a094:	8afa      	ldrh	r2, [r7, #22]
 800a096:	2100      	movs	r1, #0
 800a098:	69f8      	ldr	r0, [r7, #28]
 800a09a:	4798      	blx	r3
  }
}
 800a09c:	3720      	adds	r7, #32
 800a09e:	46bd      	mov	sp, r7
 800a0a0:	bd80      	pop	{r7, pc}
 800a0a2:	bf00      	nop
 800a0a4:	080184e8 	.word	0x080184e8
 800a0a8:	08018560 	.word	0x08018560
 800a0ac:	0801852c 	.word	0x0801852c
 800a0b0:	08018584 	.word	0x08018584
 800a0b4:	080185a4 	.word	0x080185a4

0800a0b8 <recv_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.recv) for parameters and return value
 */
static err_t
recv_tcp(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800a0b8:	b580      	push	{r7, lr}
 800a0ba:	b088      	sub	sp, #32
 800a0bc:	af00      	add	r7, sp, #0
 800a0be:	60f8      	str	r0, [r7, #12]
 800a0c0:	60b9      	str	r1, [r7, #8]
 800a0c2:	607a      	str	r2, [r7, #4]
 800a0c4:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  u16_t len;
  void *msg;

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("recv_tcp must have a pcb argument", pcb != NULL);
 800a0c6:	68bb      	ldr	r3, [r7, #8]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	d106      	bne.n	800a0da <recv_tcp+0x22>
 800a0cc:	4b36      	ldr	r3, [pc, #216]	; (800a1a8 <recv_tcp+0xf0>)
 800a0ce:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800a0d2:	4936      	ldr	r1, [pc, #216]	; (800a1ac <recv_tcp+0xf4>)
 800a0d4:	4836      	ldr	r0, [pc, #216]	; (800a1b0 <recv_tcp+0xf8>)
 800a0d6:	f00c fe8b 	bl	8016df0 <iprintf>
  LWIP_ASSERT("recv_tcp must have an argument", arg != NULL);
 800a0da:	68fb      	ldr	r3, [r7, #12]
 800a0dc:	2b00      	cmp	r3, #0
 800a0de:	d106      	bne.n	800a0ee <recv_tcp+0x36>
 800a0e0:	4b31      	ldr	r3, [pc, #196]	; (800a1a8 <recv_tcp+0xf0>)
 800a0e2:	f240 122d 	movw	r2, #301	; 0x12d
 800a0e6:	4933      	ldr	r1, [pc, #204]	; (800a1b4 <recv_tcp+0xfc>)
 800a0e8:	4831      	ldr	r0, [pc, #196]	; (800a1b0 <recv_tcp+0xf8>)
 800a0ea:	f00c fe81 	bl	8016df0 <iprintf>
  LWIP_ASSERT("err != ERR_OK unhandled", err == ERR_OK);
 800a0ee:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a0f2:	2b00      	cmp	r3, #0
 800a0f4:	d006      	beq.n	800a104 <recv_tcp+0x4c>
 800a0f6:	4b2c      	ldr	r3, [pc, #176]	; (800a1a8 <recv_tcp+0xf0>)
 800a0f8:	f44f 7297 	mov.w	r2, #302	; 0x12e
 800a0fc:	492e      	ldr	r1, [pc, #184]	; (800a1b8 <recv_tcp+0x100>)
 800a0fe:	482c      	ldr	r0, [pc, #176]	; (800a1b0 <recv_tcp+0xf8>)
 800a100:	f00c fe76 	bl	8016df0 <iprintf>
  LWIP_UNUSED_ARG(err); /* for LWIP_NOASSERT */
  conn = (struct netconn *)arg;
 800a104:	68fb      	ldr	r3, [r7, #12]
 800a106:	617b      	str	r3, [r7, #20]

  if (conn == NULL) {
 800a108:	697b      	ldr	r3, [r7, #20]
 800a10a:	2b00      	cmp	r3, #0
 800a10c:	d102      	bne.n	800a114 <recv_tcp+0x5c>
    return ERR_VAL;
 800a10e:	f06f 0305 	mvn.w	r3, #5
 800a112:	e045      	b.n	800a1a0 <recv_tcp+0xe8>
  }
  LWIP_ASSERT("recv_tcp: recv for wrong pcb!", conn->pcb.tcp == pcb);
 800a114:	697b      	ldr	r3, [r7, #20]
 800a116:	685b      	ldr	r3, [r3, #4]
 800a118:	68ba      	ldr	r2, [r7, #8]
 800a11a:	429a      	cmp	r2, r3
 800a11c:	d006      	beq.n	800a12c <recv_tcp+0x74>
 800a11e:	4b22      	ldr	r3, [pc, #136]	; (800a1a8 <recv_tcp+0xf0>)
 800a120:	f240 1235 	movw	r2, #309	; 0x135
 800a124:	4925      	ldr	r1, [pc, #148]	; (800a1bc <recv_tcp+0x104>)
 800a126:	4822      	ldr	r0, [pc, #136]	; (800a1b0 <recv_tcp+0xf8>)
 800a128:	f00c fe62 	bl	8016df0 <iprintf>

  if (!NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a12c:	697b      	ldr	r3, [r7, #20]
 800a12e:	3310      	adds	r3, #16
 800a130:	4618      	mov	r0, r3
 800a132:	f00c fc47 	bl	80169c4 <sys_mbox_valid>
 800a136:	4603      	mov	r3, r0
 800a138:	2b00      	cmp	r3, #0
 800a13a:	d10d      	bne.n	800a158 <recv_tcp+0xa0>
    /* recvmbox already deleted */
    if (p != NULL) {
 800a13c:	687b      	ldr	r3, [r7, #4]
 800a13e:	2b00      	cmp	r3, #0
 800a140:	d008      	beq.n	800a154 <recv_tcp+0x9c>
      tcp_recved(pcb, p->tot_len);
 800a142:	687b      	ldr	r3, [r7, #4]
 800a144:	891b      	ldrh	r3, [r3, #8]
 800a146:	4619      	mov	r1, r3
 800a148:	68b8      	ldr	r0, [r7, #8]
 800a14a:	f003 ff7f 	bl	800e04c <tcp_recved>
      pbuf_free(p);
 800a14e:	6878      	ldr	r0, [r7, #4]
 800a150:	f003 f88e 	bl	800d270 <pbuf_free>
    }
    return ERR_OK;
 800a154:	2300      	movs	r3, #0
 800a156:	e023      	b.n	800a1a0 <recv_tcp+0xe8>
  }
  /* Unlike for UDP or RAW pcbs, don't check for available space
     using recv_avail since that could break the connection
     (data is already ACKed) */

  if (p != NULL) {
 800a158:	687b      	ldr	r3, [r7, #4]
 800a15a:	2b00      	cmp	r3, #0
 800a15c:	d005      	beq.n	800a16a <recv_tcp+0xb2>
    msg = p;
 800a15e:	687b      	ldr	r3, [r7, #4]
 800a160:	61bb      	str	r3, [r7, #24]
    len = p->tot_len;
 800a162:	687b      	ldr	r3, [r7, #4]
 800a164:	891b      	ldrh	r3, [r3, #8]
 800a166:	83fb      	strh	r3, [r7, #30]
 800a168:	e003      	b.n	800a172 <recv_tcp+0xba>
  } else {
    msg = LWIP_CONST_CAST(void *, &netconn_closed);
 800a16a:	4b15      	ldr	r3, [pc, #84]	; (800a1c0 <recv_tcp+0x108>)
 800a16c:	61bb      	str	r3, [r7, #24]
    len = 0;
 800a16e:	2300      	movs	r3, #0
 800a170:	83fb      	strh	r3, [r7, #30]
  }

  if (sys_mbox_trypost(&conn->recvmbox, msg) != ERR_OK) {
 800a172:	697b      	ldr	r3, [r7, #20]
 800a174:	3310      	adds	r3, #16
 800a176:	69b9      	ldr	r1, [r7, #24]
 800a178:	4618      	mov	r0, r3
 800a17a:	f00c fbc1 	bl	8016900 <sys_mbox_trypost>
 800a17e:	4603      	mov	r3, r0
 800a180:	2b00      	cmp	r3, #0
 800a182:	d002      	beq.n	800a18a <recv_tcp+0xd2>
    /* don't deallocate p: it is presented to us later again from tcp_fasttmr! */
    return ERR_MEM;
 800a184:	f04f 33ff 	mov.w	r3, #4294967295
 800a188:	e00a      	b.n	800a1a0 <recv_tcp+0xe8>
  } else {
#if LWIP_SO_RCVBUF
    SYS_ARCH_INC(conn->recv_avail, len);
#endif /* LWIP_SO_RCVBUF */
    /* Register event with callback */
    API_EVENT(conn, NETCONN_EVT_RCVPLUS, len);
 800a18a:	697b      	ldr	r3, [r7, #20]
 800a18c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a18e:	2b00      	cmp	r3, #0
 800a190:	d005      	beq.n	800a19e <recv_tcp+0xe6>
 800a192:	697b      	ldr	r3, [r7, #20]
 800a194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a196:	8bfa      	ldrh	r2, [r7, #30]
 800a198:	2100      	movs	r1, #0
 800a19a:	6978      	ldr	r0, [r7, #20]
 800a19c:	4798      	blx	r3
  }

  return ERR_OK;
 800a19e:	2300      	movs	r3, #0
}
 800a1a0:	4618      	mov	r0, r3
 800a1a2:	3720      	adds	r7, #32
 800a1a4:	46bd      	mov	sp, r7
 800a1a6:	bd80      	pop	{r7, pc}
 800a1a8:	080184e8 	.word	0x080184e8
 800a1ac:	080185c4 	.word	0x080185c4
 800a1b0:	0801852c 	.word	0x0801852c
 800a1b4:	080185e8 	.word	0x080185e8
 800a1b8:	08018608 	.word	0x08018608
 800a1bc:	08018620 	.word	0x08018620
 800a1c0:	0801b6ce 	.word	0x0801b6ce

0800a1c4 <poll_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.poll) for parameters and return value
 */
static err_t
poll_tcp(void *arg, struct tcp_pcb *pcb)
{
 800a1c4:	b580      	push	{r7, lr}
 800a1c6:	b084      	sub	sp, #16
 800a1c8:	af00      	add	r7, sp, #0
 800a1ca:	6078      	str	r0, [r7, #4]
 800a1cc:	6039      	str	r1, [r7, #0]
  struct netconn *conn = (struct netconn *)arg;
 800a1ce:	687b      	ldr	r3, [r7, #4]
 800a1d0:	60fb      	str	r3, [r7, #12]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a1d2:	68fb      	ldr	r3, [r7, #12]
 800a1d4:	2b00      	cmp	r3, #0
 800a1d6:	d106      	bne.n	800a1e6 <poll_tcp+0x22>
 800a1d8:	4b29      	ldr	r3, [pc, #164]	; (800a280 <poll_tcp+0xbc>)
 800a1da:	f44f 72b5 	mov.w	r2, #362	; 0x16a
 800a1de:	4929      	ldr	r1, [pc, #164]	; (800a284 <poll_tcp+0xc0>)
 800a1e0:	4829      	ldr	r0, [pc, #164]	; (800a288 <poll_tcp+0xc4>)
 800a1e2:	f00c fe05 	bl	8016df0 <iprintf>

  if (conn->state == NETCONN_WRITE) {
 800a1e6:	68fb      	ldr	r3, [r7, #12]
 800a1e8:	785b      	ldrb	r3, [r3, #1]
 800a1ea:	2b01      	cmp	r3, #1
 800a1ec:	d104      	bne.n	800a1f8 <poll_tcp+0x34>
    lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a1ee:	2101      	movs	r1, #1
 800a1f0:	68f8      	ldr	r0, [r7, #12]
 800a1f2:	f000 ff5f 	bl	800b0b4 <lwip_netconn_do_writemore>
 800a1f6:	e016      	b.n	800a226 <poll_tcp+0x62>
  } else if (conn->state == NETCONN_CLOSE) {
 800a1f8:	68fb      	ldr	r3, [r7, #12]
 800a1fa:	785b      	ldrb	r3, [r3, #1]
 800a1fc:	2b04      	cmp	r3, #4
 800a1fe:	d112      	bne.n	800a226 <poll_tcp+0x62>
#if !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER
    if (conn->current_msg && conn->current_msg->msg.sd.polls_left) {
 800a200:	68fb      	ldr	r3, [r7, #12]
 800a202:	6a1b      	ldr	r3, [r3, #32]
 800a204:	2b00      	cmp	r3, #0
 800a206:	d00a      	beq.n	800a21e <poll_tcp+0x5a>
 800a208:	68fb      	ldr	r3, [r7, #12]
 800a20a:	6a1b      	ldr	r3, [r3, #32]
 800a20c:	7a5b      	ldrb	r3, [r3, #9]
 800a20e:	2b00      	cmp	r3, #0
 800a210:	d005      	beq.n	800a21e <poll_tcp+0x5a>
      conn->current_msg->msg.sd.polls_left--;
 800a212:	68fb      	ldr	r3, [r7, #12]
 800a214:	6a1b      	ldr	r3, [r3, #32]
 800a216:	7a5a      	ldrb	r2, [r3, #9]
 800a218:	3a01      	subs	r2, #1
 800a21a:	b2d2      	uxtb	r2, r2
 800a21c:	725a      	strb	r2, [r3, #9]
    }
#endif /* !LWIP_SO_SNDTIMEO && !LWIP_SO_LINGER */
    lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a21e:	2101      	movs	r1, #1
 800a220:	68f8      	ldr	r0, [r7, #12]
 800a222:	f000 fb3b 	bl	800a89c <lwip_netconn_do_close_internal>
  }
  /* @todo: implement connect timeout here? */

  /* Did a nonblocking write fail before? Then check available write-space. */
  if (conn->flags & NETCONN_FLAG_CHECK_WRITESPACE) {
 800a226:	68fb      	ldr	r3, [r7, #12]
 800a228:	7f1b      	ldrb	r3, [r3, #28]
 800a22a:	f003 0310 	and.w	r3, r3, #16
 800a22e:	2b00      	cmp	r3, #0
 800a230:	d021      	beq.n	800a276 <poll_tcp+0xb2>
    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a232:	68fb      	ldr	r3, [r7, #12]
 800a234:	685b      	ldr	r3, [r3, #4]
 800a236:	2b00      	cmp	r3, #0
 800a238:	d01d      	beq.n	800a276 <poll_tcp+0xb2>
 800a23a:	68fb      	ldr	r3, [r7, #12]
 800a23c:	685b      	ldr	r3, [r3, #4]
 800a23e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a242:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a246:	d316      	bcc.n	800a276 <poll_tcp+0xb2>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a248:	68fb      	ldr	r3, [r7, #12]
 800a24a:	685b      	ldr	r3, [r3, #4]
 800a24c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a250:	2b04      	cmp	r3, #4
 800a252:	d810      	bhi.n	800a276 <poll_tcp+0xb2>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a254:	68fb      	ldr	r3, [r7, #12]
 800a256:	7f1b      	ldrb	r3, [r3, #28]
 800a258:	f023 0310 	bic.w	r3, r3, #16
 800a25c:	b2da      	uxtb	r2, r3
 800a25e:	68fb      	ldr	r3, [r7, #12]
 800a260:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a262:	68fb      	ldr	r3, [r7, #12]
 800a264:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a266:	2b00      	cmp	r3, #0
 800a268:	d005      	beq.n	800a276 <poll_tcp+0xb2>
 800a26a:	68fb      	ldr	r3, [r7, #12]
 800a26c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a26e:	2200      	movs	r2, #0
 800a270:	2102      	movs	r1, #2
 800a272:	68f8      	ldr	r0, [r7, #12]
 800a274:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a276:	2300      	movs	r3, #0
}
 800a278:	4618      	mov	r0, r3
 800a27a:	3710      	adds	r7, #16
 800a27c:	46bd      	mov	sp, r7
 800a27e:	bd80      	pop	{r7, pc}
 800a280:	080184e8 	.word	0x080184e8
 800a284:	08018640 	.word	0x08018640
 800a288:	0801852c 	.word	0x0801852c

0800a28c <sent_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.sent) for parameters and return value
 */
static err_t
sent_tcp(void *arg, struct tcp_pcb *pcb, u16_t len)
{
 800a28c:	b580      	push	{r7, lr}
 800a28e:	b086      	sub	sp, #24
 800a290:	af00      	add	r7, sp, #0
 800a292:	60f8      	str	r0, [r7, #12]
 800a294:	60b9      	str	r1, [r7, #8]
 800a296:	4613      	mov	r3, r2
 800a298:	80fb      	strh	r3, [r7, #6]
  struct netconn *conn = (struct netconn *)arg;
 800a29a:	68fb      	ldr	r3, [r7, #12]
 800a29c:	617b      	str	r3, [r7, #20]

  LWIP_UNUSED_ARG(pcb);
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a29e:	697b      	ldr	r3, [r7, #20]
 800a2a0:	2b00      	cmp	r3, #0
 800a2a2:	d106      	bne.n	800a2b2 <sent_tcp+0x26>
 800a2a4:	4b20      	ldr	r3, [pc, #128]	; (800a328 <sent_tcp+0x9c>)
 800a2a6:	f240 1293 	movw	r2, #403	; 0x193
 800a2aa:	4920      	ldr	r1, [pc, #128]	; (800a32c <sent_tcp+0xa0>)
 800a2ac:	4820      	ldr	r0, [pc, #128]	; (800a330 <sent_tcp+0xa4>)
 800a2ae:	f00c fd9f 	bl	8016df0 <iprintf>

  if (conn) {
 800a2b2:	697b      	ldr	r3, [r7, #20]
 800a2b4:	2b00      	cmp	r3, #0
 800a2b6:	d032      	beq.n	800a31e <sent_tcp+0x92>
    if (conn->state == NETCONN_WRITE) {
 800a2b8:	697b      	ldr	r3, [r7, #20]
 800a2ba:	785b      	ldrb	r3, [r3, #1]
 800a2bc:	2b01      	cmp	r3, #1
 800a2be:	d104      	bne.n	800a2ca <sent_tcp+0x3e>
      lwip_netconn_do_writemore(conn  WRITE_DELAYED);
 800a2c0:	2101      	movs	r1, #1
 800a2c2:	6978      	ldr	r0, [r7, #20]
 800a2c4:	f000 fef6 	bl	800b0b4 <lwip_netconn_do_writemore>
 800a2c8:	e007      	b.n	800a2da <sent_tcp+0x4e>
    } else if (conn->state == NETCONN_CLOSE) {
 800a2ca:	697b      	ldr	r3, [r7, #20]
 800a2cc:	785b      	ldrb	r3, [r3, #1]
 800a2ce:	2b04      	cmp	r3, #4
 800a2d0:	d103      	bne.n	800a2da <sent_tcp+0x4e>
      lwip_netconn_do_close_internal(conn  WRITE_DELAYED);
 800a2d2:	2101      	movs	r1, #1
 800a2d4:	6978      	ldr	r0, [r7, #20]
 800a2d6:	f000 fae1 	bl	800a89c <lwip_netconn_do_close_internal>
    }

    /* If the queued byte- or pbuf-count drops below the configured low-water limit,
       let select mark this pcb as writable again. */
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2da:	697b      	ldr	r3, [r7, #20]
 800a2dc:	685b      	ldr	r3, [r3, #4]
 800a2de:	2b00      	cmp	r3, #0
 800a2e0:	d01d      	beq.n	800a31e <sent_tcp+0x92>
 800a2e2:	697b      	ldr	r3, [r7, #20]
 800a2e4:	685b      	ldr	r3, [r3, #4]
 800a2e6:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800a2ea:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800a2ee:	d316      	bcc.n	800a31e <sent_tcp+0x92>
        (tcp_sndqueuelen(conn->pcb.tcp) < TCP_SNDQUEUELOWAT)) {
 800a2f0:	697b      	ldr	r3, [r7, #20]
 800a2f2:	685b      	ldr	r3, [r3, #4]
 800a2f4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
    if ((conn->pcb.tcp != NULL) && (tcp_sndbuf(conn->pcb.tcp) > TCP_SNDLOWAT) &&
 800a2f8:	2b04      	cmp	r3, #4
 800a2fa:	d810      	bhi.n	800a31e <sent_tcp+0x92>
      netconn_clear_flags(conn, NETCONN_FLAG_CHECK_WRITESPACE);
 800a2fc:	697b      	ldr	r3, [r7, #20]
 800a2fe:	7f1b      	ldrb	r3, [r3, #28]
 800a300:	f023 0310 	bic.w	r3, r3, #16
 800a304:	b2da      	uxtb	r2, r3
 800a306:	697b      	ldr	r3, [r7, #20]
 800a308:	771a      	strb	r2, [r3, #28]
      API_EVENT(conn, NETCONN_EVT_SENDPLUS, len);
 800a30a:	697b      	ldr	r3, [r7, #20]
 800a30c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a30e:	2b00      	cmp	r3, #0
 800a310:	d005      	beq.n	800a31e <sent_tcp+0x92>
 800a312:	697b      	ldr	r3, [r7, #20]
 800a314:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a316:	88fa      	ldrh	r2, [r7, #6]
 800a318:	2102      	movs	r1, #2
 800a31a:	6978      	ldr	r0, [r7, #20]
 800a31c:	4798      	blx	r3
    }
  }

  return ERR_OK;
 800a31e:	2300      	movs	r3, #0
}
 800a320:	4618      	mov	r0, r3
 800a322:	3718      	adds	r7, #24
 800a324:	46bd      	mov	sp, r7
 800a326:	bd80      	pop	{r7, pc}
 800a328:	080184e8 	.word	0x080184e8
 800a32c:	08018640 	.word	0x08018640
 800a330:	0801852c 	.word	0x0801852c

0800a334 <err_tcp>:
 *
 * @see tcp.h (struct tcp_pcb.err) for parameters
 */
static void
err_tcp(void *arg, err_t err)
{
 800a334:	b580      	push	{r7, lr}
 800a336:	b088      	sub	sp, #32
 800a338:	af00      	add	r7, sp, #0
 800a33a:	6078      	str	r0, [r7, #4]
 800a33c:	460b      	mov	r3, r1
 800a33e:	70fb      	strb	r3, [r7, #3]
  struct netconn *conn;
  enum netconn_state old_state;
  void *mbox_msg;
  SYS_ARCH_DECL_PROTECT(lev);

  conn = (struct netconn *)arg;
 800a340:	687b      	ldr	r3, [r7, #4]
 800a342:	61fb      	str	r3, [r7, #28]
  LWIP_ASSERT("conn != NULL", (conn != NULL));
 800a344:	69fb      	ldr	r3, [r7, #28]
 800a346:	2b00      	cmp	r3, #0
 800a348:	d106      	bne.n	800a358 <err_tcp+0x24>
 800a34a:	4b5f      	ldr	r3, [pc, #380]	; (800a4c8 <err_tcp+0x194>)
 800a34c:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 800a350:	495e      	ldr	r1, [pc, #376]	; (800a4cc <err_tcp+0x198>)
 800a352:	485f      	ldr	r0, [pc, #380]	; (800a4d0 <err_tcp+0x19c>)
 800a354:	f00c fd4c 	bl	8016df0 <iprintf>

  SYS_ARCH_PROTECT(lev);
 800a358:	f00c fc3e 	bl	8016bd8 <sys_arch_protect>
 800a35c:	61b8      	str	r0, [r7, #24]

  /* when err is called, the pcb is deallocated, so delete the reference */
  conn->pcb.tcp = NULL;
 800a35e:	69fb      	ldr	r3, [r7, #28]
 800a360:	2200      	movs	r2, #0
 800a362:	605a      	str	r2, [r3, #4]
  /* store pending error */
  conn->pending_err = err;
 800a364:	69fb      	ldr	r3, [r7, #28]
 800a366:	78fa      	ldrb	r2, [r7, #3]
 800a368:	721a      	strb	r2, [r3, #8]
  /* prevent application threads from blocking on 'recvmbox'/'acceptmbox' */
  conn->flags |= NETCONN_FLAG_MBOXCLOSED;
 800a36a:	69fb      	ldr	r3, [r7, #28]
 800a36c:	7f1b      	ldrb	r3, [r3, #28]
 800a36e:	f043 0301 	orr.w	r3, r3, #1
 800a372:	b2da      	uxtb	r2, r3
 800a374:	69fb      	ldr	r3, [r7, #28]
 800a376:	771a      	strb	r2, [r3, #28]

  /* reset conn->state now before waking up other threads */
  old_state = conn->state;
 800a378:	69fb      	ldr	r3, [r7, #28]
 800a37a:	785b      	ldrb	r3, [r3, #1]
 800a37c:	75fb      	strb	r3, [r7, #23]
  conn->state = NETCONN_NONE;
 800a37e:	69fb      	ldr	r3, [r7, #28]
 800a380:	2200      	movs	r2, #0
 800a382:	705a      	strb	r2, [r3, #1]

  SYS_ARCH_UNPROTECT(lev);
 800a384:	69b8      	ldr	r0, [r7, #24]
 800a386:	f00c fc35 	bl	8016bf4 <sys_arch_unprotect>

  /* Notify the user layer about a connection error. Used to signal select. */
  API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800a38a:	69fb      	ldr	r3, [r7, #28]
 800a38c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a38e:	2b00      	cmp	r3, #0
 800a390:	d005      	beq.n	800a39e <err_tcp+0x6a>
 800a392:	69fb      	ldr	r3, [r7, #28]
 800a394:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a396:	2200      	movs	r2, #0
 800a398:	2104      	movs	r1, #4
 800a39a:	69f8      	ldr	r0, [r7, #28]
 800a39c:	4798      	blx	r3
  /* Try to release selects pending on 'read' or 'write', too.
     They will get an error if they actually try to read or write. */
  API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800a39e:	69fb      	ldr	r3, [r7, #28]
 800a3a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3a2:	2b00      	cmp	r3, #0
 800a3a4:	d005      	beq.n	800a3b2 <err_tcp+0x7e>
 800a3a6:	69fb      	ldr	r3, [r7, #28]
 800a3a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3aa:	2200      	movs	r2, #0
 800a3ac:	2100      	movs	r1, #0
 800a3ae:	69f8      	ldr	r0, [r7, #28]
 800a3b0:	4798      	blx	r3
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800a3b2:	69fb      	ldr	r3, [r7, #28]
 800a3b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3b6:	2b00      	cmp	r3, #0
 800a3b8:	d005      	beq.n	800a3c6 <err_tcp+0x92>
 800a3ba:	69fb      	ldr	r3, [r7, #28]
 800a3bc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800a3be:	2200      	movs	r2, #0
 800a3c0:	2102      	movs	r1, #2
 800a3c2:	69f8      	ldr	r0, [r7, #28]
 800a3c4:	4798      	blx	r3

  mbox_msg = lwip_netconn_err_to_msg(err);
 800a3c6:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800a3ca:	4618      	mov	r0, r3
 800a3cc:	f7ff fd86 	bl	8009edc <lwip_netconn_err_to_msg>
 800a3d0:	6138      	str	r0, [r7, #16]
  /* pass error message to recvmbox to wake up pending recv */
  if (NETCONN_MBOX_VALID(conn, &conn->recvmbox)) {
 800a3d2:	69fb      	ldr	r3, [r7, #28]
 800a3d4:	3310      	adds	r3, #16
 800a3d6:	4618      	mov	r0, r3
 800a3d8:	f00c faf4 	bl	80169c4 <sys_mbox_valid>
 800a3dc:	4603      	mov	r3, r0
 800a3de:	2b00      	cmp	r3, #0
 800a3e0:	d005      	beq.n	800a3ee <err_tcp+0xba>
    /* use trypost to prevent deadlock */
    sys_mbox_trypost(&conn->recvmbox, mbox_msg);
 800a3e2:	69fb      	ldr	r3, [r7, #28]
 800a3e4:	3310      	adds	r3, #16
 800a3e6:	6939      	ldr	r1, [r7, #16]
 800a3e8:	4618      	mov	r0, r3
 800a3ea:	f00c fa89 	bl	8016900 <sys_mbox_trypost>
  }
  /* pass error message to acceptmbox to wake up pending accept */
  if (NETCONN_MBOX_VALID(conn, &conn->acceptmbox)) {
 800a3ee:	69fb      	ldr	r3, [r7, #28]
 800a3f0:	3314      	adds	r3, #20
 800a3f2:	4618      	mov	r0, r3
 800a3f4:	f00c fae6 	bl	80169c4 <sys_mbox_valid>
 800a3f8:	4603      	mov	r3, r0
 800a3fa:	2b00      	cmp	r3, #0
 800a3fc:	d005      	beq.n	800a40a <err_tcp+0xd6>
    /* use trypost to preven deadlock */
    sys_mbox_trypost(&conn->acceptmbox, mbox_msg);
 800a3fe:	69fb      	ldr	r3, [r7, #28]
 800a400:	3314      	adds	r3, #20
 800a402:	6939      	ldr	r1, [r7, #16]
 800a404:	4618      	mov	r0, r3
 800a406:	f00c fa7b 	bl	8016900 <sys_mbox_trypost>
  }

  if ((old_state == NETCONN_WRITE) || (old_state == NETCONN_CLOSE) ||
 800a40a:	7dfb      	ldrb	r3, [r7, #23]
 800a40c:	2b01      	cmp	r3, #1
 800a40e:	d005      	beq.n	800a41c <err_tcp+0xe8>
 800a410:	7dfb      	ldrb	r3, [r7, #23]
 800a412:	2b04      	cmp	r3, #4
 800a414:	d002      	beq.n	800a41c <err_tcp+0xe8>
 800a416:	7dfb      	ldrb	r3, [r7, #23]
 800a418:	2b03      	cmp	r3, #3
 800a41a:	d143      	bne.n	800a4a4 <err_tcp+0x170>
      (old_state == NETCONN_CONNECT)) {
    /* calling lwip_netconn_do_writemore/lwip_netconn_do_close_internal is not necessary
       since the pcb has already been deleted! */
    int was_nonblocking_connect = IN_NONBLOCKING_CONNECT(conn);
 800a41c:	69fb      	ldr	r3, [r7, #28]
 800a41e:	7f1b      	ldrb	r3, [r3, #28]
 800a420:	f003 0304 	and.w	r3, r3, #4
 800a424:	2b00      	cmp	r3, #0
 800a426:	bf14      	ite	ne
 800a428:	2301      	movne	r3, #1
 800a42a:	2300      	moveq	r3, #0
 800a42c:	b2db      	uxtb	r3, r3
 800a42e:	60fb      	str	r3, [r7, #12]
    SET_NONBLOCKING_CONNECT(conn, 0);
 800a430:	69fb      	ldr	r3, [r7, #28]
 800a432:	7f1b      	ldrb	r3, [r3, #28]
 800a434:	f023 0304 	bic.w	r3, r3, #4
 800a438:	b2da      	uxtb	r2, r3
 800a43a:	69fb      	ldr	r3, [r7, #28]
 800a43c:	771a      	strb	r2, [r3, #28]

    if (!was_nonblocking_connect) {
 800a43e:	68fb      	ldr	r3, [r7, #12]
 800a440:	2b00      	cmp	r3, #0
 800a442:	d13b      	bne.n	800a4bc <err_tcp+0x188>
      sys_sem_t *op_completed_sem;
      /* set error return code */
      LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a444:	69fb      	ldr	r3, [r7, #28]
 800a446:	6a1b      	ldr	r3, [r3, #32]
 800a448:	2b00      	cmp	r3, #0
 800a44a:	d106      	bne.n	800a45a <err_tcp+0x126>
 800a44c:	4b1e      	ldr	r3, [pc, #120]	; (800a4c8 <err_tcp+0x194>)
 800a44e:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800a452:	4920      	ldr	r1, [pc, #128]	; (800a4d4 <err_tcp+0x1a0>)
 800a454:	481e      	ldr	r0, [pc, #120]	; (800a4d0 <err_tcp+0x19c>)
 800a456:	f00c fccb 	bl	8016df0 <iprintf>
      if (old_state == NETCONN_CLOSE) {
 800a45a:	7dfb      	ldrb	r3, [r7, #23]
 800a45c:	2b04      	cmp	r3, #4
 800a45e:	d104      	bne.n	800a46a <err_tcp+0x136>
        /* let close succeed: the connection is closed after all... */
        conn->current_msg->err = ERR_OK;
 800a460:	69fb      	ldr	r3, [r7, #28]
 800a462:	6a1b      	ldr	r3, [r3, #32]
 800a464:	2200      	movs	r2, #0
 800a466:	711a      	strb	r2, [r3, #4]
 800a468:	e003      	b.n	800a472 <err_tcp+0x13e>
      } else {
        /* Write and connect fail */
        conn->current_msg->err = err;
 800a46a:	69fb      	ldr	r3, [r7, #28]
 800a46c:	6a1b      	ldr	r3, [r3, #32]
 800a46e:	78fa      	ldrb	r2, [r7, #3]
 800a470:	711a      	strb	r2, [r3, #4]
      }
      op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800a472:	69fb      	ldr	r3, [r7, #28]
 800a474:	6a1b      	ldr	r3, [r3, #32]
 800a476:	681b      	ldr	r3, [r3, #0]
 800a478:	330c      	adds	r3, #12
 800a47a:	60bb      	str	r3, [r7, #8]
      LWIP_ASSERT("inavlid op_completed_sem", sys_sem_valid(op_completed_sem));
 800a47c:	68b8      	ldr	r0, [r7, #8]
 800a47e:	f00c fb2f 	bl	8016ae0 <sys_sem_valid>
 800a482:	4603      	mov	r3, r0
 800a484:	2b00      	cmp	r3, #0
 800a486:	d106      	bne.n	800a496 <err_tcp+0x162>
 800a488:	4b0f      	ldr	r3, [pc, #60]	; (800a4c8 <err_tcp+0x194>)
 800a48a:	f240 12ef 	movw	r2, #495	; 0x1ef
 800a48e:	4912      	ldr	r1, [pc, #72]	; (800a4d8 <err_tcp+0x1a4>)
 800a490:	480f      	ldr	r0, [pc, #60]	; (800a4d0 <err_tcp+0x19c>)
 800a492:	f00c fcad 	bl	8016df0 <iprintf>
      conn->current_msg = NULL;
 800a496:	69fb      	ldr	r3, [r7, #28]
 800a498:	2200      	movs	r2, #0
 800a49a:	621a      	str	r2, [r3, #32]
      /* wake up the waiting task */
      sys_sem_signal(op_completed_sem);
 800a49c:	68b8      	ldr	r0, [r7, #8]
 800a49e:	f00c fb05 	bl	8016aac <sys_sem_signal>
      (old_state == NETCONN_CONNECT)) {
 800a4a2:	e00b      	b.n	800a4bc <err_tcp+0x188>
    } else {
      /* @todo: test what happens for error on nonblocking connect */
    }
  } else {
    LWIP_ASSERT("conn->current_msg == NULL", conn->current_msg == NULL);
 800a4a4:	69fb      	ldr	r3, [r7, #28]
 800a4a6:	6a1b      	ldr	r3, [r3, #32]
 800a4a8:	2b00      	cmp	r3, #0
 800a4aa:	d008      	beq.n	800a4be <err_tcp+0x18a>
 800a4ac:	4b06      	ldr	r3, [pc, #24]	; (800a4c8 <err_tcp+0x194>)
 800a4ae:	f240 12f7 	movw	r2, #503	; 0x1f7
 800a4b2:	490a      	ldr	r1, [pc, #40]	; (800a4dc <err_tcp+0x1a8>)
 800a4b4:	4806      	ldr	r0, [pc, #24]	; (800a4d0 <err_tcp+0x19c>)
 800a4b6:	f00c fc9b 	bl	8016df0 <iprintf>
  }
}
 800a4ba:	e000      	b.n	800a4be <err_tcp+0x18a>
      (old_state == NETCONN_CONNECT)) {
 800a4bc:	bf00      	nop
}
 800a4be:	bf00      	nop
 800a4c0:	3720      	adds	r7, #32
 800a4c2:	46bd      	mov	sp, r7
 800a4c4:	bd80      	pop	{r7, pc}
 800a4c6:	bf00      	nop
 800a4c8:	080184e8 	.word	0x080184e8
 800a4cc:	08018640 	.word	0x08018640
 800a4d0:	0801852c 	.word	0x0801852c
 800a4d4:	08018650 	.word	0x08018650
 800a4d8:	0801866c 	.word	0x0801866c
 800a4dc:	08018688 	.word	0x08018688

0800a4e0 <setup_tcp>:
 *
 * @param conn the TCP netconn to setup
 */
static void
setup_tcp(struct netconn *conn)
{
 800a4e0:	b580      	push	{r7, lr}
 800a4e2:	b084      	sub	sp, #16
 800a4e4:	af00      	add	r7, sp, #0
 800a4e6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *pcb;

  pcb = conn->pcb.tcp;
 800a4e8:	687b      	ldr	r3, [r7, #4]
 800a4ea:	685b      	ldr	r3, [r3, #4]
 800a4ec:	60fb      	str	r3, [r7, #12]
  tcp_arg(pcb, conn);
 800a4ee:	6879      	ldr	r1, [r7, #4]
 800a4f0:	68f8      	ldr	r0, [r7, #12]
 800a4f2:	f004 fd89 	bl	800f008 <tcp_arg>
  tcp_recv(pcb, recv_tcp);
 800a4f6:	490a      	ldr	r1, [pc, #40]	; (800a520 <setup_tcp+0x40>)
 800a4f8:	68f8      	ldr	r0, [r7, #12]
 800a4fa:	f004 fd97 	bl	800f02c <tcp_recv>
  tcp_sent(pcb, sent_tcp);
 800a4fe:	4909      	ldr	r1, [pc, #36]	; (800a524 <setup_tcp+0x44>)
 800a500:	68f8      	ldr	r0, [r7, #12]
 800a502:	f004 fdb5 	bl	800f070 <tcp_sent>
  tcp_poll(pcb, poll_tcp, NETCONN_TCP_POLL_INTERVAL);
 800a506:	2202      	movs	r2, #2
 800a508:	4907      	ldr	r1, [pc, #28]	; (800a528 <setup_tcp+0x48>)
 800a50a:	68f8      	ldr	r0, [r7, #12]
 800a50c:	f004 fe0c 	bl	800f128 <tcp_poll>
  tcp_err(pcb, err_tcp);
 800a510:	4906      	ldr	r1, [pc, #24]	; (800a52c <setup_tcp+0x4c>)
 800a512:	68f8      	ldr	r0, [r7, #12]
 800a514:	f004 fdce 	bl	800f0b4 <tcp_err>
}
 800a518:	bf00      	nop
 800a51a:	3710      	adds	r7, #16
 800a51c:	46bd      	mov	sp, r7
 800a51e:	bd80      	pop	{r7, pc}
 800a520:	0800a0b9 	.word	0x0800a0b9
 800a524:	0800a28d 	.word	0x0800a28d
 800a528:	0800a1c5 	.word	0x0800a1c5
 800a52c:	0800a335 	.word	0x0800a335

0800a530 <pcb_new>:
 *
 * @param msg the api_msg describing the connection type
 */
static void
pcb_new(struct api_msg *msg)
{
 800a530:	b590      	push	{r4, r7, lr}
 800a532:	b085      	sub	sp, #20
 800a534:	af00      	add	r7, sp, #0
 800a536:	6078      	str	r0, [r7, #4]
  enum lwip_ip_addr_type iptype = IPADDR_TYPE_V4;
 800a538:	2300      	movs	r3, #0
 800a53a:	73fb      	strb	r3, [r7, #15]

  LWIP_ASSERT("pcb_new: pcb already allocated", msg->conn->pcb.tcp == NULL);
 800a53c:	687b      	ldr	r3, [r7, #4]
 800a53e:	681b      	ldr	r3, [r3, #0]
 800a540:	685b      	ldr	r3, [r3, #4]
 800a542:	2b00      	cmp	r3, #0
 800a544:	d006      	beq.n	800a554 <pcb_new+0x24>
 800a546:	4b2b      	ldr	r3, [pc, #172]	; (800a5f4 <pcb_new+0xc4>)
 800a548:	f240 2265 	movw	r2, #613	; 0x265
 800a54c:	492a      	ldr	r1, [pc, #168]	; (800a5f8 <pcb_new+0xc8>)
 800a54e:	482b      	ldr	r0, [pc, #172]	; (800a5fc <pcb_new+0xcc>)
 800a550:	f00c fc4e 	bl	8016df0 <iprintf>
    iptype = IPADDR_TYPE_ANY;
  }
#endif

  /* Allocate a PCB for this connection */
  switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800a554:	687b      	ldr	r3, [r7, #4]
 800a556:	681b      	ldr	r3, [r3, #0]
 800a558:	781b      	ldrb	r3, [r3, #0]
 800a55a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a55e:	2b10      	cmp	r3, #16
 800a560:	d022      	beq.n	800a5a8 <pcb_new+0x78>
 800a562:	2b20      	cmp	r3, #32
 800a564:	d133      	bne.n	800a5ce <pcb_new+0x9e>
      }
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      msg->conn->pcb.udp = udp_new_ip_type(iptype);
 800a566:	687b      	ldr	r3, [r7, #4]
 800a568:	681c      	ldr	r4, [r3, #0]
 800a56a:	7bfb      	ldrb	r3, [r7, #15]
 800a56c:	4618      	mov	r0, r3
 800a56e:	f009 fe98 	bl	80142a2 <udp_new_ip_type>
 800a572:	4603      	mov	r3, r0
 800a574:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.udp != NULL) {
 800a576:	687b      	ldr	r3, [r7, #4]
 800a578:	681b      	ldr	r3, [r3, #0]
 800a57a:	685b      	ldr	r3, [r3, #4]
 800a57c:	2b00      	cmp	r3, #0
 800a57e:	d02a      	beq.n	800a5d6 <pcb_new+0xa6>
#if LWIP_UDPLITE
        if (NETCONNTYPE_ISUDPLITE(msg->conn->type)) {
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_UDPLITE);
        }
#endif /* LWIP_UDPLITE */
        if (NETCONNTYPE_ISUDPNOCHKSUM(msg->conn->type)) {
 800a580:	687b      	ldr	r3, [r7, #4]
 800a582:	681b      	ldr	r3, [r3, #0]
 800a584:	781b      	ldrb	r3, [r3, #0]
 800a586:	2b22      	cmp	r3, #34	; 0x22
 800a588:	d104      	bne.n	800a594 <pcb_new+0x64>
          udp_setflags(msg->conn->pcb.udp, UDP_FLAGS_NOCHKSUM);
 800a58a:	687b      	ldr	r3, [r7, #4]
 800a58c:	681b      	ldr	r3, [r3, #0]
 800a58e:	685b      	ldr	r3, [r3, #4]
 800a590:	2201      	movs	r2, #1
 800a592:	741a      	strb	r2, [r3, #16]
        }
        udp_recv(msg->conn->pcb.udp, recv_udp, msg->conn);
 800a594:	687b      	ldr	r3, [r7, #4]
 800a596:	681b      	ldr	r3, [r3, #0]
 800a598:	6858      	ldr	r0, [r3, #4]
 800a59a:	687b      	ldr	r3, [r7, #4]
 800a59c:	681b      	ldr	r3, [r3, #0]
 800a59e:	461a      	mov	r2, r3
 800a5a0:	4917      	ldr	r1, [pc, #92]	; (800a600 <pcb_new+0xd0>)
 800a5a2:	f009 fe05 	bl	80141b0 <udp_recv>
      }
      break;
 800a5a6:	e016      	b.n	800a5d6 <pcb_new+0xa6>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      msg->conn->pcb.tcp = tcp_new_ip_type(iptype);
 800a5a8:	687b      	ldr	r3, [r7, #4]
 800a5aa:	681c      	ldr	r4, [r3, #0]
 800a5ac:	7bfb      	ldrb	r3, [r7, #15]
 800a5ae:	4618      	mov	r0, r3
 800a5b0:	f004 fd1c 	bl	800efec <tcp_new_ip_type>
 800a5b4:	4603      	mov	r3, r0
 800a5b6:	6063      	str	r3, [r4, #4]
      if (msg->conn->pcb.tcp != NULL) {
 800a5b8:	687b      	ldr	r3, [r7, #4]
 800a5ba:	681b      	ldr	r3, [r3, #0]
 800a5bc:	685b      	ldr	r3, [r3, #4]
 800a5be:	2b00      	cmp	r3, #0
 800a5c0:	d00b      	beq.n	800a5da <pcb_new+0xaa>
        setup_tcp(msg->conn);
 800a5c2:	687b      	ldr	r3, [r7, #4]
 800a5c4:	681b      	ldr	r3, [r3, #0]
 800a5c6:	4618      	mov	r0, r3
 800a5c8:	f7ff ff8a 	bl	800a4e0 <setup_tcp>
      }
      break;
 800a5cc:	e005      	b.n	800a5da <pcb_new+0xaa>
#endif /* LWIP_TCP */
    default:
      /* Unsupported netconn type, e.g. protocol disabled */
      msg->err = ERR_VAL;
 800a5ce:	687b      	ldr	r3, [r7, #4]
 800a5d0:	22fa      	movs	r2, #250	; 0xfa
 800a5d2:	711a      	strb	r2, [r3, #4]
      return;
 800a5d4:	e00a      	b.n	800a5ec <pcb_new+0xbc>
      break;
 800a5d6:	bf00      	nop
 800a5d8:	e000      	b.n	800a5dc <pcb_new+0xac>
      break;
 800a5da:	bf00      	nop
  }
  if (msg->conn->pcb.ip == NULL) {
 800a5dc:	687b      	ldr	r3, [r7, #4]
 800a5de:	681b      	ldr	r3, [r3, #0]
 800a5e0:	685b      	ldr	r3, [r3, #4]
 800a5e2:	2b00      	cmp	r3, #0
 800a5e4:	d102      	bne.n	800a5ec <pcb_new+0xbc>
    msg->err = ERR_MEM;
 800a5e6:	687b      	ldr	r3, [r7, #4]
 800a5e8:	22ff      	movs	r2, #255	; 0xff
 800a5ea:	711a      	strb	r2, [r3, #4]
  }
}
 800a5ec:	3714      	adds	r7, #20
 800a5ee:	46bd      	mov	sp, r7
 800a5f0:	bd90      	pop	{r4, r7, pc}
 800a5f2:	bf00      	nop
 800a5f4:	080184e8 	.word	0x080184e8
 800a5f8:	080186cc 	.word	0x080186cc
 800a5fc:	0801852c 	.word	0x0801852c
 800a600:	08009fbd 	.word	0x08009fbd

0800a604 <lwip_netconn_do_newconn>:
 *
 * @param m the api_msg describing the connection type
 */
void
lwip_netconn_do_newconn(void *m)
{
 800a604:	b580      	push	{r7, lr}
 800a606:	b084      	sub	sp, #16
 800a608:	af00      	add	r7, sp, #0
 800a60a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800a60c:	687b      	ldr	r3, [r7, #4]
 800a60e:	60fb      	str	r3, [r7, #12]

  msg->err = ERR_OK;
 800a610:	68fb      	ldr	r3, [r7, #12]
 800a612:	2200      	movs	r2, #0
 800a614:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp == NULL) {
 800a616:	68fb      	ldr	r3, [r7, #12]
 800a618:	681b      	ldr	r3, [r3, #0]
 800a61a:	685b      	ldr	r3, [r3, #4]
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d102      	bne.n	800a626 <lwip_netconn_do_newconn+0x22>
    pcb_new(msg);
 800a620:	68f8      	ldr	r0, [r7, #12]
 800a622:	f7ff ff85 	bl	800a530 <pcb_new>
  /* Else? This "new" connection already has a PCB allocated. */
  /* Is this an error condition? Should it be deleted? */
  /* We currently just are happy and return. */

  TCPIP_APIMSG_ACK(msg);
}
 800a626:	bf00      	nop
 800a628:	3710      	adds	r7, #16
 800a62a:	46bd      	mov	sp, r7
 800a62c:	bd80      	pop	{r7, pc}
	...

0800a630 <netconn_alloc>:
 * @return a newly allocated struct netconn or
 *         NULL on memory error
 */
struct netconn *
netconn_alloc(enum netconn_type t, netconn_callback callback)
{
 800a630:	b580      	push	{r7, lr}
 800a632:	b086      	sub	sp, #24
 800a634:	af00      	add	r7, sp, #0
 800a636:	4603      	mov	r3, r0
 800a638:	6039      	str	r1, [r7, #0]
 800a63a:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int size;
  u8_t init_flags = 0;
 800a63c:	2300      	movs	r3, #0
 800a63e:	74fb      	strb	r3, [r7, #19]

  conn = (struct netconn *)memp_malloc(MEMP_NETCONN);
 800a640:	2007      	movs	r0, #7
 800a642:	f001 fefb 	bl	800c43c <memp_malloc>
 800a646:	60f8      	str	r0, [r7, #12]
  if (conn == NULL) {
 800a648:	68fb      	ldr	r3, [r7, #12]
 800a64a:	2b00      	cmp	r3, #0
 800a64c:	d101      	bne.n	800a652 <netconn_alloc+0x22>
    return NULL;
 800a64e:	2300      	movs	r3, #0
 800a650:	e052      	b.n	800a6f8 <netconn_alloc+0xc8>
  }

  conn->pending_err = ERR_OK;
 800a652:	68fb      	ldr	r3, [r7, #12]
 800a654:	2200      	movs	r2, #0
 800a656:	721a      	strb	r2, [r3, #8]
  conn->type = t;
 800a658:	68fb      	ldr	r3, [r7, #12]
 800a65a:	79fa      	ldrb	r2, [r7, #7]
 800a65c:	701a      	strb	r2, [r3, #0]
  conn->pcb.tcp = NULL;
 800a65e:	68fb      	ldr	r3, [r7, #12]
 800a660:	2200      	movs	r2, #0
 800a662:	605a      	str	r2, [r3, #4]

  /* If all sizes are the same, every compiler should optimize this switch to nothing */
  switch (NETCONNTYPE_GROUP(t)) {
 800a664:	79fb      	ldrb	r3, [r7, #7]
 800a666:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a66a:	2b10      	cmp	r3, #16
 800a66c:	d004      	beq.n	800a678 <netconn_alloc+0x48>
 800a66e:	2b20      	cmp	r3, #32
 800a670:	d105      	bne.n	800a67e <netconn_alloc+0x4e>
      size = DEFAULT_RAW_RECVMBOX_SIZE;
      break;
#endif /* LWIP_RAW */
#if LWIP_UDP
    case NETCONN_UDP:
      size = DEFAULT_UDP_RECVMBOX_SIZE;
 800a672:	2306      	movs	r3, #6
 800a674:	617b      	str	r3, [r7, #20]
#if LWIP_NETBUF_RECVINFO
      init_flags |= NETCONN_FLAG_PKTINFO;
#endif /* LWIP_NETBUF_RECVINFO */
      break;
 800a676:	e00a      	b.n	800a68e <netconn_alloc+0x5e>
#endif /* LWIP_UDP */
#if LWIP_TCP
    case NETCONN_TCP:
      size = DEFAULT_TCP_RECVMBOX_SIZE;
 800a678:	2306      	movs	r3, #6
 800a67a:	617b      	str	r3, [r7, #20]
      break;
 800a67c:	e007      	b.n	800a68e <netconn_alloc+0x5e>
#endif /* LWIP_TCP */
    default:
      LWIP_ASSERT("netconn_alloc: undefined netconn_type", 0);
 800a67e:	4b20      	ldr	r3, [pc, #128]	; (800a700 <netconn_alloc+0xd0>)
 800a680:	f240 22e5 	movw	r2, #741	; 0x2e5
 800a684:	491f      	ldr	r1, [pc, #124]	; (800a704 <netconn_alloc+0xd4>)
 800a686:	4820      	ldr	r0, [pc, #128]	; (800a708 <netconn_alloc+0xd8>)
 800a688:	f00c fbb2 	bl	8016df0 <iprintf>
      goto free_and_return;
 800a68c:	e02f      	b.n	800a6ee <netconn_alloc+0xbe>
  }

  if (sys_mbox_new(&conn->recvmbox, size) != ERR_OK) {
 800a68e:	68fb      	ldr	r3, [r7, #12]
 800a690:	3310      	adds	r3, #16
 800a692:	6979      	ldr	r1, [r7, #20]
 800a694:	4618      	mov	r0, r3
 800a696:	f00c f907 	bl	80168a8 <sys_mbox_new>
 800a69a:	4603      	mov	r3, r0
 800a69c:	2b00      	cmp	r3, #0
 800a69e:	d125      	bne.n	800a6ec <netconn_alloc+0xbc>
    goto free_and_return;
  }
#if !LWIP_NETCONN_SEM_PER_THREAD
  if (sys_sem_new(&conn->op_completed, 0) != ERR_OK) {
 800a6a0:	68fb      	ldr	r3, [r7, #12]
 800a6a2:	330c      	adds	r3, #12
 800a6a4:	2100      	movs	r1, #0
 800a6a6:	4618      	mov	r0, r3
 800a6a8:	f00c f9aa 	bl	8016a00 <sys_sem_new>
 800a6ac:	4603      	mov	r3, r0
 800a6ae:	2b00      	cmp	r3, #0
 800a6b0:	d005      	beq.n	800a6be <netconn_alloc+0x8e>
    sys_mbox_free(&conn->recvmbox);
 800a6b2:	68fb      	ldr	r3, [r7, #12]
 800a6b4:	3310      	adds	r3, #16
 800a6b6:	4618      	mov	r0, r3
 800a6b8:	f00c f910 	bl	80168dc <sys_mbox_free>
    goto free_and_return;
 800a6bc:	e017      	b.n	800a6ee <netconn_alloc+0xbe>
  }
#endif

#if LWIP_TCP
  sys_mbox_set_invalid(&conn->acceptmbox);
 800a6be:	68fb      	ldr	r3, [r7, #12]
 800a6c0:	3314      	adds	r3, #20
 800a6c2:	4618      	mov	r0, r3
 800a6c4:	f00c f98f 	bl	80169e6 <sys_mbox_set_invalid>
#endif
  conn->state        = NETCONN_NONE;
 800a6c8:	68fb      	ldr	r3, [r7, #12]
 800a6ca:	2200      	movs	r2, #0
 800a6cc:	705a      	strb	r2, [r3, #1]
#if LWIP_SOCKET
  /* initialize socket to -1 since 0 is a valid socket */
  conn->socket       = -1;
 800a6ce:	68fb      	ldr	r3, [r7, #12]
 800a6d0:	f04f 32ff 	mov.w	r2, #4294967295
 800a6d4:	619a      	str	r2, [r3, #24]
#endif /* LWIP_SOCKET */
  conn->callback     = callback;
 800a6d6:	68fb      	ldr	r3, [r7, #12]
 800a6d8:	683a      	ldr	r2, [r7, #0]
 800a6da:	625a      	str	r2, [r3, #36]	; 0x24
#if LWIP_TCP
  conn->current_msg  = NULL;
 800a6dc:	68fb      	ldr	r3, [r7, #12]
 800a6de:	2200      	movs	r2, #0
 800a6e0:	621a      	str	r2, [r3, #32]
  conn->recv_avail   = 0;
#endif /* LWIP_SO_RCVBUF */
#if LWIP_SO_LINGER
  conn->linger = -1;
#endif /* LWIP_SO_LINGER */
  conn->flags = init_flags;
 800a6e2:	68fb      	ldr	r3, [r7, #12]
 800a6e4:	7cfa      	ldrb	r2, [r7, #19]
 800a6e6:	771a      	strb	r2, [r3, #28]
  return conn;
 800a6e8:	68fb      	ldr	r3, [r7, #12]
 800a6ea:	e005      	b.n	800a6f8 <netconn_alloc+0xc8>
    goto free_and_return;
 800a6ec:	bf00      	nop
free_and_return:
  memp_free(MEMP_NETCONN, conn);
 800a6ee:	68f9      	ldr	r1, [r7, #12]
 800a6f0:	2007      	movs	r0, #7
 800a6f2:	f001 ff19 	bl	800c528 <memp_free>
  return NULL;
 800a6f6:	2300      	movs	r3, #0
}
 800a6f8:	4618      	mov	r0, r3
 800a6fa:	3718      	adds	r7, #24
 800a6fc:	46bd      	mov	sp, r7
 800a6fe:	bd80      	pop	{r7, pc}
 800a700:	080184e8 	.word	0x080184e8
 800a704:	080186ec 	.word	0x080186ec
 800a708:	0801852c 	.word	0x0801852c

0800a70c <netconn_free>:
 *
 * @param conn the netconn to free
 */
void
netconn_free(struct netconn *conn)
{
 800a70c:	b580      	push	{r7, lr}
 800a70e:	b082      	sub	sp, #8
 800a710:	af00      	add	r7, sp, #0
 800a712:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("PCB must be deallocated outside this function", conn->pcb.tcp == NULL);
 800a714:	687b      	ldr	r3, [r7, #4]
 800a716:	685b      	ldr	r3, [r3, #4]
 800a718:	2b00      	cmp	r3, #0
 800a71a:	d006      	beq.n	800a72a <netconn_free+0x1e>
 800a71c:	4b1b      	ldr	r3, [pc, #108]	; (800a78c <netconn_free+0x80>)
 800a71e:	f44f 7247 	mov.w	r2, #796	; 0x31c
 800a722:	491b      	ldr	r1, [pc, #108]	; (800a790 <netconn_free+0x84>)
 800a724:	481b      	ldr	r0, [pc, #108]	; (800a794 <netconn_free+0x88>)
 800a726:	f00c fb63 	bl	8016df0 <iprintf>
#if LWIP_NETCONN_FULLDUPLEX
  /* in fullduplex, netconn is drained here */
  netconn_drain(conn);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  LWIP_ASSERT("recvmbox must be deallocated before calling this function",
 800a72a:	687b      	ldr	r3, [r7, #4]
 800a72c:	3310      	adds	r3, #16
 800a72e:	4618      	mov	r0, r3
 800a730:	f00c f948 	bl	80169c4 <sys_mbox_valid>
 800a734:	4603      	mov	r3, r0
 800a736:	2b00      	cmp	r3, #0
 800a738:	d006      	beq.n	800a748 <netconn_free+0x3c>
 800a73a:	4b14      	ldr	r3, [pc, #80]	; (800a78c <netconn_free+0x80>)
 800a73c:	f240 3223 	movw	r2, #803	; 0x323
 800a740:	4915      	ldr	r1, [pc, #84]	; (800a798 <netconn_free+0x8c>)
 800a742:	4814      	ldr	r0, [pc, #80]	; (800a794 <netconn_free+0x88>)
 800a744:	f00c fb54 	bl	8016df0 <iprintf>
              !sys_mbox_valid(&conn->recvmbox));
#if LWIP_TCP
  LWIP_ASSERT("acceptmbox must be deallocated before calling this function",
 800a748:	687b      	ldr	r3, [r7, #4]
 800a74a:	3314      	adds	r3, #20
 800a74c:	4618      	mov	r0, r3
 800a74e:	f00c f939 	bl	80169c4 <sys_mbox_valid>
 800a752:	4603      	mov	r3, r0
 800a754:	2b00      	cmp	r3, #0
 800a756:	d006      	beq.n	800a766 <netconn_free+0x5a>
 800a758:	4b0c      	ldr	r3, [pc, #48]	; (800a78c <netconn_free+0x80>)
 800a75a:	f240 3226 	movw	r2, #806	; 0x326
 800a75e:	490f      	ldr	r1, [pc, #60]	; (800a79c <netconn_free+0x90>)
 800a760:	480c      	ldr	r0, [pc, #48]	; (800a794 <netconn_free+0x88>)
 800a762:	f00c fb45 	bl	8016df0 <iprintf>
              !sys_mbox_valid(&conn->acceptmbox));
#endif /* LWIP_TCP */

#if !LWIP_NETCONN_SEM_PER_THREAD
  sys_sem_free(&conn->op_completed);
 800a766:	687b      	ldr	r3, [r7, #4]
 800a768:	330c      	adds	r3, #12
 800a76a:	4618      	mov	r0, r3
 800a76c:	f00c f9ab 	bl	8016ac6 <sys_sem_free>
  sys_sem_set_invalid(&conn->op_completed);
 800a770:	687b      	ldr	r3, [r7, #4]
 800a772:	330c      	adds	r3, #12
 800a774:	4618      	mov	r0, r3
 800a776:	f00c f9c4 	bl	8016b02 <sys_sem_set_invalid>
#endif

  memp_free(MEMP_NETCONN, conn);
 800a77a:	6879      	ldr	r1, [r7, #4]
 800a77c:	2007      	movs	r0, #7
 800a77e:	f001 fed3 	bl	800c528 <memp_free>
}
 800a782:	bf00      	nop
 800a784:	3708      	adds	r7, #8
 800a786:	46bd      	mov	sp, r7
 800a788:	bd80      	pop	{r7, pc}
 800a78a:	bf00      	nop
 800a78c:	080184e8 	.word	0x080184e8
 800a790:	08018714 	.word	0x08018714
 800a794:	0801852c 	.word	0x0801852c
 800a798:	08018744 	.word	0x08018744
 800a79c:	08018780 	.word	0x08018780

0800a7a0 <netconn_drain>:
 * @bytes_drained bytes drained from recvmbox
 * @accepts_drained pending connections drained from acceptmbox
 */
static void
netconn_drain(struct netconn *conn)
{
 800a7a0:	b580      	push	{r7, lr}
 800a7a2:	b086      	sub	sp, #24
 800a7a4:	af00      	add	r7, sp, #0
 800a7a6:	6078      	str	r0, [r7, #4]
#if LWIP_NETCONN_FULLDUPLEX
  LWIP_ASSERT("netconn marked closed", conn->flags & NETCONN_FLAG_MBOXINVALID);
#endif /* LWIP_NETCONN_FULLDUPLEX */

  /* Delete and drain the recvmbox. */
  if (sys_mbox_valid(&conn->recvmbox)) {
 800a7a8:	687b      	ldr	r3, [r7, #4]
 800a7aa:	3310      	adds	r3, #16
 800a7ac:	4618      	mov	r0, r3
 800a7ae:	f00c f909 	bl	80169c4 <sys_mbox_valid>
 800a7b2:	4603      	mov	r3, r0
 800a7b4:	2b00      	cmp	r3, #0
 800a7b6:	d02f      	beq.n	800a818 <netconn_drain+0x78>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7b8:	e018      	b.n	800a7ec <netconn_drain+0x4c>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
#if LWIP_TCP
        if (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) {
 800a7ba:	687b      	ldr	r3, [r7, #4]
 800a7bc:	781b      	ldrb	r3, [r3, #0]
 800a7be:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a7c2:	2b10      	cmp	r3, #16
 800a7c4:	d10e      	bne.n	800a7e4 <netconn_drain+0x44>
          err_t err;
          if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a7c6:	693b      	ldr	r3, [r7, #16]
 800a7c8:	f107 020f 	add.w	r2, r7, #15
 800a7cc:	4611      	mov	r1, r2
 800a7ce:	4618      	mov	r0, r3
 800a7d0:	f7ff fbba 	bl	8009f48 <lwip_netconn_is_err_msg>
 800a7d4:	4603      	mov	r3, r0
 800a7d6:	2b00      	cmp	r3, #0
 800a7d8:	d108      	bne.n	800a7ec <netconn_drain+0x4c>
            pbuf_free((struct pbuf *)mem);
 800a7da:	693b      	ldr	r3, [r7, #16]
 800a7dc:	4618      	mov	r0, r3
 800a7de:	f002 fd47 	bl	800d270 <pbuf_free>
 800a7e2:	e003      	b.n	800a7ec <netconn_drain+0x4c>
          }
        } else
#endif /* LWIP_TCP */
        {
          netbuf_delete((struct netbuf *)mem);
 800a7e4:	693b      	ldr	r3, [r7, #16]
 800a7e6:	4618      	mov	r0, r3
 800a7e8:	f000 ff48 	bl	800b67c <netbuf_delete>
    while (sys_mbox_tryfetch(&conn->recvmbox, &mem) != SYS_MBOX_EMPTY) {
 800a7ec:	687b      	ldr	r3, [r7, #4]
 800a7ee:	3310      	adds	r3, #16
 800a7f0:	f107 0210 	add.w	r2, r7, #16
 800a7f4:	4611      	mov	r1, r2
 800a7f6:	4618      	mov	r0, r3
 800a7f8:	f00c f8cd 	bl	8016996 <sys_arch_mbox_tryfetch>
 800a7fc:	4603      	mov	r3, r0
 800a7fe:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a802:	d1da      	bne.n	800a7ba <netconn_drain+0x1a>
        }
      }
    }
    sys_mbox_free(&conn->recvmbox);
 800a804:	687b      	ldr	r3, [r7, #4]
 800a806:	3310      	adds	r3, #16
 800a808:	4618      	mov	r0, r3
 800a80a:	f00c f867 	bl	80168dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->recvmbox);
 800a80e:	687b      	ldr	r3, [r7, #4]
 800a810:	3310      	adds	r3, #16
 800a812:	4618      	mov	r0, r3
 800a814:	f00c f8e7 	bl	80169e6 <sys_mbox_set_invalid>
  }

  /* Delete and drain the acceptmbox. */
#if LWIP_TCP
  if (sys_mbox_valid(&conn->acceptmbox)) {
 800a818:	687b      	ldr	r3, [r7, #4]
 800a81a:	3314      	adds	r3, #20
 800a81c:	4618      	mov	r0, r3
 800a81e:	f00c f8d1 	bl	80169c4 <sys_mbox_valid>
 800a822:	4603      	mov	r3, r0
 800a824:	2b00      	cmp	r3, #0
 800a826:	d034      	beq.n	800a892 <netconn_drain+0xf2>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a828:	e01d      	b.n	800a866 <netconn_drain+0xc6>
#if LWIP_NETCONN_FULLDUPLEX
      if (!lwip_netconn_is_deallocated_msg(mem))
#endif /* LWIP_NETCONN_FULLDUPLEX */
      {
        err_t err;
        if (!lwip_netconn_is_err_msg(mem, &err)) {
 800a82a:	693b      	ldr	r3, [r7, #16]
 800a82c:	f107 020e 	add.w	r2, r7, #14
 800a830:	4611      	mov	r1, r2
 800a832:	4618      	mov	r0, r3
 800a834:	f7ff fb88 	bl	8009f48 <lwip_netconn_is_err_msg>
 800a838:	4603      	mov	r3, r0
 800a83a:	2b00      	cmp	r3, #0
 800a83c:	d113      	bne.n	800a866 <netconn_drain+0xc6>
          struct netconn *newconn = (struct netconn *)mem;
 800a83e:	693b      	ldr	r3, [r7, #16]
 800a840:	617b      	str	r3, [r7, #20]
          /* Only tcp pcbs have an acceptmbox, so no need to check conn->type */
          /* pcb might be set to NULL already by err_tcp() */
          /* drain recvmbox */
          netconn_drain(newconn);
 800a842:	6978      	ldr	r0, [r7, #20]
 800a844:	f7ff ffac 	bl	800a7a0 <netconn_drain>
          if (newconn->pcb.tcp != NULL) {
 800a848:	697b      	ldr	r3, [r7, #20]
 800a84a:	685b      	ldr	r3, [r3, #4]
 800a84c:	2b00      	cmp	r3, #0
 800a84e:	d007      	beq.n	800a860 <netconn_drain+0xc0>
            tcp_abort(newconn->pcb.tcp);
 800a850:	697b      	ldr	r3, [r7, #20]
 800a852:	685b      	ldr	r3, [r3, #4]
 800a854:	4618      	mov	r0, r3
 800a856:	f003 fafb 	bl	800de50 <tcp_abort>
            newconn->pcb.tcp = NULL;
 800a85a:	697b      	ldr	r3, [r7, #20]
 800a85c:	2200      	movs	r2, #0
 800a85e:	605a      	str	r2, [r3, #4]
          }
          netconn_free(newconn);
 800a860:	6978      	ldr	r0, [r7, #20]
 800a862:	f7ff ff53 	bl	800a70c <netconn_free>
    while (sys_mbox_tryfetch(&conn->acceptmbox, &mem) != SYS_MBOX_EMPTY) {
 800a866:	687b      	ldr	r3, [r7, #4]
 800a868:	3314      	adds	r3, #20
 800a86a:	f107 0210 	add.w	r2, r7, #16
 800a86e:	4611      	mov	r1, r2
 800a870:	4618      	mov	r0, r3
 800a872:	f00c f890 	bl	8016996 <sys_arch_mbox_tryfetch>
 800a876:	4603      	mov	r3, r0
 800a878:	f1b3 3fff 	cmp.w	r3, #4294967295
 800a87c:	d1d5      	bne.n	800a82a <netconn_drain+0x8a>
        }
      }
    }
    sys_mbox_free(&conn->acceptmbox);
 800a87e:	687b      	ldr	r3, [r7, #4]
 800a880:	3314      	adds	r3, #20
 800a882:	4618      	mov	r0, r3
 800a884:	f00c f82a 	bl	80168dc <sys_mbox_free>
    sys_mbox_set_invalid(&conn->acceptmbox);
 800a888:	687b      	ldr	r3, [r7, #4]
 800a88a:	3314      	adds	r3, #20
 800a88c:	4618      	mov	r0, r3
 800a88e:	f00c f8aa 	bl	80169e6 <sys_mbox_set_invalid>
  }
#endif /* LWIP_TCP */
}
 800a892:	bf00      	nop
 800a894:	3718      	adds	r7, #24
 800a896:	46bd      	mov	sp, r7
 800a898:	bd80      	pop	{r7, pc}
	...

0800a89c <lwip_netconn_do_close_internal>:
 *
 * @param conn the TCP netconn to close
 */
static err_t
lwip_netconn_do_close_internal(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800a89c:	b580      	push	{r7, lr}
 800a89e:	b086      	sub	sp, #24
 800a8a0:	af00      	add	r7, sp, #0
 800a8a2:	6078      	str	r0, [r7, #4]
 800a8a4:	460b      	mov	r3, r1
 800a8a6:	70fb      	strb	r3, [r7, #3]
  err_t err;
  u8_t shut, shut_rx, shut_tx, shut_close;
  u8_t close_finished = 0;
 800a8a8:	2300      	movs	r3, #0
 800a8aa:	757b      	strb	r3, [r7, #21]
  struct tcp_pcb *tpcb;
#if LWIP_SO_LINGER
  u8_t linger_wait_required = 0;
#endif /* LWIP_SO_LINGER */

  LWIP_ASSERT("invalid conn", (conn != NULL));
 800a8ac:	687b      	ldr	r3, [r7, #4]
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d106      	bne.n	800a8c0 <lwip_netconn_do_close_internal+0x24>
 800a8b2:	4b87      	ldr	r3, [pc, #540]	; (800aad0 <lwip_netconn_do_close_internal+0x234>)
 800a8b4:	f240 32a2 	movw	r2, #930	; 0x3a2
 800a8b8:	4986      	ldr	r1, [pc, #536]	; (800aad4 <lwip_netconn_do_close_internal+0x238>)
 800a8ba:	4887      	ldr	r0, [pc, #540]	; (800aad8 <lwip_netconn_do_close_internal+0x23c>)
 800a8bc:	f00c fa98 	bl	8016df0 <iprintf>
  LWIP_ASSERT("this is for tcp netconns only", (NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP));
 800a8c0:	687b      	ldr	r3, [r7, #4]
 800a8c2:	781b      	ldrb	r3, [r3, #0]
 800a8c4:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800a8c8:	2b10      	cmp	r3, #16
 800a8ca:	d006      	beq.n	800a8da <lwip_netconn_do_close_internal+0x3e>
 800a8cc:	4b80      	ldr	r3, [pc, #512]	; (800aad0 <lwip_netconn_do_close_internal+0x234>)
 800a8ce:	f240 32a3 	movw	r2, #931	; 0x3a3
 800a8d2:	4982      	ldr	r1, [pc, #520]	; (800aadc <lwip_netconn_do_close_internal+0x240>)
 800a8d4:	4880      	ldr	r0, [pc, #512]	; (800aad8 <lwip_netconn_do_close_internal+0x23c>)
 800a8d6:	f00c fa8b 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn must be in state NETCONN_CLOSE", (conn->state == NETCONN_CLOSE));
 800a8da:	687b      	ldr	r3, [r7, #4]
 800a8dc:	785b      	ldrb	r3, [r3, #1]
 800a8de:	2b04      	cmp	r3, #4
 800a8e0:	d006      	beq.n	800a8f0 <lwip_netconn_do_close_internal+0x54>
 800a8e2:	4b7b      	ldr	r3, [pc, #492]	; (800aad0 <lwip_netconn_do_close_internal+0x234>)
 800a8e4:	f44f 7269 	mov.w	r2, #932	; 0x3a4
 800a8e8:	497d      	ldr	r1, [pc, #500]	; (800aae0 <lwip_netconn_do_close_internal+0x244>)
 800a8ea:	487b      	ldr	r0, [pc, #492]	; (800aad8 <lwip_netconn_do_close_internal+0x23c>)
 800a8ec:	f00c fa80 	bl	8016df0 <iprintf>
  LWIP_ASSERT("pcb already closed", (conn->pcb.tcp != NULL));
 800a8f0:	687b      	ldr	r3, [r7, #4]
 800a8f2:	685b      	ldr	r3, [r3, #4]
 800a8f4:	2b00      	cmp	r3, #0
 800a8f6:	d106      	bne.n	800a906 <lwip_netconn_do_close_internal+0x6a>
 800a8f8:	4b75      	ldr	r3, [pc, #468]	; (800aad0 <lwip_netconn_do_close_internal+0x234>)
 800a8fa:	f240 32a5 	movw	r2, #933	; 0x3a5
 800a8fe:	4979      	ldr	r1, [pc, #484]	; (800aae4 <lwip_netconn_do_close_internal+0x248>)
 800a900:	4875      	ldr	r0, [pc, #468]	; (800aad8 <lwip_netconn_do_close_internal+0x23c>)
 800a902:	f00c fa75 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800a906:	687b      	ldr	r3, [r7, #4]
 800a908:	6a1b      	ldr	r3, [r3, #32]
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d106      	bne.n	800a91c <lwip_netconn_do_close_internal+0x80>
 800a90e:	4b70      	ldr	r3, [pc, #448]	; (800aad0 <lwip_netconn_do_close_internal+0x234>)
 800a910:	f240 32a6 	movw	r2, #934	; 0x3a6
 800a914:	4974      	ldr	r1, [pc, #464]	; (800aae8 <lwip_netconn_do_close_internal+0x24c>)
 800a916:	4870      	ldr	r0, [pc, #448]	; (800aad8 <lwip_netconn_do_close_internal+0x23c>)
 800a918:	f00c fa6a 	bl	8016df0 <iprintf>

  tpcb = conn->pcb.tcp;
 800a91c:	687b      	ldr	r3, [r7, #4]
 800a91e:	685b      	ldr	r3, [r3, #4]
 800a920:	613b      	str	r3, [r7, #16]
  shut = conn->current_msg->msg.sd.shut;
 800a922:	687b      	ldr	r3, [r7, #4]
 800a924:	6a1b      	ldr	r3, [r3, #32]
 800a926:	7a1b      	ldrb	r3, [r3, #8]
 800a928:	73fb      	strb	r3, [r7, #15]
  shut_rx = shut & NETCONN_SHUT_RD;
 800a92a:	7bfb      	ldrb	r3, [r7, #15]
 800a92c:	f003 0301 	and.w	r3, r3, #1
 800a930:	73bb      	strb	r3, [r7, #14]
  shut_tx = shut & NETCONN_SHUT_WR;
 800a932:	7bfb      	ldrb	r3, [r7, #15]
 800a934:	f003 0302 	and.w	r3, r3, #2
 800a938:	737b      	strb	r3, [r7, #13]
  /* shutting down both ends is the same as closing
     (also if RD or WR side was shut down before already) */
  if (shut == NETCONN_SHUT_RDWR) {
 800a93a:	7bfb      	ldrb	r3, [r7, #15]
 800a93c:	2b03      	cmp	r3, #3
 800a93e:	d102      	bne.n	800a946 <lwip_netconn_do_close_internal+0xaa>
    shut_close = 1;
 800a940:	2301      	movs	r3, #1
 800a942:	75bb      	strb	r3, [r7, #22]
 800a944:	e01f      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_rx &&
 800a946:	7bbb      	ldrb	r3, [r7, #14]
 800a948:	2b00      	cmp	r3, #0
 800a94a:	d00e      	beq.n	800a96a <lwip_netconn_do_close_internal+0xce>
             ((tpcb->state == FIN_WAIT_1) ||
 800a94c:	693b      	ldr	r3, [r7, #16]
 800a94e:	7d1b      	ldrb	r3, [r3, #20]
  } else if (shut_rx &&
 800a950:	2b05      	cmp	r3, #5
 800a952:	d007      	beq.n	800a964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == FIN_WAIT_2) ||
 800a954:	693b      	ldr	r3, [r7, #16]
 800a956:	7d1b      	ldrb	r3, [r3, #20]
             ((tpcb->state == FIN_WAIT_1) ||
 800a958:	2b06      	cmp	r3, #6
 800a95a:	d003      	beq.n	800a964 <lwip_netconn_do_close_internal+0xc8>
              (tpcb->state == CLOSING))) {
 800a95c:	693b      	ldr	r3, [r7, #16]
 800a95e:	7d1b      	ldrb	r3, [r3, #20]
              (tpcb->state == FIN_WAIT_2) ||
 800a960:	2b08      	cmp	r3, #8
 800a962:	d102      	bne.n	800a96a <lwip_netconn_do_close_internal+0xce>
    shut_close = 1;
 800a964:	2301      	movs	r3, #1
 800a966:	75bb      	strb	r3, [r7, #22]
 800a968:	e00d      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else if (shut_tx && ((tpcb->flags & TF_RXCLOSED) != 0)) {
 800a96a:	7b7b      	ldrb	r3, [r7, #13]
 800a96c:	2b00      	cmp	r3, #0
 800a96e:	d008      	beq.n	800a982 <lwip_netconn_do_close_internal+0xe6>
 800a970:	693b      	ldr	r3, [r7, #16]
 800a972:	8b5b      	ldrh	r3, [r3, #26]
 800a974:	f003 0310 	and.w	r3, r3, #16
 800a978:	2b00      	cmp	r3, #0
 800a97a:	d002      	beq.n	800a982 <lwip_netconn_do_close_internal+0xe6>
    shut_close = 1;
 800a97c:	2301      	movs	r3, #1
 800a97e:	75bb      	strb	r3, [r7, #22]
 800a980:	e001      	b.n	800a986 <lwip_netconn_do_close_internal+0xea>
  } else {
    shut_close = 0;
 800a982:	2300      	movs	r3, #0
 800a984:	75bb      	strb	r3, [r7, #22]
  }

  /* Set back some callback pointers */
  if (shut_close) {
 800a986:	7dbb      	ldrb	r3, [r7, #22]
 800a988:	2b00      	cmp	r3, #0
 800a98a:	d003      	beq.n	800a994 <lwip_netconn_do_close_internal+0xf8>
    tcp_arg(tpcb, NULL);
 800a98c:	2100      	movs	r1, #0
 800a98e:	6938      	ldr	r0, [r7, #16]
 800a990:	f004 fb3a 	bl	800f008 <tcp_arg>
  }
  if (tpcb->state == LISTEN) {
 800a994:	693b      	ldr	r3, [r7, #16]
 800a996:	7d1b      	ldrb	r3, [r3, #20]
 800a998:	2b01      	cmp	r3, #1
 800a99a:	d104      	bne.n	800a9a6 <lwip_netconn_do_close_internal+0x10a>
    tcp_accept(tpcb, NULL);
 800a99c:	2100      	movs	r1, #0
 800a99e:	6938      	ldr	r0, [r7, #16]
 800a9a0:	f004 fbaa 	bl	800f0f8 <tcp_accept>
 800a9a4:	e01d      	b.n	800a9e2 <lwip_netconn_do_close_internal+0x146>
  } else {
    /* some callbacks have to be reset if tcp_close is not successful */
    if (shut_rx) {
 800a9a6:	7bbb      	ldrb	r3, [r7, #14]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d007      	beq.n	800a9bc <lwip_netconn_do_close_internal+0x120>
      tcp_recv(tpcb, NULL);
 800a9ac:	2100      	movs	r1, #0
 800a9ae:	6938      	ldr	r0, [r7, #16]
 800a9b0:	f004 fb3c 	bl	800f02c <tcp_recv>
      tcp_accept(tpcb, NULL);
 800a9b4:	2100      	movs	r1, #0
 800a9b6:	6938      	ldr	r0, [r7, #16]
 800a9b8:	f004 fb9e 	bl	800f0f8 <tcp_accept>
    }
    if (shut_tx) {
 800a9bc:	7b7b      	ldrb	r3, [r7, #13]
 800a9be:	2b00      	cmp	r3, #0
 800a9c0:	d003      	beq.n	800a9ca <lwip_netconn_do_close_internal+0x12e>
      tcp_sent(tpcb, NULL);
 800a9c2:	2100      	movs	r1, #0
 800a9c4:	6938      	ldr	r0, [r7, #16]
 800a9c6:	f004 fb53 	bl	800f070 <tcp_sent>
    }
    if (shut_close) {
 800a9ca:	7dbb      	ldrb	r3, [r7, #22]
 800a9cc:	2b00      	cmp	r3, #0
 800a9ce:	d008      	beq.n	800a9e2 <lwip_netconn_do_close_internal+0x146>
      tcp_poll(tpcb, NULL, 0);
 800a9d0:	2200      	movs	r2, #0
 800a9d2:	2100      	movs	r1, #0
 800a9d4:	6938      	ldr	r0, [r7, #16]
 800a9d6:	f004 fba7 	bl	800f128 <tcp_poll>
      tcp_err(tpcb, NULL);
 800a9da:	2100      	movs	r1, #0
 800a9dc:	6938      	ldr	r0, [r7, #16]
 800a9de:	f004 fb69 	bl	800f0b4 <tcp_err>
    }
  }
  /* Try to close the connection */
  if (shut_close) {
 800a9e2:	7dbb      	ldrb	r3, [r7, #22]
 800a9e4:	2b00      	cmp	r3, #0
 800a9e6:	d005      	beq.n	800a9f4 <lwip_netconn_do_close_internal+0x158>
      }
    }
    if ((err == ERR_OK) && (tpcb != NULL))
#endif /* LWIP_SO_LINGER */
    {
      err = tcp_close(tpcb);
 800a9e8:	6938      	ldr	r0, [r7, #16]
 800a9ea:	f003 f8eb 	bl	800dbc4 <tcp_close>
 800a9ee:	4603      	mov	r3, r0
 800a9f0:	75fb      	strb	r3, [r7, #23]
 800a9f2:	e007      	b.n	800aa04 <lwip_netconn_do_close_internal+0x168>
    }
  } else {
    err = tcp_shutdown(tpcb, shut_rx, shut_tx);
 800a9f4:	7bbb      	ldrb	r3, [r7, #14]
 800a9f6:	7b7a      	ldrb	r2, [r7, #13]
 800a9f8:	4619      	mov	r1, r3
 800a9fa:	6938      	ldr	r0, [r7, #16]
 800a9fc:	f003 f90e 	bl	800dc1c <tcp_shutdown>
 800aa00:	4603      	mov	r3, r0
 800aa02:	75fb      	strb	r3, [r7, #23]
  }
  if (err == ERR_OK) {
 800aa04:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa08:	2b00      	cmp	r3, #0
 800aa0a:	d102      	bne.n	800aa12 <lwip_netconn_do_close_internal+0x176>
    close_finished = 1;
 800aa0c:	2301      	movs	r3, #1
 800aa0e:	757b      	strb	r3, [r7, #21]
 800aa10:	e016      	b.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
      close_finished = 0;
      err = ERR_INPROGRESS;
    }
#endif /* LWIP_SO_LINGER */
  } else {
    if (err == ERR_MEM) {
 800aa12:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa16:	f1b3 3fff 	cmp.w	r3, #4294967295
 800aa1a:	d10f      	bne.n	800aa3c <lwip_netconn_do_close_internal+0x1a0>
        close_timeout = conn->linger * 1000U;
      }
#endif
      if ((s32_t)(sys_now() - conn->current_msg->msg.sd.time_started) >= close_timeout) {
#else /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
      if (conn->current_msg->msg.sd.polls_left == 0) {
 800aa1c:	687b      	ldr	r3, [r7, #4]
 800aa1e:	6a1b      	ldr	r3, [r3, #32]
 800aa20:	7a5b      	ldrb	r3, [r3, #9]
 800aa22:	2b00      	cmp	r3, #0
 800aa24:	d10c      	bne.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
#endif /* LWIP_SO_SNDTIMEO || LWIP_SO_LINGER */
        close_finished = 1;
 800aa26:	2301      	movs	r3, #1
 800aa28:	757b      	strb	r3, [r7, #21]
        if (shut_close) {
 800aa2a:	7dbb      	ldrb	r3, [r7, #22]
 800aa2c:	2b00      	cmp	r3, #0
 800aa2e:	d007      	beq.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
          /* in this case, we want to RST the connection */
          tcp_abort(tpcb);
 800aa30:	6938      	ldr	r0, [r7, #16]
 800aa32:	f003 fa0d 	bl	800de50 <tcp_abort>
          err = ERR_OK;
 800aa36:	2300      	movs	r3, #0
 800aa38:	75fb      	strb	r3, [r7, #23]
 800aa3a:	e001      	b.n	800aa40 <lwip_netconn_do_close_internal+0x1a4>
        }
      }
    } else {
      /* Closing failed for a non-memory error: give up */
      close_finished = 1;
 800aa3c:	2301      	movs	r3, #1
 800aa3e:	757b      	strb	r3, [r7, #21]
    }
  }
  if (close_finished) {
 800aa40:	7d7b      	ldrb	r3, [r7, #21]
 800aa42:	2b00      	cmp	r3, #0
 800aa44:	d052      	beq.n	800aaec <lwip_netconn_do_close_internal+0x250>
    /* Closing done (succeeded, non-memory error, nonblocking error or timeout) */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800aa46:	687b      	ldr	r3, [r7, #4]
 800aa48:	6a1b      	ldr	r3, [r3, #32]
 800aa4a:	681b      	ldr	r3, [r3, #0]
 800aa4c:	330c      	adds	r3, #12
 800aa4e:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800aa50:	687b      	ldr	r3, [r7, #4]
 800aa52:	6a1b      	ldr	r3, [r3, #32]
 800aa54:	7dfa      	ldrb	r2, [r7, #23]
 800aa56:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800aa58:	687b      	ldr	r3, [r7, #4]
 800aa5a:	2200      	movs	r2, #0
 800aa5c:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800aa5e:	687b      	ldr	r3, [r7, #4]
 800aa60:	2200      	movs	r2, #0
 800aa62:	705a      	strb	r2, [r3, #1]
    if (err == ERR_OK) {
 800aa64:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800aa68:	2b00      	cmp	r3, #0
 800aa6a:	d129      	bne.n	800aac0 <lwip_netconn_do_close_internal+0x224>
      if (shut_close) {
 800aa6c:	7dbb      	ldrb	r3, [r7, #22]
 800aa6e:	2b00      	cmp	r3, #0
 800aa70:	d00c      	beq.n	800aa8c <lwip_netconn_do_close_internal+0x1f0>
        /* Set back some callback pointers as conn is going away */
        conn->pcb.tcp = NULL;
 800aa72:	687b      	ldr	r3, [r7, #4]
 800aa74:	2200      	movs	r2, #0
 800aa76:	605a      	str	r2, [r3, #4]
        /* Trigger select() in socket layer. Make sure everybody notices activity
         on the connection, error first! */
        API_EVENT(conn, NETCONN_EVT_ERROR, 0);
 800aa78:	687b      	ldr	r3, [r7, #4]
 800aa7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa7c:	2b00      	cmp	r3, #0
 800aa7e:	d005      	beq.n	800aa8c <lwip_netconn_do_close_internal+0x1f0>
 800aa80:	687b      	ldr	r3, [r7, #4]
 800aa82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa84:	2200      	movs	r2, #0
 800aa86:	2104      	movs	r1, #4
 800aa88:	6878      	ldr	r0, [r7, #4]
 800aa8a:	4798      	blx	r3
      }
      if (shut_rx) {
 800aa8c:	7bbb      	ldrb	r3, [r7, #14]
 800aa8e:	2b00      	cmp	r3, #0
 800aa90:	d009      	beq.n	800aaa6 <lwip_netconn_do_close_internal+0x20a>
        API_EVENT(conn, NETCONN_EVT_RCVPLUS, 0);
 800aa92:	687b      	ldr	r3, [r7, #4]
 800aa94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa96:	2b00      	cmp	r3, #0
 800aa98:	d005      	beq.n	800aaa6 <lwip_netconn_do_close_internal+0x20a>
 800aa9a:	687b      	ldr	r3, [r7, #4]
 800aa9c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aa9e:	2200      	movs	r2, #0
 800aaa0:	2100      	movs	r1, #0
 800aaa2:	6878      	ldr	r0, [r7, #4]
 800aaa4:	4798      	blx	r3
      }
      if (shut_tx) {
 800aaa6:	7b7b      	ldrb	r3, [r7, #13]
 800aaa8:	2b00      	cmp	r3, #0
 800aaaa:	d009      	beq.n	800aac0 <lwip_netconn_do_close_internal+0x224>
        API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800aaac:	687b      	ldr	r3, [r7, #4]
 800aaae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab0:	2b00      	cmp	r3, #0
 800aab2:	d005      	beq.n	800aac0 <lwip_netconn_do_close_internal+0x224>
 800aab4:	687b      	ldr	r3, [r7, #4]
 800aab6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800aab8:	2200      	movs	r2, #0
 800aaba:	2102      	movs	r1, #2
 800aabc:	6878      	ldr	r0, [r7, #4]
 800aabe:	4798      	blx	r3
      }
    }
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800aac0:	78fb      	ldrb	r3, [r7, #3]
 800aac2:	2b00      	cmp	r3, #0
 800aac4:	d002      	beq.n	800aacc <lwip_netconn_do_close_internal+0x230>
#endif
    {
      /* wake up the application task */
      sys_sem_signal(op_completed_sem);
 800aac6:	68b8      	ldr	r0, [r7, #8]
 800aac8:	f00b fff0 	bl	8016aac <sys_sem_signal>
    }
    return ERR_OK;
 800aacc:	2300      	movs	r3, #0
 800aace:	e03c      	b.n	800ab4a <lwip_netconn_do_close_internal+0x2ae>
 800aad0:	080184e8 	.word	0x080184e8
 800aad4:	080187bc 	.word	0x080187bc
 800aad8:	0801852c 	.word	0x0801852c
 800aadc:	080187cc 	.word	0x080187cc
 800aae0:	080187ec 	.word	0x080187ec
 800aae4:	08018810 	.word	0x08018810
 800aae8:	08018650 	.word	0x08018650
  }
  if (!close_finished) {
 800aaec:	7d7b      	ldrb	r3, [r7, #21]
 800aaee:	2b00      	cmp	r3, #0
 800aaf0:	d11e      	bne.n	800ab30 <lwip_netconn_do_close_internal+0x294>
    /* Closing failed and we want to wait: restore some of the callbacks */
    /* Closing of listen pcb will never fail! */
    LWIP_ASSERT("Closing a listen pcb may not fail!", (tpcb->state != LISTEN));
 800aaf2:	693b      	ldr	r3, [r7, #16]
 800aaf4:	7d1b      	ldrb	r3, [r3, #20]
 800aaf6:	2b01      	cmp	r3, #1
 800aaf8:	d106      	bne.n	800ab08 <lwip_netconn_do_close_internal+0x26c>
 800aafa:	4b16      	ldr	r3, [pc, #88]	; (800ab54 <lwip_netconn_do_close_internal+0x2b8>)
 800aafc:	f240 4241 	movw	r2, #1089	; 0x441
 800ab00:	4915      	ldr	r1, [pc, #84]	; (800ab58 <lwip_netconn_do_close_internal+0x2bc>)
 800ab02:	4816      	ldr	r0, [pc, #88]	; (800ab5c <lwip_netconn_do_close_internal+0x2c0>)
 800ab04:	f00c f974 	bl	8016df0 <iprintf>
    if (shut_tx) {
 800ab08:	7b7b      	ldrb	r3, [r7, #13]
 800ab0a:	2b00      	cmp	r3, #0
 800ab0c:	d003      	beq.n	800ab16 <lwip_netconn_do_close_internal+0x27a>
      tcp_sent(tpcb, sent_tcp);
 800ab0e:	4914      	ldr	r1, [pc, #80]	; (800ab60 <lwip_netconn_do_close_internal+0x2c4>)
 800ab10:	6938      	ldr	r0, [r7, #16]
 800ab12:	f004 faad 	bl	800f070 <tcp_sent>
    }
    /* when waiting for close, set up poll interval to 500ms */
    tcp_poll(tpcb, poll_tcp, 1);
 800ab16:	2201      	movs	r2, #1
 800ab18:	4912      	ldr	r1, [pc, #72]	; (800ab64 <lwip_netconn_do_close_internal+0x2c8>)
 800ab1a:	6938      	ldr	r0, [r7, #16]
 800ab1c:	f004 fb04 	bl	800f128 <tcp_poll>
    tcp_err(tpcb, err_tcp);
 800ab20:	4911      	ldr	r1, [pc, #68]	; (800ab68 <lwip_netconn_do_close_internal+0x2cc>)
 800ab22:	6938      	ldr	r0, [r7, #16]
 800ab24:	f004 fac6 	bl	800f0b4 <tcp_err>
    tcp_arg(tpcb, conn);
 800ab28:	6879      	ldr	r1, [r7, #4]
 800ab2a:	6938      	ldr	r0, [r7, #16]
 800ab2c:	f004 fa6c 	bl	800f008 <tcp_arg>
    /* don't restore recv callback: we don't want to receive any more data */
  }
  /* If closing didn't succeed, we get called again either
     from poll_tcp or from sent_tcp */
  LWIP_ASSERT("err != ERR_OK", err != ERR_OK);
 800ab30:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800ab34:	2b00      	cmp	r3, #0
 800ab36:	d106      	bne.n	800ab46 <lwip_netconn_do_close_internal+0x2aa>
 800ab38:	4b06      	ldr	r3, [pc, #24]	; (800ab54 <lwip_netconn_do_close_internal+0x2b8>)
 800ab3a:	f240 424d 	movw	r2, #1101	; 0x44d
 800ab3e:	490b      	ldr	r1, [pc, #44]	; (800ab6c <lwip_netconn_do_close_internal+0x2d0>)
 800ab40:	4806      	ldr	r0, [pc, #24]	; (800ab5c <lwip_netconn_do_close_internal+0x2c0>)
 800ab42:	f00c f955 	bl	8016df0 <iprintf>
  return err;
 800ab46:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 800ab4a:	4618      	mov	r0, r3
 800ab4c:	3718      	adds	r7, #24
 800ab4e:	46bd      	mov	sp, r7
 800ab50:	bd80      	pop	{r7, pc}
 800ab52:	bf00      	nop
 800ab54:	080184e8 	.word	0x080184e8
 800ab58:	08018824 	.word	0x08018824
 800ab5c:	0801852c 	.word	0x0801852c
 800ab60:	0800a28d 	.word	0x0800a28d
 800ab64:	0800a1c5 	.word	0x0800a1c5
 800ab68:	0800a335 	.word	0x0800a335
 800ab6c:	08018848 	.word	0x08018848

0800ab70 <lwip_netconn_do_delconn>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_delconn(void *m)
{
 800ab70:	b580      	push	{r7, lr}
 800ab72:	b084      	sub	sp, #16
 800ab74:	af00      	add	r7, sp, #0
 800ab76:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ab78:	687b      	ldr	r3, [r7, #4]
 800ab7a:	60fb      	str	r3, [r7, #12]

  enum netconn_state state = msg->conn->state;
 800ab7c:	68fb      	ldr	r3, [r7, #12]
 800ab7e:	681b      	ldr	r3, [r3, #0]
 800ab80:	785b      	ldrb	r3, [r3, #1]
 800ab82:	72fb      	strb	r3, [r7, #11]
  LWIP_ASSERT("netconn state error", /* this only happens for TCP netconns */
 800ab84:	7afb      	ldrb	r3, [r7, #11]
 800ab86:	2b00      	cmp	r3, #0
 800ab88:	d00d      	beq.n	800aba6 <lwip_netconn_do_delconn+0x36>
 800ab8a:	68fb      	ldr	r3, [r7, #12]
 800ab8c:	681b      	ldr	r3, [r3, #0]
 800ab8e:	781b      	ldrb	r3, [r3, #0]
 800ab90:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ab94:	2b10      	cmp	r3, #16
 800ab96:	d006      	beq.n	800aba6 <lwip_netconn_do_delconn+0x36>
 800ab98:	4b60      	ldr	r3, [pc, #384]	; (800ad1c <lwip_netconn_do_delconn+0x1ac>)
 800ab9a:	f240 425e 	movw	r2, #1118	; 0x45e
 800ab9e:	4960      	ldr	r1, [pc, #384]	; (800ad20 <lwip_netconn_do_delconn+0x1b0>)
 800aba0:	4860      	ldr	r0, [pc, #384]	; (800ad24 <lwip_netconn_do_delconn+0x1b4>)
 800aba2:	f00c f925 	bl	8016df0 <iprintf>
      msg->conn->state = NETCONN_NONE;
      sys_sem_signal(op_completed_sem);
    }
  }
#else /* LWIP_NETCONN_FULLDUPLEX */
  if (((state != NETCONN_NONE) &&
 800aba6:	7afb      	ldrb	r3, [r7, #11]
 800aba8:	2b00      	cmp	r3, #0
 800abaa:	d005      	beq.n	800abb8 <lwip_netconn_do_delconn+0x48>
 800abac:	7afb      	ldrb	r3, [r7, #11]
 800abae:	2b02      	cmp	r3, #2
 800abb0:	d002      	beq.n	800abb8 <lwip_netconn_do_delconn+0x48>
       (state != NETCONN_LISTEN) &&
 800abb2:	7afb      	ldrb	r3, [r7, #11]
 800abb4:	2b03      	cmp	r3, #3
 800abb6:	d109      	bne.n	800abcc <lwip_netconn_do_delconn+0x5c>
       (state != NETCONN_CONNECT)) ||
 800abb8:	7afb      	ldrb	r3, [r7, #11]
 800abba:	2b03      	cmp	r3, #3
 800abbc:	d10a      	bne.n	800abd4 <lwip_netconn_do_delconn+0x64>
      ((state == NETCONN_CONNECT) && !IN_NONBLOCKING_CONNECT(msg->conn))) {
 800abbe:	68fb      	ldr	r3, [r7, #12]
 800abc0:	681b      	ldr	r3, [r3, #0]
 800abc2:	7f1b      	ldrb	r3, [r3, #28]
 800abc4:	f003 0304 	and.w	r3, r3, #4
 800abc8:	2b00      	cmp	r3, #0
 800abca:	d103      	bne.n	800abd4 <lwip_netconn_do_delconn+0x64>
    /* This means either a blocking write or blocking connect is running
       (nonblocking write returns and sets state to NONE) */
    msg->err = ERR_INPROGRESS;
 800abcc:	68fb      	ldr	r3, [r7, #12]
 800abce:	22fb      	movs	r2, #251	; 0xfb
 800abd0:	711a      	strb	r2, [r3, #4]
 800abd2:	e097      	b.n	800ad04 <lwip_netconn_do_delconn+0x194>
  } else
#endif /* LWIP_NETCONN_FULLDUPLEX */
  {
    LWIP_ASSERT("blocking connect in progress",
 800abd4:	7afb      	ldrb	r3, [r7, #11]
 800abd6:	2b03      	cmp	r3, #3
 800abd8:	d10d      	bne.n	800abf6 <lwip_netconn_do_delconn+0x86>
 800abda:	68fb      	ldr	r3, [r7, #12]
 800abdc:	681b      	ldr	r3, [r3, #0]
 800abde:	7f1b      	ldrb	r3, [r3, #28]
 800abe0:	f003 0304 	and.w	r3, r3, #4
 800abe4:	2b00      	cmp	r3, #0
 800abe6:	d106      	bne.n	800abf6 <lwip_netconn_do_delconn+0x86>
 800abe8:	4b4c      	ldr	r3, [pc, #304]	; (800ad1c <lwip_netconn_do_delconn+0x1ac>)
 800abea:	f240 427a 	movw	r2, #1146	; 0x47a
 800abee:	494e      	ldr	r1, [pc, #312]	; (800ad28 <lwip_netconn_do_delconn+0x1b8>)
 800abf0:	484c      	ldr	r0, [pc, #304]	; (800ad24 <lwip_netconn_do_delconn+0x1b4>)
 800abf2:	f00c f8fd 	bl	8016df0 <iprintf>
                (state != NETCONN_CONNECT) || IN_NONBLOCKING_CONNECT(msg->conn));
    msg->err = ERR_OK;
 800abf6:	68fb      	ldr	r3, [r7, #12]
 800abf8:	2200      	movs	r2, #0
 800abfa:	711a      	strb	r2, [r3, #4]
#if LWIP_NETCONN_FULLDUPLEX
    /* Mark mboxes invalid */
    netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
    netconn_drain(msg->conn);
 800abfc:	68fb      	ldr	r3, [r7, #12]
 800abfe:	681b      	ldr	r3, [r3, #0]
 800ac00:	4618      	mov	r0, r3
 800ac02:	f7ff fdcd 	bl	800a7a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */

    if (msg->conn->pcb.tcp != NULL) {
 800ac06:	68fb      	ldr	r3, [r7, #12]
 800ac08:	681b      	ldr	r3, [r3, #0]
 800ac0a:	685b      	ldr	r3, [r3, #4]
 800ac0c:	2b00      	cmp	r3, #0
 800ac0e:	d05f      	beq.n	800acd0 <lwip_netconn_do_delconn+0x160>

      switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ac10:	68fb      	ldr	r3, [r7, #12]
 800ac12:	681b      	ldr	r3, [r3, #0]
 800ac14:	781b      	ldrb	r3, [r3, #0]
 800ac16:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ac1a:	2b10      	cmp	r3, #16
 800ac1c:	d00d      	beq.n	800ac3a <lwip_netconn_do_delconn+0xca>
 800ac1e:	2b20      	cmp	r3, #32
 800ac20:	d151      	bne.n	800acc6 <lwip_netconn_do_delconn+0x156>
          raw_remove(msg->conn->pcb.raw);
          break;
#endif /* LWIP_RAW */
#if LWIP_UDP
        case NETCONN_UDP:
          msg->conn->pcb.udp->recv_arg = NULL;
 800ac22:	68fb      	ldr	r3, [r7, #12]
 800ac24:	681b      	ldr	r3, [r3, #0]
 800ac26:	685b      	ldr	r3, [r3, #4]
 800ac28:	2200      	movs	r2, #0
 800ac2a:	61da      	str	r2, [r3, #28]
          udp_remove(msg->conn->pcb.udp);
 800ac2c:	68fb      	ldr	r3, [r7, #12]
 800ac2e:	681b      	ldr	r3, [r3, #0]
 800ac30:	685b      	ldr	r3, [r3, #4]
 800ac32:	4618      	mov	r0, r3
 800ac34:	f009 fadc 	bl	80141f0 <udp_remove>
          break;
 800ac38:	e046      	b.n	800acc8 <lwip_netconn_do_delconn+0x158>
#endif /* LWIP_UDP */
#if LWIP_TCP
        case NETCONN_TCP:
          LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800ac3a:	68fb      	ldr	r3, [r7, #12]
 800ac3c:	681b      	ldr	r3, [r3, #0]
 800ac3e:	6a1b      	ldr	r3, [r3, #32]
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d006      	beq.n	800ac52 <lwip_netconn_do_delconn+0xe2>
 800ac44:	4b35      	ldr	r3, [pc, #212]	; (800ad1c <lwip_netconn_do_delconn+0x1ac>)
 800ac46:	f240 4294 	movw	r2, #1172	; 0x494
 800ac4a:	4938      	ldr	r1, [pc, #224]	; (800ad2c <lwip_netconn_do_delconn+0x1bc>)
 800ac4c:	4835      	ldr	r0, [pc, #212]	; (800ad24 <lwip_netconn_do_delconn+0x1b4>)
 800ac4e:	f00c f8cf 	bl	8016df0 <iprintf>
          msg->conn->state = NETCONN_CLOSE;
 800ac52:	68fb      	ldr	r3, [r7, #12]
 800ac54:	681b      	ldr	r3, [r3, #0]
 800ac56:	2204      	movs	r2, #4
 800ac58:	705a      	strb	r2, [r3, #1]
          msg->msg.sd.shut = NETCONN_SHUT_RDWR;
 800ac5a:	68fb      	ldr	r3, [r7, #12]
 800ac5c:	2203      	movs	r2, #3
 800ac5e:	721a      	strb	r2, [r3, #8]
          msg->conn->current_msg = msg;
 800ac60:	68fb      	ldr	r3, [r7, #12]
 800ac62:	681b      	ldr	r3, [r3, #0]
 800ac64:	68fa      	ldr	r2, [r7, #12]
 800ac66:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
          if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800ac68:	68fb      	ldr	r3, [r7, #12]
 800ac6a:	681b      	ldr	r3, [r3, #0]
 800ac6c:	2100      	movs	r1, #0
 800ac6e:	4618      	mov	r0, r3
 800ac70:	f7ff fe14 	bl	800a89c <lwip_netconn_do_close_internal>
 800ac74:	4603      	mov	r3, r0
 800ac76:	2b00      	cmp	r3, #0
 800ac78:	d04b      	beq.n	800ad12 <lwip_netconn_do_delconn+0x1a2>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800ac7a:	68fb      	ldr	r3, [r7, #12]
 800ac7c:	681b      	ldr	r3, [r3, #0]
 800ac7e:	785b      	ldrb	r3, [r3, #1]
 800ac80:	2b04      	cmp	r3, #4
 800ac82:	d006      	beq.n	800ac92 <lwip_netconn_do_delconn+0x122>
 800ac84:	4b25      	ldr	r3, [pc, #148]	; (800ad1c <lwip_netconn_do_delconn+0x1ac>)
 800ac86:	f240 429a 	movw	r2, #1178	; 0x49a
 800ac8a:	4929      	ldr	r1, [pc, #164]	; (800ad30 <lwip_netconn_do_delconn+0x1c0>)
 800ac8c:	4825      	ldr	r0, [pc, #148]	; (800ad24 <lwip_netconn_do_delconn+0x1b4>)
 800ac8e:	f00c f8af 	bl	8016df0 <iprintf>
            UNLOCK_TCPIP_CORE();
 800ac92:	4828      	ldr	r0, [pc, #160]	; (800ad34 <lwip_netconn_do_delconn+0x1c4>)
 800ac94:	f00b ff73 	bl	8016b7e <sys_mutex_unlock>
            sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800ac98:	68fb      	ldr	r3, [r7, #12]
 800ac9a:	681b      	ldr	r3, [r3, #0]
 800ac9c:	330c      	adds	r3, #12
 800ac9e:	2100      	movs	r1, #0
 800aca0:	4618      	mov	r0, r3
 800aca2:	f00b fed2 	bl	8016a4a <sys_arch_sem_wait>
            LOCK_TCPIP_CORE();
 800aca6:	4823      	ldr	r0, [pc, #140]	; (800ad34 <lwip_netconn_do_delconn+0x1c4>)
 800aca8:	f00b ff5a 	bl	8016b60 <sys_mutex_lock>
            LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800acac:	68fb      	ldr	r3, [r7, #12]
 800acae:	681b      	ldr	r3, [r3, #0]
 800acb0:	785b      	ldrb	r3, [r3, #1]
 800acb2:	2b00      	cmp	r3, #0
 800acb4:	d02d      	beq.n	800ad12 <lwip_netconn_do_delconn+0x1a2>
 800acb6:	4b19      	ldr	r3, [pc, #100]	; (800ad1c <lwip_netconn_do_delconn+0x1ac>)
 800acb8:	f240 429e 	movw	r2, #1182	; 0x49e
 800acbc:	491c      	ldr	r1, [pc, #112]	; (800ad30 <lwip_netconn_do_delconn+0x1c0>)
 800acbe:	4819      	ldr	r0, [pc, #100]	; (800ad24 <lwip_netconn_do_delconn+0x1b4>)
 800acc0:	f00c f896 	bl	8016df0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
          lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
          /* API_EVENT is called inside lwip_netconn_do_close_internal, before releasing
             the application thread, so we can return at this point! */
          return;
 800acc4:	e025      	b.n	800ad12 <lwip_netconn_do_delconn+0x1a2>
#endif /* LWIP_TCP */
        default:
          break;
 800acc6:	bf00      	nop
      }
      msg->conn->pcb.tcp = NULL;
 800acc8:	68fb      	ldr	r3, [r7, #12]
 800acca:	681b      	ldr	r3, [r3, #0]
 800accc:	2200      	movs	r2, #0
 800acce:	605a      	str	r2, [r3, #4]
    }
    /* tcp netconns don't come here! */

    /* @todo: this lets select make the socket readable and writable,
       which is wrong! errfd instead? */
    API_EVENT(msg->conn, NETCONN_EVT_RCVPLUS, 0);
 800acd0:	68fb      	ldr	r3, [r7, #12]
 800acd2:	681b      	ldr	r3, [r3, #0]
 800acd4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acd6:	2b00      	cmp	r3, #0
 800acd8:	d007      	beq.n	800acea <lwip_netconn_do_delconn+0x17a>
 800acda:	68fb      	ldr	r3, [r7, #12]
 800acdc:	681b      	ldr	r3, [r3, #0]
 800acde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ace0:	68fa      	ldr	r2, [r7, #12]
 800ace2:	6810      	ldr	r0, [r2, #0]
 800ace4:	2200      	movs	r2, #0
 800ace6:	2100      	movs	r1, #0
 800ace8:	4798      	blx	r3
    API_EVENT(msg->conn, NETCONN_EVT_SENDPLUS, 0);
 800acea:	68fb      	ldr	r3, [r7, #12]
 800acec:	681b      	ldr	r3, [r3, #0]
 800acee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acf0:	2b00      	cmp	r3, #0
 800acf2:	d007      	beq.n	800ad04 <lwip_netconn_do_delconn+0x194>
 800acf4:	68fb      	ldr	r3, [r7, #12]
 800acf6:	681b      	ldr	r3, [r3, #0]
 800acf8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800acfa:	68fa      	ldr	r2, [r7, #12]
 800acfc:	6810      	ldr	r0, [r2, #0]
 800acfe:	2200      	movs	r2, #0
 800ad00:	2102      	movs	r1, #2
 800ad02:	4798      	blx	r3
  }
  if (sys_sem_valid(LWIP_API_MSG_SEM(msg))) {
 800ad04:	68fb      	ldr	r3, [r7, #12]
 800ad06:	681b      	ldr	r3, [r3, #0]
 800ad08:	330c      	adds	r3, #12
 800ad0a:	4618      	mov	r0, r3
 800ad0c:	f00b fee8 	bl	8016ae0 <sys_sem_valid>
 800ad10:	e000      	b.n	800ad14 <lwip_netconn_do_delconn+0x1a4>
          return;
 800ad12:	bf00      	nop
    TCPIP_APIMSG_ACK(msg);
  }
}
 800ad14:	3710      	adds	r7, #16
 800ad16:	46bd      	mov	sp, r7
 800ad18:	bd80      	pop	{r7, pc}
 800ad1a:	bf00      	nop
 800ad1c:	080184e8 	.word	0x080184e8
 800ad20:	08018858 	.word	0x08018858
 800ad24:	0801852c 	.word	0x0801852c
 800ad28:	0801886c 	.word	0x0801886c
 800ad2c:	0801888c 	.word	0x0801888c
 800ad30:	080188a8 	.word	0x080188a8
 800ad34:	20009edc 	.word	0x20009edc

0800ad38 <lwip_netconn_do_bind>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to bind to
 */
void
lwip_netconn_do_bind(void *m)
{
 800ad38:	b580      	push	{r7, lr}
 800ad3a:	b084      	sub	sp, #16
 800ad3c:	af00      	add	r7, sp, #0
 800ad3e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800ad40:	687b      	ldr	r3, [r7, #4]
 800ad42:	60bb      	str	r3, [r7, #8]
  err_t err;

  if (msg->conn->pcb.tcp != NULL) {
 800ad44:	68bb      	ldr	r3, [r7, #8]
 800ad46:	681b      	ldr	r3, [r3, #0]
 800ad48:	685b      	ldr	r3, [r3, #4]
 800ad4a:	2b00      	cmp	r3, #0
 800ad4c:	d025      	beq.n	800ad9a <lwip_netconn_do_bind+0x62>
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800ad4e:	68bb      	ldr	r3, [r7, #8]
 800ad50:	681b      	ldr	r3, [r3, #0]
 800ad52:	781b      	ldrb	r3, [r3, #0]
 800ad54:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ad58:	2b10      	cmp	r3, #16
 800ad5a:	d00e      	beq.n	800ad7a <lwip_netconn_do_bind+0x42>
 800ad5c:	2b20      	cmp	r3, #32
 800ad5e:	d119      	bne.n	800ad94 <lwip_netconn_do_bind+0x5c>
        err = raw_bind(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_bind(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad60:	68bb      	ldr	r3, [r7, #8]
 800ad62:	681b      	ldr	r3, [r3, #0]
 800ad64:	6858      	ldr	r0, [r3, #4]
 800ad66:	68bb      	ldr	r3, [r7, #8]
 800ad68:	6899      	ldr	r1, [r3, #8]
 800ad6a:	68bb      	ldr	r3, [r7, #8]
 800ad6c:	899b      	ldrh	r3, [r3, #12]
 800ad6e:	461a      	mov	r2, r3
 800ad70:	f009 f928 	bl	8013fc4 <udp_bind>
 800ad74:	4603      	mov	r3, r0
 800ad76:	73fb      	strb	r3, [r7, #15]
        break;
 800ad78:	e011      	b.n	800ad9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        err = tcp_bind(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800ad7a:	68bb      	ldr	r3, [r7, #8]
 800ad7c:	681b      	ldr	r3, [r3, #0]
 800ad7e:	6858      	ldr	r0, [r3, #4]
 800ad80:	68bb      	ldr	r3, [r7, #8]
 800ad82:	6899      	ldr	r1, [r3, #8]
 800ad84:	68bb      	ldr	r3, [r7, #8]
 800ad86:	899b      	ldrh	r3, [r3, #12]
 800ad88:	461a      	mov	r2, r3
 800ad8a:	f003 f86d 	bl	800de68 <tcp_bind>
 800ad8e:	4603      	mov	r3, r0
 800ad90:	73fb      	strb	r3, [r7, #15]
        break;
 800ad92:	e004      	b.n	800ad9e <lwip_netconn_do_bind+0x66>
#endif /* LWIP_TCP */
      default:
        err = ERR_VAL;
 800ad94:	23fa      	movs	r3, #250	; 0xfa
 800ad96:	73fb      	strb	r3, [r7, #15]
        break;
 800ad98:	e001      	b.n	800ad9e <lwip_netconn_do_bind+0x66>
    }
  } else {
    err = ERR_VAL;
 800ad9a:	23fa      	movs	r3, #250	; 0xfa
 800ad9c:	73fb      	strb	r3, [r7, #15]
  }
  msg->err = err;
 800ad9e:	68bb      	ldr	r3, [r7, #8]
 800ada0:	7bfa      	ldrb	r2, [r7, #15]
 800ada2:	711a      	strb	r2, [r3, #4]
  TCPIP_APIMSG_ACK(msg);
}
 800ada4:	bf00      	nop
 800ada6:	3710      	adds	r7, #16
 800ada8:	46bd      	mov	sp, r7
 800adaa:	bd80      	pop	{r7, pc}

0800adac <lwip_netconn_do_connected>:
 *
 * @see tcp.h (struct tcp_pcb.connected) for parameters and return values
 */
static err_t
lwip_netconn_do_connected(void *arg, struct tcp_pcb *pcb, err_t err)
{
 800adac:	b580      	push	{r7, lr}
 800adae:	b088      	sub	sp, #32
 800adb0:	af00      	add	r7, sp, #0
 800adb2:	60f8      	str	r0, [r7, #12]
 800adb4:	60b9      	str	r1, [r7, #8]
 800adb6:	4613      	mov	r3, r2
 800adb8:	71fb      	strb	r3, [r7, #7]
  struct netconn *conn;
  int was_blocking;
  sys_sem_t *op_completed_sem = NULL;
 800adba:	2300      	movs	r3, #0
 800adbc:	61fb      	str	r3, [r7, #28]

  LWIP_UNUSED_ARG(pcb);

  conn = (struct netconn *)arg;
 800adbe:	68fb      	ldr	r3, [r7, #12]
 800adc0:	61bb      	str	r3, [r7, #24]

  if (conn == NULL) {
 800adc2:	69bb      	ldr	r3, [r7, #24]
 800adc4:	2b00      	cmp	r3, #0
 800adc6:	d102      	bne.n	800adce <lwip_netconn_do_connected+0x22>
    return ERR_VAL;
 800adc8:	f06f 0305 	mvn.w	r3, #5
 800adcc:	e070      	b.n	800aeb0 <lwip_netconn_do_connected+0x104>
  }

  LWIP_ASSERT("conn->state == NETCONN_CONNECT", conn->state == NETCONN_CONNECT);
 800adce:	69bb      	ldr	r3, [r7, #24]
 800add0:	785b      	ldrb	r3, [r3, #1]
 800add2:	2b03      	cmp	r3, #3
 800add4:	d006      	beq.n	800ade4 <lwip_netconn_do_connected+0x38>
 800add6:	4b38      	ldr	r3, [pc, #224]	; (800aeb8 <lwip_netconn_do_connected+0x10c>)
 800add8:	f240 5223 	movw	r2, #1315	; 0x523
 800addc:	4937      	ldr	r1, [pc, #220]	; (800aebc <lwip_netconn_do_connected+0x110>)
 800adde:	4838      	ldr	r0, [pc, #224]	; (800aec0 <lwip_netconn_do_connected+0x114>)
 800ade0:	f00c f806 	bl	8016df0 <iprintf>
  LWIP_ASSERT("(conn->current_msg != NULL) || conn->in_non_blocking_connect",
 800ade4:	69bb      	ldr	r3, [r7, #24]
 800ade6:	6a1b      	ldr	r3, [r3, #32]
 800ade8:	2b00      	cmp	r3, #0
 800adea:	d10c      	bne.n	800ae06 <lwip_netconn_do_connected+0x5a>
 800adec:	69bb      	ldr	r3, [r7, #24]
 800adee:	7f1b      	ldrb	r3, [r3, #28]
 800adf0:	f003 0304 	and.w	r3, r3, #4
 800adf4:	2b00      	cmp	r3, #0
 800adf6:	d106      	bne.n	800ae06 <lwip_netconn_do_connected+0x5a>
 800adf8:	4b2f      	ldr	r3, [pc, #188]	; (800aeb8 <lwip_netconn_do_connected+0x10c>)
 800adfa:	f240 5224 	movw	r2, #1316	; 0x524
 800adfe:	4931      	ldr	r1, [pc, #196]	; (800aec4 <lwip_netconn_do_connected+0x118>)
 800ae00:	482f      	ldr	r0, [pc, #188]	; (800aec0 <lwip_netconn_do_connected+0x114>)
 800ae02:	f00b fff5 	bl	8016df0 <iprintf>
              (conn->current_msg != NULL) || IN_NONBLOCKING_CONNECT(conn));

  if (conn->current_msg != NULL) {
 800ae06:	69bb      	ldr	r3, [r7, #24]
 800ae08:	6a1b      	ldr	r3, [r3, #32]
 800ae0a:	2b00      	cmp	r3, #0
 800ae0c:	d008      	beq.n	800ae20 <lwip_netconn_do_connected+0x74>
    conn->current_msg->err = err;
 800ae0e:	69bb      	ldr	r3, [r7, #24]
 800ae10:	6a1b      	ldr	r3, [r3, #32]
 800ae12:	79fa      	ldrb	r2, [r7, #7]
 800ae14:	711a      	strb	r2, [r3, #4]
    op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800ae16:	69bb      	ldr	r3, [r7, #24]
 800ae18:	6a1b      	ldr	r3, [r3, #32]
 800ae1a:	681b      	ldr	r3, [r3, #0]
 800ae1c:	330c      	adds	r3, #12
 800ae1e:	61fb      	str	r3, [r7, #28]
  }
  if ((NETCONNTYPE_GROUP(conn->type) == NETCONN_TCP) && (err == ERR_OK)) {
 800ae20:	69bb      	ldr	r3, [r7, #24]
 800ae22:	781b      	ldrb	r3, [r3, #0]
 800ae24:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800ae28:	2b10      	cmp	r3, #16
 800ae2a:	d106      	bne.n	800ae3a <lwip_netconn_do_connected+0x8e>
 800ae2c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ae30:	2b00      	cmp	r3, #0
 800ae32:	d102      	bne.n	800ae3a <lwip_netconn_do_connected+0x8e>
    setup_tcp(conn);
 800ae34:	69b8      	ldr	r0, [r7, #24]
 800ae36:	f7ff fb53 	bl	800a4e0 <setup_tcp>
  }
  was_blocking = !IN_NONBLOCKING_CONNECT(conn);
 800ae3a:	69bb      	ldr	r3, [r7, #24]
 800ae3c:	7f1b      	ldrb	r3, [r3, #28]
 800ae3e:	f003 0304 	and.w	r3, r3, #4
 800ae42:	2b00      	cmp	r3, #0
 800ae44:	bf0c      	ite	eq
 800ae46:	2301      	moveq	r3, #1
 800ae48:	2300      	movne	r3, #0
 800ae4a:	b2db      	uxtb	r3, r3
 800ae4c:	617b      	str	r3, [r7, #20]
  SET_NONBLOCKING_CONNECT(conn, 0);
 800ae4e:	69bb      	ldr	r3, [r7, #24]
 800ae50:	7f1b      	ldrb	r3, [r3, #28]
 800ae52:	f023 0304 	bic.w	r3, r3, #4
 800ae56:	b2da      	uxtb	r2, r3
 800ae58:	69bb      	ldr	r3, [r7, #24]
 800ae5a:	771a      	strb	r2, [r3, #28]
  LWIP_ASSERT("blocking connect state error",
 800ae5c:	697b      	ldr	r3, [r7, #20]
 800ae5e:	2b00      	cmp	r3, #0
 800ae60:	d002      	beq.n	800ae68 <lwip_netconn_do_connected+0xbc>
 800ae62:	69fb      	ldr	r3, [r7, #28]
 800ae64:	2b00      	cmp	r3, #0
 800ae66:	d10c      	bne.n	800ae82 <lwip_netconn_do_connected+0xd6>
 800ae68:	697b      	ldr	r3, [r7, #20]
 800ae6a:	2b00      	cmp	r3, #0
 800ae6c:	d102      	bne.n	800ae74 <lwip_netconn_do_connected+0xc8>
 800ae6e:	69fb      	ldr	r3, [r7, #28]
 800ae70:	2b00      	cmp	r3, #0
 800ae72:	d006      	beq.n	800ae82 <lwip_netconn_do_connected+0xd6>
 800ae74:	4b10      	ldr	r3, [pc, #64]	; (800aeb8 <lwip_netconn_do_connected+0x10c>)
 800ae76:	f44f 62a6 	mov.w	r2, #1328	; 0x530
 800ae7a:	4913      	ldr	r1, [pc, #76]	; (800aec8 <lwip_netconn_do_connected+0x11c>)
 800ae7c:	4810      	ldr	r0, [pc, #64]	; (800aec0 <lwip_netconn_do_connected+0x114>)
 800ae7e:	f00b ffb7 	bl	8016df0 <iprintf>
              (was_blocking && op_completed_sem != NULL) ||
              (!was_blocking && op_completed_sem == NULL));
  conn->current_msg = NULL;
 800ae82:	69bb      	ldr	r3, [r7, #24]
 800ae84:	2200      	movs	r2, #0
 800ae86:	621a      	str	r2, [r3, #32]
  conn->state = NETCONN_NONE;
 800ae88:	69bb      	ldr	r3, [r7, #24]
 800ae8a:	2200      	movs	r2, #0
 800ae8c:	705a      	strb	r2, [r3, #1]
  API_EVENT(conn, NETCONN_EVT_SENDPLUS, 0);
 800ae8e:	69bb      	ldr	r3, [r7, #24]
 800ae90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae92:	2b00      	cmp	r3, #0
 800ae94:	d005      	beq.n	800aea2 <lwip_netconn_do_connected+0xf6>
 800ae96:	69bb      	ldr	r3, [r7, #24]
 800ae98:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ae9a:	2200      	movs	r2, #0
 800ae9c:	2102      	movs	r1, #2
 800ae9e:	69b8      	ldr	r0, [r7, #24]
 800aea0:	4798      	blx	r3

  if (was_blocking) {
 800aea2:	697b      	ldr	r3, [r7, #20]
 800aea4:	2b00      	cmp	r3, #0
 800aea6:	d002      	beq.n	800aeae <lwip_netconn_do_connected+0x102>
    sys_sem_signal(op_completed_sem);
 800aea8:	69f8      	ldr	r0, [r7, #28]
 800aeaa:	f00b fdff 	bl	8016aac <sys_sem_signal>
  }
  return ERR_OK;
 800aeae:	2300      	movs	r3, #0
}
 800aeb0:	4618      	mov	r0, r3
 800aeb2:	3720      	adds	r7, #32
 800aeb4:	46bd      	mov	sp, r7
 800aeb6:	bd80      	pop	{r7, pc}
 800aeb8:	080184e8 	.word	0x080184e8
 800aebc:	080188b0 	.word	0x080188b0
 800aec0:	0801852c 	.word	0x0801852c
 800aec4:	080188d0 	.word	0x080188d0
 800aec8:	08018910 	.word	0x08018910

0800aecc <lwip_netconn_do_connect>:
 * @param m the api_msg pointing to the connection and containing
 *          the IP address and port to connect to
 */
void
lwip_netconn_do_connect(void *m)
{
 800aecc:	b580      	push	{r7, lr}
 800aece:	b086      	sub	sp, #24
 800aed0:	af00      	add	r7, sp, #0
 800aed2:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800aed4:	687b      	ldr	r3, [r7, #4]
 800aed6:	613b      	str	r3, [r7, #16]
  err_t err;

  if (msg->conn->pcb.tcp == NULL) {
 800aed8:	693b      	ldr	r3, [r7, #16]
 800aeda:	681b      	ldr	r3, [r3, #0]
 800aedc:	685b      	ldr	r3, [r3, #4]
 800aede:	2b00      	cmp	r3, #0
 800aee0:	d102      	bne.n	800aee8 <lwip_netconn_do_connect+0x1c>
    /* This may happen when calling netconn_connect() a second time */
    err = ERR_CLSD;
 800aee2:	23f1      	movs	r3, #241	; 0xf1
 800aee4:	75fb      	strb	r3, [r7, #23]
 800aee6:	e09b      	b.n	800b020 <lwip_netconn_do_connect+0x154>
  } else {
    switch (NETCONNTYPE_GROUP(msg->conn->type)) {
 800aee8:	693b      	ldr	r3, [r7, #16]
 800aeea:	681b      	ldr	r3, [r3, #0]
 800aeec:	781b      	ldrb	r3, [r3, #0]
 800aeee:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800aef2:	2b10      	cmp	r3, #16
 800aef4:	d00f      	beq.n	800af16 <lwip_netconn_do_connect+0x4a>
 800aef6:	2b20      	cmp	r3, #32
 800aef8:	f040 8087 	bne.w	800b00a <lwip_netconn_do_connect+0x13e>
        err = raw_connect(msg->conn->pcb.raw, API_EXPR_REF(msg->msg.bc.ipaddr));
        break;
#endif /* LWIP_RAW */
#if LWIP_UDP
      case NETCONN_UDP:
        err = udp_connect(msg->conn->pcb.udp, API_EXPR_REF(msg->msg.bc.ipaddr), msg->msg.bc.port);
 800aefc:	693b      	ldr	r3, [r7, #16]
 800aefe:	681b      	ldr	r3, [r3, #0]
 800af00:	6858      	ldr	r0, [r3, #4]
 800af02:	693b      	ldr	r3, [r7, #16]
 800af04:	6899      	ldr	r1, [r3, #8]
 800af06:	693b      	ldr	r3, [r7, #16]
 800af08:	899b      	ldrh	r3, [r3, #12]
 800af0a:	461a      	mov	r2, r3
 800af0c:	f009 f8e2 	bl	80140d4 <udp_connect>
 800af10:	4603      	mov	r3, r0
 800af12:	75fb      	strb	r3, [r7, #23]
        break;
 800af14:	e084      	b.n	800b020 <lwip_netconn_do_connect+0x154>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case NETCONN_TCP:
        /* Prevent connect while doing any other action. */
        if (msg->conn->state == NETCONN_CONNECT) {
 800af16:	693b      	ldr	r3, [r7, #16]
 800af18:	681b      	ldr	r3, [r3, #0]
 800af1a:	785b      	ldrb	r3, [r3, #1]
 800af1c:	2b03      	cmp	r3, #3
 800af1e:	d102      	bne.n	800af26 <lwip_netconn_do_connect+0x5a>
          err = ERR_ALREADY;
 800af20:	23f7      	movs	r3, #247	; 0xf7
 800af22:	75fb      	strb	r3, [r7, #23]
#endif /* LWIP_TCPIP_CORE_LOCKING */
              return;
            }
          }
        }
        break;
 800af24:	e07b      	b.n	800b01e <lwip_netconn_do_connect+0x152>
        } else if (msg->conn->state != NETCONN_NONE) {
 800af26:	693b      	ldr	r3, [r7, #16]
 800af28:	681b      	ldr	r3, [r3, #0]
 800af2a:	785b      	ldrb	r3, [r3, #1]
 800af2c:	2b00      	cmp	r3, #0
 800af2e:	d002      	beq.n	800af36 <lwip_netconn_do_connect+0x6a>
          err = ERR_ISCONN;
 800af30:	23f6      	movs	r3, #246	; 0xf6
 800af32:	75fb      	strb	r3, [r7, #23]
        break;
 800af34:	e073      	b.n	800b01e <lwip_netconn_do_connect+0x152>
          setup_tcp(msg->conn);
 800af36:	693b      	ldr	r3, [r7, #16]
 800af38:	681b      	ldr	r3, [r3, #0]
 800af3a:	4618      	mov	r0, r3
 800af3c:	f7ff fad0 	bl	800a4e0 <setup_tcp>
          err = tcp_connect(msg->conn->pcb.tcp, API_EXPR_REF(msg->msg.bc.ipaddr),
 800af40:	693b      	ldr	r3, [r7, #16]
 800af42:	681b      	ldr	r3, [r3, #0]
 800af44:	6858      	ldr	r0, [r3, #4]
 800af46:	693b      	ldr	r3, [r7, #16]
 800af48:	6899      	ldr	r1, [r3, #8]
 800af4a:	693b      	ldr	r3, [r7, #16]
 800af4c:	899a      	ldrh	r2, [r3, #12]
 800af4e:	4b38      	ldr	r3, [pc, #224]	; (800b030 <lwip_netconn_do_connect+0x164>)
 800af50:	f003 f912 	bl	800e178 <tcp_connect>
 800af54:	4603      	mov	r3, r0
 800af56:	75fb      	strb	r3, [r7, #23]
          if (err == ERR_OK) {
 800af58:	f997 3017 	ldrsb.w	r3, [r7, #23]
 800af5c:	2b00      	cmp	r3, #0
 800af5e:	d15e      	bne.n	800b01e <lwip_netconn_do_connect+0x152>
            u8_t non_blocking = netconn_is_nonblocking(msg->conn);
 800af60:	693b      	ldr	r3, [r7, #16]
 800af62:	681b      	ldr	r3, [r3, #0]
 800af64:	7f1b      	ldrb	r3, [r3, #28]
 800af66:	f003 0302 	and.w	r3, r3, #2
 800af6a:	2b00      	cmp	r3, #0
 800af6c:	bf14      	ite	ne
 800af6e:	2301      	movne	r3, #1
 800af70:	2300      	moveq	r3, #0
 800af72:	b2db      	uxtb	r3, r3
 800af74:	73fb      	strb	r3, [r7, #15]
            msg->conn->state = NETCONN_CONNECT;
 800af76:	693b      	ldr	r3, [r7, #16]
 800af78:	681b      	ldr	r3, [r3, #0]
 800af7a:	2203      	movs	r2, #3
 800af7c:	705a      	strb	r2, [r3, #1]
            SET_NONBLOCKING_CONNECT(msg->conn, non_blocking);
 800af7e:	7bfb      	ldrb	r3, [r7, #15]
 800af80:	2b00      	cmp	r3, #0
 800af82:	d009      	beq.n	800af98 <lwip_netconn_do_connect+0xcc>
 800af84:	693b      	ldr	r3, [r7, #16]
 800af86:	681b      	ldr	r3, [r3, #0]
 800af88:	7f1a      	ldrb	r2, [r3, #28]
 800af8a:	693b      	ldr	r3, [r7, #16]
 800af8c:	681b      	ldr	r3, [r3, #0]
 800af8e:	f042 0204 	orr.w	r2, r2, #4
 800af92:	b2d2      	uxtb	r2, r2
 800af94:	771a      	strb	r2, [r3, #28]
 800af96:	e008      	b.n	800afaa <lwip_netconn_do_connect+0xde>
 800af98:	693b      	ldr	r3, [r7, #16]
 800af9a:	681b      	ldr	r3, [r3, #0]
 800af9c:	7f1a      	ldrb	r2, [r3, #28]
 800af9e:	693b      	ldr	r3, [r7, #16]
 800afa0:	681b      	ldr	r3, [r3, #0]
 800afa2:	f022 0204 	bic.w	r2, r2, #4
 800afa6:	b2d2      	uxtb	r2, r2
 800afa8:	771a      	strb	r2, [r3, #28]
            if (non_blocking) {
 800afaa:	7bfb      	ldrb	r3, [r7, #15]
 800afac:	2b00      	cmp	r3, #0
 800afae:	d002      	beq.n	800afb6 <lwip_netconn_do_connect+0xea>
              err = ERR_INPROGRESS;
 800afb0:	23fb      	movs	r3, #251	; 0xfb
 800afb2:	75fb      	strb	r3, [r7, #23]
        break;
 800afb4:	e033      	b.n	800b01e <lwip_netconn_do_connect+0x152>
              msg->conn->current_msg = msg;
 800afb6:	693b      	ldr	r3, [r7, #16]
 800afb8:	681b      	ldr	r3, [r3, #0]
 800afba:	693a      	ldr	r2, [r7, #16]
 800afbc:	621a      	str	r2, [r3, #32]
              LWIP_ASSERT("state!", msg->conn->state == NETCONN_CONNECT);
 800afbe:	693b      	ldr	r3, [r7, #16]
 800afc0:	681b      	ldr	r3, [r3, #0]
 800afc2:	785b      	ldrb	r3, [r3, #1]
 800afc4:	2b03      	cmp	r3, #3
 800afc6:	d006      	beq.n	800afd6 <lwip_netconn_do_connect+0x10a>
 800afc8:	4b1a      	ldr	r3, [pc, #104]	; (800b034 <lwip_netconn_do_connect+0x168>)
 800afca:	f44f 62ae 	mov.w	r2, #1392	; 0x570
 800afce:	491a      	ldr	r1, [pc, #104]	; (800b038 <lwip_netconn_do_connect+0x16c>)
 800afd0:	481a      	ldr	r0, [pc, #104]	; (800b03c <lwip_netconn_do_connect+0x170>)
 800afd2:	f00b ff0d 	bl	8016df0 <iprintf>
              UNLOCK_TCPIP_CORE();
 800afd6:	481a      	ldr	r0, [pc, #104]	; (800b040 <lwip_netconn_do_connect+0x174>)
 800afd8:	f00b fdd1 	bl	8016b7e <sys_mutex_unlock>
              sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800afdc:	693b      	ldr	r3, [r7, #16]
 800afde:	681b      	ldr	r3, [r3, #0]
 800afe0:	330c      	adds	r3, #12
 800afe2:	2100      	movs	r1, #0
 800afe4:	4618      	mov	r0, r3
 800afe6:	f00b fd30 	bl	8016a4a <sys_arch_sem_wait>
              LOCK_TCPIP_CORE();
 800afea:	4815      	ldr	r0, [pc, #84]	; (800b040 <lwip_netconn_do_connect+0x174>)
 800afec:	f00b fdb8 	bl	8016b60 <sys_mutex_lock>
              LWIP_ASSERT("state!", msg->conn->state != NETCONN_CONNECT);
 800aff0:	693b      	ldr	r3, [r7, #16]
 800aff2:	681b      	ldr	r3, [r3, #0]
 800aff4:	785b      	ldrb	r3, [r3, #1]
 800aff6:	2b03      	cmp	r3, #3
 800aff8:	d116      	bne.n	800b028 <lwip_netconn_do_connect+0x15c>
 800affa:	4b0e      	ldr	r3, [pc, #56]	; (800b034 <lwip_netconn_do_connect+0x168>)
 800affc:	f240 5274 	movw	r2, #1396	; 0x574
 800b000:	490d      	ldr	r1, [pc, #52]	; (800b038 <lwip_netconn_do_connect+0x16c>)
 800b002:	480e      	ldr	r0, [pc, #56]	; (800b03c <lwip_netconn_do_connect+0x170>)
 800b004:	f00b fef4 	bl	8016df0 <iprintf>
              return;
 800b008:	e00e      	b.n	800b028 <lwip_netconn_do_connect+0x15c>
#endif /* LWIP_TCP */
      default:
        LWIP_ERROR("Invalid netconn type", 0, do {
 800b00a:	4b0a      	ldr	r3, [pc, #40]	; (800b034 <lwip_netconn_do_connect+0x168>)
 800b00c:	f240 527d 	movw	r2, #1405	; 0x57d
 800b010:	490c      	ldr	r1, [pc, #48]	; (800b044 <lwip_netconn_do_connect+0x178>)
 800b012:	480a      	ldr	r0, [pc, #40]	; (800b03c <lwip_netconn_do_connect+0x170>)
 800b014:	f00b feec 	bl	8016df0 <iprintf>
 800b018:	23fa      	movs	r3, #250	; 0xfa
 800b01a:	75fb      	strb	r3, [r7, #23]
          err = ERR_VAL;
        } while (0));
        break;
 800b01c:	e000      	b.n	800b020 <lwip_netconn_do_connect+0x154>
        break;
 800b01e:	bf00      	nop
    }
  }
  msg->err = err;
 800b020:	693b      	ldr	r3, [r7, #16]
 800b022:	7dfa      	ldrb	r2, [r7, #23]
 800b024:	711a      	strb	r2, [r3, #4]
 800b026:	e000      	b.n	800b02a <lwip_netconn_do_connect+0x15e>
              return;
 800b028:	bf00      	nop
  /* For all other protocols, netconn_connect() calls netconn_apimsg(),
     so use TCPIP_APIMSG_ACK() here. */
  TCPIP_APIMSG_ACK(msg);
}
 800b02a:	3718      	adds	r7, #24
 800b02c:	46bd      	mov	sp, r7
 800b02e:	bd80      	pop	{r7, pc}
 800b030:	0800adad 	.word	0x0800adad
 800b034:	080184e8 	.word	0x080184e8
 800b038:	080188a8 	.word	0x080188a8
 800b03c:	0801852c 	.word	0x0801852c
 800b040:	20009edc 	.word	0x20009edc
 800b044:	08018930 	.word	0x08018930

0800b048 <lwip_netconn_do_recv>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_recv(void *m)
{
 800b048:	b580      	push	{r7, lr}
 800b04a:	b086      	sub	sp, #24
 800b04c:	af00      	add	r7, sp, #0
 800b04e:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b050:	687b      	ldr	r3, [r7, #4]
 800b052:	613b      	str	r3, [r7, #16]

  msg->err = ERR_OK;
 800b054:	693b      	ldr	r3, [r7, #16]
 800b056:	2200      	movs	r2, #0
 800b058:	711a      	strb	r2, [r3, #4]
  if (msg->conn->pcb.tcp != NULL) {
 800b05a:	693b      	ldr	r3, [r7, #16]
 800b05c:	681b      	ldr	r3, [r3, #0]
 800b05e:	685b      	ldr	r3, [r3, #4]
 800b060:	2b00      	cmp	r3, #0
 800b062:	d022      	beq.n	800b0aa <lwip_netconn_do_recv+0x62>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b064:	693b      	ldr	r3, [r7, #16]
 800b066:	681b      	ldr	r3, [r3, #0]
 800b068:	781b      	ldrb	r3, [r3, #0]
 800b06a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b06e:	2b10      	cmp	r3, #16
 800b070:	d11b      	bne.n	800b0aa <lwip_netconn_do_recv+0x62>
      size_t remaining = msg->msg.r.len;
 800b072:	693b      	ldr	r3, [r7, #16]
 800b074:	689b      	ldr	r3, [r3, #8]
 800b076:	617b      	str	r3, [r7, #20]
      do {
        u16_t recved = (u16_t)((remaining > 0xffff) ? 0xffff : remaining);
 800b078:	697b      	ldr	r3, [r7, #20]
 800b07a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b07e:	d202      	bcs.n	800b086 <lwip_netconn_do_recv+0x3e>
 800b080:	697b      	ldr	r3, [r7, #20]
 800b082:	b29b      	uxth	r3, r3
 800b084:	e001      	b.n	800b08a <lwip_netconn_do_recv+0x42>
 800b086:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b08a:	81fb      	strh	r3, [r7, #14]
        tcp_recved(msg->conn->pcb.tcp, recved);
 800b08c:	693b      	ldr	r3, [r7, #16]
 800b08e:	681b      	ldr	r3, [r3, #0]
 800b090:	685b      	ldr	r3, [r3, #4]
 800b092:	89fa      	ldrh	r2, [r7, #14]
 800b094:	4611      	mov	r1, r2
 800b096:	4618      	mov	r0, r3
 800b098:	f002 ffd8 	bl	800e04c <tcp_recved>
        remaining -= recved;
 800b09c:	89fb      	ldrh	r3, [r7, #14]
 800b09e:	697a      	ldr	r2, [r7, #20]
 800b0a0:	1ad3      	subs	r3, r2, r3
 800b0a2:	617b      	str	r3, [r7, #20]
      } while (remaining != 0);
 800b0a4:	697b      	ldr	r3, [r7, #20]
 800b0a6:	2b00      	cmp	r3, #0
 800b0a8:	d1e6      	bne.n	800b078 <lwip_netconn_do_recv+0x30>
    }
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b0aa:	bf00      	nop
 800b0ac:	3718      	adds	r7, #24
 800b0ae:	46bd      	mov	sp, r7
 800b0b0:	bd80      	pop	{r7, pc}
	...

0800b0b4 <lwip_netconn_do_writemore>:
 * @return ERR_OK
 *         ERR_MEM if LWIP_TCPIP_CORE_LOCKING=1 and sending hasn't yet finished
 */
static err_t
lwip_netconn_do_writemore(struct netconn *conn  WRITE_DELAYED_PARAM)
{
 800b0b4:	b580      	push	{r7, lr}
 800b0b6:	b088      	sub	sp, #32
 800b0b8:	af00      	add	r7, sp, #0
 800b0ba:	6078      	str	r0, [r7, #4]
 800b0bc:	460b      	mov	r3, r1
 800b0be:	70fb      	strb	r3, [r7, #3]
  err_t err;
  const void *dataptr;
  u16_t len, available;
  u8_t write_finished = 0;
 800b0c0:	2300      	movs	r3, #0
 800b0c2:	76fb      	strb	r3, [r7, #27]
  size_t diff;
  u8_t dontblock;
  u8_t apiflags;
  u8_t write_more;

  LWIP_ASSERT("conn != NULL", conn != NULL);
 800b0c4:	687b      	ldr	r3, [r7, #4]
 800b0c6:	2b00      	cmp	r3, #0
 800b0c8:	d106      	bne.n	800b0d8 <lwip_netconn_do_writemore+0x24>
 800b0ca:	4b96      	ldr	r3, [pc, #600]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b0cc:	f240 6273 	movw	r2, #1651	; 0x673
 800b0d0:	4995      	ldr	r1, [pc, #596]	; (800b328 <lwip_netconn_do_writemore+0x274>)
 800b0d2:	4896      	ldr	r0, [pc, #600]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b0d4:	f00b fe8c 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn->state == NETCONN_WRITE", (conn->state == NETCONN_WRITE));
 800b0d8:	687b      	ldr	r3, [r7, #4]
 800b0da:	785b      	ldrb	r3, [r3, #1]
 800b0dc:	2b01      	cmp	r3, #1
 800b0de:	d006      	beq.n	800b0ee <lwip_netconn_do_writemore+0x3a>
 800b0e0:	4b90      	ldr	r3, [pc, #576]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b0e2:	f240 6274 	movw	r2, #1652	; 0x674
 800b0e6:	4992      	ldr	r1, [pc, #584]	; (800b330 <lwip_netconn_do_writemore+0x27c>)
 800b0e8:	4890      	ldr	r0, [pc, #576]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b0ea:	f00b fe81 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn->current_msg != NULL", conn->current_msg != NULL);
 800b0ee:	687b      	ldr	r3, [r7, #4]
 800b0f0:	6a1b      	ldr	r3, [r3, #32]
 800b0f2:	2b00      	cmp	r3, #0
 800b0f4:	d106      	bne.n	800b104 <lwip_netconn_do_writemore+0x50>
 800b0f6:	4b8b      	ldr	r3, [pc, #556]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b0f8:	f240 6275 	movw	r2, #1653	; 0x675
 800b0fc:	498d      	ldr	r1, [pc, #564]	; (800b334 <lwip_netconn_do_writemore+0x280>)
 800b0fe:	488b      	ldr	r0, [pc, #556]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b100:	f00b fe76 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn->pcb.tcp != NULL", conn->pcb.tcp != NULL);
 800b104:	687b      	ldr	r3, [r7, #4]
 800b106:	685b      	ldr	r3, [r3, #4]
 800b108:	2b00      	cmp	r3, #0
 800b10a:	d106      	bne.n	800b11a <lwip_netconn_do_writemore+0x66>
 800b10c:	4b85      	ldr	r3, [pc, #532]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b10e:	f240 6276 	movw	r2, #1654	; 0x676
 800b112:	4989      	ldr	r1, [pc, #548]	; (800b338 <lwip_netconn_do_writemore+0x284>)
 800b114:	4885      	ldr	r0, [pc, #532]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b116:	f00b fe6b 	bl	8016df0 <iprintf>
  LWIP_ASSERT("conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len",
 800b11a:	687b      	ldr	r3, [r7, #4]
 800b11c:	6a1b      	ldr	r3, [r3, #32]
 800b11e:	699a      	ldr	r2, [r3, #24]
 800b120:	687b      	ldr	r3, [r7, #4]
 800b122:	6a1b      	ldr	r3, [r3, #32]
 800b124:	695b      	ldr	r3, [r3, #20]
 800b126:	429a      	cmp	r2, r3
 800b128:	d306      	bcc.n	800b138 <lwip_netconn_do_writemore+0x84>
 800b12a:	4b7e      	ldr	r3, [pc, #504]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b12c:	f240 6277 	movw	r2, #1655	; 0x677
 800b130:	4982      	ldr	r1, [pc, #520]	; (800b33c <lwip_netconn_do_writemore+0x288>)
 800b132:	487e      	ldr	r0, [pc, #504]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b134:	f00b fe5c 	bl	8016df0 <iprintf>
              conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len);
  LWIP_ASSERT("conn->current_msg->msg.w.vector_cnt > 0", conn->current_msg->msg.w.vector_cnt > 0);
 800b138:	687b      	ldr	r3, [r7, #4]
 800b13a:	6a1b      	ldr	r3, [r3, #32]
 800b13c:	899b      	ldrh	r3, [r3, #12]
 800b13e:	2b00      	cmp	r3, #0
 800b140:	d106      	bne.n	800b150 <lwip_netconn_do_writemore+0x9c>
 800b142:	4b78      	ldr	r3, [pc, #480]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b144:	f240 6279 	movw	r2, #1657	; 0x679
 800b148:	497d      	ldr	r1, [pc, #500]	; (800b340 <lwip_netconn_do_writemore+0x28c>)
 800b14a:	4878      	ldr	r0, [pc, #480]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b14c:	f00b fe50 	bl	8016df0 <iprintf>

  apiflags = conn->current_msg->msg.w.apiflags;
 800b150:	687b      	ldr	r3, [r7, #4]
 800b152:	6a1b      	ldr	r3, [r3, #32]
 800b154:	7f1b      	ldrb	r3, [r3, #28]
 800b156:	76bb      	strb	r3, [r7, #26]
  dontblock = netconn_is_nonblocking(conn) || (apiflags & NETCONN_DONTBLOCK);
 800b158:	687b      	ldr	r3, [r7, #4]
 800b15a:	7f1b      	ldrb	r3, [r3, #28]
 800b15c:	f003 0302 	and.w	r3, r3, #2
 800b160:	2b00      	cmp	r3, #0
 800b162:	d104      	bne.n	800b16e <lwip_netconn_do_writemore+0xba>
 800b164:	7ebb      	ldrb	r3, [r7, #26]
 800b166:	f003 0304 	and.w	r3, r3, #4
 800b16a:	2b00      	cmp	r3, #0
 800b16c:	d001      	beq.n	800b172 <lwip_netconn_do_writemore+0xbe>
 800b16e:	2301      	movs	r3, #1
 800b170:	e000      	b.n	800b174 <lwip_netconn_do_writemore+0xc0>
 800b172:	2300      	movs	r3, #0
 800b174:	763b      	strb	r3, [r7, #24]
    }
  } else
#endif /* LWIP_SO_SNDTIMEO */
  {
    do {
      dataptr = (const u8_t *)conn->current_msg->msg.w.vector->ptr + conn->current_msg->msg.w.vector_off;
 800b176:	687b      	ldr	r3, [r7, #4]
 800b178:	6a1b      	ldr	r3, [r3, #32]
 800b17a:	689b      	ldr	r3, [r3, #8]
 800b17c:	681a      	ldr	r2, [r3, #0]
 800b17e:	687b      	ldr	r3, [r7, #4]
 800b180:	6a1b      	ldr	r3, [r3, #32]
 800b182:	691b      	ldr	r3, [r3, #16]
 800b184:	4413      	add	r3, r2
 800b186:	617b      	str	r3, [r7, #20]
      diff = conn->current_msg->msg.w.vector->len - conn->current_msg->msg.w.vector_off;
 800b188:	687b      	ldr	r3, [r7, #4]
 800b18a:	6a1b      	ldr	r3, [r3, #32]
 800b18c:	689b      	ldr	r3, [r3, #8]
 800b18e:	685a      	ldr	r2, [r3, #4]
 800b190:	687b      	ldr	r3, [r7, #4]
 800b192:	6a1b      	ldr	r3, [r3, #32]
 800b194:	691b      	ldr	r3, [r3, #16]
 800b196:	1ad3      	subs	r3, r2, r3
 800b198:	613b      	str	r3, [r7, #16]
      if (diff > 0xffffUL) { /* max_u16_t */
 800b19a:	693b      	ldr	r3, [r7, #16]
 800b19c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b1a0:	d307      	bcc.n	800b1b2 <lwip_netconn_do_writemore+0xfe>
        len = 0xffff;
 800b1a2:	f64f 73ff 	movw	r3, #65535	; 0xffff
 800b1a6:	83bb      	strh	r3, [r7, #28]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b1a8:	7ebb      	ldrb	r3, [r7, #26]
 800b1aa:	f043 0302 	orr.w	r3, r3, #2
 800b1ae:	76bb      	strb	r3, [r7, #26]
 800b1b0:	e001      	b.n	800b1b6 <lwip_netconn_do_writemore+0x102>
      } else {
        len = (u16_t)diff;
 800b1b2:	693b      	ldr	r3, [r7, #16]
 800b1b4:	83bb      	strh	r3, [r7, #28]
      }
      available = tcp_sndbuf(conn->pcb.tcp);
 800b1b6:	687b      	ldr	r3, [r7, #4]
 800b1b8:	685b      	ldr	r3, [r3, #4]
 800b1ba:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b1be:	81fb      	strh	r3, [r7, #14]
      if (available < len) {
 800b1c0:	89fa      	ldrh	r2, [r7, #14]
 800b1c2:	8bbb      	ldrh	r3, [r7, #28]
 800b1c4:	429a      	cmp	r2, r3
 800b1c6:	d216      	bcs.n	800b1f6 <lwip_netconn_do_writemore+0x142>
        /* don't try to write more than sendbuf */
        len = available;
 800b1c8:	89fb      	ldrh	r3, [r7, #14]
 800b1ca:	83bb      	strh	r3, [r7, #28]
        if (dontblock) {
 800b1cc:	7e3b      	ldrb	r3, [r7, #24]
 800b1ce:	2b00      	cmp	r3, #0
 800b1d0:	d00d      	beq.n	800b1ee <lwip_netconn_do_writemore+0x13a>
          if (!len) {
 800b1d2:	8bbb      	ldrh	r3, [r7, #28]
 800b1d4:	2b00      	cmp	r3, #0
 800b1d6:	d10e      	bne.n	800b1f6 <lwip_netconn_do_writemore+0x142>
            /* set error according to partial write or not */
            err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b1d8:	687b      	ldr	r3, [r7, #4]
 800b1da:	6a1b      	ldr	r3, [r3, #32]
 800b1dc:	699b      	ldr	r3, [r3, #24]
 800b1de:	2b00      	cmp	r3, #0
 800b1e0:	d102      	bne.n	800b1e8 <lwip_netconn_do_writemore+0x134>
 800b1e2:	f06f 0306 	mvn.w	r3, #6
 800b1e6:	e000      	b.n	800b1ea <lwip_netconn_do_writemore+0x136>
 800b1e8:	2300      	movs	r3, #0
 800b1ea:	77fb      	strb	r3, [r7, #31]
            goto err_mem;
 800b1ec:	e07d      	b.n	800b2ea <lwip_netconn_do_writemore+0x236>
          }
        } else {
          apiflags |= TCP_WRITE_FLAG_MORE;
 800b1ee:	7ebb      	ldrb	r3, [r7, #26]
 800b1f0:	f043 0302 	orr.w	r3, r3, #2
 800b1f4:	76bb      	strb	r3, [r7, #26]
        }
      }
      LWIP_ASSERT("lwip_netconn_do_writemore: invalid length!",
 800b1f6:	687b      	ldr	r3, [r7, #4]
 800b1f8:	6a1b      	ldr	r3, [r3, #32]
 800b1fa:	691a      	ldr	r2, [r3, #16]
 800b1fc:	8bbb      	ldrh	r3, [r7, #28]
 800b1fe:	441a      	add	r2, r3
 800b200:	687b      	ldr	r3, [r7, #4]
 800b202:	6a1b      	ldr	r3, [r3, #32]
 800b204:	689b      	ldr	r3, [r3, #8]
 800b206:	685b      	ldr	r3, [r3, #4]
 800b208:	429a      	cmp	r2, r3
 800b20a:	d906      	bls.n	800b21a <lwip_netconn_do_writemore+0x166>
 800b20c:	4b45      	ldr	r3, [pc, #276]	; (800b324 <lwip_netconn_do_writemore+0x270>)
 800b20e:	f240 62a3 	movw	r2, #1699	; 0x6a3
 800b212:	494c      	ldr	r1, [pc, #304]	; (800b344 <lwip_netconn_do_writemore+0x290>)
 800b214:	4845      	ldr	r0, [pc, #276]	; (800b32c <lwip_netconn_do_writemore+0x278>)
 800b216:	f00b fdeb 	bl	8016df0 <iprintf>
                  ((conn->current_msg->msg.w.vector_off + len) <= conn->current_msg->msg.w.vector->len));
      /* we should loop around for more sending in the following cases:
           1) We couldn't finish the current vector because of 16-bit size limitations.
              tcp_write() and tcp_sndbuf() both are limited to 16-bit sizes
           2) We are sending the remainder of the current vector and have more */
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b21a:	8bbb      	ldrh	r3, [r7, #28]
 800b21c:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800b220:	4293      	cmp	r3, r2
 800b222:	d103      	bne.n	800b22c <lwip_netconn_do_writemore+0x178>
 800b224:	693b      	ldr	r3, [r7, #16]
 800b226:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800b22a:	d209      	bcs.n	800b240 <lwip_netconn_do_writemore+0x18c>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b22c:	693b      	ldr	r3, [r7, #16]
 800b22e:	b29b      	uxth	r3, r3
      if ((len == 0xffff && diff > 0xffffUL) ||
 800b230:	8bba      	ldrh	r2, [r7, #28]
 800b232:	429a      	cmp	r2, r3
 800b234:	d10b      	bne.n	800b24e <lwip_netconn_do_writemore+0x19a>
          (len == (u16_t)diff && conn->current_msg->msg.w.vector_cnt > 1)) {
 800b236:	687b      	ldr	r3, [r7, #4]
 800b238:	6a1b      	ldr	r3, [r3, #32]
 800b23a:	899b      	ldrh	r3, [r3, #12]
 800b23c:	2b01      	cmp	r3, #1
 800b23e:	d906      	bls.n	800b24e <lwip_netconn_do_writemore+0x19a>
        write_more = 1;
 800b240:	2301      	movs	r3, #1
 800b242:	767b      	strb	r3, [r7, #25]
        apiflags |= TCP_WRITE_FLAG_MORE;
 800b244:	7ebb      	ldrb	r3, [r7, #26]
 800b246:	f043 0302 	orr.w	r3, r3, #2
 800b24a:	76bb      	strb	r3, [r7, #26]
 800b24c:	e001      	b.n	800b252 <lwip_netconn_do_writemore+0x19e>
      } else {
        write_more = 0;
 800b24e:	2300      	movs	r3, #0
 800b250:	767b      	strb	r3, [r7, #25]
      }
      err = tcp_write(conn->pcb.tcp, dataptr, len, apiflags);
 800b252:	687b      	ldr	r3, [r7, #4]
 800b254:	6858      	ldr	r0, [r3, #4]
 800b256:	7ebb      	ldrb	r3, [r7, #26]
 800b258:	8bba      	ldrh	r2, [r7, #28]
 800b25a:	6979      	ldr	r1, [r7, #20]
 800b25c:	f006 fe16 	bl	8011e8c <tcp_write>
 800b260:	4603      	mov	r3, r0
 800b262:	77fb      	strb	r3, [r7, #31]
      if (err == ERR_OK) {
 800b264:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b268:	2b00      	cmp	r3, #0
 800b26a:	d12c      	bne.n	800b2c6 <lwip_netconn_do_writemore+0x212>
        conn->current_msg->msg.w.offset += len;
 800b26c:	687b      	ldr	r3, [r7, #4]
 800b26e:	6a1b      	ldr	r3, [r3, #32]
 800b270:	6999      	ldr	r1, [r3, #24]
 800b272:	8bba      	ldrh	r2, [r7, #28]
 800b274:	687b      	ldr	r3, [r7, #4]
 800b276:	6a1b      	ldr	r3, [r3, #32]
 800b278:	440a      	add	r2, r1
 800b27a:	619a      	str	r2, [r3, #24]
        conn->current_msg->msg.w.vector_off += len;
 800b27c:	687b      	ldr	r3, [r7, #4]
 800b27e:	6a1b      	ldr	r3, [r3, #32]
 800b280:	6919      	ldr	r1, [r3, #16]
 800b282:	8bba      	ldrh	r2, [r7, #28]
 800b284:	687b      	ldr	r3, [r7, #4]
 800b286:	6a1b      	ldr	r3, [r3, #32]
 800b288:	440a      	add	r2, r1
 800b28a:	611a      	str	r2, [r3, #16]
        /* check if current vector is finished */
        if (conn->current_msg->msg.w.vector_off == conn->current_msg->msg.w.vector->len) {
 800b28c:	687b      	ldr	r3, [r7, #4]
 800b28e:	6a1b      	ldr	r3, [r3, #32]
 800b290:	691a      	ldr	r2, [r3, #16]
 800b292:	687b      	ldr	r3, [r7, #4]
 800b294:	6a1b      	ldr	r3, [r3, #32]
 800b296:	689b      	ldr	r3, [r3, #8]
 800b298:	685b      	ldr	r3, [r3, #4]
 800b29a:	429a      	cmp	r2, r3
 800b29c:	d113      	bne.n	800b2c6 <lwip_netconn_do_writemore+0x212>
          conn->current_msg->msg.w.vector_cnt--;
 800b29e:	687b      	ldr	r3, [r7, #4]
 800b2a0:	6a1b      	ldr	r3, [r3, #32]
 800b2a2:	899a      	ldrh	r2, [r3, #12]
 800b2a4:	3a01      	subs	r2, #1
 800b2a6:	b292      	uxth	r2, r2
 800b2a8:	819a      	strh	r2, [r3, #12]
          /* if we have additional vectors, move on to them */
          if (conn->current_msg->msg.w.vector_cnt > 0) {
 800b2aa:	687b      	ldr	r3, [r7, #4]
 800b2ac:	6a1b      	ldr	r3, [r3, #32]
 800b2ae:	899b      	ldrh	r3, [r3, #12]
 800b2b0:	2b00      	cmp	r3, #0
 800b2b2:	d008      	beq.n	800b2c6 <lwip_netconn_do_writemore+0x212>
            conn->current_msg->msg.w.vector++;
 800b2b4:	687b      	ldr	r3, [r7, #4]
 800b2b6:	6a1b      	ldr	r3, [r3, #32]
 800b2b8:	689a      	ldr	r2, [r3, #8]
 800b2ba:	3208      	adds	r2, #8
 800b2bc:	609a      	str	r2, [r3, #8]
            conn->current_msg->msg.w.vector_off = 0;
 800b2be:	687b      	ldr	r3, [r7, #4]
 800b2c0:	6a1b      	ldr	r3, [r3, #32]
 800b2c2:	2200      	movs	r2, #0
 800b2c4:	611a      	str	r2, [r3, #16]
          }
        }
      }
    } while (write_more && err == ERR_OK);
 800b2c6:	7e7b      	ldrb	r3, [r7, #25]
 800b2c8:	2b00      	cmp	r3, #0
 800b2ca:	d004      	beq.n	800b2d6 <lwip_netconn_do_writemore+0x222>
 800b2cc:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2d0:	2b00      	cmp	r3, #0
 800b2d2:	f43f af50 	beq.w	800b176 <lwip_netconn_do_writemore+0xc2>
    /* if OK or memory error, check available space */
    if ((err == ERR_OK) || (err == ERR_MEM)) {
 800b2d6:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2da:	2b00      	cmp	r3, #0
 800b2dc:	d004      	beq.n	800b2e8 <lwip_netconn_do_writemore+0x234>
 800b2de:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b2e2:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b2e6:	d146      	bne.n	800b376 <lwip_netconn_do_writemore+0x2c2>
err_mem:
 800b2e8:	bf00      	nop
      if (dontblock && (conn->current_msg->msg.w.offset < conn->current_msg->msg.w.len)) {
 800b2ea:	7e3b      	ldrb	r3, [r7, #24]
 800b2ec:	2b00      	cmp	r3, #0
 800b2ee:	d02b      	beq.n	800b348 <lwip_netconn_do_writemore+0x294>
 800b2f0:	687b      	ldr	r3, [r7, #4]
 800b2f2:	6a1b      	ldr	r3, [r3, #32]
 800b2f4:	699a      	ldr	r2, [r3, #24]
 800b2f6:	687b      	ldr	r3, [r7, #4]
 800b2f8:	6a1b      	ldr	r3, [r3, #32]
 800b2fa:	695b      	ldr	r3, [r3, #20]
 800b2fc:	429a      	cmp	r2, r3
 800b2fe:	d223      	bcs.n	800b348 <lwip_netconn_do_writemore+0x294>
        /* non-blocking write did not write everything: mark the pcb non-writable
           and let poll_tcp check writable space to mark the pcb writable again */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b300:	687b      	ldr	r3, [r7, #4]
 800b302:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b304:	2b00      	cmp	r3, #0
 800b306:	d005      	beq.n	800b314 <lwip_netconn_do_writemore+0x260>
 800b308:	687b      	ldr	r3, [r7, #4]
 800b30a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b30c:	2200      	movs	r2, #0
 800b30e:	2103      	movs	r1, #3
 800b310:	6878      	ldr	r0, [r7, #4]
 800b312:	4798      	blx	r3
        conn->flags |= NETCONN_FLAG_CHECK_WRITESPACE;
 800b314:	687b      	ldr	r3, [r7, #4]
 800b316:	7f1b      	ldrb	r3, [r3, #28]
 800b318:	f043 0310 	orr.w	r3, r3, #16
 800b31c:	b2da      	uxtb	r2, r3
 800b31e:	687b      	ldr	r3, [r7, #4]
 800b320:	771a      	strb	r2, [r3, #28]
 800b322:	e028      	b.n	800b376 <lwip_netconn_do_writemore+0x2c2>
 800b324:	080184e8 	.word	0x080184e8
 800b328:	08018640 	.word	0x08018640
 800b32c:	0801852c 	.word	0x0801852c
 800b330:	08018948 	.word	0x08018948
 800b334:	08018650 	.word	0x08018650
 800b338:	08018968 	.word	0x08018968
 800b33c:	08018980 	.word	0x08018980
 800b340:	080189c0 	.word	0x080189c0
 800b344:	080189e8 	.word	0x080189e8
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b348:	687b      	ldr	r3, [r7, #4]
 800b34a:	685b      	ldr	r3, [r3, #4]
 800b34c:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 800b350:	f5b3 6f86 	cmp.w	r3, #1072	; 0x430
 800b354:	d305      	bcc.n	800b362 <lwip_netconn_do_writemore+0x2ae>
                 (tcp_sndqueuelen(conn->pcb.tcp) >= TCP_SNDQUEUELOWAT)) {
 800b356:	687b      	ldr	r3, [r7, #4]
 800b358:	685b      	ldr	r3, [r3, #4]
 800b35a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
      } else if ((tcp_sndbuf(conn->pcb.tcp) <= TCP_SNDLOWAT) ||
 800b35e:	2b04      	cmp	r3, #4
 800b360:	d909      	bls.n	800b376 <lwip_netconn_do_writemore+0x2c2>
        /* The queued byte- or pbuf-count exceeds the configured low-water limit,
           let select mark this pcb as non-writable. */
        API_EVENT(conn, NETCONN_EVT_SENDMINUS, 0);
 800b362:	687b      	ldr	r3, [r7, #4]
 800b364:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b366:	2b00      	cmp	r3, #0
 800b368:	d005      	beq.n	800b376 <lwip_netconn_do_writemore+0x2c2>
 800b36a:	687b      	ldr	r3, [r7, #4]
 800b36c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800b36e:	2200      	movs	r2, #0
 800b370:	2103      	movs	r1, #3
 800b372:	6878      	ldr	r0, [r7, #4]
 800b374:	4798      	blx	r3
      }
    }

    if (err == ERR_OK) {
 800b376:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b37a:	2b00      	cmp	r3, #0
 800b37c:	d11d      	bne.n	800b3ba <lwip_netconn_do_writemore+0x306>
      err_t out_err;
      if ((conn->current_msg->msg.w.offset == conn->current_msg->msg.w.len) || dontblock) {
 800b37e:	687b      	ldr	r3, [r7, #4]
 800b380:	6a1b      	ldr	r3, [r3, #32]
 800b382:	699a      	ldr	r2, [r3, #24]
 800b384:	687b      	ldr	r3, [r7, #4]
 800b386:	6a1b      	ldr	r3, [r3, #32]
 800b388:	695b      	ldr	r3, [r3, #20]
 800b38a:	429a      	cmp	r2, r3
 800b38c:	d002      	beq.n	800b394 <lwip_netconn_do_writemore+0x2e0>
 800b38e:	7e3b      	ldrb	r3, [r7, #24]
 800b390:	2b00      	cmp	r3, #0
 800b392:	d001      	beq.n	800b398 <lwip_netconn_do_writemore+0x2e4>
        /* return sent length (caller reads length from msg.w.offset) */
        write_finished = 1;
 800b394:	2301      	movs	r3, #1
 800b396:	76fb      	strb	r3, [r7, #27]
      }
      out_err = tcp_output(conn->pcb.tcp);
 800b398:	687b      	ldr	r3, [r7, #4]
 800b39a:	685b      	ldr	r3, [r3, #4]
 800b39c:	4618      	mov	r0, r3
 800b39e:	f007 fb5f 	bl	8012a60 <tcp_output>
 800b3a2:	4603      	mov	r3, r0
 800b3a4:	733b      	strb	r3, [r7, #12]
      if (out_err == ERR_RTE) {
 800b3a6:	f997 300c 	ldrsb.w	r3, [r7, #12]
 800b3aa:	f113 0f04 	cmn.w	r3, #4
 800b3ae:	d12c      	bne.n	800b40a <lwip_netconn_do_writemore+0x356>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b3b0:	7b3b      	ldrb	r3, [r7, #12]
 800b3b2:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b3b4:	2301      	movs	r3, #1
 800b3b6:	76fb      	strb	r3, [r7, #27]
 800b3b8:	e027      	b.n	800b40a <lwip_netconn_do_writemore+0x356>
      }
    } else if (err == ERR_MEM) {
 800b3ba:	f997 301f 	ldrsb.w	r3, [r7, #31]
 800b3be:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b3c2:	d120      	bne.n	800b406 <lwip_netconn_do_writemore+0x352>
         For blocking sockets, we do NOT return to the application
         thread, since ERR_MEM is only a temporary error! Non-blocking
         will remain non-writable until sent_tcp/poll_tcp is called */

      /* tcp_write returned ERR_MEM, try tcp_output anyway */
      err_t out_err = tcp_output(conn->pcb.tcp);
 800b3c4:	687b      	ldr	r3, [r7, #4]
 800b3c6:	685b      	ldr	r3, [r3, #4]
 800b3c8:	4618      	mov	r0, r3
 800b3ca:	f007 fb49 	bl	8012a60 <tcp_output>
 800b3ce:	4603      	mov	r3, r0
 800b3d0:	737b      	strb	r3, [r7, #13]
      if (out_err == ERR_RTE) {
 800b3d2:	f997 300d 	ldrsb.w	r3, [r7, #13]
 800b3d6:	f113 0f04 	cmn.w	r3, #4
 800b3da:	d104      	bne.n	800b3e6 <lwip_netconn_do_writemore+0x332>
        /* If tcp_output fails because no route is found,
           don't try writing any more but return the error
           to the application thread. */
        err = out_err;
 800b3dc:	7b7b      	ldrb	r3, [r7, #13]
 800b3de:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b3e0:	2301      	movs	r3, #1
 800b3e2:	76fb      	strb	r3, [r7, #27]
 800b3e4:	e011      	b.n	800b40a <lwip_netconn_do_writemore+0x356>
      } else if (dontblock) {
 800b3e6:	7e3b      	ldrb	r3, [r7, #24]
 800b3e8:	2b00      	cmp	r3, #0
 800b3ea:	d00e      	beq.n	800b40a <lwip_netconn_do_writemore+0x356>
        /* non-blocking write is done on ERR_MEM, set error according
           to partial write or not */
        err = (conn->current_msg->msg.w.offset == 0) ? ERR_WOULDBLOCK : ERR_OK;
 800b3ec:	687b      	ldr	r3, [r7, #4]
 800b3ee:	6a1b      	ldr	r3, [r3, #32]
 800b3f0:	699b      	ldr	r3, [r3, #24]
 800b3f2:	2b00      	cmp	r3, #0
 800b3f4:	d102      	bne.n	800b3fc <lwip_netconn_do_writemore+0x348>
 800b3f6:	f06f 0306 	mvn.w	r3, #6
 800b3fa:	e000      	b.n	800b3fe <lwip_netconn_do_writemore+0x34a>
 800b3fc:	2300      	movs	r3, #0
 800b3fe:	77fb      	strb	r3, [r7, #31]
        write_finished = 1;
 800b400:	2301      	movs	r3, #1
 800b402:	76fb      	strb	r3, [r7, #27]
 800b404:	e001      	b.n	800b40a <lwip_netconn_do_writemore+0x356>
      }
    } else {
      /* On errors != ERR_MEM, we don't try writing any more but return
         the error to the application thread. */
      write_finished = 1;
 800b406:	2301      	movs	r3, #1
 800b408:	76fb      	strb	r3, [r7, #27]
    }
  }
  if (write_finished) {
 800b40a:	7efb      	ldrb	r3, [r7, #27]
 800b40c:	2b00      	cmp	r3, #0
 800b40e:	d015      	beq.n	800b43c <lwip_netconn_do_writemore+0x388>
    /* everything was written: set back connection state
       and back to application task */
    sys_sem_t *op_completed_sem = LWIP_API_MSG_SEM(conn->current_msg);
 800b410:	687b      	ldr	r3, [r7, #4]
 800b412:	6a1b      	ldr	r3, [r3, #32]
 800b414:	681b      	ldr	r3, [r3, #0]
 800b416:	330c      	adds	r3, #12
 800b418:	60bb      	str	r3, [r7, #8]
    conn->current_msg->err = err;
 800b41a:	687b      	ldr	r3, [r7, #4]
 800b41c:	6a1b      	ldr	r3, [r3, #32]
 800b41e:	7ffa      	ldrb	r2, [r7, #31]
 800b420:	711a      	strb	r2, [r3, #4]
    conn->current_msg = NULL;
 800b422:	687b      	ldr	r3, [r7, #4]
 800b424:	2200      	movs	r2, #0
 800b426:	621a      	str	r2, [r3, #32]
    conn->state = NETCONN_NONE;
 800b428:	687b      	ldr	r3, [r7, #4]
 800b42a:	2200      	movs	r2, #0
 800b42c:	705a      	strb	r2, [r3, #1]
#if LWIP_TCPIP_CORE_LOCKING
    if (delayed)
 800b42e:	78fb      	ldrb	r3, [r7, #3]
 800b430:	2b00      	cmp	r3, #0
 800b432:	d006      	beq.n	800b442 <lwip_netconn_do_writemore+0x38e>
#endif
    {
      sys_sem_signal(op_completed_sem);
 800b434:	68b8      	ldr	r0, [r7, #8]
 800b436:	f00b fb39 	bl	8016aac <sys_sem_signal>
 800b43a:	e002      	b.n	800b442 <lwip_netconn_do_writemore+0x38e>
    }
  }
#if LWIP_TCPIP_CORE_LOCKING
  else {
    return ERR_MEM;
 800b43c:	f04f 33ff 	mov.w	r3, #4294967295
 800b440:	e000      	b.n	800b444 <lwip_netconn_do_writemore+0x390>
  }
#endif
  return ERR_OK;
 800b442:	2300      	movs	r3, #0
}
 800b444:	4618      	mov	r0, r3
 800b446:	3720      	adds	r7, #32
 800b448:	46bd      	mov	sp, r7
 800b44a:	bd80      	pop	{r7, pc}

0800b44c <lwip_netconn_do_write>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_write(void *m)
{
 800b44c:	b580      	push	{r7, lr}
 800b44e:	b084      	sub	sp, #16
 800b450:	af00      	add	r7, sp, #0
 800b452:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b454:	687b      	ldr	r3, [r7, #4]
 800b456:	60bb      	str	r3, [r7, #8]

  err_t err = netconn_err(msg->conn);
 800b458:	68bb      	ldr	r3, [r7, #8]
 800b45a:	681b      	ldr	r3, [r3, #0]
 800b45c:	4618      	mov	r0, r3
 800b45e:	f7fe fd22 	bl	8009ea6 <netconn_err>
 800b462:	4603      	mov	r3, r0
 800b464:	73fb      	strb	r3, [r7, #15]
  if (err == ERR_OK) {
 800b466:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800b46a:	2b00      	cmp	r3, #0
 800b46c:	d166      	bne.n	800b53c <lwip_netconn_do_write+0xf0>
    if (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) {
 800b46e:	68bb      	ldr	r3, [r7, #8]
 800b470:	681b      	ldr	r3, [r3, #0]
 800b472:	781b      	ldrb	r3, [r3, #0]
 800b474:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 800b478:	2b10      	cmp	r3, #16
 800b47a:	d15d      	bne.n	800b538 <lwip_netconn_do_write+0xec>
#if LWIP_TCP
      if (msg->conn->state != NETCONN_NONE) {
 800b47c:	68bb      	ldr	r3, [r7, #8]
 800b47e:	681b      	ldr	r3, [r3, #0]
 800b480:	785b      	ldrb	r3, [r3, #1]
 800b482:	2b00      	cmp	r3, #0
 800b484:	d002      	beq.n	800b48c <lwip_netconn_do_write+0x40>
        /* netconn is connecting, closing or in blocking write */
        err = ERR_INPROGRESS;
 800b486:	23fb      	movs	r3, #251	; 0xfb
 800b488:	73fb      	strb	r3, [r7, #15]
 800b48a:	e057      	b.n	800b53c <lwip_netconn_do_write+0xf0>
      } else if (msg->conn->pcb.tcp != NULL) {
 800b48c:	68bb      	ldr	r3, [r7, #8]
 800b48e:	681b      	ldr	r3, [r3, #0]
 800b490:	685b      	ldr	r3, [r3, #4]
 800b492:	2b00      	cmp	r3, #0
 800b494:	d04d      	beq.n	800b532 <lwip_netconn_do_write+0xe6>
        msg->conn->state = NETCONN_WRITE;
 800b496:	68bb      	ldr	r3, [r7, #8]
 800b498:	681b      	ldr	r3, [r3, #0]
 800b49a:	2201      	movs	r2, #1
 800b49c:	705a      	strb	r2, [r3, #1]
        /* set all the variables used by lwip_netconn_do_writemore */
        LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b49e:	68bb      	ldr	r3, [r7, #8]
 800b4a0:	681b      	ldr	r3, [r3, #0]
 800b4a2:	6a1b      	ldr	r3, [r3, #32]
 800b4a4:	2b00      	cmp	r3, #0
 800b4a6:	d006      	beq.n	800b4b6 <lwip_netconn_do_write+0x6a>
 800b4a8:	4b28      	ldr	r3, [pc, #160]	; (800b54c <lwip_netconn_do_write+0x100>)
 800b4aa:	f240 7223 	movw	r2, #1827	; 0x723
 800b4ae:	4928      	ldr	r1, [pc, #160]	; (800b550 <lwip_netconn_do_write+0x104>)
 800b4b0:	4828      	ldr	r0, [pc, #160]	; (800b554 <lwip_netconn_do_write+0x108>)
 800b4b2:	f00b fc9d 	bl	8016df0 <iprintf>
        LWIP_ASSERT("msg->msg.w.len != 0", msg->msg.w.len != 0);
 800b4b6:	68bb      	ldr	r3, [r7, #8]
 800b4b8:	695b      	ldr	r3, [r3, #20]
 800b4ba:	2b00      	cmp	r3, #0
 800b4bc:	d106      	bne.n	800b4cc <lwip_netconn_do_write+0x80>
 800b4be:	4b23      	ldr	r3, [pc, #140]	; (800b54c <lwip_netconn_do_write+0x100>)
 800b4c0:	f240 7224 	movw	r2, #1828	; 0x724
 800b4c4:	4924      	ldr	r1, [pc, #144]	; (800b558 <lwip_netconn_do_write+0x10c>)
 800b4c6:	4823      	ldr	r0, [pc, #140]	; (800b554 <lwip_netconn_do_write+0x108>)
 800b4c8:	f00b fc92 	bl	8016df0 <iprintf>
        msg->conn->current_msg = msg;
 800b4cc:	68bb      	ldr	r3, [r7, #8]
 800b4ce:	681b      	ldr	r3, [r3, #0]
 800b4d0:	68ba      	ldr	r2, [r7, #8]
 800b4d2:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
        if (lwip_netconn_do_writemore(msg->conn, 0) != ERR_OK) {
 800b4d4:	68bb      	ldr	r3, [r7, #8]
 800b4d6:	681b      	ldr	r3, [r3, #0]
 800b4d8:	2100      	movs	r1, #0
 800b4da:	4618      	mov	r0, r3
 800b4dc:	f7ff fdea 	bl	800b0b4 <lwip_netconn_do_writemore>
 800b4e0:	4603      	mov	r3, r0
 800b4e2:	2b00      	cmp	r3, #0
 800b4e4:	d02e      	beq.n	800b544 <lwip_netconn_do_write+0xf8>
          LWIP_ASSERT("state!", msg->conn->state == NETCONN_WRITE);
 800b4e6:	68bb      	ldr	r3, [r7, #8]
 800b4e8:	681b      	ldr	r3, [r3, #0]
 800b4ea:	785b      	ldrb	r3, [r3, #1]
 800b4ec:	2b01      	cmp	r3, #1
 800b4ee:	d006      	beq.n	800b4fe <lwip_netconn_do_write+0xb2>
 800b4f0:	4b16      	ldr	r3, [pc, #88]	; (800b54c <lwip_netconn_do_write+0x100>)
 800b4f2:	f44f 62e5 	mov.w	r2, #1832	; 0x728
 800b4f6:	4919      	ldr	r1, [pc, #100]	; (800b55c <lwip_netconn_do_write+0x110>)
 800b4f8:	4816      	ldr	r0, [pc, #88]	; (800b554 <lwip_netconn_do_write+0x108>)
 800b4fa:	f00b fc79 	bl	8016df0 <iprintf>
          UNLOCK_TCPIP_CORE();
 800b4fe:	4818      	ldr	r0, [pc, #96]	; (800b560 <lwip_netconn_do_write+0x114>)
 800b500:	f00b fb3d 	bl	8016b7e <sys_mutex_unlock>
          sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b504:	68bb      	ldr	r3, [r7, #8]
 800b506:	681b      	ldr	r3, [r3, #0]
 800b508:	330c      	adds	r3, #12
 800b50a:	2100      	movs	r1, #0
 800b50c:	4618      	mov	r0, r3
 800b50e:	f00b fa9c 	bl	8016a4a <sys_arch_sem_wait>
          LOCK_TCPIP_CORE();
 800b512:	4813      	ldr	r0, [pc, #76]	; (800b560 <lwip_netconn_do_write+0x114>)
 800b514:	f00b fb24 	bl	8016b60 <sys_mutex_lock>
          LWIP_ASSERT("state!", msg->conn->state != NETCONN_WRITE);
 800b518:	68bb      	ldr	r3, [r7, #8]
 800b51a:	681b      	ldr	r3, [r3, #0]
 800b51c:	785b      	ldrb	r3, [r3, #1]
 800b51e:	2b01      	cmp	r3, #1
 800b520:	d110      	bne.n	800b544 <lwip_netconn_do_write+0xf8>
 800b522:	4b0a      	ldr	r3, [pc, #40]	; (800b54c <lwip_netconn_do_write+0x100>)
 800b524:	f240 722c 	movw	r2, #1836	; 0x72c
 800b528:	490c      	ldr	r1, [pc, #48]	; (800b55c <lwip_netconn_do_write+0x110>)
 800b52a:	480a      	ldr	r0, [pc, #40]	; (800b554 <lwip_netconn_do_write+0x108>)
 800b52c:	f00b fc60 	bl	8016df0 <iprintf>
#else /* LWIP_TCPIP_CORE_LOCKING */
        lwip_netconn_do_writemore(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
        /* for both cases: if lwip_netconn_do_writemore was called, don't ACK the APIMSG
           since lwip_netconn_do_writemore ACKs it! */
        return;
 800b530:	e008      	b.n	800b544 <lwip_netconn_do_write+0xf8>
      } else {
        err = ERR_CONN;
 800b532:	23f5      	movs	r3, #245	; 0xf5
 800b534:	73fb      	strb	r3, [r7, #15]
 800b536:	e001      	b.n	800b53c <lwip_netconn_do_write+0xf0>
#else /* LWIP_TCP */
      err = ERR_VAL;
#endif /* LWIP_TCP */
#if (LWIP_UDP || LWIP_RAW)
    } else {
      err = ERR_VAL;
 800b538:	23fa      	movs	r3, #250	; 0xfa
 800b53a:	73fb      	strb	r3, [r7, #15]
#endif /* (LWIP_UDP || LWIP_RAW) */
    }
  }
  msg->err = err;
 800b53c:	68bb      	ldr	r3, [r7, #8]
 800b53e:	7bfa      	ldrb	r2, [r7, #15]
 800b540:	711a      	strb	r2, [r3, #4]
 800b542:	e000      	b.n	800b546 <lwip_netconn_do_write+0xfa>
        return;
 800b544:	bf00      	nop
  TCPIP_APIMSG_ACK(msg);
}
 800b546:	3710      	adds	r7, #16
 800b548:	46bd      	mov	sp, r7
 800b54a:	bd80      	pop	{r7, pc}
 800b54c:	080184e8 	.word	0x080184e8
 800b550:	0801888c 	.word	0x0801888c
 800b554:	0801852c 	.word	0x0801852c
 800b558:	08018a14 	.word	0x08018a14
 800b55c:	080188a8 	.word	0x080188a8
 800b560:	20009edc 	.word	0x20009edc

0800b564 <lwip_netconn_do_close>:
 *
 * @param m the api_msg pointing to the connection
 */
void
lwip_netconn_do_close(void *m)
{
 800b564:	b580      	push	{r7, lr}
 800b566:	b084      	sub	sp, #16
 800b568:	af00      	add	r7, sp, #0
 800b56a:	6078      	str	r0, [r7, #4]
  struct api_msg *msg = (struct api_msg *)m;
 800b56c:	687b      	ldr	r3, [r7, #4]
 800b56e:	60fb      	str	r3, [r7, #12]

#if LWIP_TCP
  enum netconn_state state = msg->conn->state;
 800b570:	68fb      	ldr	r3, [r7, #12]
 800b572:	681b      	ldr	r3, [r3, #0]
 800b574:	785b      	ldrb	r3, [r3, #1]
 800b576:	72fb      	strb	r3, [r7, #11]
  /* First check if this is a TCP netconn and if it is in a correct state
      (LISTEN doesn't support half shutdown) */
  if ((msg->conn->pcb.tcp != NULL) &&
 800b578:	68fb      	ldr	r3, [r7, #12]
 800b57a:	681b      	ldr	r3, [r3, #0]
 800b57c:	685b      	ldr	r3, [r3, #4]
 800b57e:	2b00      	cmp	r3, #0
 800b580:	d069      	beq.n	800b656 <lwip_netconn_do_close+0xf2>
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b582:	68fb      	ldr	r3, [r7, #12]
 800b584:	681b      	ldr	r3, [r3, #0]
 800b586:	781b      	ldrb	r3, [r3, #0]
 800b588:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if ((msg->conn->pcb.tcp != NULL) &&
 800b58c:	2b10      	cmp	r3, #16
 800b58e:	d162      	bne.n	800b656 <lwip_netconn_do_close+0xf2>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b590:	68fb      	ldr	r3, [r7, #12]
 800b592:	7a1b      	ldrb	r3, [r3, #8]
      (NETCONNTYPE_GROUP(msg->conn->type) == NETCONN_TCP) &&
 800b594:	2b03      	cmp	r3, #3
 800b596:	d002      	beq.n	800b59e <lwip_netconn_do_close+0x3a>
      ((msg->msg.sd.shut == NETCONN_SHUT_RDWR) || (state != NETCONN_LISTEN))) {
 800b598:	7afb      	ldrb	r3, [r7, #11]
 800b59a:	2b02      	cmp	r3, #2
 800b59c:	d05b      	beq.n	800b656 <lwip_netconn_do_close+0xf2>
    /* Check if we are in a connected state */
    if (state == NETCONN_CONNECT) {
 800b59e:	7afb      	ldrb	r3, [r7, #11]
 800b5a0:	2b03      	cmp	r3, #3
 800b5a2:	d103      	bne.n	800b5ac <lwip_netconn_do_close+0x48>
      /* TCP connect in progress: cannot shutdown */
      msg->err = ERR_CONN;
 800b5a4:	68fb      	ldr	r3, [r7, #12]
 800b5a6:	22f5      	movs	r2, #245	; 0xf5
 800b5a8:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b5aa:	e059      	b.n	800b660 <lwip_netconn_do_close+0xfc>
    } else if (state == NETCONN_WRITE) {
 800b5ac:	7afb      	ldrb	r3, [r7, #11]
 800b5ae:	2b01      	cmp	r3, #1
 800b5b0:	d103      	bne.n	800b5ba <lwip_netconn_do_close+0x56>
        msg->err = tcp_shutdown(msg->conn->pcb.tcp, 1, 0);
      }
    }
    if (state == NETCONN_NONE) {
#else /* LWIP_NETCONN_FULLDUPLEX */
      msg->err = ERR_INPROGRESS;
 800b5b2:	68fb      	ldr	r3, [r7, #12]
 800b5b4:	22fb      	movs	r2, #251	; 0xfb
 800b5b6:	711a      	strb	r2, [r3, #4]
    if (state == NETCONN_CONNECT) {
 800b5b8:	e052      	b.n	800b660 <lwip_netconn_do_close+0xfc>
    } else {
#endif /* LWIP_NETCONN_FULLDUPLEX */
      if (msg->msg.sd.shut & NETCONN_SHUT_RD) {
 800b5ba:	68fb      	ldr	r3, [r7, #12]
 800b5bc:	7a1b      	ldrb	r3, [r3, #8]
 800b5be:	f003 0301 	and.w	r3, r3, #1
 800b5c2:	2b00      	cmp	r3, #0
 800b5c4:	d004      	beq.n	800b5d0 <lwip_netconn_do_close+0x6c>
#if LWIP_NETCONN_FULLDUPLEX
        /* Mark mboxes invalid */
        netconn_mark_mbox_invalid(msg->conn);
#else /* LWIP_NETCONN_FULLDUPLEX */
        netconn_drain(msg->conn);
 800b5c6:	68fb      	ldr	r3, [r7, #12]
 800b5c8:	681b      	ldr	r3, [r3, #0]
 800b5ca:	4618      	mov	r0, r3
 800b5cc:	f7ff f8e8 	bl	800a7a0 <netconn_drain>
#endif /* LWIP_NETCONN_FULLDUPLEX */
      }
      LWIP_ASSERT("already writing or closing", msg->conn->current_msg == NULL);
 800b5d0:	68fb      	ldr	r3, [r7, #12]
 800b5d2:	681b      	ldr	r3, [r3, #0]
 800b5d4:	6a1b      	ldr	r3, [r3, #32]
 800b5d6:	2b00      	cmp	r3, #0
 800b5d8:	d006      	beq.n	800b5e8 <lwip_netconn_do_close+0x84>
 800b5da:	4b23      	ldr	r3, [pc, #140]	; (800b668 <lwip_netconn_do_close+0x104>)
 800b5dc:	f240 72bd 	movw	r2, #1981	; 0x7bd
 800b5e0:	4922      	ldr	r1, [pc, #136]	; (800b66c <lwip_netconn_do_close+0x108>)
 800b5e2:	4823      	ldr	r0, [pc, #140]	; (800b670 <lwip_netconn_do_close+0x10c>)
 800b5e4:	f00b fc04 	bl	8016df0 <iprintf>
      msg->conn->state = NETCONN_CLOSE;
 800b5e8:	68fb      	ldr	r3, [r7, #12]
 800b5ea:	681b      	ldr	r3, [r3, #0]
 800b5ec:	2204      	movs	r2, #4
 800b5ee:	705a      	strb	r2, [r3, #1]
      msg->conn->current_msg = msg;
 800b5f0:	68fb      	ldr	r3, [r7, #12]
 800b5f2:	681b      	ldr	r3, [r3, #0]
 800b5f4:	68fa      	ldr	r2, [r7, #12]
 800b5f6:	621a      	str	r2, [r3, #32]
#if LWIP_TCPIP_CORE_LOCKING
      if (lwip_netconn_do_close_internal(msg->conn, 0) != ERR_OK) {
 800b5f8:	68fb      	ldr	r3, [r7, #12]
 800b5fa:	681b      	ldr	r3, [r3, #0]
 800b5fc:	2100      	movs	r1, #0
 800b5fe:	4618      	mov	r0, r3
 800b600:	f7ff f94c 	bl	800a89c <lwip_netconn_do_close_internal>
 800b604:	4603      	mov	r3, r0
 800b606:	2b00      	cmp	r3, #0
 800b608:	d029      	beq.n	800b65e <lwip_netconn_do_close+0xfa>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_CLOSE);
 800b60a:	68fb      	ldr	r3, [r7, #12]
 800b60c:	681b      	ldr	r3, [r3, #0]
 800b60e:	785b      	ldrb	r3, [r3, #1]
 800b610:	2b04      	cmp	r3, #4
 800b612:	d006      	beq.n	800b622 <lwip_netconn_do_close+0xbe>
 800b614:	4b14      	ldr	r3, [pc, #80]	; (800b668 <lwip_netconn_do_close+0x104>)
 800b616:	f240 72c2 	movw	r2, #1986	; 0x7c2
 800b61a:	4916      	ldr	r1, [pc, #88]	; (800b674 <lwip_netconn_do_close+0x110>)
 800b61c:	4814      	ldr	r0, [pc, #80]	; (800b670 <lwip_netconn_do_close+0x10c>)
 800b61e:	f00b fbe7 	bl	8016df0 <iprintf>
        UNLOCK_TCPIP_CORE();
 800b622:	4815      	ldr	r0, [pc, #84]	; (800b678 <lwip_netconn_do_close+0x114>)
 800b624:	f00b faab 	bl	8016b7e <sys_mutex_unlock>
        sys_arch_sem_wait(LWIP_API_MSG_SEM(msg), 0);
 800b628:	68fb      	ldr	r3, [r7, #12]
 800b62a:	681b      	ldr	r3, [r3, #0]
 800b62c:	330c      	adds	r3, #12
 800b62e:	2100      	movs	r1, #0
 800b630:	4618      	mov	r0, r3
 800b632:	f00b fa0a 	bl	8016a4a <sys_arch_sem_wait>
        LOCK_TCPIP_CORE();
 800b636:	4810      	ldr	r0, [pc, #64]	; (800b678 <lwip_netconn_do_close+0x114>)
 800b638:	f00b fa92 	bl	8016b60 <sys_mutex_lock>
        LWIP_ASSERT("state!", msg->conn->state == NETCONN_NONE);
 800b63c:	68fb      	ldr	r3, [r7, #12]
 800b63e:	681b      	ldr	r3, [r3, #0]
 800b640:	785b      	ldrb	r3, [r3, #1]
 800b642:	2b00      	cmp	r3, #0
 800b644:	d00b      	beq.n	800b65e <lwip_netconn_do_close+0xfa>
 800b646:	4b08      	ldr	r3, [pc, #32]	; (800b668 <lwip_netconn_do_close+0x104>)
 800b648:	f240 72c6 	movw	r2, #1990	; 0x7c6
 800b64c:	4909      	ldr	r1, [pc, #36]	; (800b674 <lwip_netconn_do_close+0x110>)
 800b64e:	4808      	ldr	r0, [pc, #32]	; (800b670 <lwip_netconn_do_close+0x10c>)
 800b650:	f00b fbce 	bl	8016df0 <iprintf>
      }
#else /* LWIP_TCPIP_CORE_LOCKING */
      lwip_netconn_do_close_internal(msg->conn);
#endif /* LWIP_TCPIP_CORE_LOCKING */
      /* for tcp netconns, lwip_netconn_do_close_internal ACKs the message */
      return;
 800b654:	e003      	b.n	800b65e <lwip_netconn_do_close+0xfa>
    }
  } else
#endif /* LWIP_TCP */
  {
    msg->err = ERR_CONN;
 800b656:	68fb      	ldr	r3, [r7, #12]
 800b658:	22f5      	movs	r2, #245	; 0xf5
 800b65a:	711a      	strb	r2, [r3, #4]
 800b65c:	e000      	b.n	800b660 <lwip_netconn_do_close+0xfc>
      return;
 800b65e:	bf00      	nop
  }
  TCPIP_APIMSG_ACK(msg);
}
 800b660:	3710      	adds	r7, #16
 800b662:	46bd      	mov	sp, r7
 800b664:	bd80      	pop	{r7, pc}
 800b666:	bf00      	nop
 800b668:	080184e8 	.word	0x080184e8
 800b66c:	0801888c 	.word	0x0801888c
 800b670:	0801852c 	.word	0x0801852c
 800b674:	080188a8 	.word	0x080188a8
 800b678:	20009edc 	.word	0x20009edc

0800b67c <netbuf_delete>:
 *
 * @param buf pointer to a netbuf allocated by netbuf_new()
 */
void
netbuf_delete(struct netbuf *buf)
{
 800b67c:	b580      	push	{r7, lr}
 800b67e:	b082      	sub	sp, #8
 800b680:	af00      	add	r7, sp, #0
 800b682:	6078      	str	r0, [r7, #4]
  if (buf != NULL) {
 800b684:	687b      	ldr	r3, [r7, #4]
 800b686:	2b00      	cmp	r3, #0
 800b688:	d013      	beq.n	800b6b2 <netbuf_delete+0x36>
    if (buf->p != NULL) {
 800b68a:	687b      	ldr	r3, [r7, #4]
 800b68c:	681b      	ldr	r3, [r3, #0]
 800b68e:	2b00      	cmp	r3, #0
 800b690:	d00b      	beq.n	800b6aa <netbuf_delete+0x2e>
      pbuf_free(buf->p);
 800b692:	687b      	ldr	r3, [r7, #4]
 800b694:	681b      	ldr	r3, [r3, #0]
 800b696:	4618      	mov	r0, r3
 800b698:	f001 fdea 	bl	800d270 <pbuf_free>
      buf->p = buf->ptr = NULL;
 800b69c:	687b      	ldr	r3, [r7, #4]
 800b69e:	2200      	movs	r2, #0
 800b6a0:	605a      	str	r2, [r3, #4]
 800b6a2:	687b      	ldr	r3, [r7, #4]
 800b6a4:	685a      	ldr	r2, [r3, #4]
 800b6a6:	687b      	ldr	r3, [r7, #4]
 800b6a8:	601a      	str	r2, [r3, #0]
    }
    memp_free(MEMP_NETBUF, buf);
 800b6aa:	6879      	ldr	r1, [r7, #4]
 800b6ac:	2006      	movs	r0, #6
 800b6ae:	f000 ff3b 	bl	800c528 <memp_free>
  }
}
 800b6b2:	bf00      	nop
 800b6b4:	3708      	adds	r7, #8
 800b6b6:	46bd      	mov	sp, r7
 800b6b8:	bd80      	pop	{r7, pc}
	...

0800b6bc <netbuf_next>:
 *         1  if moved to the next part but now there is no next part
 *         0  if moved to the next part and there are still more parts
 */
s8_t
netbuf_next(struct netbuf *buf)
{
 800b6bc:	b580      	push	{r7, lr}
 800b6be:	b082      	sub	sp, #8
 800b6c0:	af00      	add	r7, sp, #0
 800b6c2:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("netbuf_next: invalid buf", (buf != NULL), return -1;);
 800b6c4:	687b      	ldr	r3, [r7, #4]
 800b6c6:	2b00      	cmp	r3, #0
 800b6c8:	d108      	bne.n	800b6dc <netbuf_next+0x20>
 800b6ca:	4b11      	ldr	r3, [pc, #68]	; (800b710 <netbuf_next+0x54>)
 800b6cc:	22e0      	movs	r2, #224	; 0xe0
 800b6ce:	4911      	ldr	r1, [pc, #68]	; (800b714 <netbuf_next+0x58>)
 800b6d0:	4811      	ldr	r0, [pc, #68]	; (800b718 <netbuf_next+0x5c>)
 800b6d2:	f00b fb8d 	bl	8016df0 <iprintf>
 800b6d6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6da:	e014      	b.n	800b706 <netbuf_next+0x4a>
  if (buf->ptr->next == NULL) {
 800b6dc:	687b      	ldr	r3, [r7, #4]
 800b6de:	685b      	ldr	r3, [r3, #4]
 800b6e0:	681b      	ldr	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d102      	bne.n	800b6ec <netbuf_next+0x30>
    return -1;
 800b6e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b6ea:	e00c      	b.n	800b706 <netbuf_next+0x4a>
  }
  buf->ptr = buf->ptr->next;
 800b6ec:	687b      	ldr	r3, [r7, #4]
 800b6ee:	685b      	ldr	r3, [r3, #4]
 800b6f0:	681a      	ldr	r2, [r3, #0]
 800b6f2:	687b      	ldr	r3, [r7, #4]
 800b6f4:	605a      	str	r2, [r3, #4]
  if (buf->ptr->next == NULL) {
 800b6f6:	687b      	ldr	r3, [r7, #4]
 800b6f8:	685b      	ldr	r3, [r3, #4]
 800b6fa:	681b      	ldr	r3, [r3, #0]
 800b6fc:	2b00      	cmp	r3, #0
 800b6fe:	d101      	bne.n	800b704 <netbuf_next+0x48>
    return 1;
 800b700:	2301      	movs	r3, #1
 800b702:	e000      	b.n	800b706 <netbuf_next+0x4a>
  }
  return 0;
 800b704:	2300      	movs	r3, #0
}
 800b706:	4618      	mov	r0, r3
 800b708:	3708      	adds	r7, #8
 800b70a:	46bd      	mov	sp, r7
 800b70c:	bd80      	pop	{r7, pc}
 800b70e:	bf00      	nop
 800b710:	08018a40 	.word	0x08018a40
 800b714:	08018ba0 	.word	0x08018ba0
 800b718:	08018a90 	.word	0x08018a90

0800b71c <tcpip_timeouts_mbox_fetch>:
 * @param mbox the mbox to fetch the message from
 * @param msg the place to store the message
 */
static void
tcpip_timeouts_mbox_fetch(sys_mbox_t *mbox, void **msg)
{
 800b71c:	b580      	push	{r7, lr}
 800b71e:	b084      	sub	sp, #16
 800b720:	af00      	add	r7, sp, #0
 800b722:	6078      	str	r0, [r7, #4]
 800b724:	6039      	str	r1, [r7, #0]
  u32_t sleeptime, res;

again:
  LWIP_ASSERT_CORE_LOCKED();

  sleeptime = sys_timeouts_sleeptime();
 800b726:	f008 fa53 	bl	8013bd0 <sys_timeouts_sleeptime>
 800b72a:	60f8      	str	r0, [r7, #12]
  if (sleeptime == SYS_TIMEOUTS_SLEEPTIME_INFINITE) {
 800b72c:	68fb      	ldr	r3, [r7, #12]
 800b72e:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b732:	d10b      	bne.n	800b74c <tcpip_timeouts_mbox_fetch+0x30>
    UNLOCK_TCPIP_CORE();
 800b734:	4813      	ldr	r0, [pc, #76]	; (800b784 <tcpip_timeouts_mbox_fetch+0x68>)
 800b736:	f00b fa22 	bl	8016b7e <sys_mutex_unlock>
    sys_arch_mbox_fetch(mbox, msg, 0);
 800b73a:	2200      	movs	r2, #0
 800b73c:	6839      	ldr	r1, [r7, #0]
 800b73e:	6878      	ldr	r0, [r7, #4]
 800b740:	f00b f8f8 	bl	8016934 <sys_arch_mbox_fetch>
    LOCK_TCPIP_CORE();
 800b744:	480f      	ldr	r0, [pc, #60]	; (800b784 <tcpip_timeouts_mbox_fetch+0x68>)
 800b746:	f00b fa0b 	bl	8016b60 <sys_mutex_lock>
    return;
 800b74a:	e018      	b.n	800b77e <tcpip_timeouts_mbox_fetch+0x62>
  } else if (sleeptime == 0) {
 800b74c:	68fb      	ldr	r3, [r7, #12]
 800b74e:	2b00      	cmp	r3, #0
 800b750:	d102      	bne.n	800b758 <tcpip_timeouts_mbox_fetch+0x3c>
    sys_check_timeouts();
 800b752:	f008 fa03 	bl	8013b5c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b756:	e7e6      	b.n	800b726 <tcpip_timeouts_mbox_fetch+0xa>
  }

  UNLOCK_TCPIP_CORE();
 800b758:	480a      	ldr	r0, [pc, #40]	; (800b784 <tcpip_timeouts_mbox_fetch+0x68>)
 800b75a:	f00b fa10 	bl	8016b7e <sys_mutex_unlock>
  res = sys_arch_mbox_fetch(mbox, msg, sleeptime);
 800b75e:	68fa      	ldr	r2, [r7, #12]
 800b760:	6839      	ldr	r1, [r7, #0]
 800b762:	6878      	ldr	r0, [r7, #4]
 800b764:	f00b f8e6 	bl	8016934 <sys_arch_mbox_fetch>
 800b768:	60b8      	str	r0, [r7, #8]
  LOCK_TCPIP_CORE();
 800b76a:	4806      	ldr	r0, [pc, #24]	; (800b784 <tcpip_timeouts_mbox_fetch+0x68>)
 800b76c:	f00b f9f8 	bl	8016b60 <sys_mutex_lock>
  if (res == SYS_ARCH_TIMEOUT) {
 800b770:	68bb      	ldr	r3, [r7, #8]
 800b772:	f1b3 3fff 	cmp.w	r3, #4294967295
 800b776:	d102      	bne.n	800b77e <tcpip_timeouts_mbox_fetch+0x62>
    /* If a SYS_ARCH_TIMEOUT value is returned, a timeout occurred
       before a message could be fetched. */
    sys_check_timeouts();
 800b778:	f008 f9f0 	bl	8013b5c <sys_check_timeouts>
    /* We try again to fetch a message from the mbox. */
    goto again;
 800b77c:	e7d3      	b.n	800b726 <tcpip_timeouts_mbox_fetch+0xa>
  }
}
 800b77e:	3710      	adds	r7, #16
 800b780:	46bd      	mov	sp, r7
 800b782:	bd80      	pop	{r7, pc}
 800b784:	20009edc 	.word	0x20009edc

0800b788 <tcpip_thread>:
 *
 * @param arg unused argument
 */
static void
tcpip_thread(void *arg)
{
 800b788:	b580      	push	{r7, lr}
 800b78a:	b084      	sub	sp, #16
 800b78c:	af00      	add	r7, sp, #0
 800b78e:	6078      	str	r0, [r7, #4]
  struct tcpip_msg *msg;
  LWIP_UNUSED_ARG(arg);

  LWIP_MARK_TCPIP_THREAD();

  LOCK_TCPIP_CORE();
 800b790:	4810      	ldr	r0, [pc, #64]	; (800b7d4 <tcpip_thread+0x4c>)
 800b792:	f00b f9e5 	bl	8016b60 <sys_mutex_lock>
  if (tcpip_init_done != NULL) {
 800b796:	4b10      	ldr	r3, [pc, #64]	; (800b7d8 <tcpip_thread+0x50>)
 800b798:	681b      	ldr	r3, [r3, #0]
 800b79a:	2b00      	cmp	r3, #0
 800b79c:	d005      	beq.n	800b7aa <tcpip_thread+0x22>
    tcpip_init_done(tcpip_init_done_arg);
 800b79e:	4b0e      	ldr	r3, [pc, #56]	; (800b7d8 <tcpip_thread+0x50>)
 800b7a0:	681b      	ldr	r3, [r3, #0]
 800b7a2:	4a0e      	ldr	r2, [pc, #56]	; (800b7dc <tcpip_thread+0x54>)
 800b7a4:	6812      	ldr	r2, [r2, #0]
 800b7a6:	4610      	mov	r0, r2
 800b7a8:	4798      	blx	r3
  }

  while (1) {                          /* MAIN Loop */
    LWIP_TCPIP_THREAD_ALIVE();
    /* wait for a message, timeouts are processed while waiting */
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b7aa:	f107 030c 	add.w	r3, r7, #12
 800b7ae:	4619      	mov	r1, r3
 800b7b0:	480b      	ldr	r0, [pc, #44]	; (800b7e0 <tcpip_thread+0x58>)
 800b7b2:	f7ff ffb3 	bl	800b71c <tcpip_timeouts_mbox_fetch>
    if (msg == NULL) {
 800b7b6:	68fb      	ldr	r3, [r7, #12]
 800b7b8:	2b00      	cmp	r3, #0
 800b7ba:	d106      	bne.n	800b7ca <tcpip_thread+0x42>
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: NULL\n"));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b7bc:	4b09      	ldr	r3, [pc, #36]	; (800b7e4 <tcpip_thread+0x5c>)
 800b7be:	2291      	movs	r2, #145	; 0x91
 800b7c0:	4909      	ldr	r1, [pc, #36]	; (800b7e8 <tcpip_thread+0x60>)
 800b7c2:	480a      	ldr	r0, [pc, #40]	; (800b7ec <tcpip_thread+0x64>)
 800b7c4:	f00b fb14 	bl	8016df0 <iprintf>
      continue;
 800b7c8:	e003      	b.n	800b7d2 <tcpip_thread+0x4a>
    }
    tcpip_thread_handle_msg(msg);
 800b7ca:	68fb      	ldr	r3, [r7, #12]
 800b7cc:	4618      	mov	r0, r3
 800b7ce:	f000 f80f 	bl	800b7f0 <tcpip_thread_handle_msg>
    TCPIP_MBOX_FETCH(&tcpip_mbox, (void **)&msg);
 800b7d2:	e7ea      	b.n	800b7aa <tcpip_thread+0x22>
 800b7d4:	20009edc 	.word	0x20009edc
 800b7d8:	20009ed0 	.word	0x20009ed0
 800b7dc:	20009ed4 	.word	0x20009ed4
 800b7e0:	20009ed8 	.word	0x20009ed8
 800b7e4:	08018bd8 	.word	0x08018bd8
 800b7e8:	08018c08 	.word	0x08018c08
 800b7ec:	08018c28 	.word	0x08018c28

0800b7f0 <tcpip_thread_handle_msg>:
/* Handle a single tcpip_msg
 * This is in its own function for access by tests only.
 */
static void
tcpip_thread_handle_msg(struct tcpip_msg *msg)
{
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	6078      	str	r0, [r7, #4]
  switch (msg->type) {
 800b7f8:	687b      	ldr	r3, [r7, #4]
 800b7fa:	781b      	ldrb	r3, [r3, #0]
 800b7fc:	2b02      	cmp	r3, #2
 800b7fe:	d026      	beq.n	800b84e <tcpip_thread_handle_msg+0x5e>
 800b800:	2b02      	cmp	r3, #2
 800b802:	dc2b      	bgt.n	800b85c <tcpip_thread_handle_msg+0x6c>
 800b804:	2b00      	cmp	r3, #0
 800b806:	d002      	beq.n	800b80e <tcpip_thread_handle_msg+0x1e>
 800b808:	2b01      	cmp	r3, #1
 800b80a:	d015      	beq.n	800b838 <tcpip_thread_handle_msg+0x48>
 800b80c:	e026      	b.n	800b85c <tcpip_thread_handle_msg+0x6c>
#endif /* !LWIP_TCPIP_CORE_LOCKING */

#if !LWIP_TCPIP_CORE_LOCKING_INPUT
    case TCPIP_MSG_INPKT:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: PACKET %p\n", (void *)msg));
      if (msg->msg.inp.input_fn(msg->msg.inp.p, msg->msg.inp.netif) != ERR_OK) {
 800b80e:	687b      	ldr	r3, [r7, #4]
 800b810:	68db      	ldr	r3, [r3, #12]
 800b812:	687a      	ldr	r2, [r7, #4]
 800b814:	6850      	ldr	r0, [r2, #4]
 800b816:	687a      	ldr	r2, [r7, #4]
 800b818:	6892      	ldr	r2, [r2, #8]
 800b81a:	4611      	mov	r1, r2
 800b81c:	4798      	blx	r3
 800b81e:	4603      	mov	r3, r0
 800b820:	2b00      	cmp	r3, #0
 800b822:	d004      	beq.n	800b82e <tcpip_thread_handle_msg+0x3e>
        pbuf_free(msg->msg.inp.p);
 800b824:	687b      	ldr	r3, [r7, #4]
 800b826:	685b      	ldr	r3, [r3, #4]
 800b828:	4618      	mov	r0, r3
 800b82a:	f001 fd21 	bl	800d270 <pbuf_free>
      }
      memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b82e:	6879      	ldr	r1, [r7, #4]
 800b830:	2009      	movs	r0, #9
 800b832:	f000 fe79 	bl	800c528 <memp_free>
      break;
 800b836:	e018      	b.n	800b86a <tcpip_thread_handle_msg+0x7a>
      break;
#endif /* LWIP_TCPIP_TIMEOUT && LWIP_TIMERS */

    case TCPIP_MSG_CALLBACK:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b838:	687b      	ldr	r3, [r7, #4]
 800b83a:	685b      	ldr	r3, [r3, #4]
 800b83c:	687a      	ldr	r2, [r7, #4]
 800b83e:	6892      	ldr	r2, [r2, #8]
 800b840:	4610      	mov	r0, r2
 800b842:	4798      	blx	r3
      memp_free(MEMP_TCPIP_MSG_API, msg);
 800b844:	6879      	ldr	r1, [r7, #4]
 800b846:	2008      	movs	r0, #8
 800b848:	f000 fe6e 	bl	800c528 <memp_free>
      break;
 800b84c:	e00d      	b.n	800b86a <tcpip_thread_handle_msg+0x7a>

    case TCPIP_MSG_CALLBACK_STATIC:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: CALLBACK_STATIC %p\n", (void *)msg));
      msg->msg.cb.function(msg->msg.cb.ctx);
 800b84e:	687b      	ldr	r3, [r7, #4]
 800b850:	685b      	ldr	r3, [r3, #4]
 800b852:	687a      	ldr	r2, [r7, #4]
 800b854:	6892      	ldr	r2, [r2, #8]
 800b856:	4610      	mov	r0, r2
 800b858:	4798      	blx	r3
      break;
 800b85a:	e006      	b.n	800b86a <tcpip_thread_handle_msg+0x7a>

    default:
      LWIP_DEBUGF(TCPIP_DEBUG, ("tcpip_thread: invalid message: %d\n", msg->type));
      LWIP_ASSERT("tcpip_thread: invalid message", 0);
 800b85c:	4b05      	ldr	r3, [pc, #20]	; (800b874 <tcpip_thread_handle_msg+0x84>)
 800b85e:	22cf      	movs	r2, #207	; 0xcf
 800b860:	4905      	ldr	r1, [pc, #20]	; (800b878 <tcpip_thread_handle_msg+0x88>)
 800b862:	4806      	ldr	r0, [pc, #24]	; (800b87c <tcpip_thread_handle_msg+0x8c>)
 800b864:	f00b fac4 	bl	8016df0 <iprintf>
      break;
 800b868:	bf00      	nop
  }
}
 800b86a:	bf00      	nop
 800b86c:	3708      	adds	r7, #8
 800b86e:	46bd      	mov	sp, r7
 800b870:	bd80      	pop	{r7, pc}
 800b872:	bf00      	nop
 800b874:	08018bd8 	.word	0x08018bd8
 800b878:	08018c08 	.word	0x08018c08
 800b87c:	08018c28 	.word	0x08018c28

0800b880 <tcpip_inpkt>:
 * @param inp the network interface on which the packet was received
 * @param input_fn input function to call
 */
err_t
tcpip_inpkt(struct pbuf *p, struct netif *inp, netif_input_fn input_fn)
{
 800b880:	b580      	push	{r7, lr}
 800b882:	b086      	sub	sp, #24
 800b884:	af00      	add	r7, sp, #0
 800b886:	60f8      	str	r0, [r7, #12]
 800b888:	60b9      	str	r1, [r7, #8]
 800b88a:	607a      	str	r2, [r7, #4]
  UNLOCK_TCPIP_CORE();
  return ret;
#else /* LWIP_TCPIP_CORE_LOCKING_INPUT */
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b88c:	481a      	ldr	r0, [pc, #104]	; (800b8f8 <tcpip_inpkt+0x78>)
 800b88e:	f00b f899 	bl	80169c4 <sys_mbox_valid>
 800b892:	4603      	mov	r3, r0
 800b894:	2b00      	cmp	r3, #0
 800b896:	d105      	bne.n	800b8a4 <tcpip_inpkt+0x24>
 800b898:	4b18      	ldr	r3, [pc, #96]	; (800b8fc <tcpip_inpkt+0x7c>)
 800b89a:	22fc      	movs	r2, #252	; 0xfc
 800b89c:	4918      	ldr	r1, [pc, #96]	; (800b900 <tcpip_inpkt+0x80>)
 800b89e:	4819      	ldr	r0, [pc, #100]	; (800b904 <tcpip_inpkt+0x84>)
 800b8a0:	f00b faa6 	bl	8016df0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_INPKT);
 800b8a4:	2009      	movs	r0, #9
 800b8a6:	f000 fdc9 	bl	800c43c <memp_malloc>
 800b8aa:	6178      	str	r0, [r7, #20]
  if (msg == NULL) {
 800b8ac:	697b      	ldr	r3, [r7, #20]
 800b8ae:	2b00      	cmp	r3, #0
 800b8b0:	d102      	bne.n	800b8b8 <tcpip_inpkt+0x38>
    return ERR_MEM;
 800b8b2:	f04f 33ff 	mov.w	r3, #4294967295
 800b8b6:	e01a      	b.n	800b8ee <tcpip_inpkt+0x6e>
  }

  msg->type = TCPIP_MSG_INPKT;
 800b8b8:	697b      	ldr	r3, [r7, #20]
 800b8ba:	2200      	movs	r2, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
  msg->msg.inp.p = p;
 800b8be:	697b      	ldr	r3, [r7, #20]
 800b8c0:	68fa      	ldr	r2, [r7, #12]
 800b8c2:	605a      	str	r2, [r3, #4]
  msg->msg.inp.netif = inp;
 800b8c4:	697b      	ldr	r3, [r7, #20]
 800b8c6:	68ba      	ldr	r2, [r7, #8]
 800b8c8:	609a      	str	r2, [r3, #8]
  msg->msg.inp.input_fn = input_fn;
 800b8ca:	697b      	ldr	r3, [r7, #20]
 800b8cc:	687a      	ldr	r2, [r7, #4]
 800b8ce:	60da      	str	r2, [r3, #12]
  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b8d0:	6979      	ldr	r1, [r7, #20]
 800b8d2:	4809      	ldr	r0, [pc, #36]	; (800b8f8 <tcpip_inpkt+0x78>)
 800b8d4:	f00b f814 	bl	8016900 <sys_mbox_trypost>
 800b8d8:	4603      	mov	r3, r0
 800b8da:	2b00      	cmp	r3, #0
 800b8dc:	d006      	beq.n	800b8ec <tcpip_inpkt+0x6c>
    memp_free(MEMP_TCPIP_MSG_INPKT, msg);
 800b8de:	6979      	ldr	r1, [r7, #20]
 800b8e0:	2009      	movs	r0, #9
 800b8e2:	f000 fe21 	bl	800c528 <memp_free>
    return ERR_MEM;
 800b8e6:	f04f 33ff 	mov.w	r3, #4294967295
 800b8ea:	e000      	b.n	800b8ee <tcpip_inpkt+0x6e>
  }
  return ERR_OK;
 800b8ec:	2300      	movs	r3, #0
#endif /* LWIP_TCPIP_CORE_LOCKING_INPUT */
}
 800b8ee:	4618      	mov	r0, r3
 800b8f0:	3718      	adds	r7, #24
 800b8f2:	46bd      	mov	sp, r7
 800b8f4:	bd80      	pop	{r7, pc}
 800b8f6:	bf00      	nop
 800b8f8:	20009ed8 	.word	0x20009ed8
 800b8fc:	08018bd8 	.word	0x08018bd8
 800b900:	08018c50 	.word	0x08018c50
 800b904:	08018c28 	.word	0x08018c28

0800b908 <tcpip_input>:
 *          NETIF_FLAG_ETHERNET flags)
 * @param inp the network interface on which the packet was received
 */
err_t
tcpip_input(struct pbuf *p, struct netif *inp)
{
 800b908:	b580      	push	{r7, lr}
 800b90a:	b082      	sub	sp, #8
 800b90c:	af00      	add	r7, sp, #0
 800b90e:	6078      	str	r0, [r7, #4]
 800b910:	6039      	str	r1, [r7, #0]
#if LWIP_ETHERNET
  if (inp->flags & (NETIF_FLAG_ETHARP | NETIF_FLAG_ETHERNET)) {
 800b912:	683b      	ldr	r3, [r7, #0]
 800b914:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800b918:	f003 0318 	and.w	r3, r3, #24
 800b91c:	2b00      	cmp	r3, #0
 800b91e:	d006      	beq.n	800b92e <tcpip_input+0x26>
    return tcpip_inpkt(p, inp, ethernet_input);
 800b920:	4a08      	ldr	r2, [pc, #32]	; (800b944 <tcpip_input+0x3c>)
 800b922:	6839      	ldr	r1, [r7, #0]
 800b924:	6878      	ldr	r0, [r7, #4]
 800b926:	f7ff ffab 	bl	800b880 <tcpip_inpkt>
 800b92a:	4603      	mov	r3, r0
 800b92c:	e005      	b.n	800b93a <tcpip_input+0x32>
  } else
#endif /* LWIP_ETHERNET */
    return tcpip_inpkt(p, inp, ip_input);
 800b92e:	4a06      	ldr	r2, [pc, #24]	; (800b948 <tcpip_input+0x40>)
 800b930:	6839      	ldr	r1, [r7, #0]
 800b932:	6878      	ldr	r0, [r7, #4]
 800b934:	f7ff ffa4 	bl	800b880 <tcpip_inpkt>
 800b938:	4603      	mov	r3, r0
}
 800b93a:	4618      	mov	r0, r3
 800b93c:	3708      	adds	r7, #8
 800b93e:	46bd      	mov	sp, r7
 800b940:	bd80      	pop	{r7, pc}
 800b942:	bf00      	nop
 800b944:	080166fd 	.word	0x080166fd
 800b948:	08015605 	.word	0x08015605

0800b94c <tcpip_try_callback>:
 *
 * @see tcpip_callback
 */
err_t
tcpip_try_callback(tcpip_callback_fn function, void *ctx)
{
 800b94c:	b580      	push	{r7, lr}
 800b94e:	b084      	sub	sp, #16
 800b950:	af00      	add	r7, sp, #0
 800b952:	6078      	str	r0, [r7, #4]
 800b954:	6039      	str	r1, [r7, #0]
  struct tcpip_msg *msg;

  LWIP_ASSERT("Invalid mbox", sys_mbox_valid_val(tcpip_mbox));
 800b956:	4819      	ldr	r0, [pc, #100]	; (800b9bc <tcpip_try_callback+0x70>)
 800b958:	f00b f834 	bl	80169c4 <sys_mbox_valid>
 800b95c:	4603      	mov	r3, r0
 800b95e:	2b00      	cmp	r3, #0
 800b960:	d106      	bne.n	800b970 <tcpip_try_callback+0x24>
 800b962:	4b17      	ldr	r3, [pc, #92]	; (800b9c0 <tcpip_try_callback+0x74>)
 800b964:	f240 125d 	movw	r2, #349	; 0x15d
 800b968:	4916      	ldr	r1, [pc, #88]	; (800b9c4 <tcpip_try_callback+0x78>)
 800b96a:	4817      	ldr	r0, [pc, #92]	; (800b9c8 <tcpip_try_callback+0x7c>)
 800b96c:	f00b fa40 	bl	8016df0 <iprintf>

  msg = (struct tcpip_msg *)memp_malloc(MEMP_TCPIP_MSG_API);
 800b970:	2008      	movs	r0, #8
 800b972:	f000 fd63 	bl	800c43c <memp_malloc>
 800b976:	60f8      	str	r0, [r7, #12]
  if (msg == NULL) {
 800b978:	68fb      	ldr	r3, [r7, #12]
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	d102      	bne.n	800b984 <tcpip_try_callback+0x38>
    return ERR_MEM;
 800b97e:	f04f 33ff 	mov.w	r3, #4294967295
 800b982:	e017      	b.n	800b9b4 <tcpip_try_callback+0x68>
  }

  msg->type = TCPIP_MSG_CALLBACK;
 800b984:	68fb      	ldr	r3, [r7, #12]
 800b986:	2201      	movs	r2, #1
 800b988:	701a      	strb	r2, [r3, #0]
  msg->msg.cb.function = function;
 800b98a:	68fb      	ldr	r3, [r7, #12]
 800b98c:	687a      	ldr	r2, [r7, #4]
 800b98e:	605a      	str	r2, [r3, #4]
  msg->msg.cb.ctx = ctx;
 800b990:	68fb      	ldr	r3, [r7, #12]
 800b992:	683a      	ldr	r2, [r7, #0]
 800b994:	609a      	str	r2, [r3, #8]

  if (sys_mbox_trypost(&tcpip_mbox, msg) != ERR_OK) {
 800b996:	68f9      	ldr	r1, [r7, #12]
 800b998:	4808      	ldr	r0, [pc, #32]	; (800b9bc <tcpip_try_callback+0x70>)
 800b99a:	f00a ffb1 	bl	8016900 <sys_mbox_trypost>
 800b99e:	4603      	mov	r3, r0
 800b9a0:	2b00      	cmp	r3, #0
 800b9a2:	d006      	beq.n	800b9b2 <tcpip_try_callback+0x66>
    memp_free(MEMP_TCPIP_MSG_API, msg);
 800b9a4:	68f9      	ldr	r1, [r7, #12]
 800b9a6:	2008      	movs	r0, #8
 800b9a8:	f000 fdbe 	bl	800c528 <memp_free>
    return ERR_MEM;
 800b9ac:	f04f 33ff 	mov.w	r3, #4294967295
 800b9b0:	e000      	b.n	800b9b4 <tcpip_try_callback+0x68>
  }
  return ERR_OK;
 800b9b2:	2300      	movs	r3, #0
}
 800b9b4:	4618      	mov	r0, r3
 800b9b6:	3710      	adds	r7, #16
 800b9b8:	46bd      	mov	sp, r7
 800b9ba:	bd80      	pop	{r7, pc}
 800b9bc:	20009ed8 	.word	0x20009ed8
 800b9c0:	08018bd8 	.word	0x08018bd8
 800b9c4:	08018c50 	.word	0x08018c50
 800b9c8:	08018c28 	.word	0x08018c28

0800b9cc <tcpip_send_msg_wait_sem>:
 * @param sem semaphore to wait on
 * @return ERR_OK if the function was called, another err_t if not
 */
err_t
tcpip_send_msg_wait_sem(tcpip_callback_fn fn, void *apimsg, sys_sem_t *sem)
{
 800b9cc:	b580      	push	{r7, lr}
 800b9ce:	b084      	sub	sp, #16
 800b9d0:	af00      	add	r7, sp, #0
 800b9d2:	60f8      	str	r0, [r7, #12]
 800b9d4:	60b9      	str	r1, [r7, #8]
 800b9d6:	607a      	str	r2, [r7, #4]
#if LWIP_TCPIP_CORE_LOCKING
  LWIP_UNUSED_ARG(sem);
  LOCK_TCPIP_CORE();
 800b9d8:	4806      	ldr	r0, [pc, #24]	; (800b9f4 <tcpip_send_msg_wait_sem+0x28>)
 800b9da:	f00b f8c1 	bl	8016b60 <sys_mutex_lock>
  fn(apimsg);
 800b9de:	68fb      	ldr	r3, [r7, #12]
 800b9e0:	68b8      	ldr	r0, [r7, #8]
 800b9e2:	4798      	blx	r3
  UNLOCK_TCPIP_CORE();
 800b9e4:	4803      	ldr	r0, [pc, #12]	; (800b9f4 <tcpip_send_msg_wait_sem+0x28>)
 800b9e6:	f00b f8ca 	bl	8016b7e <sys_mutex_unlock>
  return ERR_OK;
 800b9ea:	2300      	movs	r3, #0
  sys_mbox_post(&tcpip_mbox, &TCPIP_MSG_VAR_REF(msg));
  sys_arch_sem_wait(sem, 0);
  TCPIP_MSG_VAR_FREE(msg);
  return ERR_OK;
#endif /* LWIP_TCPIP_CORE_LOCKING */
}
 800b9ec:	4618      	mov	r0, r3
 800b9ee:	3710      	adds	r7, #16
 800b9f0:	46bd      	mov	sp, r7
 800b9f2:	bd80      	pop	{r7, pc}
 800b9f4:	20009edc 	.word	0x20009edc

0800b9f8 <tcpip_init>:
 * @param initfunc a function to call when tcpip_thread is running and finished initializing
 * @param arg argument to pass to initfunc
 */
void
tcpip_init(tcpip_init_done_fn initfunc, void *arg)
{
 800b9f8:	b580      	push	{r7, lr}
 800b9fa:	b084      	sub	sp, #16
 800b9fc:	af02      	add	r7, sp, #8
 800b9fe:	6078      	str	r0, [r7, #4]
 800ba00:	6039      	str	r1, [r7, #0]
  lwip_init();
 800ba02:	f000 f871 	bl	800bae8 <lwip_init>

  tcpip_init_done = initfunc;
 800ba06:	4a17      	ldr	r2, [pc, #92]	; (800ba64 <tcpip_init+0x6c>)
 800ba08:	687b      	ldr	r3, [r7, #4]
 800ba0a:	6013      	str	r3, [r2, #0]
  tcpip_init_done_arg = arg;
 800ba0c:	4a16      	ldr	r2, [pc, #88]	; (800ba68 <tcpip_init+0x70>)
 800ba0e:	683b      	ldr	r3, [r7, #0]
 800ba10:	6013      	str	r3, [r2, #0]
  if (sys_mbox_new(&tcpip_mbox, TCPIP_MBOX_SIZE) != ERR_OK) {
 800ba12:	2106      	movs	r1, #6
 800ba14:	4815      	ldr	r0, [pc, #84]	; (800ba6c <tcpip_init+0x74>)
 800ba16:	f00a ff47 	bl	80168a8 <sys_mbox_new>
 800ba1a:	4603      	mov	r3, r0
 800ba1c:	2b00      	cmp	r3, #0
 800ba1e:	d006      	beq.n	800ba2e <tcpip_init+0x36>
    LWIP_ASSERT("failed to create tcpip_thread mbox", 0);
 800ba20:	4b13      	ldr	r3, [pc, #76]	; (800ba70 <tcpip_init+0x78>)
 800ba22:	f240 2261 	movw	r2, #609	; 0x261
 800ba26:	4913      	ldr	r1, [pc, #76]	; (800ba74 <tcpip_init+0x7c>)
 800ba28:	4813      	ldr	r0, [pc, #76]	; (800ba78 <tcpip_init+0x80>)
 800ba2a:	f00b f9e1 	bl	8016df0 <iprintf>
  }
#if LWIP_TCPIP_CORE_LOCKING
  if (sys_mutex_new(&lock_tcpip_core) != ERR_OK) {
 800ba2e:	4813      	ldr	r0, [pc, #76]	; (800ba7c <tcpip_init+0x84>)
 800ba30:	f00b f880 	bl	8016b34 <sys_mutex_new>
 800ba34:	4603      	mov	r3, r0
 800ba36:	2b00      	cmp	r3, #0
 800ba38:	d006      	beq.n	800ba48 <tcpip_init+0x50>
    LWIP_ASSERT("failed to create lock_tcpip_core", 0);
 800ba3a:	4b0d      	ldr	r3, [pc, #52]	; (800ba70 <tcpip_init+0x78>)
 800ba3c:	f240 2265 	movw	r2, #613	; 0x265
 800ba40:	490f      	ldr	r1, [pc, #60]	; (800ba80 <tcpip_init+0x88>)
 800ba42:	480d      	ldr	r0, [pc, #52]	; (800ba78 <tcpip_init+0x80>)
 800ba44:	f00b f9d4 	bl	8016df0 <iprintf>
  }
#endif /* LWIP_TCPIP_CORE_LOCKING */

  sys_thread_new(TCPIP_THREAD_NAME, tcpip_thread, NULL, TCPIP_THREAD_STACKSIZE, TCPIP_THREAD_PRIO);
 800ba48:	2318      	movs	r3, #24
 800ba4a:	9300      	str	r3, [sp, #0]
 800ba4c:	f44f 6380 	mov.w	r3, #1024	; 0x400
 800ba50:	2200      	movs	r2, #0
 800ba52:	490c      	ldr	r1, [pc, #48]	; (800ba84 <tcpip_init+0x8c>)
 800ba54:	480c      	ldr	r0, [pc, #48]	; (800ba88 <tcpip_init+0x90>)
 800ba56:	f00b f89f 	bl	8016b98 <sys_thread_new>
}
 800ba5a:	bf00      	nop
 800ba5c:	3708      	adds	r7, #8
 800ba5e:	46bd      	mov	sp, r7
 800ba60:	bd80      	pop	{r7, pc}
 800ba62:	bf00      	nop
 800ba64:	20009ed0 	.word	0x20009ed0
 800ba68:	20009ed4 	.word	0x20009ed4
 800ba6c:	20009ed8 	.word	0x20009ed8
 800ba70:	08018bd8 	.word	0x08018bd8
 800ba74:	08018c60 	.word	0x08018c60
 800ba78:	08018c28 	.word	0x08018c28
 800ba7c:	20009edc 	.word	0x20009edc
 800ba80:	08018c84 	.word	0x08018c84
 800ba84:	0800b789 	.word	0x0800b789
 800ba88:	08018ca8 	.word	0x08018ca8

0800ba8c <lwip_htons>:
 * @param n u16_t in host byte order
 * @return n in network byte order
 */
u16_t
lwip_htons(u16_t n)
{
 800ba8c:	b480      	push	{r7}
 800ba8e:	b083      	sub	sp, #12
 800ba90:	af00      	add	r7, sp, #0
 800ba92:	4603      	mov	r3, r0
 800ba94:	80fb      	strh	r3, [r7, #6]
  return PP_HTONS(n);
 800ba96:	88fb      	ldrh	r3, [r7, #6]
 800ba98:	021b      	lsls	r3, r3, #8
 800ba9a:	b21a      	sxth	r2, r3
 800ba9c:	88fb      	ldrh	r3, [r7, #6]
 800ba9e:	0a1b      	lsrs	r3, r3, #8
 800baa0:	b29b      	uxth	r3, r3
 800baa2:	b21b      	sxth	r3, r3
 800baa4:	4313      	orrs	r3, r2
 800baa6:	b21b      	sxth	r3, r3
 800baa8:	b29b      	uxth	r3, r3
}
 800baaa:	4618      	mov	r0, r3
 800baac:	370c      	adds	r7, #12
 800baae:	46bd      	mov	sp, r7
 800bab0:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bab4:	4770      	bx	lr

0800bab6 <lwip_htonl>:
 * @param n u32_t in host byte order
 * @return n in network byte order
 */
u32_t
lwip_htonl(u32_t n)
{
 800bab6:	b480      	push	{r7}
 800bab8:	b083      	sub	sp, #12
 800baba:	af00      	add	r7, sp, #0
 800babc:	6078      	str	r0, [r7, #4]
  return PP_HTONL(n);
 800babe:	687b      	ldr	r3, [r7, #4]
 800bac0:	061a      	lsls	r2, r3, #24
 800bac2:	687b      	ldr	r3, [r7, #4]
 800bac4:	021b      	lsls	r3, r3, #8
 800bac6:	f403 037f 	and.w	r3, r3, #16711680	; 0xff0000
 800baca:	431a      	orrs	r2, r3
 800bacc:	687b      	ldr	r3, [r7, #4]
 800bace:	0a1b      	lsrs	r3, r3, #8
 800bad0:	f403 437f 	and.w	r3, r3, #65280	; 0xff00
 800bad4:	431a      	orrs	r2, r3
 800bad6:	687b      	ldr	r3, [r7, #4]
 800bad8:	0e1b      	lsrs	r3, r3, #24
 800bada:	4313      	orrs	r3, r2
}
 800badc:	4618      	mov	r0, r3
 800bade:	370c      	adds	r7, #12
 800bae0:	46bd      	mov	sp, r7
 800bae2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bae6:	4770      	bx	lr

0800bae8 <lwip_init>:
 * Initialize all modules.
 * Use this in NO_SYS mode. Use tcpip_init() otherwise.
 */
void
lwip_init(void)
{
 800bae8:	b580      	push	{r7, lr}
 800baea:	b082      	sub	sp, #8
 800baec:	af00      	add	r7, sp, #0
#ifndef LWIP_SKIP_CONST_CHECK
  int a = 0;
 800baee:	2300      	movs	r3, #0
 800baf0:	607b      	str	r3, [r7, #4]
#endif

  /* Modules initialization */
  stats_init();
#if !NO_SYS
  sys_init();
 800baf2:	f00b f813 	bl	8016b1c <sys_init>
#endif /* !NO_SYS */
  mem_init();
 800baf6:	f000 f8d5 	bl	800bca4 <mem_init>
  memp_init();
 800bafa:	f000 fc31 	bl	800c360 <memp_init>
  pbuf_init();
  netif_init();
 800bafe:	f000 fd3d 	bl	800c57c <netif_init>
#endif /* LWIP_IPV4 */
#if LWIP_RAW
  raw_init();
#endif /* LWIP_RAW */
#if LWIP_UDP
  udp_init();
 800bb02:	f008 f89d 	bl	8013c40 <udp_init>
#endif /* LWIP_UDP */
#if LWIP_TCP
  tcp_init();
 800bb06:	f001 fe4d 	bl	800d7a4 <tcp_init>
#if PPP_SUPPORT
  ppp_init();
#endif

#if LWIP_TIMERS
  sys_timeouts_init();
 800bb0a:	f007 ffdf 	bl	8013acc <sys_timeouts_init>
#endif /* LWIP_TIMERS */
}
 800bb0e:	bf00      	nop
 800bb10:	3708      	adds	r7, #8
 800bb12:	46bd      	mov	sp, r7
 800bb14:	bd80      	pop	{r7, pc}
	...

0800bb18 <ptr_to_mem>:
#define mem_overflow_check_element(mem)
#endif /* MEM_OVERFLOW_CHECK */

static struct mem *
ptr_to_mem(mem_size_t ptr)
{
 800bb18:	b480      	push	{r7}
 800bb1a:	b083      	sub	sp, #12
 800bb1c:	af00      	add	r7, sp, #0
 800bb1e:	4603      	mov	r3, r0
 800bb20:	80fb      	strh	r3, [r7, #6]
  return (struct mem *)(void *)&ram[ptr];
 800bb22:	4b05      	ldr	r3, [pc, #20]	; (800bb38 <ptr_to_mem+0x20>)
 800bb24:	681a      	ldr	r2, [r3, #0]
 800bb26:	88fb      	ldrh	r3, [r7, #6]
 800bb28:	4413      	add	r3, r2
}
 800bb2a:	4618      	mov	r0, r3
 800bb2c:	370c      	adds	r7, #12
 800bb2e:	46bd      	mov	sp, r7
 800bb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb34:	4770      	bx	lr
 800bb36:	bf00      	nop
 800bb38:	2000c70c 	.word	0x2000c70c

0800bb3c <mem_to_ptr>:

static mem_size_t
mem_to_ptr(void *mem)
{
 800bb3c:	b480      	push	{r7}
 800bb3e:	b083      	sub	sp, #12
 800bb40:	af00      	add	r7, sp, #0
 800bb42:	6078      	str	r0, [r7, #4]
  return (mem_size_t)((u8_t *)mem - ram);
 800bb44:	4b05      	ldr	r3, [pc, #20]	; (800bb5c <mem_to_ptr+0x20>)
 800bb46:	681b      	ldr	r3, [r3, #0]
 800bb48:	687a      	ldr	r2, [r7, #4]
 800bb4a:	1ad3      	subs	r3, r2, r3
 800bb4c:	b29b      	uxth	r3, r3
}
 800bb4e:	4618      	mov	r0, r3
 800bb50:	370c      	adds	r7, #12
 800bb52:	46bd      	mov	sp, r7
 800bb54:	f85d 7b04 	ldr.w	r7, [sp], #4
 800bb58:	4770      	bx	lr
 800bb5a:	bf00      	nop
 800bb5c:	2000c70c 	.word	0x2000c70c

0800bb60 <plug_holes>:
 * This assumes access to the heap is protected by the calling function
 * already.
 */
static void
plug_holes(struct mem *mem)
{
 800bb60:	b590      	push	{r4, r7, lr}
 800bb62:	b085      	sub	sp, #20
 800bb64:	af00      	add	r7, sp, #0
 800bb66:	6078      	str	r0, [r7, #4]
  struct mem *nmem;
  struct mem *pmem;

  LWIP_ASSERT("plug_holes: mem >= ram", (u8_t *)mem >= ram);
 800bb68:	4b45      	ldr	r3, [pc, #276]	; (800bc80 <plug_holes+0x120>)
 800bb6a:	681b      	ldr	r3, [r3, #0]
 800bb6c:	687a      	ldr	r2, [r7, #4]
 800bb6e:	429a      	cmp	r2, r3
 800bb70:	d206      	bcs.n	800bb80 <plug_holes+0x20>
 800bb72:	4b44      	ldr	r3, [pc, #272]	; (800bc84 <plug_holes+0x124>)
 800bb74:	f240 12df 	movw	r2, #479	; 0x1df
 800bb78:	4943      	ldr	r1, [pc, #268]	; (800bc88 <plug_holes+0x128>)
 800bb7a:	4844      	ldr	r0, [pc, #272]	; (800bc8c <plug_holes+0x12c>)
 800bb7c:	f00b f938 	bl	8016df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem < ram_end", (u8_t *)mem < (u8_t *)ram_end);
 800bb80:	4b43      	ldr	r3, [pc, #268]	; (800bc90 <plug_holes+0x130>)
 800bb82:	681b      	ldr	r3, [r3, #0]
 800bb84:	687a      	ldr	r2, [r7, #4]
 800bb86:	429a      	cmp	r2, r3
 800bb88:	d306      	bcc.n	800bb98 <plug_holes+0x38>
 800bb8a:	4b3e      	ldr	r3, [pc, #248]	; (800bc84 <plug_holes+0x124>)
 800bb8c:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 800bb90:	4940      	ldr	r1, [pc, #256]	; (800bc94 <plug_holes+0x134>)
 800bb92:	483e      	ldr	r0, [pc, #248]	; (800bc8c <plug_holes+0x12c>)
 800bb94:	f00b f92c 	bl	8016df0 <iprintf>
  LWIP_ASSERT("plug_holes: mem->used == 0", mem->used == 0);
 800bb98:	687b      	ldr	r3, [r7, #4]
 800bb9a:	791b      	ldrb	r3, [r3, #4]
 800bb9c:	2b00      	cmp	r3, #0
 800bb9e:	d006      	beq.n	800bbae <plug_holes+0x4e>
 800bba0:	4b38      	ldr	r3, [pc, #224]	; (800bc84 <plug_holes+0x124>)
 800bba2:	f240 12e1 	movw	r2, #481	; 0x1e1
 800bba6:	493c      	ldr	r1, [pc, #240]	; (800bc98 <plug_holes+0x138>)
 800bba8:	4838      	ldr	r0, [pc, #224]	; (800bc8c <plug_holes+0x12c>)
 800bbaa:	f00b f921 	bl	8016df0 <iprintf>

  /* plug hole forward */
  LWIP_ASSERT("plug_holes: mem->next <= MEM_SIZE_ALIGNED", mem->next <= MEM_SIZE_ALIGNED);
 800bbae:	687b      	ldr	r3, [r7, #4]
 800bbb0:	881b      	ldrh	r3, [r3, #0]
 800bbb2:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bbb6:	d906      	bls.n	800bbc6 <plug_holes+0x66>
 800bbb8:	4b32      	ldr	r3, [pc, #200]	; (800bc84 <plug_holes+0x124>)
 800bbba:	f44f 72f2 	mov.w	r2, #484	; 0x1e4
 800bbbe:	4937      	ldr	r1, [pc, #220]	; (800bc9c <plug_holes+0x13c>)
 800bbc0:	4832      	ldr	r0, [pc, #200]	; (800bc8c <plug_holes+0x12c>)
 800bbc2:	f00b f915 	bl	8016df0 <iprintf>

  nmem = ptr_to_mem(mem->next);
 800bbc6:	687b      	ldr	r3, [r7, #4]
 800bbc8:	881b      	ldrh	r3, [r3, #0]
 800bbca:	4618      	mov	r0, r3
 800bbcc:	f7ff ffa4 	bl	800bb18 <ptr_to_mem>
 800bbd0:	60f8      	str	r0, [r7, #12]
  if (mem != nmem && nmem->used == 0 && (u8_t *)nmem != (u8_t *)ram_end) {
 800bbd2:	687a      	ldr	r2, [r7, #4]
 800bbd4:	68fb      	ldr	r3, [r7, #12]
 800bbd6:	429a      	cmp	r2, r3
 800bbd8:	d024      	beq.n	800bc24 <plug_holes+0xc4>
 800bbda:	68fb      	ldr	r3, [r7, #12]
 800bbdc:	791b      	ldrb	r3, [r3, #4]
 800bbde:	2b00      	cmp	r3, #0
 800bbe0:	d120      	bne.n	800bc24 <plug_holes+0xc4>
 800bbe2:	4b2b      	ldr	r3, [pc, #172]	; (800bc90 <plug_holes+0x130>)
 800bbe4:	681b      	ldr	r3, [r3, #0]
 800bbe6:	68fa      	ldr	r2, [r7, #12]
 800bbe8:	429a      	cmp	r2, r3
 800bbea:	d01b      	beq.n	800bc24 <plug_holes+0xc4>
    /* if mem->next is unused and not end of ram, combine mem and mem->next */
    if (lfree == nmem) {
 800bbec:	4b2c      	ldr	r3, [pc, #176]	; (800bca0 <plug_holes+0x140>)
 800bbee:	681b      	ldr	r3, [r3, #0]
 800bbf0:	68fa      	ldr	r2, [r7, #12]
 800bbf2:	429a      	cmp	r2, r3
 800bbf4:	d102      	bne.n	800bbfc <plug_holes+0x9c>
      lfree = mem;
 800bbf6:	4a2a      	ldr	r2, [pc, #168]	; (800bca0 <plug_holes+0x140>)
 800bbf8:	687b      	ldr	r3, [r7, #4]
 800bbfa:	6013      	str	r3, [r2, #0]
    }
    mem->next = nmem->next;
 800bbfc:	68fb      	ldr	r3, [r7, #12]
 800bbfe:	881a      	ldrh	r2, [r3, #0]
 800bc00:	687b      	ldr	r3, [r7, #4]
 800bc02:	801a      	strh	r2, [r3, #0]
    if (nmem->next != MEM_SIZE_ALIGNED) {
 800bc04:	68fb      	ldr	r3, [r7, #12]
 800bc06:	881b      	ldrh	r3, [r3, #0]
 800bc08:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bc0c:	d00a      	beq.n	800bc24 <plug_holes+0xc4>
      ptr_to_mem(nmem->next)->prev = mem_to_ptr(mem);
 800bc0e:	68fb      	ldr	r3, [r7, #12]
 800bc10:	881b      	ldrh	r3, [r3, #0]
 800bc12:	4618      	mov	r0, r3
 800bc14:	f7ff ff80 	bl	800bb18 <ptr_to_mem>
 800bc18:	4604      	mov	r4, r0
 800bc1a:	6878      	ldr	r0, [r7, #4]
 800bc1c:	f7ff ff8e 	bl	800bb3c <mem_to_ptr>
 800bc20:	4603      	mov	r3, r0
 800bc22:	8063      	strh	r3, [r4, #2]
    }
  }

  /* plug hole backward */
  pmem = ptr_to_mem(mem->prev);
 800bc24:	687b      	ldr	r3, [r7, #4]
 800bc26:	885b      	ldrh	r3, [r3, #2]
 800bc28:	4618      	mov	r0, r3
 800bc2a:	f7ff ff75 	bl	800bb18 <ptr_to_mem>
 800bc2e:	60b8      	str	r0, [r7, #8]
  if (pmem != mem && pmem->used == 0) {
 800bc30:	68ba      	ldr	r2, [r7, #8]
 800bc32:	687b      	ldr	r3, [r7, #4]
 800bc34:	429a      	cmp	r2, r3
 800bc36:	d01f      	beq.n	800bc78 <plug_holes+0x118>
 800bc38:	68bb      	ldr	r3, [r7, #8]
 800bc3a:	791b      	ldrb	r3, [r3, #4]
 800bc3c:	2b00      	cmp	r3, #0
 800bc3e:	d11b      	bne.n	800bc78 <plug_holes+0x118>
    /* if mem->prev is unused, combine mem and mem->prev */
    if (lfree == mem) {
 800bc40:	4b17      	ldr	r3, [pc, #92]	; (800bca0 <plug_holes+0x140>)
 800bc42:	681b      	ldr	r3, [r3, #0]
 800bc44:	687a      	ldr	r2, [r7, #4]
 800bc46:	429a      	cmp	r2, r3
 800bc48:	d102      	bne.n	800bc50 <plug_holes+0xf0>
      lfree = pmem;
 800bc4a:	4a15      	ldr	r2, [pc, #84]	; (800bca0 <plug_holes+0x140>)
 800bc4c:	68bb      	ldr	r3, [r7, #8]
 800bc4e:	6013      	str	r3, [r2, #0]
    }
    pmem->next = mem->next;
 800bc50:	687b      	ldr	r3, [r7, #4]
 800bc52:	881a      	ldrh	r2, [r3, #0]
 800bc54:	68bb      	ldr	r3, [r7, #8]
 800bc56:	801a      	strh	r2, [r3, #0]
    if (mem->next != MEM_SIZE_ALIGNED) {
 800bc58:	687b      	ldr	r3, [r7, #4]
 800bc5a:	881b      	ldrh	r3, [r3, #0]
 800bc5c:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bc60:	d00a      	beq.n	800bc78 <plug_holes+0x118>
      ptr_to_mem(mem->next)->prev = mem_to_ptr(pmem);
 800bc62:	687b      	ldr	r3, [r7, #4]
 800bc64:	881b      	ldrh	r3, [r3, #0]
 800bc66:	4618      	mov	r0, r3
 800bc68:	f7ff ff56 	bl	800bb18 <ptr_to_mem>
 800bc6c:	4604      	mov	r4, r0
 800bc6e:	68b8      	ldr	r0, [r7, #8]
 800bc70:	f7ff ff64 	bl	800bb3c <mem_to_ptr>
 800bc74:	4603      	mov	r3, r0
 800bc76:	8063      	strh	r3, [r4, #2]
    }
  }
}
 800bc78:	bf00      	nop
 800bc7a:	3714      	adds	r7, #20
 800bc7c:	46bd      	mov	sp, r7
 800bc7e:	bd90      	pop	{r4, r7, pc}
 800bc80:	2000c70c 	.word	0x2000c70c
 800bc84:	08018cb8 	.word	0x08018cb8
 800bc88:	08018ce8 	.word	0x08018ce8
 800bc8c:	08018d00 	.word	0x08018d00
 800bc90:	2000c710 	.word	0x2000c710
 800bc94:	08018d28 	.word	0x08018d28
 800bc98:	08018d44 	.word	0x08018d44
 800bc9c:	08018d60 	.word	0x08018d60
 800bca0:	2000c718 	.word	0x2000c718

0800bca4 <mem_init>:
/**
 * Zero the heap and initialize start, end and lowest-free
 */
void
mem_init(void)
{
 800bca4:	b580      	push	{r7, lr}
 800bca6:	b082      	sub	sp, #8
 800bca8:	af00      	add	r7, sp, #0

  LWIP_ASSERT("Sanity check alignment",
              (SIZEOF_STRUCT_MEM & (MEM_ALIGNMENT - 1)) == 0);

  /* align the heap */
  ram = (u8_t *)LWIP_MEM_ALIGN(LWIP_RAM_HEAP_POINTER);
 800bcaa:	4b1f      	ldr	r3, [pc, #124]	; (800bd28 <mem_init+0x84>)
 800bcac:	3303      	adds	r3, #3
 800bcae:	f023 0303 	bic.w	r3, r3, #3
 800bcb2:	461a      	mov	r2, r3
 800bcb4:	4b1d      	ldr	r3, [pc, #116]	; (800bd2c <mem_init+0x88>)
 800bcb6:	601a      	str	r2, [r3, #0]
  /* initialize the start of the heap */
  mem = (struct mem *)(void *)ram;
 800bcb8:	4b1c      	ldr	r3, [pc, #112]	; (800bd2c <mem_init+0x88>)
 800bcba:	681b      	ldr	r3, [r3, #0]
 800bcbc:	607b      	str	r3, [r7, #4]
  mem->next = MEM_SIZE_ALIGNED;
 800bcbe:	687b      	ldr	r3, [r7, #4]
 800bcc0:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bcc4:	801a      	strh	r2, [r3, #0]
  mem->prev = 0;
 800bcc6:	687b      	ldr	r3, [r7, #4]
 800bcc8:	2200      	movs	r2, #0
 800bcca:	805a      	strh	r2, [r3, #2]
  mem->used = 0;
 800bccc:	687b      	ldr	r3, [r7, #4]
 800bcce:	2200      	movs	r2, #0
 800bcd0:	711a      	strb	r2, [r3, #4]
  /* initialize the end of the heap */
  ram_end = ptr_to_mem(MEM_SIZE_ALIGNED);
 800bcd2:	f44f 5020 	mov.w	r0, #10240	; 0x2800
 800bcd6:	f7ff ff1f 	bl	800bb18 <ptr_to_mem>
 800bcda:	4603      	mov	r3, r0
 800bcdc:	4a14      	ldr	r2, [pc, #80]	; (800bd30 <mem_init+0x8c>)
 800bcde:	6013      	str	r3, [r2, #0]
  ram_end->used = 1;
 800bce0:	4b13      	ldr	r3, [pc, #76]	; (800bd30 <mem_init+0x8c>)
 800bce2:	681b      	ldr	r3, [r3, #0]
 800bce4:	2201      	movs	r2, #1
 800bce6:	711a      	strb	r2, [r3, #4]
  ram_end->next = MEM_SIZE_ALIGNED;
 800bce8:	4b11      	ldr	r3, [pc, #68]	; (800bd30 <mem_init+0x8c>)
 800bcea:	681b      	ldr	r3, [r3, #0]
 800bcec:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bcf0:	801a      	strh	r2, [r3, #0]
  ram_end->prev = MEM_SIZE_ALIGNED;
 800bcf2:	4b0f      	ldr	r3, [pc, #60]	; (800bd30 <mem_init+0x8c>)
 800bcf4:	681b      	ldr	r3, [r3, #0]
 800bcf6:	f44f 5220 	mov.w	r2, #10240	; 0x2800
 800bcfa:	805a      	strh	r2, [r3, #2]
  MEM_SANITY();

  /* initialize the lowest-free pointer to the start of the heap */
  lfree = (struct mem *)(void *)ram;
 800bcfc:	4b0b      	ldr	r3, [pc, #44]	; (800bd2c <mem_init+0x88>)
 800bcfe:	681b      	ldr	r3, [r3, #0]
 800bd00:	4a0c      	ldr	r2, [pc, #48]	; (800bd34 <mem_init+0x90>)
 800bd02:	6013      	str	r3, [r2, #0]

  MEM_STATS_AVAIL(avail, MEM_SIZE_ALIGNED);

  if (sys_mutex_new(&mem_mutex) != ERR_OK) {
 800bd04:	480c      	ldr	r0, [pc, #48]	; (800bd38 <mem_init+0x94>)
 800bd06:	f00a ff15 	bl	8016b34 <sys_mutex_new>
 800bd0a:	4603      	mov	r3, r0
 800bd0c:	2b00      	cmp	r3, #0
 800bd0e:	d006      	beq.n	800bd1e <mem_init+0x7a>
    LWIP_ASSERT("failed to create mem_mutex", 0);
 800bd10:	4b0a      	ldr	r3, [pc, #40]	; (800bd3c <mem_init+0x98>)
 800bd12:	f240 221f 	movw	r2, #543	; 0x21f
 800bd16:	490a      	ldr	r1, [pc, #40]	; (800bd40 <mem_init+0x9c>)
 800bd18:	480a      	ldr	r0, [pc, #40]	; (800bd44 <mem_init+0xa0>)
 800bd1a:	f00b f869 	bl	8016df0 <iprintf>
  }
}
 800bd1e:	bf00      	nop
 800bd20:	3708      	adds	r7, #8
 800bd22:	46bd      	mov	sp, r7
 800bd24:	bd80      	pop	{r7, pc}
 800bd26:	bf00      	nop
 800bd28:	20009ef8 	.word	0x20009ef8
 800bd2c:	2000c70c 	.word	0x2000c70c
 800bd30:	2000c710 	.word	0x2000c710
 800bd34:	2000c718 	.word	0x2000c718
 800bd38:	2000c714 	.word	0x2000c714
 800bd3c:	08018cb8 	.word	0x08018cb8
 800bd40:	08018d8c 	.word	0x08018d8c
 800bd44:	08018d00 	.word	0x08018d00

0800bd48 <mem_link_valid>:
/* Check if a struct mem is correctly linked.
 * If not, double-free is a possible reason.
 */
static int
mem_link_valid(struct mem *mem)
{
 800bd48:	b580      	push	{r7, lr}
 800bd4a:	b086      	sub	sp, #24
 800bd4c:	af00      	add	r7, sp, #0
 800bd4e:	6078      	str	r0, [r7, #4]
  struct mem *nmem, *pmem;
  mem_size_t rmem_idx;
  rmem_idx = mem_to_ptr(mem);
 800bd50:	6878      	ldr	r0, [r7, #4]
 800bd52:	f7ff fef3 	bl	800bb3c <mem_to_ptr>
 800bd56:	4603      	mov	r3, r0
 800bd58:	82fb      	strh	r3, [r7, #22]
  nmem = ptr_to_mem(mem->next);
 800bd5a:	687b      	ldr	r3, [r7, #4]
 800bd5c:	881b      	ldrh	r3, [r3, #0]
 800bd5e:	4618      	mov	r0, r3
 800bd60:	f7ff feda 	bl	800bb18 <ptr_to_mem>
 800bd64:	6138      	str	r0, [r7, #16]
  pmem = ptr_to_mem(mem->prev);
 800bd66:	687b      	ldr	r3, [r7, #4]
 800bd68:	885b      	ldrh	r3, [r3, #2]
 800bd6a:	4618      	mov	r0, r3
 800bd6c:	f7ff fed4 	bl	800bb18 <ptr_to_mem>
 800bd70:	60f8      	str	r0, [r7, #12]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd72:	687b      	ldr	r3, [r7, #4]
 800bd74:	881b      	ldrh	r3, [r3, #0]
 800bd76:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd7a:	d818      	bhi.n	800bdae <mem_link_valid+0x66>
 800bd7c:	687b      	ldr	r3, [r7, #4]
 800bd7e:	885b      	ldrh	r3, [r3, #2]
 800bd80:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bd84:	d813      	bhi.n	800bdae <mem_link_valid+0x66>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd86:	687b      	ldr	r3, [r7, #4]
 800bd88:	885b      	ldrh	r3, [r3, #2]
  if ((mem->next > MEM_SIZE_ALIGNED) || (mem->prev > MEM_SIZE_ALIGNED) ||
 800bd8a:	8afa      	ldrh	r2, [r7, #22]
 800bd8c:	429a      	cmp	r2, r3
 800bd8e:	d004      	beq.n	800bd9a <mem_link_valid+0x52>
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd90:	68fb      	ldr	r3, [r7, #12]
 800bd92:	881b      	ldrh	r3, [r3, #0]
 800bd94:	8afa      	ldrh	r2, [r7, #22]
 800bd96:	429a      	cmp	r2, r3
 800bd98:	d109      	bne.n	800bdae <mem_link_valid+0x66>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bd9a:	4b08      	ldr	r3, [pc, #32]	; (800bdbc <mem_link_valid+0x74>)
 800bd9c:	681b      	ldr	r3, [r3, #0]
      ((mem->prev != rmem_idx) && (pmem->next != rmem_idx)) ||
 800bd9e:	693a      	ldr	r2, [r7, #16]
 800bda0:	429a      	cmp	r2, r3
 800bda2:	d006      	beq.n	800bdb2 <mem_link_valid+0x6a>
      ((nmem != ram_end) && (nmem->prev != rmem_idx))) {
 800bda4:	693b      	ldr	r3, [r7, #16]
 800bda6:	885b      	ldrh	r3, [r3, #2]
 800bda8:	8afa      	ldrh	r2, [r7, #22]
 800bdaa:	429a      	cmp	r2, r3
 800bdac:	d001      	beq.n	800bdb2 <mem_link_valid+0x6a>
    return 0;
 800bdae:	2300      	movs	r3, #0
 800bdb0:	e000      	b.n	800bdb4 <mem_link_valid+0x6c>
  }
  return 1;
 800bdb2:	2301      	movs	r3, #1
}
 800bdb4:	4618      	mov	r0, r3
 800bdb6:	3718      	adds	r7, #24
 800bdb8:	46bd      	mov	sp, r7
 800bdba:	bd80      	pop	{r7, pc}
 800bdbc:	2000c710 	.word	0x2000c710

0800bdc0 <mem_free>:
 * @param rmem is the data portion of a struct mem as returned by a previous
 *             call to mem_malloc()
 */
void
mem_free(void *rmem)
{
 800bdc0:	b580      	push	{r7, lr}
 800bdc2:	b088      	sub	sp, #32
 800bdc4:	af00      	add	r7, sp, #0
 800bdc6:	6078      	str	r0, [r7, #4]
  struct mem *mem;
  LWIP_MEM_FREE_DECL_PROTECT();

  if (rmem == NULL) {
 800bdc8:	687b      	ldr	r3, [r7, #4]
 800bdca:	2b00      	cmp	r3, #0
 800bdcc:	d070      	beq.n	800beb0 <mem_free+0xf0>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS, ("mem_free(p == NULL) was called.\n"));
    return;
  }
  if ((((mem_ptr_t)rmem) & (MEM_ALIGNMENT - 1)) != 0) {
 800bdce:	687b      	ldr	r3, [r7, #4]
 800bdd0:	f003 0303 	and.w	r3, r3, #3
 800bdd4:	2b00      	cmp	r3, #0
 800bdd6:	d00d      	beq.n	800bdf4 <mem_free+0x34>
    LWIP_MEM_ILLEGAL_FREE("mem_free: sanity check alignment");
 800bdd8:	4b37      	ldr	r3, [pc, #220]	; (800beb8 <mem_free+0xf8>)
 800bdda:	f240 2273 	movw	r2, #627	; 0x273
 800bdde:	4937      	ldr	r1, [pc, #220]	; (800bebc <mem_free+0xfc>)
 800bde0:	4837      	ldr	r0, [pc, #220]	; (800bec0 <mem_free+0x100>)
 800bde2:	f00b f805 	bl	8016df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: sanity check alignment\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bde6:	f00a fef7 	bl	8016bd8 <sys_arch_protect>
 800bdea:	60f8      	str	r0, [r7, #12]
 800bdec:	68f8      	ldr	r0, [r7, #12]
 800bdee:	f00a ff01 	bl	8016bf4 <sys_arch_unprotect>
    return;
 800bdf2:	e05e      	b.n	800beb2 <mem_free+0xf2>
  }

  /* Get the corresponding struct mem: */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bdf4:	687b      	ldr	r3, [r7, #4]
 800bdf6:	3b08      	subs	r3, #8
 800bdf8:	61fb      	str	r3, [r7, #28]

  if ((u8_t *)mem < ram || (u8_t *)rmem + MIN_SIZE_ALIGNED > (u8_t *)ram_end) {
 800bdfa:	4b32      	ldr	r3, [pc, #200]	; (800bec4 <mem_free+0x104>)
 800bdfc:	681b      	ldr	r3, [r3, #0]
 800bdfe:	69fa      	ldr	r2, [r7, #28]
 800be00:	429a      	cmp	r2, r3
 800be02:	d306      	bcc.n	800be12 <mem_free+0x52>
 800be04:	687b      	ldr	r3, [r7, #4]
 800be06:	f103 020c 	add.w	r2, r3, #12
 800be0a:	4b2f      	ldr	r3, [pc, #188]	; (800bec8 <mem_free+0x108>)
 800be0c:	681b      	ldr	r3, [r3, #0]
 800be0e:	429a      	cmp	r2, r3
 800be10:	d90d      	bls.n	800be2e <mem_free+0x6e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory");
 800be12:	4b29      	ldr	r3, [pc, #164]	; (800beb8 <mem_free+0xf8>)
 800be14:	f240 227f 	movw	r2, #639	; 0x27f
 800be18:	492c      	ldr	r1, [pc, #176]	; (800becc <mem_free+0x10c>)
 800be1a:	4829      	ldr	r0, [pc, #164]	; (800bec0 <mem_free+0x100>)
 800be1c:	f00a ffe8 	bl	8016df0 <iprintf>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be20:	f00a feda 	bl	8016bd8 <sys_arch_protect>
 800be24:	6138      	str	r0, [r7, #16]
 800be26:	6938      	ldr	r0, [r7, #16]
 800be28:	f00a fee4 	bl	8016bf4 <sys_arch_unprotect>
    return;
 800be2c:	e041      	b.n	800beb2 <mem_free+0xf2>
  }
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800be2e:	4828      	ldr	r0, [pc, #160]	; (800bed0 <mem_free+0x110>)
 800be30:	f00a fe96 	bl	8016b60 <sys_mutex_lock>
  /* mem has to be in a used state */
  if (!mem->used) {
 800be34:	69fb      	ldr	r3, [r7, #28]
 800be36:	791b      	ldrb	r3, [r3, #4]
 800be38:	2b00      	cmp	r3, #0
 800be3a:	d110      	bne.n	800be5e <mem_free+0x9e>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: double free");
 800be3c:	4b1e      	ldr	r3, [pc, #120]	; (800beb8 <mem_free+0xf8>)
 800be3e:	f44f 7223 	mov.w	r2, #652	; 0x28c
 800be42:	4924      	ldr	r1, [pc, #144]	; (800bed4 <mem_free+0x114>)
 800be44:	481e      	ldr	r0, [pc, #120]	; (800bec0 <mem_free+0x100>)
 800be46:	f00a ffd3 	bl	8016df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be4a:	4821      	ldr	r0, [pc, #132]	; (800bed0 <mem_free+0x110>)
 800be4c:	f00a fe97 	bl	8016b7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be50:	f00a fec2 	bl	8016bd8 <sys_arch_protect>
 800be54:	6178      	str	r0, [r7, #20]
 800be56:	6978      	ldr	r0, [r7, #20]
 800be58:	f00a fecc 	bl	8016bf4 <sys_arch_unprotect>
    return;
 800be5c:	e029      	b.n	800beb2 <mem_free+0xf2>
  }

  if (!mem_link_valid(mem)) {
 800be5e:	69f8      	ldr	r0, [r7, #28]
 800be60:	f7ff ff72 	bl	800bd48 <mem_link_valid>
 800be64:	4603      	mov	r3, r0
 800be66:	2b00      	cmp	r3, #0
 800be68:	d110      	bne.n	800be8c <mem_free+0xcc>
    LWIP_MEM_ILLEGAL_FREE("mem_free: illegal memory: non-linked: double free");
 800be6a:	4b13      	ldr	r3, [pc, #76]	; (800beb8 <mem_free+0xf8>)
 800be6c:	f240 2295 	movw	r2, #661	; 0x295
 800be70:	4919      	ldr	r1, [pc, #100]	; (800bed8 <mem_free+0x118>)
 800be72:	4813      	ldr	r0, [pc, #76]	; (800bec0 <mem_free+0x100>)
 800be74:	f00a ffbc 	bl	8016df0 <iprintf>
    LWIP_MEM_FREE_UNPROTECT();
 800be78:	4815      	ldr	r0, [pc, #84]	; (800bed0 <mem_free+0x110>)
 800be7a:	f00a fe80 	bl	8016b7e <sys_mutex_unlock>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_free: illegal memory: non-linked: double free?\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800be7e:	f00a feab 	bl	8016bd8 <sys_arch_protect>
 800be82:	61b8      	str	r0, [r7, #24]
 800be84:	69b8      	ldr	r0, [r7, #24]
 800be86:	f00a feb5 	bl	8016bf4 <sys_arch_unprotect>
    return;
 800be8a:	e012      	b.n	800beb2 <mem_free+0xf2>
  }

  /* mem is now unused. */
  mem->used = 0;
 800be8c:	69fb      	ldr	r3, [r7, #28]
 800be8e:	2200      	movs	r2, #0
 800be90:	711a      	strb	r2, [r3, #4]

  if (mem < lfree) {
 800be92:	4b12      	ldr	r3, [pc, #72]	; (800bedc <mem_free+0x11c>)
 800be94:	681b      	ldr	r3, [r3, #0]
 800be96:	69fa      	ldr	r2, [r7, #28]
 800be98:	429a      	cmp	r2, r3
 800be9a:	d202      	bcs.n	800bea2 <mem_free+0xe2>
    /* the newly freed struct is now the lowest */
    lfree = mem;
 800be9c:	4a0f      	ldr	r2, [pc, #60]	; (800bedc <mem_free+0x11c>)
 800be9e:	69fb      	ldr	r3, [r7, #28]
 800bea0:	6013      	str	r3, [r2, #0]
  }

  MEM_STATS_DEC_USED(used, mem->next - (mem_size_t)(((u8_t *)mem - ram)));

  /* finally, see if prev or next are free also */
  plug_holes(mem);
 800bea2:	69f8      	ldr	r0, [r7, #28]
 800bea4:	f7ff fe5c 	bl	800bb60 <plug_holes>
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800bea8:	4809      	ldr	r0, [pc, #36]	; (800bed0 <mem_free+0x110>)
 800beaa:	f00a fe68 	bl	8016b7e <sys_mutex_unlock>
 800beae:	e000      	b.n	800beb2 <mem_free+0xf2>
    return;
 800beb0:	bf00      	nop
}
 800beb2:	3720      	adds	r7, #32
 800beb4:	46bd      	mov	sp, r7
 800beb6:	bd80      	pop	{r7, pc}
 800beb8:	08018cb8 	.word	0x08018cb8
 800bebc:	08018da8 	.word	0x08018da8
 800bec0:	08018d00 	.word	0x08018d00
 800bec4:	2000c70c 	.word	0x2000c70c
 800bec8:	2000c710 	.word	0x2000c710
 800becc:	08018dcc 	.word	0x08018dcc
 800bed0:	2000c714 	.word	0x2000c714
 800bed4:	08018de8 	.word	0x08018de8
 800bed8:	08018e10 	.word	0x08018e10
 800bedc:	2000c718 	.word	0x2000c718

0800bee0 <mem_trim>:
 *         or NULL if newsize is > old size, in which case rmem is NOT touched
 *         or freed!
 */
void *
mem_trim(void *rmem, mem_size_t new_size)
{
 800bee0:	b580      	push	{r7, lr}
 800bee2:	b088      	sub	sp, #32
 800bee4:	af00      	add	r7, sp, #0
 800bee6:	6078      	str	r0, [r7, #4]
 800bee8:	460b      	mov	r3, r1
 800beea:	807b      	strh	r3, [r7, #2]
  /* use the FREE_PROTECT here: it protects with sem OR SYS_ARCH_PROTECT */
  LWIP_MEM_FREE_DECL_PROTECT();

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  newsize = (mem_size_t)LWIP_MEM_ALIGN_SIZE(new_size);
 800beec:	887b      	ldrh	r3, [r7, #2]
 800beee:	3303      	adds	r3, #3
 800bef0:	b29b      	uxth	r3, r3
 800bef2:	f023 0303 	bic.w	r3, r3, #3
 800bef6:	83fb      	strh	r3, [r7, #30]
  if (newsize < MIN_SIZE_ALIGNED) {
 800bef8:	8bfb      	ldrh	r3, [r7, #30]
 800befa:	2b0b      	cmp	r3, #11
 800befc:	d801      	bhi.n	800bf02 <mem_trim+0x22>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    newsize = MIN_SIZE_ALIGNED;
 800befe:	230c      	movs	r3, #12
 800bf00:	83fb      	strh	r3, [r7, #30]
  }
#if MEM_OVERFLOW_CHECK
  newsize += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((newsize > MEM_SIZE_ALIGNED) || (newsize < new_size)) {
 800bf02:	8bfb      	ldrh	r3, [r7, #30]
 800bf04:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bf08:	d803      	bhi.n	800bf12 <mem_trim+0x32>
 800bf0a:	8bfa      	ldrh	r2, [r7, #30]
 800bf0c:	887b      	ldrh	r3, [r7, #2]
 800bf0e:	429a      	cmp	r2, r3
 800bf10:	d201      	bcs.n	800bf16 <mem_trim+0x36>
    return NULL;
 800bf12:	2300      	movs	r3, #0
 800bf14:	e0d8      	b.n	800c0c8 <mem_trim+0x1e8>
  }

  LWIP_ASSERT("mem_trim: legal memory", (u8_t *)rmem >= (u8_t *)ram &&
 800bf16:	4b6e      	ldr	r3, [pc, #440]	; (800c0d0 <mem_trim+0x1f0>)
 800bf18:	681b      	ldr	r3, [r3, #0]
 800bf1a:	687a      	ldr	r2, [r7, #4]
 800bf1c:	429a      	cmp	r2, r3
 800bf1e:	d304      	bcc.n	800bf2a <mem_trim+0x4a>
 800bf20:	4b6c      	ldr	r3, [pc, #432]	; (800c0d4 <mem_trim+0x1f4>)
 800bf22:	681b      	ldr	r3, [r3, #0]
 800bf24:	687a      	ldr	r2, [r7, #4]
 800bf26:	429a      	cmp	r2, r3
 800bf28:	d306      	bcc.n	800bf38 <mem_trim+0x58>
 800bf2a:	4b6b      	ldr	r3, [pc, #428]	; (800c0d8 <mem_trim+0x1f8>)
 800bf2c:	f240 22d1 	movw	r2, #721	; 0x2d1
 800bf30:	496a      	ldr	r1, [pc, #424]	; (800c0dc <mem_trim+0x1fc>)
 800bf32:	486b      	ldr	r0, [pc, #428]	; (800c0e0 <mem_trim+0x200>)
 800bf34:	f00a ff5c 	bl	8016df0 <iprintf>
              (u8_t *)rmem < (u8_t *)ram_end);

  if ((u8_t *)rmem < (u8_t *)ram || (u8_t *)rmem >= (u8_t *)ram_end) {
 800bf38:	4b65      	ldr	r3, [pc, #404]	; (800c0d0 <mem_trim+0x1f0>)
 800bf3a:	681b      	ldr	r3, [r3, #0]
 800bf3c:	687a      	ldr	r2, [r7, #4]
 800bf3e:	429a      	cmp	r2, r3
 800bf40:	d304      	bcc.n	800bf4c <mem_trim+0x6c>
 800bf42:	4b64      	ldr	r3, [pc, #400]	; (800c0d4 <mem_trim+0x1f4>)
 800bf44:	681b      	ldr	r3, [r3, #0]
 800bf46:	687a      	ldr	r2, [r7, #4]
 800bf48:	429a      	cmp	r2, r3
 800bf4a:	d307      	bcc.n	800bf5c <mem_trim+0x7c>
    LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("mem_trim: illegal memory\n"));
    /* protect mem stats from concurrent access */
    MEM_STATS_INC_LOCKED(illegal);
 800bf4c:	f00a fe44 	bl	8016bd8 <sys_arch_protect>
 800bf50:	60b8      	str	r0, [r7, #8]
 800bf52:	68b8      	ldr	r0, [r7, #8]
 800bf54:	f00a fe4e 	bl	8016bf4 <sys_arch_unprotect>
    return rmem;
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	e0b5      	b.n	800c0c8 <mem_trim+0x1e8>
  }
  /* Get the corresponding struct mem ... */
  /* cast through void* to get rid of alignment warnings */
  mem = (struct mem *)(void *)((u8_t *)rmem - (SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET));
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	3b08      	subs	r3, #8
 800bf60:	61bb      	str	r3, [r7, #24]
#if MEM_OVERFLOW_CHECK
  mem_overflow_check_element(mem);
#endif
  /* ... and its offset pointer */
  ptr = mem_to_ptr(mem);
 800bf62:	69b8      	ldr	r0, [r7, #24]
 800bf64:	f7ff fdea 	bl	800bb3c <mem_to_ptr>
 800bf68:	4603      	mov	r3, r0
 800bf6a:	82fb      	strh	r3, [r7, #22]

  size = (mem_size_t)((mem_size_t)(mem->next - ptr) - (SIZEOF_STRUCT_MEM + MEM_SANITY_OVERHEAD));
 800bf6c:	69bb      	ldr	r3, [r7, #24]
 800bf6e:	881a      	ldrh	r2, [r3, #0]
 800bf70:	8afb      	ldrh	r3, [r7, #22]
 800bf72:	1ad3      	subs	r3, r2, r3
 800bf74:	b29b      	uxth	r3, r3
 800bf76:	3b08      	subs	r3, #8
 800bf78:	82bb      	strh	r3, [r7, #20]
  LWIP_ASSERT("mem_trim can only shrink memory", newsize <= size);
 800bf7a:	8bfa      	ldrh	r2, [r7, #30]
 800bf7c:	8abb      	ldrh	r3, [r7, #20]
 800bf7e:	429a      	cmp	r2, r3
 800bf80:	d906      	bls.n	800bf90 <mem_trim+0xb0>
 800bf82:	4b55      	ldr	r3, [pc, #340]	; (800c0d8 <mem_trim+0x1f8>)
 800bf84:	f44f 7239 	mov.w	r2, #740	; 0x2e4
 800bf88:	4956      	ldr	r1, [pc, #344]	; (800c0e4 <mem_trim+0x204>)
 800bf8a:	4855      	ldr	r0, [pc, #340]	; (800c0e0 <mem_trim+0x200>)
 800bf8c:	f00a ff30 	bl	8016df0 <iprintf>
  if (newsize > size) {
 800bf90:	8bfa      	ldrh	r2, [r7, #30]
 800bf92:	8abb      	ldrh	r3, [r7, #20]
 800bf94:	429a      	cmp	r2, r3
 800bf96:	d901      	bls.n	800bf9c <mem_trim+0xbc>
    /* not supported */
    return NULL;
 800bf98:	2300      	movs	r3, #0
 800bf9a:	e095      	b.n	800c0c8 <mem_trim+0x1e8>
  }
  if (newsize == size) {
 800bf9c:	8bfa      	ldrh	r2, [r7, #30]
 800bf9e:	8abb      	ldrh	r3, [r7, #20]
 800bfa0:	429a      	cmp	r2, r3
 800bfa2:	d101      	bne.n	800bfa8 <mem_trim+0xc8>
    /* No change in size, simply return */
    return rmem;
 800bfa4:	687b      	ldr	r3, [r7, #4]
 800bfa6:	e08f      	b.n	800c0c8 <mem_trim+0x1e8>
  }

  /* protect the heap from concurrent access */
  LWIP_MEM_FREE_PROTECT();
 800bfa8:	484f      	ldr	r0, [pc, #316]	; (800c0e8 <mem_trim+0x208>)
 800bfaa:	f00a fdd9 	bl	8016b60 <sys_mutex_lock>

  mem2 = ptr_to_mem(mem->next);
 800bfae:	69bb      	ldr	r3, [r7, #24]
 800bfb0:	881b      	ldrh	r3, [r3, #0]
 800bfb2:	4618      	mov	r0, r3
 800bfb4:	f7ff fdb0 	bl	800bb18 <ptr_to_mem>
 800bfb8:	6138      	str	r0, [r7, #16]
  if (mem2->used == 0) {
 800bfba:	693b      	ldr	r3, [r7, #16]
 800bfbc:	791b      	ldrb	r3, [r3, #4]
 800bfbe:	2b00      	cmp	r3, #0
 800bfc0:	d13f      	bne.n	800c042 <mem_trim+0x162>
    /* The next struct is unused, we can simply move it at little */
    mem_size_t next;
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800bfc2:	69bb      	ldr	r3, [r7, #24]
 800bfc4:	881b      	ldrh	r3, [r3, #0]
 800bfc6:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800bfca:	d106      	bne.n	800bfda <mem_trim+0xfa>
 800bfcc:	4b42      	ldr	r3, [pc, #264]	; (800c0d8 <mem_trim+0x1f8>)
 800bfce:	f240 22f5 	movw	r2, #757	; 0x2f5
 800bfd2:	4946      	ldr	r1, [pc, #280]	; (800c0ec <mem_trim+0x20c>)
 800bfd4:	4842      	ldr	r0, [pc, #264]	; (800c0e0 <mem_trim+0x200>)
 800bfd6:	f00a ff0b 	bl	8016df0 <iprintf>
    /* remember the old next pointer */
    next = mem2->next;
 800bfda:	693b      	ldr	r3, [r7, #16]
 800bfdc:	881b      	ldrh	r3, [r3, #0]
 800bfde:	81bb      	strh	r3, [r7, #12]
    /* create new struct mem which is moved directly after the shrinked mem */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800bfe0:	8afa      	ldrh	r2, [r7, #22]
 800bfe2:	8bfb      	ldrh	r3, [r7, #30]
 800bfe4:	4413      	add	r3, r2
 800bfe6:	b29b      	uxth	r3, r3
 800bfe8:	3308      	adds	r3, #8
 800bfea:	81fb      	strh	r3, [r7, #14]
    if (lfree == mem2) {
 800bfec:	4b40      	ldr	r3, [pc, #256]	; (800c0f0 <mem_trim+0x210>)
 800bfee:	681b      	ldr	r3, [r3, #0]
 800bff0:	693a      	ldr	r2, [r7, #16]
 800bff2:	429a      	cmp	r2, r3
 800bff4:	d106      	bne.n	800c004 <mem_trim+0x124>
      lfree = ptr_to_mem(ptr2);
 800bff6:	89fb      	ldrh	r3, [r7, #14]
 800bff8:	4618      	mov	r0, r3
 800bffa:	f7ff fd8d 	bl	800bb18 <ptr_to_mem>
 800bffe:	4603      	mov	r3, r0
 800c000:	4a3b      	ldr	r2, [pc, #236]	; (800c0f0 <mem_trim+0x210>)
 800c002:	6013      	str	r3, [r2, #0]
    }
    mem2 = ptr_to_mem(ptr2);
 800c004:	89fb      	ldrh	r3, [r7, #14]
 800c006:	4618      	mov	r0, r3
 800c008:	f7ff fd86 	bl	800bb18 <ptr_to_mem>
 800c00c:	6138      	str	r0, [r7, #16]
    mem2->used = 0;
 800c00e:	693b      	ldr	r3, [r7, #16]
 800c010:	2200      	movs	r2, #0
 800c012:	711a      	strb	r2, [r3, #4]
    /* restore the next pointer */
    mem2->next = next;
 800c014:	693b      	ldr	r3, [r7, #16]
 800c016:	89ba      	ldrh	r2, [r7, #12]
 800c018:	801a      	strh	r2, [r3, #0]
    /* link it back to mem */
    mem2->prev = ptr;
 800c01a:	693b      	ldr	r3, [r7, #16]
 800c01c:	8afa      	ldrh	r2, [r7, #22]
 800c01e:	805a      	strh	r2, [r3, #2]
    /* link mem to it */
    mem->next = ptr2;
 800c020:	69bb      	ldr	r3, [r7, #24]
 800c022:	89fa      	ldrh	r2, [r7, #14]
 800c024:	801a      	strh	r2, [r3, #0]
    /* last thing to restore linked list: as we have moved mem2,
     * let 'mem2->next->prev' point to mem2 again. but only if mem2->next is not
     * the end of the heap */
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c026:	693b      	ldr	r3, [r7, #16]
 800c028:	881b      	ldrh	r3, [r3, #0]
 800c02a:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c02e:	d047      	beq.n	800c0c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c030:	693b      	ldr	r3, [r7, #16]
 800c032:	881b      	ldrh	r3, [r3, #0]
 800c034:	4618      	mov	r0, r3
 800c036:	f7ff fd6f 	bl	800bb18 <ptr_to_mem>
 800c03a:	4602      	mov	r2, r0
 800c03c:	89fb      	ldrh	r3, [r7, #14]
 800c03e:	8053      	strh	r3, [r2, #2]
 800c040:	e03e      	b.n	800c0c0 <mem_trim+0x1e0>
    }
    MEM_STATS_DEC_USED(used, (size - newsize));
    /* no need to plug holes, we've already done that */
  } else if (newsize + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED <= size) {
 800c042:	8bfb      	ldrh	r3, [r7, #30]
 800c044:	f103 0214 	add.w	r2, r3, #20
 800c048:	8abb      	ldrh	r3, [r7, #20]
 800c04a:	429a      	cmp	r2, r3
 800c04c:	d838      	bhi.n	800c0c0 <mem_trim+0x1e0>
     * Old size ('size') must be big enough to contain at least 'newsize' plus a struct mem
     * ('SIZEOF_STRUCT_MEM') with some data ('MIN_SIZE_ALIGNED').
     * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
     *       region that couldn't hold data, but when mem->next gets freed,
     *       the 2 regions would be combined, resulting in more free memory */
    ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + newsize);
 800c04e:	8afa      	ldrh	r2, [r7, #22]
 800c050:	8bfb      	ldrh	r3, [r7, #30]
 800c052:	4413      	add	r3, r2
 800c054:	b29b      	uxth	r3, r3
 800c056:	3308      	adds	r3, #8
 800c058:	81fb      	strh	r3, [r7, #14]
    LWIP_ASSERT("invalid next ptr", mem->next != MEM_SIZE_ALIGNED);
 800c05a:	69bb      	ldr	r3, [r7, #24]
 800c05c:	881b      	ldrh	r3, [r3, #0]
 800c05e:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c062:	d106      	bne.n	800c072 <mem_trim+0x192>
 800c064:	4b1c      	ldr	r3, [pc, #112]	; (800c0d8 <mem_trim+0x1f8>)
 800c066:	f240 3216 	movw	r2, #790	; 0x316
 800c06a:	4920      	ldr	r1, [pc, #128]	; (800c0ec <mem_trim+0x20c>)
 800c06c:	481c      	ldr	r0, [pc, #112]	; (800c0e0 <mem_trim+0x200>)
 800c06e:	f00a febf 	bl	8016df0 <iprintf>
    mem2 = ptr_to_mem(ptr2);
 800c072:	89fb      	ldrh	r3, [r7, #14]
 800c074:	4618      	mov	r0, r3
 800c076:	f7ff fd4f 	bl	800bb18 <ptr_to_mem>
 800c07a:	6138      	str	r0, [r7, #16]
    if (mem2 < lfree) {
 800c07c:	4b1c      	ldr	r3, [pc, #112]	; (800c0f0 <mem_trim+0x210>)
 800c07e:	681b      	ldr	r3, [r3, #0]
 800c080:	693a      	ldr	r2, [r7, #16]
 800c082:	429a      	cmp	r2, r3
 800c084:	d202      	bcs.n	800c08c <mem_trim+0x1ac>
      lfree = mem2;
 800c086:	4a1a      	ldr	r2, [pc, #104]	; (800c0f0 <mem_trim+0x210>)
 800c088:	693b      	ldr	r3, [r7, #16]
 800c08a:	6013      	str	r3, [r2, #0]
    }
    mem2->used = 0;
 800c08c:	693b      	ldr	r3, [r7, #16]
 800c08e:	2200      	movs	r2, #0
 800c090:	711a      	strb	r2, [r3, #4]
    mem2->next = mem->next;
 800c092:	69bb      	ldr	r3, [r7, #24]
 800c094:	881a      	ldrh	r2, [r3, #0]
 800c096:	693b      	ldr	r3, [r7, #16]
 800c098:	801a      	strh	r2, [r3, #0]
    mem2->prev = ptr;
 800c09a:	693b      	ldr	r3, [r7, #16]
 800c09c:	8afa      	ldrh	r2, [r7, #22]
 800c09e:	805a      	strh	r2, [r3, #2]
    mem->next = ptr2;
 800c0a0:	69bb      	ldr	r3, [r7, #24]
 800c0a2:	89fa      	ldrh	r2, [r7, #14]
 800c0a4:	801a      	strh	r2, [r3, #0]
    if (mem2->next != MEM_SIZE_ALIGNED) {
 800c0a6:	693b      	ldr	r3, [r7, #16]
 800c0a8:	881b      	ldrh	r3, [r3, #0]
 800c0aa:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c0ae:	d007      	beq.n	800c0c0 <mem_trim+0x1e0>
      ptr_to_mem(mem2->next)->prev = ptr2;
 800c0b0:	693b      	ldr	r3, [r7, #16]
 800c0b2:	881b      	ldrh	r3, [r3, #0]
 800c0b4:	4618      	mov	r0, r3
 800c0b6:	f7ff fd2f 	bl	800bb18 <ptr_to_mem>
 800c0ba:	4602      	mov	r2, r0
 800c0bc:	89fb      	ldrh	r3, [r7, #14]
 800c0be:	8053      	strh	r3, [r2, #2]
#endif
  MEM_SANITY();
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  mem_free_count = 1;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_FREE_UNPROTECT();
 800c0c0:	4809      	ldr	r0, [pc, #36]	; (800c0e8 <mem_trim+0x208>)
 800c0c2:	f00a fd5c 	bl	8016b7e <sys_mutex_unlock>
  return rmem;
 800c0c6:	687b      	ldr	r3, [r7, #4]
}
 800c0c8:	4618      	mov	r0, r3
 800c0ca:	3720      	adds	r7, #32
 800c0cc:	46bd      	mov	sp, r7
 800c0ce:	bd80      	pop	{r7, pc}
 800c0d0:	2000c70c 	.word	0x2000c70c
 800c0d4:	2000c710 	.word	0x2000c710
 800c0d8:	08018cb8 	.word	0x08018cb8
 800c0dc:	08018e44 	.word	0x08018e44
 800c0e0:	08018d00 	.word	0x08018d00
 800c0e4:	08018e5c 	.word	0x08018e5c
 800c0e8:	2000c714 	.word	0x2000c714
 800c0ec:	08018e7c 	.word	0x08018e7c
 800c0f0:	2000c718 	.word	0x2000c718

0800c0f4 <mem_malloc>:
 *
 * Note that the returned value will always be aligned (as defined by MEM_ALIGNMENT).
 */
void *
mem_malloc(mem_size_t size_in)
{
 800c0f4:	b580      	push	{r7, lr}
 800c0f6:	b088      	sub	sp, #32
 800c0f8:	af00      	add	r7, sp, #0
 800c0fa:	4603      	mov	r3, r0
 800c0fc:	80fb      	strh	r3, [r7, #6]
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
  u8_t local_mem_free_count = 0;
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  LWIP_MEM_ALLOC_DECL_PROTECT();

  if (size_in == 0) {
 800c0fe:	88fb      	ldrh	r3, [r7, #6]
 800c100:	2b00      	cmp	r3, #0
 800c102:	d101      	bne.n	800c108 <mem_malloc+0x14>
    return NULL;
 800c104:	2300      	movs	r3, #0
 800c106:	e0e2      	b.n	800c2ce <mem_malloc+0x1da>
  }

  /* Expand the size of the allocated memory region so that we can
     adjust for alignment. */
  size = (mem_size_t)LWIP_MEM_ALIGN_SIZE(size_in);
 800c108:	88fb      	ldrh	r3, [r7, #6]
 800c10a:	3303      	adds	r3, #3
 800c10c:	b29b      	uxth	r3, r3
 800c10e:	f023 0303 	bic.w	r3, r3, #3
 800c112:	83bb      	strh	r3, [r7, #28]
  if (size < MIN_SIZE_ALIGNED) {
 800c114:	8bbb      	ldrh	r3, [r7, #28]
 800c116:	2b0b      	cmp	r3, #11
 800c118:	d801      	bhi.n	800c11e <mem_malloc+0x2a>
    /* every data block must be at least MIN_SIZE_ALIGNED long */
    size = MIN_SIZE_ALIGNED;
 800c11a:	230c      	movs	r3, #12
 800c11c:	83bb      	strh	r3, [r7, #28]
  }
#if MEM_OVERFLOW_CHECK
  size += MEM_SANITY_REGION_BEFORE_ALIGNED + MEM_SANITY_REGION_AFTER_ALIGNED;
#endif
  if ((size > MEM_SIZE_ALIGNED) || (size < size_in)) {
 800c11e:	8bbb      	ldrh	r3, [r7, #28]
 800c120:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c124:	d803      	bhi.n	800c12e <mem_malloc+0x3a>
 800c126:	8bba      	ldrh	r2, [r7, #28]
 800c128:	88fb      	ldrh	r3, [r7, #6]
 800c12a:	429a      	cmp	r2, r3
 800c12c:	d201      	bcs.n	800c132 <mem_malloc+0x3e>
    return NULL;
 800c12e:	2300      	movs	r3, #0
 800c130:	e0cd      	b.n	800c2ce <mem_malloc+0x1da>
  }

  /* protect the heap from concurrent access */
  sys_mutex_lock(&mem_mutex);
 800c132:	4869      	ldr	r0, [pc, #420]	; (800c2d8 <mem_malloc+0x1e4>)
 800c134:	f00a fd14 	bl	8016b60 <sys_mutex_lock>
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

    /* Scan through the heap searching for a free block that is big enough,
     * beginning with the lowest free block.
     */
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c138:	4b68      	ldr	r3, [pc, #416]	; (800c2dc <mem_malloc+0x1e8>)
 800c13a:	681b      	ldr	r3, [r3, #0]
 800c13c:	4618      	mov	r0, r3
 800c13e:	f7ff fcfd 	bl	800bb3c <mem_to_ptr>
 800c142:	4603      	mov	r3, r0
 800c144:	83fb      	strh	r3, [r7, #30]
 800c146:	e0b7      	b.n	800c2b8 <mem_malloc+0x1c4>
         ptr = ptr_to_mem(ptr)->next) {
      mem = ptr_to_mem(ptr);
 800c148:	8bfb      	ldrh	r3, [r7, #30]
 800c14a:	4618      	mov	r0, r3
 800c14c:	f7ff fce4 	bl	800bb18 <ptr_to_mem>
 800c150:	6178      	str	r0, [r7, #20]
        local_mem_free_count = 1;
        break;
      }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */

      if ((!mem->used) &&
 800c152:	697b      	ldr	r3, [r7, #20]
 800c154:	791b      	ldrb	r3, [r3, #4]
 800c156:	2b00      	cmp	r3, #0
 800c158:	f040 80a7 	bne.w	800c2aa <mem_malloc+0x1b6>
          (mem->next - (ptr + SIZEOF_STRUCT_MEM)) >= size) {
 800c15c:	697b      	ldr	r3, [r7, #20]
 800c15e:	881b      	ldrh	r3, [r3, #0]
 800c160:	461a      	mov	r2, r3
 800c162:	8bfb      	ldrh	r3, [r7, #30]
 800c164:	1ad3      	subs	r3, r2, r3
 800c166:	f1a3 0208 	sub.w	r2, r3, #8
 800c16a:	8bbb      	ldrh	r3, [r7, #28]
      if ((!mem->used) &&
 800c16c:	429a      	cmp	r2, r3
 800c16e:	f0c0 809c 	bcc.w	800c2aa <mem_malloc+0x1b6>
        /* mem is not used and at least perfect fit is possible:
         * mem->next - (ptr + SIZEOF_STRUCT_MEM) gives us the 'user data size' of mem */

        if (mem->next - (ptr + SIZEOF_STRUCT_MEM) >= (size + SIZEOF_STRUCT_MEM + MIN_SIZE_ALIGNED)) {
 800c172:	697b      	ldr	r3, [r7, #20]
 800c174:	881b      	ldrh	r3, [r3, #0]
 800c176:	461a      	mov	r2, r3
 800c178:	8bfb      	ldrh	r3, [r7, #30]
 800c17a:	1ad3      	subs	r3, r2, r3
 800c17c:	f1a3 0208 	sub.w	r2, r3, #8
 800c180:	8bbb      	ldrh	r3, [r7, #28]
 800c182:	3314      	adds	r3, #20
 800c184:	429a      	cmp	r2, r3
 800c186:	d333      	bcc.n	800c1f0 <mem_malloc+0xfc>
           * struct mem would fit in but no data between mem2 and mem2->next
           * @todo we could leave out MIN_SIZE_ALIGNED. We would create an empty
           *       region that couldn't hold data, but when mem->next gets freed,
           *       the 2 regions would be combined, resulting in more free memory
           */
          ptr2 = (mem_size_t)(ptr + SIZEOF_STRUCT_MEM + size);
 800c188:	8bfa      	ldrh	r2, [r7, #30]
 800c18a:	8bbb      	ldrh	r3, [r7, #28]
 800c18c:	4413      	add	r3, r2
 800c18e:	b29b      	uxth	r3, r3
 800c190:	3308      	adds	r3, #8
 800c192:	827b      	strh	r3, [r7, #18]
          LWIP_ASSERT("invalid next ptr",ptr2 != MEM_SIZE_ALIGNED);
 800c194:	8a7b      	ldrh	r3, [r7, #18]
 800c196:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c19a:	d106      	bne.n	800c1aa <mem_malloc+0xb6>
 800c19c:	4b50      	ldr	r3, [pc, #320]	; (800c2e0 <mem_malloc+0x1ec>)
 800c19e:	f240 3287 	movw	r2, #903	; 0x387
 800c1a2:	4950      	ldr	r1, [pc, #320]	; (800c2e4 <mem_malloc+0x1f0>)
 800c1a4:	4850      	ldr	r0, [pc, #320]	; (800c2e8 <mem_malloc+0x1f4>)
 800c1a6:	f00a fe23 	bl	8016df0 <iprintf>
          /* create mem2 struct */
          mem2 = ptr_to_mem(ptr2);
 800c1aa:	8a7b      	ldrh	r3, [r7, #18]
 800c1ac:	4618      	mov	r0, r3
 800c1ae:	f7ff fcb3 	bl	800bb18 <ptr_to_mem>
 800c1b2:	60f8      	str	r0, [r7, #12]
          mem2->used = 0;
 800c1b4:	68fb      	ldr	r3, [r7, #12]
 800c1b6:	2200      	movs	r2, #0
 800c1b8:	711a      	strb	r2, [r3, #4]
          mem2->next = mem->next;
 800c1ba:	697b      	ldr	r3, [r7, #20]
 800c1bc:	881a      	ldrh	r2, [r3, #0]
 800c1be:	68fb      	ldr	r3, [r7, #12]
 800c1c0:	801a      	strh	r2, [r3, #0]
          mem2->prev = ptr;
 800c1c2:	68fb      	ldr	r3, [r7, #12]
 800c1c4:	8bfa      	ldrh	r2, [r7, #30]
 800c1c6:	805a      	strh	r2, [r3, #2]
          /* and insert it between mem and mem->next */
          mem->next = ptr2;
 800c1c8:	697b      	ldr	r3, [r7, #20]
 800c1ca:	8a7a      	ldrh	r2, [r7, #18]
 800c1cc:	801a      	strh	r2, [r3, #0]
          mem->used = 1;
 800c1ce:	697b      	ldr	r3, [r7, #20]
 800c1d0:	2201      	movs	r2, #1
 800c1d2:	711a      	strb	r2, [r3, #4]

          if (mem2->next != MEM_SIZE_ALIGNED) {
 800c1d4:	68fb      	ldr	r3, [r7, #12]
 800c1d6:	881b      	ldrh	r3, [r3, #0]
 800c1d8:	f5b3 5f20 	cmp.w	r3, #10240	; 0x2800
 800c1dc:	d00b      	beq.n	800c1f6 <mem_malloc+0x102>
            ptr_to_mem(mem2->next)->prev = ptr2;
 800c1de:	68fb      	ldr	r3, [r7, #12]
 800c1e0:	881b      	ldrh	r3, [r3, #0]
 800c1e2:	4618      	mov	r0, r3
 800c1e4:	f7ff fc98 	bl	800bb18 <ptr_to_mem>
 800c1e8:	4602      	mov	r2, r0
 800c1ea:	8a7b      	ldrh	r3, [r7, #18]
 800c1ec:	8053      	strh	r3, [r2, #2]
 800c1ee:	e002      	b.n	800c1f6 <mem_malloc+0x102>
           * take care of this).
           * -> near fit or exact fit: do not split, no mem2 creation
           * also can't move mem->next directly behind mem, since mem->next
           * will always be used at this point!
           */
          mem->used = 1;
 800c1f0:	697b      	ldr	r3, [r7, #20]
 800c1f2:	2201      	movs	r2, #1
 800c1f4:	711a      	strb	r2, [r3, #4]
          MEM_STATS_INC_USED(used, mem->next - mem_to_ptr(mem));
        }
#if LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT
mem_malloc_adjust_lfree:
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
        if (mem == lfree) {
 800c1f6:	4b39      	ldr	r3, [pc, #228]	; (800c2dc <mem_malloc+0x1e8>)
 800c1f8:	681b      	ldr	r3, [r3, #0]
 800c1fa:	697a      	ldr	r2, [r7, #20]
 800c1fc:	429a      	cmp	r2, r3
 800c1fe:	d127      	bne.n	800c250 <mem_malloc+0x15c>
          struct mem *cur = lfree;
 800c200:	4b36      	ldr	r3, [pc, #216]	; (800c2dc <mem_malloc+0x1e8>)
 800c202:	681b      	ldr	r3, [r3, #0]
 800c204:	61bb      	str	r3, [r7, #24]
          /* Find next free block after mem and update lowest free pointer */
          while (cur->used && cur != ram_end) {
 800c206:	e005      	b.n	800c214 <mem_malloc+0x120>
              /* If mem_free or mem_trim have run, we have to restart since they
                 could have altered our current struct mem or lfree. */
              goto mem_malloc_adjust_lfree;
            }
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
            cur = ptr_to_mem(cur->next);
 800c208:	69bb      	ldr	r3, [r7, #24]
 800c20a:	881b      	ldrh	r3, [r3, #0]
 800c20c:	4618      	mov	r0, r3
 800c20e:	f7ff fc83 	bl	800bb18 <ptr_to_mem>
 800c212:	61b8      	str	r0, [r7, #24]
          while (cur->used && cur != ram_end) {
 800c214:	69bb      	ldr	r3, [r7, #24]
 800c216:	791b      	ldrb	r3, [r3, #4]
 800c218:	2b00      	cmp	r3, #0
 800c21a:	d004      	beq.n	800c226 <mem_malloc+0x132>
 800c21c:	4b33      	ldr	r3, [pc, #204]	; (800c2ec <mem_malloc+0x1f8>)
 800c21e:	681b      	ldr	r3, [r3, #0]
 800c220:	69ba      	ldr	r2, [r7, #24]
 800c222:	429a      	cmp	r2, r3
 800c224:	d1f0      	bne.n	800c208 <mem_malloc+0x114>
          }
          lfree = cur;
 800c226:	4a2d      	ldr	r2, [pc, #180]	; (800c2dc <mem_malloc+0x1e8>)
 800c228:	69bb      	ldr	r3, [r7, #24]
 800c22a:	6013      	str	r3, [r2, #0]
          LWIP_ASSERT("mem_malloc: !lfree->used", ((lfree == ram_end) || (!lfree->used)));
 800c22c:	4b2b      	ldr	r3, [pc, #172]	; (800c2dc <mem_malloc+0x1e8>)
 800c22e:	681a      	ldr	r2, [r3, #0]
 800c230:	4b2e      	ldr	r3, [pc, #184]	; (800c2ec <mem_malloc+0x1f8>)
 800c232:	681b      	ldr	r3, [r3, #0]
 800c234:	429a      	cmp	r2, r3
 800c236:	d00b      	beq.n	800c250 <mem_malloc+0x15c>
 800c238:	4b28      	ldr	r3, [pc, #160]	; (800c2dc <mem_malloc+0x1e8>)
 800c23a:	681b      	ldr	r3, [r3, #0]
 800c23c:	791b      	ldrb	r3, [r3, #4]
 800c23e:	2b00      	cmp	r3, #0
 800c240:	d006      	beq.n	800c250 <mem_malloc+0x15c>
 800c242:	4b27      	ldr	r3, [pc, #156]	; (800c2e0 <mem_malloc+0x1ec>)
 800c244:	f240 32b5 	movw	r2, #949	; 0x3b5
 800c248:	4929      	ldr	r1, [pc, #164]	; (800c2f0 <mem_malloc+0x1fc>)
 800c24a:	4827      	ldr	r0, [pc, #156]	; (800c2e8 <mem_malloc+0x1f4>)
 800c24c:	f00a fdd0 	bl	8016df0 <iprintf>
        }
        LWIP_MEM_ALLOC_UNPROTECT();
        sys_mutex_unlock(&mem_mutex);
 800c250:	4821      	ldr	r0, [pc, #132]	; (800c2d8 <mem_malloc+0x1e4>)
 800c252:	f00a fc94 	bl	8016b7e <sys_mutex_unlock>
        LWIP_ASSERT("mem_malloc: allocated memory not above ram_end.",
 800c256:	8bba      	ldrh	r2, [r7, #28]
 800c258:	697b      	ldr	r3, [r7, #20]
 800c25a:	4413      	add	r3, r2
 800c25c:	3308      	adds	r3, #8
 800c25e:	4a23      	ldr	r2, [pc, #140]	; (800c2ec <mem_malloc+0x1f8>)
 800c260:	6812      	ldr	r2, [r2, #0]
 800c262:	4293      	cmp	r3, r2
 800c264:	d906      	bls.n	800c274 <mem_malloc+0x180>
 800c266:	4b1e      	ldr	r3, [pc, #120]	; (800c2e0 <mem_malloc+0x1ec>)
 800c268:	f240 32b9 	movw	r2, #953	; 0x3b9
 800c26c:	4921      	ldr	r1, [pc, #132]	; (800c2f4 <mem_malloc+0x200>)
 800c26e:	481e      	ldr	r0, [pc, #120]	; (800c2e8 <mem_malloc+0x1f4>)
 800c270:	f00a fdbe 	bl	8016df0 <iprintf>
                    (mem_ptr_t)mem + SIZEOF_STRUCT_MEM + size <= (mem_ptr_t)ram_end);
        LWIP_ASSERT("mem_malloc: allocated memory properly aligned.",
 800c274:	697b      	ldr	r3, [r7, #20]
 800c276:	f003 0303 	and.w	r3, r3, #3
 800c27a:	2b00      	cmp	r3, #0
 800c27c:	d006      	beq.n	800c28c <mem_malloc+0x198>
 800c27e:	4b18      	ldr	r3, [pc, #96]	; (800c2e0 <mem_malloc+0x1ec>)
 800c280:	f240 32bb 	movw	r2, #955	; 0x3bb
 800c284:	491c      	ldr	r1, [pc, #112]	; (800c2f8 <mem_malloc+0x204>)
 800c286:	4818      	ldr	r0, [pc, #96]	; (800c2e8 <mem_malloc+0x1f4>)
 800c288:	f00a fdb2 	bl	8016df0 <iprintf>
                    ((mem_ptr_t)mem + SIZEOF_STRUCT_MEM) % MEM_ALIGNMENT == 0);
        LWIP_ASSERT("mem_malloc: sanity check alignment",
 800c28c:	697b      	ldr	r3, [r7, #20]
 800c28e:	f003 0303 	and.w	r3, r3, #3
 800c292:	2b00      	cmp	r3, #0
 800c294:	d006      	beq.n	800c2a4 <mem_malloc+0x1b0>
 800c296:	4b12      	ldr	r3, [pc, #72]	; (800c2e0 <mem_malloc+0x1ec>)
 800c298:	f240 32bd 	movw	r2, #957	; 0x3bd
 800c29c:	4917      	ldr	r1, [pc, #92]	; (800c2fc <mem_malloc+0x208>)
 800c29e:	4812      	ldr	r0, [pc, #72]	; (800c2e8 <mem_malloc+0x1f4>)
 800c2a0:	f00a fda6 	bl	8016df0 <iprintf>

#if MEM_OVERFLOW_CHECK
        mem_overflow_init_element(mem, size_in);
#endif
        MEM_SANITY();
        return (u8_t *)mem + SIZEOF_STRUCT_MEM + MEM_SANITY_OFFSET;
 800c2a4:	697b      	ldr	r3, [r7, #20]
 800c2a6:	3308      	adds	r3, #8
 800c2a8:	e011      	b.n	800c2ce <mem_malloc+0x1da>
         ptr = ptr_to_mem(ptr)->next) {
 800c2aa:	8bfb      	ldrh	r3, [r7, #30]
 800c2ac:	4618      	mov	r0, r3
 800c2ae:	f7ff fc33 	bl	800bb18 <ptr_to_mem>
 800c2b2:	4603      	mov	r3, r0
 800c2b4:	881b      	ldrh	r3, [r3, #0]
 800c2b6:	83fb      	strh	r3, [r7, #30]
    for (ptr = mem_to_ptr(lfree); ptr < MEM_SIZE_ALIGNED - size;
 800c2b8:	8bfa      	ldrh	r2, [r7, #30]
 800c2ba:	8bbb      	ldrh	r3, [r7, #28]
 800c2bc:	f5c3 5320 	rsb	r3, r3, #10240	; 0x2800
 800c2c0:	429a      	cmp	r2, r3
 800c2c2:	f4ff af41 	bcc.w	800c148 <mem_malloc+0x54>
    /* if we got interrupted by a mem_free, try again */
  } while (local_mem_free_count != 0);
#endif /* LWIP_ALLOW_MEM_FREE_FROM_OTHER_CONTEXT */
  MEM_STATS_INC(err);
  LWIP_MEM_ALLOC_UNPROTECT();
  sys_mutex_unlock(&mem_mutex);
 800c2c6:	4804      	ldr	r0, [pc, #16]	; (800c2d8 <mem_malloc+0x1e4>)
 800c2c8:	f00a fc59 	bl	8016b7e <sys_mutex_unlock>
  LWIP_DEBUGF(MEM_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("mem_malloc: could not allocate %"S16_F" bytes\n", (s16_t)size));
  return NULL;
 800c2cc:	2300      	movs	r3, #0
}
 800c2ce:	4618      	mov	r0, r3
 800c2d0:	3720      	adds	r7, #32
 800c2d2:	46bd      	mov	sp, r7
 800c2d4:	bd80      	pop	{r7, pc}
 800c2d6:	bf00      	nop
 800c2d8:	2000c714 	.word	0x2000c714
 800c2dc:	2000c718 	.word	0x2000c718
 800c2e0:	08018cb8 	.word	0x08018cb8
 800c2e4:	08018e7c 	.word	0x08018e7c
 800c2e8:	08018d00 	.word	0x08018d00
 800c2ec:	2000c710 	.word	0x2000c710
 800c2f0:	08018e90 	.word	0x08018e90
 800c2f4:	08018eac 	.word	0x08018eac
 800c2f8:	08018edc 	.word	0x08018edc
 800c2fc:	08018f0c 	.word	0x08018f0c

0800c300 <memp_init_pool>:
 *
 * @param desc pool to initialize
 */
void
memp_init_pool(const struct memp_desc *desc)
{
 800c300:	b480      	push	{r7}
 800c302:	b085      	sub	sp, #20
 800c304:	af00      	add	r7, sp, #0
 800c306:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(desc);
#else
  int i;
  struct memp *memp;

  *desc->tab = NULL;
 800c308:	687b      	ldr	r3, [r7, #4]
 800c30a:	689b      	ldr	r3, [r3, #8]
 800c30c:	2200      	movs	r2, #0
 800c30e:	601a      	str	r2, [r3, #0]
  memp = (struct memp *)LWIP_MEM_ALIGN(desc->base);
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	685b      	ldr	r3, [r3, #4]
 800c314:	3303      	adds	r3, #3
 800c316:	f023 0303 	bic.w	r3, r3, #3
 800c31a:	60bb      	str	r3, [r7, #8]
                                       + MEM_SANITY_REGION_AFTER_ALIGNED
#endif
                                      ));
#endif
  /* create a linked list of memp elements */
  for (i = 0; i < desc->num; ++i) {
 800c31c:	2300      	movs	r3, #0
 800c31e:	60fb      	str	r3, [r7, #12]
 800c320:	e011      	b.n	800c346 <memp_init_pool+0x46>
    memp->next = *desc->tab;
 800c322:	687b      	ldr	r3, [r7, #4]
 800c324:	689b      	ldr	r3, [r3, #8]
 800c326:	681a      	ldr	r2, [r3, #0]
 800c328:	68bb      	ldr	r3, [r7, #8]
 800c32a:	601a      	str	r2, [r3, #0]
    *desc->tab = memp;
 800c32c:	687b      	ldr	r3, [r7, #4]
 800c32e:	689b      	ldr	r3, [r3, #8]
 800c330:	68ba      	ldr	r2, [r7, #8]
 800c332:	601a      	str	r2, [r3, #0]
#if MEMP_OVERFLOW_CHECK
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */
    /* cast through void* to get rid of alignment warnings */
    memp = (struct memp *)(void *)((u8_t *)memp + MEMP_SIZE + desc->size
 800c334:	687b      	ldr	r3, [r7, #4]
 800c336:	881b      	ldrh	r3, [r3, #0]
 800c338:	461a      	mov	r2, r3
 800c33a:	68bb      	ldr	r3, [r7, #8]
 800c33c:	4413      	add	r3, r2
 800c33e:	60bb      	str	r3, [r7, #8]
  for (i = 0; i < desc->num; ++i) {
 800c340:	68fb      	ldr	r3, [r7, #12]
 800c342:	3301      	adds	r3, #1
 800c344:	60fb      	str	r3, [r7, #12]
 800c346:	687b      	ldr	r3, [r7, #4]
 800c348:	885b      	ldrh	r3, [r3, #2]
 800c34a:	461a      	mov	r2, r3
 800c34c:	68fb      	ldr	r3, [r7, #12]
 800c34e:	4293      	cmp	r3, r2
 800c350:	dbe7      	blt.n	800c322 <memp_init_pool+0x22>
#endif /* !MEMP_MEM_MALLOC */

#if MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY)
  desc->stats->name  = desc->desc;
#endif /* MEMP_STATS && (defined(LWIP_DEBUG) || LWIP_STATS_DISPLAY) */
}
 800c352:	bf00      	nop
 800c354:	bf00      	nop
 800c356:	3714      	adds	r7, #20
 800c358:	46bd      	mov	sp, r7
 800c35a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c35e:	4770      	bx	lr

0800c360 <memp_init>:
 *
 * Carves out memp_memory into linked lists for each pool-type.
 */
void
memp_init(void)
{
 800c360:	b580      	push	{r7, lr}
 800c362:	b082      	sub	sp, #8
 800c364:	af00      	add	r7, sp, #0
  u16_t i;

  /* for every pool: */
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c366:	2300      	movs	r3, #0
 800c368:	80fb      	strh	r3, [r7, #6]
 800c36a:	e009      	b.n	800c380 <memp_init+0x20>
    memp_init_pool(memp_pools[i]);
 800c36c:	88fb      	ldrh	r3, [r7, #6]
 800c36e:	4a08      	ldr	r2, [pc, #32]	; (800c390 <memp_init+0x30>)
 800c370:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c374:	4618      	mov	r0, r3
 800c376:	f7ff ffc3 	bl	800c300 <memp_init_pool>
  for (i = 0; i < LWIP_ARRAYSIZE(memp_pools); i++) {
 800c37a:	88fb      	ldrh	r3, [r7, #6]
 800c37c:	3301      	adds	r3, #1
 800c37e:	80fb      	strh	r3, [r7, #6]
 800c380:	88fb      	ldrh	r3, [r7, #6]
 800c382:	2b0c      	cmp	r3, #12
 800c384:	d9f2      	bls.n	800c36c <memp_init+0xc>

#if MEMP_OVERFLOW_CHECK >= 2
  /* check everything a first time to see if it worked */
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */
}
 800c386:	bf00      	nop
 800c388:	bf00      	nop
 800c38a:	3708      	adds	r7, #8
 800c38c:	46bd      	mov	sp, r7
 800c38e:	bd80      	pop	{r7, pc}
 800c390:	0801b76c 	.word	0x0801b76c

0800c394 <do_memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
do_memp_malloc_pool(const struct memp_desc *desc)
#else
do_memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c394:	b580      	push	{r7, lr}
 800c396:	b084      	sub	sp, #16
 800c398:	af00      	add	r7, sp, #0
 800c39a:	6078      	str	r0, [r7, #4]

#if MEMP_MEM_MALLOC
  memp = (struct memp *)mem_malloc(MEMP_SIZE + MEMP_ALIGN_SIZE(desc->size));
  SYS_ARCH_PROTECT(old_level);
#else /* MEMP_MEM_MALLOC */
  SYS_ARCH_PROTECT(old_level);
 800c39c:	f00a fc1c 	bl	8016bd8 <sys_arch_protect>
 800c3a0:	60f8      	str	r0, [r7, #12]

  memp = *desc->tab;
 800c3a2:	687b      	ldr	r3, [r7, #4]
 800c3a4:	689b      	ldr	r3, [r3, #8]
 800c3a6:	681b      	ldr	r3, [r3, #0]
 800c3a8:	60bb      	str	r3, [r7, #8]
#endif /* MEMP_MEM_MALLOC */

  if (memp != NULL) {
 800c3aa:	68bb      	ldr	r3, [r7, #8]
 800c3ac:	2b00      	cmp	r3, #0
 800c3ae:	d015      	beq.n	800c3dc <do_memp_malloc_pool+0x48>
#if !MEMP_MEM_MALLOC
#if MEMP_OVERFLOW_CHECK == 1
    memp_overflow_check_element(memp, desc);
#endif /* MEMP_OVERFLOW_CHECK */

    *desc->tab = memp->next;
 800c3b0:	687b      	ldr	r3, [r7, #4]
 800c3b2:	689b      	ldr	r3, [r3, #8]
 800c3b4:	68ba      	ldr	r2, [r7, #8]
 800c3b6:	6812      	ldr	r2, [r2, #0]
 800c3b8:	601a      	str	r2, [r3, #0]
    memp->line = line;
#if MEMP_MEM_MALLOC
    memp_overflow_init_element(memp, desc);
#endif /* MEMP_MEM_MALLOC */
#endif /* MEMP_OVERFLOW_CHECK */
    LWIP_ASSERT("memp_malloc: memp properly aligned",
 800c3ba:	68bb      	ldr	r3, [r7, #8]
 800c3bc:	f003 0303 	and.w	r3, r3, #3
 800c3c0:	2b00      	cmp	r3, #0
 800c3c2:	d006      	beq.n	800c3d2 <do_memp_malloc_pool+0x3e>
 800c3c4:	4b09      	ldr	r3, [pc, #36]	; (800c3ec <do_memp_malloc_pool+0x58>)
 800c3c6:	f44f 728c 	mov.w	r2, #280	; 0x118
 800c3ca:	4909      	ldr	r1, [pc, #36]	; (800c3f0 <do_memp_malloc_pool+0x5c>)
 800c3cc:	4809      	ldr	r0, [pc, #36]	; (800c3f4 <do_memp_malloc_pool+0x60>)
 800c3ce:	f00a fd0f 	bl	8016df0 <iprintf>
    desc->stats->used++;
    if (desc->stats->used > desc->stats->max) {
      desc->stats->max = desc->stats->used;
    }
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3d2:	68f8      	ldr	r0, [r7, #12]
 800c3d4:	f00a fc0e 	bl	8016bf4 <sys_arch_unprotect>
    /* cast through u8_t* to get rid of alignment warnings */
    return ((u8_t *)memp + MEMP_SIZE);
 800c3d8:	68bb      	ldr	r3, [r7, #8]
 800c3da:	e003      	b.n	800c3e4 <do_memp_malloc_pool+0x50>
  } else {
#if MEMP_STATS
    desc->stats->err++;
#endif
    SYS_ARCH_UNPROTECT(old_level);
 800c3dc:	68f8      	ldr	r0, [r7, #12]
 800c3de:	f00a fc09 	bl	8016bf4 <sys_arch_unprotect>
    LWIP_DEBUGF(MEMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("memp_malloc: out of memory in pool %s\n", desc->desc));
  }

  return NULL;
 800c3e2:	2300      	movs	r3, #0
}
 800c3e4:	4618      	mov	r0, r3
 800c3e6:	3710      	adds	r7, #16
 800c3e8:	46bd      	mov	sp, r7
 800c3ea:	bd80      	pop	{r7, pc}
 800c3ec:	08018f30 	.word	0x08018f30
 800c3f0:	08018f60 	.word	0x08018f60
 800c3f4:	08018f84 	.word	0x08018f84

0800c3f8 <memp_malloc_pool>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc_pool(const struct memp_desc *desc)
#else
memp_malloc_pool_fn(const struct memp_desc *desc, const char *file, const int line)
#endif
{
 800c3f8:	b580      	push	{r7, lr}
 800c3fa:	b082      	sub	sp, #8
 800c3fc:	af00      	add	r7, sp, #0
 800c3fe:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	2b00      	cmp	r3, #0
 800c404:	d106      	bne.n	800c414 <memp_malloc_pool+0x1c>
 800c406:	4b0a      	ldr	r3, [pc, #40]	; (800c430 <memp_malloc_pool+0x38>)
 800c408:	f44f 729e 	mov.w	r2, #316	; 0x13c
 800c40c:	4909      	ldr	r1, [pc, #36]	; (800c434 <memp_malloc_pool+0x3c>)
 800c40e:	480a      	ldr	r0, [pc, #40]	; (800c438 <memp_malloc_pool+0x40>)
 800c410:	f00a fcee 	bl	8016df0 <iprintf>
  if (desc == NULL) {
 800c414:	687b      	ldr	r3, [r7, #4]
 800c416:	2b00      	cmp	r3, #0
 800c418:	d101      	bne.n	800c41e <memp_malloc_pool+0x26>
    return NULL;
 800c41a:	2300      	movs	r3, #0
 800c41c:	e003      	b.n	800c426 <memp_malloc_pool+0x2e>
  }

#if !MEMP_OVERFLOW_CHECK
  return do_memp_malloc_pool(desc);
 800c41e:	6878      	ldr	r0, [r7, #4]
 800c420:	f7ff ffb8 	bl	800c394 <do_memp_malloc_pool>
 800c424:	4603      	mov	r3, r0
#else
  return do_memp_malloc_pool_fn(desc, file, line);
#endif
}
 800c426:	4618      	mov	r0, r3
 800c428:	3708      	adds	r7, #8
 800c42a:	46bd      	mov	sp, r7
 800c42c:	bd80      	pop	{r7, pc}
 800c42e:	bf00      	nop
 800c430:	08018f30 	.word	0x08018f30
 800c434:	08018fac 	.word	0x08018fac
 800c438:	08018f84 	.word	0x08018f84

0800c43c <memp_malloc>:
#if !MEMP_OVERFLOW_CHECK
memp_malloc(memp_t type)
#else
memp_malloc_fn(memp_t type, const char *file, const int line)
#endif
{
 800c43c:	b580      	push	{r7, lr}
 800c43e:	b084      	sub	sp, #16
 800c440:	af00      	add	r7, sp, #0
 800c442:	4603      	mov	r3, r0
 800c444:	71fb      	strb	r3, [r7, #7]
  void *memp;
  LWIP_ERROR("memp_malloc: type < MEMP_MAX", (type < MEMP_MAX), return NULL;);
 800c446:	79fb      	ldrb	r3, [r7, #7]
 800c448:	2b0c      	cmp	r3, #12
 800c44a:	d908      	bls.n	800c45e <memp_malloc+0x22>
 800c44c:	4b0a      	ldr	r3, [pc, #40]	; (800c478 <memp_malloc+0x3c>)
 800c44e:	f240 1257 	movw	r2, #343	; 0x157
 800c452:	490a      	ldr	r1, [pc, #40]	; (800c47c <memp_malloc+0x40>)
 800c454:	480a      	ldr	r0, [pc, #40]	; (800c480 <memp_malloc+0x44>)
 800c456:	f00a fccb 	bl	8016df0 <iprintf>
 800c45a:	2300      	movs	r3, #0
 800c45c:	e008      	b.n	800c470 <memp_malloc+0x34>
#if MEMP_OVERFLOW_CHECK >= 2
  memp_overflow_check_all();
#endif /* MEMP_OVERFLOW_CHECK >= 2 */

#if !MEMP_OVERFLOW_CHECK
  memp = do_memp_malloc_pool(memp_pools[type]);
 800c45e:	79fb      	ldrb	r3, [r7, #7]
 800c460:	4a08      	ldr	r2, [pc, #32]	; (800c484 <memp_malloc+0x48>)
 800c462:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c466:	4618      	mov	r0, r3
 800c468:	f7ff ff94 	bl	800c394 <do_memp_malloc_pool>
 800c46c:	60f8      	str	r0, [r7, #12]
#else
  memp = do_memp_malloc_pool_fn(memp_pools[type], file, line);
#endif

  return memp;
 800c46e:	68fb      	ldr	r3, [r7, #12]
}
 800c470:	4618      	mov	r0, r3
 800c472:	3710      	adds	r7, #16
 800c474:	46bd      	mov	sp, r7
 800c476:	bd80      	pop	{r7, pc}
 800c478:	08018f30 	.word	0x08018f30
 800c47c:	08018fc0 	.word	0x08018fc0
 800c480:	08018f84 	.word	0x08018f84
 800c484:	0801b76c 	.word	0x0801b76c

0800c488 <do_memp_free_pool>:

static void
do_memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c488:	b580      	push	{r7, lr}
 800c48a:	b084      	sub	sp, #16
 800c48c:	af00      	add	r7, sp, #0
 800c48e:	6078      	str	r0, [r7, #4]
 800c490:	6039      	str	r1, [r7, #0]
  struct memp *memp;
  SYS_ARCH_DECL_PROTECT(old_level);

  LWIP_ASSERT("memp_free: mem properly aligned",
 800c492:	683b      	ldr	r3, [r7, #0]
 800c494:	f003 0303 	and.w	r3, r3, #3
 800c498:	2b00      	cmp	r3, #0
 800c49a:	d006      	beq.n	800c4aa <do_memp_free_pool+0x22>
 800c49c:	4b0d      	ldr	r3, [pc, #52]	; (800c4d4 <do_memp_free_pool+0x4c>)
 800c49e:	f44f 72b6 	mov.w	r2, #364	; 0x16c
 800c4a2:	490d      	ldr	r1, [pc, #52]	; (800c4d8 <do_memp_free_pool+0x50>)
 800c4a4:	480d      	ldr	r0, [pc, #52]	; (800c4dc <do_memp_free_pool+0x54>)
 800c4a6:	f00a fca3 	bl	8016df0 <iprintf>
              ((mem_ptr_t)mem % MEM_ALIGNMENT) == 0);

  /* cast through void* to get rid of alignment warnings */
  memp = (struct memp *)(void *)((u8_t *)mem - MEMP_SIZE);
 800c4aa:	683b      	ldr	r3, [r7, #0]
 800c4ac:	60fb      	str	r3, [r7, #12]

  SYS_ARCH_PROTECT(old_level);
 800c4ae:	f00a fb93 	bl	8016bd8 <sys_arch_protect>
 800c4b2:	60b8      	str	r0, [r7, #8]
#if MEMP_MEM_MALLOC
  LWIP_UNUSED_ARG(desc);
  SYS_ARCH_UNPROTECT(old_level);
  mem_free(memp);
#else /* MEMP_MEM_MALLOC */
  memp->next = *desc->tab;
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	689b      	ldr	r3, [r3, #8]
 800c4b8:	681a      	ldr	r2, [r3, #0]
 800c4ba:	68fb      	ldr	r3, [r7, #12]
 800c4bc:	601a      	str	r2, [r3, #0]
  *desc->tab = memp;
 800c4be:	687b      	ldr	r3, [r7, #4]
 800c4c0:	689b      	ldr	r3, [r3, #8]
 800c4c2:	68fa      	ldr	r2, [r7, #12]
 800c4c4:	601a      	str	r2, [r3, #0]

#if MEMP_SANITY_CHECK
  LWIP_ASSERT("memp sanity", memp_sanity(desc));
#endif /* MEMP_SANITY_CHECK */

  SYS_ARCH_UNPROTECT(old_level);
 800c4c6:	68b8      	ldr	r0, [r7, #8]
 800c4c8:	f00a fb94 	bl	8016bf4 <sys_arch_unprotect>
#endif /* !MEMP_MEM_MALLOC */
}
 800c4cc:	bf00      	nop
 800c4ce:	3710      	adds	r7, #16
 800c4d0:	46bd      	mov	sp, r7
 800c4d2:	bd80      	pop	{r7, pc}
 800c4d4:	08018f30 	.word	0x08018f30
 800c4d8:	08018fe0 	.word	0x08018fe0
 800c4dc:	08018f84 	.word	0x08018f84

0800c4e0 <memp_free_pool>:
 * @param desc the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free_pool(const struct memp_desc *desc, void *mem)
{
 800c4e0:	b580      	push	{r7, lr}
 800c4e2:	b082      	sub	sp, #8
 800c4e4:	af00      	add	r7, sp, #0
 800c4e6:	6078      	str	r0, [r7, #4]
 800c4e8:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("invalid pool desc", desc != NULL);
 800c4ea:	687b      	ldr	r3, [r7, #4]
 800c4ec:	2b00      	cmp	r3, #0
 800c4ee:	d106      	bne.n	800c4fe <memp_free_pool+0x1e>
 800c4f0:	4b0a      	ldr	r3, [pc, #40]	; (800c51c <memp_free_pool+0x3c>)
 800c4f2:	f240 1295 	movw	r2, #405	; 0x195
 800c4f6:	490a      	ldr	r1, [pc, #40]	; (800c520 <memp_free_pool+0x40>)
 800c4f8:	480a      	ldr	r0, [pc, #40]	; (800c524 <memp_free_pool+0x44>)
 800c4fa:	f00a fc79 	bl	8016df0 <iprintf>
  if ((desc == NULL) || (mem == NULL)) {
 800c4fe:	687b      	ldr	r3, [r7, #4]
 800c500:	2b00      	cmp	r3, #0
 800c502:	d007      	beq.n	800c514 <memp_free_pool+0x34>
 800c504:	683b      	ldr	r3, [r7, #0]
 800c506:	2b00      	cmp	r3, #0
 800c508:	d004      	beq.n	800c514 <memp_free_pool+0x34>
    return;
  }

  do_memp_free_pool(desc, mem);
 800c50a:	6839      	ldr	r1, [r7, #0]
 800c50c:	6878      	ldr	r0, [r7, #4]
 800c50e:	f7ff ffbb 	bl	800c488 <do_memp_free_pool>
 800c512:	e000      	b.n	800c516 <memp_free_pool+0x36>
    return;
 800c514:	bf00      	nop
}
 800c516:	3708      	adds	r7, #8
 800c518:	46bd      	mov	sp, r7
 800c51a:	bd80      	pop	{r7, pc}
 800c51c:	08018f30 	.word	0x08018f30
 800c520:	08018fac 	.word	0x08018fac
 800c524:	08018f84 	.word	0x08018f84

0800c528 <memp_free>:
 * @param type the pool where to put mem
 * @param mem the memp element to free
 */
void
memp_free(memp_t type, void *mem)
{
 800c528:	b580      	push	{r7, lr}
 800c52a:	b082      	sub	sp, #8
 800c52c:	af00      	add	r7, sp, #0
 800c52e:	4603      	mov	r3, r0
 800c530:	6039      	str	r1, [r7, #0]
 800c532:	71fb      	strb	r3, [r7, #7]
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  struct memp *old_first;
#endif

  LWIP_ERROR("memp_free: type < MEMP_MAX", (type < MEMP_MAX), return;);
 800c534:	79fb      	ldrb	r3, [r7, #7]
 800c536:	2b0c      	cmp	r3, #12
 800c538:	d907      	bls.n	800c54a <memp_free+0x22>
 800c53a:	4b0c      	ldr	r3, [pc, #48]	; (800c56c <memp_free+0x44>)
 800c53c:	f44f 72d5 	mov.w	r2, #426	; 0x1aa
 800c540:	490b      	ldr	r1, [pc, #44]	; (800c570 <memp_free+0x48>)
 800c542:	480c      	ldr	r0, [pc, #48]	; (800c574 <memp_free+0x4c>)
 800c544:	f00a fc54 	bl	8016df0 <iprintf>
 800c548:	e00c      	b.n	800c564 <memp_free+0x3c>

  if (mem == NULL) {
 800c54a:	683b      	ldr	r3, [r7, #0]
 800c54c:	2b00      	cmp	r3, #0
 800c54e:	d008      	beq.n	800c562 <memp_free+0x3a>

#ifdef LWIP_HOOK_MEMP_AVAILABLE
  old_first = *memp_pools[type]->tab;
#endif

  do_memp_free_pool(memp_pools[type], mem);
 800c550:	79fb      	ldrb	r3, [r7, #7]
 800c552:	4a09      	ldr	r2, [pc, #36]	; (800c578 <memp_free+0x50>)
 800c554:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800c558:	6839      	ldr	r1, [r7, #0]
 800c55a:	4618      	mov	r0, r3
 800c55c:	f7ff ff94 	bl	800c488 <do_memp_free_pool>
 800c560:	e000      	b.n	800c564 <memp_free+0x3c>
    return;
 800c562:	bf00      	nop
#ifdef LWIP_HOOK_MEMP_AVAILABLE
  if (old_first == NULL) {
    LWIP_HOOK_MEMP_AVAILABLE(type);
  }
#endif
}
 800c564:	3708      	adds	r7, #8
 800c566:	46bd      	mov	sp, r7
 800c568:	bd80      	pop	{r7, pc}
 800c56a:	bf00      	nop
 800c56c:	08018f30 	.word	0x08018f30
 800c570:	08019000 	.word	0x08019000
 800c574:	08018f84 	.word	0x08018f84
 800c578:	0801b76c 	.word	0x0801b76c

0800c57c <netif_init>:
}
#endif /* LWIP_HAVE_LOOPIF */

void
netif_init(void)
{
 800c57c:	b480      	push	{r7}
 800c57e:	af00      	add	r7, sp, #0

  netif_set_link_up(&loop_netif);
  netif_set_up(&loop_netif);

#endif /* LWIP_HAVE_LOOPIF */
}
 800c580:	bf00      	nop
 800c582:	46bd      	mov	sp, r7
 800c584:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c588:	4770      	bx	lr
	...

0800c58c <netif_add>:
netif_add(struct netif *netif,
#if LWIP_IPV4
          const ip4_addr_t *ipaddr, const ip4_addr_t *netmask, const ip4_addr_t *gw,
#endif /* LWIP_IPV4 */
          void *state, netif_init_fn init, netif_input_fn input)
{
 800c58c:	b580      	push	{r7, lr}
 800c58e:	b086      	sub	sp, #24
 800c590:	af00      	add	r7, sp, #0
 800c592:	60f8      	str	r0, [r7, #12]
 800c594:	60b9      	str	r1, [r7, #8]
 800c596:	607a      	str	r2, [r7, #4]
 800c598:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("single netif already set", 0);
    return NULL;
  }
#endif

  LWIP_ERROR("netif_add: invalid netif", netif != NULL, return NULL);
 800c59a:	68fb      	ldr	r3, [r7, #12]
 800c59c:	2b00      	cmp	r3, #0
 800c59e:	d108      	bne.n	800c5b2 <netif_add+0x26>
 800c5a0:	4b57      	ldr	r3, [pc, #348]	; (800c700 <netif_add+0x174>)
 800c5a2:	f240 1227 	movw	r2, #295	; 0x127
 800c5a6:	4957      	ldr	r1, [pc, #348]	; (800c704 <netif_add+0x178>)
 800c5a8:	4857      	ldr	r0, [pc, #348]	; (800c708 <netif_add+0x17c>)
 800c5aa:	f00a fc21 	bl	8016df0 <iprintf>
 800c5ae:	2300      	movs	r3, #0
 800c5b0:	e0a2      	b.n	800c6f8 <netif_add+0x16c>
  LWIP_ERROR("netif_add: No init function given", init != NULL, return NULL);
 800c5b2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c5b4:	2b00      	cmp	r3, #0
 800c5b6:	d108      	bne.n	800c5ca <netif_add+0x3e>
 800c5b8:	4b51      	ldr	r3, [pc, #324]	; (800c700 <netif_add+0x174>)
 800c5ba:	f44f 7294 	mov.w	r2, #296	; 0x128
 800c5be:	4953      	ldr	r1, [pc, #332]	; (800c70c <netif_add+0x180>)
 800c5c0:	4851      	ldr	r0, [pc, #324]	; (800c708 <netif_add+0x17c>)
 800c5c2:	f00a fc15 	bl	8016df0 <iprintf>
 800c5c6:	2300      	movs	r3, #0
 800c5c8:	e096      	b.n	800c6f8 <netif_add+0x16c>

#if LWIP_IPV4
  if (ipaddr == NULL) {
 800c5ca:	68bb      	ldr	r3, [r7, #8]
 800c5cc:	2b00      	cmp	r3, #0
 800c5ce:	d101      	bne.n	800c5d4 <netif_add+0x48>
    ipaddr = ip_2_ip4(IP4_ADDR_ANY);
 800c5d0:	4b4f      	ldr	r3, [pc, #316]	; (800c710 <netif_add+0x184>)
 800c5d2:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c5d4:	687b      	ldr	r3, [r7, #4]
 800c5d6:	2b00      	cmp	r3, #0
 800c5d8:	d101      	bne.n	800c5de <netif_add+0x52>
    netmask = ip_2_ip4(IP4_ADDR_ANY);
 800c5da:	4b4d      	ldr	r3, [pc, #308]	; (800c710 <netif_add+0x184>)
 800c5dc:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c5de:	683b      	ldr	r3, [r7, #0]
 800c5e0:	2b00      	cmp	r3, #0
 800c5e2:	d101      	bne.n	800c5e8 <netif_add+0x5c>
    gw = ip_2_ip4(IP4_ADDR_ANY);
 800c5e4:	4b4a      	ldr	r3, [pc, #296]	; (800c710 <netif_add+0x184>)
 800c5e6:	603b      	str	r3, [r7, #0]
  }

  /* reset new interface configuration state */
  ip_addr_set_zero_ip4(&netif->ip_addr);
 800c5e8:	68fb      	ldr	r3, [r7, #12]
 800c5ea:	2200      	movs	r2, #0
 800c5ec:	605a      	str	r2, [r3, #4]
  ip_addr_set_zero_ip4(&netif->netmask);
 800c5ee:	68fb      	ldr	r3, [r7, #12]
 800c5f0:	2200      	movs	r2, #0
 800c5f2:	609a      	str	r2, [r3, #8]
  ip_addr_set_zero_ip4(&netif->gw);
 800c5f4:	68fb      	ldr	r3, [r7, #12]
 800c5f6:	2200      	movs	r2, #0
 800c5f8:	60da      	str	r2, [r3, #12]
  netif->output = netif_null_output_ip4;
 800c5fa:	68fb      	ldr	r3, [r7, #12]
 800c5fc:	4a45      	ldr	r2, [pc, #276]	; (800c714 <netif_add+0x188>)
 800c5fe:	615a      	str	r2, [r3, #20]
#endif /* LWIP_IPV6_ADDRESS_LIFETIMES */
  }
  netif->output_ip6 = netif_null_output_ip6;
#endif /* LWIP_IPV6 */
  NETIF_SET_CHECKSUM_CTRL(netif, NETIF_CHECKSUM_ENABLE_ALL);
  netif->mtu = 0;
 800c600:	68fb      	ldr	r3, [r7, #12]
 800c602:	2200      	movs	r2, #0
 800c604:	849a      	strh	r2, [r3, #36]	; 0x24
  netif->flags = 0;
 800c606:	68fb      	ldr	r3, [r7, #12]
 800c608:	2200      	movs	r2, #0
 800c60a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
#endif /* LWIP_IPV6 */
#if LWIP_NETIF_STATUS_CALLBACK
  netif->status_callback = NULL;
#endif /* LWIP_NETIF_STATUS_CALLBACK */
#if LWIP_NETIF_LINK_CALLBACK
  netif->link_callback = NULL;
 800c60e:	68fb      	ldr	r3, [r7, #12]
 800c610:	2200      	movs	r2, #0
 800c612:	61da      	str	r2, [r3, #28]
  netif->loop_first = NULL;
  netif->loop_last = NULL;
#endif /* ENABLE_LOOPBACK */

  /* remember netif specific state information data */
  netif->state = state;
 800c614:	68fb      	ldr	r3, [r7, #12]
 800c616:	6a3a      	ldr	r2, [r7, #32]
 800c618:	621a      	str	r2, [r3, #32]
  netif->num = netif_num;
 800c61a:	4b3f      	ldr	r3, [pc, #252]	; (800c718 <netif_add+0x18c>)
 800c61c:	781a      	ldrb	r2, [r3, #0]
 800c61e:	68fb      	ldr	r3, [r7, #12]
 800c620:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
  netif->input = input;
 800c624:	68fb      	ldr	r3, [r7, #12]
 800c626:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800c628:	611a      	str	r2, [r3, #16]
#if ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS
  netif->loop_cnt_current = 0;
#endif /* ENABLE_LOOPBACK && LWIP_LOOPBACK_MAX_PBUFS */

#if LWIP_IPV4
  netif_set_addr(netif, ipaddr, netmask, gw);
 800c62a:	683b      	ldr	r3, [r7, #0]
 800c62c:	687a      	ldr	r2, [r7, #4]
 800c62e:	68b9      	ldr	r1, [r7, #8]
 800c630:	68f8      	ldr	r0, [r7, #12]
 800c632:	f000 f913 	bl	800c85c <netif_set_addr>
#endif /* LWIP_IPV4 */

  /* call user specified initialization function for netif */
  if (init(netif) != ERR_OK) {
 800c636:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800c638:	68f8      	ldr	r0, [r7, #12]
 800c63a:	4798      	blx	r3
 800c63c:	4603      	mov	r3, r0
 800c63e:	2b00      	cmp	r3, #0
 800c640:	d001      	beq.n	800c646 <netif_add+0xba>
    return NULL;
 800c642:	2300      	movs	r3, #0
 800c644:	e058      	b.n	800c6f8 <netif_add+0x16c>
     */
  {
    struct netif *netif2;
    int num_netifs;
    do {
      if (netif->num == 255) {
 800c646:	68fb      	ldr	r3, [r7, #12]
 800c648:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c64c:	2bff      	cmp	r3, #255	; 0xff
 800c64e:	d103      	bne.n	800c658 <netif_add+0xcc>
        netif->num = 0;
 800c650:	68fb      	ldr	r3, [r7, #12]
 800c652:	2200      	movs	r2, #0
 800c654:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
      }
      num_netifs = 0;
 800c658:	2300      	movs	r3, #0
 800c65a:	613b      	str	r3, [r7, #16]
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c65c:	4b2f      	ldr	r3, [pc, #188]	; (800c71c <netif_add+0x190>)
 800c65e:	681b      	ldr	r3, [r3, #0]
 800c660:	617b      	str	r3, [r7, #20]
 800c662:	e02b      	b.n	800c6bc <netif_add+0x130>
        LWIP_ASSERT("netif already added", netif2 != netif);
 800c664:	697a      	ldr	r2, [r7, #20]
 800c666:	68fb      	ldr	r3, [r7, #12]
 800c668:	429a      	cmp	r2, r3
 800c66a:	d106      	bne.n	800c67a <netif_add+0xee>
 800c66c:	4b24      	ldr	r3, [pc, #144]	; (800c700 <netif_add+0x174>)
 800c66e:	f240 128b 	movw	r2, #395	; 0x18b
 800c672:	492b      	ldr	r1, [pc, #172]	; (800c720 <netif_add+0x194>)
 800c674:	4824      	ldr	r0, [pc, #144]	; (800c708 <netif_add+0x17c>)
 800c676:	f00a fbbb 	bl	8016df0 <iprintf>
        num_netifs++;
 800c67a:	693b      	ldr	r3, [r7, #16]
 800c67c:	3301      	adds	r3, #1
 800c67e:	613b      	str	r3, [r7, #16]
        LWIP_ASSERT("too many netifs, max. supported number is 255", num_netifs <= 255);
 800c680:	693b      	ldr	r3, [r7, #16]
 800c682:	2bff      	cmp	r3, #255	; 0xff
 800c684:	dd06      	ble.n	800c694 <netif_add+0x108>
 800c686:	4b1e      	ldr	r3, [pc, #120]	; (800c700 <netif_add+0x174>)
 800c688:	f240 128d 	movw	r2, #397	; 0x18d
 800c68c:	4925      	ldr	r1, [pc, #148]	; (800c724 <netif_add+0x198>)
 800c68e:	481e      	ldr	r0, [pc, #120]	; (800c708 <netif_add+0x17c>)
 800c690:	f00a fbae 	bl	8016df0 <iprintf>
        if (netif2->num == netif->num) {
 800c694:	697b      	ldr	r3, [r7, #20]
 800c696:	f893 2030 	ldrb.w	r2, [r3, #48]	; 0x30
 800c69a:	68fb      	ldr	r3, [r7, #12]
 800c69c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6a0:	429a      	cmp	r2, r3
 800c6a2:	d108      	bne.n	800c6b6 <netif_add+0x12a>
          netif->num++;
 800c6a4:	68fb      	ldr	r3, [r7, #12]
 800c6a6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6aa:	3301      	adds	r3, #1
 800c6ac:	b2da      	uxtb	r2, r3
 800c6ae:	68fb      	ldr	r3, [r7, #12]
 800c6b0:	f883 2030 	strb.w	r2, [r3, #48]	; 0x30
          break;
 800c6b4:	e005      	b.n	800c6c2 <netif_add+0x136>
      for (netif2 = netif_list; netif2 != NULL; netif2 = netif2->next) {
 800c6b6:	697b      	ldr	r3, [r7, #20]
 800c6b8:	681b      	ldr	r3, [r3, #0]
 800c6ba:	617b      	str	r3, [r7, #20]
 800c6bc:	697b      	ldr	r3, [r7, #20]
 800c6be:	2b00      	cmp	r3, #0
 800c6c0:	d1d0      	bne.n	800c664 <netif_add+0xd8>
        }
      }
    } while (netif2 != NULL);
 800c6c2:	697b      	ldr	r3, [r7, #20]
 800c6c4:	2b00      	cmp	r3, #0
 800c6c6:	d1be      	bne.n	800c646 <netif_add+0xba>
  }
  if (netif->num == 254) {
 800c6c8:	68fb      	ldr	r3, [r7, #12]
 800c6ca:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6ce:	2bfe      	cmp	r3, #254	; 0xfe
 800c6d0:	d103      	bne.n	800c6da <netif_add+0x14e>
    netif_num = 0;
 800c6d2:	4b11      	ldr	r3, [pc, #68]	; (800c718 <netif_add+0x18c>)
 800c6d4:	2200      	movs	r2, #0
 800c6d6:	701a      	strb	r2, [r3, #0]
 800c6d8:	e006      	b.n	800c6e8 <netif_add+0x15c>
  } else {
    netif_num = (u8_t)(netif->num + 1);
 800c6da:	68fb      	ldr	r3, [r7, #12]
 800c6dc:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800c6e0:	3301      	adds	r3, #1
 800c6e2:	b2da      	uxtb	r2, r3
 800c6e4:	4b0c      	ldr	r3, [pc, #48]	; (800c718 <netif_add+0x18c>)
 800c6e6:	701a      	strb	r2, [r3, #0]
  }

  /* add this netif to the list */
  netif->next = netif_list;
 800c6e8:	4b0c      	ldr	r3, [pc, #48]	; (800c71c <netif_add+0x190>)
 800c6ea:	681a      	ldr	r2, [r3, #0]
 800c6ec:	68fb      	ldr	r3, [r7, #12]
 800c6ee:	601a      	str	r2, [r3, #0]
  netif_list = netif;
 800c6f0:	4a0a      	ldr	r2, [pc, #40]	; (800c71c <netif_add+0x190>)
 800c6f2:	68fb      	ldr	r3, [r7, #12]
 800c6f4:	6013      	str	r3, [r2, #0]
#endif /* LWIP_IPV4 */
  LWIP_DEBUGF(NETIF_DEBUG, ("\n"));

  netif_invoke_ext_callback(netif, LWIP_NSC_NETIF_ADDED, NULL);

  return netif;
 800c6f6:	68fb      	ldr	r3, [r7, #12]
}
 800c6f8:	4618      	mov	r0, r3
 800c6fa:	3718      	adds	r7, #24
 800c6fc:	46bd      	mov	sp, r7
 800c6fe:	bd80      	pop	{r7, pc}
 800c700:	0801901c 	.word	0x0801901c
 800c704:	080190b0 	.word	0x080190b0
 800c708:	0801906c 	.word	0x0801906c
 800c70c:	080190cc 	.word	0x080190cc
 800c710:	0801b7e0 	.word	0x0801b7e0
 800c714:	0800cb37 	.word	0x0800cb37
 800c718:	2000f7f0 	.word	0x2000f7f0
 800c71c:	2000f7e8 	.word	0x2000f7e8
 800c720:	080190f0 	.word	0x080190f0
 800c724:	08019104 	.word	0x08019104

0800c728 <netif_do_ip_addr_changed>:

static void
netif_do_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800c728:	b580      	push	{r7, lr}
 800c72a:	b082      	sub	sp, #8
 800c72c:	af00      	add	r7, sp, #0
 800c72e:	6078      	str	r0, [r7, #4]
 800c730:	6039      	str	r1, [r7, #0]
#if LWIP_TCP
  tcp_netif_ip_addr_changed(old_addr, new_addr);
 800c732:	6839      	ldr	r1, [r7, #0]
 800c734:	6878      	ldr	r0, [r7, #4]
 800c736:	f002 fe9d 	bl	800f474 <tcp_netif_ip_addr_changed>
#endif /* LWIP_TCP */
#if LWIP_UDP
  udp_netif_ip_addr_changed(old_addr, new_addr);
 800c73a:	6839      	ldr	r1, [r7, #0]
 800c73c:	6878      	ldr	r0, [r7, #4]
 800c73e:	f007 fdbd 	bl	80142bc <udp_netif_ip_addr_changed>
#endif /* LWIP_UDP */
#if LWIP_RAW
  raw_netif_ip_addr_changed(old_addr, new_addr);
#endif /* LWIP_RAW */
}
 800c742:	bf00      	nop
 800c744:	3708      	adds	r7, #8
 800c746:	46bd      	mov	sp, r7
 800c748:	bd80      	pop	{r7, pc}
	...

0800c74c <netif_do_set_ipaddr>:

#if LWIP_IPV4
static int
netif_do_set_ipaddr(struct netif *netif, const ip4_addr_t *ipaddr, ip_addr_t *old_addr)
{
 800c74c:	b580      	push	{r7, lr}
 800c74e:	b086      	sub	sp, #24
 800c750:	af00      	add	r7, sp, #0
 800c752:	60f8      	str	r0, [r7, #12]
 800c754:	60b9      	str	r1, [r7, #8]
 800c756:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT("invalid pointer", ipaddr != NULL);
 800c758:	68bb      	ldr	r3, [r7, #8]
 800c75a:	2b00      	cmp	r3, #0
 800c75c:	d106      	bne.n	800c76c <netif_do_set_ipaddr+0x20>
 800c75e:	4b1d      	ldr	r3, [pc, #116]	; (800c7d4 <netif_do_set_ipaddr+0x88>)
 800c760:	f240 12cb 	movw	r2, #459	; 0x1cb
 800c764:	491c      	ldr	r1, [pc, #112]	; (800c7d8 <netif_do_set_ipaddr+0x8c>)
 800c766:	481d      	ldr	r0, [pc, #116]	; (800c7dc <netif_do_set_ipaddr+0x90>)
 800c768:	f00a fb42 	bl	8016df0 <iprintf>
  LWIP_ASSERT("invalid pointer", old_addr != NULL);
 800c76c:	687b      	ldr	r3, [r7, #4]
 800c76e:	2b00      	cmp	r3, #0
 800c770:	d106      	bne.n	800c780 <netif_do_set_ipaddr+0x34>
 800c772:	4b18      	ldr	r3, [pc, #96]	; (800c7d4 <netif_do_set_ipaddr+0x88>)
 800c774:	f44f 72e6 	mov.w	r2, #460	; 0x1cc
 800c778:	4917      	ldr	r1, [pc, #92]	; (800c7d8 <netif_do_set_ipaddr+0x8c>)
 800c77a:	4818      	ldr	r0, [pc, #96]	; (800c7dc <netif_do_set_ipaddr+0x90>)
 800c77c:	f00a fb38 	bl	8016df0 <iprintf>

  /* address is actually being changed? */
  if (ip4_addr_cmp(ipaddr, netif_ip4_addr(netif)) == 0) {
 800c780:	68bb      	ldr	r3, [r7, #8]
 800c782:	681a      	ldr	r2, [r3, #0]
 800c784:	68fb      	ldr	r3, [r7, #12]
 800c786:	3304      	adds	r3, #4
 800c788:	681b      	ldr	r3, [r3, #0]
 800c78a:	429a      	cmp	r2, r3
 800c78c:	d01c      	beq.n	800c7c8 <netif_do_set_ipaddr+0x7c>
    ip_addr_t new_addr;
    *ip_2_ip4(&new_addr) = *ipaddr;
 800c78e:	68bb      	ldr	r3, [r7, #8]
 800c790:	681b      	ldr	r3, [r3, #0]
 800c792:	617b      	str	r3, [r7, #20]
    IP_SET_TYPE_VAL(new_addr, IPADDR_TYPE_V4);

    ip_addr_copy(*old_addr, *netif_ip_addr4(netif));
 800c794:	68fb      	ldr	r3, [r7, #12]
 800c796:	3304      	adds	r3, #4
 800c798:	681a      	ldr	r2, [r3, #0]
 800c79a:	687b      	ldr	r3, [r7, #4]
 800c79c:	601a      	str	r2, [r3, #0]

    LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: netif address being changed\n"));
    netif_do_ip_addr_changed(old_addr, &new_addr);
 800c79e:	f107 0314 	add.w	r3, r7, #20
 800c7a2:	4619      	mov	r1, r3
 800c7a4:	6878      	ldr	r0, [r7, #4]
 800c7a6:	f7ff ffbf 	bl	800c728 <netif_do_ip_addr_changed>

    mib2_remove_ip4(netif);
    mib2_remove_route_ip4(0, netif);
    /* set new IP address to netif */
    ip4_addr_set(ip_2_ip4(&netif->ip_addr), ipaddr);
 800c7aa:	68bb      	ldr	r3, [r7, #8]
 800c7ac:	2b00      	cmp	r3, #0
 800c7ae:	d002      	beq.n	800c7b6 <netif_do_set_ipaddr+0x6a>
 800c7b0:	68bb      	ldr	r3, [r7, #8]
 800c7b2:	681b      	ldr	r3, [r3, #0]
 800c7b4:	e000      	b.n	800c7b8 <netif_do_set_ipaddr+0x6c>
 800c7b6:	2300      	movs	r3, #0
 800c7b8:	68fa      	ldr	r2, [r7, #12]
 800c7ba:	6053      	str	r3, [r2, #4]
    IP_SET_TYPE_VAL(netif->ip_addr, IPADDR_TYPE_V4);
    mib2_add_ip4(netif);
    mib2_add_route_ip4(0, netif);

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4);
 800c7bc:	2101      	movs	r1, #1
 800c7be:	68f8      	ldr	r0, [r7, #12]
 800c7c0:	f000 f8d2 	bl	800c968 <netif_issue_reports>

    NETIF_STATUS_CALLBACK(netif);
    return 1; /* address changed */
 800c7c4:	2301      	movs	r3, #1
 800c7c6:	e000      	b.n	800c7ca <netif_do_set_ipaddr+0x7e>
  }
  return 0; /* address unchanged */
 800c7c8:	2300      	movs	r3, #0
}
 800c7ca:	4618      	mov	r0, r3
 800c7cc:	3718      	adds	r7, #24
 800c7ce:	46bd      	mov	sp, r7
 800c7d0:	bd80      	pop	{r7, pc}
 800c7d2:	bf00      	nop
 800c7d4:	0801901c 	.word	0x0801901c
 800c7d8:	08019134 	.word	0x08019134
 800c7dc:	0801906c 	.word	0x0801906c

0800c7e0 <netif_do_set_netmask>:
  }
}

static int
netif_do_set_netmask(struct netif *netif, const ip4_addr_t *netmask, ip_addr_t *old_nm)
{
 800c7e0:	b480      	push	{r7}
 800c7e2:	b085      	sub	sp, #20
 800c7e4:	af00      	add	r7, sp, #0
 800c7e6:	60f8      	str	r0, [r7, #12]
 800c7e8:	60b9      	str	r1, [r7, #8]
 800c7ea:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(netmask, netif_ip4_netmask(netif)) == 0) {
 800c7ec:	68bb      	ldr	r3, [r7, #8]
 800c7ee:	681a      	ldr	r2, [r3, #0]
 800c7f0:	68fb      	ldr	r3, [r7, #12]
 800c7f2:	3308      	adds	r3, #8
 800c7f4:	681b      	ldr	r3, [r3, #0]
 800c7f6:	429a      	cmp	r2, r3
 800c7f8:	d00a      	beq.n	800c810 <netif_do_set_netmask+0x30>
#else
    LWIP_UNUSED_ARG(old_nm);
#endif
    mib2_remove_route_ip4(0, netif);
    /* set new netmask to netif */
    ip4_addr_set(ip_2_ip4(&netif->netmask), netmask);
 800c7fa:	68bb      	ldr	r3, [r7, #8]
 800c7fc:	2b00      	cmp	r3, #0
 800c7fe:	d002      	beq.n	800c806 <netif_do_set_netmask+0x26>
 800c800:	68bb      	ldr	r3, [r7, #8]
 800c802:	681b      	ldr	r3, [r3, #0]
 800c804:	e000      	b.n	800c808 <netif_do_set_netmask+0x28>
 800c806:	2300      	movs	r3, #0
 800c808:	68fa      	ldr	r2, [r7, #12]
 800c80a:	6093      	str	r3, [r2, #8]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_netmask(netif)),
                ip4_addr2_16(netif_ip4_netmask(netif)),
                ip4_addr3_16(netif_ip4_netmask(netif)),
                ip4_addr4_16(netif_ip4_netmask(netif))));
    return 1; /* netmask changed */
 800c80c:	2301      	movs	r3, #1
 800c80e:	e000      	b.n	800c812 <netif_do_set_netmask+0x32>
  }
  return 0; /* netmask unchanged */
 800c810:	2300      	movs	r3, #0
}
 800c812:	4618      	mov	r0, r3
 800c814:	3714      	adds	r7, #20
 800c816:	46bd      	mov	sp, r7
 800c818:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c81c:	4770      	bx	lr

0800c81e <netif_do_set_gw>:
  }
}

static int
netif_do_set_gw(struct netif *netif, const ip4_addr_t *gw, ip_addr_t *old_gw)
{
 800c81e:	b480      	push	{r7}
 800c820:	b085      	sub	sp, #20
 800c822:	af00      	add	r7, sp, #0
 800c824:	60f8      	str	r0, [r7, #12]
 800c826:	60b9      	str	r1, [r7, #8]
 800c828:	607a      	str	r2, [r7, #4]
  /* address is actually being changed? */
  if (ip4_addr_cmp(gw, netif_ip4_gw(netif)) == 0) {
 800c82a:	68bb      	ldr	r3, [r7, #8]
 800c82c:	681a      	ldr	r2, [r3, #0]
 800c82e:	68fb      	ldr	r3, [r7, #12]
 800c830:	330c      	adds	r3, #12
 800c832:	681b      	ldr	r3, [r3, #0]
 800c834:	429a      	cmp	r2, r3
 800c836:	d00a      	beq.n	800c84e <netif_do_set_gw+0x30>
    ip_addr_copy(*old_gw, *netif_ip_gw4(netif));
#else
    LWIP_UNUSED_ARG(old_gw);
#endif

    ip4_addr_set(ip_2_ip4(&netif->gw), gw);
 800c838:	68bb      	ldr	r3, [r7, #8]
 800c83a:	2b00      	cmp	r3, #0
 800c83c:	d002      	beq.n	800c844 <netif_do_set_gw+0x26>
 800c83e:	68bb      	ldr	r3, [r7, #8]
 800c840:	681b      	ldr	r3, [r3, #0]
 800c842:	e000      	b.n	800c846 <netif_do_set_gw+0x28>
 800c844:	2300      	movs	r3, #0
 800c846:	68fa      	ldr	r2, [r7, #12]
 800c848:	60d3      	str	r3, [r2, #12]
                netif->name[0], netif->name[1],
                ip4_addr1_16(netif_ip4_gw(netif)),
                ip4_addr2_16(netif_ip4_gw(netif)),
                ip4_addr3_16(netif_ip4_gw(netif)),
                ip4_addr4_16(netif_ip4_gw(netif))));
    return 1; /* gateway changed */
 800c84a:	2301      	movs	r3, #1
 800c84c:	e000      	b.n	800c850 <netif_do_set_gw+0x32>
  }
  return 0; /* gateway unchanged */
 800c84e:	2300      	movs	r3, #0
}
 800c850:	4618      	mov	r0, r3
 800c852:	3714      	adds	r7, #20
 800c854:	46bd      	mov	sp, r7
 800c856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c85a:	4770      	bx	lr

0800c85c <netif_set_addr>:
 * @param gw the new default gateway
 */
void
netif_set_addr(struct netif *netif, const ip4_addr_t *ipaddr, const ip4_addr_t *netmask,
               const ip4_addr_t *gw)
{
 800c85c:	b580      	push	{r7, lr}
 800c85e:	b088      	sub	sp, #32
 800c860:	af00      	add	r7, sp, #0
 800c862:	60f8      	str	r0, [r7, #12]
 800c864:	60b9      	str	r1, [r7, #8]
 800c866:	607a      	str	r2, [r7, #4]
 800c868:	603b      	str	r3, [r7, #0]
  ip_addr_t old_nm_val;
  ip_addr_t old_gw_val;
  ip_addr_t *old_nm = &old_nm_val;
  ip_addr_t *old_gw = &old_gw_val;
#else
  ip_addr_t *old_nm = NULL;
 800c86a:	2300      	movs	r3, #0
 800c86c:	61fb      	str	r3, [r7, #28]
  ip_addr_t *old_gw = NULL;
 800c86e:	2300      	movs	r3, #0
 800c870:	61bb      	str	r3, [r7, #24]
  int remove;

  LWIP_ASSERT_CORE_LOCKED();

  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800c872:	68bb      	ldr	r3, [r7, #8]
 800c874:	2b00      	cmp	r3, #0
 800c876:	d101      	bne.n	800c87c <netif_set_addr+0x20>
    ipaddr = IP4_ADDR_ANY4;
 800c878:	4b1c      	ldr	r3, [pc, #112]	; (800c8ec <netif_set_addr+0x90>)
 800c87a:	60bb      	str	r3, [r7, #8]
  }
  if (netmask == NULL) {
 800c87c:	687b      	ldr	r3, [r7, #4]
 800c87e:	2b00      	cmp	r3, #0
 800c880:	d101      	bne.n	800c886 <netif_set_addr+0x2a>
    netmask = IP4_ADDR_ANY4;
 800c882:	4b1a      	ldr	r3, [pc, #104]	; (800c8ec <netif_set_addr+0x90>)
 800c884:	607b      	str	r3, [r7, #4]
  }
  if (gw == NULL) {
 800c886:	683b      	ldr	r3, [r7, #0]
 800c888:	2b00      	cmp	r3, #0
 800c88a:	d101      	bne.n	800c890 <netif_set_addr+0x34>
    gw = IP4_ADDR_ANY4;
 800c88c:	4b17      	ldr	r3, [pc, #92]	; (800c8ec <netif_set_addr+0x90>)
 800c88e:	603b      	str	r3, [r7, #0]
  }

  remove = ip4_addr_isany(ipaddr);
 800c890:	68bb      	ldr	r3, [r7, #8]
 800c892:	2b00      	cmp	r3, #0
 800c894:	d003      	beq.n	800c89e <netif_set_addr+0x42>
 800c896:	68bb      	ldr	r3, [r7, #8]
 800c898:	681b      	ldr	r3, [r3, #0]
 800c89a:	2b00      	cmp	r3, #0
 800c89c:	d101      	bne.n	800c8a2 <netif_set_addr+0x46>
 800c89e:	2301      	movs	r3, #1
 800c8a0:	e000      	b.n	800c8a4 <netif_set_addr+0x48>
 800c8a2:	2300      	movs	r3, #0
 800c8a4:	617b      	str	r3, [r7, #20]
  if (remove) {
 800c8a6:	697b      	ldr	r3, [r7, #20]
 800c8a8:	2b00      	cmp	r3, #0
 800c8aa:	d006      	beq.n	800c8ba <netif_set_addr+0x5e>
    /* when removing an address, we have to remove it *before* changing netmask/gw
       to ensure that tcp RST segment can be sent correctly */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8ac:	f107 0310 	add.w	r3, r7, #16
 800c8b0:	461a      	mov	r2, r3
 800c8b2:	68b9      	ldr	r1, [r7, #8]
 800c8b4:	68f8      	ldr	r0, [r7, #12]
 800c8b6:	f7ff ff49 	bl	800c74c <netif_do_set_ipaddr>
      change_reason |= LWIP_NSC_IPV4_ADDRESS_CHANGED;
      cb_args.ipv4_changed.old_address = &old_addr;
#endif
    }
  }
  if (netif_do_set_netmask(netif, netmask, old_nm)) {
 800c8ba:	69fa      	ldr	r2, [r7, #28]
 800c8bc:	6879      	ldr	r1, [r7, #4]
 800c8be:	68f8      	ldr	r0, [r7, #12]
 800c8c0:	f7ff ff8e 	bl	800c7e0 <netif_do_set_netmask>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_NETMASK_CHANGED;
    cb_args.ipv4_changed.old_netmask = old_nm;
#endif
  }
  if (netif_do_set_gw(netif, gw, old_gw)) {
 800c8c4:	69ba      	ldr	r2, [r7, #24]
 800c8c6:	6839      	ldr	r1, [r7, #0]
 800c8c8:	68f8      	ldr	r0, [r7, #12]
 800c8ca:	f7ff ffa8 	bl	800c81e <netif_do_set_gw>
#if LWIP_NETIF_EXT_STATUS_CALLBACK
    change_reason |= LWIP_NSC_IPV4_GATEWAY_CHANGED;
    cb_args.ipv4_changed.old_gw = old_gw;
#endif
  }
  if (!remove) {
 800c8ce:	697b      	ldr	r3, [r7, #20]
 800c8d0:	2b00      	cmp	r3, #0
 800c8d2:	d106      	bne.n	800c8e2 <netif_set_addr+0x86>
    /* set ipaddr last to ensure netmask/gw have been set when status callback is called */
    if (netif_do_set_ipaddr(netif, ipaddr, &old_addr)) {
 800c8d4:	f107 0310 	add.w	r3, r7, #16
 800c8d8:	461a      	mov	r2, r3
 800c8da:	68b9      	ldr	r1, [r7, #8]
 800c8dc:	68f8      	ldr	r0, [r7, #12]
 800c8de:	f7ff ff35 	bl	800c74c <netif_do_set_ipaddr>
  if (change_reason != LWIP_NSC_NONE) {
    change_reason |= LWIP_NSC_IPV4_SETTINGS_CHANGED;
    netif_invoke_ext_callback(netif, change_reason, &cb_args);
  }
#endif
}
 800c8e2:	bf00      	nop
 800c8e4:	3720      	adds	r7, #32
 800c8e6:	46bd      	mov	sp, r7
 800c8e8:	bd80      	pop	{r7, pc}
 800c8ea:	bf00      	nop
 800c8ec:	0801b7e0 	.word	0x0801b7e0

0800c8f0 <netif_set_default>:
 *
 * @param netif the default network interface
 */
void
netif_set_default(struct netif *netif)
{
 800c8f0:	b480      	push	{r7}
 800c8f2:	b083      	sub	sp, #12
 800c8f4:	af00      	add	r7, sp, #0
 800c8f6:	6078      	str	r0, [r7, #4]
    mib2_remove_route_ip4(1, netif);
  } else {
    /* install default route */
    mib2_add_route_ip4(1, netif);
  }
  netif_default = netif;
 800c8f8:	4a04      	ldr	r2, [pc, #16]	; (800c90c <netif_set_default+0x1c>)
 800c8fa:	687b      	ldr	r3, [r7, #4]
 800c8fc:	6013      	str	r3, [r2, #0]
  LWIP_DEBUGF(NETIF_DEBUG, ("netif: setting default interface %c%c\n",
                            netif ? netif->name[0] : '\'', netif ? netif->name[1] : '\''));
}
 800c8fe:	bf00      	nop
 800c900:	370c      	adds	r7, #12
 800c902:	46bd      	mov	sp, r7
 800c904:	f85d 7b04 	ldr.w	r7, [sp], #4
 800c908:	4770      	bx	lr
 800c90a:	bf00      	nop
 800c90c:	2000f7ec 	.word	0x2000f7ec

0800c910 <netif_set_up>:
 * Bring an interface up, available for processing
 * traffic.
 */
void
netif_set_up(struct netif *netif)
{
 800c910:	b580      	push	{r7, lr}
 800c912:	b082      	sub	sp, #8
 800c914:	af00      	add	r7, sp, #0
 800c916:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_up: invalid netif", netif != NULL, return);
 800c918:	687b      	ldr	r3, [r7, #4]
 800c91a:	2b00      	cmp	r3, #0
 800c91c:	d107      	bne.n	800c92e <netif_set_up+0x1e>
 800c91e:	4b0f      	ldr	r3, [pc, #60]	; (800c95c <netif_set_up+0x4c>)
 800c920:	f44f 7254 	mov.w	r2, #848	; 0x350
 800c924:	490e      	ldr	r1, [pc, #56]	; (800c960 <netif_set_up+0x50>)
 800c926:	480f      	ldr	r0, [pc, #60]	; (800c964 <netif_set_up+0x54>)
 800c928:	f00a fa62 	bl	8016df0 <iprintf>
 800c92c:	e013      	b.n	800c956 <netif_set_up+0x46>

  if (!(netif->flags & NETIF_FLAG_UP)) {
 800c92e:	687b      	ldr	r3, [r7, #4]
 800c930:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c934:	f003 0301 	and.w	r3, r3, #1
 800c938:	2b00      	cmp	r3, #0
 800c93a:	d10c      	bne.n	800c956 <netif_set_up+0x46>
    netif_set_flags(netif, NETIF_FLAG_UP);
 800c93c:	687b      	ldr	r3, [r7, #4]
 800c93e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c942:	f043 0301 	orr.w	r3, r3, #1
 800c946:	b2da      	uxtb	r2, r3
 800c948:	687b      	ldr	r3, [r7, #4]
 800c94a:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
      args.status_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800c94e:	2103      	movs	r1, #3
 800c950:	6878      	ldr	r0, [r7, #4]
 800c952:	f000 f809 	bl	800c968 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */
  }
}
 800c956:	3708      	adds	r7, #8
 800c958:	46bd      	mov	sp, r7
 800c95a:	bd80      	pop	{r7, pc}
 800c95c:	0801901c 	.word	0x0801901c
 800c960:	080191a4 	.word	0x080191a4
 800c964:	0801906c 	.word	0x0801906c

0800c968 <netif_issue_reports>:

/** Send ARP/IGMP/MLD/RS events, e.g. on link-up/netif-up or addr-change
 */
static void
netif_issue_reports(struct netif *netif, u8_t report_type)
{
 800c968:	b580      	push	{r7, lr}
 800c96a:	b082      	sub	sp, #8
 800c96c:	af00      	add	r7, sp, #0
 800c96e:	6078      	str	r0, [r7, #4]
 800c970:	460b      	mov	r3, r1
 800c972:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("netif_issue_reports: invalid netif", netif != NULL);
 800c974:	687b      	ldr	r3, [r7, #4]
 800c976:	2b00      	cmp	r3, #0
 800c978:	d106      	bne.n	800c988 <netif_issue_reports+0x20>
 800c97a:	4b18      	ldr	r3, [pc, #96]	; (800c9dc <netif_issue_reports+0x74>)
 800c97c:	f240 326d 	movw	r2, #877	; 0x36d
 800c980:	4917      	ldr	r1, [pc, #92]	; (800c9e0 <netif_issue_reports+0x78>)
 800c982:	4818      	ldr	r0, [pc, #96]	; (800c9e4 <netif_issue_reports+0x7c>)
 800c984:	f00a fa34 	bl	8016df0 <iprintf>

  /* Only send reports when both link and admin states are up */
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c988:	687b      	ldr	r3, [r7, #4]
 800c98a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c98e:	f003 0304 	and.w	r3, r3, #4
 800c992:	2b00      	cmp	r3, #0
 800c994:	d01e      	beq.n	800c9d4 <netif_issue_reports+0x6c>
      !(netif->flags & NETIF_FLAG_UP)) {
 800c996:	687b      	ldr	r3, [r7, #4]
 800c998:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c99c:	f003 0301 	and.w	r3, r3, #1
  if (!(netif->flags & NETIF_FLAG_LINK_UP) ||
 800c9a0:	2b00      	cmp	r3, #0
 800c9a2:	d017      	beq.n	800c9d4 <netif_issue_reports+0x6c>
    return;
  }

#if LWIP_IPV4
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9a4:	78fb      	ldrb	r3, [r7, #3]
 800c9a6:	f003 0301 	and.w	r3, r3, #1
 800c9aa:	2b00      	cmp	r3, #0
 800c9ac:	d013      	beq.n	800c9d6 <netif_issue_reports+0x6e>
      !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	3304      	adds	r3, #4
 800c9b2:	681b      	ldr	r3, [r3, #0]
  if ((report_type & NETIF_REPORT_TYPE_IPV4) &&
 800c9b4:	2b00      	cmp	r3, #0
 800c9b6:	d00e      	beq.n	800c9d6 <netif_issue_reports+0x6e>
#if LWIP_ARP
    /* For Ethernet network interfaces, we would like to send a "gratuitous ARP" */
    if (netif->flags & (NETIF_FLAG_ETHARP)) {
 800c9b8:	687b      	ldr	r3, [r7, #4]
 800c9ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800c9be:	f003 0308 	and.w	r3, r3, #8
 800c9c2:	2b00      	cmp	r3, #0
 800c9c4:	d007      	beq.n	800c9d6 <netif_issue_reports+0x6e>
      etharp_gratuitous(netif);
 800c9c6:	687b      	ldr	r3, [r7, #4]
 800c9c8:	3304      	adds	r3, #4
 800c9ca:	4619      	mov	r1, r3
 800c9cc:	6878      	ldr	r0, [r7, #4]
 800c9ce:	f008 fbdf 	bl	8015190 <etharp_request>
 800c9d2:	e000      	b.n	800c9d6 <netif_issue_reports+0x6e>
    return;
 800c9d4:	bf00      	nop
    /* send mld memberships */
    mld6_report_groups(netif);
#endif /* LWIP_IPV6_MLD */
  }
#endif /* LWIP_IPV6 */
}
 800c9d6:	3708      	adds	r7, #8
 800c9d8:	46bd      	mov	sp, r7
 800c9da:	bd80      	pop	{r7, pc}
 800c9dc:	0801901c 	.word	0x0801901c
 800c9e0:	080191c0 	.word	0x080191c0
 800c9e4:	0801906c 	.word	0x0801906c

0800c9e8 <netif_set_down>:
 * @ingroup netif
 * Bring an interface down, disabling any traffic processing.
 */
void
netif_set_down(struct netif *netif)
{
 800c9e8:	b580      	push	{r7, lr}
 800c9ea:	b082      	sub	sp, #8
 800c9ec:	af00      	add	r7, sp, #0
 800c9ee:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_down: invalid netif", netif != NULL, return);
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2b00      	cmp	r3, #0
 800c9f4:	d107      	bne.n	800ca06 <netif_set_down+0x1e>
 800c9f6:	4b12      	ldr	r3, [pc, #72]	; (800ca40 <netif_set_down+0x58>)
 800c9f8:	f240 329b 	movw	r2, #923	; 0x39b
 800c9fc:	4911      	ldr	r1, [pc, #68]	; (800ca44 <netif_set_down+0x5c>)
 800c9fe:	4812      	ldr	r0, [pc, #72]	; (800ca48 <netif_set_down+0x60>)
 800ca00:	f00a f9f6 	bl	8016df0 <iprintf>
 800ca04:	e019      	b.n	800ca3a <netif_set_down+0x52>

  if (netif->flags & NETIF_FLAG_UP) {
 800ca06:	687b      	ldr	r3, [r7, #4]
 800ca08:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca0c:	f003 0301 	and.w	r3, r3, #1
 800ca10:	2b00      	cmp	r3, #0
 800ca12:	d012      	beq.n	800ca3a <netif_set_down+0x52>
      args.status_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_STATUS_CHANGED, &args);
    }
#endif

    netif_clear_flags(netif, NETIF_FLAG_UP);
 800ca14:	687b      	ldr	r3, [r7, #4]
 800ca16:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca1a:	f023 0301 	bic.w	r3, r3, #1
 800ca1e:	b2da      	uxtb	r2, r3
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    MIB2_COPY_SYSUPTIME_TO(&netif->ts);

#if LWIP_IPV4 && LWIP_ARP
    if (netif->flags & NETIF_FLAG_ETHARP) {
 800ca26:	687b      	ldr	r3, [r7, #4]
 800ca28:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca2c:	f003 0308 	and.w	r3, r3, #8
 800ca30:	2b00      	cmp	r3, #0
 800ca32:	d002      	beq.n	800ca3a <netif_set_down+0x52>
      etharp_cleanup_netif(netif);
 800ca34:	6878      	ldr	r0, [r7, #4]
 800ca36:	f007 ff69 	bl	801490c <etharp_cleanup_netif>
    nd6_cleanup_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_STATUS_CALLBACK(netif);
  }
}
 800ca3a:	3708      	adds	r7, #8
 800ca3c:	46bd      	mov	sp, r7
 800ca3e:	bd80      	pop	{r7, pc}
 800ca40:	0801901c 	.word	0x0801901c
 800ca44:	080191e4 	.word	0x080191e4
 800ca48:	0801906c 	.word	0x0801906c

0800ca4c <netif_set_link_up>:
 * @ingroup netif
 * Called by a driver when its link goes up
 */
void
netif_set_link_up(struct netif *netif)
{
 800ca4c:	b580      	push	{r7, lr}
 800ca4e:	b082      	sub	sp, #8
 800ca50:	af00      	add	r7, sp, #0
 800ca52:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_up: invalid netif", netif != NULL, return);
 800ca54:	687b      	ldr	r3, [r7, #4]
 800ca56:	2b00      	cmp	r3, #0
 800ca58:	d107      	bne.n	800ca6a <netif_set_link_up+0x1e>
 800ca5a:	4b13      	ldr	r3, [pc, #76]	; (800caa8 <netif_set_link_up+0x5c>)
 800ca5c:	f44f 7278 	mov.w	r2, #992	; 0x3e0
 800ca60:	4912      	ldr	r1, [pc, #72]	; (800caac <netif_set_link_up+0x60>)
 800ca62:	4813      	ldr	r0, [pc, #76]	; (800cab0 <netif_set_link_up+0x64>)
 800ca64:	f00a f9c4 	bl	8016df0 <iprintf>
 800ca68:	e01b      	b.n	800caa2 <netif_set_link_up+0x56>

  if (!(netif->flags & NETIF_FLAG_LINK_UP)) {
 800ca6a:	687b      	ldr	r3, [r7, #4]
 800ca6c:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca70:	f003 0304 	and.w	r3, r3, #4
 800ca74:	2b00      	cmp	r3, #0
 800ca76:	d114      	bne.n	800caa2 <netif_set_link_up+0x56>
    netif_set_flags(netif, NETIF_FLAG_LINK_UP);
 800ca78:	687b      	ldr	r3, [r7, #4]
 800ca7a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800ca7e:	f043 0304 	orr.w	r3, r3, #4
 800ca82:	b2da      	uxtb	r2, r3
 800ca84:	687b      	ldr	r3, [r7, #4]
 800ca86:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d

#if LWIP_AUTOIP
    autoip_network_changed(netif);
#endif /* LWIP_AUTOIP */

    netif_issue_reports(netif, NETIF_REPORT_TYPE_IPV4 | NETIF_REPORT_TYPE_IPV6);
 800ca8a:	2103      	movs	r1, #3
 800ca8c:	6878      	ldr	r0, [r7, #4]
 800ca8e:	f7ff ff6b 	bl	800c968 <netif_issue_reports>
#if LWIP_IPV6
    nd6_restart_netif(netif);
#endif /* LWIP_IPV6 */

    NETIF_LINK_CALLBACK(netif);
 800ca92:	687b      	ldr	r3, [r7, #4]
 800ca94:	69db      	ldr	r3, [r3, #28]
 800ca96:	2b00      	cmp	r3, #0
 800ca98:	d003      	beq.n	800caa2 <netif_set_link_up+0x56>
 800ca9a:	687b      	ldr	r3, [r7, #4]
 800ca9c:	69db      	ldr	r3, [r3, #28]
 800ca9e:	6878      	ldr	r0, [r7, #4]
 800caa0:	4798      	blx	r3
      args.link_changed.state = 1;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800caa2:	3708      	adds	r7, #8
 800caa4:	46bd      	mov	sp, r7
 800caa6:	bd80      	pop	{r7, pc}
 800caa8:	0801901c 	.word	0x0801901c
 800caac:	08019204 	.word	0x08019204
 800cab0:	0801906c 	.word	0x0801906c

0800cab4 <netif_set_link_down>:
 * @ingroup netif
 * Called by a driver when its link goes down
 */
void
netif_set_link_down(struct netif *netif)
{
 800cab4:	b580      	push	{r7, lr}
 800cab6:	b082      	sub	sp, #8
 800cab8:	af00      	add	r7, sp, #0
 800caba:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif_set_link_down: invalid netif", netif != NULL, return);
 800cabc:	687b      	ldr	r3, [r7, #4]
 800cabe:	2b00      	cmp	r3, #0
 800cac0:	d107      	bne.n	800cad2 <netif_set_link_down+0x1e>
 800cac2:	4b11      	ldr	r3, [pc, #68]	; (800cb08 <netif_set_link_down+0x54>)
 800cac4:	f240 4206 	movw	r2, #1030	; 0x406
 800cac8:	4910      	ldr	r1, [pc, #64]	; (800cb0c <netif_set_link_down+0x58>)
 800caca:	4811      	ldr	r0, [pc, #68]	; (800cb10 <netif_set_link_down+0x5c>)
 800cacc:	f00a f990 	bl	8016df0 <iprintf>
 800cad0:	e017      	b.n	800cb02 <netif_set_link_down+0x4e>

  if (netif->flags & NETIF_FLAG_LINK_UP) {
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cad8:	f003 0304 	and.w	r3, r3, #4
 800cadc:	2b00      	cmp	r3, #0
 800cade:	d010      	beq.n	800cb02 <netif_set_link_down+0x4e>
    netif_clear_flags(netif, NETIF_FLAG_LINK_UP);
 800cae0:	687b      	ldr	r3, [r7, #4]
 800cae2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 800cae6:	f023 0304 	bic.w	r3, r3, #4
 800caea:	b2da      	uxtb	r2, r3
 800caec:	687b      	ldr	r3, [r7, #4]
 800caee:	f883 202d 	strb.w	r2, [r3, #45]	; 0x2d
    NETIF_LINK_CALLBACK(netif);
 800caf2:	687b      	ldr	r3, [r7, #4]
 800caf4:	69db      	ldr	r3, [r3, #28]
 800caf6:	2b00      	cmp	r3, #0
 800caf8:	d003      	beq.n	800cb02 <netif_set_link_down+0x4e>
 800cafa:	687b      	ldr	r3, [r7, #4]
 800cafc:	69db      	ldr	r3, [r3, #28]
 800cafe:	6878      	ldr	r0, [r7, #4]
 800cb00:	4798      	blx	r3
      args.link_changed.state = 0;
      netif_invoke_ext_callback(netif, LWIP_NSC_LINK_CHANGED, &args);
    }
#endif
  }
}
 800cb02:	3708      	adds	r7, #8
 800cb04:	46bd      	mov	sp, r7
 800cb06:	bd80      	pop	{r7, pc}
 800cb08:	0801901c 	.word	0x0801901c
 800cb0c:	08019228 	.word	0x08019228
 800cb10:	0801906c 	.word	0x0801906c

0800cb14 <netif_set_link_callback>:
 * @ingroup netif
 * Set callback to be called when link is brought up/down
 */
void
netif_set_link_callback(struct netif *netif, netif_status_callback_fn link_callback)
{
 800cb14:	b480      	push	{r7}
 800cb16:	b083      	sub	sp, #12
 800cb18:	af00      	add	r7, sp, #0
 800cb1a:	6078      	str	r0, [r7, #4]
 800cb1c:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();

  if (netif) {
 800cb1e:	687b      	ldr	r3, [r7, #4]
 800cb20:	2b00      	cmp	r3, #0
 800cb22:	d002      	beq.n	800cb2a <netif_set_link_callback+0x16>
    netif->link_callback = link_callback;
 800cb24:	687b      	ldr	r3, [r7, #4]
 800cb26:	683a      	ldr	r2, [r7, #0]
 800cb28:	61da      	str	r2, [r3, #28]
  }
}
 800cb2a:	bf00      	nop
 800cb2c:	370c      	adds	r7, #12
 800cb2e:	46bd      	mov	sp, r7
 800cb30:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb34:	4770      	bx	lr

0800cb36 <netif_null_output_ip4>:
#if LWIP_IPV4
/** Dummy IPv4 output function for netifs not supporting IPv4
 */
static err_t
netif_null_output_ip4(struct netif *netif, struct pbuf *p, const ip4_addr_t *ipaddr)
{
 800cb36:	b480      	push	{r7}
 800cb38:	b085      	sub	sp, #20
 800cb3a:	af00      	add	r7, sp, #0
 800cb3c:	60f8      	str	r0, [r7, #12]
 800cb3e:	60b9      	str	r1, [r7, #8]
 800cb40:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(netif);
  LWIP_UNUSED_ARG(p);
  LWIP_UNUSED_ARG(ipaddr);

  return ERR_IF;
 800cb42:	f06f 030b 	mvn.w	r3, #11
}
 800cb46:	4618      	mov	r0, r3
 800cb48:	3714      	adds	r7, #20
 800cb4a:	46bd      	mov	sp, r7
 800cb4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb50:	4770      	bx	lr
	...

0800cb54 <netif_get_by_index>:
*
* @param idx index of netif to find
*/
struct netif *
netif_get_by_index(u8_t idx)
{
 800cb54:	b480      	push	{r7}
 800cb56:	b085      	sub	sp, #20
 800cb58:	af00      	add	r7, sp, #0
 800cb5a:	4603      	mov	r3, r0
 800cb5c:	71fb      	strb	r3, [r7, #7]
  struct netif *netif;

  LWIP_ASSERT_CORE_LOCKED();

  if (idx != NETIF_NO_INDEX) {
 800cb5e:	79fb      	ldrb	r3, [r7, #7]
 800cb60:	2b00      	cmp	r3, #0
 800cb62:	d013      	beq.n	800cb8c <netif_get_by_index+0x38>
    NETIF_FOREACH(netif) {
 800cb64:	4b0d      	ldr	r3, [pc, #52]	; (800cb9c <netif_get_by_index+0x48>)
 800cb66:	681b      	ldr	r3, [r3, #0]
 800cb68:	60fb      	str	r3, [r7, #12]
 800cb6a:	e00c      	b.n	800cb86 <netif_get_by_index+0x32>
      if (idx == netif_get_index(netif)) {
 800cb6c:	68fb      	ldr	r3, [r7, #12]
 800cb6e:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800cb72:	3301      	adds	r3, #1
 800cb74:	b2db      	uxtb	r3, r3
 800cb76:	79fa      	ldrb	r2, [r7, #7]
 800cb78:	429a      	cmp	r2, r3
 800cb7a:	d101      	bne.n	800cb80 <netif_get_by_index+0x2c>
        return netif; /* found! */
 800cb7c:	68fb      	ldr	r3, [r7, #12]
 800cb7e:	e006      	b.n	800cb8e <netif_get_by_index+0x3a>
    NETIF_FOREACH(netif) {
 800cb80:	68fb      	ldr	r3, [r7, #12]
 800cb82:	681b      	ldr	r3, [r3, #0]
 800cb84:	60fb      	str	r3, [r7, #12]
 800cb86:	68fb      	ldr	r3, [r7, #12]
 800cb88:	2b00      	cmp	r3, #0
 800cb8a:	d1ef      	bne.n	800cb6c <netif_get_by_index+0x18>
      }
    }
  }

  return NULL;
 800cb8c:	2300      	movs	r3, #0
}
 800cb8e:	4618      	mov	r0, r3
 800cb90:	3714      	adds	r7, #20
 800cb92:	46bd      	mov	sp, r7
 800cb94:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cb98:	4770      	bx	lr
 800cb9a:	bf00      	nop
 800cb9c:	2000f7e8 	.word	0x2000f7e8

0800cba0 <pbuf_free_ooseq>:
#if !NO_SYS
static
#endif /* !NO_SYS */
void
pbuf_free_ooseq(void)
{
 800cba0:	b580      	push	{r7, lr}
 800cba2:	b082      	sub	sp, #8
 800cba4:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 0);
 800cba6:	f00a f817 	bl	8016bd8 <sys_arch_protect>
 800cbaa:	6038      	str	r0, [r7, #0]
 800cbac:	4b0d      	ldr	r3, [pc, #52]	; (800cbe4 <pbuf_free_ooseq+0x44>)
 800cbae:	2200      	movs	r2, #0
 800cbb0:	701a      	strb	r2, [r3, #0]
 800cbb2:	6838      	ldr	r0, [r7, #0]
 800cbb4:	f00a f81e 	bl	8016bf4 <sys_arch_unprotect>

  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbb8:	4b0b      	ldr	r3, [pc, #44]	; (800cbe8 <pbuf_free_ooseq+0x48>)
 800cbba:	681b      	ldr	r3, [r3, #0]
 800cbbc:	607b      	str	r3, [r7, #4]
 800cbbe:	e00a      	b.n	800cbd6 <pbuf_free_ooseq+0x36>
    if (pcb->ooseq != NULL) {
 800cbc0:	687b      	ldr	r3, [r7, #4]
 800cbc2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800cbc4:	2b00      	cmp	r3, #0
 800cbc6:	d003      	beq.n	800cbd0 <pbuf_free_ooseq+0x30>
      /** Free the ooseq pbufs of one PCB only */
      LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free_ooseq: freeing out-of-sequence pbufs\n"));
      tcp_free_ooseq(pcb);
 800cbc8:	6878      	ldr	r0, [r7, #4]
 800cbca:	f002 fc91 	bl	800f4f0 <tcp_free_ooseq>
      return;
 800cbce:	e005      	b.n	800cbdc <pbuf_free_ooseq+0x3c>
  for (pcb = tcp_active_pcbs; NULL != pcb; pcb = pcb->next) {
 800cbd0:	687b      	ldr	r3, [r7, #4]
 800cbd2:	68db      	ldr	r3, [r3, #12]
 800cbd4:	607b      	str	r3, [r7, #4]
 800cbd6:	687b      	ldr	r3, [r7, #4]
 800cbd8:	2b00      	cmp	r3, #0
 800cbda:	d1f1      	bne.n	800cbc0 <pbuf_free_ooseq+0x20>
    }
  }
}
 800cbdc:	3708      	adds	r7, #8
 800cbde:	46bd      	mov	sp, r7
 800cbe0:	bd80      	pop	{r7, pc}
 800cbe2:	bf00      	nop
 800cbe4:	2000f7f1 	.word	0x2000f7f1
 800cbe8:	2000f800 	.word	0x2000f800

0800cbec <pbuf_free_ooseq_callback>:
/**
 * Just a callback function for tcpip_callback() that calls pbuf_free_ooseq().
 */
static void
pbuf_free_ooseq_callback(void *arg)
{
 800cbec:	b580      	push	{r7, lr}
 800cbee:	b082      	sub	sp, #8
 800cbf0:	af00      	add	r7, sp, #0
 800cbf2:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);
  pbuf_free_ooseq();
 800cbf4:	f7ff ffd4 	bl	800cba0 <pbuf_free_ooseq>
}
 800cbf8:	bf00      	nop
 800cbfa:	3708      	adds	r7, #8
 800cbfc:	46bd      	mov	sp, r7
 800cbfe:	bd80      	pop	{r7, pc}

0800cc00 <pbuf_pool_is_empty>:
#endif /* !NO_SYS */

/** Queue a call to pbuf_free_ooseq if not already queued. */
static void
pbuf_pool_is_empty(void)
{
 800cc00:	b580      	push	{r7, lr}
 800cc02:	b082      	sub	sp, #8
 800cc04:	af00      	add	r7, sp, #0
#ifndef PBUF_POOL_FREE_OOSEQ_QUEUE_CALL
  SYS_ARCH_SET(pbuf_free_ooseq_pending, 1);
#else /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
  u8_t queued;
  SYS_ARCH_DECL_PROTECT(old_level);
  SYS_ARCH_PROTECT(old_level);
 800cc06:	f009 ffe7 	bl	8016bd8 <sys_arch_protect>
 800cc0a:	6078      	str	r0, [r7, #4]
  queued = pbuf_free_ooseq_pending;
 800cc0c:	4b0f      	ldr	r3, [pc, #60]	; (800cc4c <pbuf_pool_is_empty+0x4c>)
 800cc0e:	781b      	ldrb	r3, [r3, #0]
 800cc10:	70fb      	strb	r3, [r7, #3]
  pbuf_free_ooseq_pending = 1;
 800cc12:	4b0e      	ldr	r3, [pc, #56]	; (800cc4c <pbuf_pool_is_empty+0x4c>)
 800cc14:	2201      	movs	r2, #1
 800cc16:	701a      	strb	r2, [r3, #0]
  SYS_ARCH_UNPROTECT(old_level);
 800cc18:	6878      	ldr	r0, [r7, #4]
 800cc1a:	f009 ffeb 	bl	8016bf4 <sys_arch_unprotect>

  if (!queued) {
 800cc1e:	78fb      	ldrb	r3, [r7, #3]
 800cc20:	2b00      	cmp	r3, #0
 800cc22:	d10f      	bne.n	800cc44 <pbuf_pool_is_empty+0x44>
    /* queue a call to pbuf_free_ooseq if not already queued */
    PBUF_POOL_FREE_OOSEQ_QUEUE_CALL();
 800cc24:	2100      	movs	r1, #0
 800cc26:	480a      	ldr	r0, [pc, #40]	; (800cc50 <pbuf_pool_is_empty+0x50>)
 800cc28:	f7fe fe90 	bl	800b94c <tcpip_try_callback>
 800cc2c:	4603      	mov	r3, r0
 800cc2e:	2b00      	cmp	r3, #0
 800cc30:	d008      	beq.n	800cc44 <pbuf_pool_is_empty+0x44>
 800cc32:	f009 ffd1 	bl	8016bd8 <sys_arch_protect>
 800cc36:	6078      	str	r0, [r7, #4]
 800cc38:	4b04      	ldr	r3, [pc, #16]	; (800cc4c <pbuf_pool_is_empty+0x4c>)
 800cc3a:	2200      	movs	r2, #0
 800cc3c:	701a      	strb	r2, [r3, #0]
 800cc3e:	6878      	ldr	r0, [r7, #4]
 800cc40:	f009 ffd8 	bl	8016bf4 <sys_arch_unprotect>
  }
#endif /* PBUF_POOL_FREE_OOSEQ_QUEUE_CALL */
}
 800cc44:	bf00      	nop
 800cc46:	3708      	adds	r7, #8
 800cc48:	46bd      	mov	sp, r7
 800cc4a:	bd80      	pop	{r7, pc}
 800cc4c:	2000f7f1 	.word	0x2000f7f1
 800cc50:	0800cbed 	.word	0x0800cbed

0800cc54 <pbuf_init_alloced_pbuf>:
#endif /* !LWIP_TCP || !TCP_QUEUE_OOSEQ || !PBUF_POOL_FREE_OOSEQ */

/* Initialize members of struct pbuf after allocation */
static void
pbuf_init_alloced_pbuf(struct pbuf *p, void *payload, u16_t tot_len, u16_t len, pbuf_type type, u8_t flags)
{
 800cc54:	b480      	push	{r7}
 800cc56:	b085      	sub	sp, #20
 800cc58:	af00      	add	r7, sp, #0
 800cc5a:	60f8      	str	r0, [r7, #12]
 800cc5c:	60b9      	str	r1, [r7, #8]
 800cc5e:	4611      	mov	r1, r2
 800cc60:	461a      	mov	r2, r3
 800cc62:	460b      	mov	r3, r1
 800cc64:	80fb      	strh	r3, [r7, #6]
 800cc66:	4613      	mov	r3, r2
 800cc68:	80bb      	strh	r3, [r7, #4]
  p->next = NULL;
 800cc6a:	68fb      	ldr	r3, [r7, #12]
 800cc6c:	2200      	movs	r2, #0
 800cc6e:	601a      	str	r2, [r3, #0]
  p->payload = payload;
 800cc70:	68fb      	ldr	r3, [r7, #12]
 800cc72:	68ba      	ldr	r2, [r7, #8]
 800cc74:	605a      	str	r2, [r3, #4]
  p->tot_len = tot_len;
 800cc76:	68fb      	ldr	r3, [r7, #12]
 800cc78:	88fa      	ldrh	r2, [r7, #6]
 800cc7a:	811a      	strh	r2, [r3, #8]
  p->len = len;
 800cc7c:	68fb      	ldr	r3, [r7, #12]
 800cc7e:	88ba      	ldrh	r2, [r7, #4]
 800cc80:	815a      	strh	r2, [r3, #10]
  p->type_internal = (u8_t)type;
 800cc82:	8b3b      	ldrh	r3, [r7, #24]
 800cc84:	b2da      	uxtb	r2, r3
 800cc86:	68fb      	ldr	r3, [r7, #12]
 800cc88:	731a      	strb	r2, [r3, #12]
  p->flags = flags;
 800cc8a:	68fb      	ldr	r3, [r7, #12]
 800cc8c:	7f3a      	ldrb	r2, [r7, #28]
 800cc8e:	735a      	strb	r2, [r3, #13]
  p->ref = 1;
 800cc90:	68fb      	ldr	r3, [r7, #12]
 800cc92:	2201      	movs	r2, #1
 800cc94:	739a      	strb	r2, [r3, #14]
  p->if_idx = NETIF_NO_INDEX;
 800cc96:	68fb      	ldr	r3, [r7, #12]
 800cc98:	2200      	movs	r2, #0
 800cc9a:	73da      	strb	r2, [r3, #15]
}
 800cc9c:	bf00      	nop
 800cc9e:	3714      	adds	r7, #20
 800cca0:	46bd      	mov	sp, r7
 800cca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 800cca6:	4770      	bx	lr

0800cca8 <pbuf_alloc>:
 * @return the allocated pbuf. If multiple pbufs where allocated, this
 * is the first pbuf of a pbuf chain.
 */
struct pbuf *
pbuf_alloc(pbuf_layer layer, u16_t length, pbuf_type type)
{
 800cca8:	b580      	push	{r7, lr}
 800ccaa:	b08c      	sub	sp, #48	; 0x30
 800ccac:	af02      	add	r7, sp, #8
 800ccae:	4603      	mov	r3, r0
 800ccb0:	71fb      	strb	r3, [r7, #7]
 800ccb2:	460b      	mov	r3, r1
 800ccb4:	80bb      	strh	r3, [r7, #4]
 800ccb6:	4613      	mov	r3, r2
 800ccb8:	807b      	strh	r3, [r7, #2]
  struct pbuf *p;
  u16_t offset = (u16_t)layer;
 800ccba:	79fb      	ldrb	r3, [r7, #7]
 800ccbc:	847b      	strh	r3, [r7, #34]	; 0x22
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F")\n", length));

  switch (type) {
 800ccbe:	887b      	ldrh	r3, [r7, #2]
 800ccc0:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccc4:	d07f      	beq.n	800cdc6 <pbuf_alloc+0x11e>
 800ccc6:	f5b3 7f20 	cmp.w	r3, #640	; 0x280
 800ccca:	f300 80c8 	bgt.w	800ce5e <pbuf_alloc+0x1b6>
 800ccce:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ccd2:	d010      	beq.n	800ccf6 <pbuf_alloc+0x4e>
 800ccd4:	f5b3 7fc1 	cmp.w	r3, #386	; 0x182
 800ccd8:	f300 80c1 	bgt.w	800ce5e <pbuf_alloc+0x1b6>
 800ccdc:	2b01      	cmp	r3, #1
 800ccde:	d002      	beq.n	800cce6 <pbuf_alloc+0x3e>
 800cce0:	2b41      	cmp	r3, #65	; 0x41
 800cce2:	f040 80bc 	bne.w	800ce5e <pbuf_alloc+0x1b6>
    case PBUF_REF: /* fall through */
    case PBUF_ROM:
      p = pbuf_alloc_reference(NULL, length, type);
 800cce6:	887a      	ldrh	r2, [r7, #2]
 800cce8:	88bb      	ldrh	r3, [r7, #4]
 800ccea:	4619      	mov	r1, r3
 800ccec:	2000      	movs	r0, #0
 800ccee:	f000 f8d1 	bl	800ce94 <pbuf_alloc_reference>
 800ccf2:	6278      	str	r0, [r7, #36]	; 0x24
      break;
 800ccf4:	e0bd      	b.n	800ce72 <pbuf_alloc+0x1ca>
    case PBUF_POOL: {
      struct pbuf *q, *last;
      u16_t rem_len; /* remaining length */
      p = NULL;
 800ccf6:	2300      	movs	r3, #0
 800ccf8:	627b      	str	r3, [r7, #36]	; 0x24
      last = NULL;
 800ccfa:	2300      	movs	r3, #0
 800ccfc:	61fb      	str	r3, [r7, #28]
      rem_len = length;
 800ccfe:	88bb      	ldrh	r3, [r7, #4]
 800cd00:	837b      	strh	r3, [r7, #26]
      do {
        u16_t qlen;
        q = (struct pbuf *)memp_malloc(MEMP_PBUF_POOL);
 800cd02:	200c      	movs	r0, #12
 800cd04:	f7ff fb9a 	bl	800c43c <memp_malloc>
 800cd08:	6138      	str	r0, [r7, #16]
        if (q == NULL) {
 800cd0a:	693b      	ldr	r3, [r7, #16]
 800cd0c:	2b00      	cmp	r3, #0
 800cd0e:	d109      	bne.n	800cd24 <pbuf_alloc+0x7c>
          PBUF_POOL_IS_EMPTY();
 800cd10:	f7ff ff76 	bl	800cc00 <pbuf_pool_is_empty>
          /* free chain so far allocated */
          if (p) {
 800cd14:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd16:	2b00      	cmp	r3, #0
 800cd18:	d002      	beq.n	800cd20 <pbuf_alloc+0x78>
            pbuf_free(p);
 800cd1a:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800cd1c:	f000 faa8 	bl	800d270 <pbuf_free>
          }
          /* bail out unsuccessfully */
          return NULL;
 800cd20:	2300      	movs	r3, #0
 800cd22:	e0a7      	b.n	800ce74 <pbuf_alloc+0x1cc>
        }
        qlen = LWIP_MIN(rem_len, (u16_t)(PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)));
 800cd24:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd26:	3303      	adds	r3, #3
 800cd28:	b29b      	uxth	r3, r3
 800cd2a:	f023 0303 	bic.w	r3, r3, #3
 800cd2e:	b29b      	uxth	r3, r3
 800cd30:	f5c3 7314 	rsb	r3, r3, #592	; 0x250
 800cd34:	b29b      	uxth	r3, r3
 800cd36:	8b7a      	ldrh	r2, [r7, #26]
 800cd38:	4293      	cmp	r3, r2
 800cd3a:	bf28      	it	cs
 800cd3c:	4613      	movcs	r3, r2
 800cd3e:	81fb      	strh	r3, [r7, #14]
        pbuf_init_alloced_pbuf(q, LWIP_MEM_ALIGN((void *)((u8_t *)q + SIZEOF_STRUCT_PBUF + offset)),
 800cd40:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd42:	3310      	adds	r3, #16
 800cd44:	693a      	ldr	r2, [r7, #16]
 800cd46:	4413      	add	r3, r2
 800cd48:	3303      	adds	r3, #3
 800cd4a:	f023 0303 	bic.w	r3, r3, #3
 800cd4e:	4618      	mov	r0, r3
 800cd50:	89f9      	ldrh	r1, [r7, #14]
 800cd52:	8b7a      	ldrh	r2, [r7, #26]
 800cd54:	2300      	movs	r3, #0
 800cd56:	9301      	str	r3, [sp, #4]
 800cd58:	887b      	ldrh	r3, [r7, #2]
 800cd5a:	9300      	str	r3, [sp, #0]
 800cd5c:	460b      	mov	r3, r1
 800cd5e:	4601      	mov	r1, r0
 800cd60:	6938      	ldr	r0, [r7, #16]
 800cd62:	f7ff ff77 	bl	800cc54 <pbuf_init_alloced_pbuf>
                               rem_len, qlen, type, 0);
        LWIP_ASSERT("pbuf_alloc: pbuf q->payload properly aligned",
 800cd66:	693b      	ldr	r3, [r7, #16]
 800cd68:	685b      	ldr	r3, [r3, #4]
 800cd6a:	f003 0303 	and.w	r3, r3, #3
 800cd6e:	2b00      	cmp	r3, #0
 800cd70:	d006      	beq.n	800cd80 <pbuf_alloc+0xd8>
 800cd72:	4b42      	ldr	r3, [pc, #264]	; (800ce7c <pbuf_alloc+0x1d4>)
 800cd74:	f44f 7280 	mov.w	r2, #256	; 0x100
 800cd78:	4941      	ldr	r1, [pc, #260]	; (800ce80 <pbuf_alloc+0x1d8>)
 800cd7a:	4842      	ldr	r0, [pc, #264]	; (800ce84 <pbuf_alloc+0x1dc>)
 800cd7c:	f00a f838 	bl	8016df0 <iprintf>
                    ((mem_ptr_t)q->payload % MEM_ALIGNMENT) == 0);
        LWIP_ASSERT("PBUF_POOL_BUFSIZE must be bigger than MEM_ALIGNMENT",
 800cd80:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cd82:	3303      	adds	r3, #3
 800cd84:	f023 0303 	bic.w	r3, r3, #3
 800cd88:	f5b3 7f14 	cmp.w	r3, #592	; 0x250
 800cd8c:	d106      	bne.n	800cd9c <pbuf_alloc+0xf4>
 800cd8e:	4b3b      	ldr	r3, [pc, #236]	; (800ce7c <pbuf_alloc+0x1d4>)
 800cd90:	f44f 7281 	mov.w	r2, #258	; 0x102
 800cd94:	493c      	ldr	r1, [pc, #240]	; (800ce88 <pbuf_alloc+0x1e0>)
 800cd96:	483b      	ldr	r0, [pc, #236]	; (800ce84 <pbuf_alloc+0x1dc>)
 800cd98:	f00a f82a 	bl	8016df0 <iprintf>
                    (PBUF_POOL_BUFSIZE_ALIGNED - LWIP_MEM_ALIGN_SIZE(offset)) > 0 );
        if (p == NULL) {
 800cd9c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800cd9e:	2b00      	cmp	r3, #0
 800cda0:	d102      	bne.n	800cda8 <pbuf_alloc+0x100>
          /* allocated head of pbuf chain (into p) */
          p = q;
 800cda2:	693b      	ldr	r3, [r7, #16]
 800cda4:	627b      	str	r3, [r7, #36]	; 0x24
 800cda6:	e002      	b.n	800cdae <pbuf_alloc+0x106>
        } else {
          /* make previous pbuf point to this pbuf */
          last->next = q;
 800cda8:	69fb      	ldr	r3, [r7, #28]
 800cdaa:	693a      	ldr	r2, [r7, #16]
 800cdac:	601a      	str	r2, [r3, #0]
        }
        last = q;
 800cdae:	693b      	ldr	r3, [r7, #16]
 800cdb0:	61fb      	str	r3, [r7, #28]
        rem_len = (u16_t)(rem_len - qlen);
 800cdb2:	8b7a      	ldrh	r2, [r7, #26]
 800cdb4:	89fb      	ldrh	r3, [r7, #14]
 800cdb6:	1ad3      	subs	r3, r2, r3
 800cdb8:	837b      	strh	r3, [r7, #26]
        offset = 0;
 800cdba:	2300      	movs	r3, #0
 800cdbc:	847b      	strh	r3, [r7, #34]	; 0x22
      } while (rem_len > 0);
 800cdbe:	8b7b      	ldrh	r3, [r7, #26]
 800cdc0:	2b00      	cmp	r3, #0
 800cdc2:	d19e      	bne.n	800cd02 <pbuf_alloc+0x5a>
      break;
 800cdc4:	e055      	b.n	800ce72 <pbuf_alloc+0x1ca>
    }
    case PBUF_RAM: {
      u16_t payload_len = (u16_t)(LWIP_MEM_ALIGN_SIZE(offset) + LWIP_MEM_ALIGN_SIZE(length));
 800cdc6:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800cdc8:	3303      	adds	r3, #3
 800cdca:	b29b      	uxth	r3, r3
 800cdcc:	f023 0303 	bic.w	r3, r3, #3
 800cdd0:	b29a      	uxth	r2, r3
 800cdd2:	88bb      	ldrh	r3, [r7, #4]
 800cdd4:	3303      	adds	r3, #3
 800cdd6:	b29b      	uxth	r3, r3
 800cdd8:	f023 0303 	bic.w	r3, r3, #3
 800cddc:	b29b      	uxth	r3, r3
 800cdde:	4413      	add	r3, r2
 800cde0:	833b      	strh	r3, [r7, #24]
      mem_size_t alloc_len = (mem_size_t)(LWIP_MEM_ALIGN_SIZE(SIZEOF_STRUCT_PBUF) + payload_len);
 800cde2:	8b3b      	ldrh	r3, [r7, #24]
 800cde4:	3310      	adds	r3, #16
 800cde6:	82fb      	strh	r3, [r7, #22]

      /* bug #50040: Check for integer overflow when calculating alloc_len */
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800cde8:	8b3a      	ldrh	r2, [r7, #24]
 800cdea:	88bb      	ldrh	r3, [r7, #4]
 800cdec:	3303      	adds	r3, #3
 800cdee:	f023 0303 	bic.w	r3, r3, #3
 800cdf2:	429a      	cmp	r2, r3
 800cdf4:	d306      	bcc.n	800ce04 <pbuf_alloc+0x15c>
          (alloc_len < LWIP_MEM_ALIGN_SIZE(length))) {
 800cdf6:	8afa      	ldrh	r2, [r7, #22]
 800cdf8:	88bb      	ldrh	r3, [r7, #4]
 800cdfa:	3303      	adds	r3, #3
 800cdfc:	f023 0303 	bic.w	r3, r3, #3
      if ((payload_len < LWIP_MEM_ALIGN_SIZE(length)) ||
 800ce00:	429a      	cmp	r2, r3
 800ce02:	d201      	bcs.n	800ce08 <pbuf_alloc+0x160>
        return NULL;
 800ce04:	2300      	movs	r3, #0
 800ce06:	e035      	b.n	800ce74 <pbuf_alloc+0x1cc>
      }

      /* If pbuf is to be allocated in RAM, allocate memory for it. */
      p = (struct pbuf *)mem_malloc(alloc_len);
 800ce08:	8afb      	ldrh	r3, [r7, #22]
 800ce0a:	4618      	mov	r0, r3
 800ce0c:	f7ff f972 	bl	800c0f4 <mem_malloc>
 800ce10:	6278      	str	r0, [r7, #36]	; 0x24
      if (p == NULL) {
 800ce12:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce14:	2b00      	cmp	r3, #0
 800ce16:	d101      	bne.n	800ce1c <pbuf_alloc+0x174>
        return NULL;
 800ce18:	2300      	movs	r3, #0
 800ce1a:	e02b      	b.n	800ce74 <pbuf_alloc+0x1cc>
      }
      pbuf_init_alloced_pbuf(p, LWIP_MEM_ALIGN((void *)((u8_t *)p + SIZEOF_STRUCT_PBUF + offset)),
 800ce1c:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 800ce1e:	3310      	adds	r3, #16
 800ce20:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 800ce22:	4413      	add	r3, r2
 800ce24:	3303      	adds	r3, #3
 800ce26:	f023 0303 	bic.w	r3, r3, #3
 800ce2a:	4618      	mov	r0, r3
 800ce2c:	88b9      	ldrh	r1, [r7, #4]
 800ce2e:	88ba      	ldrh	r2, [r7, #4]
 800ce30:	2300      	movs	r3, #0
 800ce32:	9301      	str	r3, [sp, #4]
 800ce34:	887b      	ldrh	r3, [r7, #2]
 800ce36:	9300      	str	r3, [sp, #0]
 800ce38:	460b      	mov	r3, r1
 800ce3a:	4601      	mov	r1, r0
 800ce3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 800ce3e:	f7ff ff09 	bl	800cc54 <pbuf_init_alloced_pbuf>
                             length, length, type, 0);
      LWIP_ASSERT("pbuf_alloc: pbuf->payload properly aligned",
 800ce42:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ce44:	685b      	ldr	r3, [r3, #4]
 800ce46:	f003 0303 	and.w	r3, r3, #3
 800ce4a:	2b00      	cmp	r3, #0
 800ce4c:	d010      	beq.n	800ce70 <pbuf_alloc+0x1c8>
 800ce4e:	4b0b      	ldr	r3, [pc, #44]	; (800ce7c <pbuf_alloc+0x1d4>)
 800ce50:	f44f 7291 	mov.w	r2, #290	; 0x122
 800ce54:	490d      	ldr	r1, [pc, #52]	; (800ce8c <pbuf_alloc+0x1e4>)
 800ce56:	480b      	ldr	r0, [pc, #44]	; (800ce84 <pbuf_alloc+0x1dc>)
 800ce58:	f009 ffca 	bl	8016df0 <iprintf>
                  ((mem_ptr_t)p->payload % MEM_ALIGNMENT) == 0);
      break;
 800ce5c:	e008      	b.n	800ce70 <pbuf_alloc+0x1c8>
    }
    default:
      LWIP_ASSERT("pbuf_alloc: erroneous type", 0);
 800ce5e:	4b07      	ldr	r3, [pc, #28]	; (800ce7c <pbuf_alloc+0x1d4>)
 800ce60:	f240 1227 	movw	r2, #295	; 0x127
 800ce64:	490a      	ldr	r1, [pc, #40]	; (800ce90 <pbuf_alloc+0x1e8>)
 800ce66:	4807      	ldr	r0, [pc, #28]	; (800ce84 <pbuf_alloc+0x1dc>)
 800ce68:	f009 ffc2 	bl	8016df0 <iprintf>
      return NULL;
 800ce6c:	2300      	movs	r3, #0
 800ce6e:	e001      	b.n	800ce74 <pbuf_alloc+0x1cc>
      break;
 800ce70:	bf00      	nop
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloc(length=%"U16_F") == %p\n", length, (void *)p));
  return p;
 800ce72:	6a7b      	ldr	r3, [r7, #36]	; 0x24
}
 800ce74:	4618      	mov	r0, r3
 800ce76:	3728      	adds	r7, #40	; 0x28
 800ce78:	46bd      	mov	sp, r7
 800ce7a:	bd80      	pop	{r7, pc}
 800ce7c:	0801924c 	.word	0x0801924c
 800ce80:	0801927c 	.word	0x0801927c
 800ce84:	080192ac 	.word	0x080192ac
 800ce88:	080192d4 	.word	0x080192d4
 800ce8c:	08019308 	.word	0x08019308
 800ce90:	08019334 	.word	0x08019334

0800ce94 <pbuf_alloc_reference>:
 *
 * @return the allocated pbuf.
 */
struct pbuf *
pbuf_alloc_reference(void *payload, u16_t length, pbuf_type type)
{
 800ce94:	b580      	push	{r7, lr}
 800ce96:	b086      	sub	sp, #24
 800ce98:	af02      	add	r7, sp, #8
 800ce9a:	6078      	str	r0, [r7, #4]
 800ce9c:	460b      	mov	r3, r1
 800ce9e:	807b      	strh	r3, [r7, #2]
 800cea0:	4613      	mov	r3, r2
 800cea2:	803b      	strh	r3, [r7, #0]
  struct pbuf *p;
  LWIP_ASSERT("invalid pbuf_type", (type == PBUF_REF) || (type == PBUF_ROM));
 800cea4:	883b      	ldrh	r3, [r7, #0]
 800cea6:	2b41      	cmp	r3, #65	; 0x41
 800cea8:	d009      	beq.n	800cebe <pbuf_alloc_reference+0x2a>
 800ceaa:	883b      	ldrh	r3, [r7, #0]
 800ceac:	2b01      	cmp	r3, #1
 800ceae:	d006      	beq.n	800cebe <pbuf_alloc_reference+0x2a>
 800ceb0:	4b0f      	ldr	r3, [pc, #60]	; (800cef0 <pbuf_alloc_reference+0x5c>)
 800ceb2:	f44f 72a5 	mov.w	r2, #330	; 0x14a
 800ceb6:	490f      	ldr	r1, [pc, #60]	; (800cef4 <pbuf_alloc_reference+0x60>)
 800ceb8:	480f      	ldr	r0, [pc, #60]	; (800cef8 <pbuf_alloc_reference+0x64>)
 800ceba:	f009 ff99 	bl	8016df0 <iprintf>
  /* only allocate memory for the pbuf structure */
  p = (struct pbuf *)memp_malloc(MEMP_PBUF);
 800cebe:	200b      	movs	r0, #11
 800cec0:	f7ff fabc 	bl	800c43c <memp_malloc>
 800cec4:	60f8      	str	r0, [r7, #12]
  if (p == NULL) {
 800cec6:	68fb      	ldr	r3, [r7, #12]
 800cec8:	2b00      	cmp	r3, #0
 800ceca:	d101      	bne.n	800ced0 <pbuf_alloc_reference+0x3c>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_alloc_reference: Could not allocate MEMP_PBUF for PBUF_%s.\n",
                 (type == PBUF_ROM) ? "ROM" : "REF"));
    return NULL;
 800cecc:	2300      	movs	r3, #0
 800cece:	e00b      	b.n	800cee8 <pbuf_alloc_reference+0x54>
  }
  pbuf_init_alloced_pbuf(p, payload, length, length, type, 0);
 800ced0:	8879      	ldrh	r1, [r7, #2]
 800ced2:	887a      	ldrh	r2, [r7, #2]
 800ced4:	2300      	movs	r3, #0
 800ced6:	9301      	str	r3, [sp, #4]
 800ced8:	883b      	ldrh	r3, [r7, #0]
 800ceda:	9300      	str	r3, [sp, #0]
 800cedc:	460b      	mov	r3, r1
 800cede:	6879      	ldr	r1, [r7, #4]
 800cee0:	68f8      	ldr	r0, [r7, #12]
 800cee2:	f7ff feb7 	bl	800cc54 <pbuf_init_alloced_pbuf>
  return p;
 800cee6:	68fb      	ldr	r3, [r7, #12]
}
 800cee8:	4618      	mov	r0, r3
 800ceea:	3710      	adds	r7, #16
 800ceec:	46bd      	mov	sp, r7
 800ceee:	bd80      	pop	{r7, pc}
 800cef0:	0801924c 	.word	0x0801924c
 800cef4:	08019350 	.word	0x08019350
 800cef8:	080192ac 	.word	0x080192ac

0800cefc <pbuf_alloced_custom>:
 *        big enough to hold 'length' plus the header size
 */
struct pbuf *
pbuf_alloced_custom(pbuf_layer l, u16_t length, pbuf_type type, struct pbuf_custom *p,
                    void *payload_mem, u16_t payload_mem_len)
{
 800cefc:	b580      	push	{r7, lr}
 800cefe:	b088      	sub	sp, #32
 800cf00:	af02      	add	r7, sp, #8
 800cf02:	607b      	str	r3, [r7, #4]
 800cf04:	4603      	mov	r3, r0
 800cf06:	73fb      	strb	r3, [r7, #15]
 800cf08:	460b      	mov	r3, r1
 800cf0a:	81bb      	strh	r3, [r7, #12]
 800cf0c:	4613      	mov	r3, r2
 800cf0e:	817b      	strh	r3, [r7, #10]
  u16_t offset = (u16_t)l;
 800cf10:	7bfb      	ldrb	r3, [r7, #15]
 800cf12:	827b      	strh	r3, [r7, #18]
  void *payload;
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_alloced_custom(length=%"U16_F")\n", length));

  if (LWIP_MEM_ALIGN_SIZE(offset) + length > payload_mem_len) {
 800cf14:	8a7b      	ldrh	r3, [r7, #18]
 800cf16:	3303      	adds	r3, #3
 800cf18:	f023 0203 	bic.w	r2, r3, #3
 800cf1c:	89bb      	ldrh	r3, [r7, #12]
 800cf1e:	441a      	add	r2, r3
 800cf20:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 800cf22:	429a      	cmp	r2, r3
 800cf24:	d901      	bls.n	800cf2a <pbuf_alloced_custom+0x2e>
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_WARNING, ("pbuf_alloced_custom(length=%"U16_F") buffer too short\n", length));
    return NULL;
 800cf26:	2300      	movs	r3, #0
 800cf28:	e018      	b.n	800cf5c <pbuf_alloced_custom+0x60>
  }

  if (payload_mem != NULL) {
 800cf2a:	6a3b      	ldr	r3, [r7, #32]
 800cf2c:	2b00      	cmp	r3, #0
 800cf2e:	d007      	beq.n	800cf40 <pbuf_alloced_custom+0x44>
    payload = (u8_t *)payload_mem + LWIP_MEM_ALIGN_SIZE(offset);
 800cf30:	8a7b      	ldrh	r3, [r7, #18]
 800cf32:	3303      	adds	r3, #3
 800cf34:	f023 0303 	bic.w	r3, r3, #3
 800cf38:	6a3a      	ldr	r2, [r7, #32]
 800cf3a:	4413      	add	r3, r2
 800cf3c:	617b      	str	r3, [r7, #20]
 800cf3e:	e001      	b.n	800cf44 <pbuf_alloced_custom+0x48>
  } else {
    payload = NULL;
 800cf40:	2300      	movs	r3, #0
 800cf42:	617b      	str	r3, [r7, #20]
  }
  pbuf_init_alloced_pbuf(&p->pbuf, payload, length, length, type, PBUF_FLAG_IS_CUSTOM);
 800cf44:	6878      	ldr	r0, [r7, #4]
 800cf46:	89b9      	ldrh	r1, [r7, #12]
 800cf48:	89ba      	ldrh	r2, [r7, #12]
 800cf4a:	2302      	movs	r3, #2
 800cf4c:	9301      	str	r3, [sp, #4]
 800cf4e:	897b      	ldrh	r3, [r7, #10]
 800cf50:	9300      	str	r3, [sp, #0]
 800cf52:	460b      	mov	r3, r1
 800cf54:	6979      	ldr	r1, [r7, #20]
 800cf56:	f7ff fe7d 	bl	800cc54 <pbuf_init_alloced_pbuf>
  return &p->pbuf;
 800cf5a:	687b      	ldr	r3, [r7, #4]
}
 800cf5c:	4618      	mov	r0, r3
 800cf5e:	3718      	adds	r7, #24
 800cf60:	46bd      	mov	sp, r7
 800cf62:	bd80      	pop	{r7, pc}

0800cf64 <pbuf_realloc>:
 *
 * @note Despite its name, pbuf_realloc cannot grow the size of a pbuf (chain).
 */
void
pbuf_realloc(struct pbuf *p, u16_t new_len)
{
 800cf64:	b580      	push	{r7, lr}
 800cf66:	b084      	sub	sp, #16
 800cf68:	af00      	add	r7, sp, #0
 800cf6a:	6078      	str	r0, [r7, #4]
 800cf6c:	460b      	mov	r3, r1
 800cf6e:	807b      	strh	r3, [r7, #2]
  struct pbuf *q;
  u16_t rem_len; /* remaining length */
  u16_t shrink;

  LWIP_ASSERT("pbuf_realloc: p != NULL", p != NULL);
 800cf70:	687b      	ldr	r3, [r7, #4]
 800cf72:	2b00      	cmp	r3, #0
 800cf74:	d106      	bne.n	800cf84 <pbuf_realloc+0x20>
 800cf76:	4b3a      	ldr	r3, [pc, #232]	; (800d060 <pbuf_realloc+0xfc>)
 800cf78:	f44f 72cc 	mov.w	r2, #408	; 0x198
 800cf7c:	4939      	ldr	r1, [pc, #228]	; (800d064 <pbuf_realloc+0x100>)
 800cf7e:	483a      	ldr	r0, [pc, #232]	; (800d068 <pbuf_realloc+0x104>)
 800cf80:	f009 ff36 	bl	8016df0 <iprintf>

  /* desired length larger than current length? */
  if (new_len >= p->tot_len) {
 800cf84:	687b      	ldr	r3, [r7, #4]
 800cf86:	891b      	ldrh	r3, [r3, #8]
 800cf88:	887a      	ldrh	r2, [r7, #2]
 800cf8a:	429a      	cmp	r2, r3
 800cf8c:	d263      	bcs.n	800d056 <pbuf_realloc+0xf2>
    return;
  }

  /* the pbuf chain grows by (new_len - p->tot_len) bytes
   * (which may be negative in case of shrinking) */
  shrink = (u16_t)(p->tot_len - new_len);
 800cf8e:	687b      	ldr	r3, [r7, #4]
 800cf90:	891a      	ldrh	r2, [r3, #8]
 800cf92:	887b      	ldrh	r3, [r7, #2]
 800cf94:	1ad3      	subs	r3, r2, r3
 800cf96:	813b      	strh	r3, [r7, #8]

  /* first, step over any pbufs that should remain in the chain */
  rem_len = new_len;
 800cf98:	887b      	ldrh	r3, [r7, #2]
 800cf9a:	817b      	strh	r3, [r7, #10]
  q = p;
 800cf9c:	687b      	ldr	r3, [r7, #4]
 800cf9e:	60fb      	str	r3, [r7, #12]
  /* should this pbuf be kept? */
  while (rem_len > q->len) {
 800cfa0:	e018      	b.n	800cfd4 <pbuf_realloc+0x70>
    /* decrease remaining length by pbuf length */
    rem_len = (u16_t)(rem_len - q->len);
 800cfa2:	68fb      	ldr	r3, [r7, #12]
 800cfa4:	895b      	ldrh	r3, [r3, #10]
 800cfa6:	897a      	ldrh	r2, [r7, #10]
 800cfa8:	1ad3      	subs	r3, r2, r3
 800cfaa:	817b      	strh	r3, [r7, #10]
    /* decrease total length indicator */
    q->tot_len = (u16_t)(q->tot_len - shrink);
 800cfac:	68fb      	ldr	r3, [r7, #12]
 800cfae:	891a      	ldrh	r2, [r3, #8]
 800cfb0:	893b      	ldrh	r3, [r7, #8]
 800cfb2:	1ad3      	subs	r3, r2, r3
 800cfb4:	b29a      	uxth	r2, r3
 800cfb6:	68fb      	ldr	r3, [r7, #12]
 800cfb8:	811a      	strh	r2, [r3, #8]
    /* proceed to next pbuf in chain */
    q = q->next;
 800cfba:	68fb      	ldr	r3, [r7, #12]
 800cfbc:	681b      	ldr	r3, [r3, #0]
 800cfbe:	60fb      	str	r3, [r7, #12]
    LWIP_ASSERT("pbuf_realloc: q != NULL", q != NULL);
 800cfc0:	68fb      	ldr	r3, [r7, #12]
 800cfc2:	2b00      	cmp	r3, #0
 800cfc4:	d106      	bne.n	800cfd4 <pbuf_realloc+0x70>
 800cfc6:	4b26      	ldr	r3, [pc, #152]	; (800d060 <pbuf_realloc+0xfc>)
 800cfc8:	f240 12af 	movw	r2, #431	; 0x1af
 800cfcc:	4927      	ldr	r1, [pc, #156]	; (800d06c <pbuf_realloc+0x108>)
 800cfce:	4826      	ldr	r0, [pc, #152]	; (800d068 <pbuf_realloc+0x104>)
 800cfd0:	f009 ff0e 	bl	8016df0 <iprintf>
  while (rem_len > q->len) {
 800cfd4:	68fb      	ldr	r3, [r7, #12]
 800cfd6:	895b      	ldrh	r3, [r3, #10]
 800cfd8:	897a      	ldrh	r2, [r7, #10]
 800cfda:	429a      	cmp	r2, r3
 800cfdc:	d8e1      	bhi.n	800cfa2 <pbuf_realloc+0x3e>
  /* we have now reached the new last pbuf (in q) */
  /* rem_len == desired length for pbuf q */

  /* shrink allocated memory for PBUF_RAM */
  /* (other types merely adjust their length fields */
  if (pbuf_match_allocsrc(q, PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) && (rem_len != q->len)
 800cfde:	68fb      	ldr	r3, [r7, #12]
 800cfe0:	7b1b      	ldrb	r3, [r3, #12]
 800cfe2:	f003 030f 	and.w	r3, r3, #15
 800cfe6:	2b00      	cmp	r3, #0
 800cfe8:	d121      	bne.n	800d02e <pbuf_realloc+0xca>
 800cfea:	68fb      	ldr	r3, [r7, #12]
 800cfec:	895b      	ldrh	r3, [r3, #10]
 800cfee:	897a      	ldrh	r2, [r7, #10]
 800cff0:	429a      	cmp	r2, r3
 800cff2:	d01c      	beq.n	800d02e <pbuf_realloc+0xca>
#if LWIP_SUPPORT_CUSTOM_PBUF
      && ((q->flags & PBUF_FLAG_IS_CUSTOM) == 0)
 800cff4:	68fb      	ldr	r3, [r7, #12]
 800cff6:	7b5b      	ldrb	r3, [r3, #13]
 800cff8:	f003 0302 	and.w	r3, r3, #2
 800cffc:	2b00      	cmp	r3, #0
 800cffe:	d116      	bne.n	800d02e <pbuf_realloc+0xca>
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
     ) {
    /* reallocate and adjust the length of the pbuf that will be split */
    q = (struct pbuf *)mem_trim(q, (mem_size_t)(((u8_t *)q->payload - (u8_t *)q) + rem_len));
 800d000:	68fb      	ldr	r3, [r7, #12]
 800d002:	685a      	ldr	r2, [r3, #4]
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	1ad3      	subs	r3, r2, r3
 800d008:	b29a      	uxth	r2, r3
 800d00a:	897b      	ldrh	r3, [r7, #10]
 800d00c:	4413      	add	r3, r2
 800d00e:	b29b      	uxth	r3, r3
 800d010:	4619      	mov	r1, r3
 800d012:	68f8      	ldr	r0, [r7, #12]
 800d014:	f7fe ff64 	bl	800bee0 <mem_trim>
 800d018:	60f8      	str	r0, [r7, #12]
    LWIP_ASSERT("mem_trim returned q == NULL", q != NULL);
 800d01a:	68fb      	ldr	r3, [r7, #12]
 800d01c:	2b00      	cmp	r3, #0
 800d01e:	d106      	bne.n	800d02e <pbuf_realloc+0xca>
 800d020:	4b0f      	ldr	r3, [pc, #60]	; (800d060 <pbuf_realloc+0xfc>)
 800d022:	f240 12bd 	movw	r2, #445	; 0x1bd
 800d026:	4912      	ldr	r1, [pc, #72]	; (800d070 <pbuf_realloc+0x10c>)
 800d028:	480f      	ldr	r0, [pc, #60]	; (800d068 <pbuf_realloc+0x104>)
 800d02a:	f009 fee1 	bl	8016df0 <iprintf>
  }
  /* adjust length fields for new last pbuf */
  q->len = rem_len;
 800d02e:	68fb      	ldr	r3, [r7, #12]
 800d030:	897a      	ldrh	r2, [r7, #10]
 800d032:	815a      	strh	r2, [r3, #10]
  q->tot_len = q->len;
 800d034:	68fb      	ldr	r3, [r7, #12]
 800d036:	895a      	ldrh	r2, [r3, #10]
 800d038:	68fb      	ldr	r3, [r7, #12]
 800d03a:	811a      	strh	r2, [r3, #8]

  /* any remaining pbufs in chain? */
  if (q->next != NULL) {
 800d03c:	68fb      	ldr	r3, [r7, #12]
 800d03e:	681b      	ldr	r3, [r3, #0]
 800d040:	2b00      	cmp	r3, #0
 800d042:	d004      	beq.n	800d04e <pbuf_realloc+0xea>
    /* free remaining pbufs in chain */
    pbuf_free(q->next);
 800d044:	68fb      	ldr	r3, [r7, #12]
 800d046:	681b      	ldr	r3, [r3, #0]
 800d048:	4618      	mov	r0, r3
 800d04a:	f000 f911 	bl	800d270 <pbuf_free>
  }
  /* q is last packet in chain */
  q->next = NULL;
 800d04e:	68fb      	ldr	r3, [r7, #12]
 800d050:	2200      	movs	r2, #0
 800d052:	601a      	str	r2, [r3, #0]
 800d054:	e000      	b.n	800d058 <pbuf_realloc+0xf4>
    return;
 800d056:	bf00      	nop

}
 800d058:	3710      	adds	r7, #16
 800d05a:	46bd      	mov	sp, r7
 800d05c:	bd80      	pop	{r7, pc}
 800d05e:	bf00      	nop
 800d060:	0801924c 	.word	0x0801924c
 800d064:	08019364 	.word	0x08019364
 800d068:	080192ac 	.word	0x080192ac
 800d06c:	0801937c 	.word	0x0801937c
 800d070:	08019394 	.word	0x08019394

0800d074 <pbuf_add_header_impl>:
 * @return non-zero on failure, zero on success.
 *
 */
static u8_t
pbuf_add_header_impl(struct pbuf *p, size_t header_size_increment, u8_t force)
{
 800d074:	b580      	push	{r7, lr}
 800d076:	b086      	sub	sp, #24
 800d078:	af00      	add	r7, sp, #0
 800d07a:	60f8      	str	r0, [r7, #12]
 800d07c:	60b9      	str	r1, [r7, #8]
 800d07e:	4613      	mov	r3, r2
 800d080:	71fb      	strb	r3, [r7, #7]
  u16_t type_internal;
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d082:	68fb      	ldr	r3, [r7, #12]
 800d084:	2b00      	cmp	r3, #0
 800d086:	d106      	bne.n	800d096 <pbuf_add_header_impl+0x22>
 800d088:	4b2b      	ldr	r3, [pc, #172]	; (800d138 <pbuf_add_header_impl+0xc4>)
 800d08a:	f240 12df 	movw	r2, #479	; 0x1df
 800d08e:	492b      	ldr	r1, [pc, #172]	; (800d13c <pbuf_add_header_impl+0xc8>)
 800d090:	482b      	ldr	r0, [pc, #172]	; (800d140 <pbuf_add_header_impl+0xcc>)
 800d092:	f009 fead 	bl	8016df0 <iprintf>
  if ((p == NULL) || (header_size_increment > 0xFFFF)) {
 800d096:	68fb      	ldr	r3, [r7, #12]
 800d098:	2b00      	cmp	r3, #0
 800d09a:	d003      	beq.n	800d0a4 <pbuf_add_header_impl+0x30>
 800d09c:	68bb      	ldr	r3, [r7, #8]
 800d09e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d0a2:	d301      	bcc.n	800d0a8 <pbuf_add_header_impl+0x34>
    return 1;
 800d0a4:	2301      	movs	r3, #1
 800d0a6:	e043      	b.n	800d130 <pbuf_add_header_impl+0xbc>
  }
  if (header_size_increment == 0) {
 800d0a8:	68bb      	ldr	r3, [r7, #8]
 800d0aa:	2b00      	cmp	r3, #0
 800d0ac:	d101      	bne.n	800d0b2 <pbuf_add_header_impl+0x3e>
    return 0;
 800d0ae:	2300      	movs	r3, #0
 800d0b0:	e03e      	b.n	800d130 <pbuf_add_header_impl+0xbc>
  }

  increment_magnitude = (u16_t)header_size_increment;
 800d0b2:	68bb      	ldr	r3, [r7, #8]
 800d0b4:	827b      	strh	r3, [r7, #18]
  /* Do not allow tot_len to wrap as a result. */
  if ((u16_t)(increment_magnitude + p->tot_len) < increment_magnitude) {
 800d0b6:	68fb      	ldr	r3, [r7, #12]
 800d0b8:	891a      	ldrh	r2, [r3, #8]
 800d0ba:	8a7b      	ldrh	r3, [r7, #18]
 800d0bc:	4413      	add	r3, r2
 800d0be:	b29b      	uxth	r3, r3
 800d0c0:	8a7a      	ldrh	r2, [r7, #18]
 800d0c2:	429a      	cmp	r2, r3
 800d0c4:	d901      	bls.n	800d0ca <pbuf_add_header_impl+0x56>
    return 1;
 800d0c6:	2301      	movs	r3, #1
 800d0c8:	e032      	b.n	800d130 <pbuf_add_header_impl+0xbc>
  }

  type_internal = p->type_internal;
 800d0ca:	68fb      	ldr	r3, [r7, #12]
 800d0cc:	7b1b      	ldrb	r3, [r3, #12]
 800d0ce:	823b      	strh	r3, [r7, #16]

  /* pbuf types containing payloads? */
  if (type_internal & PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS) {
 800d0d0:	8a3b      	ldrh	r3, [r7, #16]
 800d0d2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800d0d6:	2b00      	cmp	r3, #0
 800d0d8:	d00c      	beq.n	800d0f4 <pbuf_add_header_impl+0x80>
    /* set new payload pointer */
    payload = (u8_t *)p->payload - header_size_increment;
 800d0da:	68fb      	ldr	r3, [r7, #12]
 800d0dc:	685a      	ldr	r2, [r3, #4]
 800d0de:	68bb      	ldr	r3, [r7, #8]
 800d0e0:	425b      	negs	r3, r3
 800d0e2:	4413      	add	r3, r2
 800d0e4:	617b      	str	r3, [r7, #20]
    /* boundary check fails? */
    if ((u8_t *)payload < (u8_t *)p + SIZEOF_STRUCT_PBUF) {
 800d0e6:	68fb      	ldr	r3, [r7, #12]
 800d0e8:	3310      	adds	r3, #16
 800d0ea:	697a      	ldr	r2, [r7, #20]
 800d0ec:	429a      	cmp	r2, r3
 800d0ee:	d20d      	bcs.n	800d10c <pbuf_add_header_impl+0x98>
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE,
                   ("pbuf_add_header: failed as %p < %p (not enough space for new header size)\n",
                    (void *)payload, (void *)((u8_t *)p + SIZEOF_STRUCT_PBUF)));
      /* bail out unsuccessfully */
      return 1;
 800d0f0:	2301      	movs	r3, #1
 800d0f2:	e01d      	b.n	800d130 <pbuf_add_header_impl+0xbc>
    }
    /* pbuf types referring to external payloads? */
  } else {
    /* hide a header in the payload? */
    if (force) {
 800d0f4:	79fb      	ldrb	r3, [r7, #7]
 800d0f6:	2b00      	cmp	r3, #0
 800d0f8:	d006      	beq.n	800d108 <pbuf_add_header_impl+0x94>
      payload = (u8_t *)p->payload - header_size_increment;
 800d0fa:	68fb      	ldr	r3, [r7, #12]
 800d0fc:	685a      	ldr	r2, [r3, #4]
 800d0fe:	68bb      	ldr	r3, [r7, #8]
 800d100:	425b      	negs	r3, r3
 800d102:	4413      	add	r3, r2
 800d104:	617b      	str	r3, [r7, #20]
 800d106:	e001      	b.n	800d10c <pbuf_add_header_impl+0x98>
    } else {
      /* cannot expand payload to front (yet!)
       * bail out unsuccessfully */
      return 1;
 800d108:	2301      	movs	r3, #1
 800d10a:	e011      	b.n	800d130 <pbuf_add_header_impl+0xbc>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_add_header: old %p new %p (%"U16_F")\n",
              (void *)p->payload, (void *)payload, increment_magnitude));

  /* modify pbuf fields */
  p->payload = payload;
 800d10c:	68fb      	ldr	r3, [r7, #12]
 800d10e:	697a      	ldr	r2, [r7, #20]
 800d110:	605a      	str	r2, [r3, #4]
  p->len = (u16_t)(p->len + increment_magnitude);
 800d112:	68fb      	ldr	r3, [r7, #12]
 800d114:	895a      	ldrh	r2, [r3, #10]
 800d116:	8a7b      	ldrh	r3, [r7, #18]
 800d118:	4413      	add	r3, r2
 800d11a:	b29a      	uxth	r2, r3
 800d11c:	68fb      	ldr	r3, [r7, #12]
 800d11e:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len + increment_magnitude);
 800d120:	68fb      	ldr	r3, [r7, #12]
 800d122:	891a      	ldrh	r2, [r3, #8]
 800d124:	8a7b      	ldrh	r3, [r7, #18]
 800d126:	4413      	add	r3, r2
 800d128:	b29a      	uxth	r2, r3
 800d12a:	68fb      	ldr	r3, [r7, #12]
 800d12c:	811a      	strh	r2, [r3, #8]


  return 0;
 800d12e:	2300      	movs	r3, #0
}
 800d130:	4618      	mov	r0, r3
 800d132:	3718      	adds	r7, #24
 800d134:	46bd      	mov	sp, r7
 800d136:	bd80      	pop	{r7, pc}
 800d138:	0801924c 	.word	0x0801924c
 800d13c:	080193b0 	.word	0x080193b0
 800d140:	080192ac 	.word	0x080192ac

0800d144 <pbuf_add_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_add_header(struct pbuf *p, size_t header_size_increment)
{
 800d144:	b580      	push	{r7, lr}
 800d146:	b082      	sub	sp, #8
 800d148:	af00      	add	r7, sp, #0
 800d14a:	6078      	str	r0, [r7, #4]
 800d14c:	6039      	str	r1, [r7, #0]
  return pbuf_add_header_impl(p, header_size_increment, 0);
 800d14e:	2200      	movs	r2, #0
 800d150:	6839      	ldr	r1, [r7, #0]
 800d152:	6878      	ldr	r0, [r7, #4]
 800d154:	f7ff ff8e 	bl	800d074 <pbuf_add_header_impl>
 800d158:	4603      	mov	r3, r0
}
 800d15a:	4618      	mov	r0, r3
 800d15c:	3708      	adds	r7, #8
 800d15e:	46bd      	mov	sp, r7
 800d160:	bd80      	pop	{r7, pc}
	...

0800d164 <pbuf_remove_header>:
 * @return non-zero on failure, zero on success.
 *
 */
u8_t
pbuf_remove_header(struct pbuf *p, size_t header_size_decrement)
{
 800d164:	b580      	push	{r7, lr}
 800d166:	b084      	sub	sp, #16
 800d168:	af00      	add	r7, sp, #0
 800d16a:	6078      	str	r0, [r7, #4]
 800d16c:	6039      	str	r1, [r7, #0]
  void *payload;
  u16_t increment_magnitude;

  LWIP_ASSERT("p != NULL", p != NULL);
 800d16e:	687b      	ldr	r3, [r7, #4]
 800d170:	2b00      	cmp	r3, #0
 800d172:	d106      	bne.n	800d182 <pbuf_remove_header+0x1e>
 800d174:	4b20      	ldr	r3, [pc, #128]	; (800d1f8 <pbuf_remove_header+0x94>)
 800d176:	f240 224b 	movw	r2, #587	; 0x24b
 800d17a:	4920      	ldr	r1, [pc, #128]	; (800d1fc <pbuf_remove_header+0x98>)
 800d17c:	4820      	ldr	r0, [pc, #128]	; (800d200 <pbuf_remove_header+0x9c>)
 800d17e:	f009 fe37 	bl	8016df0 <iprintf>
  if ((p == NULL) || (header_size_decrement > 0xFFFF)) {
 800d182:	687b      	ldr	r3, [r7, #4]
 800d184:	2b00      	cmp	r3, #0
 800d186:	d003      	beq.n	800d190 <pbuf_remove_header+0x2c>
 800d188:	683b      	ldr	r3, [r7, #0]
 800d18a:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800d18e:	d301      	bcc.n	800d194 <pbuf_remove_header+0x30>
    return 1;
 800d190:	2301      	movs	r3, #1
 800d192:	e02c      	b.n	800d1ee <pbuf_remove_header+0x8a>
  }
  if (header_size_decrement == 0) {
 800d194:	683b      	ldr	r3, [r7, #0]
 800d196:	2b00      	cmp	r3, #0
 800d198:	d101      	bne.n	800d19e <pbuf_remove_header+0x3a>
    return 0;
 800d19a:	2300      	movs	r3, #0
 800d19c:	e027      	b.n	800d1ee <pbuf_remove_header+0x8a>
  }

  increment_magnitude = (u16_t)header_size_decrement;
 800d19e:	683b      	ldr	r3, [r7, #0]
 800d1a0:	81fb      	strh	r3, [r7, #14]
  /* Check that we aren't going to move off the end of the pbuf */
  LWIP_ERROR("increment_magnitude <= p->len", (increment_magnitude <= p->len), return 1;);
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	895b      	ldrh	r3, [r3, #10]
 800d1a6:	89fa      	ldrh	r2, [r7, #14]
 800d1a8:	429a      	cmp	r2, r3
 800d1aa:	d908      	bls.n	800d1be <pbuf_remove_header+0x5a>
 800d1ac:	4b12      	ldr	r3, [pc, #72]	; (800d1f8 <pbuf_remove_header+0x94>)
 800d1ae:	f240 2255 	movw	r2, #597	; 0x255
 800d1b2:	4914      	ldr	r1, [pc, #80]	; (800d204 <pbuf_remove_header+0xa0>)
 800d1b4:	4812      	ldr	r0, [pc, #72]	; (800d200 <pbuf_remove_header+0x9c>)
 800d1b6:	f009 fe1b 	bl	8016df0 <iprintf>
 800d1ba:	2301      	movs	r3, #1
 800d1bc:	e017      	b.n	800d1ee <pbuf_remove_header+0x8a>

  /* remember current payload pointer */
  payload = p->payload;
 800d1be:	687b      	ldr	r3, [r7, #4]
 800d1c0:	685b      	ldr	r3, [r3, #4]
 800d1c2:	60bb      	str	r3, [r7, #8]
  LWIP_UNUSED_ARG(payload); /* only used in LWIP_DEBUGF below */

  /* increase payload pointer (guarded by length check above) */
  p->payload = (u8_t *)p->payload + header_size_decrement;
 800d1c4:	687b      	ldr	r3, [r7, #4]
 800d1c6:	685a      	ldr	r2, [r3, #4]
 800d1c8:	683b      	ldr	r3, [r7, #0]
 800d1ca:	441a      	add	r2, r3
 800d1cc:	687b      	ldr	r3, [r7, #4]
 800d1ce:	605a      	str	r2, [r3, #4]
  /* modify pbuf length fields */
  p->len = (u16_t)(p->len - increment_magnitude);
 800d1d0:	687b      	ldr	r3, [r7, #4]
 800d1d2:	895a      	ldrh	r2, [r3, #10]
 800d1d4:	89fb      	ldrh	r3, [r7, #14]
 800d1d6:	1ad3      	subs	r3, r2, r3
 800d1d8:	b29a      	uxth	r2, r3
 800d1da:	687b      	ldr	r3, [r7, #4]
 800d1dc:	815a      	strh	r2, [r3, #10]
  p->tot_len = (u16_t)(p->tot_len - increment_magnitude);
 800d1de:	687b      	ldr	r3, [r7, #4]
 800d1e0:	891a      	ldrh	r2, [r3, #8]
 800d1e2:	89fb      	ldrh	r3, [r7, #14]
 800d1e4:	1ad3      	subs	r3, r2, r3
 800d1e6:	b29a      	uxth	r2, r3
 800d1e8:	687b      	ldr	r3, [r7, #4]
 800d1ea:	811a      	strh	r2, [r3, #8]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_remove_header: old %p new %p (%"U16_F")\n",
              (void *)payload, (void *)p->payload, increment_magnitude));

  return 0;
 800d1ec:	2300      	movs	r3, #0
}
 800d1ee:	4618      	mov	r0, r3
 800d1f0:	3710      	adds	r7, #16
 800d1f2:	46bd      	mov	sp, r7
 800d1f4:	bd80      	pop	{r7, pc}
 800d1f6:	bf00      	nop
 800d1f8:	0801924c 	.word	0x0801924c
 800d1fc:	080193b0 	.word	0x080193b0
 800d200:	080192ac 	.word	0x080192ac
 800d204:	080193bc 	.word	0x080193bc

0800d208 <pbuf_header_impl>:

static u8_t
pbuf_header_impl(struct pbuf *p, s16_t header_size_increment, u8_t force)
{
 800d208:	b580      	push	{r7, lr}
 800d20a:	b082      	sub	sp, #8
 800d20c:	af00      	add	r7, sp, #0
 800d20e:	6078      	str	r0, [r7, #4]
 800d210:	460b      	mov	r3, r1
 800d212:	807b      	strh	r3, [r7, #2]
 800d214:	4613      	mov	r3, r2
 800d216:	707b      	strb	r3, [r7, #1]
  if (header_size_increment < 0) {
 800d218:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d21c:	2b00      	cmp	r3, #0
 800d21e:	da08      	bge.n	800d232 <pbuf_header_impl+0x2a>
    return pbuf_remove_header(p, (size_t) - header_size_increment);
 800d220:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d224:	425b      	negs	r3, r3
 800d226:	4619      	mov	r1, r3
 800d228:	6878      	ldr	r0, [r7, #4]
 800d22a:	f7ff ff9b 	bl	800d164 <pbuf_remove_header>
 800d22e:	4603      	mov	r3, r0
 800d230:	e007      	b.n	800d242 <pbuf_header_impl+0x3a>
  } else {
    return pbuf_add_header_impl(p, (size_t)header_size_increment, force);
 800d232:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d236:	787a      	ldrb	r2, [r7, #1]
 800d238:	4619      	mov	r1, r3
 800d23a:	6878      	ldr	r0, [r7, #4]
 800d23c:	f7ff ff1a 	bl	800d074 <pbuf_add_header_impl>
 800d240:	4603      	mov	r3, r0
  }
}
 800d242:	4618      	mov	r0, r3
 800d244:	3708      	adds	r7, #8
 800d246:	46bd      	mov	sp, r7
 800d248:	bd80      	pop	{r7, pc}

0800d24a <pbuf_header_force>:
 * Same as pbuf_header but does not check if 'header_size > 0' is allowed.
 * This is used internally only, to allow PBUF_REF for RX.
 */
u8_t
pbuf_header_force(struct pbuf *p, s16_t header_size_increment)
{
 800d24a:	b580      	push	{r7, lr}
 800d24c:	b082      	sub	sp, #8
 800d24e:	af00      	add	r7, sp, #0
 800d250:	6078      	str	r0, [r7, #4]
 800d252:	460b      	mov	r3, r1
 800d254:	807b      	strh	r3, [r7, #2]
  return pbuf_header_impl(p, header_size_increment, 1);
 800d256:	f9b7 3002 	ldrsh.w	r3, [r7, #2]
 800d25a:	2201      	movs	r2, #1
 800d25c:	4619      	mov	r1, r3
 800d25e:	6878      	ldr	r0, [r7, #4]
 800d260:	f7ff ffd2 	bl	800d208 <pbuf_header_impl>
 800d264:	4603      	mov	r3, r0
}
 800d266:	4618      	mov	r0, r3
 800d268:	3708      	adds	r7, #8
 800d26a:	46bd      	mov	sp, r7
 800d26c:	bd80      	pop	{r7, pc}
	...

0800d270 <pbuf_free>:
 * 1->1->1 becomes .......
 *
 */
u8_t
pbuf_free(struct pbuf *p)
{
 800d270:	b580      	push	{r7, lr}
 800d272:	b088      	sub	sp, #32
 800d274:	af00      	add	r7, sp, #0
 800d276:	6078      	str	r0, [r7, #4]
  u8_t alloc_src;
  struct pbuf *q;
  u8_t count;

  if (p == NULL) {
 800d278:	687b      	ldr	r3, [r7, #4]
 800d27a:	2b00      	cmp	r3, #0
 800d27c:	d10b      	bne.n	800d296 <pbuf_free+0x26>
    LWIP_ASSERT("p != NULL", p != NULL);
 800d27e:	687b      	ldr	r3, [r7, #4]
 800d280:	2b00      	cmp	r3, #0
 800d282:	d106      	bne.n	800d292 <pbuf_free+0x22>
 800d284:	4b3b      	ldr	r3, [pc, #236]	; (800d374 <pbuf_free+0x104>)
 800d286:	f44f 7237 	mov.w	r2, #732	; 0x2dc
 800d28a:	493b      	ldr	r1, [pc, #236]	; (800d378 <pbuf_free+0x108>)
 800d28c:	483b      	ldr	r0, [pc, #236]	; (800d37c <pbuf_free+0x10c>)
 800d28e:	f009 fdaf 	bl	8016df0 <iprintf>
    /* if assertions are disabled, proceed with debug output */
    LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                ("pbuf_free(p == NULL) was called.\n"));
    return 0;
 800d292:	2300      	movs	r3, #0
 800d294:	e069      	b.n	800d36a <pbuf_free+0xfa>
  }
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free(%p)\n", (void *)p));

  PERF_START;

  count = 0;
 800d296:	2300      	movs	r3, #0
 800d298:	77fb      	strb	r3, [r7, #31]
  /* de-allocate all consecutive pbufs from the head of the chain that
   * obtain a zero reference count after decrementing*/
  while (p != NULL) {
 800d29a:	e062      	b.n	800d362 <pbuf_free+0xf2>
    LWIP_PBUF_REF_T ref;
    SYS_ARCH_DECL_PROTECT(old_level);
    /* Since decrementing ref cannot be guaranteed to be a single machine operation
     * we must protect it. We put the new ref into a local variable to prevent
     * further protection. */
    SYS_ARCH_PROTECT(old_level);
 800d29c:	f009 fc9c 	bl	8016bd8 <sys_arch_protect>
 800d2a0:	61b8      	str	r0, [r7, #24]
    /* all pbufs in a chain are referenced at least once */
    LWIP_ASSERT("pbuf_free: p->ref > 0", p->ref > 0);
 800d2a2:	687b      	ldr	r3, [r7, #4]
 800d2a4:	7b9b      	ldrb	r3, [r3, #14]
 800d2a6:	2b00      	cmp	r3, #0
 800d2a8:	d106      	bne.n	800d2b8 <pbuf_free+0x48>
 800d2aa:	4b32      	ldr	r3, [pc, #200]	; (800d374 <pbuf_free+0x104>)
 800d2ac:	f240 22f1 	movw	r2, #753	; 0x2f1
 800d2b0:	4933      	ldr	r1, [pc, #204]	; (800d380 <pbuf_free+0x110>)
 800d2b2:	4832      	ldr	r0, [pc, #200]	; (800d37c <pbuf_free+0x10c>)
 800d2b4:	f009 fd9c 	bl	8016df0 <iprintf>
    /* decrease reference count (number of pointers to pbuf) */
    ref = --(p->ref);
 800d2b8:	687b      	ldr	r3, [r7, #4]
 800d2ba:	7b9b      	ldrb	r3, [r3, #14]
 800d2bc:	3b01      	subs	r3, #1
 800d2be:	b2da      	uxtb	r2, r3
 800d2c0:	687b      	ldr	r3, [r7, #4]
 800d2c2:	739a      	strb	r2, [r3, #14]
 800d2c4:	687b      	ldr	r3, [r7, #4]
 800d2c6:	7b9b      	ldrb	r3, [r3, #14]
 800d2c8:	75fb      	strb	r3, [r7, #23]
    SYS_ARCH_UNPROTECT(old_level);
 800d2ca:	69b8      	ldr	r0, [r7, #24]
 800d2cc:	f009 fc92 	bl	8016bf4 <sys_arch_unprotect>
    /* this pbuf is no longer referenced to? */
    if (ref == 0) {
 800d2d0:	7dfb      	ldrb	r3, [r7, #23]
 800d2d2:	2b00      	cmp	r3, #0
 800d2d4:	d143      	bne.n	800d35e <pbuf_free+0xee>
      /* remember next pbuf in chain for next iteration */
      q = p->next;
 800d2d6:	687b      	ldr	r3, [r7, #4]
 800d2d8:	681b      	ldr	r3, [r3, #0]
 800d2da:	613b      	str	r3, [r7, #16]
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: deallocating %p\n", (void *)p));
      alloc_src = pbuf_get_allocsrc(p);
 800d2dc:	687b      	ldr	r3, [r7, #4]
 800d2de:	7b1b      	ldrb	r3, [r3, #12]
 800d2e0:	f003 030f 	and.w	r3, r3, #15
 800d2e4:	73fb      	strb	r3, [r7, #15]
#if LWIP_SUPPORT_CUSTOM_PBUF
      /* is this a custom pbuf? */
      if ((p->flags & PBUF_FLAG_IS_CUSTOM) != 0) {
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	7b5b      	ldrb	r3, [r3, #13]
 800d2ea:	f003 0302 	and.w	r3, r3, #2
 800d2ee:	2b00      	cmp	r3, #0
 800d2f0:	d011      	beq.n	800d316 <pbuf_free+0xa6>
        struct pbuf_custom *pc = (struct pbuf_custom *)p;
 800d2f2:	687b      	ldr	r3, [r7, #4]
 800d2f4:	60bb      	str	r3, [r7, #8]
        LWIP_ASSERT("pc->custom_free_function != NULL", pc->custom_free_function != NULL);
 800d2f6:	68bb      	ldr	r3, [r7, #8]
 800d2f8:	691b      	ldr	r3, [r3, #16]
 800d2fa:	2b00      	cmp	r3, #0
 800d2fc:	d106      	bne.n	800d30c <pbuf_free+0x9c>
 800d2fe:	4b1d      	ldr	r3, [pc, #116]	; (800d374 <pbuf_free+0x104>)
 800d300:	f240 22ff 	movw	r2, #767	; 0x2ff
 800d304:	491f      	ldr	r1, [pc, #124]	; (800d384 <pbuf_free+0x114>)
 800d306:	481d      	ldr	r0, [pc, #116]	; (800d37c <pbuf_free+0x10c>)
 800d308:	f009 fd72 	bl	8016df0 <iprintf>
        pc->custom_free_function(p);
 800d30c:	68bb      	ldr	r3, [r7, #8]
 800d30e:	691b      	ldr	r3, [r3, #16]
 800d310:	6878      	ldr	r0, [r7, #4]
 800d312:	4798      	blx	r3
 800d314:	e01d      	b.n	800d352 <pbuf_free+0xe2>
      } else
#endif /* LWIP_SUPPORT_CUSTOM_PBUF */
      {
        /* is this a pbuf from the pool? */
        if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF_POOL) {
 800d316:	7bfb      	ldrb	r3, [r7, #15]
 800d318:	2b02      	cmp	r3, #2
 800d31a:	d104      	bne.n	800d326 <pbuf_free+0xb6>
          memp_free(MEMP_PBUF_POOL, p);
 800d31c:	6879      	ldr	r1, [r7, #4]
 800d31e:	200c      	movs	r0, #12
 800d320:	f7ff f902 	bl	800c528 <memp_free>
 800d324:	e015      	b.n	800d352 <pbuf_free+0xe2>
          /* is this a ROM or RAM referencing pbuf? */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_MEMP_PBUF) {
 800d326:	7bfb      	ldrb	r3, [r7, #15]
 800d328:	2b01      	cmp	r3, #1
 800d32a:	d104      	bne.n	800d336 <pbuf_free+0xc6>
          memp_free(MEMP_PBUF, p);
 800d32c:	6879      	ldr	r1, [r7, #4]
 800d32e:	200b      	movs	r0, #11
 800d330:	f7ff f8fa 	bl	800c528 <memp_free>
 800d334:	e00d      	b.n	800d352 <pbuf_free+0xe2>
          /* type == PBUF_RAM */
        } else if (alloc_src == PBUF_TYPE_ALLOC_SRC_MASK_STD_HEAP) {
 800d336:	7bfb      	ldrb	r3, [r7, #15]
 800d338:	2b00      	cmp	r3, #0
 800d33a:	d103      	bne.n	800d344 <pbuf_free+0xd4>
          mem_free(p);
 800d33c:	6878      	ldr	r0, [r7, #4]
 800d33e:	f7fe fd3f 	bl	800bdc0 <mem_free>
 800d342:	e006      	b.n	800d352 <pbuf_free+0xe2>
        } else {
          /* @todo: support freeing other types */
          LWIP_ASSERT("invalid pbuf type", 0);
 800d344:	4b0b      	ldr	r3, [pc, #44]	; (800d374 <pbuf_free+0x104>)
 800d346:	f240 320f 	movw	r2, #783	; 0x30f
 800d34a:	490f      	ldr	r1, [pc, #60]	; (800d388 <pbuf_free+0x118>)
 800d34c:	480b      	ldr	r0, [pc, #44]	; (800d37c <pbuf_free+0x10c>)
 800d34e:	f009 fd4f 	bl	8016df0 <iprintf>
        }
      }
      count++;
 800d352:	7ffb      	ldrb	r3, [r7, #31]
 800d354:	3301      	adds	r3, #1
 800d356:	77fb      	strb	r3, [r7, #31]
      /* proceed to next pbuf */
      p = q;
 800d358:	693b      	ldr	r3, [r7, #16]
 800d35a:	607b      	str	r3, [r7, #4]
 800d35c:	e001      	b.n	800d362 <pbuf_free+0xf2>
      /* p->ref > 0, this pbuf is still referenced to */
      /* (and so the remaining pbufs in chain as well) */
    } else {
      LWIP_DEBUGF( PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_free: %p has ref %"U16_F", ending here.\n", (void *)p, (u16_t)ref));
      /* stop walking through the chain */
      p = NULL;
 800d35e:	2300      	movs	r3, #0
 800d360:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d362:	687b      	ldr	r3, [r7, #4]
 800d364:	2b00      	cmp	r3, #0
 800d366:	d199      	bne.n	800d29c <pbuf_free+0x2c>
    }
  }
  PERF_STOP("pbuf_free");
  /* return number of de-allocated pbufs */
  return count;
 800d368:	7ffb      	ldrb	r3, [r7, #31]
}
 800d36a:	4618      	mov	r0, r3
 800d36c:	3720      	adds	r7, #32
 800d36e:	46bd      	mov	sp, r7
 800d370:	bd80      	pop	{r7, pc}
 800d372:	bf00      	nop
 800d374:	0801924c 	.word	0x0801924c
 800d378:	080193b0 	.word	0x080193b0
 800d37c:	080192ac 	.word	0x080192ac
 800d380:	080193dc 	.word	0x080193dc
 800d384:	080193f4 	.word	0x080193f4
 800d388:	08019418 	.word	0x08019418

0800d38c <pbuf_clen>:
 * @param p first pbuf of chain
 * @return the number of pbufs in a chain
 */
u16_t
pbuf_clen(const struct pbuf *p)
{
 800d38c:	b480      	push	{r7}
 800d38e:	b085      	sub	sp, #20
 800d390:	af00      	add	r7, sp, #0
 800d392:	6078      	str	r0, [r7, #4]
  u16_t len;

  len = 0;
 800d394:	2300      	movs	r3, #0
 800d396:	81fb      	strh	r3, [r7, #14]
  while (p != NULL) {
 800d398:	e005      	b.n	800d3a6 <pbuf_clen+0x1a>
    ++len;
 800d39a:	89fb      	ldrh	r3, [r7, #14]
 800d39c:	3301      	adds	r3, #1
 800d39e:	81fb      	strh	r3, [r7, #14]
    p = p->next;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	607b      	str	r3, [r7, #4]
  while (p != NULL) {
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	2b00      	cmp	r3, #0
 800d3aa:	d1f6      	bne.n	800d39a <pbuf_clen+0xe>
  }
  return len;
 800d3ac:	89fb      	ldrh	r3, [r7, #14]
}
 800d3ae:	4618      	mov	r0, r3
 800d3b0:	3714      	adds	r7, #20
 800d3b2:	46bd      	mov	sp, r7
 800d3b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 800d3b8:	4770      	bx	lr
	...

0800d3bc <pbuf_ref>:
 * @param p pbuf to increase reference counter of
 *
 */
void
pbuf_ref(struct pbuf *p)
{
 800d3bc:	b580      	push	{r7, lr}
 800d3be:	b084      	sub	sp, #16
 800d3c0:	af00      	add	r7, sp, #0
 800d3c2:	6078      	str	r0, [r7, #4]
  /* pbuf given? */
  if (p != NULL) {
 800d3c4:	687b      	ldr	r3, [r7, #4]
 800d3c6:	2b00      	cmp	r3, #0
 800d3c8:	d016      	beq.n	800d3f8 <pbuf_ref+0x3c>
    SYS_ARCH_SET(p->ref, (LWIP_PBUF_REF_T)(p->ref + 1));
 800d3ca:	f009 fc05 	bl	8016bd8 <sys_arch_protect>
 800d3ce:	60f8      	str	r0, [r7, #12]
 800d3d0:	687b      	ldr	r3, [r7, #4]
 800d3d2:	7b9b      	ldrb	r3, [r3, #14]
 800d3d4:	3301      	adds	r3, #1
 800d3d6:	b2da      	uxtb	r2, r3
 800d3d8:	687b      	ldr	r3, [r7, #4]
 800d3da:	739a      	strb	r2, [r3, #14]
 800d3dc:	68f8      	ldr	r0, [r7, #12]
 800d3de:	f009 fc09 	bl	8016bf4 <sys_arch_unprotect>
    LWIP_ASSERT("pbuf ref overflow", p->ref > 0);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	7b9b      	ldrb	r3, [r3, #14]
 800d3e6:	2b00      	cmp	r3, #0
 800d3e8:	d106      	bne.n	800d3f8 <pbuf_ref+0x3c>
 800d3ea:	4b05      	ldr	r3, [pc, #20]	; (800d400 <pbuf_ref+0x44>)
 800d3ec:	f240 3242 	movw	r2, #834	; 0x342
 800d3f0:	4904      	ldr	r1, [pc, #16]	; (800d404 <pbuf_ref+0x48>)
 800d3f2:	4805      	ldr	r0, [pc, #20]	; (800d408 <pbuf_ref+0x4c>)
 800d3f4:	f009 fcfc 	bl	8016df0 <iprintf>
  }
}
 800d3f8:	bf00      	nop
 800d3fa:	3710      	adds	r7, #16
 800d3fc:	46bd      	mov	sp, r7
 800d3fe:	bd80      	pop	{r7, pc}
 800d400:	0801924c 	.word	0x0801924c
 800d404:	0801942c 	.word	0x0801942c
 800d408:	080192ac 	.word	0x080192ac

0800d40c <pbuf_cat>:
 *
 * @see pbuf_chain()
 */
void
pbuf_cat(struct pbuf *h, struct pbuf *t)
{
 800d40c:	b580      	push	{r7, lr}
 800d40e:	b084      	sub	sp, #16
 800d410:	af00      	add	r7, sp, #0
 800d412:	6078      	str	r0, [r7, #4]
 800d414:	6039      	str	r1, [r7, #0]
  struct pbuf *p;

  LWIP_ERROR("(h != NULL) && (t != NULL) (programmer violates API)",
 800d416:	687b      	ldr	r3, [r7, #4]
 800d418:	2b00      	cmp	r3, #0
 800d41a:	d002      	beq.n	800d422 <pbuf_cat+0x16>
 800d41c:	683b      	ldr	r3, [r7, #0]
 800d41e:	2b00      	cmp	r3, #0
 800d420:	d107      	bne.n	800d432 <pbuf_cat+0x26>
 800d422:	4b20      	ldr	r3, [pc, #128]	; (800d4a4 <pbuf_cat+0x98>)
 800d424:	f240 3259 	movw	r2, #857	; 0x359
 800d428:	491f      	ldr	r1, [pc, #124]	; (800d4a8 <pbuf_cat+0x9c>)
 800d42a:	4820      	ldr	r0, [pc, #128]	; (800d4ac <pbuf_cat+0xa0>)
 800d42c:	f009 fce0 	bl	8016df0 <iprintf>
 800d430:	e034      	b.n	800d49c <pbuf_cat+0x90>
             ((h != NULL) && (t != NULL)), return;);

  /* proceed to last pbuf of chain */
  for (p = h; p->next != NULL; p = p->next) {
 800d432:	687b      	ldr	r3, [r7, #4]
 800d434:	60fb      	str	r3, [r7, #12]
 800d436:	e00a      	b.n	800d44e <pbuf_cat+0x42>
    /* add total length of second chain to all totals of first chain */
    p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d438:	68fb      	ldr	r3, [r7, #12]
 800d43a:	891a      	ldrh	r2, [r3, #8]
 800d43c:	683b      	ldr	r3, [r7, #0]
 800d43e:	891b      	ldrh	r3, [r3, #8]
 800d440:	4413      	add	r3, r2
 800d442:	b29a      	uxth	r2, r3
 800d444:	68fb      	ldr	r3, [r7, #12]
 800d446:	811a      	strh	r2, [r3, #8]
  for (p = h; p->next != NULL; p = p->next) {
 800d448:	68fb      	ldr	r3, [r7, #12]
 800d44a:	681b      	ldr	r3, [r3, #0]
 800d44c:	60fb      	str	r3, [r7, #12]
 800d44e:	68fb      	ldr	r3, [r7, #12]
 800d450:	681b      	ldr	r3, [r3, #0]
 800d452:	2b00      	cmp	r3, #0
 800d454:	d1f0      	bne.n	800d438 <pbuf_cat+0x2c>
  }
  /* { p is last pbuf of first h chain, p->next == NULL } */
  LWIP_ASSERT("p->tot_len == p->len (of last pbuf in chain)", p->tot_len == p->len);
 800d456:	68fb      	ldr	r3, [r7, #12]
 800d458:	891a      	ldrh	r2, [r3, #8]
 800d45a:	68fb      	ldr	r3, [r7, #12]
 800d45c:	895b      	ldrh	r3, [r3, #10]
 800d45e:	429a      	cmp	r2, r3
 800d460:	d006      	beq.n	800d470 <pbuf_cat+0x64>
 800d462:	4b10      	ldr	r3, [pc, #64]	; (800d4a4 <pbuf_cat+0x98>)
 800d464:	f240 3262 	movw	r2, #866	; 0x362
 800d468:	4911      	ldr	r1, [pc, #68]	; (800d4b0 <pbuf_cat+0xa4>)
 800d46a:	4810      	ldr	r0, [pc, #64]	; (800d4ac <pbuf_cat+0xa0>)
 800d46c:	f009 fcc0 	bl	8016df0 <iprintf>
  LWIP_ASSERT("p->next == NULL", p->next == NULL);
 800d470:	68fb      	ldr	r3, [r7, #12]
 800d472:	681b      	ldr	r3, [r3, #0]
 800d474:	2b00      	cmp	r3, #0
 800d476:	d006      	beq.n	800d486 <pbuf_cat+0x7a>
 800d478:	4b0a      	ldr	r3, [pc, #40]	; (800d4a4 <pbuf_cat+0x98>)
 800d47a:	f240 3263 	movw	r2, #867	; 0x363
 800d47e:	490d      	ldr	r1, [pc, #52]	; (800d4b4 <pbuf_cat+0xa8>)
 800d480:	480a      	ldr	r0, [pc, #40]	; (800d4ac <pbuf_cat+0xa0>)
 800d482:	f009 fcb5 	bl	8016df0 <iprintf>
  /* add total length of second chain to last pbuf total of first chain */
  p->tot_len = (u16_t)(p->tot_len + t->tot_len);
 800d486:	68fb      	ldr	r3, [r7, #12]
 800d488:	891a      	ldrh	r2, [r3, #8]
 800d48a:	683b      	ldr	r3, [r7, #0]
 800d48c:	891b      	ldrh	r3, [r3, #8]
 800d48e:	4413      	add	r3, r2
 800d490:	b29a      	uxth	r2, r3
 800d492:	68fb      	ldr	r3, [r7, #12]
 800d494:	811a      	strh	r2, [r3, #8]
  /* chain last pbuf of head (p) with first of tail (t) */
  p->next = t;
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	683a      	ldr	r2, [r7, #0]
 800d49a:	601a      	str	r2, [r3, #0]
  /* p->next now references t, but the caller will drop its reference to t,
   * so netto there is no change to the reference count of t.
   */
}
 800d49c:	3710      	adds	r7, #16
 800d49e:	46bd      	mov	sp, r7
 800d4a0:	bd80      	pop	{r7, pc}
 800d4a2:	bf00      	nop
 800d4a4:	0801924c 	.word	0x0801924c
 800d4a8:	08019440 	.word	0x08019440
 800d4ac:	080192ac 	.word	0x080192ac
 800d4b0:	08019478 	.word	0x08019478
 800d4b4:	080194a8 	.word	0x080194a8

0800d4b8 <pbuf_copy>:
 *         ERR_ARG if one of the pbufs is NULL or p_to is not big
 *                 enough to hold p_from
 */
err_t
pbuf_copy(struct pbuf *p_to, const struct pbuf *p_from)
{
 800d4b8:	b580      	push	{r7, lr}
 800d4ba:	b086      	sub	sp, #24
 800d4bc:	af00      	add	r7, sp, #0
 800d4be:	6078      	str	r0, [r7, #4]
 800d4c0:	6039      	str	r1, [r7, #0]
  size_t offset_to = 0, offset_from = 0, len;
 800d4c2:	2300      	movs	r3, #0
 800d4c4:	617b      	str	r3, [r7, #20]
 800d4c6:	2300      	movs	r3, #0
 800d4c8:	613b      	str	r3, [r7, #16]

  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy(%p, %p)\n",
              (const void *)p_to, (const void *)p_from));

  /* is the target big enough to hold the source? */
  LWIP_ERROR("pbuf_copy: target not big enough to hold source", ((p_to != NULL) &&
 800d4ca:	687b      	ldr	r3, [r7, #4]
 800d4cc:	2b00      	cmp	r3, #0
 800d4ce:	d008      	beq.n	800d4e2 <pbuf_copy+0x2a>
 800d4d0:	683b      	ldr	r3, [r7, #0]
 800d4d2:	2b00      	cmp	r3, #0
 800d4d4:	d005      	beq.n	800d4e2 <pbuf_copy+0x2a>
 800d4d6:	687b      	ldr	r3, [r7, #4]
 800d4d8:	891a      	ldrh	r2, [r3, #8]
 800d4da:	683b      	ldr	r3, [r7, #0]
 800d4dc:	891b      	ldrh	r3, [r3, #8]
 800d4de:	429a      	cmp	r2, r3
 800d4e0:	d209      	bcs.n	800d4f6 <pbuf_copy+0x3e>
 800d4e2:	4b57      	ldr	r3, [pc, #348]	; (800d640 <pbuf_copy+0x188>)
 800d4e4:	f240 32c9 	movw	r2, #969	; 0x3c9
 800d4e8:	4956      	ldr	r1, [pc, #344]	; (800d644 <pbuf_copy+0x18c>)
 800d4ea:	4857      	ldr	r0, [pc, #348]	; (800d648 <pbuf_copy+0x190>)
 800d4ec:	f009 fc80 	bl	8016df0 <iprintf>
 800d4f0:	f06f 030f 	mvn.w	r3, #15
 800d4f4:	e09f      	b.n	800d636 <pbuf_copy+0x17e>
             (p_from != NULL) && (p_to->tot_len >= p_from->tot_len)), return ERR_ARG;);

  /* iterate through pbuf chain */
  do {
    /* copy one part of the original chain */
    if ((p_to->len - offset_to) >= (p_from->len - offset_from)) {
 800d4f6:	687b      	ldr	r3, [r7, #4]
 800d4f8:	895b      	ldrh	r3, [r3, #10]
 800d4fa:	461a      	mov	r2, r3
 800d4fc:	697b      	ldr	r3, [r7, #20]
 800d4fe:	1ad2      	subs	r2, r2, r3
 800d500:	683b      	ldr	r3, [r7, #0]
 800d502:	895b      	ldrh	r3, [r3, #10]
 800d504:	4619      	mov	r1, r3
 800d506:	693b      	ldr	r3, [r7, #16]
 800d508:	1acb      	subs	r3, r1, r3
 800d50a:	429a      	cmp	r2, r3
 800d50c:	d306      	bcc.n	800d51c <pbuf_copy+0x64>
      /* complete current p_from fits into current p_to */
      len = p_from->len - offset_from;
 800d50e:	683b      	ldr	r3, [r7, #0]
 800d510:	895b      	ldrh	r3, [r3, #10]
 800d512:	461a      	mov	r2, r3
 800d514:	693b      	ldr	r3, [r7, #16]
 800d516:	1ad3      	subs	r3, r2, r3
 800d518:	60fb      	str	r3, [r7, #12]
 800d51a:	e005      	b.n	800d528 <pbuf_copy+0x70>
    } else {
      /* current p_from does not fit into current p_to */
      len = p_to->len - offset_to;
 800d51c:	687b      	ldr	r3, [r7, #4]
 800d51e:	895b      	ldrh	r3, [r3, #10]
 800d520:	461a      	mov	r2, r3
 800d522:	697b      	ldr	r3, [r7, #20]
 800d524:	1ad3      	subs	r3, r2, r3
 800d526:	60fb      	str	r3, [r7, #12]
    }
    MEMCPY((u8_t *)p_to->payload + offset_to, (u8_t *)p_from->payload + offset_from, len);
 800d528:	687b      	ldr	r3, [r7, #4]
 800d52a:	685a      	ldr	r2, [r3, #4]
 800d52c:	697b      	ldr	r3, [r7, #20]
 800d52e:	18d0      	adds	r0, r2, r3
 800d530:	683b      	ldr	r3, [r7, #0]
 800d532:	685a      	ldr	r2, [r3, #4]
 800d534:	693b      	ldr	r3, [r7, #16]
 800d536:	4413      	add	r3, r2
 800d538:	68fa      	ldr	r2, [r7, #12]
 800d53a:	4619      	mov	r1, r3
 800d53c:	f009 fdd4 	bl	80170e8 <memcpy>
    offset_to += len;
 800d540:	697a      	ldr	r2, [r7, #20]
 800d542:	68fb      	ldr	r3, [r7, #12]
 800d544:	4413      	add	r3, r2
 800d546:	617b      	str	r3, [r7, #20]
    offset_from += len;
 800d548:	693a      	ldr	r2, [r7, #16]
 800d54a:	68fb      	ldr	r3, [r7, #12]
 800d54c:	4413      	add	r3, r2
 800d54e:	613b      	str	r3, [r7, #16]
    LWIP_ASSERT("offset_to <= p_to->len", offset_to <= p_to->len);
 800d550:	687b      	ldr	r3, [r7, #4]
 800d552:	895b      	ldrh	r3, [r3, #10]
 800d554:	461a      	mov	r2, r3
 800d556:	697b      	ldr	r3, [r7, #20]
 800d558:	4293      	cmp	r3, r2
 800d55a:	d906      	bls.n	800d56a <pbuf_copy+0xb2>
 800d55c:	4b38      	ldr	r3, [pc, #224]	; (800d640 <pbuf_copy+0x188>)
 800d55e:	f240 32d9 	movw	r2, #985	; 0x3d9
 800d562:	493a      	ldr	r1, [pc, #232]	; (800d64c <pbuf_copy+0x194>)
 800d564:	4838      	ldr	r0, [pc, #224]	; (800d648 <pbuf_copy+0x190>)
 800d566:	f009 fc43 	bl	8016df0 <iprintf>
    LWIP_ASSERT("offset_from <= p_from->len", offset_from <= p_from->len);
 800d56a:	683b      	ldr	r3, [r7, #0]
 800d56c:	895b      	ldrh	r3, [r3, #10]
 800d56e:	461a      	mov	r2, r3
 800d570:	693b      	ldr	r3, [r7, #16]
 800d572:	4293      	cmp	r3, r2
 800d574:	d906      	bls.n	800d584 <pbuf_copy+0xcc>
 800d576:	4b32      	ldr	r3, [pc, #200]	; (800d640 <pbuf_copy+0x188>)
 800d578:	f240 32da 	movw	r2, #986	; 0x3da
 800d57c:	4934      	ldr	r1, [pc, #208]	; (800d650 <pbuf_copy+0x198>)
 800d57e:	4832      	ldr	r0, [pc, #200]	; (800d648 <pbuf_copy+0x190>)
 800d580:	f009 fc36 	bl	8016df0 <iprintf>
    if (offset_from >= p_from->len) {
 800d584:	683b      	ldr	r3, [r7, #0]
 800d586:	895b      	ldrh	r3, [r3, #10]
 800d588:	461a      	mov	r2, r3
 800d58a:	693b      	ldr	r3, [r7, #16]
 800d58c:	4293      	cmp	r3, r2
 800d58e:	d304      	bcc.n	800d59a <pbuf_copy+0xe2>
      /* on to next p_from (if any) */
      offset_from = 0;
 800d590:	2300      	movs	r3, #0
 800d592:	613b      	str	r3, [r7, #16]
      p_from = p_from->next;
 800d594:	683b      	ldr	r3, [r7, #0]
 800d596:	681b      	ldr	r3, [r3, #0]
 800d598:	603b      	str	r3, [r7, #0]
    }
    if (offset_to == p_to->len) {
 800d59a:	687b      	ldr	r3, [r7, #4]
 800d59c:	895b      	ldrh	r3, [r3, #10]
 800d59e:	461a      	mov	r2, r3
 800d5a0:	697b      	ldr	r3, [r7, #20]
 800d5a2:	4293      	cmp	r3, r2
 800d5a4:	d114      	bne.n	800d5d0 <pbuf_copy+0x118>
      /* on to next p_to (if any) */
      offset_to = 0;
 800d5a6:	2300      	movs	r3, #0
 800d5a8:	617b      	str	r3, [r7, #20]
      p_to = p_to->next;
 800d5aa:	687b      	ldr	r3, [r7, #4]
 800d5ac:	681b      	ldr	r3, [r3, #0]
 800d5ae:	607b      	str	r3, [r7, #4]
      LWIP_ERROR("p_to != NULL", (p_to != NULL) || (p_from == NULL), return ERR_ARG;);
 800d5b0:	687b      	ldr	r3, [r7, #4]
 800d5b2:	2b00      	cmp	r3, #0
 800d5b4:	d10c      	bne.n	800d5d0 <pbuf_copy+0x118>
 800d5b6:	683b      	ldr	r3, [r7, #0]
 800d5b8:	2b00      	cmp	r3, #0
 800d5ba:	d009      	beq.n	800d5d0 <pbuf_copy+0x118>
 800d5bc:	4b20      	ldr	r3, [pc, #128]	; (800d640 <pbuf_copy+0x188>)
 800d5be:	f44f 7279 	mov.w	r2, #996	; 0x3e4
 800d5c2:	4924      	ldr	r1, [pc, #144]	; (800d654 <pbuf_copy+0x19c>)
 800d5c4:	4820      	ldr	r0, [pc, #128]	; (800d648 <pbuf_copy+0x190>)
 800d5c6:	f009 fc13 	bl	8016df0 <iprintf>
 800d5ca:	f06f 030f 	mvn.w	r3, #15
 800d5ce:	e032      	b.n	800d636 <pbuf_copy+0x17e>
    }

    if ((p_from != NULL) && (p_from->len == p_from->tot_len)) {
 800d5d0:	683b      	ldr	r3, [r7, #0]
 800d5d2:	2b00      	cmp	r3, #0
 800d5d4:	d013      	beq.n	800d5fe <pbuf_copy+0x146>
 800d5d6:	683b      	ldr	r3, [r7, #0]
 800d5d8:	895a      	ldrh	r2, [r3, #10]
 800d5da:	683b      	ldr	r3, [r7, #0]
 800d5dc:	891b      	ldrh	r3, [r3, #8]
 800d5de:	429a      	cmp	r2, r3
 800d5e0:	d10d      	bne.n	800d5fe <pbuf_copy+0x146>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d5e2:	683b      	ldr	r3, [r7, #0]
 800d5e4:	681b      	ldr	r3, [r3, #0]
 800d5e6:	2b00      	cmp	r3, #0
 800d5e8:	d009      	beq.n	800d5fe <pbuf_copy+0x146>
 800d5ea:	4b15      	ldr	r3, [pc, #84]	; (800d640 <pbuf_copy+0x188>)
 800d5ec:	f240 32e9 	movw	r2, #1001	; 0x3e9
 800d5f0:	4919      	ldr	r1, [pc, #100]	; (800d658 <pbuf_copy+0x1a0>)
 800d5f2:	4815      	ldr	r0, [pc, #84]	; (800d648 <pbuf_copy+0x190>)
 800d5f4:	f009 fbfc 	bl	8016df0 <iprintf>
 800d5f8:	f06f 0305 	mvn.w	r3, #5
 800d5fc:	e01b      	b.n	800d636 <pbuf_copy+0x17e>
                 (p_from->next == NULL), return ERR_VAL;);
    }
    if ((p_to != NULL) && (p_to->len == p_to->tot_len)) {
 800d5fe:	687b      	ldr	r3, [r7, #4]
 800d600:	2b00      	cmp	r3, #0
 800d602:	d013      	beq.n	800d62c <pbuf_copy+0x174>
 800d604:	687b      	ldr	r3, [r7, #4]
 800d606:	895a      	ldrh	r2, [r3, #10]
 800d608:	687b      	ldr	r3, [r7, #4]
 800d60a:	891b      	ldrh	r3, [r3, #8]
 800d60c:	429a      	cmp	r2, r3
 800d60e:	d10d      	bne.n	800d62c <pbuf_copy+0x174>
      /* don't copy more than one packet! */
      LWIP_ERROR("pbuf_copy() does not allow packet queues!",
 800d610:	687b      	ldr	r3, [r7, #4]
 800d612:	681b      	ldr	r3, [r3, #0]
 800d614:	2b00      	cmp	r3, #0
 800d616:	d009      	beq.n	800d62c <pbuf_copy+0x174>
 800d618:	4b09      	ldr	r3, [pc, #36]	; (800d640 <pbuf_copy+0x188>)
 800d61a:	f240 32ee 	movw	r2, #1006	; 0x3ee
 800d61e:	490e      	ldr	r1, [pc, #56]	; (800d658 <pbuf_copy+0x1a0>)
 800d620:	4809      	ldr	r0, [pc, #36]	; (800d648 <pbuf_copy+0x190>)
 800d622:	f009 fbe5 	bl	8016df0 <iprintf>
 800d626:	f06f 0305 	mvn.w	r3, #5
 800d62a:	e004      	b.n	800d636 <pbuf_copy+0x17e>
                 (p_to->next == NULL), return ERR_VAL;);
    }
  } while (p_from);
 800d62c:	683b      	ldr	r3, [r7, #0]
 800d62e:	2b00      	cmp	r3, #0
 800d630:	f47f af61 	bne.w	800d4f6 <pbuf_copy+0x3e>
  LWIP_DEBUGF(PBUF_DEBUG | LWIP_DBG_TRACE, ("pbuf_copy: end of chain reached.\n"));
  return ERR_OK;
 800d634:	2300      	movs	r3, #0
}
 800d636:	4618      	mov	r0, r3
 800d638:	3718      	adds	r7, #24
 800d63a:	46bd      	mov	sp, r7
 800d63c:	bd80      	pop	{r7, pc}
 800d63e:	bf00      	nop
 800d640:	0801924c 	.word	0x0801924c
 800d644:	080194f4 	.word	0x080194f4
 800d648:	080192ac 	.word	0x080192ac
 800d64c:	08019524 	.word	0x08019524
 800d650:	0801953c 	.word	0x0801953c
 800d654:	08019558 	.word	0x08019558
 800d658:	08019568 	.word	0x08019568

0800d65c <pbuf_copy_partial>:
 * @param offset offset into the packet buffer from where to begin copying len bytes
 * @return the number of bytes copied, or 0 on failure
 */
u16_t
pbuf_copy_partial(const struct pbuf *buf, void *dataptr, u16_t len, u16_t offset)
{
 800d65c:	b580      	push	{r7, lr}
 800d65e:	b088      	sub	sp, #32
 800d660:	af00      	add	r7, sp, #0
 800d662:	60f8      	str	r0, [r7, #12]
 800d664:	60b9      	str	r1, [r7, #8]
 800d666:	4611      	mov	r1, r2
 800d668:	461a      	mov	r2, r3
 800d66a:	460b      	mov	r3, r1
 800d66c:	80fb      	strh	r3, [r7, #6]
 800d66e:	4613      	mov	r3, r2
 800d670:	80bb      	strh	r3, [r7, #4]
  const struct pbuf *p;
  u16_t left = 0;
 800d672:	2300      	movs	r3, #0
 800d674:	837b      	strh	r3, [r7, #26]
  u16_t buf_copy_len;
  u16_t copied_total = 0;
 800d676:	2300      	movs	r3, #0
 800d678:	82fb      	strh	r3, [r7, #22]

  LWIP_ERROR("pbuf_copy_partial: invalid buf", (buf != NULL), return 0;);
 800d67a:	68fb      	ldr	r3, [r7, #12]
 800d67c:	2b00      	cmp	r3, #0
 800d67e:	d108      	bne.n	800d692 <pbuf_copy_partial+0x36>
 800d680:	4b2b      	ldr	r3, [pc, #172]	; (800d730 <pbuf_copy_partial+0xd4>)
 800d682:	f240 420a 	movw	r2, #1034	; 0x40a
 800d686:	492b      	ldr	r1, [pc, #172]	; (800d734 <pbuf_copy_partial+0xd8>)
 800d688:	482b      	ldr	r0, [pc, #172]	; (800d738 <pbuf_copy_partial+0xdc>)
 800d68a:	f009 fbb1 	bl	8016df0 <iprintf>
 800d68e:	2300      	movs	r3, #0
 800d690:	e04a      	b.n	800d728 <pbuf_copy_partial+0xcc>
  LWIP_ERROR("pbuf_copy_partial: invalid dataptr", (dataptr != NULL), return 0;);
 800d692:	68bb      	ldr	r3, [r7, #8]
 800d694:	2b00      	cmp	r3, #0
 800d696:	d108      	bne.n	800d6aa <pbuf_copy_partial+0x4e>
 800d698:	4b25      	ldr	r3, [pc, #148]	; (800d730 <pbuf_copy_partial+0xd4>)
 800d69a:	f240 420b 	movw	r2, #1035	; 0x40b
 800d69e:	4927      	ldr	r1, [pc, #156]	; (800d73c <pbuf_copy_partial+0xe0>)
 800d6a0:	4825      	ldr	r0, [pc, #148]	; (800d738 <pbuf_copy_partial+0xdc>)
 800d6a2:	f009 fba5 	bl	8016df0 <iprintf>
 800d6a6:	2300      	movs	r3, #0
 800d6a8:	e03e      	b.n	800d728 <pbuf_copy_partial+0xcc>

  /* Note some systems use byte copy if dataptr or one of the pbuf payload pointers are unaligned. */
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d6aa:	68fb      	ldr	r3, [r7, #12]
 800d6ac:	61fb      	str	r3, [r7, #28]
 800d6ae:	e034      	b.n	800d71a <pbuf_copy_partial+0xbe>
    if ((offset != 0) && (offset >= p->len)) {
 800d6b0:	88bb      	ldrh	r3, [r7, #4]
 800d6b2:	2b00      	cmp	r3, #0
 800d6b4:	d00a      	beq.n	800d6cc <pbuf_copy_partial+0x70>
 800d6b6:	69fb      	ldr	r3, [r7, #28]
 800d6b8:	895b      	ldrh	r3, [r3, #10]
 800d6ba:	88ba      	ldrh	r2, [r7, #4]
 800d6bc:	429a      	cmp	r2, r3
 800d6be:	d305      	bcc.n	800d6cc <pbuf_copy_partial+0x70>
      /* don't copy from this buffer -> on to the next */
      offset = (u16_t)(offset - p->len);
 800d6c0:	69fb      	ldr	r3, [r7, #28]
 800d6c2:	895b      	ldrh	r3, [r3, #10]
 800d6c4:	88ba      	ldrh	r2, [r7, #4]
 800d6c6:	1ad3      	subs	r3, r2, r3
 800d6c8:	80bb      	strh	r3, [r7, #4]
 800d6ca:	e023      	b.n	800d714 <pbuf_copy_partial+0xb8>
    } else {
      /* copy from this buffer. maybe only partially. */
      buf_copy_len = (u16_t)(p->len - offset);
 800d6cc:	69fb      	ldr	r3, [r7, #28]
 800d6ce:	895a      	ldrh	r2, [r3, #10]
 800d6d0:	88bb      	ldrh	r3, [r7, #4]
 800d6d2:	1ad3      	subs	r3, r2, r3
 800d6d4:	833b      	strh	r3, [r7, #24]
      if (buf_copy_len > len) {
 800d6d6:	8b3a      	ldrh	r2, [r7, #24]
 800d6d8:	88fb      	ldrh	r3, [r7, #6]
 800d6da:	429a      	cmp	r2, r3
 800d6dc:	d901      	bls.n	800d6e2 <pbuf_copy_partial+0x86>
        buf_copy_len = len;
 800d6de:	88fb      	ldrh	r3, [r7, #6]
 800d6e0:	833b      	strh	r3, [r7, #24]
      }
      /* copy the necessary parts of the buffer */
      MEMCPY(&((char *)dataptr)[left], &((char *)p->payload)[offset], buf_copy_len);
 800d6e2:	8b7b      	ldrh	r3, [r7, #26]
 800d6e4:	68ba      	ldr	r2, [r7, #8]
 800d6e6:	18d0      	adds	r0, r2, r3
 800d6e8:	69fb      	ldr	r3, [r7, #28]
 800d6ea:	685a      	ldr	r2, [r3, #4]
 800d6ec:	88bb      	ldrh	r3, [r7, #4]
 800d6ee:	4413      	add	r3, r2
 800d6f0:	8b3a      	ldrh	r2, [r7, #24]
 800d6f2:	4619      	mov	r1, r3
 800d6f4:	f009 fcf8 	bl	80170e8 <memcpy>
      copied_total = (u16_t)(copied_total + buf_copy_len);
 800d6f8:	8afa      	ldrh	r2, [r7, #22]
 800d6fa:	8b3b      	ldrh	r3, [r7, #24]
 800d6fc:	4413      	add	r3, r2
 800d6fe:	82fb      	strh	r3, [r7, #22]
      left = (u16_t)(left + buf_copy_len);
 800d700:	8b7a      	ldrh	r2, [r7, #26]
 800d702:	8b3b      	ldrh	r3, [r7, #24]
 800d704:	4413      	add	r3, r2
 800d706:	837b      	strh	r3, [r7, #26]
      len = (u16_t)(len - buf_copy_len);
 800d708:	88fa      	ldrh	r2, [r7, #6]
 800d70a:	8b3b      	ldrh	r3, [r7, #24]
 800d70c:	1ad3      	subs	r3, r2, r3
 800d70e:	80fb      	strh	r3, [r7, #6]
      offset = 0;
 800d710:	2300      	movs	r3, #0
 800d712:	80bb      	strh	r3, [r7, #4]
  for (p = buf; len != 0 && p != NULL; p = p->next) {
 800d714:	69fb      	ldr	r3, [r7, #28]
 800d716:	681b      	ldr	r3, [r3, #0]
 800d718:	61fb      	str	r3, [r7, #28]
 800d71a:	88fb      	ldrh	r3, [r7, #6]
 800d71c:	2b00      	cmp	r3, #0
 800d71e:	d002      	beq.n	800d726 <pbuf_copy_partial+0xca>
 800d720:	69fb      	ldr	r3, [r7, #28]
 800d722:	2b00      	cmp	r3, #0
 800d724:	d1c4      	bne.n	800d6b0 <pbuf_copy_partial+0x54>
    }
  }
  return copied_total;
 800d726:	8afb      	ldrh	r3, [r7, #22]
}
 800d728:	4618      	mov	r0, r3
 800d72a:	3720      	adds	r7, #32
 800d72c:	46bd      	mov	sp, r7
 800d72e:	bd80      	pop	{r7, pc}
 800d730:	0801924c 	.word	0x0801924c
 800d734:	08019594 	.word	0x08019594
 800d738:	080192ac 	.word	0x080192ac
 800d73c:	080195b4 	.word	0x080195b4

0800d740 <pbuf_clone>:
 *
 * @return a new pbuf or NULL if allocation fails
 */
struct pbuf *
pbuf_clone(pbuf_layer layer, pbuf_type type, struct pbuf *p)
{
 800d740:	b580      	push	{r7, lr}
 800d742:	b084      	sub	sp, #16
 800d744:	af00      	add	r7, sp, #0
 800d746:	4603      	mov	r3, r0
 800d748:	603a      	str	r2, [r7, #0]
 800d74a:	71fb      	strb	r3, [r7, #7]
 800d74c:	460b      	mov	r3, r1
 800d74e:	80bb      	strh	r3, [r7, #4]
  struct pbuf *q;
  err_t err;
  q = pbuf_alloc(layer, p->tot_len, type);
 800d750:	683b      	ldr	r3, [r7, #0]
 800d752:	8919      	ldrh	r1, [r3, #8]
 800d754:	88ba      	ldrh	r2, [r7, #4]
 800d756:	79fb      	ldrb	r3, [r7, #7]
 800d758:	4618      	mov	r0, r3
 800d75a:	f7ff faa5 	bl	800cca8 <pbuf_alloc>
 800d75e:	60f8      	str	r0, [r7, #12]
  if (q == NULL) {
 800d760:	68fb      	ldr	r3, [r7, #12]
 800d762:	2b00      	cmp	r3, #0
 800d764:	d101      	bne.n	800d76a <pbuf_clone+0x2a>
    return NULL;
 800d766:	2300      	movs	r3, #0
 800d768:	e011      	b.n	800d78e <pbuf_clone+0x4e>
  }
  err = pbuf_copy(q, p);
 800d76a:	6839      	ldr	r1, [r7, #0]
 800d76c:	68f8      	ldr	r0, [r7, #12]
 800d76e:	f7ff fea3 	bl	800d4b8 <pbuf_copy>
 800d772:	4603      	mov	r3, r0
 800d774:	72fb      	strb	r3, [r7, #11]
  LWIP_UNUSED_ARG(err); /* in case of LWIP_NOASSERT */
  LWIP_ASSERT("pbuf_copy failed", err == ERR_OK);
 800d776:	f997 300b 	ldrsb.w	r3, [r7, #11]
 800d77a:	2b00      	cmp	r3, #0
 800d77c:	d006      	beq.n	800d78c <pbuf_clone+0x4c>
 800d77e:	4b06      	ldr	r3, [pc, #24]	; (800d798 <pbuf_clone+0x58>)
 800d780:	f240 5224 	movw	r2, #1316	; 0x524
 800d784:	4905      	ldr	r1, [pc, #20]	; (800d79c <pbuf_clone+0x5c>)
 800d786:	4806      	ldr	r0, [pc, #24]	; (800d7a0 <pbuf_clone+0x60>)
 800d788:	f009 fb32 	bl	8016df0 <iprintf>
  return q;
 800d78c:	68fb      	ldr	r3, [r7, #12]
}
 800d78e:	4618      	mov	r0, r3
 800d790:	3710      	adds	r7, #16
 800d792:	46bd      	mov	sp, r7
 800d794:	bd80      	pop	{r7, pc}
 800d796:	bf00      	nop
 800d798:	0801924c 	.word	0x0801924c
 800d79c:	080196c0 	.word	0x080196c0
 800d7a0:	080192ac 	.word	0x080192ac

0800d7a4 <tcp_init>:
/**
 * Initialize this module.
 */
void
tcp_init(void)
{
 800d7a4:	b580      	push	{r7, lr}
 800d7a6:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  tcp_port = TCP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 800d7a8:	f009 fa34 	bl	8016c14 <rand>
 800d7ac:	4603      	mov	r3, r0
 800d7ae:	b29b      	uxth	r3, r3
 800d7b0:	f3c3 030d 	ubfx	r3, r3, #0, #14
 800d7b4:	b29b      	uxth	r3, r3
 800d7b6:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 800d7ba:	b29a      	uxth	r2, r3
 800d7bc:	4b01      	ldr	r3, [pc, #4]	; (800d7c4 <tcp_init+0x20>)
 800d7be:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 800d7c0:	bf00      	nop
 800d7c2:	bd80      	pop	{r7, pc}
 800d7c4:	20000024 	.word	0x20000024

0800d7c8 <tcp_free>:

/** Free a tcp pcb */
void
tcp_free(struct tcp_pcb *pcb)
{
 800d7c8:	b580      	push	{r7, lr}
 800d7ca:	b082      	sub	sp, #8
 800d7cc:	af00      	add	r7, sp, #0
 800d7ce:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free: LISTEN", pcb->state != LISTEN);
 800d7d0:	687b      	ldr	r3, [r7, #4]
 800d7d2:	7d1b      	ldrb	r3, [r3, #20]
 800d7d4:	2b01      	cmp	r3, #1
 800d7d6:	d105      	bne.n	800d7e4 <tcp_free+0x1c>
 800d7d8:	4b06      	ldr	r3, [pc, #24]	; (800d7f4 <tcp_free+0x2c>)
 800d7da:	22d4      	movs	r2, #212	; 0xd4
 800d7dc:	4906      	ldr	r1, [pc, #24]	; (800d7f8 <tcp_free+0x30>)
 800d7de:	4807      	ldr	r0, [pc, #28]	; (800d7fc <tcp_free+0x34>)
 800d7e0:	f009 fb06 	bl	8016df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB, pcb);
 800d7e4:	6879      	ldr	r1, [r7, #4]
 800d7e6:	2001      	movs	r0, #1
 800d7e8:	f7fe fe9e 	bl	800c528 <memp_free>
}
 800d7ec:	bf00      	nop
 800d7ee:	3708      	adds	r7, #8
 800d7f0:	46bd      	mov	sp, r7
 800d7f2:	bd80      	pop	{r7, pc}
 800d7f4:	0801974c 	.word	0x0801974c
 800d7f8:	0801977c 	.word	0x0801977c
 800d7fc:	08019790 	.word	0x08019790

0800d800 <tcp_free_listen>:

/** Free a tcp listen pcb */
static void
tcp_free_listen(struct tcp_pcb *pcb)
{
 800d800:	b580      	push	{r7, lr}
 800d802:	b082      	sub	sp, #8
 800d804:	af00      	add	r7, sp, #0
 800d806:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_free_listen: !LISTEN", pcb->state != LISTEN);
 800d808:	687b      	ldr	r3, [r7, #4]
 800d80a:	7d1b      	ldrb	r3, [r3, #20]
 800d80c:	2b01      	cmp	r3, #1
 800d80e:	d105      	bne.n	800d81c <tcp_free_listen+0x1c>
 800d810:	4b06      	ldr	r3, [pc, #24]	; (800d82c <tcp_free_listen+0x2c>)
 800d812:	22df      	movs	r2, #223	; 0xdf
 800d814:	4906      	ldr	r1, [pc, #24]	; (800d830 <tcp_free_listen+0x30>)
 800d816:	4807      	ldr	r0, [pc, #28]	; (800d834 <tcp_free_listen+0x34>)
 800d818:	f009 faea 	bl	8016df0 <iprintf>
#if LWIP_TCP_PCB_NUM_EXT_ARGS
  tcp_ext_arg_invoke_callbacks_destroyed(pcb->ext_args);
#endif
  memp_free(MEMP_TCP_PCB_LISTEN, pcb);
 800d81c:	6879      	ldr	r1, [r7, #4]
 800d81e:	2002      	movs	r0, #2
 800d820:	f7fe fe82 	bl	800c528 <memp_free>
}
 800d824:	bf00      	nop
 800d826:	3708      	adds	r7, #8
 800d828:	46bd      	mov	sp, r7
 800d82a:	bd80      	pop	{r7, pc}
 800d82c:	0801974c 	.word	0x0801974c
 800d830:	080197b8 	.word	0x080197b8
 800d834:	08019790 	.word	0x08019790

0800d838 <tcp_tmr>:
/**
 * Called periodically to dispatch TCP timers.
 */
void
tcp_tmr(void)
{
 800d838:	b580      	push	{r7, lr}
 800d83a:	af00      	add	r7, sp, #0
  /* Call tcp_fasttmr() every 250 ms */
  tcp_fasttmr();
 800d83c:	f001 f8f4 	bl	800ea28 <tcp_fasttmr>

  if (++tcp_timer & 1) {
 800d840:	4b07      	ldr	r3, [pc, #28]	; (800d860 <tcp_tmr+0x28>)
 800d842:	781b      	ldrb	r3, [r3, #0]
 800d844:	3301      	adds	r3, #1
 800d846:	b2da      	uxtb	r2, r3
 800d848:	4b05      	ldr	r3, [pc, #20]	; (800d860 <tcp_tmr+0x28>)
 800d84a:	701a      	strb	r2, [r3, #0]
 800d84c:	4b04      	ldr	r3, [pc, #16]	; (800d860 <tcp_tmr+0x28>)
 800d84e:	781b      	ldrb	r3, [r3, #0]
 800d850:	f003 0301 	and.w	r3, r3, #1
 800d854:	2b00      	cmp	r3, #0
 800d856:	d001      	beq.n	800d85c <tcp_tmr+0x24>
    /* Call tcp_slowtmr() every 500 ms, i.e., every other timer
       tcp_tmr() is called. */
    tcp_slowtmr();
 800d858:	f000 fda6 	bl	800e3a8 <tcp_slowtmr>
  }
}
 800d85c:	bf00      	nop
 800d85e:	bd80      	pop	{r7, pc}
 800d860:	2000f809 	.word	0x2000f809

0800d864 <tcp_remove_listener>:
/** Called when a listen pcb is closed. Iterates one pcb list and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_remove_listener(struct tcp_pcb *list, struct tcp_pcb_listen *lpcb)
{
 800d864:	b580      	push	{r7, lr}
 800d866:	b084      	sub	sp, #16
 800d868:	af00      	add	r7, sp, #0
 800d86a:	6078      	str	r0, [r7, #4]
 800d86c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;

  LWIP_ASSERT("tcp_remove_listener: invalid listener", lpcb != NULL);
 800d86e:	683b      	ldr	r3, [r7, #0]
 800d870:	2b00      	cmp	r3, #0
 800d872:	d105      	bne.n	800d880 <tcp_remove_listener+0x1c>
 800d874:	4b0d      	ldr	r3, [pc, #52]	; (800d8ac <tcp_remove_listener+0x48>)
 800d876:	22ff      	movs	r2, #255	; 0xff
 800d878:	490d      	ldr	r1, [pc, #52]	; (800d8b0 <tcp_remove_listener+0x4c>)
 800d87a:	480e      	ldr	r0, [pc, #56]	; (800d8b4 <tcp_remove_listener+0x50>)
 800d87c:	f009 fab8 	bl	8016df0 <iprintf>

  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d880:	687b      	ldr	r3, [r7, #4]
 800d882:	60fb      	str	r3, [r7, #12]
 800d884:	e00a      	b.n	800d89c <tcp_remove_listener+0x38>
    if (pcb->listener == lpcb) {
 800d886:	68fb      	ldr	r3, [r7, #12]
 800d888:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 800d88a:	683a      	ldr	r2, [r7, #0]
 800d88c:	429a      	cmp	r2, r3
 800d88e:	d102      	bne.n	800d896 <tcp_remove_listener+0x32>
      pcb->listener = NULL;
 800d890:	68fb      	ldr	r3, [r7, #12]
 800d892:	2200      	movs	r2, #0
 800d894:	67da      	str	r2, [r3, #124]	; 0x7c
  for (pcb = list; pcb != NULL; pcb = pcb->next) {
 800d896:	68fb      	ldr	r3, [r7, #12]
 800d898:	68db      	ldr	r3, [r3, #12]
 800d89a:	60fb      	str	r3, [r7, #12]
 800d89c:	68fb      	ldr	r3, [r7, #12]
 800d89e:	2b00      	cmp	r3, #0
 800d8a0:	d1f1      	bne.n	800d886 <tcp_remove_listener+0x22>
    }
  }
}
 800d8a2:	bf00      	nop
 800d8a4:	bf00      	nop
 800d8a6:	3710      	adds	r7, #16
 800d8a8:	46bd      	mov	sp, r7
 800d8aa:	bd80      	pop	{r7, pc}
 800d8ac:	0801974c 	.word	0x0801974c
 800d8b0:	080197d4 	.word	0x080197d4
 800d8b4:	08019790 	.word	0x08019790

0800d8b8 <tcp_listen_closed>:
/** Called when a listen pcb is closed. Iterates all pcb lists and removes the
 * closed listener pcb from pcb->listener if matching.
 */
static void
tcp_listen_closed(struct tcp_pcb *pcb)
{
 800d8b8:	b580      	push	{r7, lr}
 800d8ba:	b084      	sub	sp, #16
 800d8bc:	af00      	add	r7, sp, #0
 800d8be:	6078      	str	r0, [r7, #4]
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
  size_t i;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800d8c0:	687b      	ldr	r3, [r7, #4]
 800d8c2:	2b00      	cmp	r3, #0
 800d8c4:	d106      	bne.n	800d8d4 <tcp_listen_closed+0x1c>
 800d8c6:	4b14      	ldr	r3, [pc, #80]	; (800d918 <tcp_listen_closed+0x60>)
 800d8c8:	f240 1211 	movw	r2, #273	; 0x111
 800d8cc:	4913      	ldr	r1, [pc, #76]	; (800d91c <tcp_listen_closed+0x64>)
 800d8ce:	4814      	ldr	r0, [pc, #80]	; (800d920 <tcp_listen_closed+0x68>)
 800d8d0:	f009 fa8e 	bl	8016df0 <iprintf>
  LWIP_ASSERT("pcb->state == LISTEN", pcb->state == LISTEN);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	7d1b      	ldrb	r3, [r3, #20]
 800d8d8:	2b01      	cmp	r3, #1
 800d8da:	d006      	beq.n	800d8ea <tcp_listen_closed+0x32>
 800d8dc:	4b0e      	ldr	r3, [pc, #56]	; (800d918 <tcp_listen_closed+0x60>)
 800d8de:	f44f 7289 	mov.w	r2, #274	; 0x112
 800d8e2:	4910      	ldr	r1, [pc, #64]	; (800d924 <tcp_listen_closed+0x6c>)
 800d8e4:	480e      	ldr	r0, [pc, #56]	; (800d920 <tcp_listen_closed+0x68>)
 800d8e6:	f009 fa83 	bl	8016df0 <iprintf>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d8ea:	2301      	movs	r3, #1
 800d8ec:	60fb      	str	r3, [r7, #12]
 800d8ee:	e00b      	b.n	800d908 <tcp_listen_closed+0x50>
    tcp_remove_listener(*tcp_pcb_lists[i], (struct tcp_pcb_listen *)pcb);
 800d8f0:	4a0d      	ldr	r2, [pc, #52]	; (800d928 <tcp_listen_closed+0x70>)
 800d8f2:	68fb      	ldr	r3, [r7, #12]
 800d8f4:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800d8f8:	681b      	ldr	r3, [r3, #0]
 800d8fa:	6879      	ldr	r1, [r7, #4]
 800d8fc:	4618      	mov	r0, r3
 800d8fe:	f7ff ffb1 	bl	800d864 <tcp_remove_listener>
  for (i = 1; i < LWIP_ARRAYSIZE(tcp_pcb_lists); i++) {
 800d902:	68fb      	ldr	r3, [r7, #12]
 800d904:	3301      	adds	r3, #1
 800d906:	60fb      	str	r3, [r7, #12]
 800d908:	68fb      	ldr	r3, [r7, #12]
 800d90a:	2b03      	cmp	r3, #3
 800d90c:	d9f0      	bls.n	800d8f0 <tcp_listen_closed+0x38>
  }
#endif
  LWIP_UNUSED_ARG(pcb);
}
 800d90e:	bf00      	nop
 800d910:	bf00      	nop
 800d912:	3710      	adds	r7, #16
 800d914:	46bd      	mov	sp, r7
 800d916:	bd80      	pop	{r7, pc}
 800d918:	0801974c 	.word	0x0801974c
 800d91c:	080197fc 	.word	0x080197fc
 800d920:	08019790 	.word	0x08019790
 800d924:	08019808 	.word	0x08019808
 800d928:	0801b7b8 	.word	0x0801b7b8

0800d92c <tcp_close_shutdown>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
static err_t
tcp_close_shutdown(struct tcp_pcb *pcb, u8_t rst_on_unacked_data)
{
 800d92c:	b5b0      	push	{r4, r5, r7, lr}
 800d92e:	b088      	sub	sp, #32
 800d930:	af04      	add	r7, sp, #16
 800d932:	6078      	str	r0, [r7, #4]
 800d934:	460b      	mov	r3, r1
 800d936:	70fb      	strb	r3, [r7, #3]
  LWIP_ASSERT("tcp_close_shutdown: invalid pcb", pcb != NULL);
 800d938:	687b      	ldr	r3, [r7, #4]
 800d93a:	2b00      	cmp	r3, #0
 800d93c:	d106      	bne.n	800d94c <tcp_close_shutdown+0x20>
 800d93e:	4b63      	ldr	r3, [pc, #396]	; (800dacc <tcp_close_shutdown+0x1a0>)
 800d940:	f44f 72af 	mov.w	r2, #350	; 0x15e
 800d944:	4962      	ldr	r1, [pc, #392]	; (800dad0 <tcp_close_shutdown+0x1a4>)
 800d946:	4863      	ldr	r0, [pc, #396]	; (800dad4 <tcp_close_shutdown+0x1a8>)
 800d948:	f009 fa52 	bl	8016df0 <iprintf>

  if (rst_on_unacked_data && ((pcb->state == ESTABLISHED) || (pcb->state == CLOSE_WAIT))) {
 800d94c:	78fb      	ldrb	r3, [r7, #3]
 800d94e:	2b00      	cmp	r3, #0
 800d950:	d066      	beq.n	800da20 <tcp_close_shutdown+0xf4>
 800d952:	687b      	ldr	r3, [r7, #4]
 800d954:	7d1b      	ldrb	r3, [r3, #20]
 800d956:	2b04      	cmp	r3, #4
 800d958:	d003      	beq.n	800d962 <tcp_close_shutdown+0x36>
 800d95a:	687b      	ldr	r3, [r7, #4]
 800d95c:	7d1b      	ldrb	r3, [r3, #20]
 800d95e:	2b07      	cmp	r3, #7
 800d960:	d15e      	bne.n	800da20 <tcp_close_shutdown+0xf4>
    if ((pcb->refused_data != NULL) || (pcb->rcv_wnd != TCP_WND_MAX(pcb))) {
 800d962:	687b      	ldr	r3, [r7, #4]
 800d964:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800d966:	2b00      	cmp	r3, #0
 800d968:	d104      	bne.n	800d974 <tcp_close_shutdown+0x48>
 800d96a:	687b      	ldr	r3, [r7, #4]
 800d96c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800d96e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800d972:	d055      	beq.n	800da20 <tcp_close_shutdown+0xf4>
      /* Not all data received by application, send RST to tell the remote
         side about this. */
      LWIP_ASSERT("pcb->flags & TF_RXCLOSED", pcb->flags & TF_RXCLOSED);
 800d974:	687b      	ldr	r3, [r7, #4]
 800d976:	8b5b      	ldrh	r3, [r3, #26]
 800d978:	f003 0310 	and.w	r3, r3, #16
 800d97c:	2b00      	cmp	r3, #0
 800d97e:	d106      	bne.n	800d98e <tcp_close_shutdown+0x62>
 800d980:	4b52      	ldr	r3, [pc, #328]	; (800dacc <tcp_close_shutdown+0x1a0>)
 800d982:	f44f 72b2 	mov.w	r2, #356	; 0x164
 800d986:	4954      	ldr	r1, [pc, #336]	; (800dad8 <tcp_close_shutdown+0x1ac>)
 800d988:	4852      	ldr	r0, [pc, #328]	; (800dad4 <tcp_close_shutdown+0x1a8>)
 800d98a:	f009 fa31 	bl	8016df0 <iprintf>

      /* don't call tcp_abort here: we must not deallocate the pcb since
         that might not be expected when calling tcp_close */
      tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800d98e:	687b      	ldr	r3, [r7, #4]
 800d990:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800d992:	687b      	ldr	r3, [r7, #4]
 800d994:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800d996:	687d      	ldr	r5, [r7, #4]
 800d998:	687b      	ldr	r3, [r7, #4]
 800d99a:	3304      	adds	r3, #4
 800d99c:	687a      	ldr	r2, [r7, #4]
 800d99e:	8ad2      	ldrh	r2, [r2, #22]
 800d9a0:	6879      	ldr	r1, [r7, #4]
 800d9a2:	8b09      	ldrh	r1, [r1, #24]
 800d9a4:	9102      	str	r1, [sp, #8]
 800d9a6:	9201      	str	r2, [sp, #4]
 800d9a8:	9300      	str	r3, [sp, #0]
 800d9aa:	462b      	mov	r3, r5
 800d9ac:	4622      	mov	r2, r4
 800d9ae:	4601      	mov	r1, r0
 800d9b0:	6878      	ldr	r0, [r7, #4]
 800d9b2:	f005 fe09 	bl	80135c8 <tcp_rst>
              pcb->local_port, pcb->remote_port);

      tcp_pcb_purge(pcb);
 800d9b6:	6878      	ldr	r0, [r7, #4]
 800d9b8:	f001 fbe6 	bl	800f188 <tcp_pcb_purge>
      TCP_RMV_ACTIVE(pcb);
 800d9bc:	4b47      	ldr	r3, [pc, #284]	; (800dadc <tcp_close_shutdown+0x1b0>)
 800d9be:	681b      	ldr	r3, [r3, #0]
 800d9c0:	687a      	ldr	r2, [r7, #4]
 800d9c2:	429a      	cmp	r2, r3
 800d9c4:	d105      	bne.n	800d9d2 <tcp_close_shutdown+0xa6>
 800d9c6:	4b45      	ldr	r3, [pc, #276]	; (800dadc <tcp_close_shutdown+0x1b0>)
 800d9c8:	681b      	ldr	r3, [r3, #0]
 800d9ca:	68db      	ldr	r3, [r3, #12]
 800d9cc:	4a43      	ldr	r2, [pc, #268]	; (800dadc <tcp_close_shutdown+0x1b0>)
 800d9ce:	6013      	str	r3, [r2, #0]
 800d9d0:	e013      	b.n	800d9fa <tcp_close_shutdown+0xce>
 800d9d2:	4b42      	ldr	r3, [pc, #264]	; (800dadc <tcp_close_shutdown+0x1b0>)
 800d9d4:	681b      	ldr	r3, [r3, #0]
 800d9d6:	60fb      	str	r3, [r7, #12]
 800d9d8:	e00c      	b.n	800d9f4 <tcp_close_shutdown+0xc8>
 800d9da:	68fb      	ldr	r3, [r7, #12]
 800d9dc:	68db      	ldr	r3, [r3, #12]
 800d9de:	687a      	ldr	r2, [r7, #4]
 800d9e0:	429a      	cmp	r2, r3
 800d9e2:	d104      	bne.n	800d9ee <tcp_close_shutdown+0xc2>
 800d9e4:	687b      	ldr	r3, [r7, #4]
 800d9e6:	68da      	ldr	r2, [r3, #12]
 800d9e8:	68fb      	ldr	r3, [r7, #12]
 800d9ea:	60da      	str	r2, [r3, #12]
 800d9ec:	e005      	b.n	800d9fa <tcp_close_shutdown+0xce>
 800d9ee:	68fb      	ldr	r3, [r7, #12]
 800d9f0:	68db      	ldr	r3, [r3, #12]
 800d9f2:	60fb      	str	r3, [r7, #12]
 800d9f4:	68fb      	ldr	r3, [r7, #12]
 800d9f6:	2b00      	cmp	r3, #0
 800d9f8:	d1ef      	bne.n	800d9da <tcp_close_shutdown+0xae>
 800d9fa:	687b      	ldr	r3, [r7, #4]
 800d9fc:	2200      	movs	r2, #0
 800d9fe:	60da      	str	r2, [r3, #12]
 800da00:	4b37      	ldr	r3, [pc, #220]	; (800dae0 <tcp_close_shutdown+0x1b4>)
 800da02:	2201      	movs	r2, #1
 800da04:	701a      	strb	r2, [r3, #0]
      /* Deallocate the pcb since we already sent a RST for it */
      if (tcp_input_pcb == pcb) {
 800da06:	4b37      	ldr	r3, [pc, #220]	; (800dae4 <tcp_close_shutdown+0x1b8>)
 800da08:	681b      	ldr	r3, [r3, #0]
 800da0a:	687a      	ldr	r2, [r7, #4]
 800da0c:	429a      	cmp	r2, r3
 800da0e:	d102      	bne.n	800da16 <tcp_close_shutdown+0xea>
        /* prevent using a deallocated pcb: free it from tcp_input later */
        tcp_trigger_input_pcb_close();
 800da10:	f004 f87e 	bl	8011b10 <tcp_trigger_input_pcb_close>
 800da14:	e002      	b.n	800da1c <tcp_close_shutdown+0xf0>
      } else {
        tcp_free(pcb);
 800da16:	6878      	ldr	r0, [r7, #4]
 800da18:	f7ff fed6 	bl	800d7c8 <tcp_free>
      }
      return ERR_OK;
 800da1c:	2300      	movs	r3, #0
 800da1e:	e050      	b.n	800dac2 <tcp_close_shutdown+0x196>
    }
  }

  /* - states which free the pcb are handled here,
     - states which send FIN and change state are handled in tcp_close_shutdown_fin() */
  switch (pcb->state) {
 800da20:	687b      	ldr	r3, [r7, #4]
 800da22:	7d1b      	ldrb	r3, [r3, #20]
 800da24:	2b02      	cmp	r3, #2
 800da26:	d03b      	beq.n	800daa0 <tcp_close_shutdown+0x174>
 800da28:	2b02      	cmp	r3, #2
 800da2a:	dc44      	bgt.n	800dab6 <tcp_close_shutdown+0x18a>
 800da2c:	2b00      	cmp	r3, #0
 800da2e:	d002      	beq.n	800da36 <tcp_close_shutdown+0x10a>
 800da30:	2b01      	cmp	r3, #1
 800da32:	d02a      	beq.n	800da8a <tcp_close_shutdown+0x15e>
 800da34:	e03f      	b.n	800dab6 <tcp_close_shutdown+0x18a>
       * and the user needs some way to free it should the need arise.
       * Calling tcp_close() with a pcb that has already been closed, (i.e. twice)
       * or for a pcb that has been used and then entered the CLOSED state
       * is erroneous, but this should never happen as the pcb has in those cases
       * been freed, and so any remaining handles are bogus. */
      if (pcb->local_port != 0) {
 800da36:	687b      	ldr	r3, [r7, #4]
 800da38:	8adb      	ldrh	r3, [r3, #22]
 800da3a:	2b00      	cmp	r3, #0
 800da3c:	d021      	beq.n	800da82 <tcp_close_shutdown+0x156>
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800da3e:	4b2a      	ldr	r3, [pc, #168]	; (800dae8 <tcp_close_shutdown+0x1bc>)
 800da40:	681b      	ldr	r3, [r3, #0]
 800da42:	687a      	ldr	r2, [r7, #4]
 800da44:	429a      	cmp	r2, r3
 800da46:	d105      	bne.n	800da54 <tcp_close_shutdown+0x128>
 800da48:	4b27      	ldr	r3, [pc, #156]	; (800dae8 <tcp_close_shutdown+0x1bc>)
 800da4a:	681b      	ldr	r3, [r3, #0]
 800da4c:	68db      	ldr	r3, [r3, #12]
 800da4e:	4a26      	ldr	r2, [pc, #152]	; (800dae8 <tcp_close_shutdown+0x1bc>)
 800da50:	6013      	str	r3, [r2, #0]
 800da52:	e013      	b.n	800da7c <tcp_close_shutdown+0x150>
 800da54:	4b24      	ldr	r3, [pc, #144]	; (800dae8 <tcp_close_shutdown+0x1bc>)
 800da56:	681b      	ldr	r3, [r3, #0]
 800da58:	60bb      	str	r3, [r7, #8]
 800da5a:	e00c      	b.n	800da76 <tcp_close_shutdown+0x14a>
 800da5c:	68bb      	ldr	r3, [r7, #8]
 800da5e:	68db      	ldr	r3, [r3, #12]
 800da60:	687a      	ldr	r2, [r7, #4]
 800da62:	429a      	cmp	r2, r3
 800da64:	d104      	bne.n	800da70 <tcp_close_shutdown+0x144>
 800da66:	687b      	ldr	r3, [r7, #4]
 800da68:	68da      	ldr	r2, [r3, #12]
 800da6a:	68bb      	ldr	r3, [r7, #8]
 800da6c:	60da      	str	r2, [r3, #12]
 800da6e:	e005      	b.n	800da7c <tcp_close_shutdown+0x150>
 800da70:	68bb      	ldr	r3, [r7, #8]
 800da72:	68db      	ldr	r3, [r3, #12]
 800da74:	60bb      	str	r3, [r7, #8]
 800da76:	68bb      	ldr	r3, [r7, #8]
 800da78:	2b00      	cmp	r3, #0
 800da7a:	d1ef      	bne.n	800da5c <tcp_close_shutdown+0x130>
 800da7c:	687b      	ldr	r3, [r7, #4]
 800da7e:	2200      	movs	r2, #0
 800da80:	60da      	str	r2, [r3, #12]
      }
      tcp_free(pcb);
 800da82:	6878      	ldr	r0, [r7, #4]
 800da84:	f7ff fea0 	bl	800d7c8 <tcp_free>
      break;
 800da88:	e01a      	b.n	800dac0 <tcp_close_shutdown+0x194>
    case LISTEN:
      tcp_listen_closed(pcb);
 800da8a:	6878      	ldr	r0, [r7, #4]
 800da8c:	f7ff ff14 	bl	800d8b8 <tcp_listen_closed>
      tcp_pcb_remove(&tcp_listen_pcbs.pcbs, pcb);
 800da90:	6879      	ldr	r1, [r7, #4]
 800da92:	4816      	ldr	r0, [pc, #88]	; (800daec <tcp_close_shutdown+0x1c0>)
 800da94:	f001 fbc8 	bl	800f228 <tcp_pcb_remove>
      tcp_free_listen(pcb);
 800da98:	6878      	ldr	r0, [r7, #4]
 800da9a:	f7ff feb1 	bl	800d800 <tcp_free_listen>
      break;
 800da9e:	e00f      	b.n	800dac0 <tcp_close_shutdown+0x194>
    case SYN_SENT:
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800daa0:	6879      	ldr	r1, [r7, #4]
 800daa2:	480e      	ldr	r0, [pc, #56]	; (800dadc <tcp_close_shutdown+0x1b0>)
 800daa4:	f001 fbc0 	bl	800f228 <tcp_pcb_remove>
 800daa8:	4b0d      	ldr	r3, [pc, #52]	; (800dae0 <tcp_close_shutdown+0x1b4>)
 800daaa:	2201      	movs	r2, #1
 800daac:	701a      	strb	r2, [r3, #0]
      tcp_free(pcb);
 800daae:	6878      	ldr	r0, [r7, #4]
 800dab0:	f7ff fe8a 	bl	800d7c8 <tcp_free>
      MIB2_STATS_INC(mib2.tcpattemptfails);
      break;
 800dab4:	e004      	b.n	800dac0 <tcp_close_shutdown+0x194>
    default:
      return tcp_close_shutdown_fin(pcb);
 800dab6:	6878      	ldr	r0, [r7, #4]
 800dab8:	f000 f81a 	bl	800daf0 <tcp_close_shutdown_fin>
 800dabc:	4603      	mov	r3, r0
 800dabe:	e000      	b.n	800dac2 <tcp_close_shutdown+0x196>
  }
  return ERR_OK;
 800dac0:	2300      	movs	r3, #0
}
 800dac2:	4618      	mov	r0, r3
 800dac4:	3710      	adds	r7, #16
 800dac6:	46bd      	mov	sp, r7
 800dac8:	bdb0      	pop	{r4, r5, r7, pc}
 800daca:	bf00      	nop
 800dacc:	0801974c 	.word	0x0801974c
 800dad0:	08019820 	.word	0x08019820
 800dad4:	08019790 	.word	0x08019790
 800dad8:	08019840 	.word	0x08019840
 800dadc:	2000f800 	.word	0x2000f800
 800dae0:	2000f808 	.word	0x2000f808
 800dae4:	2000f840 	.word	0x2000f840
 800dae8:	2000f7f8 	.word	0x2000f7f8
 800daec:	2000f7fc 	.word	0x2000f7fc

0800daf0 <tcp_close_shutdown_fin>:

static err_t
tcp_close_shutdown_fin(struct tcp_pcb *pcb)
{
 800daf0:	b580      	push	{r7, lr}
 800daf2:	b084      	sub	sp, #16
 800daf4:	af00      	add	r7, sp, #0
 800daf6:	6078      	str	r0, [r7, #4]
  err_t err;
  LWIP_ASSERT("pcb != NULL", pcb != NULL);
 800daf8:	687b      	ldr	r3, [r7, #4]
 800dafa:	2b00      	cmp	r3, #0
 800dafc:	d106      	bne.n	800db0c <tcp_close_shutdown_fin+0x1c>
 800dafe:	4b2e      	ldr	r3, [pc, #184]	; (800dbb8 <tcp_close_shutdown_fin+0xc8>)
 800db00:	f44f 72ce 	mov.w	r2, #412	; 0x19c
 800db04:	492d      	ldr	r1, [pc, #180]	; (800dbbc <tcp_close_shutdown_fin+0xcc>)
 800db06:	482e      	ldr	r0, [pc, #184]	; (800dbc0 <tcp_close_shutdown_fin+0xd0>)
 800db08:	f009 f972 	bl	8016df0 <iprintf>

  switch (pcb->state) {
 800db0c:	687b      	ldr	r3, [r7, #4]
 800db0e:	7d1b      	ldrb	r3, [r3, #20]
 800db10:	2b07      	cmp	r3, #7
 800db12:	d020      	beq.n	800db56 <tcp_close_shutdown_fin+0x66>
 800db14:	2b07      	cmp	r3, #7
 800db16:	dc2b      	bgt.n	800db70 <tcp_close_shutdown_fin+0x80>
 800db18:	2b03      	cmp	r3, #3
 800db1a:	d002      	beq.n	800db22 <tcp_close_shutdown_fin+0x32>
 800db1c:	2b04      	cmp	r3, #4
 800db1e:	d00d      	beq.n	800db3c <tcp_close_shutdown_fin+0x4c>
 800db20:	e026      	b.n	800db70 <tcp_close_shutdown_fin+0x80>
    case SYN_RCVD:
      err = tcp_send_fin(pcb);
 800db22:	6878      	ldr	r0, [r7, #4]
 800db24:	f004 fe5e 	bl	80127e4 <tcp_send_fin>
 800db28:	4603      	mov	r3, r0
 800db2a:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db2c:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db30:	2b00      	cmp	r3, #0
 800db32:	d11f      	bne.n	800db74 <tcp_close_shutdown_fin+0x84>
        tcp_backlog_accepted(pcb);
        MIB2_STATS_INC(mib2.tcpattemptfails);
        pcb->state = FIN_WAIT_1;
 800db34:	687b      	ldr	r3, [r7, #4]
 800db36:	2205      	movs	r2, #5
 800db38:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db3a:	e01b      	b.n	800db74 <tcp_close_shutdown_fin+0x84>
    case ESTABLISHED:
      err = tcp_send_fin(pcb);
 800db3c:	6878      	ldr	r0, [r7, #4]
 800db3e:	f004 fe51 	bl	80127e4 <tcp_send_fin>
 800db42:	4603      	mov	r3, r0
 800db44:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db46:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db4a:	2b00      	cmp	r3, #0
 800db4c:	d114      	bne.n	800db78 <tcp_close_shutdown_fin+0x88>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = FIN_WAIT_1;
 800db4e:	687b      	ldr	r3, [r7, #4]
 800db50:	2205      	movs	r2, #5
 800db52:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db54:	e010      	b.n	800db78 <tcp_close_shutdown_fin+0x88>
    case CLOSE_WAIT:
      err = tcp_send_fin(pcb);
 800db56:	6878      	ldr	r0, [r7, #4]
 800db58:	f004 fe44 	bl	80127e4 <tcp_send_fin>
 800db5c:	4603      	mov	r3, r0
 800db5e:	73fb      	strb	r3, [r7, #15]
      if (err == ERR_OK) {
 800db60:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db64:	2b00      	cmp	r3, #0
 800db66:	d109      	bne.n	800db7c <tcp_close_shutdown_fin+0x8c>
        MIB2_STATS_INC(mib2.tcpestabresets);
        pcb->state = LAST_ACK;
 800db68:	687b      	ldr	r3, [r7, #4]
 800db6a:	2209      	movs	r2, #9
 800db6c:	751a      	strb	r2, [r3, #20]
      }
      break;
 800db6e:	e005      	b.n	800db7c <tcp_close_shutdown_fin+0x8c>
    default:
      /* Has already been closed, do nothing. */
      return ERR_OK;
 800db70:	2300      	movs	r3, #0
 800db72:	e01c      	b.n	800dbae <tcp_close_shutdown_fin+0xbe>
      break;
 800db74:	bf00      	nop
 800db76:	e002      	b.n	800db7e <tcp_close_shutdown_fin+0x8e>
      break;
 800db78:	bf00      	nop
 800db7a:	e000      	b.n	800db7e <tcp_close_shutdown_fin+0x8e>
      break;
 800db7c:	bf00      	nop
  }

  if (err == ERR_OK) {
 800db7e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db82:	2b00      	cmp	r3, #0
 800db84:	d103      	bne.n	800db8e <tcp_close_shutdown_fin+0x9e>
    /* To ensure all data has been sent when tcp_close returns, we have
       to make sure tcp_output doesn't fail.
       Since we don't really have to ensure all data has been sent when tcp_close
       returns (unsent data is sent from tcp timer functions, also), we don't care
       for the return value of tcp_output for now. */
    tcp_output(pcb);
 800db86:	6878      	ldr	r0, [r7, #4]
 800db88:	f004 ff6a 	bl	8012a60 <tcp_output>
 800db8c:	e00d      	b.n	800dbaa <tcp_close_shutdown_fin+0xba>
  } else if (err == ERR_MEM) {
 800db8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800db92:	f1b3 3fff 	cmp.w	r3, #4294967295
 800db96:	d108      	bne.n	800dbaa <tcp_close_shutdown_fin+0xba>
    /* Mark this pcb for closing. Closing is retried from tcp_tmr. */
    tcp_set_flags(pcb, TF_CLOSEPEND);
 800db98:	687b      	ldr	r3, [r7, #4]
 800db9a:	8b5b      	ldrh	r3, [r3, #26]
 800db9c:	f043 0308 	orr.w	r3, r3, #8
 800dba0:	b29a      	uxth	r2, r3
 800dba2:	687b      	ldr	r3, [r7, #4]
 800dba4:	835a      	strh	r2, [r3, #26]
    /* We have to return ERR_OK from here to indicate to the callers that this
       pcb should not be used any more as it will be freed soon via tcp_tmr.
       This is OK here since sending FIN does not guarantee a time frime for
       actually freeing the pcb, either (it is left in closure states for
       remote ACK or timeout) */
    return ERR_OK;
 800dba6:	2300      	movs	r3, #0
 800dba8:	e001      	b.n	800dbae <tcp_close_shutdown_fin+0xbe>
  }
  return err;
 800dbaa:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 800dbae:	4618      	mov	r0, r3
 800dbb0:	3710      	adds	r7, #16
 800dbb2:	46bd      	mov	sp, r7
 800dbb4:	bd80      	pop	{r7, pc}
 800dbb6:	bf00      	nop
 800dbb8:	0801974c 	.word	0x0801974c
 800dbbc:	080197fc 	.word	0x080197fc
 800dbc0:	08019790 	.word	0x08019790

0800dbc4 <tcp_close>:
 * @return ERR_OK if connection has been closed
 *         another err_t if closing failed and pcb is not freed
 */
err_t
tcp_close(struct tcp_pcb *pcb)
{
 800dbc4:	b580      	push	{r7, lr}
 800dbc6:	b082      	sub	sp, #8
 800dbc8:	af00      	add	r7, sp, #0
 800dbca:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_close: invalid pcb", pcb != NULL, return ERR_ARG);
 800dbcc:	687b      	ldr	r3, [r7, #4]
 800dbce:	2b00      	cmp	r3, #0
 800dbd0:	d109      	bne.n	800dbe6 <tcp_close+0x22>
 800dbd2:	4b0f      	ldr	r3, [pc, #60]	; (800dc10 <tcp_close+0x4c>)
 800dbd4:	f44f 72f4 	mov.w	r2, #488	; 0x1e8
 800dbd8:	490e      	ldr	r1, [pc, #56]	; (800dc14 <tcp_close+0x50>)
 800dbda:	480f      	ldr	r0, [pc, #60]	; (800dc18 <tcp_close+0x54>)
 800dbdc:	f009 f908 	bl	8016df0 <iprintf>
 800dbe0:	f06f 030f 	mvn.w	r3, #15
 800dbe4:	e00f      	b.n	800dc06 <tcp_close+0x42>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_close: closing in "));

  tcp_debug_print_state(pcb->state);

  if (pcb->state != LISTEN) {
 800dbe6:	687b      	ldr	r3, [r7, #4]
 800dbe8:	7d1b      	ldrb	r3, [r3, #20]
 800dbea:	2b01      	cmp	r3, #1
 800dbec:	d006      	beq.n	800dbfc <tcp_close+0x38>
    /* Set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dbee:	687b      	ldr	r3, [r7, #4]
 800dbf0:	8b5b      	ldrh	r3, [r3, #26]
 800dbf2:	f043 0310 	orr.w	r3, r3, #16
 800dbf6:	b29a      	uxth	r2, r3
 800dbf8:	687b      	ldr	r3, [r7, #4]
 800dbfa:	835a      	strh	r2, [r3, #26]
  }
  /* ... and close */
  return tcp_close_shutdown(pcb, 1);
 800dbfc:	2101      	movs	r1, #1
 800dbfe:	6878      	ldr	r0, [r7, #4]
 800dc00:	f7ff fe94 	bl	800d92c <tcp_close_shutdown>
 800dc04:	4603      	mov	r3, r0
}
 800dc06:	4618      	mov	r0, r3
 800dc08:	3708      	adds	r7, #8
 800dc0a:	46bd      	mov	sp, r7
 800dc0c:	bd80      	pop	{r7, pc}
 800dc0e:	bf00      	nop
 800dc10:	0801974c 	.word	0x0801974c
 800dc14:	0801985c 	.word	0x0801985c
 800dc18:	08019790 	.word	0x08019790

0800dc1c <tcp_shutdown>:
 * @return ERR_OK if shutdown succeeded (or the PCB has already been shut down)
 *         another err_t on error.
 */
err_t
tcp_shutdown(struct tcp_pcb *pcb, int shut_rx, int shut_tx)
{
 800dc1c:	b580      	push	{r7, lr}
 800dc1e:	b084      	sub	sp, #16
 800dc20:	af00      	add	r7, sp, #0
 800dc22:	60f8      	str	r0, [r7, #12]
 800dc24:	60b9      	str	r1, [r7, #8]
 800dc26:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_shutdown: invalid pcb", pcb != NULL, return ERR_ARG);
 800dc28:	68fb      	ldr	r3, [r7, #12]
 800dc2a:	2b00      	cmp	r3, #0
 800dc2c:	d109      	bne.n	800dc42 <tcp_shutdown+0x26>
 800dc2e:	4b26      	ldr	r3, [pc, #152]	; (800dcc8 <tcp_shutdown+0xac>)
 800dc30:	f240 2207 	movw	r2, #519	; 0x207
 800dc34:	4925      	ldr	r1, [pc, #148]	; (800dccc <tcp_shutdown+0xb0>)
 800dc36:	4826      	ldr	r0, [pc, #152]	; (800dcd0 <tcp_shutdown+0xb4>)
 800dc38:	f009 f8da 	bl	8016df0 <iprintf>
 800dc3c:	f06f 030f 	mvn.w	r3, #15
 800dc40:	e03d      	b.n	800dcbe <tcp_shutdown+0xa2>

  if (pcb->state == LISTEN) {
 800dc42:	68fb      	ldr	r3, [r7, #12]
 800dc44:	7d1b      	ldrb	r3, [r3, #20]
 800dc46:	2b01      	cmp	r3, #1
 800dc48:	d102      	bne.n	800dc50 <tcp_shutdown+0x34>
    return ERR_CONN;
 800dc4a:	f06f 030a 	mvn.w	r3, #10
 800dc4e:	e036      	b.n	800dcbe <tcp_shutdown+0xa2>
  }
  if (shut_rx) {
 800dc50:	68bb      	ldr	r3, [r7, #8]
 800dc52:	2b00      	cmp	r3, #0
 800dc54:	d01b      	beq.n	800dc8e <tcp_shutdown+0x72>
    /* shut down the receive side: set a flag not to receive any more data... */
    tcp_set_flags(pcb, TF_RXCLOSED);
 800dc56:	68fb      	ldr	r3, [r7, #12]
 800dc58:	8b5b      	ldrh	r3, [r3, #26]
 800dc5a:	f043 0310 	orr.w	r3, r3, #16
 800dc5e:	b29a      	uxth	r2, r3
 800dc60:	68fb      	ldr	r3, [r7, #12]
 800dc62:	835a      	strh	r2, [r3, #26]
    if (shut_tx) {
 800dc64:	687b      	ldr	r3, [r7, #4]
 800dc66:	2b00      	cmp	r3, #0
 800dc68:	d005      	beq.n	800dc76 <tcp_shutdown+0x5a>
      /* shutting down the tx AND rx side is the same as closing for the raw API */
      return tcp_close_shutdown(pcb, 1);
 800dc6a:	2101      	movs	r1, #1
 800dc6c:	68f8      	ldr	r0, [r7, #12]
 800dc6e:	f7ff fe5d 	bl	800d92c <tcp_close_shutdown>
 800dc72:	4603      	mov	r3, r0
 800dc74:	e023      	b.n	800dcbe <tcp_shutdown+0xa2>
    }
    /* ... and free buffered data */
    if (pcb->refused_data != NULL) {
 800dc76:	68fb      	ldr	r3, [r7, #12]
 800dc78:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc7a:	2b00      	cmp	r3, #0
 800dc7c:	d007      	beq.n	800dc8e <tcp_shutdown+0x72>
      pbuf_free(pcb->refused_data);
 800dc7e:	68fb      	ldr	r3, [r7, #12]
 800dc80:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800dc82:	4618      	mov	r0, r3
 800dc84:	f7ff faf4 	bl	800d270 <pbuf_free>
      pcb->refused_data = NULL;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	2200      	movs	r2, #0
 800dc8c:	679a      	str	r2, [r3, #120]	; 0x78
    }
  }
  if (shut_tx) {
 800dc8e:	687b      	ldr	r3, [r7, #4]
 800dc90:	2b00      	cmp	r3, #0
 800dc92:	d013      	beq.n	800dcbc <tcp_shutdown+0xa0>
    /* This can't happen twice since if it succeeds, the pcb's state is changed.
       Only close in these states as the others directly deallocate the PCB */
    switch (pcb->state) {
 800dc94:	68fb      	ldr	r3, [r7, #12]
 800dc96:	7d1b      	ldrb	r3, [r3, #20]
 800dc98:	2b04      	cmp	r3, #4
 800dc9a:	dc02      	bgt.n	800dca2 <tcp_shutdown+0x86>
 800dc9c:	2b03      	cmp	r3, #3
 800dc9e:	da02      	bge.n	800dca6 <tcp_shutdown+0x8a>
 800dca0:	e009      	b.n	800dcb6 <tcp_shutdown+0x9a>
 800dca2:	2b07      	cmp	r3, #7
 800dca4:	d107      	bne.n	800dcb6 <tcp_shutdown+0x9a>
      case SYN_RCVD:
      case ESTABLISHED:
      case CLOSE_WAIT:
        return tcp_close_shutdown(pcb, (u8_t)shut_rx);
 800dca6:	68bb      	ldr	r3, [r7, #8]
 800dca8:	b2db      	uxtb	r3, r3
 800dcaa:	4619      	mov	r1, r3
 800dcac:	68f8      	ldr	r0, [r7, #12]
 800dcae:	f7ff fe3d 	bl	800d92c <tcp_close_shutdown>
 800dcb2:	4603      	mov	r3, r0
 800dcb4:	e003      	b.n	800dcbe <tcp_shutdown+0xa2>
      default:
        /* Not (yet?) connected, cannot shutdown the TX side as that would bring us
          into CLOSED state, where the PCB is deallocated. */
        return ERR_CONN;
 800dcb6:	f06f 030a 	mvn.w	r3, #10
 800dcba:	e000      	b.n	800dcbe <tcp_shutdown+0xa2>
    }
  }
  return ERR_OK;
 800dcbc:	2300      	movs	r3, #0
}
 800dcbe:	4618      	mov	r0, r3
 800dcc0:	3710      	adds	r7, #16
 800dcc2:	46bd      	mov	sp, r7
 800dcc4:	bd80      	pop	{r7, pc}
 800dcc6:	bf00      	nop
 800dcc8:	0801974c 	.word	0x0801974c
 800dccc:	08019874 	.word	0x08019874
 800dcd0:	08019790 	.word	0x08019790

0800dcd4 <tcp_abandon>:
 * @param pcb the tcp_pcb to abort
 * @param reset boolean to indicate whether a reset should be sent
 */
void
tcp_abandon(struct tcp_pcb *pcb, int reset)
{
 800dcd4:	b580      	push	{r7, lr}
 800dcd6:	b08e      	sub	sp, #56	; 0x38
 800dcd8:	af04      	add	r7, sp, #16
 800dcda:	6078      	str	r0, [r7, #4]
 800dcdc:	6039      	str	r1, [r7, #0]
#endif /* LWIP_CALLBACK_API */
  void *errf_arg;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_abandon: invalid pcb", pcb != NULL, return);
 800dcde:	687b      	ldr	r3, [r7, #4]
 800dce0:	2b00      	cmp	r3, #0
 800dce2:	d107      	bne.n	800dcf4 <tcp_abandon+0x20>
 800dce4:	4b52      	ldr	r3, [pc, #328]	; (800de30 <tcp_abandon+0x15c>)
 800dce6:	f240 223d 	movw	r2, #573	; 0x23d
 800dcea:	4952      	ldr	r1, [pc, #328]	; (800de34 <tcp_abandon+0x160>)
 800dcec:	4852      	ldr	r0, [pc, #328]	; (800de38 <tcp_abandon+0x164>)
 800dcee:	f009 f87f 	bl	8016df0 <iprintf>
 800dcf2:	e099      	b.n	800de28 <tcp_abandon+0x154>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_abort/tcp_abandon for listen-pcbs",
 800dcf4:	687b      	ldr	r3, [r7, #4]
 800dcf6:	7d1b      	ldrb	r3, [r3, #20]
 800dcf8:	2b01      	cmp	r3, #1
 800dcfa:	d106      	bne.n	800dd0a <tcp_abandon+0x36>
 800dcfc:	4b4c      	ldr	r3, [pc, #304]	; (800de30 <tcp_abandon+0x15c>)
 800dcfe:	f44f 7210 	mov.w	r2, #576	; 0x240
 800dd02:	494e      	ldr	r1, [pc, #312]	; (800de3c <tcp_abandon+0x168>)
 800dd04:	484c      	ldr	r0, [pc, #304]	; (800de38 <tcp_abandon+0x164>)
 800dd06:	f009 f873 	bl	8016df0 <iprintf>
              pcb->state != LISTEN);
  /* Figure out on which TCP PCB list we are, and remove us. If we
     are in an active state, call the receive function associated with
     the PCB with a NULL argument, and send an RST to the remote end. */
  if (pcb->state == TIME_WAIT) {
 800dd0a:	687b      	ldr	r3, [r7, #4]
 800dd0c:	7d1b      	ldrb	r3, [r3, #20]
 800dd0e:	2b0a      	cmp	r3, #10
 800dd10:	d107      	bne.n	800dd22 <tcp_abandon+0x4e>
    tcp_pcb_remove(&tcp_tw_pcbs, pcb);
 800dd12:	6879      	ldr	r1, [r7, #4]
 800dd14:	484a      	ldr	r0, [pc, #296]	; (800de40 <tcp_abandon+0x16c>)
 800dd16:	f001 fa87 	bl	800f228 <tcp_pcb_remove>
    tcp_free(pcb);
 800dd1a:	6878      	ldr	r0, [r7, #4]
 800dd1c:	f7ff fd54 	bl	800d7c8 <tcp_free>
 800dd20:	e082      	b.n	800de28 <tcp_abandon+0x154>
  } else {
    int send_rst = 0;
 800dd22:	2300      	movs	r3, #0
 800dd24:	627b      	str	r3, [r7, #36]	; 0x24
    u16_t local_port = 0;
 800dd26:	2300      	movs	r3, #0
 800dd28:	847b      	strh	r3, [r7, #34]	; 0x22
    enum tcp_state last_state;
    seqno = pcb->snd_nxt;
 800dd2a:	687b      	ldr	r3, [r7, #4]
 800dd2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800dd2e:	61bb      	str	r3, [r7, #24]
    ackno = pcb->rcv_nxt;
 800dd30:	687b      	ldr	r3, [r7, #4]
 800dd32:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dd34:	617b      	str	r3, [r7, #20]
#if LWIP_CALLBACK_API
    errf = pcb->errf;
 800dd36:	687b      	ldr	r3, [r7, #4]
 800dd38:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800dd3c:	613b      	str	r3, [r7, #16]
#endif /* LWIP_CALLBACK_API */
    errf_arg = pcb->callback_arg;
 800dd3e:	687b      	ldr	r3, [r7, #4]
 800dd40:	691b      	ldr	r3, [r3, #16]
 800dd42:	60fb      	str	r3, [r7, #12]
    if (pcb->state == CLOSED) {
 800dd44:	687b      	ldr	r3, [r7, #4]
 800dd46:	7d1b      	ldrb	r3, [r3, #20]
 800dd48:	2b00      	cmp	r3, #0
 800dd4a:	d126      	bne.n	800dd9a <tcp_abandon+0xc6>
      if (pcb->local_port != 0) {
 800dd4c:	687b      	ldr	r3, [r7, #4]
 800dd4e:	8adb      	ldrh	r3, [r3, #22]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d02e      	beq.n	800ddb2 <tcp_abandon+0xde>
        /* bound, not yet opened */
        TCP_RMV(&tcp_bound_pcbs, pcb);
 800dd54:	4b3b      	ldr	r3, [pc, #236]	; (800de44 <tcp_abandon+0x170>)
 800dd56:	681b      	ldr	r3, [r3, #0]
 800dd58:	687a      	ldr	r2, [r7, #4]
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d105      	bne.n	800dd6a <tcp_abandon+0x96>
 800dd5e:	4b39      	ldr	r3, [pc, #228]	; (800de44 <tcp_abandon+0x170>)
 800dd60:	681b      	ldr	r3, [r3, #0]
 800dd62:	68db      	ldr	r3, [r3, #12]
 800dd64:	4a37      	ldr	r2, [pc, #220]	; (800de44 <tcp_abandon+0x170>)
 800dd66:	6013      	str	r3, [r2, #0]
 800dd68:	e013      	b.n	800dd92 <tcp_abandon+0xbe>
 800dd6a:	4b36      	ldr	r3, [pc, #216]	; (800de44 <tcp_abandon+0x170>)
 800dd6c:	681b      	ldr	r3, [r3, #0]
 800dd6e:	61fb      	str	r3, [r7, #28]
 800dd70:	e00c      	b.n	800dd8c <tcp_abandon+0xb8>
 800dd72:	69fb      	ldr	r3, [r7, #28]
 800dd74:	68db      	ldr	r3, [r3, #12]
 800dd76:	687a      	ldr	r2, [r7, #4]
 800dd78:	429a      	cmp	r2, r3
 800dd7a:	d104      	bne.n	800dd86 <tcp_abandon+0xb2>
 800dd7c:	687b      	ldr	r3, [r7, #4]
 800dd7e:	68da      	ldr	r2, [r3, #12]
 800dd80:	69fb      	ldr	r3, [r7, #28]
 800dd82:	60da      	str	r2, [r3, #12]
 800dd84:	e005      	b.n	800dd92 <tcp_abandon+0xbe>
 800dd86:	69fb      	ldr	r3, [r7, #28]
 800dd88:	68db      	ldr	r3, [r3, #12]
 800dd8a:	61fb      	str	r3, [r7, #28]
 800dd8c:	69fb      	ldr	r3, [r7, #28]
 800dd8e:	2b00      	cmp	r3, #0
 800dd90:	d1ef      	bne.n	800dd72 <tcp_abandon+0x9e>
 800dd92:	687b      	ldr	r3, [r7, #4]
 800dd94:	2200      	movs	r2, #0
 800dd96:	60da      	str	r2, [r3, #12]
 800dd98:	e00b      	b.n	800ddb2 <tcp_abandon+0xde>
      }
    } else {
      send_rst = reset;
 800dd9a:	683b      	ldr	r3, [r7, #0]
 800dd9c:	627b      	str	r3, [r7, #36]	; 0x24
      local_port = pcb->local_port;
 800dd9e:	687b      	ldr	r3, [r7, #4]
 800dda0:	8adb      	ldrh	r3, [r3, #22]
 800dda2:	847b      	strh	r3, [r7, #34]	; 0x22
      TCP_PCB_REMOVE_ACTIVE(pcb);
 800dda4:	6879      	ldr	r1, [r7, #4]
 800dda6:	4828      	ldr	r0, [pc, #160]	; (800de48 <tcp_abandon+0x174>)
 800dda8:	f001 fa3e 	bl	800f228 <tcp_pcb_remove>
 800ddac:	4b27      	ldr	r3, [pc, #156]	; (800de4c <tcp_abandon+0x178>)
 800ddae:	2201      	movs	r2, #1
 800ddb0:	701a      	strb	r2, [r3, #0]
    }
    if (pcb->unacked != NULL) {
 800ddb2:	687b      	ldr	r3, [r7, #4]
 800ddb4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddb6:	2b00      	cmp	r3, #0
 800ddb8:	d004      	beq.n	800ddc4 <tcp_abandon+0xf0>
      tcp_segs_free(pcb->unacked);
 800ddba:	687b      	ldr	r3, [r7, #4]
 800ddbc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800ddbe:	4618      	mov	r0, r3
 800ddc0:	f000 ff12 	bl	800ebe8 <tcp_segs_free>
    }
    if (pcb->unsent != NULL) {
 800ddc4:	687b      	ldr	r3, [r7, #4]
 800ddc6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddc8:	2b00      	cmp	r3, #0
 800ddca:	d004      	beq.n	800ddd6 <tcp_abandon+0x102>
      tcp_segs_free(pcb->unsent);
 800ddcc:	687b      	ldr	r3, [r7, #4]
 800ddce:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800ddd0:	4618      	mov	r0, r3
 800ddd2:	f000 ff09 	bl	800ebe8 <tcp_segs_free>
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800ddd6:	687b      	ldr	r3, [r7, #4]
 800ddd8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800ddda:	2b00      	cmp	r3, #0
 800dddc:	d004      	beq.n	800dde8 <tcp_abandon+0x114>
      tcp_segs_free(pcb->ooseq);
 800ddde:	687b      	ldr	r3, [r7, #4]
 800dde0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800dde2:	4618      	mov	r0, r3
 800dde4:	f000 ff00 	bl	800ebe8 <tcp_segs_free>
    }
#endif /* TCP_QUEUE_OOSEQ */
    tcp_backlog_accepted(pcb);
    if (send_rst) {
 800dde8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800ddea:	2b00      	cmp	r3, #0
 800ddec:	d00e      	beq.n	800de0c <tcp_abandon+0x138>
      LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_abandon: sending RST\n"));
      tcp_rst(pcb, seqno, ackno, &pcb->local_ip, &pcb->remote_ip, local_port, pcb->remote_port);
 800ddee:	6879      	ldr	r1, [r7, #4]
 800ddf0:	687b      	ldr	r3, [r7, #4]
 800ddf2:	3304      	adds	r3, #4
 800ddf4:	687a      	ldr	r2, [r7, #4]
 800ddf6:	8b12      	ldrh	r2, [r2, #24]
 800ddf8:	9202      	str	r2, [sp, #8]
 800ddfa:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 800ddfc:	9201      	str	r2, [sp, #4]
 800ddfe:	9300      	str	r3, [sp, #0]
 800de00:	460b      	mov	r3, r1
 800de02:	697a      	ldr	r2, [r7, #20]
 800de04:	69b9      	ldr	r1, [r7, #24]
 800de06:	6878      	ldr	r0, [r7, #4]
 800de08:	f005 fbde 	bl	80135c8 <tcp_rst>
    }
    last_state = pcb->state;
 800de0c:	687b      	ldr	r3, [r7, #4]
 800de0e:	7d1b      	ldrb	r3, [r3, #20]
 800de10:	72fb      	strb	r3, [r7, #11]
    tcp_free(pcb);
 800de12:	6878      	ldr	r0, [r7, #4]
 800de14:	f7ff fcd8 	bl	800d7c8 <tcp_free>
    TCP_EVENT_ERR(last_state, errf, errf_arg, ERR_ABRT);
 800de18:	693b      	ldr	r3, [r7, #16]
 800de1a:	2b00      	cmp	r3, #0
 800de1c:	d004      	beq.n	800de28 <tcp_abandon+0x154>
 800de1e:	693b      	ldr	r3, [r7, #16]
 800de20:	f06f 010c 	mvn.w	r1, #12
 800de24:	68f8      	ldr	r0, [r7, #12]
 800de26:	4798      	blx	r3
  }
}
 800de28:	3728      	adds	r7, #40	; 0x28
 800de2a:	46bd      	mov	sp, r7
 800de2c:	bd80      	pop	{r7, pc}
 800de2e:	bf00      	nop
 800de30:	0801974c 	.word	0x0801974c
 800de34:	08019890 	.word	0x08019890
 800de38:	08019790 	.word	0x08019790
 800de3c:	080198ac 	.word	0x080198ac
 800de40:	2000f804 	.word	0x2000f804
 800de44:	2000f7f8 	.word	0x2000f7f8
 800de48:	2000f800 	.word	0x2000f800
 800de4c:	2000f808 	.word	0x2000f808

0800de50 <tcp_abort>:
 *
 * @param pcb the tcp pcb to abort
 */
void
tcp_abort(struct tcp_pcb *pcb)
{
 800de50:	b580      	push	{r7, lr}
 800de52:	b082      	sub	sp, #8
 800de54:	af00      	add	r7, sp, #0
 800de56:	6078      	str	r0, [r7, #4]
  tcp_abandon(pcb, 1);
 800de58:	2101      	movs	r1, #1
 800de5a:	6878      	ldr	r0, [r7, #4]
 800de5c:	f7ff ff3a 	bl	800dcd4 <tcp_abandon>
}
 800de60:	bf00      	nop
 800de62:	3708      	adds	r7, #8
 800de64:	46bd      	mov	sp, r7
 800de66:	bd80      	pop	{r7, pc}

0800de68 <tcp_bind>:
 *         ERR_VAL if bind failed because the PCB is not in a valid state
 *         ERR_OK if bound
 */
err_t
tcp_bind(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 800de68:	b580      	push	{r7, lr}
 800de6a:	b088      	sub	sp, #32
 800de6c:	af00      	add	r7, sp, #0
 800de6e:	60f8      	str	r0, [r7, #12]
 800de70:	60b9      	str	r1, [r7, #8]
 800de72:	4613      	mov	r3, r2
 800de74:	80fb      	strh	r3, [r7, #6]
  int i;
  int max_pcb_list = NUM_TCP_PCB_LISTS;
 800de76:	2304      	movs	r3, #4
 800de78:	617b      	str	r3, [r7, #20]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 800de7a:	68bb      	ldr	r3, [r7, #8]
 800de7c:	2b00      	cmp	r3, #0
 800de7e:	d101      	bne.n	800de84 <tcp_bind+0x1c>
    ipaddr = IP4_ADDR_ANY;
 800de80:	4b3e      	ldr	r3, [pc, #248]	; (800df7c <tcp_bind+0x114>)
 800de82:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("tcp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("tcp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 800de84:	68fb      	ldr	r3, [r7, #12]
 800de86:	2b00      	cmp	r3, #0
 800de88:	d109      	bne.n	800de9e <tcp_bind+0x36>
 800de8a:	4b3d      	ldr	r3, [pc, #244]	; (800df80 <tcp_bind+0x118>)
 800de8c:	f240 22a9 	movw	r2, #681	; 0x2a9
 800de90:	493c      	ldr	r1, [pc, #240]	; (800df84 <tcp_bind+0x11c>)
 800de92:	483d      	ldr	r0, [pc, #244]	; (800df88 <tcp_bind+0x120>)
 800de94:	f008 ffac 	bl	8016df0 <iprintf>
 800de98:	f06f 030f 	mvn.w	r3, #15
 800de9c:	e06a      	b.n	800df74 <tcp_bind+0x10c>

  LWIP_ERROR("tcp_bind: can only bind in state CLOSED", pcb->state == CLOSED, return ERR_VAL);
 800de9e:	68fb      	ldr	r3, [r7, #12]
 800dea0:	7d1b      	ldrb	r3, [r3, #20]
 800dea2:	2b00      	cmp	r3, #0
 800dea4:	d009      	beq.n	800deba <tcp_bind+0x52>
 800dea6:	4b36      	ldr	r3, [pc, #216]	; (800df80 <tcp_bind+0x118>)
 800dea8:	f240 22ab 	movw	r2, #683	; 0x2ab
 800deac:	4937      	ldr	r1, [pc, #220]	; (800df8c <tcp_bind+0x124>)
 800deae:	4836      	ldr	r0, [pc, #216]	; (800df88 <tcp_bind+0x120>)
 800deb0:	f008 ff9e 	bl	8016df0 <iprintf>
 800deb4:	f06f 0305 	mvn.w	r3, #5
 800deb8:	e05c      	b.n	800df74 <tcp_bind+0x10c>
    ip6_addr_select_zone(ip_2_ip6(&zoned_ipaddr), ip_2_ip6(&zoned_ipaddr));
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  if (port == 0) {
 800deba:	88fb      	ldrh	r3, [r7, #6]
 800debc:	2b00      	cmp	r3, #0
 800debe:	d109      	bne.n	800ded4 <tcp_bind+0x6c>
    port = tcp_new_port();
 800dec0:	f000 f914 	bl	800e0ec <tcp_new_port>
 800dec4:	4603      	mov	r3, r0
 800dec6:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 800dec8:	88fb      	ldrh	r3, [r7, #6]
 800deca:	2b00      	cmp	r3, #0
 800decc:	d135      	bne.n	800df3a <tcp_bind+0xd2>
      return ERR_BUF;
 800dece:	f06f 0301 	mvn.w	r3, #1
 800ded2:	e04f      	b.n	800df74 <tcp_bind+0x10c>
    }
  } else {
    /* Check if the address already is in use (on all lists) */
    for (i = 0; i < max_pcb_list; i++) {
 800ded4:	2300      	movs	r3, #0
 800ded6:	61fb      	str	r3, [r7, #28]
 800ded8:	e02b      	b.n	800df32 <tcp_bind+0xca>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800deda:	4a2d      	ldr	r2, [pc, #180]	; (800df90 <tcp_bind+0x128>)
 800dedc:	69fb      	ldr	r3, [r7, #28]
 800dede:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800dee2:	681b      	ldr	r3, [r3, #0]
 800dee4:	61bb      	str	r3, [r7, #24]
 800dee6:	e01e      	b.n	800df26 <tcp_bind+0xbe>
        if (cpcb->local_port == port) {
 800dee8:	69bb      	ldr	r3, [r7, #24]
 800deea:	8adb      	ldrh	r3, [r3, #22]
 800deec:	88fa      	ldrh	r2, [r7, #6]
 800deee:	429a      	cmp	r2, r3
 800def0:	d116      	bne.n	800df20 <tcp_bind+0xb8>
              !ip_get_option(cpcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
          {
            /* @todo: check accept_any_ip_version */
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
                (ip_addr_isany(&cpcb->local_ip) ||
 800def2:	69bb      	ldr	r3, [r7, #24]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800def4:	2b00      	cmp	r3, #0
 800def6:	d010      	beq.n	800df1a <tcp_bind+0xb2>
                (ip_addr_isany(&cpcb->local_ip) ||
 800def8:	69bb      	ldr	r3, [r7, #24]
 800defa:	681b      	ldr	r3, [r3, #0]
 800defc:	2b00      	cmp	r3, #0
 800defe:	d00c      	beq.n	800df1a <tcp_bind+0xb2>
 800df00:	68bb      	ldr	r3, [r7, #8]
 800df02:	2b00      	cmp	r3, #0
 800df04:	d009      	beq.n	800df1a <tcp_bind+0xb2>
                 ip_addr_isany(ipaddr) ||
 800df06:	68bb      	ldr	r3, [r7, #8]
 800df08:	681b      	ldr	r3, [r3, #0]
 800df0a:	2b00      	cmp	r3, #0
 800df0c:	d005      	beq.n	800df1a <tcp_bind+0xb2>
                 ip_addr_cmp(&cpcb->local_ip, ipaddr))) {
 800df0e:	69bb      	ldr	r3, [r7, #24]
 800df10:	681a      	ldr	r2, [r3, #0]
 800df12:	68bb      	ldr	r3, [r7, #8]
 800df14:	681b      	ldr	r3, [r3, #0]
            if ((IP_IS_V6(ipaddr) == IP_IS_V6_VAL(cpcb->local_ip)) &&
 800df16:	429a      	cmp	r2, r3
 800df18:	d102      	bne.n	800df20 <tcp_bind+0xb8>
              return ERR_USE;
 800df1a:	f06f 0307 	mvn.w	r3, #7
 800df1e:	e029      	b.n	800df74 <tcp_bind+0x10c>
      for (cpcb = *tcp_pcb_lists[i]; cpcb != NULL; cpcb = cpcb->next) {
 800df20:	69bb      	ldr	r3, [r7, #24]
 800df22:	68db      	ldr	r3, [r3, #12]
 800df24:	61bb      	str	r3, [r7, #24]
 800df26:	69bb      	ldr	r3, [r7, #24]
 800df28:	2b00      	cmp	r3, #0
 800df2a:	d1dd      	bne.n	800dee8 <tcp_bind+0x80>
    for (i = 0; i < max_pcb_list; i++) {
 800df2c:	69fb      	ldr	r3, [r7, #28]
 800df2e:	3301      	adds	r3, #1
 800df30:	61fb      	str	r3, [r7, #28]
 800df32:	69fa      	ldr	r2, [r7, #28]
 800df34:	697b      	ldr	r3, [r7, #20]
 800df36:	429a      	cmp	r2, r3
 800df38:	dbcf      	blt.n	800deda <tcp_bind+0x72>
        }
      }
    }
  }

  if (!ip_addr_isany(ipaddr)
 800df3a:	68bb      	ldr	r3, [r7, #8]
 800df3c:	2b00      	cmp	r3, #0
 800df3e:	d00c      	beq.n	800df5a <tcp_bind+0xf2>
 800df40:	68bb      	ldr	r3, [r7, #8]
 800df42:	681b      	ldr	r3, [r3, #0]
 800df44:	2b00      	cmp	r3, #0
 800df46:	d008      	beq.n	800df5a <tcp_bind+0xf2>
#if LWIP_IPV4 && LWIP_IPV6
      || (IP_GET_TYPE(ipaddr) != IP_GET_TYPE(&pcb->local_ip))
#endif /* LWIP_IPV4 && LWIP_IPV6 */
     ) {
    ip_addr_set(&pcb->local_ip, ipaddr);
 800df48:	68bb      	ldr	r3, [r7, #8]
 800df4a:	2b00      	cmp	r3, #0
 800df4c:	d002      	beq.n	800df54 <tcp_bind+0xec>
 800df4e:	68bb      	ldr	r3, [r7, #8]
 800df50:	681b      	ldr	r3, [r3, #0]
 800df52:	e000      	b.n	800df56 <tcp_bind+0xee>
 800df54:	2300      	movs	r3, #0
 800df56:	68fa      	ldr	r2, [r7, #12]
 800df58:	6013      	str	r3, [r2, #0]
  }
  pcb->local_port = port;
 800df5a:	68fb      	ldr	r3, [r7, #12]
 800df5c:	88fa      	ldrh	r2, [r7, #6]
 800df5e:	82da      	strh	r2, [r3, #22]
  TCP_REG(&tcp_bound_pcbs, pcb);
 800df60:	4b0c      	ldr	r3, [pc, #48]	; (800df94 <tcp_bind+0x12c>)
 800df62:	681a      	ldr	r2, [r3, #0]
 800df64:	68fb      	ldr	r3, [r7, #12]
 800df66:	60da      	str	r2, [r3, #12]
 800df68:	4a0a      	ldr	r2, [pc, #40]	; (800df94 <tcp_bind+0x12c>)
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	6013      	str	r3, [r2, #0]
 800df6e:	f005 fced 	bl	801394c <tcp_timer_needed>
  LWIP_DEBUGF(TCP_DEBUG, ("tcp_bind: bind to port %"U16_F"\n", port));
  return ERR_OK;
 800df72:	2300      	movs	r3, #0
}
 800df74:	4618      	mov	r0, r3
 800df76:	3720      	adds	r7, #32
 800df78:	46bd      	mov	sp, r7
 800df7a:	bd80      	pop	{r7, pc}
 800df7c:	0801b7e0 	.word	0x0801b7e0
 800df80:	0801974c 	.word	0x0801974c
 800df84:	080198e0 	.word	0x080198e0
 800df88:	08019790 	.word	0x08019790
 800df8c:	080198f8 	.word	0x080198f8
 800df90:	0801b7b8 	.word	0x0801b7b8
 800df94:	2000f7f8 	.word	0x2000f7f8

0800df98 <tcp_update_rcv_ann_wnd>:
 * Returns how much extra window would be advertised if we sent an
 * update now.
 */
u32_t
tcp_update_rcv_ann_wnd(struct tcp_pcb *pcb)
{
 800df98:	b580      	push	{r7, lr}
 800df9a:	b084      	sub	sp, #16
 800df9c:	af00      	add	r7, sp, #0
 800df9e:	6078      	str	r0, [r7, #4]
  u32_t new_right_edge;

  LWIP_ASSERT("tcp_update_rcv_ann_wnd: invalid pcb", pcb != NULL);
 800dfa0:	687b      	ldr	r3, [r7, #4]
 800dfa2:	2b00      	cmp	r3, #0
 800dfa4:	d106      	bne.n	800dfb4 <tcp_update_rcv_ann_wnd+0x1c>
 800dfa6:	4b25      	ldr	r3, [pc, #148]	; (800e03c <tcp_update_rcv_ann_wnd+0xa4>)
 800dfa8:	f240 32a6 	movw	r2, #934	; 0x3a6
 800dfac:	4924      	ldr	r1, [pc, #144]	; (800e040 <tcp_update_rcv_ann_wnd+0xa8>)
 800dfae:	4825      	ldr	r0, [pc, #148]	; (800e044 <tcp_update_rcv_ann_wnd+0xac>)
 800dfb0:	f008 ff1e 	bl	8016df0 <iprintf>
  new_right_edge = pcb->rcv_nxt + pcb->rcv_wnd;
 800dfb4:	687b      	ldr	r3, [r7, #4]
 800dfb6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800dfb8:	687a      	ldr	r2, [r7, #4]
 800dfba:	8d12      	ldrh	r2, [r2, #40]	; 0x28
 800dfbc:	4413      	add	r3, r2
 800dfbe:	60fb      	str	r3, [r7, #12]

  if (TCP_SEQ_GEQ(new_right_edge, pcb->rcv_ann_right_edge + LWIP_MIN((TCP_WND / 2), pcb->mss))) {
 800dfc0:	687b      	ldr	r3, [r7, #4]
 800dfc2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfc4:	687a      	ldr	r2, [r7, #4]
 800dfc6:	8e52      	ldrh	r2, [r2, #50]	; 0x32
 800dfc8:	f5b2 6f86 	cmp.w	r2, #1072	; 0x430
 800dfcc:	bf28      	it	cs
 800dfce:	f44f 6286 	movcs.w	r2, #1072	; 0x430
 800dfd2:	b292      	uxth	r2, r2
 800dfd4:	4413      	add	r3, r2
 800dfd6:	68fa      	ldr	r2, [r7, #12]
 800dfd8:	1ad3      	subs	r3, r2, r3
 800dfda:	2b00      	cmp	r3, #0
 800dfdc:	db08      	blt.n	800dff0 <tcp_update_rcv_ann_wnd+0x58>
    /* we can advertise more window */
    pcb->rcv_ann_wnd = pcb->rcv_wnd;
 800dfde:	687b      	ldr	r3, [r7, #4]
 800dfe0:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	855a      	strh	r2, [r3, #42]	; 0x2a
    return new_right_edge - pcb->rcv_ann_right_edge;
 800dfe6:	687b      	ldr	r3, [r7, #4]
 800dfe8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dfea:	68fa      	ldr	r2, [r7, #12]
 800dfec:	1ad3      	subs	r3, r2, r3
 800dfee:	e020      	b.n	800e032 <tcp_update_rcv_ann_wnd+0x9a>
  } else {
    if (TCP_SEQ_GT(pcb->rcv_nxt, pcb->rcv_ann_right_edge)) {
 800dff0:	687b      	ldr	r3, [r7, #4]
 800dff2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800dff4:	687b      	ldr	r3, [r7, #4]
 800dff6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800dff8:	1ad3      	subs	r3, r2, r3
 800dffa:	2b00      	cmp	r3, #0
 800dffc:	dd03      	ble.n	800e006 <tcp_update_rcv_ann_wnd+0x6e>
      /* Can happen due to other end sending out of advertised window,
       * but within actual available (but not yet advertised) window */
      pcb->rcv_ann_wnd = 0;
 800dffe:	687b      	ldr	r3, [r7, #4]
 800e000:	2200      	movs	r2, #0
 800e002:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e004:	e014      	b.n	800e030 <tcp_update_rcv_ann_wnd+0x98>
    } else {
      /* keep the right edge of window constant */
      u32_t new_rcv_ann_wnd = pcb->rcv_ann_right_edge - pcb->rcv_nxt;
 800e006:	687b      	ldr	r3, [r7, #4]
 800e008:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 800e00a:	687b      	ldr	r3, [r7, #4]
 800e00c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800e00e:	1ad3      	subs	r3, r2, r3
 800e010:	60bb      	str	r3, [r7, #8]
#if !LWIP_WND_SCALE
      LWIP_ASSERT("new_rcv_ann_wnd <= 0xffff", new_rcv_ann_wnd <= 0xffff);
 800e012:	68bb      	ldr	r3, [r7, #8]
 800e014:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 800e018:	d306      	bcc.n	800e028 <tcp_update_rcv_ann_wnd+0x90>
 800e01a:	4b08      	ldr	r3, [pc, #32]	; (800e03c <tcp_update_rcv_ann_wnd+0xa4>)
 800e01c:	f240 32b6 	movw	r2, #950	; 0x3b6
 800e020:	4909      	ldr	r1, [pc, #36]	; (800e048 <tcp_update_rcv_ann_wnd+0xb0>)
 800e022:	4808      	ldr	r0, [pc, #32]	; (800e044 <tcp_update_rcv_ann_wnd+0xac>)
 800e024:	f008 fee4 	bl	8016df0 <iprintf>
#endif
      pcb->rcv_ann_wnd = (tcpwnd_size_t)new_rcv_ann_wnd;
 800e028:	68bb      	ldr	r3, [r7, #8]
 800e02a:	b29a      	uxth	r2, r3
 800e02c:	687b      	ldr	r3, [r7, #4]
 800e02e:	855a      	strh	r2, [r3, #42]	; 0x2a
    }
    return 0;
 800e030:	2300      	movs	r3, #0
  }
}
 800e032:	4618      	mov	r0, r3
 800e034:	3710      	adds	r7, #16
 800e036:	46bd      	mov	sp, r7
 800e038:	bd80      	pop	{r7, pc}
 800e03a:	bf00      	nop
 800e03c:	0801974c 	.word	0x0801974c
 800e040:	080199a8 	.word	0x080199a8
 800e044:	08019790 	.word	0x08019790
 800e048:	080199cc 	.word	0x080199cc

0800e04c <tcp_recved>:
 * @param pcb the tcp_pcb for which data is read
 * @param len the amount of bytes that have been read by the application
 */
void
tcp_recved(struct tcp_pcb *pcb, u16_t len)
{
 800e04c:	b580      	push	{r7, lr}
 800e04e:	b084      	sub	sp, #16
 800e050:	af00      	add	r7, sp, #0
 800e052:	6078      	str	r0, [r7, #4]
 800e054:	460b      	mov	r3, r1
 800e056:	807b      	strh	r3, [r7, #2]
  u32_t wnd_inflation;
  tcpwnd_size_t rcv_wnd;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_recved: invalid pcb", pcb != NULL, return);
 800e058:	687b      	ldr	r3, [r7, #4]
 800e05a:	2b00      	cmp	r3, #0
 800e05c:	d107      	bne.n	800e06e <tcp_recved+0x22>
 800e05e:	4b1f      	ldr	r3, [pc, #124]	; (800e0dc <tcp_recved+0x90>)
 800e060:	f240 32cf 	movw	r2, #975	; 0x3cf
 800e064:	491e      	ldr	r1, [pc, #120]	; (800e0e0 <tcp_recved+0x94>)
 800e066:	481f      	ldr	r0, [pc, #124]	; (800e0e4 <tcp_recved+0x98>)
 800e068:	f008 fec2 	bl	8016df0 <iprintf>
 800e06c:	e032      	b.n	800e0d4 <tcp_recved+0x88>

  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_recved for listen-pcbs",
 800e06e:	687b      	ldr	r3, [r7, #4]
 800e070:	7d1b      	ldrb	r3, [r3, #20]
 800e072:	2b01      	cmp	r3, #1
 800e074:	d106      	bne.n	800e084 <tcp_recved+0x38>
 800e076:	4b19      	ldr	r3, [pc, #100]	; (800e0dc <tcp_recved+0x90>)
 800e078:	f240 32d2 	movw	r2, #978	; 0x3d2
 800e07c:	491a      	ldr	r1, [pc, #104]	; (800e0e8 <tcp_recved+0x9c>)
 800e07e:	4819      	ldr	r0, [pc, #100]	; (800e0e4 <tcp_recved+0x98>)
 800e080:	f008 feb6 	bl	8016df0 <iprintf>
              pcb->state != LISTEN);

  rcv_wnd = (tcpwnd_size_t)(pcb->rcv_wnd + len);
 800e084:	687b      	ldr	r3, [r7, #4]
 800e086:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 800e088:	887b      	ldrh	r3, [r7, #2]
 800e08a:	4413      	add	r3, r2
 800e08c:	81fb      	strh	r3, [r7, #14]
  if ((rcv_wnd > TCP_WND_MAX(pcb)) || (rcv_wnd < pcb->rcv_wnd)) {
 800e08e:	89fb      	ldrh	r3, [r7, #14]
 800e090:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800e094:	d804      	bhi.n	800e0a0 <tcp_recved+0x54>
 800e096:	687b      	ldr	r3, [r7, #4]
 800e098:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800e09a:	89fa      	ldrh	r2, [r7, #14]
 800e09c:	429a      	cmp	r2, r3
 800e09e:	d204      	bcs.n	800e0aa <tcp_recved+0x5e>
    /* window got too big or tcpwnd_size_t overflow */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: window got too big or tcpwnd_size_t overflow\n"));
    pcb->rcv_wnd = TCP_WND_MAX(pcb);
 800e0a0:	687b      	ldr	r3, [r7, #4]
 800e0a2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e0a6:	851a      	strh	r2, [r3, #40]	; 0x28
 800e0a8:	e002      	b.n	800e0b0 <tcp_recved+0x64>
  } else  {
    pcb->rcv_wnd = rcv_wnd;
 800e0aa:	687b      	ldr	r3, [r7, #4]
 800e0ac:	89fa      	ldrh	r2, [r7, #14]
 800e0ae:	851a      	strh	r2, [r3, #40]	; 0x28
  }

  wnd_inflation = tcp_update_rcv_ann_wnd(pcb);
 800e0b0:	6878      	ldr	r0, [r7, #4]
 800e0b2:	f7ff ff71 	bl	800df98 <tcp_update_rcv_ann_wnd>
 800e0b6:	60b8      	str	r0, [r7, #8]

  /* If the change in the right edge of window is significant (default
   * watermark is TCP_WND/4), then send an explicit update now.
   * Otherwise wait for a packet to be sent in the normal course of
   * events (or more window to be available later) */
  if (wnd_inflation >= TCP_WND_UPDATE_THRESHOLD) {
 800e0b8:	68bb      	ldr	r3, [r7, #8]
 800e0ba:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 800e0be:	d309      	bcc.n	800e0d4 <tcp_recved+0x88>
    tcp_ack_now(pcb);
 800e0c0:	687b      	ldr	r3, [r7, #4]
 800e0c2:	8b5b      	ldrh	r3, [r3, #26]
 800e0c4:	f043 0302 	orr.w	r3, r3, #2
 800e0c8:	b29a      	uxth	r2, r3
 800e0ca:	687b      	ldr	r3, [r7, #4]
 800e0cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800e0ce:	6878      	ldr	r0, [r7, #4]
 800e0d0:	f004 fcc6 	bl	8012a60 <tcp_output>
  }

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_recved: received %"U16_F" bytes, wnd %"TCPWNDSIZE_F" (%"TCPWNDSIZE_F").\n",
                          len, pcb->rcv_wnd, (u16_t)(TCP_WND_MAX(pcb) - pcb->rcv_wnd)));
}
 800e0d4:	3710      	adds	r7, #16
 800e0d6:	46bd      	mov	sp, r7
 800e0d8:	bd80      	pop	{r7, pc}
 800e0da:	bf00      	nop
 800e0dc:	0801974c 	.word	0x0801974c
 800e0e0:	080199e8 	.word	0x080199e8
 800e0e4:	08019790 	.word	0x08019790
 800e0e8:	08019a00 	.word	0x08019a00

0800e0ec <tcp_new_port>:
 *
 * @return a new (free) local TCP port number
 */
static u16_t
tcp_new_port(void)
{
 800e0ec:	b480      	push	{r7}
 800e0ee:	b083      	sub	sp, #12
 800e0f0:	af00      	add	r7, sp, #0
  u8_t i;
  u16_t n = 0;
 800e0f2:	2300      	movs	r3, #0
 800e0f4:	80bb      	strh	r3, [r7, #4]
  struct tcp_pcb *pcb;

again:
  tcp_port++;
 800e0f6:	4b1e      	ldr	r3, [pc, #120]	; (800e170 <tcp_new_port+0x84>)
 800e0f8:	881b      	ldrh	r3, [r3, #0]
 800e0fa:	3301      	adds	r3, #1
 800e0fc:	b29a      	uxth	r2, r3
 800e0fe:	4b1c      	ldr	r3, [pc, #112]	; (800e170 <tcp_new_port+0x84>)
 800e100:	801a      	strh	r2, [r3, #0]
  if (tcp_port == TCP_LOCAL_PORT_RANGE_END) {
 800e102:	4b1b      	ldr	r3, [pc, #108]	; (800e170 <tcp_new_port+0x84>)
 800e104:	881b      	ldrh	r3, [r3, #0]
 800e106:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800e10a:	4293      	cmp	r3, r2
 800e10c:	d103      	bne.n	800e116 <tcp_new_port+0x2a>
    tcp_port = TCP_LOCAL_PORT_RANGE_START;
 800e10e:	4b18      	ldr	r3, [pc, #96]	; (800e170 <tcp_new_port+0x84>)
 800e110:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 800e114:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCB lists. */
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e116:	2300      	movs	r3, #0
 800e118:	71fb      	strb	r3, [r7, #7]
 800e11a:	e01e      	b.n	800e15a <tcp_new_port+0x6e>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e11c:	79fb      	ldrb	r3, [r7, #7]
 800e11e:	4a15      	ldr	r2, [pc, #84]	; (800e174 <tcp_new_port+0x88>)
 800e120:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800e124:	681b      	ldr	r3, [r3, #0]
 800e126:	603b      	str	r3, [r7, #0]
 800e128:	e011      	b.n	800e14e <tcp_new_port+0x62>
      if (pcb->local_port == tcp_port) {
 800e12a:	683b      	ldr	r3, [r7, #0]
 800e12c:	8ada      	ldrh	r2, [r3, #22]
 800e12e:	4b10      	ldr	r3, [pc, #64]	; (800e170 <tcp_new_port+0x84>)
 800e130:	881b      	ldrh	r3, [r3, #0]
 800e132:	429a      	cmp	r2, r3
 800e134:	d108      	bne.n	800e148 <tcp_new_port+0x5c>
        n++;
 800e136:	88bb      	ldrh	r3, [r7, #4]
 800e138:	3301      	adds	r3, #1
 800e13a:	80bb      	strh	r3, [r7, #4]
        if (n > (TCP_LOCAL_PORT_RANGE_END - TCP_LOCAL_PORT_RANGE_START)) {
 800e13c:	88bb      	ldrh	r3, [r7, #4]
 800e13e:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 800e142:	d3d8      	bcc.n	800e0f6 <tcp_new_port+0xa>
          return 0;
 800e144:	2300      	movs	r3, #0
 800e146:	e00d      	b.n	800e164 <tcp_new_port+0x78>
    for (pcb = *tcp_pcb_lists[i]; pcb != NULL; pcb = pcb->next) {
 800e148:	683b      	ldr	r3, [r7, #0]
 800e14a:	68db      	ldr	r3, [r3, #12]
 800e14c:	603b      	str	r3, [r7, #0]
 800e14e:	683b      	ldr	r3, [r7, #0]
 800e150:	2b00      	cmp	r3, #0
 800e152:	d1ea      	bne.n	800e12a <tcp_new_port+0x3e>
  for (i = 0; i < NUM_TCP_PCB_LISTS; i++) {
 800e154:	79fb      	ldrb	r3, [r7, #7]
 800e156:	3301      	adds	r3, #1
 800e158:	71fb      	strb	r3, [r7, #7]
 800e15a:	79fb      	ldrb	r3, [r7, #7]
 800e15c:	2b03      	cmp	r3, #3
 800e15e:	d9dd      	bls.n	800e11c <tcp_new_port+0x30>
        }
        goto again;
      }
    }
  }
  return tcp_port;
 800e160:	4b03      	ldr	r3, [pc, #12]	; (800e170 <tcp_new_port+0x84>)
 800e162:	881b      	ldrh	r3, [r3, #0]
}
 800e164:	4618      	mov	r0, r3
 800e166:	370c      	adds	r7, #12
 800e168:	46bd      	mov	sp, r7
 800e16a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800e16e:	4770      	bx	lr
 800e170:	20000024 	.word	0x20000024
 800e174:	0801b7b8 	.word	0x0801b7b8

0800e178 <tcp_connect>:
 *         other err_t values if connect request couldn't be sent
 */
err_t
tcp_connect(struct tcp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port,
            tcp_connected_fn connected)
{
 800e178:	b580      	push	{r7, lr}
 800e17a:	b08a      	sub	sp, #40	; 0x28
 800e17c:	af00      	add	r7, sp, #0
 800e17e:	60f8      	str	r0, [r7, #12]
 800e180:	60b9      	str	r1, [r7, #8]
 800e182:	603b      	str	r3, [r7, #0]
 800e184:	4613      	mov	r3, r2
 800e186:	80fb      	strh	r3, [r7, #6]
  struct netif *netif = NULL;
 800e188:	2300      	movs	r3, #0
 800e18a:	627b      	str	r3, [r7, #36]	; 0x24
  u32_t iss;
  u16_t old_local_port;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 800e18c:	68fb      	ldr	r3, [r7, #12]
 800e18e:	2b00      	cmp	r3, #0
 800e190:	d109      	bne.n	800e1a6 <tcp_connect+0x2e>
 800e192:	4b7d      	ldr	r3, [pc, #500]	; (800e388 <tcp_connect+0x210>)
 800e194:	f240 4235 	movw	r2, #1077	; 0x435
 800e198:	497c      	ldr	r1, [pc, #496]	; (800e38c <tcp_connect+0x214>)
 800e19a:	487d      	ldr	r0, [pc, #500]	; (800e390 <tcp_connect+0x218>)
 800e19c:	f008 fe28 	bl	8016df0 <iprintf>
 800e1a0:	f06f 030f 	mvn.w	r3, #15
 800e1a4:	e0ec      	b.n	800e380 <tcp_connect+0x208>
  LWIP_ERROR("tcp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 800e1a6:	68bb      	ldr	r3, [r7, #8]
 800e1a8:	2b00      	cmp	r3, #0
 800e1aa:	d109      	bne.n	800e1c0 <tcp_connect+0x48>
 800e1ac:	4b76      	ldr	r3, [pc, #472]	; (800e388 <tcp_connect+0x210>)
 800e1ae:	f240 4236 	movw	r2, #1078	; 0x436
 800e1b2:	4978      	ldr	r1, [pc, #480]	; (800e394 <tcp_connect+0x21c>)
 800e1b4:	4876      	ldr	r0, [pc, #472]	; (800e390 <tcp_connect+0x218>)
 800e1b6:	f008 fe1b 	bl	8016df0 <iprintf>
 800e1ba:	f06f 030f 	mvn.w	r3, #15
 800e1be:	e0df      	b.n	800e380 <tcp_connect+0x208>

  LWIP_ERROR("tcp_connect: can only connect from state CLOSED", pcb->state == CLOSED, return ERR_ISCONN);
 800e1c0:	68fb      	ldr	r3, [r7, #12]
 800e1c2:	7d1b      	ldrb	r3, [r3, #20]
 800e1c4:	2b00      	cmp	r3, #0
 800e1c6:	d009      	beq.n	800e1dc <tcp_connect+0x64>
 800e1c8:	4b6f      	ldr	r3, [pc, #444]	; (800e388 <tcp_connect+0x210>)
 800e1ca:	f44f 6287 	mov.w	r2, #1080	; 0x438
 800e1ce:	4972      	ldr	r1, [pc, #456]	; (800e398 <tcp_connect+0x220>)
 800e1d0:	486f      	ldr	r0, [pc, #444]	; (800e390 <tcp_connect+0x218>)
 800e1d2:	f008 fe0d 	bl	8016df0 <iprintf>
 800e1d6:	f06f 0309 	mvn.w	r3, #9
 800e1da:	e0d1      	b.n	800e380 <tcp_connect+0x208>

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_connect to port %"U16_F"\n", port));
  ip_addr_set(&pcb->remote_ip, ipaddr);
 800e1dc:	68bb      	ldr	r3, [r7, #8]
 800e1de:	2b00      	cmp	r3, #0
 800e1e0:	d002      	beq.n	800e1e8 <tcp_connect+0x70>
 800e1e2:	68bb      	ldr	r3, [r7, #8]
 800e1e4:	681b      	ldr	r3, [r3, #0]
 800e1e6:	e000      	b.n	800e1ea <tcp_connect+0x72>
 800e1e8:	2300      	movs	r3, #0
 800e1ea:	68fa      	ldr	r2, [r7, #12]
 800e1ec:	6053      	str	r3, [r2, #4]
  pcb->remote_port = port;
 800e1ee:	68fb      	ldr	r3, [r7, #12]
 800e1f0:	88fa      	ldrh	r2, [r7, #6]
 800e1f2:	831a      	strh	r2, [r3, #24]

  if (pcb->netif_idx != NETIF_NO_INDEX) {
 800e1f4:	68fb      	ldr	r3, [r7, #12]
 800e1f6:	7a1b      	ldrb	r3, [r3, #8]
 800e1f8:	2b00      	cmp	r3, #0
 800e1fa:	d006      	beq.n	800e20a <tcp_connect+0x92>
    netif = netif_get_by_index(pcb->netif_idx);
 800e1fc:	68fb      	ldr	r3, [r7, #12]
 800e1fe:	7a1b      	ldrb	r3, [r3, #8]
 800e200:	4618      	mov	r0, r3
 800e202:	f7fe fca7 	bl	800cb54 <netif_get_by_index>
 800e206:	6278      	str	r0, [r7, #36]	; 0x24
 800e208:	e005      	b.n	800e216 <tcp_connect+0x9e>
  } else {
    /* check if we have a route to the remote host */
    netif = ip_route(&pcb->local_ip, &pcb->remote_ip);
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	3304      	adds	r3, #4
 800e20e:	4618      	mov	r0, r3
 800e210:	f007 f95e 	bl	80154d0 <ip4_route>
 800e214:	6278      	str	r0, [r7, #36]	; 0x24
  }
  if (netif == NULL) {
 800e216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e218:	2b00      	cmp	r3, #0
 800e21a:	d102      	bne.n	800e222 <tcp_connect+0xaa>
    /* Don't even try to send a SYN packet if we have no route since that will fail. */
    return ERR_RTE;
 800e21c:	f06f 0303 	mvn.w	r3, #3
 800e220:	e0ae      	b.n	800e380 <tcp_connect+0x208>
  }

  /* check if local IP has been assigned to pcb, if not, get one */
  if (ip_addr_isany(&pcb->local_ip)) {
 800e222:	68fb      	ldr	r3, [r7, #12]
 800e224:	2b00      	cmp	r3, #0
 800e226:	d003      	beq.n	800e230 <tcp_connect+0xb8>
 800e228:	68fb      	ldr	r3, [r7, #12]
 800e22a:	681b      	ldr	r3, [r3, #0]
 800e22c:	2b00      	cmp	r3, #0
 800e22e:	d111      	bne.n	800e254 <tcp_connect+0xdc>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, ipaddr);
 800e230:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e232:	2b00      	cmp	r3, #0
 800e234:	d002      	beq.n	800e23c <tcp_connect+0xc4>
 800e236:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800e238:	3304      	adds	r3, #4
 800e23a:	e000      	b.n	800e23e <tcp_connect+0xc6>
 800e23c:	2300      	movs	r3, #0
 800e23e:	61fb      	str	r3, [r7, #28]
    if (local_ip == NULL) {
 800e240:	69fb      	ldr	r3, [r7, #28]
 800e242:	2b00      	cmp	r3, #0
 800e244:	d102      	bne.n	800e24c <tcp_connect+0xd4>
      return ERR_RTE;
 800e246:	f06f 0303 	mvn.w	r3, #3
 800e24a:	e099      	b.n	800e380 <tcp_connect+0x208>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 800e24c:	69fb      	ldr	r3, [r7, #28]
 800e24e:	681a      	ldr	r2, [r3, #0]
 800e250:	68fb      	ldr	r3, [r7, #12]
 800e252:	601a      	str	r2, [r3, #0]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST)) {
    ip6_addr_assign_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNICAST, netif);
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  old_local_port = pcb->local_port;
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	8adb      	ldrh	r3, [r3, #22]
 800e258:	837b      	strh	r3, [r7, #26]
  if (pcb->local_port == 0) {
 800e25a:	68fb      	ldr	r3, [r7, #12]
 800e25c:	8adb      	ldrh	r3, [r3, #22]
 800e25e:	2b00      	cmp	r3, #0
 800e260:	d10c      	bne.n	800e27c <tcp_connect+0x104>
    pcb->local_port = tcp_new_port();
 800e262:	f7ff ff43 	bl	800e0ec <tcp_new_port>
 800e266:	4603      	mov	r3, r0
 800e268:	461a      	mov	r2, r3
 800e26a:	68fb      	ldr	r3, [r7, #12]
 800e26c:	82da      	strh	r2, [r3, #22]
    if (pcb->local_port == 0) {
 800e26e:	68fb      	ldr	r3, [r7, #12]
 800e270:	8adb      	ldrh	r3, [r3, #22]
 800e272:	2b00      	cmp	r3, #0
 800e274:	d102      	bne.n	800e27c <tcp_connect+0x104>
      return ERR_BUF;
 800e276:	f06f 0301 	mvn.w	r3, #1
 800e27a:	e081      	b.n	800e380 <tcp_connect+0x208>
      }
    }
#endif /* SO_REUSE */
  }

  iss = tcp_next_iss(pcb);
 800e27c:	68f8      	ldr	r0, [r7, #12]
 800e27e:	f001 f867 	bl	800f350 <tcp_next_iss>
 800e282:	6178      	str	r0, [r7, #20]
  pcb->rcv_nxt = 0;
 800e284:	68fb      	ldr	r3, [r7, #12]
 800e286:	2200      	movs	r2, #0
 800e288:	625a      	str	r2, [r3, #36]	; 0x24
  pcb->snd_nxt = iss;
 800e28a:	68fb      	ldr	r3, [r7, #12]
 800e28c:	697a      	ldr	r2, [r7, #20]
 800e28e:	651a      	str	r2, [r3, #80]	; 0x50
  pcb->lastack = iss - 1;
 800e290:	697b      	ldr	r3, [r7, #20]
 800e292:	1e5a      	subs	r2, r3, #1
 800e294:	68fb      	ldr	r3, [r7, #12]
 800e296:	645a      	str	r2, [r3, #68]	; 0x44
  pcb->snd_wl2 = iss - 1;
 800e298:	697b      	ldr	r3, [r7, #20]
 800e29a:	1e5a      	subs	r2, r3, #1
 800e29c:	68fb      	ldr	r3, [r7, #12]
 800e29e:	659a      	str	r2, [r3, #88]	; 0x58
  pcb->snd_lbb = iss - 1;
 800e2a0:	697b      	ldr	r3, [r7, #20]
 800e2a2:	1e5a      	subs	r2, r3, #1
 800e2a4:	68fb      	ldr	r3, [r7, #12]
 800e2a6:	65da      	str	r2, [r3, #92]	; 0x5c
  /* Start with a window that does not need scaling. When window scaling is
     enabled and used, the window is enlarged when both sides agree on scaling. */
  pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800e2a8:	68fb      	ldr	r3, [r7, #12]
 800e2aa:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2ae:	855a      	strh	r2, [r3, #42]	; 0x2a
 800e2b0:	68fb      	ldr	r3, [r7, #12]
 800e2b2:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800e2b4:	68fb      	ldr	r3, [r7, #12]
 800e2b6:	851a      	strh	r2, [r3, #40]	; 0x28
  pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800e2bc:	68fb      	ldr	r3, [r7, #12]
 800e2be:	62da      	str	r2, [r3, #44]	; 0x2c
  pcb->snd_wnd = TCP_WND;
 800e2c0:	68fb      	ldr	r3, [r7, #12]
 800e2c2:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800e2c6:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
  /* As initial send MSS, we use TCP_MSS but limit it to 536.
     The send MSS is updated when an MSS option is received. */
  pcb->mss = INITIAL_MSS;
 800e2ca:	68fb      	ldr	r3, [r7, #12]
 800e2cc:	f44f 7206 	mov.w	r2, #536	; 0x218
 800e2d0:	865a      	strh	r2, [r3, #50]	; 0x32
#if TCP_CALCULATE_EFF_SEND_MSS
  pcb->mss = tcp_eff_send_mss_netif(pcb->mss, netif, &pcb->remote_ip);
 800e2d2:	68fb      	ldr	r3, [r7, #12]
 800e2d4:	8e58      	ldrh	r0, [r3, #50]	; 0x32
 800e2d6:	68fb      	ldr	r3, [r7, #12]
 800e2d8:	3304      	adds	r3, #4
 800e2da:	461a      	mov	r2, r3
 800e2dc:	6a79      	ldr	r1, [r7, #36]	; 0x24
 800e2de:	f001 f85d 	bl	800f39c <tcp_eff_send_mss_netif>
 800e2e2:	4603      	mov	r3, r0
 800e2e4:	461a      	mov	r2, r3
 800e2e6:	68fb      	ldr	r3, [r7, #12]
 800e2e8:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
  pcb->cwnd = 1;
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	2201      	movs	r2, #1
 800e2ee:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
#if LWIP_CALLBACK_API
  pcb->connected = connected;
 800e2f2:	68fb      	ldr	r3, [r7, #12]
 800e2f4:	683a      	ldr	r2, [r7, #0]
 800e2f6:	f8c3 2088 	str.w	r2, [r3, #136]	; 0x88
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(connected);
#endif /* LWIP_CALLBACK_API */

  /* Send a SYN together with the MSS option. */
  ret = tcp_enqueue_flags(pcb, TCP_SYN);
 800e2fa:	2102      	movs	r1, #2
 800e2fc:	68f8      	ldr	r0, [r7, #12]
 800e2fe:	f004 fac1 	bl	8012884 <tcp_enqueue_flags>
 800e302:	4603      	mov	r3, r0
 800e304:	74fb      	strb	r3, [r7, #19]
  if (ret == ERR_OK) {
 800e306:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800e30a:	2b00      	cmp	r3, #0
 800e30c:	d136      	bne.n	800e37c <tcp_connect+0x204>
    /* SYN segment was enqueued, changed the pcbs state now */
    pcb->state = SYN_SENT;
 800e30e:	68fb      	ldr	r3, [r7, #12]
 800e310:	2202      	movs	r2, #2
 800e312:	751a      	strb	r2, [r3, #20]
    if (old_local_port != 0) {
 800e314:	8b7b      	ldrh	r3, [r7, #26]
 800e316:	2b00      	cmp	r3, #0
 800e318:	d021      	beq.n	800e35e <tcp_connect+0x1e6>
      TCP_RMV(&tcp_bound_pcbs, pcb);
 800e31a:	4b20      	ldr	r3, [pc, #128]	; (800e39c <tcp_connect+0x224>)
 800e31c:	681b      	ldr	r3, [r3, #0]
 800e31e:	68fa      	ldr	r2, [r7, #12]
 800e320:	429a      	cmp	r2, r3
 800e322:	d105      	bne.n	800e330 <tcp_connect+0x1b8>
 800e324:	4b1d      	ldr	r3, [pc, #116]	; (800e39c <tcp_connect+0x224>)
 800e326:	681b      	ldr	r3, [r3, #0]
 800e328:	68db      	ldr	r3, [r3, #12]
 800e32a:	4a1c      	ldr	r2, [pc, #112]	; (800e39c <tcp_connect+0x224>)
 800e32c:	6013      	str	r3, [r2, #0]
 800e32e:	e013      	b.n	800e358 <tcp_connect+0x1e0>
 800e330:	4b1a      	ldr	r3, [pc, #104]	; (800e39c <tcp_connect+0x224>)
 800e332:	681b      	ldr	r3, [r3, #0]
 800e334:	623b      	str	r3, [r7, #32]
 800e336:	e00c      	b.n	800e352 <tcp_connect+0x1da>
 800e338:	6a3b      	ldr	r3, [r7, #32]
 800e33a:	68db      	ldr	r3, [r3, #12]
 800e33c:	68fa      	ldr	r2, [r7, #12]
 800e33e:	429a      	cmp	r2, r3
 800e340:	d104      	bne.n	800e34c <tcp_connect+0x1d4>
 800e342:	68fb      	ldr	r3, [r7, #12]
 800e344:	68da      	ldr	r2, [r3, #12]
 800e346:	6a3b      	ldr	r3, [r7, #32]
 800e348:	60da      	str	r2, [r3, #12]
 800e34a:	e005      	b.n	800e358 <tcp_connect+0x1e0>
 800e34c:	6a3b      	ldr	r3, [r7, #32]
 800e34e:	68db      	ldr	r3, [r3, #12]
 800e350:	623b      	str	r3, [r7, #32]
 800e352:	6a3b      	ldr	r3, [r7, #32]
 800e354:	2b00      	cmp	r3, #0
 800e356:	d1ef      	bne.n	800e338 <tcp_connect+0x1c0>
 800e358:	68fb      	ldr	r3, [r7, #12]
 800e35a:	2200      	movs	r2, #0
 800e35c:	60da      	str	r2, [r3, #12]
    }
    TCP_REG_ACTIVE(pcb);
 800e35e:	4b10      	ldr	r3, [pc, #64]	; (800e3a0 <tcp_connect+0x228>)
 800e360:	681a      	ldr	r2, [r3, #0]
 800e362:	68fb      	ldr	r3, [r7, #12]
 800e364:	60da      	str	r2, [r3, #12]
 800e366:	4a0e      	ldr	r2, [pc, #56]	; (800e3a0 <tcp_connect+0x228>)
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	6013      	str	r3, [r2, #0]
 800e36c:	f005 faee 	bl	801394c <tcp_timer_needed>
 800e370:	4b0c      	ldr	r3, [pc, #48]	; (800e3a4 <tcp_connect+0x22c>)
 800e372:	2201      	movs	r2, #1
 800e374:	701a      	strb	r2, [r3, #0]
    MIB2_STATS_INC(mib2.tcpactiveopens);

    tcp_output(pcb);
 800e376:	68f8      	ldr	r0, [r7, #12]
 800e378:	f004 fb72 	bl	8012a60 <tcp_output>
  }
  return ret;
 800e37c:	f997 3013 	ldrsb.w	r3, [r7, #19]
}
 800e380:	4618      	mov	r0, r3
 800e382:	3728      	adds	r7, #40	; 0x28
 800e384:	46bd      	mov	sp, r7
 800e386:	bd80      	pop	{r7, pc}
 800e388:	0801974c 	.word	0x0801974c
 800e38c:	08019a28 	.word	0x08019a28
 800e390:	08019790 	.word	0x08019790
 800e394:	08019a44 	.word	0x08019a44
 800e398:	08019a60 	.word	0x08019a60
 800e39c:	2000f7f8 	.word	0x2000f7f8
 800e3a0:	2000f800 	.word	0x2000f800
 800e3a4:	2000f808 	.word	0x2000f808

0800e3a8 <tcp_slowtmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_slowtmr(void)
{
 800e3a8:	b5b0      	push	{r4, r5, r7, lr}
 800e3aa:	b090      	sub	sp, #64	; 0x40
 800e3ac:	af04      	add	r7, sp, #16
  tcpwnd_size_t eff_wnd;
  u8_t pcb_remove;      /* flag if a PCB should be removed */
  u8_t pcb_reset;       /* flag if a RST should be sent when removing */
  err_t err;

  err = ERR_OK;
 800e3ae:	2300      	movs	r3, #0
 800e3b0:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25

  ++tcp_ticks;
 800e3b4:	4b94      	ldr	r3, [pc, #592]	; (800e608 <tcp_slowtmr+0x260>)
 800e3b6:	681b      	ldr	r3, [r3, #0]
 800e3b8:	3301      	adds	r3, #1
 800e3ba:	4a93      	ldr	r2, [pc, #588]	; (800e608 <tcp_slowtmr+0x260>)
 800e3bc:	6013      	str	r3, [r2, #0]
  ++tcp_timer_ctr;
 800e3be:	4b93      	ldr	r3, [pc, #588]	; (800e60c <tcp_slowtmr+0x264>)
 800e3c0:	781b      	ldrb	r3, [r3, #0]
 800e3c2:	3301      	adds	r3, #1
 800e3c4:	b2da      	uxtb	r2, r3
 800e3c6:	4b91      	ldr	r3, [pc, #580]	; (800e60c <tcp_slowtmr+0x264>)
 800e3c8:	701a      	strb	r2, [r3, #0]

tcp_slowtmr_start:
  /* Steps through all of the active PCBs. */
  prev = NULL;
 800e3ca:	2300      	movs	r3, #0
 800e3cc:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_active_pcbs;
 800e3ce:	4b90      	ldr	r3, [pc, #576]	; (800e610 <tcp_slowtmr+0x268>)
 800e3d0:	681b      	ldr	r3, [r3, #0]
 800e3d2:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (pcb == NULL) {
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: no active pcbs\n"));
  }
  while (pcb != NULL) {
 800e3d4:	e29f      	b.n	800e916 <tcp_slowtmr+0x56e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: processing active pcb\n"));
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != CLOSED\n", pcb->state != CLOSED);
 800e3d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3d8:	7d1b      	ldrb	r3, [r3, #20]
 800e3da:	2b00      	cmp	r3, #0
 800e3dc:	d106      	bne.n	800e3ec <tcp_slowtmr+0x44>
 800e3de:	4b8d      	ldr	r3, [pc, #564]	; (800e614 <tcp_slowtmr+0x26c>)
 800e3e0:	f240 42be 	movw	r2, #1214	; 0x4be
 800e3e4:	498c      	ldr	r1, [pc, #560]	; (800e618 <tcp_slowtmr+0x270>)
 800e3e6:	488d      	ldr	r0, [pc, #564]	; (800e61c <tcp_slowtmr+0x274>)
 800e3e8:	f008 fd02 	bl	8016df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != LISTEN\n", pcb->state != LISTEN);
 800e3ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e3ee:	7d1b      	ldrb	r3, [r3, #20]
 800e3f0:	2b01      	cmp	r3, #1
 800e3f2:	d106      	bne.n	800e402 <tcp_slowtmr+0x5a>
 800e3f4:	4b87      	ldr	r3, [pc, #540]	; (800e614 <tcp_slowtmr+0x26c>)
 800e3f6:	f240 42bf 	movw	r2, #1215	; 0x4bf
 800e3fa:	4989      	ldr	r1, [pc, #548]	; (800e620 <tcp_slowtmr+0x278>)
 800e3fc:	4887      	ldr	r0, [pc, #540]	; (800e61c <tcp_slowtmr+0x274>)
 800e3fe:	f008 fcf7 	bl	8016df0 <iprintf>
    LWIP_ASSERT("tcp_slowtmr: active pcb->state != TIME-WAIT\n", pcb->state != TIME_WAIT);
 800e402:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e404:	7d1b      	ldrb	r3, [r3, #20]
 800e406:	2b0a      	cmp	r3, #10
 800e408:	d106      	bne.n	800e418 <tcp_slowtmr+0x70>
 800e40a:	4b82      	ldr	r3, [pc, #520]	; (800e614 <tcp_slowtmr+0x26c>)
 800e40c:	f44f 6298 	mov.w	r2, #1216	; 0x4c0
 800e410:	4984      	ldr	r1, [pc, #528]	; (800e624 <tcp_slowtmr+0x27c>)
 800e412:	4882      	ldr	r0, [pc, #520]	; (800e61c <tcp_slowtmr+0x274>)
 800e414:	f008 fcec 	bl	8016df0 <iprintf>
    if (pcb->last_timer == tcp_timer_ctr) {
 800e418:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e41a:	7f9a      	ldrb	r2, [r3, #30]
 800e41c:	4b7b      	ldr	r3, [pc, #492]	; (800e60c <tcp_slowtmr+0x264>)
 800e41e:	781b      	ldrb	r3, [r3, #0]
 800e420:	429a      	cmp	r2, r3
 800e422:	d105      	bne.n	800e430 <tcp_slowtmr+0x88>
      /* skip this pcb, we have already processed it */
      prev = pcb;
 800e424:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e426:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e428:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e42a:	68db      	ldr	r3, [r3, #12]
 800e42c:	62fb      	str	r3, [r7, #44]	; 0x2c
      continue;
 800e42e:	e272      	b.n	800e916 <tcp_slowtmr+0x56e>
    }
    pcb->last_timer = tcp_timer_ctr;
 800e430:	4b76      	ldr	r3, [pc, #472]	; (800e60c <tcp_slowtmr+0x264>)
 800e432:	781a      	ldrb	r2, [r3, #0]
 800e434:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e436:	779a      	strb	r2, [r3, #30]

    pcb_remove = 0;
 800e438:	2300      	movs	r3, #0
 800e43a:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    pcb_reset = 0;
 800e43e:	2300      	movs	r3, #0
 800e440:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26

    if (pcb->state == SYN_SENT && pcb->nrtx >= TCP_SYNMAXRTX) {
 800e444:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e446:	7d1b      	ldrb	r3, [r3, #20]
 800e448:	2b02      	cmp	r3, #2
 800e44a:	d10a      	bne.n	800e462 <tcp_slowtmr+0xba>
 800e44c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e44e:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e452:	2b05      	cmp	r3, #5
 800e454:	d905      	bls.n	800e462 <tcp_slowtmr+0xba>
      ++pcb_remove;
 800e456:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e45a:	3301      	adds	r3, #1
 800e45c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e460:	e11e      	b.n	800e6a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max SYN retries reached\n"));
    } else if (pcb->nrtx >= TCP_MAXRTX) {
 800e462:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e464:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e468:	2b0b      	cmp	r3, #11
 800e46a:	d905      	bls.n	800e478 <tcp_slowtmr+0xd0>
      ++pcb_remove;
 800e46c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e470:	3301      	adds	r3, #1
 800e472:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e476:	e113      	b.n	800e6a0 <tcp_slowtmr+0x2f8>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: max DATA retries reached\n"));
    } else {
      if (pcb->persist_backoff > 0) {
 800e478:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e47a:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e47e:	2b00      	cmp	r3, #0
 800e480:	d075      	beq.n	800e56e <tcp_slowtmr+0x1c6>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with in-flight data", pcb->unacked == NULL);
 800e482:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e484:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e486:	2b00      	cmp	r3, #0
 800e488:	d006      	beq.n	800e498 <tcp_slowtmr+0xf0>
 800e48a:	4b62      	ldr	r3, [pc, #392]	; (800e614 <tcp_slowtmr+0x26c>)
 800e48c:	f240 42d4 	movw	r2, #1236	; 0x4d4
 800e490:	4965      	ldr	r1, [pc, #404]	; (800e628 <tcp_slowtmr+0x280>)
 800e492:	4862      	ldr	r0, [pc, #392]	; (800e61c <tcp_slowtmr+0x274>)
 800e494:	f008 fcac 	bl	8016df0 <iprintf>
        LWIP_ASSERT("tcp_slowtimr: persist ticking with empty send buffer", pcb->unsent != NULL);
 800e498:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e49a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e49c:	2b00      	cmp	r3, #0
 800e49e:	d106      	bne.n	800e4ae <tcp_slowtmr+0x106>
 800e4a0:	4b5c      	ldr	r3, [pc, #368]	; (800e614 <tcp_slowtmr+0x26c>)
 800e4a2:	f240 42d5 	movw	r2, #1237	; 0x4d5
 800e4a6:	4961      	ldr	r1, [pc, #388]	; (800e62c <tcp_slowtmr+0x284>)
 800e4a8:	485c      	ldr	r0, [pc, #368]	; (800e61c <tcp_slowtmr+0x274>)
 800e4aa:	f008 fca1 	bl	8016df0 <iprintf>
        if (pcb->persist_probe >= TCP_MAXRTX) {
 800e4ae:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4b0:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 800e4b4:	2b0b      	cmp	r3, #11
 800e4b6:	d905      	bls.n	800e4c4 <tcp_slowtmr+0x11c>
          ++pcb_remove; /* max probes reached */
 800e4b8:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e4bc:	3301      	adds	r3, #1
 800e4be:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 800e4c2:	e0ed      	b.n	800e6a0 <tcp_slowtmr+0x2f8>
        } else {
          u8_t backoff_cnt = tcp_persist_backoff[pcb->persist_backoff - 1];
 800e4c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4c6:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e4ca:	3b01      	subs	r3, #1
 800e4cc:	4a58      	ldr	r2, [pc, #352]	; (800e630 <tcp_slowtmr+0x288>)
 800e4ce:	5cd3      	ldrb	r3, [r2, r3]
 800e4d0:	747b      	strb	r3, [r7, #17]
          if (pcb->persist_cnt < backoff_cnt) {
 800e4d2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4d4:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4d8:	7c7a      	ldrb	r2, [r7, #17]
 800e4da:	429a      	cmp	r2, r3
 800e4dc:	d907      	bls.n	800e4ee <tcp_slowtmr+0x146>
            pcb->persist_cnt++;
 800e4de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4e0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4e4:	3301      	adds	r3, #1
 800e4e6:	b2da      	uxtb	r2, r3
 800e4e8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4ea:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
          }
          if (pcb->persist_cnt >= backoff_cnt) {
 800e4ee:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e4f0:	f893 3098 	ldrb.w	r3, [r3, #152]	; 0x98
 800e4f4:	7c7a      	ldrb	r2, [r7, #17]
 800e4f6:	429a      	cmp	r2, r3
 800e4f8:	f200 80d2 	bhi.w	800e6a0 <tcp_slowtmr+0x2f8>
            int next_slot = 1; /* increment timer to next slot */
 800e4fc:	2301      	movs	r3, #1
 800e4fe:	623b      	str	r3, [r7, #32]
            /* If snd_wnd is zero, send 1 byte probes */
            if (pcb->snd_wnd == 0) {
 800e500:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e502:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e506:	2b00      	cmp	r3, #0
 800e508:	d108      	bne.n	800e51c <tcp_slowtmr+0x174>
              if (tcp_zero_window_probe(pcb) != ERR_OK) {
 800e50a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e50c:	f005 f950 	bl	80137b0 <tcp_zero_window_probe>
 800e510:	4603      	mov	r3, r0
 800e512:	2b00      	cmp	r3, #0
 800e514:	d014      	beq.n	800e540 <tcp_slowtmr+0x198>
                next_slot = 0; /* try probe again with current slot */
 800e516:	2300      	movs	r3, #0
 800e518:	623b      	str	r3, [r7, #32]
 800e51a:	e011      	b.n	800e540 <tcp_slowtmr+0x198>
              }
              /* snd_wnd not fully closed, split unsent head and fill window */
            } else {
              if (tcp_split_unsent_seg(pcb, (u16_t)pcb->snd_wnd) == ERR_OK) {
 800e51c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e51e:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 800e522:	4619      	mov	r1, r3
 800e524:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e526:	f004 f815 	bl	8012554 <tcp_split_unsent_seg>
 800e52a:	4603      	mov	r3, r0
 800e52c:	2b00      	cmp	r3, #0
 800e52e:	d107      	bne.n	800e540 <tcp_slowtmr+0x198>
                if (tcp_output(pcb) == ERR_OK) {
 800e530:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e532:	f004 fa95 	bl	8012a60 <tcp_output>
 800e536:	4603      	mov	r3, r0
 800e538:	2b00      	cmp	r3, #0
 800e53a:	d101      	bne.n	800e540 <tcp_slowtmr+0x198>
                  /* sending will cancel persist timer, else retry with current slot */
                  next_slot = 0;
 800e53c:	2300      	movs	r3, #0
 800e53e:	623b      	str	r3, [r7, #32]
                }
              }
            }
            if (next_slot) {
 800e540:	6a3b      	ldr	r3, [r7, #32]
 800e542:	2b00      	cmp	r3, #0
 800e544:	f000 80ac 	beq.w	800e6a0 <tcp_slowtmr+0x2f8>
              pcb->persist_cnt = 0;
 800e548:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e54a:	2200      	movs	r2, #0
 800e54c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
              if (pcb->persist_backoff < sizeof(tcp_persist_backoff)) {
 800e550:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e552:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e556:	2b06      	cmp	r3, #6
 800e558:	f200 80a2 	bhi.w	800e6a0 <tcp_slowtmr+0x2f8>
                pcb->persist_backoff++;
 800e55c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e55e:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 800e562:	3301      	adds	r3, #1
 800e564:	b2da      	uxtb	r2, r3
 800e566:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e568:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
 800e56c:	e098      	b.n	800e6a0 <tcp_slowtmr+0x2f8>
            }
          }
        }
      } else {
        /* Increase the retransmission timer if it is running */
        if ((pcb->rtime >= 0) && (pcb->rtime < 0x7FFF)) {
 800e56e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e570:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e574:	2b00      	cmp	r3, #0
 800e576:	db0f      	blt.n	800e598 <tcp_slowtmr+0x1f0>
 800e578:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e57a:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e57e:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e582:	4293      	cmp	r3, r2
 800e584:	d008      	beq.n	800e598 <tcp_slowtmr+0x1f0>
          ++pcb->rtime;
 800e586:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e588:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 800e58c:	b29b      	uxth	r3, r3
 800e58e:	3301      	adds	r3, #1
 800e590:	b29b      	uxth	r3, r3
 800e592:	b21a      	sxth	r2, r3
 800e594:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e596:	861a      	strh	r2, [r3, #48]	; 0x30
        }

        if (pcb->rtime >= pcb->rto) {
 800e598:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e59a:	f9b3 2030 	ldrsh.w	r2, [r3, #48]	; 0x30
 800e59e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5a0:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e5a4:	429a      	cmp	r2, r3
 800e5a6:	db7b      	blt.n	800e6a0 <tcp_slowtmr+0x2f8>
                                      " pcb->rto %"S16_F"\n",
                                      pcb->rtime, pcb->rto));
          /* If prepare phase fails but we have unsent data but no unacked data,
             still execute the backoff calculations below, as this means we somehow
             failed to send segment. */
          if ((tcp_rexmit_rto_prepare(pcb) == ERR_OK) || ((pcb->unacked == NULL) && (pcb->unsent != NULL))) {
 800e5a8:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e5aa:	f004 fd4d 	bl	8013048 <tcp_rexmit_rto_prepare>
 800e5ae:	4603      	mov	r3, r0
 800e5b0:	2b00      	cmp	r3, #0
 800e5b2:	d007      	beq.n	800e5c4 <tcp_slowtmr+0x21c>
 800e5b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800e5b8:	2b00      	cmp	r3, #0
 800e5ba:	d171      	bne.n	800e6a0 <tcp_slowtmr+0x2f8>
 800e5bc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5be:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800e5c0:	2b00      	cmp	r3, #0
 800e5c2:	d06d      	beq.n	800e6a0 <tcp_slowtmr+0x2f8>
            /* Double retransmission time-out unless we are trying to
             * connect to somebody (i.e., we are in SYN_SENT). */
            if (pcb->state != SYN_SENT) {
 800e5c4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5c6:	7d1b      	ldrb	r3, [r3, #20]
 800e5c8:	2b02      	cmp	r3, #2
 800e5ca:	d03a      	beq.n	800e642 <tcp_slowtmr+0x29a>
              u8_t backoff_idx = LWIP_MIN(pcb->nrtx, sizeof(tcp_backoff) - 1);
 800e5cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5ce:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800e5d2:	2b0c      	cmp	r3, #12
 800e5d4:	bf28      	it	cs
 800e5d6:	230c      	movcs	r3, #12
 800e5d8:	76fb      	strb	r3, [r7, #27]
              int calc_rto = ((pcb->sa >> 3) + pcb->sv) << tcp_backoff[backoff_idx];
 800e5da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5dc:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 800e5e0:	10db      	asrs	r3, r3, #3
 800e5e2:	b21b      	sxth	r3, r3
 800e5e4:	461a      	mov	r2, r3
 800e5e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e5e8:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 800e5ec:	4413      	add	r3, r2
 800e5ee:	7efa      	ldrb	r2, [r7, #27]
 800e5f0:	4910      	ldr	r1, [pc, #64]	; (800e634 <tcp_slowtmr+0x28c>)
 800e5f2:	5c8a      	ldrb	r2, [r1, r2]
 800e5f4:	4093      	lsls	r3, r2
 800e5f6:	617b      	str	r3, [r7, #20]
              pcb->rto = (s16_t)LWIP_MIN(calc_rto, 0x7FFF);
 800e5f8:	697b      	ldr	r3, [r7, #20]
 800e5fa:	f647 72fe 	movw	r2, #32766	; 0x7ffe
 800e5fe:	4293      	cmp	r3, r2
 800e600:	dc1a      	bgt.n	800e638 <tcp_slowtmr+0x290>
 800e602:	697b      	ldr	r3, [r7, #20]
 800e604:	b21a      	sxth	r2, r3
 800e606:	e019      	b.n	800e63c <tcp_slowtmr+0x294>
 800e608:	2000f7f4 	.word	0x2000f7f4
 800e60c:	2000f80a 	.word	0x2000f80a
 800e610:	2000f800 	.word	0x2000f800
 800e614:	0801974c 	.word	0x0801974c
 800e618:	08019a90 	.word	0x08019a90
 800e61c:	08019790 	.word	0x08019790
 800e620:	08019abc 	.word	0x08019abc
 800e624:	08019ae8 	.word	0x08019ae8
 800e628:	08019b18 	.word	0x08019b18
 800e62c:	08019b4c 	.word	0x08019b4c
 800e630:	0801b7b0 	.word	0x0801b7b0
 800e634:	0801b7a0 	.word	0x0801b7a0
 800e638:	f647 72ff 	movw	r2, #32767	; 0x7fff
 800e63c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e63e:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
            }

            /* Reset the retransmission timer. */
            pcb->rtime = 0;
 800e642:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e644:	2200      	movs	r2, #0
 800e646:	861a      	strh	r2, [r3, #48]	; 0x30

            /* Reduce congestion window and ssthresh. */
            eff_wnd = LWIP_MIN(pcb->cwnd, pcb->snd_wnd);
 800e648:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e64a:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800e64e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e650:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 800e654:	4293      	cmp	r3, r2
 800e656:	bf28      	it	cs
 800e658:	4613      	movcs	r3, r2
 800e65a:	827b      	strh	r3, [r7, #18]
            pcb->ssthresh = eff_wnd >> 1;
 800e65c:	8a7b      	ldrh	r3, [r7, #18]
 800e65e:	085b      	lsrs	r3, r3, #1
 800e660:	b29a      	uxth	r2, r3
 800e662:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e664:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            if (pcb->ssthresh < (tcpwnd_size_t)(pcb->mss << 1)) {
 800e668:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e66a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 800e66e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e670:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e672:	005b      	lsls	r3, r3, #1
 800e674:	b29b      	uxth	r3, r3
 800e676:	429a      	cmp	r2, r3
 800e678:	d206      	bcs.n	800e688 <tcp_slowtmr+0x2e0>
              pcb->ssthresh = (tcpwnd_size_t)(pcb->mss << 1);
 800e67a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e67c:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 800e67e:	005b      	lsls	r3, r3, #1
 800e680:	b29a      	uxth	r2, r3
 800e682:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e684:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
            }
            pcb->cwnd = pcb->mss;
 800e688:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68a:	8e5a      	ldrh	r2, [r3, #50]	; 0x32
 800e68c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e68e:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
            LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: cwnd %"TCPWNDSIZE_F
                                         " ssthresh %"TCPWNDSIZE_F"\n",
                                         pcb->cwnd, pcb->ssthresh));
            pcb->bytes_acked = 0;
 800e692:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e694:	2200      	movs	r2, #0
 800e696:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a

            /* The following needs to be called AFTER cwnd is set to one
               mss - STJ */
            tcp_rexmit_rto_commit(pcb);
 800e69a:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e69c:	f004 fd44 	bl	8013128 <tcp_rexmit_rto_commit>
          }
        }
      }
    }
    /* Check if this PCB has stayed too long in FIN-WAIT-2 */
    if (pcb->state == FIN_WAIT_2) {
 800e6a0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6a2:	7d1b      	ldrb	r3, [r3, #20]
 800e6a4:	2b06      	cmp	r3, #6
 800e6a6:	d111      	bne.n	800e6cc <tcp_slowtmr+0x324>
      /* If this PCB is in FIN_WAIT_2 because of SHUT_WR don't let it time out. */
      if (pcb->flags & TF_RXCLOSED) {
 800e6a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6aa:	8b5b      	ldrh	r3, [r3, #26]
 800e6ac:	f003 0310 	and.w	r3, r3, #16
 800e6b0:	2b00      	cmp	r3, #0
 800e6b2:	d00b      	beq.n	800e6cc <tcp_slowtmr+0x324>
        /* PCB was fully closed (either through close() or SHUT_RDWR):
           normal FIN-WAIT timeout handling. */
        if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6b4:	4b9d      	ldr	r3, [pc, #628]	; (800e92c <tcp_slowtmr+0x584>)
 800e6b6:	681a      	ldr	r2, [r3, #0]
 800e6b8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ba:	6a1b      	ldr	r3, [r3, #32]
 800e6bc:	1ad3      	subs	r3, r2, r3
 800e6be:	2b28      	cmp	r3, #40	; 0x28
 800e6c0:	d904      	bls.n	800e6cc <tcp_slowtmr+0x324>
            TCP_FIN_WAIT_TIMEOUT / TCP_SLOW_INTERVAL) {
          ++pcb_remove;
 800e6c2:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e6c6:	3301      	adds	r3, #1
 800e6c8:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        }
      }
    }

    /* Check if KEEPALIVE should be sent */
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6cc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ce:	7a5b      	ldrb	r3, [r3, #9]
 800e6d0:	f003 0308 	and.w	r3, r3, #8
 800e6d4:	2b00      	cmp	r3, #0
 800e6d6:	d04c      	beq.n	800e772 <tcp_slowtmr+0x3ca>
        ((pcb->state == ESTABLISHED) ||
 800e6d8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6da:	7d1b      	ldrb	r3, [r3, #20]
    if (ip_get_option(pcb, SOF_KEEPALIVE) &&
 800e6dc:	2b04      	cmp	r3, #4
 800e6de:	d003      	beq.n	800e6e8 <tcp_slowtmr+0x340>
         (pcb->state == CLOSE_WAIT))) {
 800e6e0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6e2:	7d1b      	ldrb	r3, [r3, #20]
        ((pcb->state == ESTABLISHED) ||
 800e6e4:	2b07      	cmp	r3, #7
 800e6e6:	d144      	bne.n	800e772 <tcp_slowtmr+0x3ca>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e6e8:	4b90      	ldr	r3, [pc, #576]	; (800e92c <tcp_slowtmr+0x584>)
 800e6ea:	681a      	ldr	r2, [r3, #0]
 800e6ec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6ee:	6a1b      	ldr	r3, [r3, #32]
 800e6f0:	1ad2      	subs	r2, r2, r3
          (pcb->keep_idle + TCP_KEEP_DUR(pcb)) / TCP_SLOW_INTERVAL) {
 800e6f2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e6f4:	f8d3 3094 	ldr.w	r3, [r3, #148]	; 0x94
 800e6f8:	f503 2324 	add.w	r3, r3, #671744	; 0xa4000
 800e6fc:	f603 43b8 	addw	r3, r3, #3256	; 0xcb8
 800e700:	498b      	ldr	r1, [pc, #556]	; (800e930 <tcp_slowtmr+0x588>)
 800e702:	fba1 1303 	umull	r1, r3, r1, r3
 800e706:	095b      	lsrs	r3, r3, #5
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e708:	429a      	cmp	r2, r3
 800e70a:	d90a      	bls.n	800e722 <tcp_slowtmr+0x37a>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: KEEPALIVE timeout. Aborting connection to "));
        ip_addr_debug_print_val(TCP_DEBUG, pcb->remote_ip);
        LWIP_DEBUGF(TCP_DEBUG, ("\n"));

        ++pcb_remove;
 800e70c:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e710:	3301      	adds	r3, #1
 800e712:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        ++pcb_reset;
 800e716:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e71a:	3301      	adds	r3, #1
 800e71c:	f887 3026 	strb.w	r3, [r7, #38]	; 0x26
 800e720:	e027      	b.n	800e772 <tcp_slowtmr+0x3ca>
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e722:	4b82      	ldr	r3, [pc, #520]	; (800e92c <tcp_slowtmr+0x584>)
 800e724:	681a      	ldr	r2, [r3, #0]
 800e726:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e728:	6a1b      	ldr	r3, [r3, #32]
 800e72a:	1ad2      	subs	r2, r2, r3
                 (pcb->keep_idle + pcb->keep_cnt_sent * TCP_KEEP_INTVL(pcb))
 800e72c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e72e:	f8d3 1094 	ldr.w	r1, [r3, #148]	; 0x94
 800e732:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e734:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e738:	4618      	mov	r0, r3
 800e73a:	4b7e      	ldr	r3, [pc, #504]	; (800e934 <tcp_slowtmr+0x58c>)
 800e73c:	fb00 f303 	mul.w	r3, r0, r3
 800e740:	440b      	add	r3, r1
                 / TCP_SLOW_INTERVAL) {
 800e742:	497b      	ldr	r1, [pc, #492]	; (800e930 <tcp_slowtmr+0x588>)
 800e744:	fba1 1303 	umull	r1, r3, r1, r3
 800e748:	095b      	lsrs	r3, r3, #5
      } else if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e74a:	429a      	cmp	r2, r3
 800e74c:	d911      	bls.n	800e772 <tcp_slowtmr+0x3ca>
        err = tcp_keepalive(pcb);
 800e74e:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e750:	f004 ffee 	bl	8013730 <tcp_keepalive>
 800e754:	4603      	mov	r3, r0
 800e756:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (err == ERR_OK) {
 800e75a:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e75e:	2b00      	cmp	r3, #0
 800e760:	d107      	bne.n	800e772 <tcp_slowtmr+0x3ca>
          pcb->keep_cnt_sent++;
 800e762:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e764:	f893 309b 	ldrb.w	r3, [r3, #155]	; 0x9b
 800e768:	3301      	adds	r3, #1
 800e76a:	b2da      	uxtb	r2, r3
 800e76c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e76e:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b

    /* If this PCB has queued out of sequence data, but has been
       inactive for too long, will drop the data (it will eventually
       be retransmitted). */
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL &&
 800e772:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e774:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800e776:	2b00      	cmp	r3, #0
 800e778:	d011      	beq.n	800e79e <tcp_slowtmr+0x3f6>
        (tcp_ticks - pcb->tmr >= (u32_t)pcb->rto * TCP_OOSEQ_TIMEOUT)) {
 800e77a:	4b6c      	ldr	r3, [pc, #432]	; (800e92c <tcp_slowtmr+0x584>)
 800e77c:	681a      	ldr	r2, [r3, #0]
 800e77e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e780:	6a1b      	ldr	r3, [r3, #32]
 800e782:	1ad2      	subs	r2, r2, r3
 800e784:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e786:	f9b3 3040 	ldrsh.w	r3, [r3, #64]	; 0x40
 800e78a:	4619      	mov	r1, r3
 800e78c:	460b      	mov	r3, r1
 800e78e:	005b      	lsls	r3, r3, #1
 800e790:	440b      	add	r3, r1
 800e792:	005b      	lsls	r3, r3, #1
    if (pcb->ooseq != NULL &&
 800e794:	429a      	cmp	r2, r3
 800e796:	d302      	bcc.n	800e79e <tcp_slowtmr+0x3f6>
      LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_slowtmr: dropping OOSEQ queued data\n"));
      tcp_free_ooseq(pcb);
 800e798:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e79a:	f000 fea9 	bl	800f4f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Check if this PCB has stayed too long in SYN-RCVD */
    if (pcb->state == SYN_RCVD) {
 800e79e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7a0:	7d1b      	ldrb	r3, [r3, #20]
 800e7a2:	2b03      	cmp	r3, #3
 800e7a4:	d10b      	bne.n	800e7be <tcp_slowtmr+0x416>
      if ((u32_t)(tcp_ticks - pcb->tmr) >
 800e7a6:	4b61      	ldr	r3, [pc, #388]	; (800e92c <tcp_slowtmr+0x584>)
 800e7a8:	681a      	ldr	r2, [r3, #0]
 800e7aa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7ac:	6a1b      	ldr	r3, [r3, #32]
 800e7ae:	1ad3      	subs	r3, r2, r3
 800e7b0:	2b28      	cmp	r3, #40	; 0x28
 800e7b2:	d904      	bls.n	800e7be <tcp_slowtmr+0x416>
          TCP_SYN_RCVD_TIMEOUT / TCP_SLOW_INTERVAL) {
        ++pcb_remove;
 800e7b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7b8:	3301      	adds	r3, #1
 800e7ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in SYN-RCVD\n"));
      }
    }

    /* Check if this PCB has stayed too long in LAST-ACK */
    if (pcb->state == LAST_ACK) {
 800e7be:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7c0:	7d1b      	ldrb	r3, [r3, #20]
 800e7c2:	2b09      	cmp	r3, #9
 800e7c4:	d10b      	bne.n	800e7de <tcp_slowtmr+0x436>
      if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e7c6:	4b59      	ldr	r3, [pc, #356]	; (800e92c <tcp_slowtmr+0x584>)
 800e7c8:	681a      	ldr	r2, [r3, #0]
 800e7ca:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7cc:	6a1b      	ldr	r3, [r3, #32]
 800e7ce:	1ad3      	subs	r3, r2, r3
 800e7d0:	2bf0      	cmp	r3, #240	; 0xf0
 800e7d2:	d904      	bls.n	800e7de <tcp_slowtmr+0x436>
        ++pcb_remove;
 800e7d4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7d8:	3301      	adds	r3, #1
 800e7da:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: removing pcb stuck in LAST-ACK\n"));
      }
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e7de:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e7e2:	2b00      	cmp	r3, #0
 800e7e4:	d060      	beq.n	800e8a8 <tcp_slowtmr+0x500>
      struct tcp_pcb *pcb2;
#if LWIP_CALLBACK_API
      tcp_err_fn err_fn = pcb->errf;
 800e7e6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e7e8:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800e7ec:	60fb      	str	r3, [r7, #12]
#endif /* LWIP_CALLBACK_API */
      void *err_arg;
      enum tcp_state last_state;
      tcp_pcb_purge(pcb);
 800e7ee:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e7f0:	f000 fcca 	bl	800f188 <tcp_pcb_purge>
      /* Remove PCB from tcp_active_pcbs list. */
      if (prev != NULL) {
 800e7f4:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e7f6:	2b00      	cmp	r3, #0
 800e7f8:	d010      	beq.n	800e81c <tcp_slowtmr+0x474>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_active_pcbs", pcb != tcp_active_pcbs);
 800e7fa:	4b4f      	ldr	r3, [pc, #316]	; (800e938 <tcp_slowtmr+0x590>)
 800e7fc:	681b      	ldr	r3, [r3, #0]
 800e7fe:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e800:	429a      	cmp	r2, r3
 800e802:	d106      	bne.n	800e812 <tcp_slowtmr+0x46a>
 800e804:	4b4d      	ldr	r3, [pc, #308]	; (800e93c <tcp_slowtmr+0x594>)
 800e806:	f240 526d 	movw	r2, #1389	; 0x56d
 800e80a:	494d      	ldr	r1, [pc, #308]	; (800e940 <tcp_slowtmr+0x598>)
 800e80c:	484d      	ldr	r0, [pc, #308]	; (800e944 <tcp_slowtmr+0x59c>)
 800e80e:	f008 faef 	bl	8016df0 <iprintf>
        prev->next = pcb->next;
 800e812:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e814:	68da      	ldr	r2, [r3, #12]
 800e816:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e818:	60da      	str	r2, [r3, #12]
 800e81a:	e00f      	b.n	800e83c <tcp_slowtmr+0x494>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_active_pcbs", tcp_active_pcbs == pcb);
 800e81c:	4b46      	ldr	r3, [pc, #280]	; (800e938 <tcp_slowtmr+0x590>)
 800e81e:	681b      	ldr	r3, [r3, #0]
 800e820:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e822:	429a      	cmp	r2, r3
 800e824:	d006      	beq.n	800e834 <tcp_slowtmr+0x48c>
 800e826:	4b45      	ldr	r3, [pc, #276]	; (800e93c <tcp_slowtmr+0x594>)
 800e828:	f240 5271 	movw	r2, #1393	; 0x571
 800e82c:	4946      	ldr	r1, [pc, #280]	; (800e948 <tcp_slowtmr+0x5a0>)
 800e82e:	4845      	ldr	r0, [pc, #276]	; (800e944 <tcp_slowtmr+0x59c>)
 800e830:	f008 fade 	bl	8016df0 <iprintf>
        tcp_active_pcbs = pcb->next;
 800e834:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e836:	68db      	ldr	r3, [r3, #12]
 800e838:	4a3f      	ldr	r2, [pc, #252]	; (800e938 <tcp_slowtmr+0x590>)
 800e83a:	6013      	str	r3, [r2, #0]
      }

      if (pcb_reset) {
 800e83c:	f897 3026 	ldrb.w	r3, [r7, #38]	; 0x26
 800e840:	2b00      	cmp	r3, #0
 800e842:	d013      	beq.n	800e86c <tcp_slowtmr+0x4c4>
        tcp_rst(pcb, pcb->snd_nxt, pcb->rcv_nxt, &pcb->local_ip, &pcb->remote_ip,
 800e844:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e846:	6d18      	ldr	r0, [r3, #80]	; 0x50
 800e848:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e84a:	6a5c      	ldr	r4, [r3, #36]	; 0x24
 800e84c:	6afd      	ldr	r5, [r7, #44]	; 0x2c
 800e84e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e850:	3304      	adds	r3, #4
 800e852:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e854:	8ad2      	ldrh	r2, [r2, #22]
 800e856:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 800e858:	8b09      	ldrh	r1, [r1, #24]
 800e85a:	9102      	str	r1, [sp, #8]
 800e85c:	9201      	str	r2, [sp, #4]
 800e85e:	9300      	str	r3, [sp, #0]
 800e860:	462b      	mov	r3, r5
 800e862:	4622      	mov	r2, r4
 800e864:	4601      	mov	r1, r0
 800e866:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e868:	f004 feae 	bl	80135c8 <tcp_rst>
                pcb->local_port, pcb->remote_port);
      }

      err_arg = pcb->callback_arg;
 800e86c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e86e:	691b      	ldr	r3, [r3, #16]
 800e870:	60bb      	str	r3, [r7, #8]
      last_state = pcb->state;
 800e872:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e874:	7d1b      	ldrb	r3, [r3, #20]
 800e876:	71fb      	strb	r3, [r7, #7]
      pcb2 = pcb;
 800e878:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87a:	603b      	str	r3, [r7, #0]
      pcb = pcb->next;
 800e87c:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e87e:	68db      	ldr	r3, [r3, #12]
 800e880:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e882:	6838      	ldr	r0, [r7, #0]
 800e884:	f7fe ffa0 	bl	800d7c8 <tcp_free>

      tcp_active_pcbs_changed = 0;
 800e888:	4b30      	ldr	r3, [pc, #192]	; (800e94c <tcp_slowtmr+0x5a4>)
 800e88a:	2200      	movs	r2, #0
 800e88c:	701a      	strb	r2, [r3, #0]
      TCP_EVENT_ERR(last_state, err_fn, err_arg, ERR_ABRT);
 800e88e:	68fb      	ldr	r3, [r7, #12]
 800e890:	2b00      	cmp	r3, #0
 800e892:	d004      	beq.n	800e89e <tcp_slowtmr+0x4f6>
 800e894:	68fb      	ldr	r3, [r7, #12]
 800e896:	f06f 010c 	mvn.w	r1, #12
 800e89a:	68b8      	ldr	r0, [r7, #8]
 800e89c:	4798      	blx	r3
      if (tcp_active_pcbs_changed) {
 800e89e:	4b2b      	ldr	r3, [pc, #172]	; (800e94c <tcp_slowtmr+0x5a4>)
 800e8a0:	781b      	ldrb	r3, [r3, #0]
 800e8a2:	2b00      	cmp	r3, #0
 800e8a4:	d037      	beq.n	800e916 <tcp_slowtmr+0x56e>
        goto tcp_slowtmr_start;
 800e8a6:	e590      	b.n	800e3ca <tcp_slowtmr+0x22>
      }
    } else {
      /* get the 'next' element now and work with 'prev' below (in case of abort) */
      prev = pcb;
 800e8a8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8aa:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e8ac:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e8ae:	68db      	ldr	r3, [r3, #12]
 800e8b0:	62fb      	str	r3, [r7, #44]	; 0x2c

      /* We check if we should poll the connection. */
      ++prev->polltmr;
 800e8b2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8b4:	7f1b      	ldrb	r3, [r3, #28]
 800e8b6:	3301      	adds	r3, #1
 800e8b8:	b2da      	uxtb	r2, r3
 800e8ba:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8bc:	771a      	strb	r2, [r3, #28]
      if (prev->polltmr >= prev->pollinterval) {
 800e8be:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c0:	7f1a      	ldrb	r2, [r3, #28]
 800e8c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8c4:	7f5b      	ldrb	r3, [r3, #29]
 800e8c6:	429a      	cmp	r2, r3
 800e8c8:	d325      	bcc.n	800e916 <tcp_slowtmr+0x56e>
        prev->polltmr = 0;
 800e8ca:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8cc:	2200      	movs	r2, #0
 800e8ce:	771a      	strb	r2, [r3, #28]
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_slowtmr: polling application\n"));
        tcp_active_pcbs_changed = 0;
 800e8d0:	4b1e      	ldr	r3, [pc, #120]	; (800e94c <tcp_slowtmr+0x5a4>)
 800e8d2:	2200      	movs	r2, #0
 800e8d4:	701a      	strb	r2, [r3, #0]
        TCP_EVENT_POLL(prev, err);
 800e8d6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8d8:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8dc:	2b00      	cmp	r3, #0
 800e8de:	d00b      	beq.n	800e8f8 <tcp_slowtmr+0x550>
 800e8e0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e8e2:	f8d3 308c 	ldr.w	r3, [r3, #140]	; 0x8c
 800e8e6:	6aba      	ldr	r2, [r7, #40]	; 0x28
 800e8e8:	6912      	ldr	r2, [r2, #16]
 800e8ea:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 800e8ec:	4610      	mov	r0, r2
 800e8ee:	4798      	blx	r3
 800e8f0:	4603      	mov	r3, r0
 800e8f2:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
 800e8f6:	e002      	b.n	800e8fe <tcp_slowtmr+0x556>
 800e8f8:	2300      	movs	r3, #0
 800e8fa:	f887 3025 	strb.w	r3, [r7, #37]	; 0x25
        if (tcp_active_pcbs_changed) {
 800e8fe:	4b13      	ldr	r3, [pc, #76]	; (800e94c <tcp_slowtmr+0x5a4>)
 800e900:	781b      	ldrb	r3, [r3, #0]
 800e902:	2b00      	cmp	r3, #0
 800e904:	d000      	beq.n	800e908 <tcp_slowtmr+0x560>
          goto tcp_slowtmr_start;
 800e906:	e560      	b.n	800e3ca <tcp_slowtmr+0x22>
        }
        /* if err == ERR_ABRT, 'prev' is already deallocated */
        if (err == ERR_OK) {
 800e908:	f997 3025 	ldrsb.w	r3, [r7, #37]	; 0x25
 800e90c:	2b00      	cmp	r3, #0
 800e90e:	d102      	bne.n	800e916 <tcp_slowtmr+0x56e>
          tcp_output(prev);
 800e910:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 800e912:	f004 f8a5 	bl	8012a60 <tcp_output>
  while (pcb != NULL) {
 800e916:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e918:	2b00      	cmp	r3, #0
 800e91a:	f47f ad5c 	bne.w	800e3d6 <tcp_slowtmr+0x2e>
    }
  }


  /* Steps through all of the TIME-WAIT PCBs. */
  prev = NULL;
 800e91e:	2300      	movs	r3, #0
 800e920:	62bb      	str	r3, [r7, #40]	; 0x28
  pcb = tcp_tw_pcbs;
 800e922:	4b0b      	ldr	r3, [pc, #44]	; (800e950 <tcp_slowtmr+0x5a8>)
 800e924:	681b      	ldr	r3, [r3, #0]
 800e926:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e928:	e067      	b.n	800e9fa <tcp_slowtmr+0x652>
 800e92a:	bf00      	nop
 800e92c:	2000f7f4 	.word	0x2000f7f4
 800e930:	10624dd3 	.word	0x10624dd3
 800e934:	000124f8 	.word	0x000124f8
 800e938:	2000f800 	.word	0x2000f800
 800e93c:	0801974c 	.word	0x0801974c
 800e940:	08019b84 	.word	0x08019b84
 800e944:	08019790 	.word	0x08019790
 800e948:	08019bb0 	.word	0x08019bb0
 800e94c:	2000f808 	.word	0x2000f808
 800e950:	2000f804 	.word	0x2000f804
    LWIP_ASSERT("tcp_slowtmr: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800e954:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e956:	7d1b      	ldrb	r3, [r3, #20]
 800e958:	2b0a      	cmp	r3, #10
 800e95a:	d006      	beq.n	800e96a <tcp_slowtmr+0x5c2>
 800e95c:	4b2b      	ldr	r3, [pc, #172]	; (800ea0c <tcp_slowtmr+0x664>)
 800e95e:	f240 52a1 	movw	r2, #1441	; 0x5a1
 800e962:	492b      	ldr	r1, [pc, #172]	; (800ea10 <tcp_slowtmr+0x668>)
 800e964:	482b      	ldr	r0, [pc, #172]	; (800ea14 <tcp_slowtmr+0x66c>)
 800e966:	f008 fa43 	bl	8016df0 <iprintf>
    pcb_remove = 0;
 800e96a:	2300      	movs	r3, #0
 800e96c:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

    /* Check if this PCB has stayed long enough in TIME-WAIT */
    if ((u32_t)(tcp_ticks - pcb->tmr) > 2 * TCP_MSL / TCP_SLOW_INTERVAL) {
 800e970:	4b29      	ldr	r3, [pc, #164]	; (800ea18 <tcp_slowtmr+0x670>)
 800e972:	681a      	ldr	r2, [r3, #0]
 800e974:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e976:	6a1b      	ldr	r3, [r3, #32]
 800e978:	1ad3      	subs	r3, r2, r3
 800e97a:	2bf0      	cmp	r3, #240	; 0xf0
 800e97c:	d904      	bls.n	800e988 <tcp_slowtmr+0x5e0>
      ++pcb_remove;
 800e97e:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e982:	3301      	adds	r3, #1
 800e984:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }

    /* If the PCB should be removed, do it. */
    if (pcb_remove) {
 800e988:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 800e98c:	2b00      	cmp	r3, #0
 800e98e:	d02f      	beq.n	800e9f0 <tcp_slowtmr+0x648>
      struct tcp_pcb *pcb2;
      tcp_pcb_purge(pcb);
 800e990:	6af8      	ldr	r0, [r7, #44]	; 0x2c
 800e992:	f000 fbf9 	bl	800f188 <tcp_pcb_purge>
      /* Remove PCB from tcp_tw_pcbs list. */
      if (prev != NULL) {
 800e996:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e998:	2b00      	cmp	r3, #0
 800e99a:	d010      	beq.n	800e9be <tcp_slowtmr+0x616>
        LWIP_ASSERT("tcp_slowtmr: middle tcp != tcp_tw_pcbs", pcb != tcp_tw_pcbs);
 800e99c:	4b1f      	ldr	r3, [pc, #124]	; (800ea1c <tcp_slowtmr+0x674>)
 800e99e:	681b      	ldr	r3, [r3, #0]
 800e9a0:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9a2:	429a      	cmp	r2, r3
 800e9a4:	d106      	bne.n	800e9b4 <tcp_slowtmr+0x60c>
 800e9a6:	4b19      	ldr	r3, [pc, #100]	; (800ea0c <tcp_slowtmr+0x664>)
 800e9a8:	f240 52af 	movw	r2, #1455	; 0x5af
 800e9ac:	491c      	ldr	r1, [pc, #112]	; (800ea20 <tcp_slowtmr+0x678>)
 800e9ae:	4819      	ldr	r0, [pc, #100]	; (800ea14 <tcp_slowtmr+0x66c>)
 800e9b0:	f008 fa1e 	bl	8016df0 <iprintf>
        prev->next = pcb->next;
 800e9b4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9b6:	68da      	ldr	r2, [r3, #12]
 800e9b8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 800e9ba:	60da      	str	r2, [r3, #12]
 800e9bc:	e00f      	b.n	800e9de <tcp_slowtmr+0x636>
      } else {
        /* This PCB was the first. */
        LWIP_ASSERT("tcp_slowtmr: first pcb == tcp_tw_pcbs", tcp_tw_pcbs == pcb);
 800e9be:	4b17      	ldr	r3, [pc, #92]	; (800ea1c <tcp_slowtmr+0x674>)
 800e9c0:	681b      	ldr	r3, [r3, #0]
 800e9c2:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 800e9c4:	429a      	cmp	r2, r3
 800e9c6:	d006      	beq.n	800e9d6 <tcp_slowtmr+0x62e>
 800e9c8:	4b10      	ldr	r3, [pc, #64]	; (800ea0c <tcp_slowtmr+0x664>)
 800e9ca:	f240 52b3 	movw	r2, #1459	; 0x5b3
 800e9ce:	4915      	ldr	r1, [pc, #84]	; (800ea24 <tcp_slowtmr+0x67c>)
 800e9d0:	4810      	ldr	r0, [pc, #64]	; (800ea14 <tcp_slowtmr+0x66c>)
 800e9d2:	f008 fa0d 	bl	8016df0 <iprintf>
        tcp_tw_pcbs = pcb->next;
 800e9d6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9d8:	68db      	ldr	r3, [r3, #12]
 800e9da:	4a10      	ldr	r2, [pc, #64]	; (800ea1c <tcp_slowtmr+0x674>)
 800e9dc:	6013      	str	r3, [r2, #0]
      }
      pcb2 = pcb;
 800e9de:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e0:	61fb      	str	r3, [r7, #28]
      pcb = pcb->next;
 800e9e2:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9e4:	68db      	ldr	r3, [r3, #12]
 800e9e6:	62fb      	str	r3, [r7, #44]	; 0x2c
      tcp_free(pcb2);
 800e9e8:	69f8      	ldr	r0, [r7, #28]
 800e9ea:	f7fe feed 	bl	800d7c8 <tcp_free>
 800e9ee:	e004      	b.n	800e9fa <tcp_slowtmr+0x652>
    } else {
      prev = pcb;
 800e9f0:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f2:	62bb      	str	r3, [r7, #40]	; 0x28
      pcb = pcb->next;
 800e9f4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9f6:	68db      	ldr	r3, [r3, #12]
 800e9f8:	62fb      	str	r3, [r7, #44]	; 0x2c
  while (pcb != NULL) {
 800e9fa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 800e9fc:	2b00      	cmp	r3, #0
 800e9fe:	d1a9      	bne.n	800e954 <tcp_slowtmr+0x5ac>
    }
  }
}
 800ea00:	bf00      	nop
 800ea02:	bf00      	nop
 800ea04:	3730      	adds	r7, #48	; 0x30
 800ea06:	46bd      	mov	sp, r7
 800ea08:	bdb0      	pop	{r4, r5, r7, pc}
 800ea0a:	bf00      	nop
 800ea0c:	0801974c 	.word	0x0801974c
 800ea10:	08019bdc 	.word	0x08019bdc
 800ea14:	08019790 	.word	0x08019790
 800ea18:	2000f7f4 	.word	0x2000f7f4
 800ea1c:	2000f804 	.word	0x2000f804
 800ea20:	08019c0c 	.word	0x08019c0c
 800ea24:	08019c34 	.word	0x08019c34

0800ea28 <tcp_fasttmr>:
 *
 * Automatically called from tcp_tmr().
 */
void
tcp_fasttmr(void)
{
 800ea28:	b580      	push	{r7, lr}
 800ea2a:	b082      	sub	sp, #8
 800ea2c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb;

  ++tcp_timer_ctr;
 800ea2e:	4b2d      	ldr	r3, [pc, #180]	; (800eae4 <tcp_fasttmr+0xbc>)
 800ea30:	781b      	ldrb	r3, [r3, #0]
 800ea32:	3301      	adds	r3, #1
 800ea34:	b2da      	uxtb	r2, r3
 800ea36:	4b2b      	ldr	r3, [pc, #172]	; (800eae4 <tcp_fasttmr+0xbc>)
 800ea38:	701a      	strb	r2, [r3, #0]

tcp_fasttmr_start:
  pcb = tcp_active_pcbs;
 800ea3a:	4b2b      	ldr	r3, [pc, #172]	; (800eae8 <tcp_fasttmr+0xc0>)
 800ea3c:	681b      	ldr	r3, [r3, #0]
 800ea3e:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800ea40:	e048      	b.n	800ead4 <tcp_fasttmr+0xac>
    if (pcb->last_timer != tcp_timer_ctr) {
 800ea42:	687b      	ldr	r3, [r7, #4]
 800ea44:	7f9a      	ldrb	r2, [r3, #30]
 800ea46:	4b27      	ldr	r3, [pc, #156]	; (800eae4 <tcp_fasttmr+0xbc>)
 800ea48:	781b      	ldrb	r3, [r3, #0]
 800ea4a:	429a      	cmp	r2, r3
 800ea4c:	d03f      	beq.n	800eace <tcp_fasttmr+0xa6>
      struct tcp_pcb *next;
      pcb->last_timer = tcp_timer_ctr;
 800ea4e:	4b25      	ldr	r3, [pc, #148]	; (800eae4 <tcp_fasttmr+0xbc>)
 800ea50:	781a      	ldrb	r2, [r3, #0]
 800ea52:	687b      	ldr	r3, [r7, #4]
 800ea54:	779a      	strb	r2, [r3, #30]
      /* send delayed ACKs */
      if (pcb->flags & TF_ACK_DELAY) {
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	8b5b      	ldrh	r3, [r3, #26]
 800ea5a:	f003 0301 	and.w	r3, r3, #1
 800ea5e:	2b00      	cmp	r3, #0
 800ea60:	d010      	beq.n	800ea84 <tcp_fasttmr+0x5c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: delayed ACK\n"));
        tcp_ack_now(pcb);
 800ea62:	687b      	ldr	r3, [r7, #4]
 800ea64:	8b5b      	ldrh	r3, [r3, #26]
 800ea66:	f043 0302 	orr.w	r3, r3, #2
 800ea6a:	b29a      	uxth	r2, r3
 800ea6c:	687b      	ldr	r3, [r7, #4]
 800ea6e:	835a      	strh	r2, [r3, #26]
        tcp_output(pcb);
 800ea70:	6878      	ldr	r0, [r7, #4]
 800ea72:	f003 fff5 	bl	8012a60 <tcp_output>
        tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 800ea76:	687b      	ldr	r3, [r7, #4]
 800ea78:	8b5b      	ldrh	r3, [r3, #26]
 800ea7a:	f023 0303 	bic.w	r3, r3, #3
 800ea7e:	b29a      	uxth	r2, r3
 800ea80:	687b      	ldr	r3, [r7, #4]
 800ea82:	835a      	strh	r2, [r3, #26]
      }
      /* send pending FIN */
      if (pcb->flags & TF_CLOSEPEND) {
 800ea84:	687b      	ldr	r3, [r7, #4]
 800ea86:	8b5b      	ldrh	r3, [r3, #26]
 800ea88:	f003 0308 	and.w	r3, r3, #8
 800ea8c:	2b00      	cmp	r3, #0
 800ea8e:	d009      	beq.n	800eaa4 <tcp_fasttmr+0x7c>
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_fasttmr: pending FIN\n"));
        tcp_clear_flags(pcb, TF_CLOSEPEND);
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	8b5b      	ldrh	r3, [r3, #26]
 800ea94:	f023 0308 	bic.w	r3, r3, #8
 800ea98:	b29a      	uxth	r2, r3
 800ea9a:	687b      	ldr	r3, [r7, #4]
 800ea9c:	835a      	strh	r2, [r3, #26]
        tcp_close_shutdown_fin(pcb);
 800ea9e:	6878      	ldr	r0, [r7, #4]
 800eaa0:	f7ff f826 	bl	800daf0 <tcp_close_shutdown_fin>
      }

      next = pcb->next;
 800eaa4:	687b      	ldr	r3, [r7, #4]
 800eaa6:	68db      	ldr	r3, [r3, #12]
 800eaa8:	603b      	str	r3, [r7, #0]

      /* If there is data which was previously "refused" by upper layer */
      if (pcb->refused_data != NULL) {
 800eaaa:	687b      	ldr	r3, [r7, #4]
 800eaac:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eaae:	2b00      	cmp	r3, #0
 800eab0:	d00a      	beq.n	800eac8 <tcp_fasttmr+0xa0>
        tcp_active_pcbs_changed = 0;
 800eab2:	4b0e      	ldr	r3, [pc, #56]	; (800eaec <tcp_fasttmr+0xc4>)
 800eab4:	2200      	movs	r2, #0
 800eab6:	701a      	strb	r2, [r3, #0]
        tcp_process_refused_data(pcb);
 800eab8:	6878      	ldr	r0, [r7, #4]
 800eaba:	f000 f819 	bl	800eaf0 <tcp_process_refused_data>
        if (tcp_active_pcbs_changed) {
 800eabe:	4b0b      	ldr	r3, [pc, #44]	; (800eaec <tcp_fasttmr+0xc4>)
 800eac0:	781b      	ldrb	r3, [r3, #0]
 800eac2:	2b00      	cmp	r3, #0
 800eac4:	d000      	beq.n	800eac8 <tcp_fasttmr+0xa0>
          /* application callback has changed the pcb list: restart the loop */
          goto tcp_fasttmr_start;
 800eac6:	e7b8      	b.n	800ea3a <tcp_fasttmr+0x12>
        }
      }
      pcb = next;
 800eac8:	683b      	ldr	r3, [r7, #0]
 800eaca:	607b      	str	r3, [r7, #4]
 800eacc:	e002      	b.n	800ead4 <tcp_fasttmr+0xac>
    } else {
      pcb = pcb->next;
 800eace:	687b      	ldr	r3, [r7, #4]
 800ead0:	68db      	ldr	r3, [r3, #12]
 800ead2:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800ead4:	687b      	ldr	r3, [r7, #4]
 800ead6:	2b00      	cmp	r3, #0
 800ead8:	d1b3      	bne.n	800ea42 <tcp_fasttmr+0x1a>
    }
  }
}
 800eada:	bf00      	nop
 800eadc:	bf00      	nop
 800eade:	3708      	adds	r7, #8
 800eae0:	46bd      	mov	sp, r7
 800eae2:	bd80      	pop	{r7, pc}
 800eae4:	2000f80a 	.word	0x2000f80a
 800eae8:	2000f800 	.word	0x2000f800
 800eaec:	2000f808 	.word	0x2000f808

0800eaf0 <tcp_process_refused_data>:
}

/** Pass pcb->refused_data to the recv callback */
err_t
tcp_process_refused_data(struct tcp_pcb *pcb)
{
 800eaf0:	b590      	push	{r4, r7, lr}
 800eaf2:	b085      	sub	sp, #20
 800eaf4:	af00      	add	r7, sp, #0
 800eaf6:	6078      	str	r0, [r7, #4]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  struct pbuf *rest;
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

  LWIP_ERROR("tcp_process_refused_data: invalid pcb", pcb != NULL, return ERR_ARG);
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2b00      	cmp	r3, #0
 800eafc:	d109      	bne.n	800eb12 <tcp_process_refused_data+0x22>
 800eafe:	4b37      	ldr	r3, [pc, #220]	; (800ebdc <tcp_process_refused_data+0xec>)
 800eb00:	f240 6209 	movw	r2, #1545	; 0x609
 800eb04:	4936      	ldr	r1, [pc, #216]	; (800ebe0 <tcp_process_refused_data+0xf0>)
 800eb06:	4837      	ldr	r0, [pc, #220]	; (800ebe4 <tcp_process_refused_data+0xf4>)
 800eb08:	f008 f972 	bl	8016df0 <iprintf>
 800eb0c:	f06f 030f 	mvn.w	r3, #15
 800eb10:	e060      	b.n	800ebd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
  while (pcb->refused_data != NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
  {
    err_t err;
    u8_t refused_flags = pcb->refused_data->flags;
 800eb12:	687b      	ldr	r3, [r7, #4]
 800eb14:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb16:	7b5b      	ldrb	r3, [r3, #13]
 800eb18:	73bb      	strb	r3, [r7, #14]
    /* set pcb->refused_data to NULL in case the callback frees it and then
       closes the pcb */
    struct pbuf *refused_data = pcb->refused_data;
 800eb1a:	687b      	ldr	r3, [r7, #4]
 800eb1c:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800eb1e:	60bb      	str	r3, [r7, #8]
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
    pbuf_split_64k(refused_data, &rest);
    pcb->refused_data = rest;
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    pcb->refused_data = NULL;
 800eb20:	687b      	ldr	r3, [r7, #4]
 800eb22:	2200      	movs	r2, #0
 800eb24:	679a      	str	r2, [r3, #120]	; 0x78
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
    /* Notify again application with data previously received. */
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: notify kept packet\n"));
    TCP_EVENT_RECV(pcb, refused_data, ERR_OK, err);
 800eb26:	687b      	ldr	r3, [r7, #4]
 800eb28:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb2c:	2b00      	cmp	r3, #0
 800eb2e:	d00b      	beq.n	800eb48 <tcp_process_refused_data+0x58>
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb36:	687b      	ldr	r3, [r7, #4]
 800eb38:	6918      	ldr	r0, [r3, #16]
 800eb3a:	2300      	movs	r3, #0
 800eb3c:	68ba      	ldr	r2, [r7, #8]
 800eb3e:	6879      	ldr	r1, [r7, #4]
 800eb40:	47a0      	blx	r4
 800eb42:	4603      	mov	r3, r0
 800eb44:	73fb      	strb	r3, [r7, #15]
 800eb46:	e007      	b.n	800eb58 <tcp_process_refused_data+0x68>
 800eb48:	2300      	movs	r3, #0
 800eb4a:	68ba      	ldr	r2, [r7, #8]
 800eb4c:	6879      	ldr	r1, [r7, #4]
 800eb4e:	2000      	movs	r0, #0
 800eb50:	f000 f8a4 	bl	800ec9c <tcp_recv_null>
 800eb54:	4603      	mov	r3, r0
 800eb56:	73fb      	strb	r3, [r7, #15]
    if (err == ERR_OK) {
 800eb58:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800eb5c:	2b00      	cmp	r3, #0
 800eb5e:	d12a      	bne.n	800ebb6 <tcp_process_refused_data+0xc6>
      /* did refused_data include a FIN? */
      if ((refused_flags & PBUF_FLAG_TCP_FIN)
 800eb60:	7bbb      	ldrb	r3, [r7, #14]
 800eb62:	f003 0320 	and.w	r3, r3, #32
 800eb66:	2b00      	cmp	r3, #0
 800eb68:	d033      	beq.n	800ebd2 <tcp_process_refused_data+0xe2>
          && (rest == NULL)
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
         ) {
        /* correct rcv_wnd as the application won't call tcp_recved()
           for the FIN's seqno */
        if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800eb6a:	687b      	ldr	r3, [r7, #4]
 800eb6c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb6e:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800eb72:	d005      	beq.n	800eb80 <tcp_process_refused_data+0x90>
          pcb->rcv_wnd++;
 800eb74:	687b      	ldr	r3, [r7, #4]
 800eb76:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800eb78:	3301      	adds	r3, #1
 800eb7a:	b29a      	uxth	r2, r3
 800eb7c:	687b      	ldr	r3, [r7, #4]
 800eb7e:	851a      	strh	r2, [r3, #40]	; 0x28
        }
        TCP_EVENT_CLOSED(pcb, err);
 800eb80:	687b      	ldr	r3, [r7, #4]
 800eb82:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800eb86:	2b00      	cmp	r3, #0
 800eb88:	d00b      	beq.n	800eba2 <tcp_process_refused_data+0xb2>
 800eb8a:	687b      	ldr	r3, [r7, #4]
 800eb8c:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800eb90:	687b      	ldr	r3, [r7, #4]
 800eb92:	6918      	ldr	r0, [r3, #16]
 800eb94:	2300      	movs	r3, #0
 800eb96:	2200      	movs	r2, #0
 800eb98:	6879      	ldr	r1, [r7, #4]
 800eb9a:	47a0      	blx	r4
 800eb9c:	4603      	mov	r3, r0
 800eb9e:	73fb      	strb	r3, [r7, #15]
 800eba0:	e001      	b.n	800eba6 <tcp_process_refused_data+0xb6>
 800eba2:	2300      	movs	r3, #0
 800eba4:	73fb      	strb	r3, [r7, #15]
        if (err == ERR_ABRT) {
 800eba6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebaa:	f113 0f0d 	cmn.w	r3, #13
 800ebae:	d110      	bne.n	800ebd2 <tcp_process_refused_data+0xe2>
          return ERR_ABRT;
 800ebb0:	f06f 030c 	mvn.w	r3, #12
 800ebb4:	e00e      	b.n	800ebd4 <tcp_process_refused_data+0xe4>
        }
      }
    } else if (err == ERR_ABRT) {
 800ebb6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ebba:	f113 0f0d 	cmn.w	r3, #13
 800ebbe:	d102      	bne.n	800ebc6 <tcp_process_refused_data+0xd6>
      /* if err == ERR_ABRT, 'pcb' is already deallocated */
      /* Drop incoming packets because pcb is "full" (only if the incoming
         segment contains data). */
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_input: drop incoming packets, because pcb is \"full\"\n"));
      return ERR_ABRT;
 800ebc0:	f06f 030c 	mvn.w	r3, #12
 800ebc4:	e006      	b.n	800ebd4 <tcp_process_refused_data+0xe4>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
      if (rest != NULL) {
        pbuf_cat(refused_data, rest);
      }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
      pcb->refused_data = refused_data;
 800ebc6:	687b      	ldr	r3, [r7, #4]
 800ebc8:	68ba      	ldr	r2, [r7, #8]
 800ebca:	679a      	str	r2, [r3, #120]	; 0x78
      return ERR_INPROGRESS;
 800ebcc:	f06f 0304 	mvn.w	r3, #4
 800ebd0:	e000      	b.n	800ebd4 <tcp_process_refused_data+0xe4>
    }
  }
  return ERR_OK;
 800ebd2:	2300      	movs	r3, #0
}
 800ebd4:	4618      	mov	r0, r3
 800ebd6:	3714      	adds	r7, #20
 800ebd8:	46bd      	mov	sp, r7
 800ebda:	bd90      	pop	{r4, r7, pc}
 800ebdc:	0801974c 	.word	0x0801974c
 800ebe0:	08019c5c 	.word	0x08019c5c
 800ebe4:	08019790 	.word	0x08019790

0800ebe8 <tcp_segs_free>:
 *
 * @param seg tcp_seg list of TCP segments to free
 */
void
tcp_segs_free(struct tcp_seg *seg)
{
 800ebe8:	b580      	push	{r7, lr}
 800ebea:	b084      	sub	sp, #16
 800ebec:	af00      	add	r7, sp, #0
 800ebee:	6078      	str	r0, [r7, #4]
  while (seg != NULL) {
 800ebf0:	e007      	b.n	800ec02 <tcp_segs_free+0x1a>
    struct tcp_seg *next = seg->next;
 800ebf2:	687b      	ldr	r3, [r7, #4]
 800ebf4:	681b      	ldr	r3, [r3, #0]
 800ebf6:	60fb      	str	r3, [r7, #12]
    tcp_seg_free(seg);
 800ebf8:	6878      	ldr	r0, [r7, #4]
 800ebfa:	f000 f80a 	bl	800ec12 <tcp_seg_free>
    seg = next;
 800ebfe:	68fb      	ldr	r3, [r7, #12]
 800ec00:	607b      	str	r3, [r7, #4]
  while (seg != NULL) {
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	2b00      	cmp	r3, #0
 800ec06:	d1f4      	bne.n	800ebf2 <tcp_segs_free+0xa>
  }
}
 800ec08:	bf00      	nop
 800ec0a:	bf00      	nop
 800ec0c:	3710      	adds	r7, #16
 800ec0e:	46bd      	mov	sp, r7
 800ec10:	bd80      	pop	{r7, pc}

0800ec12 <tcp_seg_free>:
 *
 * @param seg single tcp_seg to free
 */
void
tcp_seg_free(struct tcp_seg *seg)
{
 800ec12:	b580      	push	{r7, lr}
 800ec14:	b082      	sub	sp, #8
 800ec16:	af00      	add	r7, sp, #0
 800ec18:	6078      	str	r0, [r7, #4]
  if (seg != NULL) {
 800ec1a:	687b      	ldr	r3, [r7, #4]
 800ec1c:	2b00      	cmp	r3, #0
 800ec1e:	d00c      	beq.n	800ec3a <tcp_seg_free+0x28>
    if (seg->p != NULL) {
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	685b      	ldr	r3, [r3, #4]
 800ec24:	2b00      	cmp	r3, #0
 800ec26:	d004      	beq.n	800ec32 <tcp_seg_free+0x20>
      pbuf_free(seg->p);
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	685b      	ldr	r3, [r3, #4]
 800ec2c:	4618      	mov	r0, r3
 800ec2e:	f7fe fb1f 	bl	800d270 <pbuf_free>
#if TCP_DEBUG
      seg->p = NULL;
#endif /* TCP_DEBUG */
    }
    memp_free(MEMP_TCP_SEG, seg);
 800ec32:	6879      	ldr	r1, [r7, #4]
 800ec34:	2003      	movs	r0, #3
 800ec36:	f7fd fc77 	bl	800c528 <memp_free>
  }
}
 800ec3a:	bf00      	nop
 800ec3c:	3708      	adds	r7, #8
 800ec3e:	46bd      	mov	sp, r7
 800ec40:	bd80      	pop	{r7, pc}
	...

0800ec44 <tcp_seg_copy>:
 * @param seg the old tcp_seg
 * @return a copy of seg
 */
struct tcp_seg *
tcp_seg_copy(struct tcp_seg *seg)
{
 800ec44:	b580      	push	{r7, lr}
 800ec46:	b084      	sub	sp, #16
 800ec48:	af00      	add	r7, sp, #0
 800ec4a:	6078      	str	r0, [r7, #4]
  struct tcp_seg *cseg;

  LWIP_ASSERT("tcp_seg_copy: invalid seg", seg != NULL);
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	2b00      	cmp	r3, #0
 800ec50:	d106      	bne.n	800ec60 <tcp_seg_copy+0x1c>
 800ec52:	4b0f      	ldr	r3, [pc, #60]	; (800ec90 <tcp_seg_copy+0x4c>)
 800ec54:	f240 6282 	movw	r2, #1666	; 0x682
 800ec58:	490e      	ldr	r1, [pc, #56]	; (800ec94 <tcp_seg_copy+0x50>)
 800ec5a:	480f      	ldr	r0, [pc, #60]	; (800ec98 <tcp_seg_copy+0x54>)
 800ec5c:	f008 f8c8 	bl	8016df0 <iprintf>

  cseg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG);
 800ec60:	2003      	movs	r0, #3
 800ec62:	f7fd fbeb 	bl	800c43c <memp_malloc>
 800ec66:	60f8      	str	r0, [r7, #12]
  if (cseg == NULL) {
 800ec68:	68fb      	ldr	r3, [r7, #12]
 800ec6a:	2b00      	cmp	r3, #0
 800ec6c:	d101      	bne.n	800ec72 <tcp_seg_copy+0x2e>
    return NULL;
 800ec6e:	2300      	movs	r3, #0
 800ec70:	e00a      	b.n	800ec88 <tcp_seg_copy+0x44>
  }
  SMEMCPY((u8_t *)cseg, (const u8_t *)seg, sizeof(struct tcp_seg));
 800ec72:	2210      	movs	r2, #16
 800ec74:	6879      	ldr	r1, [r7, #4]
 800ec76:	68f8      	ldr	r0, [r7, #12]
 800ec78:	f008 fa36 	bl	80170e8 <memcpy>
  pbuf_ref(cseg->p);
 800ec7c:	68fb      	ldr	r3, [r7, #12]
 800ec7e:	685b      	ldr	r3, [r3, #4]
 800ec80:	4618      	mov	r0, r3
 800ec82:	f7fe fb9b 	bl	800d3bc <pbuf_ref>
  return cseg;
 800ec86:	68fb      	ldr	r3, [r7, #12]
}
 800ec88:	4618      	mov	r0, r3
 800ec8a:	3710      	adds	r7, #16
 800ec8c:	46bd      	mov	sp, r7
 800ec8e:	bd80      	pop	{r7, pc}
 800ec90:	0801974c 	.word	0x0801974c
 800ec94:	08019ca0 	.word	0x08019ca0
 800ec98:	08019790 	.word	0x08019790

0800ec9c <tcp_recv_null>:
 * Default receive callback that is called if the user didn't register
 * a recv callback for the pcb.
 */
err_t
tcp_recv_null(void *arg, struct tcp_pcb *pcb, struct pbuf *p, err_t err)
{
 800ec9c:	b580      	push	{r7, lr}
 800ec9e:	b084      	sub	sp, #16
 800eca0:	af00      	add	r7, sp, #0
 800eca2:	60f8      	str	r0, [r7, #12]
 800eca4:	60b9      	str	r1, [r7, #8]
 800eca6:	607a      	str	r2, [r7, #4]
 800eca8:	70fb      	strb	r3, [r7, #3]
  LWIP_UNUSED_ARG(arg);

  LWIP_ERROR("tcp_recv_null: invalid pcb", pcb != NULL, return ERR_ARG);
 800ecaa:	68bb      	ldr	r3, [r7, #8]
 800ecac:	2b00      	cmp	r3, #0
 800ecae:	d109      	bne.n	800ecc4 <tcp_recv_null+0x28>
 800ecb0:	4b12      	ldr	r3, [pc, #72]	; (800ecfc <tcp_recv_null+0x60>)
 800ecb2:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 800ecb6:	4912      	ldr	r1, [pc, #72]	; (800ed00 <tcp_recv_null+0x64>)
 800ecb8:	4812      	ldr	r0, [pc, #72]	; (800ed04 <tcp_recv_null+0x68>)
 800ecba:	f008 f899 	bl	8016df0 <iprintf>
 800ecbe:	f06f 030f 	mvn.w	r3, #15
 800ecc2:	e016      	b.n	800ecf2 <tcp_recv_null+0x56>

  if (p != NULL) {
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	2b00      	cmp	r3, #0
 800ecc8:	d009      	beq.n	800ecde <tcp_recv_null+0x42>
    tcp_recved(pcb, p->tot_len);
 800ecca:	687b      	ldr	r3, [r7, #4]
 800eccc:	891b      	ldrh	r3, [r3, #8]
 800ecce:	4619      	mov	r1, r3
 800ecd0:	68b8      	ldr	r0, [r7, #8]
 800ecd2:	f7ff f9bb 	bl	800e04c <tcp_recved>
    pbuf_free(p);
 800ecd6:	6878      	ldr	r0, [r7, #4]
 800ecd8:	f7fe faca 	bl	800d270 <pbuf_free>
 800ecdc:	e008      	b.n	800ecf0 <tcp_recv_null+0x54>
  } else if (err == ERR_OK) {
 800ecde:	f997 3003 	ldrsb.w	r3, [r7, #3]
 800ece2:	2b00      	cmp	r3, #0
 800ece4:	d104      	bne.n	800ecf0 <tcp_recv_null+0x54>
    return tcp_close(pcb);
 800ece6:	68b8      	ldr	r0, [r7, #8]
 800ece8:	f7fe ff6c 	bl	800dbc4 <tcp_close>
 800ecec:	4603      	mov	r3, r0
 800ecee:	e000      	b.n	800ecf2 <tcp_recv_null+0x56>
  }
  return ERR_OK;
 800ecf0:	2300      	movs	r3, #0
}
 800ecf2:	4618      	mov	r0, r3
 800ecf4:	3710      	adds	r7, #16
 800ecf6:	46bd      	mov	sp, r7
 800ecf8:	bd80      	pop	{r7, pc}
 800ecfa:	bf00      	nop
 800ecfc:	0801974c 	.word	0x0801974c
 800ed00:	08019cbc 	.word	0x08019cbc
 800ed04:	08019790 	.word	0x08019790

0800ed08 <tcp_kill_prio>:
 *
 * @param prio minimum priority
 */
static void
tcp_kill_prio(u8_t prio)
{
 800ed08:	b580      	push	{r7, lr}
 800ed0a:	b086      	sub	sp, #24
 800ed0c:	af00      	add	r7, sp, #0
 800ed0e:	4603      	mov	r3, r0
 800ed10:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;
  u8_t mprio;

  mprio = LWIP_MIN(TCP_PRIO_MAX, prio);
 800ed12:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800ed16:	2b00      	cmp	r3, #0
 800ed18:	db01      	blt.n	800ed1e <tcp_kill_prio+0x16>
 800ed1a:	79fb      	ldrb	r3, [r7, #7]
 800ed1c:	e000      	b.n	800ed20 <tcp_kill_prio+0x18>
 800ed1e:	237f      	movs	r3, #127	; 0x7f
 800ed20:	72fb      	strb	r3, [r7, #11]

  /* We want to kill connections with a lower prio, so bail out if 
   * supplied prio is 0 - there can never be a lower prio
   */
  if (mprio == 0) {
 800ed22:	7afb      	ldrb	r3, [r7, #11]
 800ed24:	2b00      	cmp	r3, #0
 800ed26:	d034      	beq.n	800ed92 <tcp_kill_prio+0x8a>
  /* We only want kill connections with a lower prio, so decrement prio by one 
   * and start searching for oldest connection with same or lower priority than mprio.
   * We want to find the connections with the lowest possible prio, and among
   * these the one with the longest inactivity time.
   */
  mprio--;
 800ed28:	7afb      	ldrb	r3, [r7, #11]
 800ed2a:	3b01      	subs	r3, #1
 800ed2c:	72fb      	strb	r3, [r7, #11]

  inactivity = 0;
 800ed2e:	2300      	movs	r3, #0
 800ed30:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800ed32:	2300      	movs	r3, #0
 800ed34:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed36:	4b19      	ldr	r3, [pc, #100]	; (800ed9c <tcp_kill_prio+0x94>)
 800ed38:	681b      	ldr	r3, [r3, #0]
 800ed3a:	617b      	str	r3, [r7, #20]
 800ed3c:	e01f      	b.n	800ed7e <tcp_kill_prio+0x76>
        /* lower prio is always a kill candidate */
    if ((pcb->prio < mprio) ||
 800ed3e:	697b      	ldr	r3, [r7, #20]
 800ed40:	7d5b      	ldrb	r3, [r3, #21]
 800ed42:	7afa      	ldrb	r2, [r7, #11]
 800ed44:	429a      	cmp	r2, r3
 800ed46:	d80c      	bhi.n	800ed62 <tcp_kill_prio+0x5a>
        /* longer inactivity is also a kill candidate */
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed48:	697b      	ldr	r3, [r7, #20]
 800ed4a:	7d5b      	ldrb	r3, [r3, #21]
    if ((pcb->prio < mprio) ||
 800ed4c:	7afa      	ldrb	r2, [r7, #11]
 800ed4e:	429a      	cmp	r2, r3
 800ed50:	d112      	bne.n	800ed78 <tcp_kill_prio+0x70>
        ((pcb->prio == mprio) && ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity))) {
 800ed52:	4b13      	ldr	r3, [pc, #76]	; (800eda0 <tcp_kill_prio+0x98>)
 800ed54:	681a      	ldr	r2, [r3, #0]
 800ed56:	697b      	ldr	r3, [r7, #20]
 800ed58:	6a1b      	ldr	r3, [r3, #32]
 800ed5a:	1ad3      	subs	r3, r2, r3
 800ed5c:	68fa      	ldr	r2, [r7, #12]
 800ed5e:	429a      	cmp	r2, r3
 800ed60:	d80a      	bhi.n	800ed78 <tcp_kill_prio+0x70>
      inactivity = tcp_ticks - pcb->tmr;
 800ed62:	4b0f      	ldr	r3, [pc, #60]	; (800eda0 <tcp_kill_prio+0x98>)
 800ed64:	681a      	ldr	r2, [r3, #0]
 800ed66:	697b      	ldr	r3, [r7, #20]
 800ed68:	6a1b      	ldr	r3, [r3, #32]
 800ed6a:	1ad3      	subs	r3, r2, r3
 800ed6c:	60fb      	str	r3, [r7, #12]
      inactive   = pcb;
 800ed6e:	697b      	ldr	r3, [r7, #20]
 800ed70:	613b      	str	r3, [r7, #16]
      mprio      = pcb->prio;
 800ed72:	697b      	ldr	r3, [r7, #20]
 800ed74:	7d5b      	ldrb	r3, [r3, #21]
 800ed76:	72fb      	strb	r3, [r7, #11]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ed78:	697b      	ldr	r3, [r7, #20]
 800ed7a:	68db      	ldr	r3, [r3, #12]
 800ed7c:	617b      	str	r3, [r7, #20]
 800ed7e:	697b      	ldr	r3, [r7, #20]
 800ed80:	2b00      	cmp	r3, #0
 800ed82:	d1dc      	bne.n	800ed3e <tcp_kill_prio+0x36>
    }
  }
  if (inactive != NULL) {
 800ed84:	693b      	ldr	r3, [r7, #16]
 800ed86:	2b00      	cmp	r3, #0
 800ed88:	d004      	beq.n	800ed94 <tcp_kill_prio+0x8c>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_prio: killing oldest PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ed8a:	6938      	ldr	r0, [r7, #16]
 800ed8c:	f7ff f860 	bl	800de50 <tcp_abort>
 800ed90:	e000      	b.n	800ed94 <tcp_kill_prio+0x8c>
    return;
 800ed92:	bf00      	nop
  }
}
 800ed94:	3718      	adds	r7, #24
 800ed96:	46bd      	mov	sp, r7
 800ed98:	bd80      	pop	{r7, pc}
 800ed9a:	bf00      	nop
 800ed9c:	2000f800 	.word	0x2000f800
 800eda0:	2000f7f4 	.word	0x2000f7f4

0800eda4 <tcp_kill_state>:
 * Kills the oldest connection that is in specific state.
 * Called from tcp_alloc() for LAST_ACK and CLOSING if no more connections are available.
 */
static void
tcp_kill_state(enum tcp_state state)
{
 800eda4:	b580      	push	{r7, lr}
 800eda6:	b086      	sub	sp, #24
 800eda8:	af00      	add	r7, sp, #0
 800edaa:	4603      	mov	r3, r0
 800edac:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  LWIP_ASSERT("invalid state", (state == CLOSING) || (state == LAST_ACK));
 800edae:	79fb      	ldrb	r3, [r7, #7]
 800edb0:	2b08      	cmp	r3, #8
 800edb2:	d009      	beq.n	800edc8 <tcp_kill_state+0x24>
 800edb4:	79fb      	ldrb	r3, [r7, #7]
 800edb6:	2b09      	cmp	r3, #9
 800edb8:	d006      	beq.n	800edc8 <tcp_kill_state+0x24>
 800edba:	4b1a      	ldr	r3, [pc, #104]	; (800ee24 <tcp_kill_state+0x80>)
 800edbc:	f240 62dd 	movw	r2, #1757	; 0x6dd
 800edc0:	4919      	ldr	r1, [pc, #100]	; (800ee28 <tcp_kill_state+0x84>)
 800edc2:	481a      	ldr	r0, [pc, #104]	; (800ee2c <tcp_kill_state+0x88>)
 800edc4:	f008 f814 	bl	8016df0 <iprintf>

  inactivity = 0;
 800edc8:	2300      	movs	r3, #0
 800edca:	60fb      	str	r3, [r7, #12]
  inactive = NULL;
 800edcc:	2300      	movs	r3, #0
 800edce:	613b      	str	r3, [r7, #16]
  /* Go through the list of active pcbs and get the oldest pcb that is in state
     CLOSING/LAST_ACK. */
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800edd0:	4b17      	ldr	r3, [pc, #92]	; (800ee30 <tcp_kill_state+0x8c>)
 800edd2:	681b      	ldr	r3, [r3, #0]
 800edd4:	617b      	str	r3, [r7, #20]
 800edd6:	e017      	b.n	800ee08 <tcp_kill_state+0x64>
    if (pcb->state == state) {
 800edd8:	697b      	ldr	r3, [r7, #20]
 800edda:	7d1b      	ldrb	r3, [r3, #20]
 800eddc:	79fa      	ldrb	r2, [r7, #7]
 800edde:	429a      	cmp	r2, r3
 800ede0:	d10f      	bne.n	800ee02 <tcp_kill_state+0x5e>
      if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ede2:	4b14      	ldr	r3, [pc, #80]	; (800ee34 <tcp_kill_state+0x90>)
 800ede4:	681a      	ldr	r2, [r3, #0]
 800ede6:	697b      	ldr	r3, [r7, #20]
 800ede8:	6a1b      	ldr	r3, [r3, #32]
 800edea:	1ad3      	subs	r3, r2, r3
 800edec:	68fa      	ldr	r2, [r7, #12]
 800edee:	429a      	cmp	r2, r3
 800edf0:	d807      	bhi.n	800ee02 <tcp_kill_state+0x5e>
        inactivity = tcp_ticks - pcb->tmr;
 800edf2:	4b10      	ldr	r3, [pc, #64]	; (800ee34 <tcp_kill_state+0x90>)
 800edf4:	681a      	ldr	r2, [r3, #0]
 800edf6:	697b      	ldr	r3, [r7, #20]
 800edf8:	6a1b      	ldr	r3, [r3, #32]
 800edfa:	1ad3      	subs	r3, r2, r3
 800edfc:	60fb      	str	r3, [r7, #12]
        inactive = pcb;
 800edfe:	697b      	ldr	r3, [r7, #20]
 800ee00:	613b      	str	r3, [r7, #16]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee02:	697b      	ldr	r3, [r7, #20]
 800ee04:	68db      	ldr	r3, [r3, #12]
 800ee06:	617b      	str	r3, [r7, #20]
 800ee08:	697b      	ldr	r3, [r7, #20]
 800ee0a:	2b00      	cmp	r3, #0
 800ee0c:	d1e4      	bne.n	800edd8 <tcp_kill_state+0x34>
      }
    }
  }
  if (inactive != NULL) {
 800ee0e:	693b      	ldr	r3, [r7, #16]
 800ee10:	2b00      	cmp	r3, #0
 800ee12:	d003      	beq.n	800ee1c <tcp_kill_state+0x78>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_closing: killing oldest %s PCB %p (%"S32_F")\n",
                            tcp_state_str[state], (void *)inactive, inactivity));
    /* Don't send a RST, since no data is lost. */
    tcp_abandon(inactive, 0);
 800ee14:	2100      	movs	r1, #0
 800ee16:	6938      	ldr	r0, [r7, #16]
 800ee18:	f7fe ff5c 	bl	800dcd4 <tcp_abandon>
  }
}
 800ee1c:	bf00      	nop
 800ee1e:	3718      	adds	r7, #24
 800ee20:	46bd      	mov	sp, r7
 800ee22:	bd80      	pop	{r7, pc}
 800ee24:	0801974c 	.word	0x0801974c
 800ee28:	08019cd8 	.word	0x08019cd8
 800ee2c:	08019790 	.word	0x08019790
 800ee30:	2000f800 	.word	0x2000f800
 800ee34:	2000f7f4 	.word	0x2000f7f4

0800ee38 <tcp_kill_timewait>:
 * Kills the oldest connection that is in TIME_WAIT state.
 * Called from tcp_alloc() if no more connections are available.
 */
static void
tcp_kill_timewait(void)
{
 800ee38:	b580      	push	{r7, lr}
 800ee3a:	b084      	sub	sp, #16
 800ee3c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb, *inactive;
  u32_t inactivity;

  inactivity = 0;
 800ee3e:	2300      	movs	r3, #0
 800ee40:	607b      	str	r3, [r7, #4]
  inactive = NULL;
 800ee42:	2300      	movs	r3, #0
 800ee44:	60bb      	str	r3, [r7, #8]
  /* Go through the list of TIME_WAIT pcbs and get the oldest pcb. */
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee46:	4b12      	ldr	r3, [pc, #72]	; (800ee90 <tcp_kill_timewait+0x58>)
 800ee48:	681b      	ldr	r3, [r3, #0]
 800ee4a:	60fb      	str	r3, [r7, #12]
 800ee4c:	e012      	b.n	800ee74 <tcp_kill_timewait+0x3c>
    if ((u32_t)(tcp_ticks - pcb->tmr) >= inactivity) {
 800ee4e:	4b11      	ldr	r3, [pc, #68]	; (800ee94 <tcp_kill_timewait+0x5c>)
 800ee50:	681a      	ldr	r2, [r3, #0]
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	6a1b      	ldr	r3, [r3, #32]
 800ee56:	1ad3      	subs	r3, r2, r3
 800ee58:	687a      	ldr	r2, [r7, #4]
 800ee5a:	429a      	cmp	r2, r3
 800ee5c:	d807      	bhi.n	800ee6e <tcp_kill_timewait+0x36>
      inactivity = tcp_ticks - pcb->tmr;
 800ee5e:	4b0d      	ldr	r3, [pc, #52]	; (800ee94 <tcp_kill_timewait+0x5c>)
 800ee60:	681a      	ldr	r2, [r3, #0]
 800ee62:	68fb      	ldr	r3, [r7, #12]
 800ee64:	6a1b      	ldr	r3, [r3, #32]
 800ee66:	1ad3      	subs	r3, r2, r3
 800ee68:	607b      	str	r3, [r7, #4]
      inactive = pcb;
 800ee6a:	68fb      	ldr	r3, [r7, #12]
 800ee6c:	60bb      	str	r3, [r7, #8]
  for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800ee6e:	68fb      	ldr	r3, [r7, #12]
 800ee70:	68db      	ldr	r3, [r3, #12]
 800ee72:	60fb      	str	r3, [r7, #12]
 800ee74:	68fb      	ldr	r3, [r7, #12]
 800ee76:	2b00      	cmp	r3, #0
 800ee78:	d1e9      	bne.n	800ee4e <tcp_kill_timewait+0x16>
    }
  }
  if (inactive != NULL) {
 800ee7a:	68bb      	ldr	r3, [r7, #8]
 800ee7c:	2b00      	cmp	r3, #0
 800ee7e:	d002      	beq.n	800ee86 <tcp_kill_timewait+0x4e>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_kill_timewait: killing oldest TIME-WAIT PCB %p (%"S32_F")\n",
                            (void *)inactive, inactivity));
    tcp_abort(inactive);
 800ee80:	68b8      	ldr	r0, [r7, #8]
 800ee82:	f7fe ffe5 	bl	800de50 <tcp_abort>
  }
}
 800ee86:	bf00      	nop
 800ee88:	3710      	adds	r7, #16
 800ee8a:	46bd      	mov	sp, r7
 800ee8c:	bd80      	pop	{r7, pc}
 800ee8e:	bf00      	nop
 800ee90:	2000f804 	.word	0x2000f804
 800ee94:	2000f7f4 	.word	0x2000f7f4

0800ee98 <tcp_handle_closepend>:
 * now send the FIN (which failed before), the pcb might be in a state that is
 * OK for us to now free it.
 */
static void
tcp_handle_closepend(void)
{
 800ee98:	b580      	push	{r7, lr}
 800ee9a:	b082      	sub	sp, #8
 800ee9c:	af00      	add	r7, sp, #0
  struct tcp_pcb *pcb = tcp_active_pcbs;
 800ee9e:	4b10      	ldr	r3, [pc, #64]	; (800eee0 <tcp_handle_closepend+0x48>)
 800eea0:	681b      	ldr	r3, [r3, #0]
 800eea2:	607b      	str	r3, [r7, #4]

  while (pcb != NULL) {
 800eea4:	e014      	b.n	800eed0 <tcp_handle_closepend+0x38>
    struct tcp_pcb *next = pcb->next;
 800eea6:	687b      	ldr	r3, [r7, #4]
 800eea8:	68db      	ldr	r3, [r3, #12]
 800eeaa:	603b      	str	r3, [r7, #0]
    /* send pending FIN */
    if (pcb->flags & TF_CLOSEPEND) {
 800eeac:	687b      	ldr	r3, [r7, #4]
 800eeae:	8b5b      	ldrh	r3, [r3, #26]
 800eeb0:	f003 0308 	and.w	r3, r3, #8
 800eeb4:	2b00      	cmp	r3, #0
 800eeb6:	d009      	beq.n	800eecc <tcp_handle_closepend+0x34>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_handle_closepend: pending FIN\n"));
      tcp_clear_flags(pcb, TF_CLOSEPEND);
 800eeb8:	687b      	ldr	r3, [r7, #4]
 800eeba:	8b5b      	ldrh	r3, [r3, #26]
 800eebc:	f023 0308 	bic.w	r3, r3, #8
 800eec0:	b29a      	uxth	r2, r3
 800eec2:	687b      	ldr	r3, [r7, #4]
 800eec4:	835a      	strh	r2, [r3, #26]
      tcp_close_shutdown_fin(pcb);
 800eec6:	6878      	ldr	r0, [r7, #4]
 800eec8:	f7fe fe12 	bl	800daf0 <tcp_close_shutdown_fin>
    }
    pcb = next;
 800eecc:	683b      	ldr	r3, [r7, #0]
 800eece:	607b      	str	r3, [r7, #4]
  while (pcb != NULL) {
 800eed0:	687b      	ldr	r3, [r7, #4]
 800eed2:	2b00      	cmp	r3, #0
 800eed4:	d1e7      	bne.n	800eea6 <tcp_handle_closepend+0xe>
  }
}
 800eed6:	bf00      	nop
 800eed8:	bf00      	nop
 800eeda:	3708      	adds	r7, #8
 800eedc:	46bd      	mov	sp, r7
 800eede:	bd80      	pop	{r7, pc}
 800eee0:	2000f800 	.word	0x2000f800

0800eee4 <tcp_alloc>:
 * @param prio priority for the new pcb
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_alloc(u8_t prio)
{
 800eee4:	b580      	push	{r7, lr}
 800eee6:	b084      	sub	sp, #16
 800eee8:	af00      	add	r7, sp, #0
 800eeea:	4603      	mov	r3, r0
 800eeec:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800eeee:	2001      	movs	r0, #1
 800eef0:	f7fd faa4 	bl	800c43c <memp_malloc>
 800eef4:	60f8      	str	r0, [r7, #12]
  if (pcb == NULL) {
 800eef6:	68fb      	ldr	r3, [r7, #12]
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d126      	bne.n	800ef4a <tcp_alloc+0x66>
    /* Try to send FIN for all pcbs stuck in TF_CLOSEPEND first */
    tcp_handle_closepend();
 800eefc:	f7ff ffcc 	bl	800ee98 <tcp_handle_closepend>

    /* Try killing oldest connection in TIME-WAIT. */
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest TIME-WAIT connection\n"));
    tcp_kill_timewait();
 800ef00:	f7ff ff9a 	bl	800ee38 <tcp_kill_timewait>
    /* Try to allocate a tcp_pcb again. */
    pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef04:	2001      	movs	r0, #1
 800ef06:	f7fd fa99 	bl	800c43c <memp_malloc>
 800ef0a:	60f8      	str	r0, [r7, #12]
    if (pcb == NULL) {
 800ef0c:	68fb      	ldr	r3, [r7, #12]
 800ef0e:	2b00      	cmp	r3, #0
 800ef10:	d11b      	bne.n	800ef4a <tcp_alloc+0x66>
      /* Try killing oldest connection in LAST-ACK (these wouldn't go to TIME-WAIT). */
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest LAST-ACK connection\n"));
      tcp_kill_state(LAST_ACK);
 800ef12:	2009      	movs	r0, #9
 800ef14:	f7ff ff46 	bl	800eda4 <tcp_kill_state>
      /* Try to allocate a tcp_pcb again. */
      pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef18:	2001      	movs	r0, #1
 800ef1a:	f7fd fa8f 	bl	800c43c <memp_malloc>
 800ef1e:	60f8      	str	r0, [r7, #12]
      if (pcb == NULL) {
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	2b00      	cmp	r3, #0
 800ef24:	d111      	bne.n	800ef4a <tcp_alloc+0x66>
        /* Try killing oldest connection in CLOSING. */
        LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing off oldest CLOSING connection\n"));
        tcp_kill_state(CLOSING);
 800ef26:	2008      	movs	r0, #8
 800ef28:	f7ff ff3c 	bl	800eda4 <tcp_kill_state>
        /* Try to allocate a tcp_pcb again. */
        pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef2c:	2001      	movs	r0, #1
 800ef2e:	f7fd fa85 	bl	800c43c <memp_malloc>
 800ef32:	60f8      	str	r0, [r7, #12]
        if (pcb == NULL) {
 800ef34:	68fb      	ldr	r3, [r7, #12]
 800ef36:	2b00      	cmp	r3, #0
 800ef38:	d107      	bne.n	800ef4a <tcp_alloc+0x66>
          /* Try killing oldest active connection with lower priority than the new one. */
          LWIP_DEBUGF(TCP_DEBUG, ("tcp_alloc: killing oldest connection with prio lower than %d\n", prio));
          tcp_kill_prio(prio);
 800ef3a:	79fb      	ldrb	r3, [r7, #7]
 800ef3c:	4618      	mov	r0, r3
 800ef3e:	f7ff fee3 	bl	800ed08 <tcp_kill_prio>
          /* Try to allocate a tcp_pcb again. */
          pcb = (struct tcp_pcb *)memp_malloc(MEMP_TCP_PCB);
 800ef42:	2001      	movs	r0, #1
 800ef44:	f7fd fa7a 	bl	800c43c <memp_malloc>
 800ef48:	60f8      	str	r0, [r7, #12]
    if (pcb != NULL) {
      /* adjust err stats: memp_malloc failed above */
      MEMP_STATS_DEC(err, MEMP_TCP_PCB);
    }
  }
  if (pcb != NULL) {
 800ef4a:	68fb      	ldr	r3, [r7, #12]
 800ef4c:	2b00      	cmp	r3, #0
 800ef4e:	d03f      	beq.n	800efd0 <tcp_alloc+0xec>
    /* zero out the whole pcb, so there is no need to initialize members to zero */
    memset(pcb, 0, sizeof(struct tcp_pcb));
 800ef50:	229c      	movs	r2, #156	; 0x9c
 800ef52:	2100      	movs	r1, #0
 800ef54:	68f8      	ldr	r0, [r7, #12]
 800ef56:	f007 ffea 	bl	8016f2e <memset>
    pcb->prio = prio;
 800ef5a:	68fb      	ldr	r3, [r7, #12]
 800ef5c:	79fa      	ldrb	r2, [r7, #7]
 800ef5e:	755a      	strb	r2, [r3, #21]
    pcb->snd_buf = TCP_SND_BUF;
 800ef60:	68fb      	ldr	r3, [r7, #12]
 800ef62:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800ef66:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
    /* Start with a window that does not need scaling. When window scaling is
       enabled and used, the window is enlarged when both sides agree on scaling. */
    pcb->rcv_wnd = pcb->rcv_ann_wnd = TCPWND_MIN16(TCP_WND);
 800ef6a:	68fb      	ldr	r3, [r7, #12]
 800ef6c:	f44f 6206 	mov.w	r2, #2144	; 0x860
 800ef70:	855a      	strh	r2, [r3, #42]	; 0x2a
 800ef72:	68fb      	ldr	r3, [r7, #12]
 800ef74:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 800ef76:	68fb      	ldr	r3, [r7, #12]
 800ef78:	851a      	strh	r2, [r3, #40]	; 0x28
    pcb->ttl = TCP_TTL;
 800ef7a:	68fb      	ldr	r3, [r7, #12]
 800ef7c:	22ff      	movs	r2, #255	; 0xff
 800ef7e:	72da      	strb	r2, [r3, #11]
    /* As initial send MSS, we use TCP_MSS but limit it to 536.
       The send MSS is updated when an MSS option is received. */
    pcb->mss = INITIAL_MSS;
 800ef80:	68fb      	ldr	r3, [r7, #12]
 800ef82:	f44f 7206 	mov.w	r2, #536	; 0x218
 800ef86:	865a      	strh	r2, [r3, #50]	; 0x32
    pcb->rto = 3000 / TCP_SLOW_INTERVAL;
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	2206      	movs	r2, #6
 800ef8c:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40
    pcb->sv = 3000 / TCP_SLOW_INTERVAL;
 800ef90:	68fb      	ldr	r3, [r7, #12]
 800ef92:	2206      	movs	r2, #6
 800ef94:	87da      	strh	r2, [r3, #62]	; 0x3e
    pcb->rtime = -1;
 800ef96:	68fb      	ldr	r3, [r7, #12]
 800ef98:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800ef9c:	861a      	strh	r2, [r3, #48]	; 0x30
    pcb->cwnd = 1;
 800ef9e:	68fb      	ldr	r3, [r7, #12]
 800efa0:	2201      	movs	r2, #1
 800efa2:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
    pcb->tmr = tcp_ticks;
 800efa6:	4b0d      	ldr	r3, [pc, #52]	; (800efdc <tcp_alloc+0xf8>)
 800efa8:	681a      	ldr	r2, [r3, #0]
 800efaa:	68fb      	ldr	r3, [r7, #12]
 800efac:	621a      	str	r2, [r3, #32]
    pcb->last_timer = tcp_timer_ctr;
 800efae:	4b0c      	ldr	r3, [pc, #48]	; (800efe0 <tcp_alloc+0xfc>)
 800efb0:	781a      	ldrb	r2, [r3, #0]
 800efb2:	68fb      	ldr	r3, [r7, #12]
 800efb4:	779a      	strb	r2, [r3, #30]
    of using the largest advertised receive window.  We've seen complications with
    receiving TCPs that use window scaling and/or window auto-tuning where the
    initial advertised window is very small and then grows rapidly once the
    connection is established. To avoid these complications, we set ssthresh to the
    largest effective cwnd (amount of in-flight data) that the sender can have. */
    pcb->ssthresh = TCP_SND_BUF;
 800efb6:	68fb      	ldr	r3, [r7, #12]
 800efb8:	f44f 6286 	mov.w	r2, #1072	; 0x430
 800efbc:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

#if LWIP_CALLBACK_API
    pcb->recv = tcp_recv_null;
 800efc0:	68fb      	ldr	r3, [r7, #12]
 800efc2:	4a08      	ldr	r2, [pc, #32]	; (800efe4 <tcp_alloc+0x100>)
 800efc4:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
#endif /* LWIP_CALLBACK_API */

    /* Init KEEPALIVE timer */
    pcb->keep_idle  = TCP_KEEPIDLE_DEFAULT;
 800efc8:	68fb      	ldr	r3, [r7, #12]
 800efca:	4a07      	ldr	r2, [pc, #28]	; (800efe8 <tcp_alloc+0x104>)
 800efcc:	f8c3 2094 	str.w	r2, [r3, #148]	; 0x94
#if LWIP_TCP_KEEPALIVE
    pcb->keep_intvl = TCP_KEEPINTVL_DEFAULT;
    pcb->keep_cnt   = TCP_KEEPCNT_DEFAULT;
#endif /* LWIP_TCP_KEEPALIVE */
  }
  return pcb;
 800efd0:	68fb      	ldr	r3, [r7, #12]
}
 800efd2:	4618      	mov	r0, r3
 800efd4:	3710      	adds	r7, #16
 800efd6:	46bd      	mov	sp, r7
 800efd8:	bd80      	pop	{r7, pc}
 800efda:	bf00      	nop
 800efdc:	2000f7f4 	.word	0x2000f7f4
 800efe0:	2000f80a 	.word	0x2000f80a
 800efe4:	0800ec9d 	.word	0x0800ec9d
 800efe8:	006ddd00 	.word	0x006ddd00

0800efec <tcp_new_ip_type>:
 * supply @ref IPADDR_TYPE_ANY as argument and bind to @ref IP_ANY_TYPE.
 * @return a new tcp_pcb that initially is in state CLOSED
 */
struct tcp_pcb *
tcp_new_ip_type(u8_t type)
{
 800efec:	b580      	push	{r7, lr}
 800efee:	b084      	sub	sp, #16
 800eff0:	af00      	add	r7, sp, #0
 800eff2:	4603      	mov	r3, r0
 800eff4:	71fb      	strb	r3, [r7, #7]
  struct tcp_pcb *pcb;
  pcb = tcp_alloc(TCP_PRIO_NORMAL);
 800eff6:	2040      	movs	r0, #64	; 0x40
 800eff8:	f7ff ff74 	bl	800eee4 <tcp_alloc>
 800effc:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 800effe:	68fb      	ldr	r3, [r7, #12]
}
 800f000:	4618      	mov	r0, r3
 800f002:	3710      	adds	r7, #16
 800f004:	46bd      	mov	sp, r7
 800f006:	bd80      	pop	{r7, pc}

0800f008 <tcp_arg>:
 * @param pcb tcp_pcb to set the callback argument
 * @param arg void pointer argument to pass to callback functions
 */
void
tcp_arg(struct tcp_pcb *pcb, void *arg)
{
 800f008:	b480      	push	{r7}
 800f00a:	b083      	sub	sp, #12
 800f00c:	af00      	add	r7, sp, #0
 800f00e:	6078      	str	r0, [r7, #4]
 800f010:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  /* This function is allowed to be called for both listen pcbs and
     connection pcbs. */
  if (pcb != NULL) {
 800f012:	687b      	ldr	r3, [r7, #4]
 800f014:	2b00      	cmp	r3, #0
 800f016:	d002      	beq.n	800f01e <tcp_arg+0x16>
    pcb->callback_arg = arg;
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	683a      	ldr	r2, [r7, #0]
 800f01c:	611a      	str	r2, [r3, #16]
  }
}
 800f01e:	bf00      	nop
 800f020:	370c      	adds	r7, #12
 800f022:	46bd      	mov	sp, r7
 800f024:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f028:	4770      	bx	lr
	...

0800f02c <tcp_recv>:
 * @param pcb tcp_pcb to set the recv callback
 * @param recv callback function to call for this pcb when data is received
 */
void
tcp_recv(struct tcp_pcb *pcb, tcp_recv_fn recv)
{
 800f02c:	b580      	push	{r7, lr}
 800f02e:	b082      	sub	sp, #8
 800f030:	af00      	add	r7, sp, #0
 800f032:	6078      	str	r0, [r7, #4]
 800f034:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f036:	687b      	ldr	r3, [r7, #4]
 800f038:	2b00      	cmp	r3, #0
 800f03a:	d00e      	beq.n	800f05a <tcp_recv+0x2e>
    LWIP_ASSERT("invalid socket state for recv callback", pcb->state != LISTEN);
 800f03c:	687b      	ldr	r3, [r7, #4]
 800f03e:	7d1b      	ldrb	r3, [r3, #20]
 800f040:	2b01      	cmp	r3, #1
 800f042:	d106      	bne.n	800f052 <tcp_recv+0x26>
 800f044:	4b07      	ldr	r3, [pc, #28]	; (800f064 <tcp_recv+0x38>)
 800f046:	f240 72df 	movw	r2, #2015	; 0x7df
 800f04a:	4907      	ldr	r1, [pc, #28]	; (800f068 <tcp_recv+0x3c>)
 800f04c:	4807      	ldr	r0, [pc, #28]	; (800f06c <tcp_recv+0x40>)
 800f04e:	f007 fecf 	bl	8016df0 <iprintf>
    pcb->recv = recv;
 800f052:	687b      	ldr	r3, [r7, #4]
 800f054:	683a      	ldr	r2, [r7, #0]
 800f056:	f8c3 2084 	str.w	r2, [r3, #132]	; 0x84
  }
}
 800f05a:	bf00      	nop
 800f05c:	3708      	adds	r7, #8
 800f05e:	46bd      	mov	sp, r7
 800f060:	bd80      	pop	{r7, pc}
 800f062:	bf00      	nop
 800f064:	0801974c 	.word	0x0801974c
 800f068:	08019ce8 	.word	0x08019ce8
 800f06c:	08019790 	.word	0x08019790

0800f070 <tcp_sent>:
 * @param pcb tcp_pcb to set the sent callback
 * @param sent callback function to call for this pcb when data is successfully sent
 */
void
tcp_sent(struct tcp_pcb *pcb, tcp_sent_fn sent)
{
 800f070:	b580      	push	{r7, lr}
 800f072:	b082      	sub	sp, #8
 800f074:	af00      	add	r7, sp, #0
 800f076:	6078      	str	r0, [r7, #4]
 800f078:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f07a:	687b      	ldr	r3, [r7, #4]
 800f07c:	2b00      	cmp	r3, #0
 800f07e:	d00e      	beq.n	800f09e <tcp_sent+0x2e>
    LWIP_ASSERT("invalid socket state for sent callback", pcb->state != LISTEN);
 800f080:	687b      	ldr	r3, [r7, #4]
 800f082:	7d1b      	ldrb	r3, [r3, #20]
 800f084:	2b01      	cmp	r3, #1
 800f086:	d106      	bne.n	800f096 <tcp_sent+0x26>
 800f088:	4b07      	ldr	r3, [pc, #28]	; (800f0a8 <tcp_sent+0x38>)
 800f08a:	f240 72f3 	movw	r2, #2035	; 0x7f3
 800f08e:	4907      	ldr	r1, [pc, #28]	; (800f0ac <tcp_sent+0x3c>)
 800f090:	4807      	ldr	r0, [pc, #28]	; (800f0b0 <tcp_sent+0x40>)
 800f092:	f007 fead 	bl	8016df0 <iprintf>
    pcb->sent = sent;
 800f096:	687b      	ldr	r3, [r7, #4]
 800f098:	683a      	ldr	r2, [r7, #0]
 800f09a:	f8c3 2080 	str.w	r2, [r3, #128]	; 0x80
  }
}
 800f09e:	bf00      	nop
 800f0a0:	3708      	adds	r7, #8
 800f0a2:	46bd      	mov	sp, r7
 800f0a4:	bd80      	pop	{r7, pc}
 800f0a6:	bf00      	nop
 800f0a8:	0801974c 	.word	0x0801974c
 800f0ac:	08019d10 	.word	0x08019d10
 800f0b0:	08019790 	.word	0x08019790

0800f0b4 <tcp_err>:
 * @param err callback function to call for this pcb when a fatal error
 *        has occurred on the connection
 */
void
tcp_err(struct tcp_pcb *pcb, tcp_err_fn err)
{
 800f0b4:	b580      	push	{r7, lr}
 800f0b6:	b082      	sub	sp, #8
 800f0b8:	af00      	add	r7, sp, #0
 800f0ba:	6078      	str	r0, [r7, #4]
 800f0bc:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if (pcb != NULL) {
 800f0be:	687b      	ldr	r3, [r7, #4]
 800f0c0:	2b00      	cmp	r3, #0
 800f0c2:	d00e      	beq.n	800f0e2 <tcp_err+0x2e>
    LWIP_ASSERT("invalid socket state for err callback", pcb->state != LISTEN);
 800f0c4:	687b      	ldr	r3, [r7, #4]
 800f0c6:	7d1b      	ldrb	r3, [r3, #20]
 800f0c8:	2b01      	cmp	r3, #1
 800f0ca:	d106      	bne.n	800f0da <tcp_err+0x26>
 800f0cc:	4b07      	ldr	r3, [pc, #28]	; (800f0ec <tcp_err+0x38>)
 800f0ce:	f640 020d 	movw	r2, #2061	; 0x80d
 800f0d2:	4907      	ldr	r1, [pc, #28]	; (800f0f0 <tcp_err+0x3c>)
 800f0d4:	4807      	ldr	r0, [pc, #28]	; (800f0f4 <tcp_err+0x40>)
 800f0d6:	f007 fe8b 	bl	8016df0 <iprintf>
    pcb->errf = err;
 800f0da:	687b      	ldr	r3, [r7, #4]
 800f0dc:	683a      	ldr	r2, [r7, #0]
 800f0de:	f8c3 2090 	str.w	r2, [r3, #144]	; 0x90
  }
}
 800f0e2:	bf00      	nop
 800f0e4:	3708      	adds	r7, #8
 800f0e6:	46bd      	mov	sp, r7
 800f0e8:	bd80      	pop	{r7, pc}
 800f0ea:	bf00      	nop
 800f0ec:	0801974c 	.word	0x0801974c
 800f0f0:	08019d38 	.word	0x08019d38
 800f0f4:	08019790 	.word	0x08019790

0800f0f8 <tcp_accept>:
 * @param accept callback function to call for this pcb when LISTENing
 *        connection has been connected to another host
 */
void
tcp_accept(struct tcp_pcb *pcb, tcp_accept_fn accept)
{
 800f0f8:	b480      	push	{r7}
 800f0fa:	b085      	sub	sp, #20
 800f0fc:	af00      	add	r7, sp, #0
 800f0fe:	6078      	str	r0, [r7, #4]
 800f100:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT_CORE_LOCKED();
  if ((pcb != NULL) && (pcb->state == LISTEN)) {
 800f102:	687b      	ldr	r3, [r7, #4]
 800f104:	2b00      	cmp	r3, #0
 800f106:	d008      	beq.n	800f11a <tcp_accept+0x22>
 800f108:	687b      	ldr	r3, [r7, #4]
 800f10a:	7d1b      	ldrb	r3, [r3, #20]
 800f10c:	2b01      	cmp	r3, #1
 800f10e:	d104      	bne.n	800f11a <tcp_accept+0x22>
    struct tcp_pcb_listen *lpcb = (struct tcp_pcb_listen *)pcb;
 800f110:	687b      	ldr	r3, [r7, #4]
 800f112:	60fb      	str	r3, [r7, #12]
    lpcb->accept = accept;
 800f114:	68fb      	ldr	r3, [r7, #12]
 800f116:	683a      	ldr	r2, [r7, #0]
 800f118:	619a      	str	r2, [r3, #24]
  }
}
 800f11a:	bf00      	nop
 800f11c:	3714      	adds	r7, #20
 800f11e:	46bd      	mov	sp, r7
 800f120:	f85d 7b04 	ldr.w	r7, [sp], #4
 800f124:	4770      	bx	lr
	...

0800f128 <tcp_poll>:
 * the application may use the polling functionality to call tcp_write()
 * again when the connection has been idle for a while.
 */
void
tcp_poll(struct tcp_pcb *pcb, tcp_poll_fn poll, u8_t interval)
{
 800f128:	b580      	push	{r7, lr}
 800f12a:	b084      	sub	sp, #16
 800f12c:	af00      	add	r7, sp, #0
 800f12e:	60f8      	str	r0, [r7, #12]
 800f130:	60b9      	str	r1, [r7, #8]
 800f132:	4613      	mov	r3, r2
 800f134:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("tcp_poll: invalid pcb", pcb != NULL, return);
 800f136:	68fb      	ldr	r3, [r7, #12]
 800f138:	2b00      	cmp	r3, #0
 800f13a:	d107      	bne.n	800f14c <tcp_poll+0x24>
 800f13c:	4b0e      	ldr	r3, [pc, #56]	; (800f178 <tcp_poll+0x50>)
 800f13e:	f640 023d 	movw	r2, #2109	; 0x83d
 800f142:	490e      	ldr	r1, [pc, #56]	; (800f17c <tcp_poll+0x54>)
 800f144:	480e      	ldr	r0, [pc, #56]	; (800f180 <tcp_poll+0x58>)
 800f146:	f007 fe53 	bl	8016df0 <iprintf>
 800f14a:	e011      	b.n	800f170 <tcp_poll+0x48>
  LWIP_ASSERT("invalid socket state for poll", pcb->state != LISTEN);
 800f14c:	68fb      	ldr	r3, [r7, #12]
 800f14e:	7d1b      	ldrb	r3, [r3, #20]
 800f150:	2b01      	cmp	r3, #1
 800f152:	d106      	bne.n	800f162 <tcp_poll+0x3a>
 800f154:	4b08      	ldr	r3, [pc, #32]	; (800f178 <tcp_poll+0x50>)
 800f156:	f640 023e 	movw	r2, #2110	; 0x83e
 800f15a:	490a      	ldr	r1, [pc, #40]	; (800f184 <tcp_poll+0x5c>)
 800f15c:	4808      	ldr	r0, [pc, #32]	; (800f180 <tcp_poll+0x58>)
 800f15e:	f007 fe47 	bl	8016df0 <iprintf>

#if LWIP_CALLBACK_API
  pcb->poll = poll;
 800f162:	68fb      	ldr	r3, [r7, #12]
 800f164:	68ba      	ldr	r2, [r7, #8]
 800f166:	f8c3 208c 	str.w	r2, [r3, #140]	; 0x8c
#else /* LWIP_CALLBACK_API */
  LWIP_UNUSED_ARG(poll);
#endif /* LWIP_CALLBACK_API */
  pcb->pollinterval = interval;
 800f16a:	68fb      	ldr	r3, [r7, #12]
 800f16c:	79fa      	ldrb	r2, [r7, #7]
 800f16e:	775a      	strb	r2, [r3, #29]
}
 800f170:	3710      	adds	r7, #16
 800f172:	46bd      	mov	sp, r7
 800f174:	bd80      	pop	{r7, pc}
 800f176:	bf00      	nop
 800f178:	0801974c 	.word	0x0801974c
 800f17c:	08019d60 	.word	0x08019d60
 800f180:	08019790 	.word	0x08019790
 800f184:	08019d78 	.word	0x08019d78

0800f188 <tcp_pcb_purge>:
 *
 * @param pcb tcp_pcb to purge. The pcb itself is not deallocated!
 */
void
tcp_pcb_purge(struct tcp_pcb *pcb)
{
 800f188:	b580      	push	{r7, lr}
 800f18a:	b082      	sub	sp, #8
 800f18c:	af00      	add	r7, sp, #0
 800f18e:	6078      	str	r0, [r7, #4]
  LWIP_ERROR("tcp_pcb_purge: invalid pcb", pcb != NULL, return);
 800f190:	687b      	ldr	r3, [r7, #4]
 800f192:	2b00      	cmp	r3, #0
 800f194:	d107      	bne.n	800f1a6 <tcp_pcb_purge+0x1e>
 800f196:	4b21      	ldr	r3, [pc, #132]	; (800f21c <tcp_pcb_purge+0x94>)
 800f198:	f640 0251 	movw	r2, #2129	; 0x851
 800f19c:	4920      	ldr	r1, [pc, #128]	; (800f220 <tcp_pcb_purge+0x98>)
 800f19e:	4821      	ldr	r0, [pc, #132]	; (800f224 <tcp_pcb_purge+0x9c>)
 800f1a0:	f007 fe26 	bl	8016df0 <iprintf>
 800f1a4:	e037      	b.n	800f216 <tcp_pcb_purge+0x8e>

  if (pcb->state != CLOSED &&
 800f1a6:	687b      	ldr	r3, [r7, #4]
 800f1a8:	7d1b      	ldrb	r3, [r3, #20]
 800f1aa:	2b00      	cmp	r3, #0
 800f1ac:	d033      	beq.n	800f216 <tcp_pcb_purge+0x8e>
      pcb->state != TIME_WAIT &&
 800f1ae:	687b      	ldr	r3, [r7, #4]
 800f1b0:	7d1b      	ldrb	r3, [r3, #20]
  if (pcb->state != CLOSED &&
 800f1b2:	2b0a      	cmp	r3, #10
 800f1b4:	d02f      	beq.n	800f216 <tcp_pcb_purge+0x8e>
      pcb->state != LISTEN) {
 800f1b6:	687b      	ldr	r3, [r7, #4]
 800f1b8:	7d1b      	ldrb	r3, [r3, #20]
      pcb->state != TIME_WAIT &&
 800f1ba:	2b01      	cmp	r3, #1
 800f1bc:	d02b      	beq.n	800f216 <tcp_pcb_purge+0x8e>

    LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge\n"));

    tcp_backlog_accepted(pcb);

    if (pcb->refused_data != NULL) {
 800f1be:	687b      	ldr	r3, [r7, #4]
 800f1c0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1c2:	2b00      	cmp	r3, #0
 800f1c4:	d007      	beq.n	800f1d6 <tcp_pcb_purge+0x4e>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->refused_data\n"));
      pbuf_free(pcb->refused_data);
 800f1c6:	687b      	ldr	r3, [r7, #4]
 800f1c8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800f1ca:	4618      	mov	r0, r3
 800f1cc:	f7fe f850 	bl	800d270 <pbuf_free>
      pcb->refused_data = NULL;
 800f1d0:	687b      	ldr	r3, [r7, #4]
 800f1d2:	2200      	movs	r2, #0
 800f1d4:	679a      	str	r2, [r3, #120]	; 0x78
    }
    if (pcb->unacked != NULL) {
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->unacked\n"));
    }
#if TCP_QUEUE_OOSEQ
    if (pcb->ooseq != NULL) {
 800f1d6:	687b      	ldr	r3, [r7, #4]
 800f1d8:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f1da:	2b00      	cmp	r3, #0
 800f1dc:	d002      	beq.n	800f1e4 <tcp_pcb_purge+0x5c>
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_pcb_purge: data left on ->ooseq\n"));
      tcp_free_ooseq(pcb);
 800f1de:	6878      	ldr	r0, [r7, #4]
 800f1e0:	f000 f986 	bl	800f4f0 <tcp_free_ooseq>
    }
#endif /* TCP_QUEUE_OOSEQ */

    /* Stop the retransmission timer as it will expect data on unacked
       queue if it fires */
    pcb->rtime = -1;
 800f1e4:	687b      	ldr	r3, [r7, #4]
 800f1e6:	f64f 72ff 	movw	r2, #65535	; 0xffff
 800f1ea:	861a      	strh	r2, [r3, #48]	; 0x30

    tcp_segs_free(pcb->unsent);
 800f1ec:	687b      	ldr	r3, [r7, #4]
 800f1ee:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f1f0:	4618      	mov	r0, r3
 800f1f2:	f7ff fcf9 	bl	800ebe8 <tcp_segs_free>
    tcp_segs_free(pcb->unacked);
 800f1f6:	687b      	ldr	r3, [r7, #4]
 800f1f8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f1fa:	4618      	mov	r0, r3
 800f1fc:	f7ff fcf4 	bl	800ebe8 <tcp_segs_free>
    pcb->unacked = pcb->unsent = NULL;
 800f200:	687b      	ldr	r3, [r7, #4]
 800f202:	2200      	movs	r2, #0
 800f204:	66da      	str	r2, [r3, #108]	; 0x6c
 800f206:	687b      	ldr	r3, [r7, #4]
 800f208:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 800f20a:	687b      	ldr	r3, [r7, #4]
 800f20c:	671a      	str	r2, [r3, #112]	; 0x70
#if TCP_OVERSIZE
    pcb->unsent_oversize = 0;
 800f20e:	687b      	ldr	r3, [r7, #4]
 800f210:	2200      	movs	r2, #0
 800f212:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */
  }
}
 800f216:	3708      	adds	r7, #8
 800f218:	46bd      	mov	sp, r7
 800f21a:	bd80      	pop	{r7, pc}
 800f21c:	0801974c 	.word	0x0801974c
 800f220:	08019d98 	.word	0x08019d98
 800f224:	08019790 	.word	0x08019790

0800f228 <tcp_pcb_remove>:
 * @param pcblist PCB list to purge.
 * @param pcb tcp_pcb to purge. The pcb itself is NOT deallocated!
 */
void
tcp_pcb_remove(struct tcp_pcb **pcblist, struct tcp_pcb *pcb)
{
 800f228:	b580      	push	{r7, lr}
 800f22a:	b084      	sub	sp, #16
 800f22c:	af00      	add	r7, sp, #0
 800f22e:	6078      	str	r0, [r7, #4]
 800f230:	6039      	str	r1, [r7, #0]
  LWIP_ASSERT("tcp_pcb_remove: invalid pcb", pcb != NULL);
 800f232:	683b      	ldr	r3, [r7, #0]
 800f234:	2b00      	cmp	r3, #0
 800f236:	d106      	bne.n	800f246 <tcp_pcb_remove+0x1e>
 800f238:	4b3e      	ldr	r3, [pc, #248]	; (800f334 <tcp_pcb_remove+0x10c>)
 800f23a:	f640 0283 	movw	r2, #2179	; 0x883
 800f23e:	493e      	ldr	r1, [pc, #248]	; (800f338 <tcp_pcb_remove+0x110>)
 800f240:	483e      	ldr	r0, [pc, #248]	; (800f33c <tcp_pcb_remove+0x114>)
 800f242:	f007 fdd5 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_pcb_remove: invalid pcblist", pcblist != NULL);
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2b00      	cmp	r3, #0
 800f24a:	d106      	bne.n	800f25a <tcp_pcb_remove+0x32>
 800f24c:	4b39      	ldr	r3, [pc, #228]	; (800f334 <tcp_pcb_remove+0x10c>)
 800f24e:	f640 0284 	movw	r2, #2180	; 0x884
 800f252:	493b      	ldr	r1, [pc, #236]	; (800f340 <tcp_pcb_remove+0x118>)
 800f254:	4839      	ldr	r0, [pc, #228]	; (800f33c <tcp_pcb_remove+0x114>)
 800f256:	f007 fdcb 	bl	8016df0 <iprintf>

  TCP_RMV(pcblist, pcb);
 800f25a:	687b      	ldr	r3, [r7, #4]
 800f25c:	681b      	ldr	r3, [r3, #0]
 800f25e:	683a      	ldr	r2, [r7, #0]
 800f260:	429a      	cmp	r2, r3
 800f262:	d105      	bne.n	800f270 <tcp_pcb_remove+0x48>
 800f264:	687b      	ldr	r3, [r7, #4]
 800f266:	681b      	ldr	r3, [r3, #0]
 800f268:	68da      	ldr	r2, [r3, #12]
 800f26a:	687b      	ldr	r3, [r7, #4]
 800f26c:	601a      	str	r2, [r3, #0]
 800f26e:	e013      	b.n	800f298 <tcp_pcb_remove+0x70>
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	60fb      	str	r3, [r7, #12]
 800f276:	e00c      	b.n	800f292 <tcp_pcb_remove+0x6a>
 800f278:	68fb      	ldr	r3, [r7, #12]
 800f27a:	68db      	ldr	r3, [r3, #12]
 800f27c:	683a      	ldr	r2, [r7, #0]
 800f27e:	429a      	cmp	r2, r3
 800f280:	d104      	bne.n	800f28c <tcp_pcb_remove+0x64>
 800f282:	683b      	ldr	r3, [r7, #0]
 800f284:	68da      	ldr	r2, [r3, #12]
 800f286:	68fb      	ldr	r3, [r7, #12]
 800f288:	60da      	str	r2, [r3, #12]
 800f28a:	e005      	b.n	800f298 <tcp_pcb_remove+0x70>
 800f28c:	68fb      	ldr	r3, [r7, #12]
 800f28e:	68db      	ldr	r3, [r3, #12]
 800f290:	60fb      	str	r3, [r7, #12]
 800f292:	68fb      	ldr	r3, [r7, #12]
 800f294:	2b00      	cmp	r3, #0
 800f296:	d1ef      	bne.n	800f278 <tcp_pcb_remove+0x50>
 800f298:	683b      	ldr	r3, [r7, #0]
 800f29a:	2200      	movs	r2, #0
 800f29c:	60da      	str	r2, [r3, #12]

  tcp_pcb_purge(pcb);
 800f29e:	6838      	ldr	r0, [r7, #0]
 800f2a0:	f7ff ff72 	bl	800f188 <tcp_pcb_purge>

  /* if there is an outstanding delayed ACKs, send it */
  if ((pcb->state != TIME_WAIT) &&
 800f2a4:	683b      	ldr	r3, [r7, #0]
 800f2a6:	7d1b      	ldrb	r3, [r3, #20]
 800f2a8:	2b0a      	cmp	r3, #10
 800f2aa:	d013      	beq.n	800f2d4 <tcp_pcb_remove+0xac>
      (pcb->state != LISTEN) &&
 800f2ac:	683b      	ldr	r3, [r7, #0]
 800f2ae:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != TIME_WAIT) &&
 800f2b0:	2b01      	cmp	r3, #1
 800f2b2:	d00f      	beq.n	800f2d4 <tcp_pcb_remove+0xac>
      (pcb->flags & TF_ACK_DELAY)) {
 800f2b4:	683b      	ldr	r3, [r7, #0]
 800f2b6:	8b5b      	ldrh	r3, [r3, #26]
 800f2b8:	f003 0301 	and.w	r3, r3, #1
      (pcb->state != LISTEN) &&
 800f2bc:	2b00      	cmp	r3, #0
 800f2be:	d009      	beq.n	800f2d4 <tcp_pcb_remove+0xac>
    tcp_ack_now(pcb);
 800f2c0:	683b      	ldr	r3, [r7, #0]
 800f2c2:	8b5b      	ldrh	r3, [r3, #26]
 800f2c4:	f043 0302 	orr.w	r3, r3, #2
 800f2c8:	b29a      	uxth	r2, r3
 800f2ca:	683b      	ldr	r3, [r7, #0]
 800f2cc:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 800f2ce:	6838      	ldr	r0, [r7, #0]
 800f2d0:	f003 fbc6 	bl	8012a60 <tcp_output>
  }

  if (pcb->state != LISTEN) {
 800f2d4:	683b      	ldr	r3, [r7, #0]
 800f2d6:	7d1b      	ldrb	r3, [r3, #20]
 800f2d8:	2b01      	cmp	r3, #1
 800f2da:	d020      	beq.n	800f31e <tcp_pcb_remove+0xf6>
    LWIP_ASSERT("unsent segments leaking", pcb->unsent == NULL);
 800f2dc:	683b      	ldr	r3, [r7, #0]
 800f2de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 800f2e0:	2b00      	cmp	r3, #0
 800f2e2:	d006      	beq.n	800f2f2 <tcp_pcb_remove+0xca>
 800f2e4:	4b13      	ldr	r3, [pc, #76]	; (800f334 <tcp_pcb_remove+0x10c>)
 800f2e6:	f640 0293 	movw	r2, #2195	; 0x893
 800f2ea:	4916      	ldr	r1, [pc, #88]	; (800f344 <tcp_pcb_remove+0x11c>)
 800f2ec:	4813      	ldr	r0, [pc, #76]	; (800f33c <tcp_pcb_remove+0x114>)
 800f2ee:	f007 fd7f 	bl	8016df0 <iprintf>
    LWIP_ASSERT("unacked segments leaking", pcb->unacked == NULL);
 800f2f2:	683b      	ldr	r3, [r7, #0]
 800f2f4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800f2f6:	2b00      	cmp	r3, #0
 800f2f8:	d006      	beq.n	800f308 <tcp_pcb_remove+0xe0>
 800f2fa:	4b0e      	ldr	r3, [pc, #56]	; (800f334 <tcp_pcb_remove+0x10c>)
 800f2fc:	f640 0294 	movw	r2, #2196	; 0x894
 800f300:	4911      	ldr	r1, [pc, #68]	; (800f348 <tcp_pcb_remove+0x120>)
 800f302:	480e      	ldr	r0, [pc, #56]	; (800f33c <tcp_pcb_remove+0x114>)
 800f304:	f007 fd74 	bl	8016df0 <iprintf>
#if TCP_QUEUE_OOSEQ
    LWIP_ASSERT("ooseq segments leaking", pcb->ooseq == NULL);
 800f308:	683b      	ldr	r3, [r7, #0]
 800f30a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f30c:	2b00      	cmp	r3, #0
 800f30e:	d006      	beq.n	800f31e <tcp_pcb_remove+0xf6>
 800f310:	4b08      	ldr	r3, [pc, #32]	; (800f334 <tcp_pcb_remove+0x10c>)
 800f312:	f640 0296 	movw	r2, #2198	; 0x896
 800f316:	490d      	ldr	r1, [pc, #52]	; (800f34c <tcp_pcb_remove+0x124>)
 800f318:	4808      	ldr	r0, [pc, #32]	; (800f33c <tcp_pcb_remove+0x114>)
 800f31a:	f007 fd69 	bl	8016df0 <iprintf>
#endif /* TCP_QUEUE_OOSEQ */
  }

  pcb->state = CLOSED;
 800f31e:	683b      	ldr	r3, [r7, #0]
 800f320:	2200      	movs	r2, #0
 800f322:	751a      	strb	r2, [r3, #20]
  /* reset the local port to prevent the pcb from being 'bound' */
  pcb->local_port = 0;
 800f324:	683b      	ldr	r3, [r7, #0]
 800f326:	2200      	movs	r2, #0
 800f328:	82da      	strh	r2, [r3, #22]

  LWIP_ASSERT("tcp_pcb_remove: tcp_pcbs_sane()", tcp_pcbs_sane());
}
 800f32a:	bf00      	nop
 800f32c:	3710      	adds	r7, #16
 800f32e:	46bd      	mov	sp, r7
 800f330:	bd80      	pop	{r7, pc}
 800f332:	bf00      	nop
 800f334:	0801974c 	.word	0x0801974c
 800f338:	08019db4 	.word	0x08019db4
 800f33c:	08019790 	.word	0x08019790
 800f340:	08019dd0 	.word	0x08019dd0
 800f344:	08019df0 	.word	0x08019df0
 800f348:	08019e08 	.word	0x08019e08
 800f34c:	08019e24 	.word	0x08019e24

0800f350 <tcp_next_iss>:
 *
 * @return u32_t pseudo random sequence number
 */
u32_t
tcp_next_iss(struct tcp_pcb *pcb)
{
 800f350:	b580      	push	{r7, lr}
 800f352:	b082      	sub	sp, #8
 800f354:	af00      	add	r7, sp, #0
 800f356:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
  return LWIP_HOOK_TCP_ISN(&pcb->local_ip, pcb->local_port, &pcb->remote_ip, pcb->remote_port);
#else /* LWIP_HOOK_TCP_ISN */
  static u32_t iss = 6510;

  LWIP_ASSERT("tcp_next_iss: invalid pcb", pcb != NULL);
 800f358:	687b      	ldr	r3, [r7, #4]
 800f35a:	2b00      	cmp	r3, #0
 800f35c:	d106      	bne.n	800f36c <tcp_next_iss+0x1c>
 800f35e:	4b0a      	ldr	r3, [pc, #40]	; (800f388 <tcp_next_iss+0x38>)
 800f360:	f640 02af 	movw	r2, #2223	; 0x8af
 800f364:	4909      	ldr	r1, [pc, #36]	; (800f38c <tcp_next_iss+0x3c>)
 800f366:	480a      	ldr	r0, [pc, #40]	; (800f390 <tcp_next_iss+0x40>)
 800f368:	f007 fd42 	bl	8016df0 <iprintf>
  LWIP_UNUSED_ARG(pcb);

  iss += tcp_ticks;       /* XXX */
 800f36c:	4b09      	ldr	r3, [pc, #36]	; (800f394 <tcp_next_iss+0x44>)
 800f36e:	681a      	ldr	r2, [r3, #0]
 800f370:	4b09      	ldr	r3, [pc, #36]	; (800f398 <tcp_next_iss+0x48>)
 800f372:	681b      	ldr	r3, [r3, #0]
 800f374:	4413      	add	r3, r2
 800f376:	4a07      	ldr	r2, [pc, #28]	; (800f394 <tcp_next_iss+0x44>)
 800f378:	6013      	str	r3, [r2, #0]
  return iss;
 800f37a:	4b06      	ldr	r3, [pc, #24]	; (800f394 <tcp_next_iss+0x44>)
 800f37c:	681b      	ldr	r3, [r3, #0]
#endif /* LWIP_HOOK_TCP_ISN */
}
 800f37e:	4618      	mov	r0, r3
 800f380:	3708      	adds	r7, #8
 800f382:	46bd      	mov	sp, r7
 800f384:	bd80      	pop	{r7, pc}
 800f386:	bf00      	nop
 800f388:	0801974c 	.word	0x0801974c
 800f38c:	08019e3c 	.word	0x08019e3c
 800f390:	08019790 	.word	0x08019790
 800f394:	20000028 	.word	0x20000028
 800f398:	2000f7f4 	.word	0x2000f7f4

0800f39c <tcp_eff_send_mss_netif>:
 * by calculating the minimum of TCP_MSS and the mtu (if set) of the target
 * netif (if not NULL).
 */
u16_t
tcp_eff_send_mss_netif(u16_t sendmss, struct netif *outif, const ip_addr_t *dest)
{
 800f39c:	b580      	push	{r7, lr}
 800f39e:	b086      	sub	sp, #24
 800f3a0:	af00      	add	r7, sp, #0
 800f3a2:	4603      	mov	r3, r0
 800f3a4:	60b9      	str	r1, [r7, #8]
 800f3a6:	607a      	str	r2, [r7, #4]
 800f3a8:	81fb      	strh	r3, [r7, #14]
  u16_t mss_s;
  u16_t mtu;

  LWIP_UNUSED_ARG(dest); /* in case IPv6 is disabled */

  LWIP_ASSERT("tcp_eff_send_mss_netif: invalid dst_ip", dest != NULL);
 800f3aa:	687b      	ldr	r3, [r7, #4]
 800f3ac:	2b00      	cmp	r3, #0
 800f3ae:	d106      	bne.n	800f3be <tcp_eff_send_mss_netif+0x22>
 800f3b0:	4b14      	ldr	r3, [pc, #80]	; (800f404 <tcp_eff_send_mss_netif+0x68>)
 800f3b2:	f640 02c5 	movw	r2, #2245	; 0x8c5
 800f3b6:	4914      	ldr	r1, [pc, #80]	; (800f408 <tcp_eff_send_mss_netif+0x6c>)
 800f3b8:	4814      	ldr	r0, [pc, #80]	; (800f40c <tcp_eff_send_mss_netif+0x70>)
 800f3ba:	f007 fd19 	bl	8016df0 <iprintf>
  else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
  {
    if (outif == NULL) {
 800f3be:	68bb      	ldr	r3, [r7, #8]
 800f3c0:	2b00      	cmp	r3, #0
 800f3c2:	d101      	bne.n	800f3c8 <tcp_eff_send_mss_netif+0x2c>
      return sendmss;
 800f3c4:	89fb      	ldrh	r3, [r7, #14]
 800f3c6:	e019      	b.n	800f3fc <tcp_eff_send_mss_netif+0x60>
    }
    mtu = outif->mtu;
 800f3c8:	68bb      	ldr	r3, [r7, #8]
 800f3ca:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 800f3cc:	82fb      	strh	r3, [r7, #22]
  }
#endif /* LWIP_IPV4 */

  if (mtu != 0) {
 800f3ce:	8afb      	ldrh	r3, [r7, #22]
 800f3d0:	2b00      	cmp	r3, #0
 800f3d2:	d012      	beq.n	800f3fa <tcp_eff_send_mss_netif+0x5e>
    else
#endif /* LWIP_IPV4 */
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    {
      offset = IP_HLEN + TCP_HLEN;
 800f3d4:	2328      	movs	r3, #40	; 0x28
 800f3d6:	82bb      	strh	r3, [r7, #20]
    }
#endif /* LWIP_IPV4 */
    mss_s = (mtu > offset) ? (u16_t)(mtu - offset) : 0;
 800f3d8:	8afa      	ldrh	r2, [r7, #22]
 800f3da:	8abb      	ldrh	r3, [r7, #20]
 800f3dc:	429a      	cmp	r2, r3
 800f3de:	d904      	bls.n	800f3ea <tcp_eff_send_mss_netif+0x4e>
 800f3e0:	8afa      	ldrh	r2, [r7, #22]
 800f3e2:	8abb      	ldrh	r3, [r7, #20]
 800f3e4:	1ad3      	subs	r3, r2, r3
 800f3e6:	b29b      	uxth	r3, r3
 800f3e8:	e000      	b.n	800f3ec <tcp_eff_send_mss_netif+0x50>
 800f3ea:	2300      	movs	r3, #0
 800f3ec:	827b      	strh	r3, [r7, #18]
    /* RFC 1122, chap 4.2.2.6:
     * Eff.snd.MSS = min(SendMSS+20, MMS_S) - TCPhdrsize - IPoptionsize
     * We correct for TCP options in tcp_write(), and don't support IP options.
     */
    sendmss = LWIP_MIN(sendmss, mss_s);
 800f3ee:	8a7a      	ldrh	r2, [r7, #18]
 800f3f0:	89fb      	ldrh	r3, [r7, #14]
 800f3f2:	4293      	cmp	r3, r2
 800f3f4:	bf28      	it	cs
 800f3f6:	4613      	movcs	r3, r2
 800f3f8:	81fb      	strh	r3, [r7, #14]
  }
  return sendmss;
 800f3fa:	89fb      	ldrh	r3, [r7, #14]
}
 800f3fc:	4618      	mov	r0, r3
 800f3fe:	3718      	adds	r7, #24
 800f400:	46bd      	mov	sp, r7
 800f402:	bd80      	pop	{r7, pc}
 800f404:	0801974c 	.word	0x0801974c
 800f408:	08019e58 	.word	0x08019e58
 800f40c:	08019790 	.word	0x08019790

0800f410 <tcp_netif_ip_addr_changed_pcblist>:
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

/** Helper function for tcp_netif_ip_addr_changed() that iterates a pcb list */
static void
tcp_netif_ip_addr_changed_pcblist(const ip_addr_t *old_addr, struct tcp_pcb *pcb_list)
{
 800f410:	b580      	push	{r7, lr}
 800f412:	b084      	sub	sp, #16
 800f414:	af00      	add	r7, sp, #0
 800f416:	6078      	str	r0, [r7, #4]
 800f418:	6039      	str	r1, [r7, #0]
  struct tcp_pcb *pcb;
  pcb = pcb_list;
 800f41a:	683b      	ldr	r3, [r7, #0]
 800f41c:	60fb      	str	r3, [r7, #12]

  LWIP_ASSERT("tcp_netif_ip_addr_changed_pcblist: invalid old_addr", old_addr != NULL);
 800f41e:	687b      	ldr	r3, [r7, #4]
 800f420:	2b00      	cmp	r3, #0
 800f422:	d119      	bne.n	800f458 <tcp_netif_ip_addr_changed_pcblist+0x48>
 800f424:	4b10      	ldr	r3, [pc, #64]	; (800f468 <tcp_netif_ip_addr_changed_pcblist+0x58>)
 800f426:	f44f 6210 	mov.w	r2, #2304	; 0x900
 800f42a:	4910      	ldr	r1, [pc, #64]	; (800f46c <tcp_netif_ip_addr_changed_pcblist+0x5c>)
 800f42c:	4810      	ldr	r0, [pc, #64]	; (800f470 <tcp_netif_ip_addr_changed_pcblist+0x60>)
 800f42e:	f007 fcdf 	bl	8016df0 <iprintf>

  while (pcb != NULL) {
 800f432:	e011      	b.n	800f458 <tcp_netif_ip_addr_changed_pcblist+0x48>
    /* PCB bound to current local interface address? */
    if (ip_addr_cmp(&pcb->local_ip, old_addr)
 800f434:	68fb      	ldr	r3, [r7, #12]
 800f436:	681a      	ldr	r2, [r3, #0]
 800f438:	687b      	ldr	r3, [r7, #4]
 800f43a:	681b      	ldr	r3, [r3, #0]
 800f43c:	429a      	cmp	r2, r3
 800f43e:	d108      	bne.n	800f452 <tcp_netif_ip_addr_changed_pcblist+0x42>
        /* connections to link-local addresses must persist (RFC3927 ch. 1.9) */
        && (!IP_IS_V4_VAL(pcb->local_ip) || !ip4_addr_islinklocal(ip_2_ip4(&pcb->local_ip)))
#endif /* LWIP_AUTOIP */
       ) {
      /* this connection must be aborted */
      struct tcp_pcb *next = pcb->next;
 800f440:	68fb      	ldr	r3, [r7, #12]
 800f442:	68db      	ldr	r3, [r3, #12]
 800f444:	60bb      	str	r3, [r7, #8]
      LWIP_DEBUGF(NETIF_DEBUG | LWIP_DBG_STATE, ("netif_set_ipaddr: aborting TCP pcb %p\n", (void *)pcb));
      tcp_abort(pcb);
 800f446:	68f8      	ldr	r0, [r7, #12]
 800f448:	f7fe fd02 	bl	800de50 <tcp_abort>
      pcb = next;
 800f44c:	68bb      	ldr	r3, [r7, #8]
 800f44e:	60fb      	str	r3, [r7, #12]
 800f450:	e002      	b.n	800f458 <tcp_netif_ip_addr_changed_pcblist+0x48>
    } else {
      pcb = pcb->next;
 800f452:	68fb      	ldr	r3, [r7, #12]
 800f454:	68db      	ldr	r3, [r3, #12]
 800f456:	60fb      	str	r3, [r7, #12]
  while (pcb != NULL) {
 800f458:	68fb      	ldr	r3, [r7, #12]
 800f45a:	2b00      	cmp	r3, #0
 800f45c:	d1ea      	bne.n	800f434 <tcp_netif_ip_addr_changed_pcblist+0x24>
    }
  }
}
 800f45e:	bf00      	nop
 800f460:	bf00      	nop
 800f462:	3710      	adds	r7, #16
 800f464:	46bd      	mov	sp, r7
 800f466:	bd80      	pop	{r7, pc}
 800f468:	0801974c 	.word	0x0801974c
 800f46c:	08019e80 	.word	0x08019e80
 800f470:	08019790 	.word	0x08019790

0800f474 <tcp_netif_ip_addr_changed>:
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change or NULL if netif has been removed
 */
void
tcp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 800f474:	b580      	push	{r7, lr}
 800f476:	b084      	sub	sp, #16
 800f478:	af00      	add	r7, sp, #0
 800f47a:	6078      	str	r0, [r7, #4]
 800f47c:	6039      	str	r1, [r7, #0]
  struct tcp_pcb_listen *lpcb;

  if (!ip_addr_isany(old_addr)) {
 800f47e:	687b      	ldr	r3, [r7, #4]
 800f480:	2b00      	cmp	r3, #0
 800f482:	d02a      	beq.n	800f4da <tcp_netif_ip_addr_changed+0x66>
 800f484:	687b      	ldr	r3, [r7, #4]
 800f486:	681b      	ldr	r3, [r3, #0]
 800f488:	2b00      	cmp	r3, #0
 800f48a:	d026      	beq.n	800f4da <tcp_netif_ip_addr_changed+0x66>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_active_pcbs);
 800f48c:	4b15      	ldr	r3, [pc, #84]	; (800f4e4 <tcp_netif_ip_addr_changed+0x70>)
 800f48e:	681b      	ldr	r3, [r3, #0]
 800f490:	4619      	mov	r1, r3
 800f492:	6878      	ldr	r0, [r7, #4]
 800f494:	f7ff ffbc 	bl	800f410 <tcp_netif_ip_addr_changed_pcblist>
    tcp_netif_ip_addr_changed_pcblist(old_addr, tcp_bound_pcbs);
 800f498:	4b13      	ldr	r3, [pc, #76]	; (800f4e8 <tcp_netif_ip_addr_changed+0x74>)
 800f49a:	681b      	ldr	r3, [r3, #0]
 800f49c:	4619      	mov	r1, r3
 800f49e:	6878      	ldr	r0, [r7, #4]
 800f4a0:	f7ff ffb6 	bl	800f410 <tcp_netif_ip_addr_changed_pcblist>

    if (!ip_addr_isany(new_addr)) {
 800f4a4:	683b      	ldr	r3, [r7, #0]
 800f4a6:	2b00      	cmp	r3, #0
 800f4a8:	d017      	beq.n	800f4da <tcp_netif_ip_addr_changed+0x66>
 800f4aa:	683b      	ldr	r3, [r7, #0]
 800f4ac:	681b      	ldr	r3, [r3, #0]
 800f4ae:	2b00      	cmp	r3, #0
 800f4b0:	d013      	beq.n	800f4da <tcp_netif_ip_addr_changed+0x66>
      /* PCB bound to current local interface address? */
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4b2:	4b0e      	ldr	r3, [pc, #56]	; (800f4ec <tcp_netif_ip_addr_changed+0x78>)
 800f4b4:	681b      	ldr	r3, [r3, #0]
 800f4b6:	60fb      	str	r3, [r7, #12]
 800f4b8:	e00c      	b.n	800f4d4 <tcp_netif_ip_addr_changed+0x60>
        /* PCB bound to current local interface address? */
        if (ip_addr_cmp(&lpcb->local_ip, old_addr)) {
 800f4ba:	68fb      	ldr	r3, [r7, #12]
 800f4bc:	681a      	ldr	r2, [r3, #0]
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	681b      	ldr	r3, [r3, #0]
 800f4c2:	429a      	cmp	r2, r3
 800f4c4:	d103      	bne.n	800f4ce <tcp_netif_ip_addr_changed+0x5a>
          /* The PCB is listening to the old ipaddr and
            * is set to listen to the new one instead */
          ip_addr_copy(lpcb->local_ip, *new_addr);
 800f4c6:	683b      	ldr	r3, [r7, #0]
 800f4c8:	681a      	ldr	r2, [r3, #0]
 800f4ca:	68fb      	ldr	r3, [r7, #12]
 800f4cc:	601a      	str	r2, [r3, #0]
      for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f4ce:	68fb      	ldr	r3, [r7, #12]
 800f4d0:	68db      	ldr	r3, [r3, #12]
 800f4d2:	60fb      	str	r3, [r7, #12]
 800f4d4:	68fb      	ldr	r3, [r7, #12]
 800f4d6:	2b00      	cmp	r3, #0
 800f4d8:	d1ef      	bne.n	800f4ba <tcp_netif_ip_addr_changed+0x46>
        }
      }
    }
  }
}
 800f4da:	bf00      	nop
 800f4dc:	3710      	adds	r7, #16
 800f4de:	46bd      	mov	sp, r7
 800f4e0:	bd80      	pop	{r7, pc}
 800f4e2:	bf00      	nop
 800f4e4:	2000f800 	.word	0x2000f800
 800f4e8:	2000f7f8 	.word	0x2000f7f8
 800f4ec:	2000f7fc 	.word	0x2000f7fc

0800f4f0 <tcp_free_ooseq>:

#if TCP_QUEUE_OOSEQ
/* Free all ooseq pbufs (and possibly reset SACK state) */
void
tcp_free_ooseq(struct tcp_pcb *pcb)
{
 800f4f0:	b580      	push	{r7, lr}
 800f4f2:	b082      	sub	sp, #8
 800f4f4:	af00      	add	r7, sp, #0
 800f4f6:	6078      	str	r0, [r7, #4]
  if (pcb->ooseq) {
 800f4f8:	687b      	ldr	r3, [r7, #4]
 800f4fa:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f4fc:	2b00      	cmp	r3, #0
 800f4fe:	d007      	beq.n	800f510 <tcp_free_ooseq+0x20>
    tcp_segs_free(pcb->ooseq);
 800f500:	687b      	ldr	r3, [r7, #4]
 800f502:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800f504:	4618      	mov	r0, r3
 800f506:	f7ff fb6f 	bl	800ebe8 <tcp_segs_free>
    pcb->ooseq = NULL;
 800f50a:	687b      	ldr	r3, [r7, #4]
 800f50c:	2200      	movs	r2, #0
 800f50e:	675a      	str	r2, [r3, #116]	; 0x74
#if LWIP_TCP_SACK_OUT
    memset(pcb->rcv_sacks, 0, sizeof(pcb->rcv_sacks));
#endif /* LWIP_TCP_SACK_OUT */
  }
}
 800f510:	bf00      	nop
 800f512:	3708      	adds	r7, #8
 800f514:	46bd      	mov	sp, r7
 800f516:	bd80      	pop	{r7, pc}

0800f518 <tcp_input>:
 * @param p received TCP segment to process (p->payload pointing to the TCP header)
 * @param inp network interface on which this segment was received
 */
void
tcp_input(struct pbuf *p, struct netif *inp)
{
 800f518:	b590      	push	{r4, r7, lr}
 800f51a:	b08d      	sub	sp, #52	; 0x34
 800f51c:	af04      	add	r7, sp, #16
 800f51e:	6078      	str	r0, [r7, #4]
 800f520:	6039      	str	r1, [r7, #0]
  u8_t hdrlen_bytes;
  err_t err;

  LWIP_UNUSED_ARG(inp);
  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("tcp_input: invalid pbuf", p != NULL);
 800f522:	687b      	ldr	r3, [r7, #4]
 800f524:	2b00      	cmp	r3, #0
 800f526:	d105      	bne.n	800f534 <tcp_input+0x1c>
 800f528:	4b9b      	ldr	r3, [pc, #620]	; (800f798 <tcp_input+0x280>)
 800f52a:	2283      	movs	r2, #131	; 0x83
 800f52c:	499b      	ldr	r1, [pc, #620]	; (800f79c <tcp_input+0x284>)
 800f52e:	489c      	ldr	r0, [pc, #624]	; (800f7a0 <tcp_input+0x288>)
 800f530:	f007 fc5e 	bl	8016df0 <iprintf>
  PERF_START;

  TCP_STATS_INC(tcp.recv);
  MIB2_STATS_INC(mib2.tcpinsegs);

  tcphdr = (struct tcp_hdr *)p->payload;
 800f534:	687b      	ldr	r3, [r7, #4]
 800f536:	685b      	ldr	r3, [r3, #4]
 800f538:	4a9a      	ldr	r2, [pc, #616]	; (800f7a4 <tcp_input+0x28c>)
 800f53a:	6013      	str	r3, [r2, #0]
#if TCP_INPUT_DEBUG
  tcp_debug_print(tcphdr);
#endif

  /* Check that TCP header fits in payload */
  if (p->len < TCP_HLEN) {
 800f53c:	687b      	ldr	r3, [r7, #4]
 800f53e:	895b      	ldrh	r3, [r3, #10]
 800f540:	2b13      	cmp	r3, #19
 800f542:	f240 83d1 	bls.w	800fce8 <tcp_input+0x7d0>
    TCP_STATS_INC(tcp.lenerr);
    goto dropped;
  }

  /* Don't even process incoming broadcasts/multicasts. */
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f546:	4b98      	ldr	r3, [pc, #608]	; (800f7a8 <tcp_input+0x290>)
 800f548:	695b      	ldr	r3, [r3, #20]
 800f54a:	4a97      	ldr	r2, [pc, #604]	; (800f7a8 <tcp_input+0x290>)
 800f54c:	6812      	ldr	r2, [r2, #0]
 800f54e:	4611      	mov	r1, r2
 800f550:	4618      	mov	r0, r3
 800f552:	f006 fa53 	bl	80159fc <ip4_addr_isbroadcast_u32>
 800f556:	4603      	mov	r3, r0
 800f558:	2b00      	cmp	r3, #0
 800f55a:	f040 83c7 	bne.w	800fcec <tcp_input+0x7d4>
      ip_addr_ismulticast(ip_current_dest_addr())) {
 800f55e:	4b92      	ldr	r3, [pc, #584]	; (800f7a8 <tcp_input+0x290>)
 800f560:	695b      	ldr	r3, [r3, #20]
 800f562:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif()) ||
 800f566:	2be0      	cmp	r3, #224	; 0xe0
 800f568:	f000 83c0 	beq.w	800fcec <tcp_input+0x7d4>
    }
  }
#endif /* CHECKSUM_CHECK_TCP */

  /* sanity-check header length */
  hdrlen_bytes = TCPH_HDRLEN_BYTES(tcphdr);
 800f56c:	4b8d      	ldr	r3, [pc, #564]	; (800f7a4 <tcp_input+0x28c>)
 800f56e:	681b      	ldr	r3, [r3, #0]
 800f570:	899b      	ldrh	r3, [r3, #12]
 800f572:	b29b      	uxth	r3, r3
 800f574:	4618      	mov	r0, r3
 800f576:	f7fc fa89 	bl	800ba8c <lwip_htons>
 800f57a:	4603      	mov	r3, r0
 800f57c:	0b1b      	lsrs	r3, r3, #12
 800f57e:	b29b      	uxth	r3, r3
 800f580:	b2db      	uxtb	r3, r3
 800f582:	009b      	lsls	r3, r3, #2
 800f584:	74bb      	strb	r3, [r7, #18]
  if ((hdrlen_bytes < TCP_HLEN) || (hdrlen_bytes > p->tot_len)) {
 800f586:	7cbb      	ldrb	r3, [r7, #18]
 800f588:	2b13      	cmp	r3, #19
 800f58a:	f240 83b1 	bls.w	800fcf0 <tcp_input+0x7d8>
 800f58e:	7cbb      	ldrb	r3, [r7, #18]
 800f590:	b29a      	uxth	r2, r3
 800f592:	687b      	ldr	r3, [r7, #4]
 800f594:	891b      	ldrh	r3, [r3, #8]
 800f596:	429a      	cmp	r2, r3
 800f598:	f200 83aa 	bhi.w	800fcf0 <tcp_input+0x7d8>
    goto dropped;
  }

  /* Move the payload pointer in the pbuf so that it points to the
     TCP data instead of the TCP header. */
  tcphdr_optlen = (u16_t)(hdrlen_bytes - TCP_HLEN);
 800f59c:	7cbb      	ldrb	r3, [r7, #18]
 800f59e:	b29b      	uxth	r3, r3
 800f5a0:	3b14      	subs	r3, #20
 800f5a2:	b29a      	uxth	r2, r3
 800f5a4:	4b81      	ldr	r3, [pc, #516]	; (800f7ac <tcp_input+0x294>)
 800f5a6:	801a      	strh	r2, [r3, #0]
  tcphdr_opt2 = NULL;
 800f5a8:	4b81      	ldr	r3, [pc, #516]	; (800f7b0 <tcp_input+0x298>)
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	601a      	str	r2, [r3, #0]
  if (p->len >= hdrlen_bytes) {
 800f5ae:	687b      	ldr	r3, [r7, #4]
 800f5b0:	895a      	ldrh	r2, [r3, #10]
 800f5b2:	7cbb      	ldrb	r3, [r7, #18]
 800f5b4:	b29b      	uxth	r3, r3
 800f5b6:	429a      	cmp	r2, r3
 800f5b8:	d309      	bcc.n	800f5ce <tcp_input+0xb6>
    /* all options are in the first pbuf */
    tcphdr_opt1len = tcphdr_optlen;
 800f5ba:	4b7c      	ldr	r3, [pc, #496]	; (800f7ac <tcp_input+0x294>)
 800f5bc:	881a      	ldrh	r2, [r3, #0]
 800f5be:	4b7d      	ldr	r3, [pc, #500]	; (800f7b4 <tcp_input+0x29c>)
 800f5c0:	801a      	strh	r2, [r3, #0]
    pbuf_remove_header(p, hdrlen_bytes); /* cannot fail */
 800f5c2:	7cbb      	ldrb	r3, [r7, #18]
 800f5c4:	4619      	mov	r1, r3
 800f5c6:	6878      	ldr	r0, [r7, #4]
 800f5c8:	f7fd fdcc 	bl	800d164 <pbuf_remove_header>
 800f5cc:	e04e      	b.n	800f66c <tcp_input+0x154>
  } else {
    u16_t opt2len;
    /* TCP header fits into first pbuf, options don't - data is in the next pbuf */
    /* there must be a next pbuf, due to hdrlen_bytes sanity check above */
    LWIP_ASSERT("p->next != NULL", p->next != NULL);
 800f5ce:	687b      	ldr	r3, [r7, #4]
 800f5d0:	681b      	ldr	r3, [r3, #0]
 800f5d2:	2b00      	cmp	r3, #0
 800f5d4:	d105      	bne.n	800f5e2 <tcp_input+0xca>
 800f5d6:	4b70      	ldr	r3, [pc, #448]	; (800f798 <tcp_input+0x280>)
 800f5d8:	22c2      	movs	r2, #194	; 0xc2
 800f5da:	4977      	ldr	r1, [pc, #476]	; (800f7b8 <tcp_input+0x2a0>)
 800f5dc:	4870      	ldr	r0, [pc, #448]	; (800f7a0 <tcp_input+0x288>)
 800f5de:	f007 fc07 	bl	8016df0 <iprintf>

    /* advance over the TCP header (cannot fail) */
    pbuf_remove_header(p, TCP_HLEN);
 800f5e2:	2114      	movs	r1, #20
 800f5e4:	6878      	ldr	r0, [r7, #4]
 800f5e6:	f7fd fdbd 	bl	800d164 <pbuf_remove_header>

    /* determine how long the first and second parts of the options are */
    tcphdr_opt1len = p->len;
 800f5ea:	687b      	ldr	r3, [r7, #4]
 800f5ec:	895a      	ldrh	r2, [r3, #10]
 800f5ee:	4b71      	ldr	r3, [pc, #452]	; (800f7b4 <tcp_input+0x29c>)
 800f5f0:	801a      	strh	r2, [r3, #0]
    opt2len = (u16_t)(tcphdr_optlen - tcphdr_opt1len);
 800f5f2:	4b6e      	ldr	r3, [pc, #440]	; (800f7ac <tcp_input+0x294>)
 800f5f4:	881a      	ldrh	r2, [r3, #0]
 800f5f6:	4b6f      	ldr	r3, [pc, #444]	; (800f7b4 <tcp_input+0x29c>)
 800f5f8:	881b      	ldrh	r3, [r3, #0]
 800f5fa:	1ad3      	subs	r3, r2, r3
 800f5fc:	823b      	strh	r3, [r7, #16]

    /* options continue in the next pbuf: set p to zero length and hide the
        options in the next pbuf (adjusting p->tot_len) */
    pbuf_remove_header(p, tcphdr_opt1len);
 800f5fe:	4b6d      	ldr	r3, [pc, #436]	; (800f7b4 <tcp_input+0x29c>)
 800f600:	881b      	ldrh	r3, [r3, #0]
 800f602:	4619      	mov	r1, r3
 800f604:	6878      	ldr	r0, [r7, #4]
 800f606:	f7fd fdad 	bl	800d164 <pbuf_remove_header>

    /* check that the options fit in the second pbuf */
    if (opt2len > p->next->len) {
 800f60a:	687b      	ldr	r3, [r7, #4]
 800f60c:	681b      	ldr	r3, [r3, #0]
 800f60e:	895b      	ldrh	r3, [r3, #10]
 800f610:	8a3a      	ldrh	r2, [r7, #16]
 800f612:	429a      	cmp	r2, r3
 800f614:	f200 836e 	bhi.w	800fcf4 <tcp_input+0x7dc>
      TCP_STATS_INC(tcp.lenerr);
      goto dropped;
    }

    /* remember the pointer to the second part of the options */
    tcphdr_opt2 = (u8_t *)p->next->payload;
 800f618:	687b      	ldr	r3, [r7, #4]
 800f61a:	681b      	ldr	r3, [r3, #0]
 800f61c:	685b      	ldr	r3, [r3, #4]
 800f61e:	4a64      	ldr	r2, [pc, #400]	; (800f7b0 <tcp_input+0x298>)
 800f620:	6013      	str	r3, [r2, #0]

    /* advance p->next to point after the options, and manually
        adjust p->tot_len to keep it consistent with the changed p->next */
    pbuf_remove_header(p->next, opt2len);
 800f622:	687b      	ldr	r3, [r7, #4]
 800f624:	681b      	ldr	r3, [r3, #0]
 800f626:	8a3a      	ldrh	r2, [r7, #16]
 800f628:	4611      	mov	r1, r2
 800f62a:	4618      	mov	r0, r3
 800f62c:	f7fd fd9a 	bl	800d164 <pbuf_remove_header>
    p->tot_len = (u16_t)(p->tot_len - opt2len);
 800f630:	687b      	ldr	r3, [r7, #4]
 800f632:	891a      	ldrh	r2, [r3, #8]
 800f634:	8a3b      	ldrh	r3, [r7, #16]
 800f636:	1ad3      	subs	r3, r2, r3
 800f638:	b29a      	uxth	r2, r3
 800f63a:	687b      	ldr	r3, [r7, #4]
 800f63c:	811a      	strh	r2, [r3, #8]

    LWIP_ASSERT("p->len == 0", p->len == 0);
 800f63e:	687b      	ldr	r3, [r7, #4]
 800f640:	895b      	ldrh	r3, [r3, #10]
 800f642:	2b00      	cmp	r3, #0
 800f644:	d005      	beq.n	800f652 <tcp_input+0x13a>
 800f646:	4b54      	ldr	r3, [pc, #336]	; (800f798 <tcp_input+0x280>)
 800f648:	22df      	movs	r2, #223	; 0xdf
 800f64a:	495c      	ldr	r1, [pc, #368]	; (800f7bc <tcp_input+0x2a4>)
 800f64c:	4854      	ldr	r0, [pc, #336]	; (800f7a0 <tcp_input+0x288>)
 800f64e:	f007 fbcf 	bl	8016df0 <iprintf>
    LWIP_ASSERT("p->tot_len == p->next->tot_len", p->tot_len == p->next->tot_len);
 800f652:	687b      	ldr	r3, [r7, #4]
 800f654:	891a      	ldrh	r2, [r3, #8]
 800f656:	687b      	ldr	r3, [r7, #4]
 800f658:	681b      	ldr	r3, [r3, #0]
 800f65a:	891b      	ldrh	r3, [r3, #8]
 800f65c:	429a      	cmp	r2, r3
 800f65e:	d005      	beq.n	800f66c <tcp_input+0x154>
 800f660:	4b4d      	ldr	r3, [pc, #308]	; (800f798 <tcp_input+0x280>)
 800f662:	22e0      	movs	r2, #224	; 0xe0
 800f664:	4956      	ldr	r1, [pc, #344]	; (800f7c0 <tcp_input+0x2a8>)
 800f666:	484e      	ldr	r0, [pc, #312]	; (800f7a0 <tcp_input+0x288>)
 800f668:	f007 fbc2 	bl	8016df0 <iprintf>
  }

  /* Convert fields in TCP header to host byte order. */
  tcphdr->src = lwip_ntohs(tcphdr->src);
 800f66c:	4b4d      	ldr	r3, [pc, #308]	; (800f7a4 <tcp_input+0x28c>)
 800f66e:	681b      	ldr	r3, [r3, #0]
 800f670:	881b      	ldrh	r3, [r3, #0]
 800f672:	b29b      	uxth	r3, r3
 800f674:	4a4b      	ldr	r2, [pc, #300]	; (800f7a4 <tcp_input+0x28c>)
 800f676:	6814      	ldr	r4, [r2, #0]
 800f678:	4618      	mov	r0, r3
 800f67a:	f7fc fa07 	bl	800ba8c <lwip_htons>
 800f67e:	4603      	mov	r3, r0
 800f680:	8023      	strh	r3, [r4, #0]
  tcphdr->dest = lwip_ntohs(tcphdr->dest);
 800f682:	4b48      	ldr	r3, [pc, #288]	; (800f7a4 <tcp_input+0x28c>)
 800f684:	681b      	ldr	r3, [r3, #0]
 800f686:	885b      	ldrh	r3, [r3, #2]
 800f688:	b29b      	uxth	r3, r3
 800f68a:	4a46      	ldr	r2, [pc, #280]	; (800f7a4 <tcp_input+0x28c>)
 800f68c:	6814      	ldr	r4, [r2, #0]
 800f68e:	4618      	mov	r0, r3
 800f690:	f7fc f9fc 	bl	800ba8c <lwip_htons>
 800f694:	4603      	mov	r3, r0
 800f696:	8063      	strh	r3, [r4, #2]
  seqno = tcphdr->seqno = lwip_ntohl(tcphdr->seqno);
 800f698:	4b42      	ldr	r3, [pc, #264]	; (800f7a4 <tcp_input+0x28c>)
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	4a41      	ldr	r2, [pc, #260]	; (800f7a4 <tcp_input+0x28c>)
 800f6a0:	6814      	ldr	r4, [r2, #0]
 800f6a2:	4618      	mov	r0, r3
 800f6a4:	f7fc fa07 	bl	800bab6 <lwip_htonl>
 800f6a8:	4603      	mov	r3, r0
 800f6aa:	6063      	str	r3, [r4, #4]
 800f6ac:	6863      	ldr	r3, [r4, #4]
 800f6ae:	4a45      	ldr	r2, [pc, #276]	; (800f7c4 <tcp_input+0x2ac>)
 800f6b0:	6013      	str	r3, [r2, #0]
  ackno = tcphdr->ackno = lwip_ntohl(tcphdr->ackno);
 800f6b2:	4b3c      	ldr	r3, [pc, #240]	; (800f7a4 <tcp_input+0x28c>)
 800f6b4:	681b      	ldr	r3, [r3, #0]
 800f6b6:	689b      	ldr	r3, [r3, #8]
 800f6b8:	4a3a      	ldr	r2, [pc, #232]	; (800f7a4 <tcp_input+0x28c>)
 800f6ba:	6814      	ldr	r4, [r2, #0]
 800f6bc:	4618      	mov	r0, r3
 800f6be:	f7fc f9fa 	bl	800bab6 <lwip_htonl>
 800f6c2:	4603      	mov	r3, r0
 800f6c4:	60a3      	str	r3, [r4, #8]
 800f6c6:	68a3      	ldr	r3, [r4, #8]
 800f6c8:	4a3f      	ldr	r2, [pc, #252]	; (800f7c8 <tcp_input+0x2b0>)
 800f6ca:	6013      	str	r3, [r2, #0]
  tcphdr->wnd = lwip_ntohs(tcphdr->wnd);
 800f6cc:	4b35      	ldr	r3, [pc, #212]	; (800f7a4 <tcp_input+0x28c>)
 800f6ce:	681b      	ldr	r3, [r3, #0]
 800f6d0:	89db      	ldrh	r3, [r3, #14]
 800f6d2:	b29b      	uxth	r3, r3
 800f6d4:	4a33      	ldr	r2, [pc, #204]	; (800f7a4 <tcp_input+0x28c>)
 800f6d6:	6814      	ldr	r4, [r2, #0]
 800f6d8:	4618      	mov	r0, r3
 800f6da:	f7fc f9d7 	bl	800ba8c <lwip_htons>
 800f6de:	4603      	mov	r3, r0
 800f6e0:	81e3      	strh	r3, [r4, #14]

  flags = TCPH_FLAGS(tcphdr);
 800f6e2:	4b30      	ldr	r3, [pc, #192]	; (800f7a4 <tcp_input+0x28c>)
 800f6e4:	681b      	ldr	r3, [r3, #0]
 800f6e6:	899b      	ldrh	r3, [r3, #12]
 800f6e8:	b29b      	uxth	r3, r3
 800f6ea:	4618      	mov	r0, r3
 800f6ec:	f7fc f9ce 	bl	800ba8c <lwip_htons>
 800f6f0:	4603      	mov	r3, r0
 800f6f2:	b2db      	uxtb	r3, r3
 800f6f4:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800f6f8:	b2da      	uxtb	r2, r3
 800f6fa:	4b34      	ldr	r3, [pc, #208]	; (800f7cc <tcp_input+0x2b4>)
 800f6fc:	701a      	strb	r2, [r3, #0]
  tcplen = p->tot_len;
 800f6fe:	687b      	ldr	r3, [r7, #4]
 800f700:	891a      	ldrh	r2, [r3, #8]
 800f702:	4b33      	ldr	r3, [pc, #204]	; (800f7d0 <tcp_input+0x2b8>)
 800f704:	801a      	strh	r2, [r3, #0]
  if (flags & (TCP_FIN | TCP_SYN)) {
 800f706:	4b31      	ldr	r3, [pc, #196]	; (800f7cc <tcp_input+0x2b4>)
 800f708:	781b      	ldrb	r3, [r3, #0]
 800f70a:	f003 0303 	and.w	r3, r3, #3
 800f70e:	2b00      	cmp	r3, #0
 800f710:	d00c      	beq.n	800f72c <tcp_input+0x214>
    tcplen++;
 800f712:	4b2f      	ldr	r3, [pc, #188]	; (800f7d0 <tcp_input+0x2b8>)
 800f714:	881b      	ldrh	r3, [r3, #0]
 800f716:	3301      	adds	r3, #1
 800f718:	b29a      	uxth	r2, r3
 800f71a:	4b2d      	ldr	r3, [pc, #180]	; (800f7d0 <tcp_input+0x2b8>)
 800f71c:	801a      	strh	r2, [r3, #0]
    if (tcplen < p->tot_len) {
 800f71e:	687b      	ldr	r3, [r7, #4]
 800f720:	891a      	ldrh	r2, [r3, #8]
 800f722:	4b2b      	ldr	r3, [pc, #172]	; (800f7d0 <tcp_input+0x2b8>)
 800f724:	881b      	ldrh	r3, [r3, #0]
 800f726:	429a      	cmp	r2, r3
 800f728:	f200 82e6 	bhi.w	800fcf8 <tcp_input+0x7e0>
    }
  }

  /* Demultiplex an incoming segment. First, we check if it is destined
     for an active connection. */
  prev = NULL;
 800f72c:	2300      	movs	r3, #0
 800f72e:	61bb      	str	r3, [r7, #24]

  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f730:	4b28      	ldr	r3, [pc, #160]	; (800f7d4 <tcp_input+0x2bc>)
 800f732:	681b      	ldr	r3, [r3, #0]
 800f734:	61fb      	str	r3, [r7, #28]
 800f736:	e09d      	b.n	800f874 <tcp_input+0x35c>
    LWIP_ASSERT("tcp_input: active pcb->state != CLOSED", pcb->state != CLOSED);
 800f738:	69fb      	ldr	r3, [r7, #28]
 800f73a:	7d1b      	ldrb	r3, [r3, #20]
 800f73c:	2b00      	cmp	r3, #0
 800f73e:	d105      	bne.n	800f74c <tcp_input+0x234>
 800f740:	4b15      	ldr	r3, [pc, #84]	; (800f798 <tcp_input+0x280>)
 800f742:	22fb      	movs	r2, #251	; 0xfb
 800f744:	4924      	ldr	r1, [pc, #144]	; (800f7d8 <tcp_input+0x2c0>)
 800f746:	4816      	ldr	r0, [pc, #88]	; (800f7a0 <tcp_input+0x288>)
 800f748:	f007 fb52 	bl	8016df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != TIME-WAIT", pcb->state != TIME_WAIT);
 800f74c:	69fb      	ldr	r3, [r7, #28]
 800f74e:	7d1b      	ldrb	r3, [r3, #20]
 800f750:	2b0a      	cmp	r3, #10
 800f752:	d105      	bne.n	800f760 <tcp_input+0x248>
 800f754:	4b10      	ldr	r3, [pc, #64]	; (800f798 <tcp_input+0x280>)
 800f756:	22fc      	movs	r2, #252	; 0xfc
 800f758:	4920      	ldr	r1, [pc, #128]	; (800f7dc <tcp_input+0x2c4>)
 800f75a:	4811      	ldr	r0, [pc, #68]	; (800f7a0 <tcp_input+0x288>)
 800f75c:	f007 fb48 	bl	8016df0 <iprintf>
    LWIP_ASSERT("tcp_input: active pcb->state != LISTEN", pcb->state != LISTEN);
 800f760:	69fb      	ldr	r3, [r7, #28]
 800f762:	7d1b      	ldrb	r3, [r3, #20]
 800f764:	2b01      	cmp	r3, #1
 800f766:	d105      	bne.n	800f774 <tcp_input+0x25c>
 800f768:	4b0b      	ldr	r3, [pc, #44]	; (800f798 <tcp_input+0x280>)
 800f76a:	22fd      	movs	r2, #253	; 0xfd
 800f76c:	491c      	ldr	r1, [pc, #112]	; (800f7e0 <tcp_input+0x2c8>)
 800f76e:	480c      	ldr	r0, [pc, #48]	; (800f7a0 <tcp_input+0x288>)
 800f770:	f007 fb3e 	bl	8016df0 <iprintf>

    /* check if PCB is bound to specific netif */
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f774:	69fb      	ldr	r3, [r7, #28]
 800f776:	7a1b      	ldrb	r3, [r3, #8]
 800f778:	2b00      	cmp	r3, #0
 800f77a:	d033      	beq.n	800f7e4 <tcp_input+0x2cc>
        (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f77c:	69fb      	ldr	r3, [r7, #28]
 800f77e:	7a1a      	ldrb	r2, [r3, #8]
 800f780:	4b09      	ldr	r3, [pc, #36]	; (800f7a8 <tcp_input+0x290>)
 800f782:	685b      	ldr	r3, [r3, #4]
 800f784:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f788:	3301      	adds	r3, #1
 800f78a:	b2db      	uxtb	r3, r3
    if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f78c:	429a      	cmp	r2, r3
 800f78e:	d029      	beq.n	800f7e4 <tcp_input+0x2cc>
      prev = pcb;
 800f790:	69fb      	ldr	r3, [r7, #28]
 800f792:	61bb      	str	r3, [r7, #24]
      continue;
 800f794:	e06b      	b.n	800f86e <tcp_input+0x356>
 800f796:	bf00      	nop
 800f798:	08019eb4 	.word	0x08019eb4
 800f79c:	08019ee8 	.word	0x08019ee8
 800f7a0:	08019f00 	.word	0x08019f00
 800f7a4:	2000f81c 	.word	0x2000f81c
 800f7a8:	20009ee0 	.word	0x20009ee0
 800f7ac:	2000f820 	.word	0x2000f820
 800f7b0:	2000f824 	.word	0x2000f824
 800f7b4:	2000f822 	.word	0x2000f822
 800f7b8:	08019f28 	.word	0x08019f28
 800f7bc:	08019f38 	.word	0x08019f38
 800f7c0:	08019f44 	.word	0x08019f44
 800f7c4:	2000f82c 	.word	0x2000f82c
 800f7c8:	2000f830 	.word	0x2000f830
 800f7cc:	2000f838 	.word	0x2000f838
 800f7d0:	2000f836 	.word	0x2000f836
 800f7d4:	2000f800 	.word	0x2000f800
 800f7d8:	08019f64 	.word	0x08019f64
 800f7dc:	08019f8c 	.word	0x08019f8c
 800f7e0:	08019fb8 	.word	0x08019fb8
    }

    if (pcb->remote_port == tcphdr->src &&
 800f7e4:	69fb      	ldr	r3, [r7, #28]
 800f7e6:	8b1a      	ldrh	r2, [r3, #24]
 800f7e8:	4b72      	ldr	r3, [pc, #456]	; (800f9b4 <tcp_input+0x49c>)
 800f7ea:	681b      	ldr	r3, [r3, #0]
 800f7ec:	881b      	ldrh	r3, [r3, #0]
 800f7ee:	b29b      	uxth	r3, r3
 800f7f0:	429a      	cmp	r2, r3
 800f7f2:	d13a      	bne.n	800f86a <tcp_input+0x352>
        pcb->local_port == tcphdr->dest &&
 800f7f4:	69fb      	ldr	r3, [r7, #28]
 800f7f6:	8ada      	ldrh	r2, [r3, #22]
 800f7f8:	4b6e      	ldr	r3, [pc, #440]	; (800f9b4 <tcp_input+0x49c>)
 800f7fa:	681b      	ldr	r3, [r3, #0]
 800f7fc:	885b      	ldrh	r3, [r3, #2]
 800f7fe:	b29b      	uxth	r3, r3
    if (pcb->remote_port == tcphdr->src &&
 800f800:	429a      	cmp	r2, r3
 800f802:	d132      	bne.n	800f86a <tcp_input+0x352>
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f804:	69fb      	ldr	r3, [r7, #28]
 800f806:	685a      	ldr	r2, [r3, #4]
 800f808:	4b6b      	ldr	r3, [pc, #428]	; (800f9b8 <tcp_input+0x4a0>)
 800f80a:	691b      	ldr	r3, [r3, #16]
        pcb->local_port == tcphdr->dest &&
 800f80c:	429a      	cmp	r2, r3
 800f80e:	d12c      	bne.n	800f86a <tcp_input+0x352>
        ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f810:	69fb      	ldr	r3, [r7, #28]
 800f812:	681a      	ldr	r2, [r3, #0]
 800f814:	4b68      	ldr	r3, [pc, #416]	; (800f9b8 <tcp_input+0x4a0>)
 800f816:	695b      	ldr	r3, [r3, #20]
        ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f818:	429a      	cmp	r2, r3
 800f81a:	d126      	bne.n	800f86a <tcp_input+0x352>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      LWIP_ASSERT("tcp_input: pcb->next != pcb (before cache)", pcb->next != pcb);
 800f81c:	69fb      	ldr	r3, [r7, #28]
 800f81e:	68db      	ldr	r3, [r3, #12]
 800f820:	69fa      	ldr	r2, [r7, #28]
 800f822:	429a      	cmp	r2, r3
 800f824:	d106      	bne.n	800f834 <tcp_input+0x31c>
 800f826:	4b65      	ldr	r3, [pc, #404]	; (800f9bc <tcp_input+0x4a4>)
 800f828:	f240 120d 	movw	r2, #269	; 0x10d
 800f82c:	4964      	ldr	r1, [pc, #400]	; (800f9c0 <tcp_input+0x4a8>)
 800f82e:	4865      	ldr	r0, [pc, #404]	; (800f9c4 <tcp_input+0x4ac>)
 800f830:	f007 fade 	bl	8016df0 <iprintf>
      if (prev != NULL) {
 800f834:	69bb      	ldr	r3, [r7, #24]
 800f836:	2b00      	cmp	r3, #0
 800f838:	d00a      	beq.n	800f850 <tcp_input+0x338>
        prev->next = pcb->next;
 800f83a:	69fb      	ldr	r3, [r7, #28]
 800f83c:	68da      	ldr	r2, [r3, #12]
 800f83e:	69bb      	ldr	r3, [r7, #24]
 800f840:	60da      	str	r2, [r3, #12]
        pcb->next = tcp_active_pcbs;
 800f842:	4b61      	ldr	r3, [pc, #388]	; (800f9c8 <tcp_input+0x4b0>)
 800f844:	681a      	ldr	r2, [r3, #0]
 800f846:	69fb      	ldr	r3, [r7, #28]
 800f848:	60da      	str	r2, [r3, #12]
        tcp_active_pcbs = pcb;
 800f84a:	4a5f      	ldr	r2, [pc, #380]	; (800f9c8 <tcp_input+0x4b0>)
 800f84c:	69fb      	ldr	r3, [r7, #28]
 800f84e:	6013      	str	r3, [r2, #0]
      } else {
        TCP_STATS_INC(tcp.cachehit);
      }
      LWIP_ASSERT("tcp_input: pcb->next != pcb (after cache)", pcb->next != pcb);
 800f850:	69fb      	ldr	r3, [r7, #28]
 800f852:	68db      	ldr	r3, [r3, #12]
 800f854:	69fa      	ldr	r2, [r7, #28]
 800f856:	429a      	cmp	r2, r3
 800f858:	d111      	bne.n	800f87e <tcp_input+0x366>
 800f85a:	4b58      	ldr	r3, [pc, #352]	; (800f9bc <tcp_input+0x4a4>)
 800f85c:	f240 1215 	movw	r2, #277	; 0x115
 800f860:	495a      	ldr	r1, [pc, #360]	; (800f9cc <tcp_input+0x4b4>)
 800f862:	4858      	ldr	r0, [pc, #352]	; (800f9c4 <tcp_input+0x4ac>)
 800f864:	f007 fac4 	bl	8016df0 <iprintf>
      break;
 800f868:	e009      	b.n	800f87e <tcp_input+0x366>
    }
    prev = pcb;
 800f86a:	69fb      	ldr	r3, [r7, #28]
 800f86c:	61bb      	str	r3, [r7, #24]
  for (pcb = tcp_active_pcbs; pcb != NULL; pcb = pcb->next) {
 800f86e:	69fb      	ldr	r3, [r7, #28]
 800f870:	68db      	ldr	r3, [r3, #12]
 800f872:	61fb      	str	r3, [r7, #28]
 800f874:	69fb      	ldr	r3, [r7, #28]
 800f876:	2b00      	cmp	r3, #0
 800f878:	f47f af5e 	bne.w	800f738 <tcp_input+0x220>
 800f87c:	e000      	b.n	800f880 <tcp_input+0x368>
      break;
 800f87e:	bf00      	nop
  }

  if (pcb == NULL) {
 800f880:	69fb      	ldr	r3, [r7, #28]
 800f882:	2b00      	cmp	r3, #0
 800f884:	f040 80aa 	bne.w	800f9dc <tcp_input+0x4c4>
    /* If it did not go to an active connection, we check the connections
       in the TIME-WAIT state. */
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f888:	4b51      	ldr	r3, [pc, #324]	; (800f9d0 <tcp_input+0x4b8>)
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	61fb      	str	r3, [r7, #28]
 800f88e:	e03f      	b.n	800f910 <tcp_input+0x3f8>
      LWIP_ASSERT("tcp_input: TIME-WAIT pcb->state == TIME-WAIT", pcb->state == TIME_WAIT);
 800f890:	69fb      	ldr	r3, [r7, #28]
 800f892:	7d1b      	ldrb	r3, [r3, #20]
 800f894:	2b0a      	cmp	r3, #10
 800f896:	d006      	beq.n	800f8a6 <tcp_input+0x38e>
 800f898:	4b48      	ldr	r3, [pc, #288]	; (800f9bc <tcp_input+0x4a4>)
 800f89a:	f240 121f 	movw	r2, #287	; 0x11f
 800f89e:	494d      	ldr	r1, [pc, #308]	; (800f9d4 <tcp_input+0x4bc>)
 800f8a0:	4848      	ldr	r0, [pc, #288]	; (800f9c4 <tcp_input+0x4ac>)
 800f8a2:	f007 faa5 	bl	8016df0 <iprintf>

      /* check if PCB is bound to specific netif */
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8a6:	69fb      	ldr	r3, [r7, #28]
 800f8a8:	7a1b      	ldrb	r3, [r3, #8]
 800f8aa:	2b00      	cmp	r3, #0
 800f8ac:	d009      	beq.n	800f8c2 <tcp_input+0x3aa>
          (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f8ae:	69fb      	ldr	r3, [r7, #28]
 800f8b0:	7a1a      	ldrb	r2, [r3, #8]
 800f8b2:	4b41      	ldr	r3, [pc, #260]	; (800f9b8 <tcp_input+0x4a0>)
 800f8b4:	685b      	ldr	r3, [r3, #4]
 800f8b6:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f8ba:	3301      	adds	r3, #1
 800f8bc:	b2db      	uxtb	r3, r3
      if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 800f8be:	429a      	cmp	r2, r3
 800f8c0:	d122      	bne.n	800f908 <tcp_input+0x3f0>
        continue;
      }

      if (pcb->remote_port == tcphdr->src &&
 800f8c2:	69fb      	ldr	r3, [r7, #28]
 800f8c4:	8b1a      	ldrh	r2, [r3, #24]
 800f8c6:	4b3b      	ldr	r3, [pc, #236]	; (800f9b4 <tcp_input+0x49c>)
 800f8c8:	681b      	ldr	r3, [r3, #0]
 800f8ca:	881b      	ldrh	r3, [r3, #0]
 800f8cc:	b29b      	uxth	r3, r3
 800f8ce:	429a      	cmp	r2, r3
 800f8d0:	d11b      	bne.n	800f90a <tcp_input+0x3f2>
          pcb->local_port == tcphdr->dest &&
 800f8d2:	69fb      	ldr	r3, [r7, #28]
 800f8d4:	8ada      	ldrh	r2, [r3, #22]
 800f8d6:	4b37      	ldr	r3, [pc, #220]	; (800f9b4 <tcp_input+0x49c>)
 800f8d8:	681b      	ldr	r3, [r3, #0]
 800f8da:	885b      	ldrh	r3, [r3, #2]
 800f8dc:	b29b      	uxth	r3, r3
      if (pcb->remote_port == tcphdr->src &&
 800f8de:	429a      	cmp	r2, r3
 800f8e0:	d113      	bne.n	800f90a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8e2:	69fb      	ldr	r3, [r7, #28]
 800f8e4:	685a      	ldr	r2, [r3, #4]
 800f8e6:	4b34      	ldr	r3, [pc, #208]	; (800f9b8 <tcp_input+0x4a0>)
 800f8e8:	691b      	ldr	r3, [r3, #16]
          pcb->local_port == tcphdr->dest &&
 800f8ea:	429a      	cmp	r2, r3
 800f8ec:	d10d      	bne.n	800f90a <tcp_input+0x3f2>
          ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 800f8ee:	69fb      	ldr	r3, [r7, #28]
 800f8f0:	681a      	ldr	r2, [r3, #0]
 800f8f2:	4b31      	ldr	r3, [pc, #196]	; (800f9b8 <tcp_input+0x4a0>)
 800f8f4:	695b      	ldr	r3, [r3, #20]
          ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()) &&
 800f8f6:	429a      	cmp	r2, r3
 800f8f8:	d107      	bne.n	800f90a <tcp_input+0x3f2>
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
        if (LWIP_HOOK_TCP_INPACKET_PCB(pcb, tcphdr, tcphdr_optlen, tcphdr_opt1len,
                                       tcphdr_opt2, p) == ERR_OK)
#endif
        {
          tcp_timewait_input(pcb);
 800f8fa:	69f8      	ldr	r0, [r7, #28]
 800f8fc:	f000 fb56 	bl	800ffac <tcp_timewait_input>
        }
        pbuf_free(p);
 800f900:	6878      	ldr	r0, [r7, #4]
 800f902:	f7fd fcb5 	bl	800d270 <pbuf_free>
        return;
 800f906:	e1fd      	b.n	800fd04 <tcp_input+0x7ec>
        continue;
 800f908:	bf00      	nop
    for (pcb = tcp_tw_pcbs; pcb != NULL; pcb = pcb->next) {
 800f90a:	69fb      	ldr	r3, [r7, #28]
 800f90c:	68db      	ldr	r3, [r3, #12]
 800f90e:	61fb      	str	r3, [r7, #28]
 800f910:	69fb      	ldr	r3, [r7, #28]
 800f912:	2b00      	cmp	r3, #0
 800f914:	d1bc      	bne.n	800f890 <tcp_input+0x378>
      }
    }

    /* Finally, if we still did not get a match, we check all PCBs that
       are LISTENing for incoming connections. */
    prev = NULL;
 800f916:	2300      	movs	r3, #0
 800f918:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f91a:	4b2f      	ldr	r3, [pc, #188]	; (800f9d8 <tcp_input+0x4c0>)
 800f91c:	681b      	ldr	r3, [r3, #0]
 800f91e:	617b      	str	r3, [r7, #20]
 800f920:	e02a      	b.n	800f978 <tcp_input+0x460>
      /* check if PCB is bound to specific netif */
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f922:	697b      	ldr	r3, [r7, #20]
 800f924:	7a1b      	ldrb	r3, [r3, #8]
 800f926:	2b00      	cmp	r3, #0
 800f928:	d00c      	beq.n	800f944 <tcp_input+0x42c>
          (lpcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 800f92a:	697b      	ldr	r3, [r7, #20]
 800f92c:	7a1a      	ldrb	r2, [r3, #8]
 800f92e:	4b22      	ldr	r3, [pc, #136]	; (800f9b8 <tcp_input+0x4a0>)
 800f930:	685b      	ldr	r3, [r3, #4]
 800f932:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 800f936:	3301      	adds	r3, #1
 800f938:	b2db      	uxtb	r3, r3
      if ((lpcb->netif_idx != NETIF_NO_INDEX) &&
 800f93a:	429a      	cmp	r2, r3
 800f93c:	d002      	beq.n	800f944 <tcp_input+0x42c>
        prev = (struct tcp_pcb *)lpcb;
 800f93e:	697b      	ldr	r3, [r7, #20]
 800f940:	61bb      	str	r3, [r7, #24]
        continue;
 800f942:	e016      	b.n	800f972 <tcp_input+0x45a>
      }

      if (lpcb->local_port == tcphdr->dest) {
 800f944:	697b      	ldr	r3, [r7, #20]
 800f946:	8ada      	ldrh	r2, [r3, #22]
 800f948:	4b1a      	ldr	r3, [pc, #104]	; (800f9b4 <tcp_input+0x49c>)
 800f94a:	681b      	ldr	r3, [r3, #0]
 800f94c:	885b      	ldrh	r3, [r3, #2]
 800f94e:	b29b      	uxth	r3, r3
 800f950:	429a      	cmp	r2, r3
 800f952:	d10c      	bne.n	800f96e <tcp_input+0x456>
          lpcb_prev = prev;
#else /* SO_REUSE */
          break;
#endif /* SO_REUSE */
        } else if (IP_ADDR_PCB_VERSION_MATCH_EXACT(lpcb, ip_current_dest_addr())) {
          if (ip_addr_cmp(&lpcb->local_ip, ip_current_dest_addr())) {
 800f954:	697b      	ldr	r3, [r7, #20]
 800f956:	681a      	ldr	r2, [r3, #0]
 800f958:	4b17      	ldr	r3, [pc, #92]	; (800f9b8 <tcp_input+0x4a0>)
 800f95a:	695b      	ldr	r3, [r3, #20]
 800f95c:	429a      	cmp	r2, r3
 800f95e:	d00f      	beq.n	800f980 <tcp_input+0x468>
            /* found an exact match */
            break;
          } else if (ip_addr_isany(&lpcb->local_ip)) {
 800f960:	697b      	ldr	r3, [r7, #20]
 800f962:	2b00      	cmp	r3, #0
 800f964:	d00d      	beq.n	800f982 <tcp_input+0x46a>
 800f966:	697b      	ldr	r3, [r7, #20]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	2b00      	cmp	r3, #0
 800f96c:	d009      	beq.n	800f982 <tcp_input+0x46a>
            break;
#endif /* SO_REUSE */
          }
        }
      }
      prev = (struct tcp_pcb *)lpcb;
 800f96e:	697b      	ldr	r3, [r7, #20]
 800f970:	61bb      	str	r3, [r7, #24]
    for (lpcb = tcp_listen_pcbs.listen_pcbs; lpcb != NULL; lpcb = lpcb->next) {
 800f972:	697b      	ldr	r3, [r7, #20]
 800f974:	68db      	ldr	r3, [r3, #12]
 800f976:	617b      	str	r3, [r7, #20]
 800f978:	697b      	ldr	r3, [r7, #20]
 800f97a:	2b00      	cmp	r3, #0
 800f97c:	d1d1      	bne.n	800f922 <tcp_input+0x40a>
 800f97e:	e000      	b.n	800f982 <tcp_input+0x46a>
            break;
 800f980:	bf00      	nop
      /* only pass to ANY if no specific local IP has been found */
      lpcb = lpcb_any;
      prev = lpcb_prev;
    }
#endif /* SO_REUSE */
    if (lpcb != NULL) {
 800f982:	697b      	ldr	r3, [r7, #20]
 800f984:	2b00      	cmp	r3, #0
 800f986:	d029      	beq.n	800f9dc <tcp_input+0x4c4>
      /* Move this PCB to the front of the list so that subsequent
         lookups will be faster (we exploit locality in TCP segment
         arrivals). */
      if (prev != NULL) {
 800f988:	69bb      	ldr	r3, [r7, #24]
 800f98a:	2b00      	cmp	r3, #0
 800f98c:	d00a      	beq.n	800f9a4 <tcp_input+0x48c>
        ((struct tcp_pcb_listen *)prev)->next = lpcb->next;
 800f98e:	697b      	ldr	r3, [r7, #20]
 800f990:	68da      	ldr	r2, [r3, #12]
 800f992:	69bb      	ldr	r3, [r7, #24]
 800f994:	60da      	str	r2, [r3, #12]
        /* our successor is the remainder of the listening list */
        lpcb->next = tcp_listen_pcbs.listen_pcbs;
 800f996:	4b10      	ldr	r3, [pc, #64]	; (800f9d8 <tcp_input+0x4c0>)
 800f998:	681a      	ldr	r2, [r3, #0]
 800f99a:	697b      	ldr	r3, [r7, #20]
 800f99c:	60da      	str	r2, [r3, #12]
        /* put this listening pcb at the head of the listening list */
        tcp_listen_pcbs.listen_pcbs = lpcb;
 800f99e:	4a0e      	ldr	r2, [pc, #56]	; (800f9d8 <tcp_input+0x4c0>)
 800f9a0:	697b      	ldr	r3, [r7, #20]
 800f9a2:	6013      	str	r3, [r2, #0]
#ifdef LWIP_HOOK_TCP_INPACKET_PCB
      if (LWIP_HOOK_TCP_INPACKET_PCB((struct tcp_pcb *)lpcb, tcphdr, tcphdr_optlen,
                                     tcphdr_opt1len, tcphdr_opt2, p) == ERR_OK)
#endif
      {
        tcp_listen_input(lpcb);
 800f9a4:	6978      	ldr	r0, [r7, #20]
 800f9a6:	f000 fa03 	bl	800fdb0 <tcp_listen_input>
      }
      pbuf_free(p);
 800f9aa:	6878      	ldr	r0, [r7, #4]
 800f9ac:	f7fd fc60 	bl	800d270 <pbuf_free>
      return;
 800f9b0:	e1a8      	b.n	800fd04 <tcp_input+0x7ec>
 800f9b2:	bf00      	nop
 800f9b4:	2000f81c 	.word	0x2000f81c
 800f9b8:	20009ee0 	.word	0x20009ee0
 800f9bc:	08019eb4 	.word	0x08019eb4
 800f9c0:	08019fe0 	.word	0x08019fe0
 800f9c4:	08019f00 	.word	0x08019f00
 800f9c8:	2000f800 	.word	0x2000f800
 800f9cc:	0801a00c 	.word	0x0801a00c
 800f9d0:	2000f804 	.word	0x2000f804
 800f9d4:	0801a038 	.word	0x0801a038
 800f9d8:	2000f7fc 	.word	0x2000f7fc
      tcphdr_opt1len, tcphdr_opt2, p) != ERR_OK) {
    pbuf_free(p);
    return;
  }
#endif
  if (pcb != NULL) {
 800f9dc:	69fb      	ldr	r3, [r7, #28]
 800f9de:	2b00      	cmp	r3, #0
 800f9e0:	f000 8158 	beq.w	800fc94 <tcp_input+0x77c>
#if TCP_INPUT_DEBUG
    tcp_debug_print_state(pcb->state);
#endif /* TCP_INPUT_DEBUG */

    /* Set up a tcp_seg structure. */
    inseg.next = NULL;
 800f9e4:	4b95      	ldr	r3, [pc, #596]	; (800fc3c <tcp_input+0x724>)
 800f9e6:	2200      	movs	r2, #0
 800f9e8:	601a      	str	r2, [r3, #0]
    inseg.len = p->tot_len;
 800f9ea:	687b      	ldr	r3, [r7, #4]
 800f9ec:	891a      	ldrh	r2, [r3, #8]
 800f9ee:	4b93      	ldr	r3, [pc, #588]	; (800fc3c <tcp_input+0x724>)
 800f9f0:	811a      	strh	r2, [r3, #8]
    inseg.p = p;
 800f9f2:	4a92      	ldr	r2, [pc, #584]	; (800fc3c <tcp_input+0x724>)
 800f9f4:	687b      	ldr	r3, [r7, #4]
 800f9f6:	6053      	str	r3, [r2, #4]
    inseg.tcphdr = tcphdr;
 800f9f8:	4b91      	ldr	r3, [pc, #580]	; (800fc40 <tcp_input+0x728>)
 800f9fa:	681b      	ldr	r3, [r3, #0]
 800f9fc:	4a8f      	ldr	r2, [pc, #572]	; (800fc3c <tcp_input+0x724>)
 800f9fe:	60d3      	str	r3, [r2, #12]

    recv_data = NULL;
 800fa00:	4b90      	ldr	r3, [pc, #576]	; (800fc44 <tcp_input+0x72c>)
 800fa02:	2200      	movs	r2, #0
 800fa04:	601a      	str	r2, [r3, #0]
    recv_flags = 0;
 800fa06:	4b90      	ldr	r3, [pc, #576]	; (800fc48 <tcp_input+0x730>)
 800fa08:	2200      	movs	r2, #0
 800fa0a:	701a      	strb	r2, [r3, #0]
    recv_acked = 0;
 800fa0c:	4b8f      	ldr	r3, [pc, #572]	; (800fc4c <tcp_input+0x734>)
 800fa0e:	2200      	movs	r2, #0
 800fa10:	801a      	strh	r2, [r3, #0]

    if (flags & TCP_PSH) {
 800fa12:	4b8f      	ldr	r3, [pc, #572]	; (800fc50 <tcp_input+0x738>)
 800fa14:	781b      	ldrb	r3, [r3, #0]
 800fa16:	f003 0308 	and.w	r3, r3, #8
 800fa1a:	2b00      	cmp	r3, #0
 800fa1c:	d006      	beq.n	800fa2c <tcp_input+0x514>
      p->flags |= PBUF_FLAG_PUSH;
 800fa1e:	687b      	ldr	r3, [r7, #4]
 800fa20:	7b5b      	ldrb	r3, [r3, #13]
 800fa22:	f043 0301 	orr.w	r3, r3, #1
 800fa26:	b2da      	uxtb	r2, r3
 800fa28:	687b      	ldr	r3, [r7, #4]
 800fa2a:	735a      	strb	r2, [r3, #13]
    }

    /* If there is data which was previously "refused" by upper layer */
    if (pcb->refused_data != NULL) {
 800fa2c:	69fb      	ldr	r3, [r7, #28]
 800fa2e:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fa30:	2b00      	cmp	r3, #0
 800fa32:	d017      	beq.n	800fa64 <tcp_input+0x54c>
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa34:	69f8      	ldr	r0, [r7, #28]
 800fa36:	f7ff f85b 	bl	800eaf0 <tcp_process_refused_data>
 800fa3a:	4603      	mov	r3, r0
 800fa3c:	f113 0f0d 	cmn.w	r3, #13
 800fa40:	d007      	beq.n	800fa52 <tcp_input+0x53a>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa42:	69fb      	ldr	r3, [r7, #28]
 800fa44:	6f9b      	ldr	r3, [r3, #120]	; 0x78
      if ((tcp_process_refused_data(pcb) == ERR_ABRT) ||
 800fa46:	2b00      	cmp	r3, #0
 800fa48:	d00c      	beq.n	800fa64 <tcp_input+0x54c>
          ((pcb->refused_data != NULL) && (tcplen > 0))) {
 800fa4a:	4b82      	ldr	r3, [pc, #520]	; (800fc54 <tcp_input+0x73c>)
 800fa4c:	881b      	ldrh	r3, [r3, #0]
 800fa4e:	2b00      	cmp	r3, #0
 800fa50:	d008      	beq.n	800fa64 <tcp_input+0x54c>
        /* pcb has been aborted or refused data is still refused and the new
           segment contains data */
        if (pcb->rcv_ann_wnd == 0) {
 800fa52:	69fb      	ldr	r3, [r7, #28]
 800fa54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800fa56:	2b00      	cmp	r3, #0
 800fa58:	f040 80e3 	bne.w	800fc22 <tcp_input+0x70a>
          /* this is a zero-window probe, we respond to it with current RCV.NXT
          and drop the data segment */
          tcp_send_empty_ack(pcb);
 800fa5c:	69f8      	ldr	r0, [r7, #28]
 800fa5e:	f003 fe05 	bl	801366c <tcp_send_empty_ack>
        }
        TCP_STATS_INC(tcp.drop);
        MIB2_STATS_INC(mib2.tcpinerrs);
        goto aborted;
 800fa62:	e0de      	b.n	800fc22 <tcp_input+0x70a>
      }
    }
    tcp_input_pcb = pcb;
 800fa64:	4a7c      	ldr	r2, [pc, #496]	; (800fc58 <tcp_input+0x740>)
 800fa66:	69fb      	ldr	r3, [r7, #28]
 800fa68:	6013      	str	r3, [r2, #0]
    err = tcp_process(pcb);
 800fa6a:	69f8      	ldr	r0, [r7, #28]
 800fa6c:	f000 fb18 	bl	80100a0 <tcp_process>
 800fa70:	4603      	mov	r3, r0
 800fa72:	74fb      	strb	r3, [r7, #19]
    /* A return value of ERR_ABRT means that tcp_abort() was called
       and that the pcb has been freed. If so, we don't do anything. */
    if (err != ERR_ABRT) {
 800fa74:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fa78:	f113 0f0d 	cmn.w	r3, #13
 800fa7c:	f000 80d3 	beq.w	800fc26 <tcp_input+0x70e>
      if (recv_flags & TF_RESET) {
 800fa80:	4b71      	ldr	r3, [pc, #452]	; (800fc48 <tcp_input+0x730>)
 800fa82:	781b      	ldrb	r3, [r3, #0]
 800fa84:	f003 0308 	and.w	r3, r3, #8
 800fa88:	2b00      	cmp	r3, #0
 800fa8a:	d015      	beq.n	800fab8 <tcp_input+0x5a0>
        /* TF_RESET means that the connection was reset by the other
           end. We then call the error callback to inform the
           application that the connection is dead before we
           deallocate the PCB. */
        TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_RST);
 800fa8c:	69fb      	ldr	r3, [r7, #28]
 800fa8e:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa92:	2b00      	cmp	r3, #0
 800fa94:	d008      	beq.n	800faa8 <tcp_input+0x590>
 800fa96:	69fb      	ldr	r3, [r7, #28]
 800fa98:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fa9c:	69fa      	ldr	r2, [r7, #28]
 800fa9e:	6912      	ldr	r2, [r2, #16]
 800faa0:	f06f 010d 	mvn.w	r1, #13
 800faa4:	4610      	mov	r0, r2
 800faa6:	4798      	blx	r3
        tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800faa8:	69f9      	ldr	r1, [r7, #28]
 800faaa:	486c      	ldr	r0, [pc, #432]	; (800fc5c <tcp_input+0x744>)
 800faac:	f7ff fbbc 	bl	800f228 <tcp_pcb_remove>
        tcp_free(pcb);
 800fab0:	69f8      	ldr	r0, [r7, #28]
 800fab2:	f7fd fe89 	bl	800d7c8 <tcp_free>
 800fab6:	e0da      	b.n	800fc6e <tcp_input+0x756>
      } else {
        err = ERR_OK;
 800fab8:	2300      	movs	r3, #0
 800faba:	74fb      	strb	r3, [r7, #19]
        /* If the application has registered a "sent" function to be
           called when new send buffer space is available, we call it
           now. */
        if (recv_acked > 0) {
 800fabc:	4b63      	ldr	r3, [pc, #396]	; (800fc4c <tcp_input+0x734>)
 800fabe:	881b      	ldrh	r3, [r3, #0]
 800fac0:	2b00      	cmp	r3, #0
 800fac2:	d01d      	beq.n	800fb00 <tcp_input+0x5e8>
          while (acked > 0) {
            acked16 = (u16_t)LWIP_MIN(acked, 0xffffu);
            acked -= acked16;
#else
          {
            acked16 = recv_acked;
 800fac4:	4b61      	ldr	r3, [pc, #388]	; (800fc4c <tcp_input+0x734>)
 800fac6:	881b      	ldrh	r3, [r3, #0]
 800fac8:	81fb      	strh	r3, [r7, #14]
#endif
            TCP_EVENT_SENT(pcb, (u16_t)acked16, err);
 800faca:	69fb      	ldr	r3, [r7, #28]
 800facc:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fad0:	2b00      	cmp	r3, #0
 800fad2:	d00a      	beq.n	800faea <tcp_input+0x5d2>
 800fad4:	69fb      	ldr	r3, [r7, #28]
 800fad6:	f8d3 3080 	ldr.w	r3, [r3, #128]	; 0x80
 800fada:	69fa      	ldr	r2, [r7, #28]
 800fadc:	6910      	ldr	r0, [r2, #16]
 800fade:	89fa      	ldrh	r2, [r7, #14]
 800fae0:	69f9      	ldr	r1, [r7, #28]
 800fae2:	4798      	blx	r3
 800fae4:	4603      	mov	r3, r0
 800fae6:	74fb      	strb	r3, [r7, #19]
 800fae8:	e001      	b.n	800faee <tcp_input+0x5d6>
 800faea:	2300      	movs	r3, #0
 800faec:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800faee:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800faf2:	f113 0f0d 	cmn.w	r3, #13
 800faf6:	f000 8098 	beq.w	800fc2a <tcp_input+0x712>
              goto aborted;
            }
          }
          recv_acked = 0;
 800fafa:	4b54      	ldr	r3, [pc, #336]	; (800fc4c <tcp_input+0x734>)
 800fafc:	2200      	movs	r2, #0
 800fafe:	801a      	strh	r2, [r3, #0]
        }
        if (tcp_input_delayed_close(pcb)) {
 800fb00:	69f8      	ldr	r0, [r7, #28]
 800fb02:	f000 f915 	bl	800fd30 <tcp_input_delayed_close>
 800fb06:	4603      	mov	r3, r0
 800fb08:	2b00      	cmp	r3, #0
 800fb0a:	f040 8090 	bne.w	800fc2e <tcp_input+0x716>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
        while (recv_data != NULL) {
          struct pbuf *rest = NULL;
          pbuf_split_64k(recv_data, &rest);
#else /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
        if (recv_data != NULL) {
 800fb0e:	4b4d      	ldr	r3, [pc, #308]	; (800fc44 <tcp_input+0x72c>)
 800fb10:	681b      	ldr	r3, [r3, #0]
 800fb12:	2b00      	cmp	r3, #0
 800fb14:	d041      	beq.n	800fb9a <tcp_input+0x682>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */

          LWIP_ASSERT("pcb->refused_data == NULL", pcb->refused_data == NULL);
 800fb16:	69fb      	ldr	r3, [r7, #28]
 800fb18:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fb1a:	2b00      	cmp	r3, #0
 800fb1c:	d006      	beq.n	800fb2c <tcp_input+0x614>
 800fb1e:	4b50      	ldr	r3, [pc, #320]	; (800fc60 <tcp_input+0x748>)
 800fb20:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 800fb24:	494f      	ldr	r1, [pc, #316]	; (800fc64 <tcp_input+0x74c>)
 800fb26:	4850      	ldr	r0, [pc, #320]	; (800fc68 <tcp_input+0x750>)
 800fb28:	f007 f962 	bl	8016df0 <iprintf>
          if (pcb->flags & TF_RXCLOSED) {
 800fb2c:	69fb      	ldr	r3, [r7, #28]
 800fb2e:	8b5b      	ldrh	r3, [r3, #26]
 800fb30:	f003 0310 	and.w	r3, r3, #16
 800fb34:	2b00      	cmp	r3, #0
 800fb36:	d008      	beq.n	800fb4a <tcp_input+0x632>
            /* received data although already closed -> abort (send RST) to
               notify the remote host that not all data has been processed */
            pbuf_free(recv_data);
 800fb38:	4b42      	ldr	r3, [pc, #264]	; (800fc44 <tcp_input+0x72c>)
 800fb3a:	681b      	ldr	r3, [r3, #0]
 800fb3c:	4618      	mov	r0, r3
 800fb3e:	f7fd fb97 	bl	800d270 <pbuf_free>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_free(rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            tcp_abort(pcb);
 800fb42:	69f8      	ldr	r0, [r7, #28]
 800fb44:	f7fe f984 	bl	800de50 <tcp_abort>
            goto aborted;
 800fb48:	e091      	b.n	800fc6e <tcp_input+0x756>
          }

          /* Notify application that data has been received. */
          TCP_EVENT_RECV(pcb, recv_data, ERR_OK, err);
 800fb4a:	69fb      	ldr	r3, [r7, #28]
 800fb4c:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fb50:	2b00      	cmp	r3, #0
 800fb52:	d00c      	beq.n	800fb6e <tcp_input+0x656>
 800fb54:	69fb      	ldr	r3, [r7, #28]
 800fb56:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fb5a:	69fb      	ldr	r3, [r7, #28]
 800fb5c:	6918      	ldr	r0, [r3, #16]
 800fb5e:	4b39      	ldr	r3, [pc, #228]	; (800fc44 <tcp_input+0x72c>)
 800fb60:	681a      	ldr	r2, [r3, #0]
 800fb62:	2300      	movs	r3, #0
 800fb64:	69f9      	ldr	r1, [r7, #28]
 800fb66:	47a0      	blx	r4
 800fb68:	4603      	mov	r3, r0
 800fb6a:	74fb      	strb	r3, [r7, #19]
 800fb6c:	e008      	b.n	800fb80 <tcp_input+0x668>
 800fb6e:	4b35      	ldr	r3, [pc, #212]	; (800fc44 <tcp_input+0x72c>)
 800fb70:	681a      	ldr	r2, [r3, #0]
 800fb72:	2300      	movs	r3, #0
 800fb74:	69f9      	ldr	r1, [r7, #28]
 800fb76:	2000      	movs	r0, #0
 800fb78:	f7ff f890 	bl	800ec9c <tcp_recv_null>
 800fb7c:	4603      	mov	r3, r0
 800fb7e:	74fb      	strb	r3, [r7, #19]
          if (err == ERR_ABRT) {
 800fb80:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb84:	f113 0f0d 	cmn.w	r3, #13
 800fb88:	d053      	beq.n	800fc32 <tcp_input+0x71a>
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            goto aborted;
          }

          /* If the upper layer can't receive this data, store it */
          if (err != ERR_OK) {
 800fb8a:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fb8e:	2b00      	cmp	r3, #0
 800fb90:	d003      	beq.n	800fb9a <tcp_input+0x682>
#if TCP_QUEUE_OOSEQ && LWIP_WND_SCALE
            if (rest != NULL) {
              pbuf_cat(recv_data, rest);
            }
#endif /* TCP_QUEUE_OOSEQ && LWIP_WND_SCALE */
            pcb->refused_data = recv_data;
 800fb92:	4b2c      	ldr	r3, [pc, #176]	; (800fc44 <tcp_input+0x72c>)
 800fb94:	681a      	ldr	r2, [r3, #0]
 800fb96:	69fb      	ldr	r3, [r7, #28]
 800fb98:	679a      	str	r2, [r3, #120]	; 0x78
          }
        }

        /* If a FIN segment was received, we call the callback
           function with a NULL buffer to indicate EOF. */
        if (recv_flags & TF_GOT_FIN) {
 800fb9a:	4b2b      	ldr	r3, [pc, #172]	; (800fc48 <tcp_input+0x730>)
 800fb9c:	781b      	ldrb	r3, [r3, #0]
 800fb9e:	f003 0320 	and.w	r3, r3, #32
 800fba2:	2b00      	cmp	r3, #0
 800fba4:	d030      	beq.n	800fc08 <tcp_input+0x6f0>
          if (pcb->refused_data != NULL) {
 800fba6:	69fb      	ldr	r3, [r7, #28]
 800fba8:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbaa:	2b00      	cmp	r3, #0
 800fbac:	d009      	beq.n	800fbc2 <tcp_input+0x6aa>
            /* Delay this if we have refused data. */
            pcb->refused_data->flags |= PBUF_FLAG_TCP_FIN;
 800fbae:	69fb      	ldr	r3, [r7, #28]
 800fbb0:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbb2:	7b5a      	ldrb	r2, [r3, #13]
 800fbb4:	69fb      	ldr	r3, [r7, #28]
 800fbb6:	6f9b      	ldr	r3, [r3, #120]	; 0x78
 800fbb8:	f042 0220 	orr.w	r2, r2, #32
 800fbbc:	b2d2      	uxtb	r2, r2
 800fbbe:	735a      	strb	r2, [r3, #13]
 800fbc0:	e022      	b.n	800fc08 <tcp_input+0x6f0>
          } else {
            /* correct rcv_wnd as the application won't call tcp_recved()
               for the FIN's seqno */
            if (pcb->rcv_wnd != TCP_WND_MAX(pcb)) {
 800fbc2:	69fb      	ldr	r3, [r7, #28]
 800fbc4:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbc6:	f5b3 6f06 	cmp.w	r3, #2144	; 0x860
 800fbca:	d005      	beq.n	800fbd8 <tcp_input+0x6c0>
              pcb->rcv_wnd++;
 800fbcc:	69fb      	ldr	r3, [r7, #28]
 800fbce:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800fbd0:	3301      	adds	r3, #1
 800fbd2:	b29a      	uxth	r2, r3
 800fbd4:	69fb      	ldr	r3, [r7, #28]
 800fbd6:	851a      	strh	r2, [r3, #40]	; 0x28
            }
            TCP_EVENT_CLOSED(pcb, err);
 800fbd8:	69fb      	ldr	r3, [r7, #28]
 800fbda:	f8d3 3084 	ldr.w	r3, [r3, #132]	; 0x84
 800fbde:	2b00      	cmp	r3, #0
 800fbe0:	d00b      	beq.n	800fbfa <tcp_input+0x6e2>
 800fbe2:	69fb      	ldr	r3, [r7, #28]
 800fbe4:	f8d3 4084 	ldr.w	r4, [r3, #132]	; 0x84
 800fbe8:	69fb      	ldr	r3, [r7, #28]
 800fbea:	6918      	ldr	r0, [r3, #16]
 800fbec:	2300      	movs	r3, #0
 800fbee:	2200      	movs	r2, #0
 800fbf0:	69f9      	ldr	r1, [r7, #28]
 800fbf2:	47a0      	blx	r4
 800fbf4:	4603      	mov	r3, r0
 800fbf6:	74fb      	strb	r3, [r7, #19]
 800fbf8:	e001      	b.n	800fbfe <tcp_input+0x6e6>
 800fbfa:	2300      	movs	r3, #0
 800fbfc:	74fb      	strb	r3, [r7, #19]
            if (err == ERR_ABRT) {
 800fbfe:	f997 3013 	ldrsb.w	r3, [r7, #19]
 800fc02:	f113 0f0d 	cmn.w	r3, #13
 800fc06:	d016      	beq.n	800fc36 <tcp_input+0x71e>
              goto aborted;
            }
          }
        }

        tcp_input_pcb = NULL;
 800fc08:	4b13      	ldr	r3, [pc, #76]	; (800fc58 <tcp_input+0x740>)
 800fc0a:	2200      	movs	r2, #0
 800fc0c:	601a      	str	r2, [r3, #0]
        if (tcp_input_delayed_close(pcb)) {
 800fc0e:	69f8      	ldr	r0, [r7, #28]
 800fc10:	f000 f88e 	bl	800fd30 <tcp_input_delayed_close>
 800fc14:	4603      	mov	r3, r0
 800fc16:	2b00      	cmp	r3, #0
 800fc18:	d128      	bne.n	800fc6c <tcp_input+0x754>
          goto aborted;
        }
        /* Try to send something out. */
        tcp_output(pcb);
 800fc1a:	69f8      	ldr	r0, [r7, #28]
 800fc1c:	f002 ff20 	bl	8012a60 <tcp_output>
 800fc20:	e025      	b.n	800fc6e <tcp_input+0x756>
        goto aborted;
 800fc22:	bf00      	nop
 800fc24:	e023      	b.n	800fc6e <tcp_input+0x756>
#endif /* TCP_INPUT_DEBUG */
      }
    }
    /* Jump target if pcb has been aborted in a callback (by calling tcp_abort()).
       Below this line, 'pcb' may not be dereferenced! */
aborted:
 800fc26:	bf00      	nop
 800fc28:	e021      	b.n	800fc6e <tcp_input+0x756>
              goto aborted;
 800fc2a:	bf00      	nop
 800fc2c:	e01f      	b.n	800fc6e <tcp_input+0x756>
          goto aborted;
 800fc2e:	bf00      	nop
 800fc30:	e01d      	b.n	800fc6e <tcp_input+0x756>
            goto aborted;
 800fc32:	bf00      	nop
 800fc34:	e01b      	b.n	800fc6e <tcp_input+0x756>
              goto aborted;
 800fc36:	bf00      	nop
 800fc38:	e019      	b.n	800fc6e <tcp_input+0x756>
 800fc3a:	bf00      	nop
 800fc3c:	2000f80c 	.word	0x2000f80c
 800fc40:	2000f81c 	.word	0x2000f81c
 800fc44:	2000f83c 	.word	0x2000f83c
 800fc48:	2000f839 	.word	0x2000f839
 800fc4c:	2000f834 	.word	0x2000f834
 800fc50:	2000f838 	.word	0x2000f838
 800fc54:	2000f836 	.word	0x2000f836
 800fc58:	2000f840 	.word	0x2000f840
 800fc5c:	2000f800 	.word	0x2000f800
 800fc60:	08019eb4 	.word	0x08019eb4
 800fc64:	0801a068 	.word	0x0801a068
 800fc68:	08019f00 	.word	0x08019f00
          goto aborted;
 800fc6c:	bf00      	nop
    tcp_input_pcb = NULL;
 800fc6e:	4b27      	ldr	r3, [pc, #156]	; (800fd0c <tcp_input+0x7f4>)
 800fc70:	2200      	movs	r2, #0
 800fc72:	601a      	str	r2, [r3, #0]
    recv_data = NULL;
 800fc74:	4b26      	ldr	r3, [pc, #152]	; (800fd10 <tcp_input+0x7f8>)
 800fc76:	2200      	movs	r2, #0
 800fc78:	601a      	str	r2, [r3, #0]

    /* give up our reference to inseg.p */
    if (inseg.p != NULL) {
 800fc7a:	4b26      	ldr	r3, [pc, #152]	; (800fd14 <tcp_input+0x7fc>)
 800fc7c:	685b      	ldr	r3, [r3, #4]
 800fc7e:	2b00      	cmp	r3, #0
 800fc80:	d03f      	beq.n	800fd02 <tcp_input+0x7ea>
      pbuf_free(inseg.p);
 800fc82:	4b24      	ldr	r3, [pc, #144]	; (800fd14 <tcp_input+0x7fc>)
 800fc84:	685b      	ldr	r3, [r3, #4]
 800fc86:	4618      	mov	r0, r3
 800fc88:	f7fd faf2 	bl	800d270 <pbuf_free>
      inseg.p = NULL;
 800fc8c:	4b21      	ldr	r3, [pc, #132]	; (800fd14 <tcp_input+0x7fc>)
 800fc8e:	2200      	movs	r2, #0
 800fc90:	605a      	str	r2, [r3, #4]
    pbuf_free(p);
  }

  LWIP_ASSERT("tcp_input: tcp_pcbs_sane()", tcp_pcbs_sane());
  PERF_STOP("tcp_input");
  return;
 800fc92:	e036      	b.n	800fd02 <tcp_input+0x7ea>
    if (!(TCPH_FLAGS(tcphdr) & TCP_RST)) {
 800fc94:	4b20      	ldr	r3, [pc, #128]	; (800fd18 <tcp_input+0x800>)
 800fc96:	681b      	ldr	r3, [r3, #0]
 800fc98:	899b      	ldrh	r3, [r3, #12]
 800fc9a:	b29b      	uxth	r3, r3
 800fc9c:	4618      	mov	r0, r3
 800fc9e:	f7fb fef5 	bl	800ba8c <lwip_htons>
 800fca2:	4603      	mov	r3, r0
 800fca4:	b2db      	uxtb	r3, r3
 800fca6:	f003 0304 	and.w	r3, r3, #4
 800fcaa:	2b00      	cmp	r3, #0
 800fcac:	d118      	bne.n	800fce0 <tcp_input+0x7c8>
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcae:	4b1b      	ldr	r3, [pc, #108]	; (800fd1c <tcp_input+0x804>)
 800fcb0:	6819      	ldr	r1, [r3, #0]
 800fcb2:	4b1b      	ldr	r3, [pc, #108]	; (800fd20 <tcp_input+0x808>)
 800fcb4:	881b      	ldrh	r3, [r3, #0]
 800fcb6:	461a      	mov	r2, r3
 800fcb8:	4b1a      	ldr	r3, [pc, #104]	; (800fd24 <tcp_input+0x80c>)
 800fcba:	681b      	ldr	r3, [r3, #0]
 800fcbc:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcbe:	4b16      	ldr	r3, [pc, #88]	; (800fd18 <tcp_input+0x800>)
 800fcc0:	681b      	ldr	r3, [r3, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcc2:	885b      	ldrh	r3, [r3, #2]
 800fcc4:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fcc6:	4a14      	ldr	r2, [pc, #80]	; (800fd18 <tcp_input+0x800>)
 800fcc8:	6812      	ldr	r2, [r2, #0]
      tcp_rst(NULL, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fcca:	8812      	ldrh	r2, [r2, #0]
 800fccc:	b292      	uxth	r2, r2
 800fcce:	9202      	str	r2, [sp, #8]
 800fcd0:	9301      	str	r3, [sp, #4]
 800fcd2:	4b15      	ldr	r3, [pc, #84]	; (800fd28 <tcp_input+0x810>)
 800fcd4:	9300      	str	r3, [sp, #0]
 800fcd6:	4b15      	ldr	r3, [pc, #84]	; (800fd2c <tcp_input+0x814>)
 800fcd8:	4602      	mov	r2, r0
 800fcda:	2000      	movs	r0, #0
 800fcdc:	f003 fc74 	bl	80135c8 <tcp_rst>
    pbuf_free(p);
 800fce0:	6878      	ldr	r0, [r7, #4]
 800fce2:	f7fd fac5 	bl	800d270 <pbuf_free>
  return;
 800fce6:	e00c      	b.n	800fd02 <tcp_input+0x7ea>
    goto dropped;
 800fce8:	bf00      	nop
 800fcea:	e006      	b.n	800fcfa <tcp_input+0x7e2>
    goto dropped;
 800fcec:	bf00      	nop
 800fcee:	e004      	b.n	800fcfa <tcp_input+0x7e2>
    goto dropped;
 800fcf0:	bf00      	nop
 800fcf2:	e002      	b.n	800fcfa <tcp_input+0x7e2>
      goto dropped;
 800fcf4:	bf00      	nop
 800fcf6:	e000      	b.n	800fcfa <tcp_input+0x7e2>
      goto dropped;
 800fcf8:	bf00      	nop
dropped:
  TCP_STATS_INC(tcp.drop);
  MIB2_STATS_INC(mib2.tcpinerrs);
  pbuf_free(p);
 800fcfa:	6878      	ldr	r0, [r7, #4]
 800fcfc:	f7fd fab8 	bl	800d270 <pbuf_free>
 800fd00:	e000      	b.n	800fd04 <tcp_input+0x7ec>
  return;
 800fd02:	bf00      	nop
}
 800fd04:	3724      	adds	r7, #36	; 0x24
 800fd06:	46bd      	mov	sp, r7
 800fd08:	bd90      	pop	{r4, r7, pc}
 800fd0a:	bf00      	nop
 800fd0c:	2000f840 	.word	0x2000f840
 800fd10:	2000f83c 	.word	0x2000f83c
 800fd14:	2000f80c 	.word	0x2000f80c
 800fd18:	2000f81c 	.word	0x2000f81c
 800fd1c:	2000f830 	.word	0x2000f830
 800fd20:	2000f836 	.word	0x2000f836
 800fd24:	2000f82c 	.word	0x2000f82c
 800fd28:	20009ef0 	.word	0x20009ef0
 800fd2c:	20009ef4 	.word	0x20009ef4

0800fd30 <tcp_input_delayed_close>:
 * any more.
 * @returns 1 if the pcb has been closed and deallocated, 0 otherwise
 */
static int
tcp_input_delayed_close(struct tcp_pcb *pcb)
{
 800fd30:	b580      	push	{r7, lr}
 800fd32:	b082      	sub	sp, #8
 800fd34:	af00      	add	r7, sp, #0
 800fd36:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_input_delayed_close: invalid pcb", pcb != NULL);
 800fd38:	687b      	ldr	r3, [r7, #4]
 800fd3a:	2b00      	cmp	r3, #0
 800fd3c:	d106      	bne.n	800fd4c <tcp_input_delayed_close+0x1c>
 800fd3e:	4b17      	ldr	r3, [pc, #92]	; (800fd9c <tcp_input_delayed_close+0x6c>)
 800fd40:	f240 225a 	movw	r2, #602	; 0x25a
 800fd44:	4916      	ldr	r1, [pc, #88]	; (800fda0 <tcp_input_delayed_close+0x70>)
 800fd46:	4817      	ldr	r0, [pc, #92]	; (800fda4 <tcp_input_delayed_close+0x74>)
 800fd48:	f007 f852 	bl	8016df0 <iprintf>

  if (recv_flags & TF_CLOSED) {
 800fd4c:	4b16      	ldr	r3, [pc, #88]	; (800fda8 <tcp_input_delayed_close+0x78>)
 800fd4e:	781b      	ldrb	r3, [r3, #0]
 800fd50:	f003 0310 	and.w	r3, r3, #16
 800fd54:	2b00      	cmp	r3, #0
 800fd56:	d01c      	beq.n	800fd92 <tcp_input_delayed_close+0x62>
    /* The connection has been closed and we will deallocate the
        PCB. */
    if (!(pcb->flags & TF_RXCLOSED)) {
 800fd58:	687b      	ldr	r3, [r7, #4]
 800fd5a:	8b5b      	ldrh	r3, [r3, #26]
 800fd5c:	f003 0310 	and.w	r3, r3, #16
 800fd60:	2b00      	cmp	r3, #0
 800fd62:	d10d      	bne.n	800fd80 <tcp_input_delayed_close+0x50>
      /* Connection closed although the application has only shut down the
          tx side: call the PCB's err callback and indicate the closure to
          ensure the application doesn't continue using the PCB. */
      TCP_EVENT_ERR(pcb->state, pcb->errf, pcb->callback_arg, ERR_CLSD);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd6a:	2b00      	cmp	r3, #0
 800fd6c:	d008      	beq.n	800fd80 <tcp_input_delayed_close+0x50>
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	f8d3 3090 	ldr.w	r3, [r3, #144]	; 0x90
 800fd74:	687a      	ldr	r2, [r7, #4]
 800fd76:	6912      	ldr	r2, [r2, #16]
 800fd78:	f06f 010e 	mvn.w	r1, #14
 800fd7c:	4610      	mov	r0, r2
 800fd7e:	4798      	blx	r3
    }
    tcp_pcb_remove(&tcp_active_pcbs, pcb);
 800fd80:	6879      	ldr	r1, [r7, #4]
 800fd82:	480a      	ldr	r0, [pc, #40]	; (800fdac <tcp_input_delayed_close+0x7c>)
 800fd84:	f7ff fa50 	bl	800f228 <tcp_pcb_remove>
    tcp_free(pcb);
 800fd88:	6878      	ldr	r0, [r7, #4]
 800fd8a:	f7fd fd1d 	bl	800d7c8 <tcp_free>
    return 1;
 800fd8e:	2301      	movs	r3, #1
 800fd90:	e000      	b.n	800fd94 <tcp_input_delayed_close+0x64>
  }
  return 0;
 800fd92:	2300      	movs	r3, #0
}
 800fd94:	4618      	mov	r0, r3
 800fd96:	3708      	adds	r7, #8
 800fd98:	46bd      	mov	sp, r7
 800fd9a:	bd80      	pop	{r7, pc}
 800fd9c:	08019eb4 	.word	0x08019eb4
 800fda0:	0801a084 	.word	0x0801a084
 800fda4:	08019f00 	.word	0x08019f00
 800fda8:	2000f839 	.word	0x2000f839
 800fdac:	2000f800 	.word	0x2000f800

0800fdb0 <tcp_listen_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_listen_input(struct tcp_pcb_listen *pcb)
{
 800fdb0:	b590      	push	{r4, r7, lr}
 800fdb2:	b08b      	sub	sp, #44	; 0x2c
 800fdb4:	af04      	add	r7, sp, #16
 800fdb6:	6078      	str	r0, [r7, #4]
  struct tcp_pcb *npcb;
  u32_t iss;
  err_t rc;

  if (flags & TCP_RST) {
 800fdb8:	4b6f      	ldr	r3, [pc, #444]	; (800ff78 <tcp_listen_input+0x1c8>)
 800fdba:	781b      	ldrb	r3, [r3, #0]
 800fdbc:	f003 0304 	and.w	r3, r3, #4
 800fdc0:	2b00      	cmp	r3, #0
 800fdc2:	f040 80d2 	bne.w	800ff6a <tcp_listen_input+0x1ba>
    /* An incoming RST should be ignored. Return. */
    return;
  }

  LWIP_ASSERT("tcp_listen_input: invalid pcb", pcb != NULL);
 800fdc6:	687b      	ldr	r3, [r7, #4]
 800fdc8:	2b00      	cmp	r3, #0
 800fdca:	d106      	bne.n	800fdda <tcp_listen_input+0x2a>
 800fdcc:	4b6b      	ldr	r3, [pc, #428]	; (800ff7c <tcp_listen_input+0x1cc>)
 800fdce:	f240 2281 	movw	r2, #641	; 0x281
 800fdd2:	496b      	ldr	r1, [pc, #428]	; (800ff80 <tcp_listen_input+0x1d0>)
 800fdd4:	486b      	ldr	r0, [pc, #428]	; (800ff84 <tcp_listen_input+0x1d4>)
 800fdd6:	f007 f80b 	bl	8016df0 <iprintf>

  /* In the LISTEN state, we check for incoming SYN segments,
     creates a new PCB, and responds with a SYN|ACK. */
  if (flags & TCP_ACK) {
 800fdda:	4b67      	ldr	r3, [pc, #412]	; (800ff78 <tcp_listen_input+0x1c8>)
 800fddc:	781b      	ldrb	r3, [r3, #0]
 800fdde:	f003 0310 	and.w	r3, r3, #16
 800fde2:	2b00      	cmp	r3, #0
 800fde4:	d019      	beq.n	800fe1a <tcp_listen_input+0x6a>
    /* For incoming segments with the ACK flag set, respond with a
       RST. */
    LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_listen_input: ACK in LISTEN, sending reset\n"));
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fde6:	4b68      	ldr	r3, [pc, #416]	; (800ff88 <tcp_listen_input+0x1d8>)
 800fde8:	6819      	ldr	r1, [r3, #0]
 800fdea:	4b68      	ldr	r3, [pc, #416]	; (800ff8c <tcp_listen_input+0x1dc>)
 800fdec:	881b      	ldrh	r3, [r3, #0]
 800fdee:	461a      	mov	r2, r3
 800fdf0:	4b67      	ldr	r3, [pc, #412]	; (800ff90 <tcp_listen_input+0x1e0>)
 800fdf2:	681b      	ldr	r3, [r3, #0]
 800fdf4:	18d0      	adds	r0, r2, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdf6:	4b67      	ldr	r3, [pc, #412]	; (800ff94 <tcp_listen_input+0x1e4>)
 800fdf8:	681b      	ldr	r3, [r3, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fdfa:	885b      	ldrh	r3, [r3, #2]
 800fdfc:	b29b      	uxth	r3, r3
            ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 800fdfe:	4a65      	ldr	r2, [pc, #404]	; (800ff94 <tcp_listen_input+0x1e4>)
 800fe00:	6812      	ldr	r2, [r2, #0]
    tcp_rst((const struct tcp_pcb *)pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 800fe02:	8812      	ldrh	r2, [r2, #0]
 800fe04:	b292      	uxth	r2, r2
 800fe06:	9202      	str	r2, [sp, #8]
 800fe08:	9301      	str	r3, [sp, #4]
 800fe0a:	4b63      	ldr	r3, [pc, #396]	; (800ff98 <tcp_listen_input+0x1e8>)
 800fe0c:	9300      	str	r3, [sp, #0]
 800fe0e:	4b63      	ldr	r3, [pc, #396]	; (800ff9c <tcp_listen_input+0x1ec>)
 800fe10:	4602      	mov	r2, r0
 800fe12:	6878      	ldr	r0, [r7, #4]
 800fe14:	f003 fbd8 	bl	80135c8 <tcp_rst>
      tcp_abandon(npcb, 0);
      return;
    }
    tcp_output(npcb);
  }
  return;
 800fe18:	e0a9      	b.n	800ff6e <tcp_listen_input+0x1be>
  } else if (flags & TCP_SYN) {
 800fe1a:	4b57      	ldr	r3, [pc, #348]	; (800ff78 <tcp_listen_input+0x1c8>)
 800fe1c:	781b      	ldrb	r3, [r3, #0]
 800fe1e:	f003 0302 	and.w	r3, r3, #2
 800fe22:	2b00      	cmp	r3, #0
 800fe24:	f000 80a3 	beq.w	800ff6e <tcp_listen_input+0x1be>
    npcb = tcp_alloc(pcb->prio);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	7d5b      	ldrb	r3, [r3, #21]
 800fe2c:	4618      	mov	r0, r3
 800fe2e:	f7ff f859 	bl	800eee4 <tcp_alloc>
 800fe32:	6178      	str	r0, [r7, #20]
    if (npcb == NULL) {
 800fe34:	697b      	ldr	r3, [r7, #20]
 800fe36:	2b00      	cmp	r3, #0
 800fe38:	d111      	bne.n	800fe5e <tcp_listen_input+0xae>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe3a:	687b      	ldr	r3, [r7, #4]
 800fe3c:	699b      	ldr	r3, [r3, #24]
 800fe3e:	2b00      	cmp	r3, #0
 800fe40:	d00a      	beq.n	800fe58 <tcp_listen_input+0xa8>
 800fe42:	687b      	ldr	r3, [r7, #4]
 800fe44:	699b      	ldr	r3, [r3, #24]
 800fe46:	687a      	ldr	r2, [r7, #4]
 800fe48:	6910      	ldr	r0, [r2, #16]
 800fe4a:	f04f 32ff 	mov.w	r2, #4294967295
 800fe4e:	2100      	movs	r1, #0
 800fe50:	4798      	blx	r3
 800fe52:	4603      	mov	r3, r0
 800fe54:	73bb      	strb	r3, [r7, #14]
      return;
 800fe56:	e08b      	b.n	800ff70 <tcp_listen_input+0x1c0>
      TCP_EVENT_ACCEPT(pcb, NULL, pcb->callback_arg, ERR_MEM, err);
 800fe58:	23f0      	movs	r3, #240	; 0xf0
 800fe5a:	73bb      	strb	r3, [r7, #14]
      return;
 800fe5c:	e088      	b.n	800ff70 <tcp_listen_input+0x1c0>
    ip_addr_copy(npcb->local_ip, *ip_current_dest_addr());
 800fe5e:	4b50      	ldr	r3, [pc, #320]	; (800ffa0 <tcp_listen_input+0x1f0>)
 800fe60:	695a      	ldr	r2, [r3, #20]
 800fe62:	697b      	ldr	r3, [r7, #20]
 800fe64:	601a      	str	r2, [r3, #0]
    ip_addr_copy(npcb->remote_ip, *ip_current_src_addr());
 800fe66:	4b4e      	ldr	r3, [pc, #312]	; (800ffa0 <tcp_listen_input+0x1f0>)
 800fe68:	691a      	ldr	r2, [r3, #16]
 800fe6a:	697b      	ldr	r3, [r7, #20]
 800fe6c:	605a      	str	r2, [r3, #4]
    npcb->local_port = pcb->local_port;
 800fe6e:	687b      	ldr	r3, [r7, #4]
 800fe70:	8ada      	ldrh	r2, [r3, #22]
 800fe72:	697b      	ldr	r3, [r7, #20]
 800fe74:	82da      	strh	r2, [r3, #22]
    npcb->remote_port = tcphdr->src;
 800fe76:	4b47      	ldr	r3, [pc, #284]	; (800ff94 <tcp_listen_input+0x1e4>)
 800fe78:	681b      	ldr	r3, [r3, #0]
 800fe7a:	881b      	ldrh	r3, [r3, #0]
 800fe7c:	b29a      	uxth	r2, r3
 800fe7e:	697b      	ldr	r3, [r7, #20]
 800fe80:	831a      	strh	r2, [r3, #24]
    npcb->state = SYN_RCVD;
 800fe82:	697b      	ldr	r3, [r7, #20]
 800fe84:	2203      	movs	r2, #3
 800fe86:	751a      	strb	r2, [r3, #20]
    npcb->rcv_nxt = seqno + 1;
 800fe88:	4b41      	ldr	r3, [pc, #260]	; (800ff90 <tcp_listen_input+0x1e0>)
 800fe8a:	681b      	ldr	r3, [r3, #0]
 800fe8c:	1c5a      	adds	r2, r3, #1
 800fe8e:	697b      	ldr	r3, [r7, #20]
 800fe90:	625a      	str	r2, [r3, #36]	; 0x24
    npcb->rcv_ann_right_edge = npcb->rcv_nxt;
 800fe92:	697b      	ldr	r3, [r7, #20]
 800fe94:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 800fe96:	697b      	ldr	r3, [r7, #20]
 800fe98:	62da      	str	r2, [r3, #44]	; 0x2c
    iss = tcp_next_iss(npcb);
 800fe9a:	6978      	ldr	r0, [r7, #20]
 800fe9c:	f7ff fa58 	bl	800f350 <tcp_next_iss>
 800fea0:	6138      	str	r0, [r7, #16]
    npcb->snd_wl2 = iss;
 800fea2:	697b      	ldr	r3, [r7, #20]
 800fea4:	693a      	ldr	r2, [r7, #16]
 800fea6:	659a      	str	r2, [r3, #88]	; 0x58
    npcb->snd_nxt = iss;
 800fea8:	697b      	ldr	r3, [r7, #20]
 800feaa:	693a      	ldr	r2, [r7, #16]
 800feac:	651a      	str	r2, [r3, #80]	; 0x50
    npcb->lastack = iss;
 800feae:	697b      	ldr	r3, [r7, #20]
 800feb0:	693a      	ldr	r2, [r7, #16]
 800feb2:	645a      	str	r2, [r3, #68]	; 0x44
    npcb->snd_lbb = iss;
 800feb4:	697b      	ldr	r3, [r7, #20]
 800feb6:	693a      	ldr	r2, [r7, #16]
 800feb8:	65da      	str	r2, [r3, #92]	; 0x5c
    npcb->snd_wl1 = seqno - 1;/* initialise to seqno-1 to force window update */
 800feba:	4b35      	ldr	r3, [pc, #212]	; (800ff90 <tcp_listen_input+0x1e0>)
 800febc:	681b      	ldr	r3, [r3, #0]
 800febe:	1e5a      	subs	r2, r3, #1
 800fec0:	697b      	ldr	r3, [r7, #20]
 800fec2:	655a      	str	r2, [r3, #84]	; 0x54
    npcb->callback_arg = pcb->callback_arg;
 800fec4:	687b      	ldr	r3, [r7, #4]
 800fec6:	691a      	ldr	r2, [r3, #16]
 800fec8:	697b      	ldr	r3, [r7, #20]
 800feca:	611a      	str	r2, [r3, #16]
    npcb->listener = pcb;
 800fecc:	697b      	ldr	r3, [r7, #20]
 800fece:	687a      	ldr	r2, [r7, #4]
 800fed0:	67da      	str	r2, [r3, #124]	; 0x7c
    npcb->so_options = pcb->so_options & SOF_INHERITED;
 800fed2:	687b      	ldr	r3, [r7, #4]
 800fed4:	7a5b      	ldrb	r3, [r3, #9]
 800fed6:	f003 030c 	and.w	r3, r3, #12
 800feda:	b2da      	uxtb	r2, r3
 800fedc:	697b      	ldr	r3, [r7, #20]
 800fede:	725a      	strb	r2, [r3, #9]
    npcb->netif_idx = pcb->netif_idx;
 800fee0:	687b      	ldr	r3, [r7, #4]
 800fee2:	7a1a      	ldrb	r2, [r3, #8]
 800fee4:	697b      	ldr	r3, [r7, #20]
 800fee6:	721a      	strb	r2, [r3, #8]
    TCP_REG_ACTIVE(npcb);
 800fee8:	4b2e      	ldr	r3, [pc, #184]	; (800ffa4 <tcp_listen_input+0x1f4>)
 800feea:	681a      	ldr	r2, [r3, #0]
 800feec:	697b      	ldr	r3, [r7, #20]
 800feee:	60da      	str	r2, [r3, #12]
 800fef0:	4a2c      	ldr	r2, [pc, #176]	; (800ffa4 <tcp_listen_input+0x1f4>)
 800fef2:	697b      	ldr	r3, [r7, #20]
 800fef4:	6013      	str	r3, [r2, #0]
 800fef6:	f003 fd29 	bl	801394c <tcp_timer_needed>
 800fefa:	4b2b      	ldr	r3, [pc, #172]	; (800ffa8 <tcp_listen_input+0x1f8>)
 800fefc:	2201      	movs	r2, #1
 800fefe:	701a      	strb	r2, [r3, #0]
    tcp_parseopt(npcb);
 800ff00:	6978      	ldr	r0, [r7, #20]
 800ff02:	f001 fd8f 	bl	8011a24 <tcp_parseopt>
    npcb->snd_wnd = tcphdr->wnd;
 800ff06:	4b23      	ldr	r3, [pc, #140]	; (800ff94 <tcp_listen_input+0x1e4>)
 800ff08:	681b      	ldr	r3, [r3, #0]
 800ff0a:	89db      	ldrh	r3, [r3, #14]
 800ff0c:	b29a      	uxth	r2, r3
 800ff0e:	697b      	ldr	r3, [r7, #20]
 800ff10:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
    npcb->snd_wnd_max = npcb->snd_wnd;
 800ff14:	697b      	ldr	r3, [r7, #20]
 800ff16:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 800ff1a:	697b      	ldr	r3, [r7, #20]
 800ff1c:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
    npcb->mss = tcp_eff_send_mss(npcb->mss, &npcb->local_ip, &npcb->remote_ip);
 800ff20:	697b      	ldr	r3, [r7, #20]
 800ff22:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 800ff24:	697b      	ldr	r3, [r7, #20]
 800ff26:	3304      	adds	r3, #4
 800ff28:	4618      	mov	r0, r3
 800ff2a:	f005 fad1 	bl	80154d0 <ip4_route>
 800ff2e:	4601      	mov	r1, r0
 800ff30:	697b      	ldr	r3, [r7, #20]
 800ff32:	3304      	adds	r3, #4
 800ff34:	461a      	mov	r2, r3
 800ff36:	4620      	mov	r0, r4
 800ff38:	f7ff fa30 	bl	800f39c <tcp_eff_send_mss_netif>
 800ff3c:	4603      	mov	r3, r0
 800ff3e:	461a      	mov	r2, r3
 800ff40:	697b      	ldr	r3, [r7, #20]
 800ff42:	865a      	strh	r2, [r3, #50]	; 0x32
    rc = tcp_enqueue_flags(npcb, TCP_SYN | TCP_ACK);
 800ff44:	2112      	movs	r1, #18
 800ff46:	6978      	ldr	r0, [r7, #20]
 800ff48:	f002 fc9c 	bl	8012884 <tcp_enqueue_flags>
 800ff4c:	4603      	mov	r3, r0
 800ff4e:	73fb      	strb	r3, [r7, #15]
    if (rc != ERR_OK) {
 800ff50:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800ff54:	2b00      	cmp	r3, #0
 800ff56:	d004      	beq.n	800ff62 <tcp_listen_input+0x1b2>
      tcp_abandon(npcb, 0);
 800ff58:	2100      	movs	r1, #0
 800ff5a:	6978      	ldr	r0, [r7, #20]
 800ff5c:	f7fd feba 	bl	800dcd4 <tcp_abandon>
      return;
 800ff60:	e006      	b.n	800ff70 <tcp_listen_input+0x1c0>
    tcp_output(npcb);
 800ff62:	6978      	ldr	r0, [r7, #20]
 800ff64:	f002 fd7c 	bl	8012a60 <tcp_output>
  return;
 800ff68:	e001      	b.n	800ff6e <tcp_listen_input+0x1be>
    return;
 800ff6a:	bf00      	nop
 800ff6c:	e000      	b.n	800ff70 <tcp_listen_input+0x1c0>
  return;
 800ff6e:	bf00      	nop
}
 800ff70:	371c      	adds	r7, #28
 800ff72:	46bd      	mov	sp, r7
 800ff74:	bd90      	pop	{r4, r7, pc}
 800ff76:	bf00      	nop
 800ff78:	2000f838 	.word	0x2000f838
 800ff7c:	08019eb4 	.word	0x08019eb4
 800ff80:	0801a0ac 	.word	0x0801a0ac
 800ff84:	08019f00 	.word	0x08019f00
 800ff88:	2000f830 	.word	0x2000f830
 800ff8c:	2000f836 	.word	0x2000f836
 800ff90:	2000f82c 	.word	0x2000f82c
 800ff94:	2000f81c 	.word	0x2000f81c
 800ff98:	20009ef0 	.word	0x20009ef0
 800ff9c:	20009ef4 	.word	0x20009ef4
 800ffa0:	20009ee0 	.word	0x20009ee0
 800ffa4:	2000f800 	.word	0x2000f800
 800ffa8:	2000f808 	.word	0x2000f808

0800ffac <tcp_timewait_input>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static void
tcp_timewait_input(struct tcp_pcb *pcb)
{
 800ffac:	b580      	push	{r7, lr}
 800ffae:	b086      	sub	sp, #24
 800ffb0:	af04      	add	r7, sp, #16
 800ffb2:	6078      	str	r0, [r7, #4]
  /* RFC 1337: in TIME_WAIT, ignore RST and ACK FINs + any 'acceptable' segments */
  /* RFC 793 3.9 Event Processing - Segment Arrives:
   * - first check sequence number - we skip that one in TIME_WAIT (always
   *   acceptable since we only send ACKs)
   * - second check the RST bit (... return) */
  if (flags & TCP_RST) {
 800ffb4:	4b2f      	ldr	r3, [pc, #188]	; (8010074 <tcp_timewait_input+0xc8>)
 800ffb6:	781b      	ldrb	r3, [r3, #0]
 800ffb8:	f003 0304 	and.w	r3, r3, #4
 800ffbc:	2b00      	cmp	r3, #0
 800ffbe:	d153      	bne.n	8010068 <tcp_timewait_input+0xbc>
    return;
  }

  LWIP_ASSERT("tcp_timewait_input: invalid pcb", pcb != NULL);
 800ffc0:	687b      	ldr	r3, [r7, #4]
 800ffc2:	2b00      	cmp	r3, #0
 800ffc4:	d106      	bne.n	800ffd4 <tcp_timewait_input+0x28>
 800ffc6:	4b2c      	ldr	r3, [pc, #176]	; (8010078 <tcp_timewait_input+0xcc>)
 800ffc8:	f240 22ee 	movw	r2, #750	; 0x2ee
 800ffcc:	492b      	ldr	r1, [pc, #172]	; (801007c <tcp_timewait_input+0xd0>)
 800ffce:	482c      	ldr	r0, [pc, #176]	; (8010080 <tcp_timewait_input+0xd4>)
 800ffd0:	f006 ff0e 	bl	8016df0 <iprintf>

  /* - fourth, check the SYN bit, */
  if (flags & TCP_SYN) {
 800ffd4:	4b27      	ldr	r3, [pc, #156]	; (8010074 <tcp_timewait_input+0xc8>)
 800ffd6:	781b      	ldrb	r3, [r3, #0]
 800ffd8:	f003 0302 	and.w	r3, r3, #2
 800ffdc:	2b00      	cmp	r3, #0
 800ffde:	d02a      	beq.n	8010036 <tcp_timewait_input+0x8a>
    /* If an incoming segment is not acceptable, an acknowledgment
       should be sent in reply */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd)) {
 800ffe0:	4b28      	ldr	r3, [pc, #160]	; (8010084 <tcp_timewait_input+0xd8>)
 800ffe2:	681a      	ldr	r2, [r3, #0]
 800ffe4:	687b      	ldr	r3, [r7, #4]
 800ffe6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800ffe8:	1ad3      	subs	r3, r2, r3
 800ffea:	2b00      	cmp	r3, #0
 800ffec:	db2d      	blt.n	801004a <tcp_timewait_input+0x9e>
 800ffee:	4b25      	ldr	r3, [pc, #148]	; (8010084 <tcp_timewait_input+0xd8>)
 800fff0:	681a      	ldr	r2, [r3, #0]
 800fff2:	687b      	ldr	r3, [r7, #4]
 800fff4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800fff6:	6879      	ldr	r1, [r7, #4]
 800fff8:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 800fffa:	440b      	add	r3, r1
 800fffc:	1ad3      	subs	r3, r2, r3
 800fffe:	2b00      	cmp	r3, #0
 8010000:	dc23      	bgt.n	801004a <tcp_timewait_input+0x9e>
      /* If the SYN is in the window it is an error, send a reset */
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010002:	4b21      	ldr	r3, [pc, #132]	; (8010088 <tcp_timewait_input+0xdc>)
 8010004:	6819      	ldr	r1, [r3, #0]
 8010006:	4b21      	ldr	r3, [pc, #132]	; (801008c <tcp_timewait_input+0xe0>)
 8010008:	881b      	ldrh	r3, [r3, #0]
 801000a:	461a      	mov	r2, r3
 801000c:	4b1d      	ldr	r3, [pc, #116]	; (8010084 <tcp_timewait_input+0xd8>)
 801000e:	681b      	ldr	r3, [r3, #0]
 8010010:	18d0      	adds	r0, r2, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010012:	4b1f      	ldr	r3, [pc, #124]	; (8010090 <tcp_timewait_input+0xe4>)
 8010014:	681b      	ldr	r3, [r3, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010016:	885b      	ldrh	r3, [r3, #2]
 8010018:	b29b      	uxth	r3, r3
              ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801001a:	4a1d      	ldr	r2, [pc, #116]	; (8010090 <tcp_timewait_input+0xe4>)
 801001c:	6812      	ldr	r2, [r2, #0]
      tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 801001e:	8812      	ldrh	r2, [r2, #0]
 8010020:	b292      	uxth	r2, r2
 8010022:	9202      	str	r2, [sp, #8]
 8010024:	9301      	str	r3, [sp, #4]
 8010026:	4b1b      	ldr	r3, [pc, #108]	; (8010094 <tcp_timewait_input+0xe8>)
 8010028:	9300      	str	r3, [sp, #0]
 801002a:	4b1b      	ldr	r3, [pc, #108]	; (8010098 <tcp_timewait_input+0xec>)
 801002c:	4602      	mov	r2, r0
 801002e:	6878      	ldr	r0, [r7, #4]
 8010030:	f003 faca 	bl	80135c8 <tcp_rst>
      return;
 8010034:	e01b      	b.n	801006e <tcp_timewait_input+0xc2>
    }
  } else if (flags & TCP_FIN) {
 8010036:	4b0f      	ldr	r3, [pc, #60]	; (8010074 <tcp_timewait_input+0xc8>)
 8010038:	781b      	ldrb	r3, [r3, #0]
 801003a:	f003 0301 	and.w	r3, r3, #1
 801003e:	2b00      	cmp	r3, #0
 8010040:	d003      	beq.n	801004a <tcp_timewait_input+0x9e>
    /* - eighth, check the FIN bit: Remain in the TIME-WAIT state.
         Restart the 2 MSL time-wait timeout.*/
    pcb->tmr = tcp_ticks;
 8010042:	4b16      	ldr	r3, [pc, #88]	; (801009c <tcp_timewait_input+0xf0>)
 8010044:	681a      	ldr	r2, [r3, #0]
 8010046:	687b      	ldr	r3, [r7, #4]
 8010048:	621a      	str	r2, [r3, #32]
  }

  if ((tcplen > 0)) {
 801004a:	4b10      	ldr	r3, [pc, #64]	; (801008c <tcp_timewait_input+0xe0>)
 801004c:	881b      	ldrh	r3, [r3, #0]
 801004e:	2b00      	cmp	r3, #0
 8010050:	d00c      	beq.n	801006c <tcp_timewait_input+0xc0>
    /* Acknowledge data, FIN or out-of-window SYN */
    tcp_ack_now(pcb);
 8010052:	687b      	ldr	r3, [r7, #4]
 8010054:	8b5b      	ldrh	r3, [r3, #26]
 8010056:	f043 0302 	orr.w	r3, r3, #2
 801005a:	b29a      	uxth	r2, r3
 801005c:	687b      	ldr	r3, [r7, #4]
 801005e:	835a      	strh	r2, [r3, #26]
    tcp_output(pcb);
 8010060:	6878      	ldr	r0, [r7, #4]
 8010062:	f002 fcfd 	bl	8012a60 <tcp_output>
  }
  return;
 8010066:	e001      	b.n	801006c <tcp_timewait_input+0xc0>
    return;
 8010068:	bf00      	nop
 801006a:	e000      	b.n	801006e <tcp_timewait_input+0xc2>
  return;
 801006c:	bf00      	nop
}
 801006e:	3708      	adds	r7, #8
 8010070:	46bd      	mov	sp, r7
 8010072:	bd80      	pop	{r7, pc}
 8010074:	2000f838 	.word	0x2000f838
 8010078:	08019eb4 	.word	0x08019eb4
 801007c:	0801a0cc 	.word	0x0801a0cc
 8010080:	08019f00 	.word	0x08019f00
 8010084:	2000f82c 	.word	0x2000f82c
 8010088:	2000f830 	.word	0x2000f830
 801008c:	2000f836 	.word	0x2000f836
 8010090:	2000f81c 	.word	0x2000f81c
 8010094:	20009ef0 	.word	0x20009ef0
 8010098:	20009ef4 	.word	0x20009ef4
 801009c:	2000f7f4 	.word	0x2000f7f4

080100a0 <tcp_process>:
 * @note the segment which arrived is saved in global variables, therefore only the pcb
 *       involved is passed as a parameter to this function
 */
static err_t
tcp_process(struct tcp_pcb *pcb)
{
 80100a0:	b590      	push	{r4, r7, lr}
 80100a2:	b08d      	sub	sp, #52	; 0x34
 80100a4:	af04      	add	r7, sp, #16
 80100a6:	6078      	str	r0, [r7, #4]
  struct tcp_seg *rseg;
  u8_t acceptable = 0;
 80100a8:	2300      	movs	r3, #0
 80100aa:	76fb      	strb	r3, [r7, #27]
  err_t err;

  err = ERR_OK;
 80100ac:	2300      	movs	r3, #0
 80100ae:	76bb      	strb	r3, [r7, #26]

  LWIP_ASSERT("tcp_process: invalid pcb", pcb != NULL);
 80100b0:	687b      	ldr	r3, [r7, #4]
 80100b2:	2b00      	cmp	r3, #0
 80100b4:	d106      	bne.n	80100c4 <tcp_process+0x24>
 80100b6:	4b9d      	ldr	r3, [pc, #628]	; (801032c <tcp_process+0x28c>)
 80100b8:	f44f 7247 	mov.w	r2, #796	; 0x31c
 80100bc:	499c      	ldr	r1, [pc, #624]	; (8010330 <tcp_process+0x290>)
 80100be:	489d      	ldr	r0, [pc, #628]	; (8010334 <tcp_process+0x294>)
 80100c0:	f006 fe96 	bl	8016df0 <iprintf>

  /* Process incoming RST segments. */
  if (flags & TCP_RST) {
 80100c4:	4b9c      	ldr	r3, [pc, #624]	; (8010338 <tcp_process+0x298>)
 80100c6:	781b      	ldrb	r3, [r3, #0]
 80100c8:	f003 0304 	and.w	r3, r3, #4
 80100cc:	2b00      	cmp	r3, #0
 80100ce:	d04e      	beq.n	801016e <tcp_process+0xce>
    /* First, determine if the reset is acceptable. */
    if (pcb->state == SYN_SENT) {
 80100d0:	687b      	ldr	r3, [r7, #4]
 80100d2:	7d1b      	ldrb	r3, [r3, #20]
 80100d4:	2b02      	cmp	r3, #2
 80100d6:	d108      	bne.n	80100ea <tcp_process+0x4a>
      /* "In the SYN-SENT state (a RST received in response to an initial SYN),
          the RST is acceptable if the ACK field acknowledges the SYN." */
      if (ackno == pcb->snd_nxt) {
 80100d8:	687b      	ldr	r3, [r7, #4]
 80100da:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80100dc:	4b97      	ldr	r3, [pc, #604]	; (801033c <tcp_process+0x29c>)
 80100de:	681b      	ldr	r3, [r3, #0]
 80100e0:	429a      	cmp	r2, r3
 80100e2:	d123      	bne.n	801012c <tcp_process+0x8c>
        acceptable = 1;
 80100e4:	2301      	movs	r3, #1
 80100e6:	76fb      	strb	r3, [r7, #27]
 80100e8:	e020      	b.n	801012c <tcp_process+0x8c>
      }
    } else {
      /* "In all states except SYN-SENT, all reset (RST) segments are validated
          by checking their SEQ-fields." */
      if (seqno == pcb->rcv_nxt) {
 80100ea:	687b      	ldr	r3, [r7, #4]
 80100ec:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 80100ee:	4b94      	ldr	r3, [pc, #592]	; (8010340 <tcp_process+0x2a0>)
 80100f0:	681b      	ldr	r3, [r3, #0]
 80100f2:	429a      	cmp	r2, r3
 80100f4:	d102      	bne.n	80100fc <tcp_process+0x5c>
        acceptable = 1;
 80100f6:	2301      	movs	r3, #1
 80100f8:	76fb      	strb	r3, [r7, #27]
 80100fa:	e017      	b.n	801012c <tcp_process+0x8c>
      } else  if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80100fc:	4b90      	ldr	r3, [pc, #576]	; (8010340 <tcp_process+0x2a0>)
 80100fe:	681a      	ldr	r2, [r3, #0]
 8010100:	687b      	ldr	r3, [r7, #4]
 8010102:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010104:	1ad3      	subs	r3, r2, r3
 8010106:	2b00      	cmp	r3, #0
 8010108:	db10      	blt.n	801012c <tcp_process+0x8c>
 801010a:	4b8d      	ldr	r3, [pc, #564]	; (8010340 <tcp_process+0x2a0>)
 801010c:	681a      	ldr	r2, [r3, #0]
 801010e:	687b      	ldr	r3, [r7, #4]
 8010110:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8010112:	6879      	ldr	r1, [r7, #4]
 8010114:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8010116:	440b      	add	r3, r1
 8010118:	1ad3      	subs	r3, r2, r3
 801011a:	2b00      	cmp	r3, #0
 801011c:	dc06      	bgt.n	801012c <tcp_process+0x8c>
                                  pcb->rcv_nxt + pcb->rcv_wnd)) {
        /* If the sequence number is inside the window, we send a challenge ACK
           and wait for a re-send with matching sequence number.
           This follows RFC 5961 section 3.2 and addresses CVE-2004-0230
           (RST spoofing attack), which is present in RFC 793 RST handling. */
        tcp_ack_now(pcb);
 801011e:	687b      	ldr	r3, [r7, #4]
 8010120:	8b5b      	ldrh	r3, [r3, #26]
 8010122:	f043 0302 	orr.w	r3, r3, #2
 8010126:	b29a      	uxth	r2, r3
 8010128:	687b      	ldr	r3, [r7, #4]
 801012a:	835a      	strh	r2, [r3, #26]
      }
    }

    if (acceptable) {
 801012c:	7efb      	ldrb	r3, [r7, #27]
 801012e:	2b00      	cmp	r3, #0
 8010130:	d01b      	beq.n	801016a <tcp_process+0xca>
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: Connection RESET\n"));
      LWIP_ASSERT("tcp_input: pcb->state != CLOSED", pcb->state != CLOSED);
 8010132:	687b      	ldr	r3, [r7, #4]
 8010134:	7d1b      	ldrb	r3, [r3, #20]
 8010136:	2b00      	cmp	r3, #0
 8010138:	d106      	bne.n	8010148 <tcp_process+0xa8>
 801013a:	4b7c      	ldr	r3, [pc, #496]	; (801032c <tcp_process+0x28c>)
 801013c:	f44f 724e 	mov.w	r2, #824	; 0x338
 8010140:	4980      	ldr	r1, [pc, #512]	; (8010344 <tcp_process+0x2a4>)
 8010142:	487c      	ldr	r0, [pc, #496]	; (8010334 <tcp_process+0x294>)
 8010144:	f006 fe54 	bl	8016df0 <iprintf>
      recv_flags |= TF_RESET;
 8010148:	4b7f      	ldr	r3, [pc, #508]	; (8010348 <tcp_process+0x2a8>)
 801014a:	781b      	ldrb	r3, [r3, #0]
 801014c:	f043 0308 	orr.w	r3, r3, #8
 8010150:	b2da      	uxtb	r2, r3
 8010152:	4b7d      	ldr	r3, [pc, #500]	; (8010348 <tcp_process+0x2a8>)
 8010154:	701a      	strb	r2, [r3, #0]
      tcp_clear_flags(pcb, TF_ACK_DELAY);
 8010156:	687b      	ldr	r3, [r7, #4]
 8010158:	8b5b      	ldrh	r3, [r3, #26]
 801015a:	f023 0301 	bic.w	r3, r3, #1
 801015e:	b29a      	uxth	r2, r3
 8010160:	687b      	ldr	r3, [r7, #4]
 8010162:	835a      	strh	r2, [r3, #26]
      return ERR_RST;
 8010164:	f06f 030d 	mvn.w	r3, #13
 8010168:	e37a      	b.n	8010860 <tcp_process+0x7c0>
    } else {
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                                    seqno, pcb->rcv_nxt));
      LWIP_DEBUGF(TCP_DEBUG, ("tcp_process: unacceptable reset seqno %"U32_F" rcv_nxt %"U32_F"\n",
                              seqno, pcb->rcv_nxt));
      return ERR_OK;
 801016a:	2300      	movs	r3, #0
 801016c:	e378      	b.n	8010860 <tcp_process+0x7c0>
    }
  }

  if ((flags & TCP_SYN) && (pcb->state != SYN_SENT && pcb->state != SYN_RCVD)) {
 801016e:	4b72      	ldr	r3, [pc, #456]	; (8010338 <tcp_process+0x298>)
 8010170:	781b      	ldrb	r3, [r3, #0]
 8010172:	f003 0302 	and.w	r3, r3, #2
 8010176:	2b00      	cmp	r3, #0
 8010178:	d010      	beq.n	801019c <tcp_process+0xfc>
 801017a:	687b      	ldr	r3, [r7, #4]
 801017c:	7d1b      	ldrb	r3, [r3, #20]
 801017e:	2b02      	cmp	r3, #2
 8010180:	d00c      	beq.n	801019c <tcp_process+0xfc>
 8010182:	687b      	ldr	r3, [r7, #4]
 8010184:	7d1b      	ldrb	r3, [r3, #20]
 8010186:	2b03      	cmp	r3, #3
 8010188:	d008      	beq.n	801019c <tcp_process+0xfc>
    /* Cope with new connection attempt after remote end crashed */
    tcp_ack_now(pcb);
 801018a:	687b      	ldr	r3, [r7, #4]
 801018c:	8b5b      	ldrh	r3, [r3, #26]
 801018e:	f043 0302 	orr.w	r3, r3, #2
 8010192:	b29a      	uxth	r2, r3
 8010194:	687b      	ldr	r3, [r7, #4]
 8010196:	835a      	strh	r2, [r3, #26]
    return ERR_OK;
 8010198:	2300      	movs	r3, #0
 801019a:	e361      	b.n	8010860 <tcp_process+0x7c0>
  }

  if ((pcb->flags & TF_RXCLOSED) == 0) {
 801019c:	687b      	ldr	r3, [r7, #4]
 801019e:	8b5b      	ldrh	r3, [r3, #26]
 80101a0:	f003 0310 	and.w	r3, r3, #16
 80101a4:	2b00      	cmp	r3, #0
 80101a6:	d103      	bne.n	80101b0 <tcp_process+0x110>
    /* Update the PCB (in)activity timer unless rx is closed (see tcp_shutdown) */
    pcb->tmr = tcp_ticks;
 80101a8:	4b68      	ldr	r3, [pc, #416]	; (801034c <tcp_process+0x2ac>)
 80101aa:	681a      	ldr	r2, [r3, #0]
 80101ac:	687b      	ldr	r3, [r7, #4]
 80101ae:	621a      	str	r2, [r3, #32]
  }
  pcb->keep_cnt_sent = 0;
 80101b0:	687b      	ldr	r3, [r7, #4]
 80101b2:	2200      	movs	r2, #0
 80101b4:	f883 209b 	strb.w	r2, [r3, #155]	; 0x9b
  pcb->persist_probe = 0;
 80101b8:	687b      	ldr	r3, [r7, #4]
 80101ba:	2200      	movs	r2, #0
 80101bc:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a

  tcp_parseopt(pcb);
 80101c0:	6878      	ldr	r0, [r7, #4]
 80101c2:	f001 fc2f 	bl	8011a24 <tcp_parseopt>

  /* Do different things depending on the TCP state. */
  switch (pcb->state) {
 80101c6:	687b      	ldr	r3, [r7, #4]
 80101c8:	7d1b      	ldrb	r3, [r3, #20]
 80101ca:	3b02      	subs	r3, #2
 80101cc:	2b07      	cmp	r3, #7
 80101ce:	f200 8337 	bhi.w	8010840 <tcp_process+0x7a0>
 80101d2:	a201      	add	r2, pc, #4	; (adr r2, 80101d8 <tcp_process+0x138>)
 80101d4:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80101d8:	080101f9 	.word	0x080101f9
 80101dc:	08010429 	.word	0x08010429
 80101e0:	080105a1 	.word	0x080105a1
 80101e4:	080105cb 	.word	0x080105cb
 80101e8:	080106ef 	.word	0x080106ef
 80101ec:	080105a1 	.word	0x080105a1
 80101f0:	0801077b 	.word	0x0801077b
 80101f4:	0801080b 	.word	0x0801080b
    case SYN_SENT:
      LWIP_DEBUGF(TCP_INPUT_DEBUG, ("SYN-SENT: ackno %"U32_F" pcb->snd_nxt %"U32_F" unacked %"U32_F"\n", ackno,
                                    pcb->snd_nxt, lwip_ntohl(pcb->unacked->tcphdr->seqno)));
      /* received SYN ACK with expected sequence number? */
      if ((flags & TCP_ACK) && (flags & TCP_SYN)
 80101f8:	4b4f      	ldr	r3, [pc, #316]	; (8010338 <tcp_process+0x298>)
 80101fa:	781b      	ldrb	r3, [r3, #0]
 80101fc:	f003 0310 	and.w	r3, r3, #16
 8010200:	2b00      	cmp	r3, #0
 8010202:	f000 80e4 	beq.w	80103ce <tcp_process+0x32e>
 8010206:	4b4c      	ldr	r3, [pc, #304]	; (8010338 <tcp_process+0x298>)
 8010208:	781b      	ldrb	r3, [r3, #0]
 801020a:	f003 0302 	and.w	r3, r3, #2
 801020e:	2b00      	cmp	r3, #0
 8010210:	f000 80dd 	beq.w	80103ce <tcp_process+0x32e>
          && (ackno == pcb->lastack + 1)) {
 8010214:	687b      	ldr	r3, [r7, #4]
 8010216:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010218:	1c5a      	adds	r2, r3, #1
 801021a:	4b48      	ldr	r3, [pc, #288]	; (801033c <tcp_process+0x29c>)
 801021c:	681b      	ldr	r3, [r3, #0]
 801021e:	429a      	cmp	r2, r3
 8010220:	f040 80d5 	bne.w	80103ce <tcp_process+0x32e>
        pcb->rcv_nxt = seqno + 1;
 8010224:	4b46      	ldr	r3, [pc, #280]	; (8010340 <tcp_process+0x2a0>)
 8010226:	681b      	ldr	r3, [r3, #0]
 8010228:	1c5a      	adds	r2, r3, #1
 801022a:	687b      	ldr	r3, [r7, #4]
 801022c:	625a      	str	r2, [r3, #36]	; 0x24
        pcb->rcv_ann_right_edge = pcb->rcv_nxt;
 801022e:	687b      	ldr	r3, [r7, #4]
 8010230:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010232:	687b      	ldr	r3, [r7, #4]
 8010234:	62da      	str	r2, [r3, #44]	; 0x2c
        pcb->lastack = ackno;
 8010236:	4b41      	ldr	r3, [pc, #260]	; (801033c <tcp_process+0x29c>)
 8010238:	681a      	ldr	r2, [r3, #0]
 801023a:	687b      	ldr	r3, [r7, #4]
 801023c:	645a      	str	r2, [r3, #68]	; 0x44
        pcb->snd_wnd = tcphdr->wnd;
 801023e:	4b44      	ldr	r3, [pc, #272]	; (8010350 <tcp_process+0x2b0>)
 8010240:	681b      	ldr	r3, [r3, #0]
 8010242:	89db      	ldrh	r3, [r3, #14]
 8010244:	b29a      	uxth	r2, r3
 8010246:	687b      	ldr	r3, [r7, #4]
 8010248:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
        pcb->snd_wnd_max = pcb->snd_wnd;
 801024c:	687b      	ldr	r3, [r7, #4]
 801024e:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010252:	687b      	ldr	r3, [r7, #4]
 8010254:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
        pcb->snd_wl1 = seqno - 1; /* initialise to seqno - 1 to force window update */
 8010258:	4b39      	ldr	r3, [pc, #228]	; (8010340 <tcp_process+0x2a0>)
 801025a:	681b      	ldr	r3, [r3, #0]
 801025c:	1e5a      	subs	r2, r3, #1
 801025e:	687b      	ldr	r3, [r7, #4]
 8010260:	655a      	str	r2, [r3, #84]	; 0x54
        pcb->state = ESTABLISHED;
 8010262:	687b      	ldr	r3, [r7, #4]
 8010264:	2204      	movs	r2, #4
 8010266:	751a      	strb	r2, [r3, #20]

#if TCP_CALCULATE_EFF_SEND_MSS
        pcb->mss = tcp_eff_send_mss(pcb->mss, &pcb->local_ip, &pcb->remote_ip);
 8010268:	687b      	ldr	r3, [r7, #4]
 801026a:	8e5c      	ldrh	r4, [r3, #50]	; 0x32
 801026c:	687b      	ldr	r3, [r7, #4]
 801026e:	3304      	adds	r3, #4
 8010270:	4618      	mov	r0, r3
 8010272:	f005 f92d 	bl	80154d0 <ip4_route>
 8010276:	4601      	mov	r1, r0
 8010278:	687b      	ldr	r3, [r7, #4]
 801027a:	3304      	adds	r3, #4
 801027c:	461a      	mov	r2, r3
 801027e:	4620      	mov	r0, r4
 8010280:	f7ff f88c 	bl	800f39c <tcp_eff_send_mss_netif>
 8010284:	4603      	mov	r3, r0
 8010286:	461a      	mov	r2, r3
 8010288:	687b      	ldr	r3, [r7, #4]
 801028a:	865a      	strh	r2, [r3, #50]	; 0x32
#endif /* TCP_CALCULATE_EFF_SEND_MSS */

        pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 801028c:	687b      	ldr	r3, [r7, #4]
 801028e:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010290:	009a      	lsls	r2, r3, #2
 8010292:	687b      	ldr	r3, [r7, #4]
 8010294:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010296:	005b      	lsls	r3, r3, #1
 8010298:	f241 111c 	movw	r1, #4380	; 0x111c
 801029c:	428b      	cmp	r3, r1
 801029e:	bf38      	it	cc
 80102a0:	460b      	movcc	r3, r1
 80102a2:	429a      	cmp	r2, r3
 80102a4:	d204      	bcs.n	80102b0 <tcp_process+0x210>
 80102a6:	687b      	ldr	r3, [r7, #4]
 80102a8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102aa:	009b      	lsls	r3, r3, #2
 80102ac:	b29b      	uxth	r3, r3
 80102ae:	e00d      	b.n	80102cc <tcp_process+0x22c>
 80102b0:	687b      	ldr	r3, [r7, #4]
 80102b2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102b4:	005b      	lsls	r3, r3, #1
 80102b6:	f241 121c 	movw	r2, #4380	; 0x111c
 80102ba:	4293      	cmp	r3, r2
 80102bc:	d904      	bls.n	80102c8 <tcp_process+0x228>
 80102be:	687b      	ldr	r3, [r7, #4]
 80102c0:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80102c2:	005b      	lsls	r3, r3, #1
 80102c4:	b29b      	uxth	r3, r3
 80102c6:	e001      	b.n	80102cc <tcp_process+0x22c>
 80102c8:	f241 131c 	movw	r3, #4380	; 0x111c
 80102cc:	687a      	ldr	r2, [r7, #4]
 80102ce:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
        LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SENT): cwnd %"TCPWNDSIZE_F
                                     " ssthresh %"TCPWNDSIZE_F"\n",
                                     pcb->cwnd, pcb->ssthresh));
        LWIP_ASSERT("pcb->snd_queuelen > 0", (pcb->snd_queuelen > 0));
 80102d2:	687b      	ldr	r3, [r7, #4]
 80102d4:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102d8:	2b00      	cmp	r3, #0
 80102da:	d106      	bne.n	80102ea <tcp_process+0x24a>
 80102dc:	4b13      	ldr	r3, [pc, #76]	; (801032c <tcp_process+0x28c>)
 80102de:	f44f 725b 	mov.w	r2, #876	; 0x36c
 80102e2:	491c      	ldr	r1, [pc, #112]	; (8010354 <tcp_process+0x2b4>)
 80102e4:	4813      	ldr	r0, [pc, #76]	; (8010334 <tcp_process+0x294>)
 80102e6:	f006 fd83 	bl	8016df0 <iprintf>
        --pcb->snd_queuelen;
 80102ea:	687b      	ldr	r3, [r7, #4]
 80102ec:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80102f0:	3b01      	subs	r3, #1
 80102f2:	b29a      	uxth	r2, r3
 80102f4:	687b      	ldr	r3, [r7, #4]
 80102f6:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
        LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_process: SYN-SENT --queuelen %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));
        rseg = pcb->unacked;
 80102fa:	687b      	ldr	r3, [r7, #4]
 80102fc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80102fe:	61fb      	str	r3, [r7, #28]
        if (rseg == NULL) {
 8010300:	69fb      	ldr	r3, [r7, #28]
 8010302:	2b00      	cmp	r3, #0
 8010304:	d12a      	bne.n	801035c <tcp_process+0x2bc>
          /* might happen if tcp_output fails in tcp_rexmit_rto()
             in which case the segment is on the unsent list */
          rseg = pcb->unsent;
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801030a:	61fb      	str	r3, [r7, #28]
          LWIP_ASSERT("no segment to free", rseg != NULL);
 801030c:	69fb      	ldr	r3, [r7, #28]
 801030e:	2b00      	cmp	r3, #0
 8010310:	d106      	bne.n	8010320 <tcp_process+0x280>
 8010312:	4b06      	ldr	r3, [pc, #24]	; (801032c <tcp_process+0x28c>)
 8010314:	f44f 725d 	mov.w	r2, #884	; 0x374
 8010318:	490f      	ldr	r1, [pc, #60]	; (8010358 <tcp_process+0x2b8>)
 801031a:	4806      	ldr	r0, [pc, #24]	; (8010334 <tcp_process+0x294>)
 801031c:	f006 fd68 	bl	8016df0 <iprintf>
          pcb->unsent = rseg->next;
 8010320:	69fb      	ldr	r3, [r7, #28]
 8010322:	681a      	ldr	r2, [r3, #0]
 8010324:	687b      	ldr	r3, [r7, #4]
 8010326:	66da      	str	r2, [r3, #108]	; 0x6c
 8010328:	e01c      	b.n	8010364 <tcp_process+0x2c4>
 801032a:	bf00      	nop
 801032c:	08019eb4 	.word	0x08019eb4
 8010330:	0801a0ec 	.word	0x0801a0ec
 8010334:	08019f00 	.word	0x08019f00
 8010338:	2000f838 	.word	0x2000f838
 801033c:	2000f830 	.word	0x2000f830
 8010340:	2000f82c 	.word	0x2000f82c
 8010344:	0801a108 	.word	0x0801a108
 8010348:	2000f839 	.word	0x2000f839
 801034c:	2000f7f4 	.word	0x2000f7f4
 8010350:	2000f81c 	.word	0x2000f81c
 8010354:	0801a128 	.word	0x0801a128
 8010358:	0801a140 	.word	0x0801a140
        } else {
          pcb->unacked = rseg->next;
 801035c:	69fb      	ldr	r3, [r7, #28]
 801035e:	681a      	ldr	r2, [r3, #0]
 8010360:	687b      	ldr	r3, [r7, #4]
 8010362:	671a      	str	r2, [r3, #112]	; 0x70
        }
        tcp_seg_free(rseg);
 8010364:	69f8      	ldr	r0, [r7, #28]
 8010366:	f7fe fc54 	bl	800ec12 <tcp_seg_free>

        /* If there's nothing left to acknowledge, stop the retransmit
           timer, otherwise reset it to start again */
        if (pcb->unacked == NULL) {
 801036a:	687b      	ldr	r3, [r7, #4]
 801036c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 801036e:	2b00      	cmp	r3, #0
 8010370:	d104      	bne.n	801037c <tcp_process+0x2dc>
          pcb->rtime = -1;
 8010372:	687b      	ldr	r3, [r7, #4]
 8010374:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010378:	861a      	strh	r2, [r3, #48]	; 0x30
 801037a:	e006      	b.n	801038a <tcp_process+0x2ea>
        } else {
          pcb->rtime = 0;
 801037c:	687b      	ldr	r3, [r7, #4]
 801037e:	2200      	movs	r2, #0
 8010380:	861a      	strh	r2, [r3, #48]	; 0x30
          pcb->nrtx = 0;
 8010382:	687b      	ldr	r3, [r7, #4]
 8010384:	2200      	movs	r2, #0
 8010386:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
        }

        /* Call the user specified function to call when successfully
         * connected. */
        TCP_EVENT_CONNECTED(pcb, ERR_OK, err);
 801038a:	687b      	ldr	r3, [r7, #4]
 801038c:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8010390:	2b00      	cmp	r3, #0
 8010392:	d00a      	beq.n	80103aa <tcp_process+0x30a>
 8010394:	687b      	ldr	r3, [r7, #4]
 8010396:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 801039a:	687a      	ldr	r2, [r7, #4]
 801039c:	6910      	ldr	r0, [r2, #16]
 801039e:	2200      	movs	r2, #0
 80103a0:	6879      	ldr	r1, [r7, #4]
 80103a2:	4798      	blx	r3
 80103a4:	4603      	mov	r3, r0
 80103a6:	76bb      	strb	r3, [r7, #26]
 80103a8:	e001      	b.n	80103ae <tcp_process+0x30e>
 80103aa:	2300      	movs	r3, #0
 80103ac:	76bb      	strb	r3, [r7, #26]
        if (err == ERR_ABRT) {
 80103ae:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80103b2:	f113 0f0d 	cmn.w	r3, #13
 80103b6:	d102      	bne.n	80103be <tcp_process+0x31e>
          return ERR_ABRT;
 80103b8:	f06f 030c 	mvn.w	r3, #12
 80103bc:	e250      	b.n	8010860 <tcp_process+0x7c0>
        }
        tcp_ack_now(pcb);
 80103be:	687b      	ldr	r3, [r7, #4]
 80103c0:	8b5b      	ldrh	r3, [r3, #26]
 80103c2:	f043 0302 	orr.w	r3, r3, #2
 80103c6:	b29a      	uxth	r2, r3
 80103c8:	687b      	ldr	r3, [r7, #4]
 80103ca:	835a      	strh	r2, [r3, #26]
        if (pcb->nrtx < TCP_SYNMAXRTX) {
          pcb->rtime = 0;
          tcp_rexmit_rto(pcb);
        }
      }
      break;
 80103cc:	e23a      	b.n	8010844 <tcp_process+0x7a4>
      else if (flags & TCP_ACK) {
 80103ce:	4b98      	ldr	r3, [pc, #608]	; (8010630 <tcp_process+0x590>)
 80103d0:	781b      	ldrb	r3, [r3, #0]
 80103d2:	f003 0310 	and.w	r3, r3, #16
 80103d6:	2b00      	cmp	r3, #0
 80103d8:	f000 8234 	beq.w	8010844 <tcp_process+0x7a4>
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103dc:	4b95      	ldr	r3, [pc, #596]	; (8010634 <tcp_process+0x594>)
 80103de:	6819      	ldr	r1, [r3, #0]
 80103e0:	4b95      	ldr	r3, [pc, #596]	; (8010638 <tcp_process+0x598>)
 80103e2:	881b      	ldrh	r3, [r3, #0]
 80103e4:	461a      	mov	r2, r3
 80103e6:	4b95      	ldr	r3, [pc, #596]	; (801063c <tcp_process+0x59c>)
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	18d0      	adds	r0, r2, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103ec:	4b94      	ldr	r3, [pc, #592]	; (8010640 <tcp_process+0x5a0>)
 80103ee:	681b      	ldr	r3, [r3, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f0:	885b      	ldrh	r3, [r3, #2]
 80103f2:	b29b      	uxth	r3, r3
                ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 80103f4:	4a92      	ldr	r2, [pc, #584]	; (8010640 <tcp_process+0x5a0>)
 80103f6:	6812      	ldr	r2, [r2, #0]
        tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 80103f8:	8812      	ldrh	r2, [r2, #0]
 80103fa:	b292      	uxth	r2, r2
 80103fc:	9202      	str	r2, [sp, #8]
 80103fe:	9301      	str	r3, [sp, #4]
 8010400:	4b90      	ldr	r3, [pc, #576]	; (8010644 <tcp_process+0x5a4>)
 8010402:	9300      	str	r3, [sp, #0]
 8010404:	4b90      	ldr	r3, [pc, #576]	; (8010648 <tcp_process+0x5a8>)
 8010406:	4602      	mov	r2, r0
 8010408:	6878      	ldr	r0, [r7, #4]
 801040a:	f003 f8dd 	bl	80135c8 <tcp_rst>
        if (pcb->nrtx < TCP_SYNMAXRTX) {
 801040e:	687b      	ldr	r3, [r7, #4]
 8010410:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8010414:	2b05      	cmp	r3, #5
 8010416:	f200 8215 	bhi.w	8010844 <tcp_process+0x7a4>
          pcb->rtime = 0;
 801041a:	687b      	ldr	r3, [r7, #4]
 801041c:	2200      	movs	r2, #0
 801041e:	861a      	strh	r2, [r3, #48]	; 0x30
          tcp_rexmit_rto(pcb);
 8010420:	6878      	ldr	r0, [r7, #4]
 8010422:	f002 fea9 	bl	8013178 <tcp_rexmit_rto>
      break;
 8010426:	e20d      	b.n	8010844 <tcp_process+0x7a4>
    case SYN_RCVD:
      if (flags & TCP_ACK) {
 8010428:	4b81      	ldr	r3, [pc, #516]	; (8010630 <tcp_process+0x590>)
 801042a:	781b      	ldrb	r3, [r3, #0]
 801042c:	f003 0310 	and.w	r3, r3, #16
 8010430:	2b00      	cmp	r3, #0
 8010432:	f000 80a1 	beq.w	8010578 <tcp_process+0x4d8>
        /* expected ACK number? */
        if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010436:	4b7f      	ldr	r3, [pc, #508]	; (8010634 <tcp_process+0x594>)
 8010438:	681a      	ldr	r2, [r3, #0]
 801043a:	687b      	ldr	r3, [r7, #4]
 801043c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 801043e:	1ad3      	subs	r3, r2, r3
 8010440:	3b01      	subs	r3, #1
 8010442:	2b00      	cmp	r3, #0
 8010444:	db7e      	blt.n	8010544 <tcp_process+0x4a4>
 8010446:	4b7b      	ldr	r3, [pc, #492]	; (8010634 <tcp_process+0x594>)
 8010448:	681a      	ldr	r2, [r3, #0]
 801044a:	687b      	ldr	r3, [r7, #4]
 801044c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 801044e:	1ad3      	subs	r3, r2, r3
 8010450:	2b00      	cmp	r3, #0
 8010452:	dc77      	bgt.n	8010544 <tcp_process+0x4a4>
          pcb->state = ESTABLISHED;
 8010454:	687b      	ldr	r3, [r7, #4]
 8010456:	2204      	movs	r2, #4
 8010458:	751a      	strb	r2, [r3, #20]
          LWIP_DEBUGF(TCP_DEBUG, ("TCP connection established %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
#if LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG
          if (pcb->listener == NULL) {
 801045a:	687b      	ldr	r3, [r7, #4]
 801045c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801045e:	2b00      	cmp	r3, #0
 8010460:	d102      	bne.n	8010468 <tcp_process+0x3c8>
            /* listen pcb might be closed by now */
            err = ERR_VAL;
 8010462:	23fa      	movs	r3, #250	; 0xfa
 8010464:	76bb      	strb	r3, [r7, #26]
 8010466:	e01d      	b.n	80104a4 <tcp_process+0x404>
          } else
#endif /* LWIP_CALLBACK_API || TCP_LISTEN_BACKLOG */
          {
#if LWIP_CALLBACK_API
            LWIP_ASSERT("pcb->listener->accept != NULL", pcb->listener->accept != NULL);
 8010468:	687b      	ldr	r3, [r7, #4]
 801046a:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801046c:	699b      	ldr	r3, [r3, #24]
 801046e:	2b00      	cmp	r3, #0
 8010470:	d106      	bne.n	8010480 <tcp_process+0x3e0>
 8010472:	4b76      	ldr	r3, [pc, #472]	; (801064c <tcp_process+0x5ac>)
 8010474:	f44f 726a 	mov.w	r2, #936	; 0x3a8
 8010478:	4975      	ldr	r1, [pc, #468]	; (8010650 <tcp_process+0x5b0>)
 801047a:	4876      	ldr	r0, [pc, #472]	; (8010654 <tcp_process+0x5b4>)
 801047c:	f006 fcb8 	bl	8016df0 <iprintf>
#endif
            tcp_backlog_accepted(pcb);
            /* Call the accept function. */
            TCP_EVENT_ACCEPT(pcb->listener, pcb, pcb->callback_arg, ERR_OK, err);
 8010480:	687b      	ldr	r3, [r7, #4]
 8010482:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 8010484:	699b      	ldr	r3, [r3, #24]
 8010486:	2b00      	cmp	r3, #0
 8010488:	d00a      	beq.n	80104a0 <tcp_process+0x400>
 801048a:	687b      	ldr	r3, [r7, #4]
 801048c:	6fdb      	ldr	r3, [r3, #124]	; 0x7c
 801048e:	699b      	ldr	r3, [r3, #24]
 8010490:	687a      	ldr	r2, [r7, #4]
 8010492:	6910      	ldr	r0, [r2, #16]
 8010494:	2200      	movs	r2, #0
 8010496:	6879      	ldr	r1, [r7, #4]
 8010498:	4798      	blx	r3
 801049a:	4603      	mov	r3, r0
 801049c:	76bb      	strb	r3, [r7, #26]
 801049e:	e001      	b.n	80104a4 <tcp_process+0x404>
 80104a0:	23f0      	movs	r3, #240	; 0xf0
 80104a2:	76bb      	strb	r3, [r7, #26]
          }
          if (err != ERR_OK) {
 80104a4:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d00a      	beq.n	80104c2 <tcp_process+0x422>
            /* If the accept function returns with an error, we abort
             * the connection. */
            /* Already aborted? */
            if (err != ERR_ABRT) {
 80104ac:	f997 301a 	ldrsb.w	r3, [r7, #26]
 80104b0:	f113 0f0d 	cmn.w	r3, #13
 80104b4:	d002      	beq.n	80104bc <tcp_process+0x41c>
              tcp_abort(pcb);
 80104b6:	6878      	ldr	r0, [r7, #4]
 80104b8:	f7fd fcca 	bl	800de50 <tcp_abort>
            }
            return ERR_ABRT;
 80104bc:	f06f 030c 	mvn.w	r3, #12
 80104c0:	e1ce      	b.n	8010860 <tcp_process+0x7c0>
          }
          /* If there was any data contained within this ACK,
           * we'd better pass it on to the application as well. */
          tcp_receive(pcb);
 80104c2:	6878      	ldr	r0, [r7, #4]
 80104c4:	f000 fae0 	bl	8010a88 <tcp_receive>

          /* Prevent ACK for SYN to generate a sent event */
          if (recv_acked != 0) {
 80104c8:	4b63      	ldr	r3, [pc, #396]	; (8010658 <tcp_process+0x5b8>)
 80104ca:	881b      	ldrh	r3, [r3, #0]
 80104cc:	2b00      	cmp	r3, #0
 80104ce:	d005      	beq.n	80104dc <tcp_process+0x43c>
            recv_acked--;
 80104d0:	4b61      	ldr	r3, [pc, #388]	; (8010658 <tcp_process+0x5b8>)
 80104d2:	881b      	ldrh	r3, [r3, #0]
 80104d4:	3b01      	subs	r3, #1
 80104d6:	b29a      	uxth	r2, r3
 80104d8:	4b5f      	ldr	r3, [pc, #380]	; (8010658 <tcp_process+0x5b8>)
 80104da:	801a      	strh	r2, [r3, #0]
          }

          pcb->cwnd = LWIP_TCP_CALC_INITIAL_CWND(pcb->mss);
 80104dc:	687b      	ldr	r3, [r7, #4]
 80104de:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e0:	009a      	lsls	r2, r3, #2
 80104e2:	687b      	ldr	r3, [r7, #4]
 80104e4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104e6:	005b      	lsls	r3, r3, #1
 80104e8:	f241 111c 	movw	r1, #4380	; 0x111c
 80104ec:	428b      	cmp	r3, r1
 80104ee:	bf38      	it	cc
 80104f0:	460b      	movcc	r3, r1
 80104f2:	429a      	cmp	r2, r3
 80104f4:	d204      	bcs.n	8010500 <tcp_process+0x460>
 80104f6:	687b      	ldr	r3, [r7, #4]
 80104f8:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80104fa:	009b      	lsls	r3, r3, #2
 80104fc:	b29b      	uxth	r3, r3
 80104fe:	e00d      	b.n	801051c <tcp_process+0x47c>
 8010500:	687b      	ldr	r3, [r7, #4]
 8010502:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010504:	005b      	lsls	r3, r3, #1
 8010506:	f241 121c 	movw	r2, #4380	; 0x111c
 801050a:	4293      	cmp	r3, r2
 801050c:	d904      	bls.n	8010518 <tcp_process+0x478>
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010512:	005b      	lsls	r3, r3, #1
 8010514:	b29b      	uxth	r3, r3
 8010516:	e001      	b.n	801051c <tcp_process+0x47c>
 8010518:	f241 131c 	movw	r3, #4380	; 0x111c
 801051c:	687a      	ldr	r2, [r7, #4]
 801051e:	f8a2 3048 	strh.w	r3, [r2, #72]	; 0x48
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_process (SYN_RCVD): cwnd %"TCPWNDSIZE_F
                                       " ssthresh %"TCPWNDSIZE_F"\n",
                                       pcb->cwnd, pcb->ssthresh));

          if (recv_flags & TF_GOT_FIN) {
 8010522:	4b4e      	ldr	r3, [pc, #312]	; (801065c <tcp_process+0x5bc>)
 8010524:	781b      	ldrb	r3, [r3, #0]
 8010526:	f003 0320 	and.w	r3, r3, #32
 801052a:	2b00      	cmp	r3, #0
 801052c:	d037      	beq.n	801059e <tcp_process+0x4fe>
            tcp_ack_now(pcb);
 801052e:	687b      	ldr	r3, [r7, #4]
 8010530:	8b5b      	ldrh	r3, [r3, #26]
 8010532:	f043 0302 	orr.w	r3, r3, #2
 8010536:	b29a      	uxth	r2, r3
 8010538:	687b      	ldr	r3, [r7, #4]
 801053a:	835a      	strh	r2, [r3, #26]
            pcb->state = CLOSE_WAIT;
 801053c:	687b      	ldr	r3, [r7, #4]
 801053e:	2207      	movs	r2, #7
 8010540:	751a      	strb	r2, [r3, #20]
          if (recv_flags & TF_GOT_FIN) {
 8010542:	e02c      	b.n	801059e <tcp_process+0x4fe>
          }
        } else {
          /* incorrect ACK number, send RST */
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010544:	4b3b      	ldr	r3, [pc, #236]	; (8010634 <tcp_process+0x594>)
 8010546:	6819      	ldr	r1, [r3, #0]
 8010548:	4b3b      	ldr	r3, [pc, #236]	; (8010638 <tcp_process+0x598>)
 801054a:	881b      	ldrh	r3, [r3, #0]
 801054c:	461a      	mov	r2, r3
 801054e:	4b3b      	ldr	r3, [pc, #236]	; (801063c <tcp_process+0x59c>)
 8010550:	681b      	ldr	r3, [r3, #0]
 8010552:	18d0      	adds	r0, r2, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 8010554:	4b3a      	ldr	r3, [pc, #232]	; (8010640 <tcp_process+0x5a0>)
 8010556:	681b      	ldr	r3, [r3, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010558:	885b      	ldrh	r3, [r3, #2]
 801055a:	b29b      	uxth	r3, r3
                  ip_current_src_addr(), tcphdr->dest, tcphdr->src);
 801055c:	4a38      	ldr	r2, [pc, #224]	; (8010640 <tcp_process+0x5a0>)
 801055e:	6812      	ldr	r2, [r2, #0]
          tcp_rst(pcb, ackno, seqno + tcplen, ip_current_dest_addr(),
 8010560:	8812      	ldrh	r2, [r2, #0]
 8010562:	b292      	uxth	r2, r2
 8010564:	9202      	str	r2, [sp, #8]
 8010566:	9301      	str	r3, [sp, #4]
 8010568:	4b36      	ldr	r3, [pc, #216]	; (8010644 <tcp_process+0x5a4>)
 801056a:	9300      	str	r3, [sp, #0]
 801056c:	4b36      	ldr	r3, [pc, #216]	; (8010648 <tcp_process+0x5a8>)
 801056e:	4602      	mov	r2, r0
 8010570:	6878      	ldr	r0, [r7, #4]
 8010572:	f003 f829 	bl	80135c8 <tcp_rst>
        }
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
        /* Looks like another copy of the SYN - retransmit our SYN-ACK */
        tcp_rexmit(pcb);
      }
      break;
 8010576:	e167      	b.n	8010848 <tcp_process+0x7a8>
      } else if ((flags & TCP_SYN) && (seqno == pcb->rcv_nxt - 1)) {
 8010578:	4b2d      	ldr	r3, [pc, #180]	; (8010630 <tcp_process+0x590>)
 801057a:	781b      	ldrb	r3, [r3, #0]
 801057c:	f003 0302 	and.w	r3, r3, #2
 8010580:	2b00      	cmp	r3, #0
 8010582:	f000 8161 	beq.w	8010848 <tcp_process+0x7a8>
 8010586:	687b      	ldr	r3, [r7, #4]
 8010588:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801058a:	1e5a      	subs	r2, r3, #1
 801058c:	4b2b      	ldr	r3, [pc, #172]	; (801063c <tcp_process+0x59c>)
 801058e:	681b      	ldr	r3, [r3, #0]
 8010590:	429a      	cmp	r2, r3
 8010592:	f040 8159 	bne.w	8010848 <tcp_process+0x7a8>
        tcp_rexmit(pcb);
 8010596:	6878      	ldr	r0, [r7, #4]
 8010598:	f002 fe10 	bl	80131bc <tcp_rexmit>
      break;
 801059c:	e154      	b.n	8010848 <tcp_process+0x7a8>
 801059e:	e153      	b.n	8010848 <tcp_process+0x7a8>
    case CLOSE_WAIT:
    /* FALLTHROUGH */
    case ESTABLISHED:
      tcp_receive(pcb);
 80105a0:	6878      	ldr	r0, [r7, #4]
 80105a2:	f000 fa71 	bl	8010a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) { /* passive close */
 80105a6:	4b2d      	ldr	r3, [pc, #180]	; (801065c <tcp_process+0x5bc>)
 80105a8:	781b      	ldrb	r3, [r3, #0]
 80105aa:	f003 0320 	and.w	r3, r3, #32
 80105ae:	2b00      	cmp	r3, #0
 80105b0:	f000 814c 	beq.w	801084c <tcp_process+0x7ac>
        tcp_ack_now(pcb);
 80105b4:	687b      	ldr	r3, [r7, #4]
 80105b6:	8b5b      	ldrh	r3, [r3, #26]
 80105b8:	f043 0302 	orr.w	r3, r3, #2
 80105bc:	b29a      	uxth	r2, r3
 80105be:	687b      	ldr	r3, [r7, #4]
 80105c0:	835a      	strh	r2, [r3, #26]
        pcb->state = CLOSE_WAIT;
 80105c2:	687b      	ldr	r3, [r7, #4]
 80105c4:	2207      	movs	r2, #7
 80105c6:	751a      	strb	r2, [r3, #20]
      }
      break;
 80105c8:	e140      	b.n	801084c <tcp_process+0x7ac>
    case FIN_WAIT_1:
      tcp_receive(pcb);
 80105ca:	6878      	ldr	r0, [r7, #4]
 80105cc:	f000 fa5c 	bl	8010a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80105d0:	4b22      	ldr	r3, [pc, #136]	; (801065c <tcp_process+0x5bc>)
 80105d2:	781b      	ldrb	r3, [r3, #0]
 80105d4:	f003 0320 	and.w	r3, r3, #32
 80105d8:	2b00      	cmp	r3, #0
 80105da:	d071      	beq.n	80106c0 <tcp_process+0x620>
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105dc:	4b14      	ldr	r3, [pc, #80]	; (8010630 <tcp_process+0x590>)
 80105de:	781b      	ldrb	r3, [r3, #0]
 80105e0:	f003 0310 	and.w	r3, r3, #16
 80105e4:	2b00      	cmp	r3, #0
 80105e6:	d060      	beq.n	80106aa <tcp_process+0x60a>
 80105e8:	687b      	ldr	r3, [r7, #4]
 80105ea:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80105ec:	4b11      	ldr	r3, [pc, #68]	; (8010634 <tcp_process+0x594>)
 80105ee:	681b      	ldr	r3, [r3, #0]
 80105f0:	429a      	cmp	r2, r3
 80105f2:	d15a      	bne.n	80106aa <tcp_process+0x60a>
            pcb->unsent == NULL) {
 80105f4:	687b      	ldr	r3, [r7, #4]
 80105f6:	6edb      	ldr	r3, [r3, #108]	; 0x6c
        if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80105f8:	2b00      	cmp	r3, #0
 80105fa:	d156      	bne.n	80106aa <tcp_process+0x60a>
          LWIP_DEBUGF(TCP_DEBUG,
                      ("TCP connection closed: FIN_WAIT_1 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
          tcp_ack_now(pcb);
 80105fc:	687b      	ldr	r3, [r7, #4]
 80105fe:	8b5b      	ldrh	r3, [r3, #26]
 8010600:	f043 0302 	orr.w	r3, r3, #2
 8010604:	b29a      	uxth	r2, r3
 8010606:	687b      	ldr	r3, [r7, #4]
 8010608:	835a      	strh	r2, [r3, #26]
          tcp_pcb_purge(pcb);
 801060a:	6878      	ldr	r0, [r7, #4]
 801060c:	f7fe fdbc 	bl	800f188 <tcp_pcb_purge>
          TCP_RMV_ACTIVE(pcb);
 8010610:	4b13      	ldr	r3, [pc, #76]	; (8010660 <tcp_process+0x5c0>)
 8010612:	681b      	ldr	r3, [r3, #0]
 8010614:	687a      	ldr	r2, [r7, #4]
 8010616:	429a      	cmp	r2, r3
 8010618:	d105      	bne.n	8010626 <tcp_process+0x586>
 801061a:	4b11      	ldr	r3, [pc, #68]	; (8010660 <tcp_process+0x5c0>)
 801061c:	681b      	ldr	r3, [r3, #0]
 801061e:	68db      	ldr	r3, [r3, #12]
 8010620:	4a0f      	ldr	r2, [pc, #60]	; (8010660 <tcp_process+0x5c0>)
 8010622:	6013      	str	r3, [r2, #0]
 8010624:	e02e      	b.n	8010684 <tcp_process+0x5e4>
 8010626:	4b0e      	ldr	r3, [pc, #56]	; (8010660 <tcp_process+0x5c0>)
 8010628:	681b      	ldr	r3, [r3, #0]
 801062a:	617b      	str	r3, [r7, #20]
 801062c:	e027      	b.n	801067e <tcp_process+0x5de>
 801062e:	bf00      	nop
 8010630:	2000f838 	.word	0x2000f838
 8010634:	2000f830 	.word	0x2000f830
 8010638:	2000f836 	.word	0x2000f836
 801063c:	2000f82c 	.word	0x2000f82c
 8010640:	2000f81c 	.word	0x2000f81c
 8010644:	20009ef0 	.word	0x20009ef0
 8010648:	20009ef4 	.word	0x20009ef4
 801064c:	08019eb4 	.word	0x08019eb4
 8010650:	0801a154 	.word	0x0801a154
 8010654:	08019f00 	.word	0x08019f00
 8010658:	2000f834 	.word	0x2000f834
 801065c:	2000f839 	.word	0x2000f839
 8010660:	2000f800 	.word	0x2000f800
 8010664:	697b      	ldr	r3, [r7, #20]
 8010666:	68db      	ldr	r3, [r3, #12]
 8010668:	687a      	ldr	r2, [r7, #4]
 801066a:	429a      	cmp	r2, r3
 801066c:	d104      	bne.n	8010678 <tcp_process+0x5d8>
 801066e:	687b      	ldr	r3, [r7, #4]
 8010670:	68da      	ldr	r2, [r3, #12]
 8010672:	697b      	ldr	r3, [r7, #20]
 8010674:	60da      	str	r2, [r3, #12]
 8010676:	e005      	b.n	8010684 <tcp_process+0x5e4>
 8010678:	697b      	ldr	r3, [r7, #20]
 801067a:	68db      	ldr	r3, [r3, #12]
 801067c:	617b      	str	r3, [r7, #20]
 801067e:	697b      	ldr	r3, [r7, #20]
 8010680:	2b00      	cmp	r3, #0
 8010682:	d1ef      	bne.n	8010664 <tcp_process+0x5c4>
 8010684:	687b      	ldr	r3, [r7, #4]
 8010686:	2200      	movs	r2, #0
 8010688:	60da      	str	r2, [r3, #12]
 801068a:	4b77      	ldr	r3, [pc, #476]	; (8010868 <tcp_process+0x7c8>)
 801068c:	2201      	movs	r2, #1
 801068e:	701a      	strb	r2, [r3, #0]
          pcb->state = TIME_WAIT;
 8010690:	687b      	ldr	r3, [r7, #4]
 8010692:	220a      	movs	r2, #10
 8010694:	751a      	strb	r2, [r3, #20]
          TCP_REG(&tcp_tw_pcbs, pcb);
 8010696:	4b75      	ldr	r3, [pc, #468]	; (801086c <tcp_process+0x7cc>)
 8010698:	681a      	ldr	r2, [r3, #0]
 801069a:	687b      	ldr	r3, [r7, #4]
 801069c:	60da      	str	r2, [r3, #12]
 801069e:	4a73      	ldr	r2, [pc, #460]	; (801086c <tcp_process+0x7cc>)
 80106a0:	687b      	ldr	r3, [r7, #4]
 80106a2:	6013      	str	r3, [r2, #0]
 80106a4:	f003 f952 	bl	801394c <tcp_timer_needed>
        }
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
                 pcb->unsent == NULL) {
        pcb->state = FIN_WAIT_2;
      }
      break;
 80106a8:	e0d2      	b.n	8010850 <tcp_process+0x7b0>
          tcp_ack_now(pcb);
 80106aa:	687b      	ldr	r3, [r7, #4]
 80106ac:	8b5b      	ldrh	r3, [r3, #26]
 80106ae:	f043 0302 	orr.w	r3, r3, #2
 80106b2:	b29a      	uxth	r2, r3
 80106b4:	687b      	ldr	r3, [r7, #4]
 80106b6:	835a      	strh	r2, [r3, #26]
          pcb->state = CLOSING;
 80106b8:	687b      	ldr	r3, [r7, #4]
 80106ba:	2208      	movs	r2, #8
 80106bc:	751a      	strb	r2, [r3, #20]
      break;
 80106be:	e0c7      	b.n	8010850 <tcp_process+0x7b0>
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106c0:	4b6b      	ldr	r3, [pc, #428]	; (8010870 <tcp_process+0x7d0>)
 80106c2:	781b      	ldrb	r3, [r3, #0]
 80106c4:	f003 0310 	and.w	r3, r3, #16
 80106c8:	2b00      	cmp	r3, #0
 80106ca:	f000 80c1 	beq.w	8010850 <tcp_process+0x7b0>
 80106ce:	687b      	ldr	r3, [r7, #4]
 80106d0:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80106d2:	4b68      	ldr	r3, [pc, #416]	; (8010874 <tcp_process+0x7d4>)
 80106d4:	681b      	ldr	r3, [r3, #0]
 80106d6:	429a      	cmp	r2, r3
 80106d8:	f040 80ba 	bne.w	8010850 <tcp_process+0x7b0>
                 pcb->unsent == NULL) {
 80106dc:	687b      	ldr	r3, [r7, #4]
 80106de:	6edb      	ldr	r3, [r3, #108]	; 0x6c
      } else if ((flags & TCP_ACK) && (ackno == pcb->snd_nxt) &&
 80106e0:	2b00      	cmp	r3, #0
 80106e2:	f040 80b5 	bne.w	8010850 <tcp_process+0x7b0>
        pcb->state = FIN_WAIT_2;
 80106e6:	687b      	ldr	r3, [r7, #4]
 80106e8:	2206      	movs	r2, #6
 80106ea:	751a      	strb	r2, [r3, #20]
      break;
 80106ec:	e0b0      	b.n	8010850 <tcp_process+0x7b0>
    case FIN_WAIT_2:
      tcp_receive(pcb);
 80106ee:	6878      	ldr	r0, [r7, #4]
 80106f0:	f000 f9ca 	bl	8010a88 <tcp_receive>
      if (recv_flags & TF_GOT_FIN) {
 80106f4:	4b60      	ldr	r3, [pc, #384]	; (8010878 <tcp_process+0x7d8>)
 80106f6:	781b      	ldrb	r3, [r3, #0]
 80106f8:	f003 0320 	and.w	r3, r3, #32
 80106fc:	2b00      	cmp	r3, #0
 80106fe:	f000 80a9 	beq.w	8010854 <tcp_process+0x7b4>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: FIN_WAIT_2 %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_ack_now(pcb);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	8b5b      	ldrh	r3, [r3, #26]
 8010706:	f043 0302 	orr.w	r3, r3, #2
 801070a:	b29a      	uxth	r2, r3
 801070c:	687b      	ldr	r3, [r7, #4]
 801070e:	835a      	strh	r2, [r3, #26]
        tcp_pcb_purge(pcb);
 8010710:	6878      	ldr	r0, [r7, #4]
 8010712:	f7fe fd39 	bl	800f188 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 8010716:	4b59      	ldr	r3, [pc, #356]	; (801087c <tcp_process+0x7dc>)
 8010718:	681b      	ldr	r3, [r3, #0]
 801071a:	687a      	ldr	r2, [r7, #4]
 801071c:	429a      	cmp	r2, r3
 801071e:	d105      	bne.n	801072c <tcp_process+0x68c>
 8010720:	4b56      	ldr	r3, [pc, #344]	; (801087c <tcp_process+0x7dc>)
 8010722:	681b      	ldr	r3, [r3, #0]
 8010724:	68db      	ldr	r3, [r3, #12]
 8010726:	4a55      	ldr	r2, [pc, #340]	; (801087c <tcp_process+0x7dc>)
 8010728:	6013      	str	r3, [r2, #0]
 801072a:	e013      	b.n	8010754 <tcp_process+0x6b4>
 801072c:	4b53      	ldr	r3, [pc, #332]	; (801087c <tcp_process+0x7dc>)
 801072e:	681b      	ldr	r3, [r3, #0]
 8010730:	613b      	str	r3, [r7, #16]
 8010732:	e00c      	b.n	801074e <tcp_process+0x6ae>
 8010734:	693b      	ldr	r3, [r7, #16]
 8010736:	68db      	ldr	r3, [r3, #12]
 8010738:	687a      	ldr	r2, [r7, #4]
 801073a:	429a      	cmp	r2, r3
 801073c:	d104      	bne.n	8010748 <tcp_process+0x6a8>
 801073e:	687b      	ldr	r3, [r7, #4]
 8010740:	68da      	ldr	r2, [r3, #12]
 8010742:	693b      	ldr	r3, [r7, #16]
 8010744:	60da      	str	r2, [r3, #12]
 8010746:	e005      	b.n	8010754 <tcp_process+0x6b4>
 8010748:	693b      	ldr	r3, [r7, #16]
 801074a:	68db      	ldr	r3, [r3, #12]
 801074c:	613b      	str	r3, [r7, #16]
 801074e:	693b      	ldr	r3, [r7, #16]
 8010750:	2b00      	cmp	r3, #0
 8010752:	d1ef      	bne.n	8010734 <tcp_process+0x694>
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	2200      	movs	r2, #0
 8010758:	60da      	str	r2, [r3, #12]
 801075a:	4b43      	ldr	r3, [pc, #268]	; (8010868 <tcp_process+0x7c8>)
 801075c:	2201      	movs	r2, #1
 801075e:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 8010760:	687b      	ldr	r3, [r7, #4]
 8010762:	220a      	movs	r2, #10
 8010764:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 8010766:	4b41      	ldr	r3, [pc, #260]	; (801086c <tcp_process+0x7cc>)
 8010768:	681a      	ldr	r2, [r3, #0]
 801076a:	687b      	ldr	r3, [r7, #4]
 801076c:	60da      	str	r2, [r3, #12]
 801076e:	4a3f      	ldr	r2, [pc, #252]	; (801086c <tcp_process+0x7cc>)
 8010770:	687b      	ldr	r3, [r7, #4]
 8010772:	6013      	str	r3, [r2, #0]
 8010774:	f003 f8ea 	bl	801394c <tcp_timer_needed>
      }
      break;
 8010778:	e06c      	b.n	8010854 <tcp_process+0x7b4>
    case CLOSING:
      tcp_receive(pcb);
 801077a:	6878      	ldr	r0, [r7, #4]
 801077c:	f000 f984 	bl	8010a88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010780:	4b3b      	ldr	r3, [pc, #236]	; (8010870 <tcp_process+0x7d0>)
 8010782:	781b      	ldrb	r3, [r3, #0]
 8010784:	f003 0310 	and.w	r3, r3, #16
 8010788:	2b00      	cmp	r3, #0
 801078a:	d065      	beq.n	8010858 <tcp_process+0x7b8>
 801078c:	687b      	ldr	r3, [r7, #4]
 801078e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010790:	4b38      	ldr	r3, [pc, #224]	; (8010874 <tcp_process+0x7d4>)
 8010792:	681b      	ldr	r3, [r3, #0]
 8010794:	429a      	cmp	r2, r3
 8010796:	d15f      	bne.n	8010858 <tcp_process+0x7b8>
 8010798:	687b      	ldr	r3, [r7, #4]
 801079a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801079c:	2b00      	cmp	r3, #0
 801079e:	d15b      	bne.n	8010858 <tcp_process+0x7b8>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: CLOSING %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        tcp_pcb_purge(pcb);
 80107a0:	6878      	ldr	r0, [r7, #4]
 80107a2:	f7fe fcf1 	bl	800f188 <tcp_pcb_purge>
        TCP_RMV_ACTIVE(pcb);
 80107a6:	4b35      	ldr	r3, [pc, #212]	; (801087c <tcp_process+0x7dc>)
 80107a8:	681b      	ldr	r3, [r3, #0]
 80107aa:	687a      	ldr	r2, [r7, #4]
 80107ac:	429a      	cmp	r2, r3
 80107ae:	d105      	bne.n	80107bc <tcp_process+0x71c>
 80107b0:	4b32      	ldr	r3, [pc, #200]	; (801087c <tcp_process+0x7dc>)
 80107b2:	681b      	ldr	r3, [r3, #0]
 80107b4:	68db      	ldr	r3, [r3, #12]
 80107b6:	4a31      	ldr	r2, [pc, #196]	; (801087c <tcp_process+0x7dc>)
 80107b8:	6013      	str	r3, [r2, #0]
 80107ba:	e013      	b.n	80107e4 <tcp_process+0x744>
 80107bc:	4b2f      	ldr	r3, [pc, #188]	; (801087c <tcp_process+0x7dc>)
 80107be:	681b      	ldr	r3, [r3, #0]
 80107c0:	60fb      	str	r3, [r7, #12]
 80107c2:	e00c      	b.n	80107de <tcp_process+0x73e>
 80107c4:	68fb      	ldr	r3, [r7, #12]
 80107c6:	68db      	ldr	r3, [r3, #12]
 80107c8:	687a      	ldr	r2, [r7, #4]
 80107ca:	429a      	cmp	r2, r3
 80107cc:	d104      	bne.n	80107d8 <tcp_process+0x738>
 80107ce:	687b      	ldr	r3, [r7, #4]
 80107d0:	68da      	ldr	r2, [r3, #12]
 80107d2:	68fb      	ldr	r3, [r7, #12]
 80107d4:	60da      	str	r2, [r3, #12]
 80107d6:	e005      	b.n	80107e4 <tcp_process+0x744>
 80107d8:	68fb      	ldr	r3, [r7, #12]
 80107da:	68db      	ldr	r3, [r3, #12]
 80107dc:	60fb      	str	r3, [r7, #12]
 80107de:	68fb      	ldr	r3, [r7, #12]
 80107e0:	2b00      	cmp	r3, #0
 80107e2:	d1ef      	bne.n	80107c4 <tcp_process+0x724>
 80107e4:	687b      	ldr	r3, [r7, #4]
 80107e6:	2200      	movs	r2, #0
 80107e8:	60da      	str	r2, [r3, #12]
 80107ea:	4b1f      	ldr	r3, [pc, #124]	; (8010868 <tcp_process+0x7c8>)
 80107ec:	2201      	movs	r2, #1
 80107ee:	701a      	strb	r2, [r3, #0]
        pcb->state = TIME_WAIT;
 80107f0:	687b      	ldr	r3, [r7, #4]
 80107f2:	220a      	movs	r2, #10
 80107f4:	751a      	strb	r2, [r3, #20]
        TCP_REG(&tcp_tw_pcbs, pcb);
 80107f6:	4b1d      	ldr	r3, [pc, #116]	; (801086c <tcp_process+0x7cc>)
 80107f8:	681a      	ldr	r2, [r3, #0]
 80107fa:	687b      	ldr	r3, [r7, #4]
 80107fc:	60da      	str	r2, [r3, #12]
 80107fe:	4a1b      	ldr	r2, [pc, #108]	; (801086c <tcp_process+0x7cc>)
 8010800:	687b      	ldr	r3, [r7, #4]
 8010802:	6013      	str	r3, [r2, #0]
 8010804:	f003 f8a2 	bl	801394c <tcp_timer_needed>
      }
      break;
 8010808:	e026      	b.n	8010858 <tcp_process+0x7b8>
    case LAST_ACK:
      tcp_receive(pcb);
 801080a:	6878      	ldr	r0, [r7, #4]
 801080c:	f000 f93c 	bl	8010a88 <tcp_receive>
      if ((flags & TCP_ACK) && ackno == pcb->snd_nxt && pcb->unsent == NULL) {
 8010810:	4b17      	ldr	r3, [pc, #92]	; (8010870 <tcp_process+0x7d0>)
 8010812:	781b      	ldrb	r3, [r3, #0]
 8010814:	f003 0310 	and.w	r3, r3, #16
 8010818:	2b00      	cmp	r3, #0
 801081a:	d01f      	beq.n	801085c <tcp_process+0x7bc>
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8010820:	4b14      	ldr	r3, [pc, #80]	; (8010874 <tcp_process+0x7d4>)
 8010822:	681b      	ldr	r3, [r3, #0]
 8010824:	429a      	cmp	r2, r3
 8010826:	d119      	bne.n	801085c <tcp_process+0x7bc>
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801082c:	2b00      	cmp	r3, #0
 801082e:	d115      	bne.n	801085c <tcp_process+0x7bc>
        LWIP_DEBUGF(TCP_DEBUG, ("TCP connection closed: LAST_ACK %"U16_F" -> %"U16_F".\n", inseg.tcphdr->src, inseg.tcphdr->dest));
        /* bugfix #21699: don't set pcb->state to CLOSED here or we risk leaking segments */
        recv_flags |= TF_CLOSED;
 8010830:	4b11      	ldr	r3, [pc, #68]	; (8010878 <tcp_process+0x7d8>)
 8010832:	781b      	ldrb	r3, [r3, #0]
 8010834:	f043 0310 	orr.w	r3, r3, #16
 8010838:	b2da      	uxtb	r2, r3
 801083a:	4b0f      	ldr	r3, [pc, #60]	; (8010878 <tcp_process+0x7d8>)
 801083c:	701a      	strb	r2, [r3, #0]
      }
      break;
 801083e:	e00d      	b.n	801085c <tcp_process+0x7bc>
    default:
      break;
 8010840:	bf00      	nop
 8010842:	e00c      	b.n	801085e <tcp_process+0x7be>
      break;
 8010844:	bf00      	nop
 8010846:	e00a      	b.n	801085e <tcp_process+0x7be>
      break;
 8010848:	bf00      	nop
 801084a:	e008      	b.n	801085e <tcp_process+0x7be>
      break;
 801084c:	bf00      	nop
 801084e:	e006      	b.n	801085e <tcp_process+0x7be>
      break;
 8010850:	bf00      	nop
 8010852:	e004      	b.n	801085e <tcp_process+0x7be>
      break;
 8010854:	bf00      	nop
 8010856:	e002      	b.n	801085e <tcp_process+0x7be>
      break;
 8010858:	bf00      	nop
 801085a:	e000      	b.n	801085e <tcp_process+0x7be>
      break;
 801085c:	bf00      	nop
  }
  return ERR_OK;
 801085e:	2300      	movs	r3, #0
}
 8010860:	4618      	mov	r0, r3
 8010862:	3724      	adds	r7, #36	; 0x24
 8010864:	46bd      	mov	sp, r7
 8010866:	bd90      	pop	{r4, r7, pc}
 8010868:	2000f808 	.word	0x2000f808
 801086c:	2000f804 	.word	0x2000f804
 8010870:	2000f838 	.word	0x2000f838
 8010874:	2000f830 	.word	0x2000f830
 8010878:	2000f839 	.word	0x2000f839
 801087c:	2000f800 	.word	0x2000f800

08010880 <tcp_oos_insert_segment>:
 *
 * Called from tcp_receive()
 */
static void
tcp_oos_insert_segment(struct tcp_seg *cseg, struct tcp_seg *next)
{
 8010880:	b590      	push	{r4, r7, lr}
 8010882:	b085      	sub	sp, #20
 8010884:	af00      	add	r7, sp, #0
 8010886:	6078      	str	r0, [r7, #4]
 8010888:	6039      	str	r1, [r7, #0]
  struct tcp_seg *old_seg;

  LWIP_ASSERT("tcp_oos_insert_segment: invalid cseg", cseg != NULL);
 801088a:	687b      	ldr	r3, [r7, #4]
 801088c:	2b00      	cmp	r3, #0
 801088e:	d106      	bne.n	801089e <tcp_oos_insert_segment+0x1e>
 8010890:	4b3b      	ldr	r3, [pc, #236]	; (8010980 <tcp_oos_insert_segment+0x100>)
 8010892:	f240 421f 	movw	r2, #1055	; 0x41f
 8010896:	493b      	ldr	r1, [pc, #236]	; (8010984 <tcp_oos_insert_segment+0x104>)
 8010898:	483b      	ldr	r0, [pc, #236]	; (8010988 <tcp_oos_insert_segment+0x108>)
 801089a:	f006 faa9 	bl	8016df0 <iprintf>

  if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 801089e:	687b      	ldr	r3, [r7, #4]
 80108a0:	68db      	ldr	r3, [r3, #12]
 80108a2:	899b      	ldrh	r3, [r3, #12]
 80108a4:	b29b      	uxth	r3, r3
 80108a6:	4618      	mov	r0, r3
 80108a8:	f7fb f8f0 	bl	800ba8c <lwip_htons>
 80108ac:	4603      	mov	r3, r0
 80108ae:	b2db      	uxtb	r3, r3
 80108b0:	f003 0301 	and.w	r3, r3, #1
 80108b4:	2b00      	cmp	r3, #0
 80108b6:	d028      	beq.n	801090a <tcp_oos_insert_segment+0x8a>
    /* received segment overlaps all following segments */
    tcp_segs_free(next);
 80108b8:	6838      	ldr	r0, [r7, #0]
 80108ba:	f7fe f995 	bl	800ebe8 <tcp_segs_free>
    next = NULL;
 80108be:	2300      	movs	r3, #0
 80108c0:	603b      	str	r3, [r7, #0]
 80108c2:	e056      	b.n	8010972 <tcp_oos_insert_segment+0xf2>
       oos queue may have segments with FIN flag */
    while (next &&
           TCP_SEQ_GEQ((seqno + cseg->len),
                       (next->tcphdr->seqno + next->len))) {
      /* cseg with FIN already processed */
      if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80108c4:	683b      	ldr	r3, [r7, #0]
 80108c6:	68db      	ldr	r3, [r3, #12]
 80108c8:	899b      	ldrh	r3, [r3, #12]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	4618      	mov	r0, r3
 80108ce:	f7fb f8dd 	bl	800ba8c <lwip_htons>
 80108d2:	4603      	mov	r3, r0
 80108d4:	b2db      	uxtb	r3, r3
 80108d6:	f003 0301 	and.w	r3, r3, #1
 80108da:	2b00      	cmp	r3, #0
 80108dc:	d00d      	beq.n	80108fa <tcp_oos_insert_segment+0x7a>
        TCPH_SET_FLAG(cseg->tcphdr, TCP_FIN);
 80108de:	687b      	ldr	r3, [r7, #4]
 80108e0:	68db      	ldr	r3, [r3, #12]
 80108e2:	899b      	ldrh	r3, [r3, #12]
 80108e4:	b29c      	uxth	r4, r3
 80108e6:	2001      	movs	r0, #1
 80108e8:	f7fb f8d0 	bl	800ba8c <lwip_htons>
 80108ec:	4603      	mov	r3, r0
 80108ee:	461a      	mov	r2, r3
 80108f0:	687b      	ldr	r3, [r7, #4]
 80108f2:	68db      	ldr	r3, [r3, #12]
 80108f4:	4322      	orrs	r2, r4
 80108f6:	b292      	uxth	r2, r2
 80108f8:	819a      	strh	r2, [r3, #12]
      }
      old_seg = next;
 80108fa:	683b      	ldr	r3, [r7, #0]
 80108fc:	60fb      	str	r3, [r7, #12]
      next = next->next;
 80108fe:	683b      	ldr	r3, [r7, #0]
 8010900:	681b      	ldr	r3, [r3, #0]
 8010902:	603b      	str	r3, [r7, #0]
      tcp_seg_free(old_seg);
 8010904:	68f8      	ldr	r0, [r7, #12]
 8010906:	f7fe f984 	bl	800ec12 <tcp_seg_free>
    while (next &&
 801090a:	683b      	ldr	r3, [r7, #0]
 801090c:	2b00      	cmp	r3, #0
 801090e:	d00e      	beq.n	801092e <tcp_oos_insert_segment+0xae>
           TCP_SEQ_GEQ((seqno + cseg->len),
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	891b      	ldrh	r3, [r3, #8]
 8010914:	461a      	mov	r2, r3
 8010916:	4b1d      	ldr	r3, [pc, #116]	; (801098c <tcp_oos_insert_segment+0x10c>)
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	441a      	add	r2, r3
 801091c:	683b      	ldr	r3, [r7, #0]
 801091e:	68db      	ldr	r3, [r3, #12]
 8010920:	685b      	ldr	r3, [r3, #4]
 8010922:	6839      	ldr	r1, [r7, #0]
 8010924:	8909      	ldrh	r1, [r1, #8]
 8010926:	440b      	add	r3, r1
 8010928:	1ad3      	subs	r3, r2, r3
    while (next &&
 801092a:	2b00      	cmp	r3, #0
 801092c:	daca      	bge.n	80108c4 <tcp_oos_insert_segment+0x44>
    }
    if (next &&
 801092e:	683b      	ldr	r3, [r7, #0]
 8010930:	2b00      	cmp	r3, #0
 8010932:	d01e      	beq.n	8010972 <tcp_oos_insert_segment+0xf2>
        TCP_SEQ_GT(seqno + cseg->len, next->tcphdr->seqno)) {
 8010934:	687b      	ldr	r3, [r7, #4]
 8010936:	891b      	ldrh	r3, [r3, #8]
 8010938:	461a      	mov	r2, r3
 801093a:	4b14      	ldr	r3, [pc, #80]	; (801098c <tcp_oos_insert_segment+0x10c>)
 801093c:	681b      	ldr	r3, [r3, #0]
 801093e:	441a      	add	r2, r3
 8010940:	683b      	ldr	r3, [r7, #0]
 8010942:	68db      	ldr	r3, [r3, #12]
 8010944:	685b      	ldr	r3, [r3, #4]
 8010946:	1ad3      	subs	r3, r2, r3
    if (next &&
 8010948:	2b00      	cmp	r3, #0
 801094a:	dd12      	ble.n	8010972 <tcp_oos_insert_segment+0xf2>
      /* We need to trim the incoming segment. */
      cseg->len = (u16_t)(next->tcphdr->seqno - seqno);
 801094c:	683b      	ldr	r3, [r7, #0]
 801094e:	68db      	ldr	r3, [r3, #12]
 8010950:	685b      	ldr	r3, [r3, #4]
 8010952:	b29a      	uxth	r2, r3
 8010954:	4b0d      	ldr	r3, [pc, #52]	; (801098c <tcp_oos_insert_segment+0x10c>)
 8010956:	681b      	ldr	r3, [r3, #0]
 8010958:	b29b      	uxth	r3, r3
 801095a:	1ad3      	subs	r3, r2, r3
 801095c:	b29a      	uxth	r2, r3
 801095e:	687b      	ldr	r3, [r7, #4]
 8010960:	811a      	strh	r2, [r3, #8]
      pbuf_realloc(cseg->p, cseg->len);
 8010962:	687b      	ldr	r3, [r7, #4]
 8010964:	685a      	ldr	r2, [r3, #4]
 8010966:	687b      	ldr	r3, [r7, #4]
 8010968:	891b      	ldrh	r3, [r3, #8]
 801096a:	4619      	mov	r1, r3
 801096c:	4610      	mov	r0, r2
 801096e:	f7fc faf9 	bl	800cf64 <pbuf_realloc>
    }
  }
  cseg->next = next;
 8010972:	687b      	ldr	r3, [r7, #4]
 8010974:	683a      	ldr	r2, [r7, #0]
 8010976:	601a      	str	r2, [r3, #0]
}
 8010978:	bf00      	nop
 801097a:	3714      	adds	r7, #20
 801097c:	46bd      	mov	sp, r7
 801097e:	bd90      	pop	{r4, r7, pc}
 8010980:	08019eb4 	.word	0x08019eb4
 8010984:	0801a174 	.word	0x0801a174
 8010988:	08019f00 	.word	0x08019f00
 801098c:	2000f82c 	.word	0x2000f82c

08010990 <tcp_free_acked_segments>:

/** Remove segments from a list if the incoming ACK acknowledges them */
static struct tcp_seg *
tcp_free_acked_segments(struct tcp_pcb *pcb, struct tcp_seg *seg_list, const char *dbg_list_name,
                        struct tcp_seg *dbg_other_seg_list)
{
 8010990:	b5b0      	push	{r4, r5, r7, lr}
 8010992:	b086      	sub	sp, #24
 8010994:	af00      	add	r7, sp, #0
 8010996:	60f8      	str	r0, [r7, #12]
 8010998:	60b9      	str	r1, [r7, #8]
 801099a:	607a      	str	r2, [r7, #4]
 801099c:	603b      	str	r3, [r7, #0]
  u16_t clen;

  LWIP_UNUSED_ARG(dbg_list_name);
  LWIP_UNUSED_ARG(dbg_other_seg_list);

  while (seg_list != NULL &&
 801099e:	e03e      	b.n	8010a1e <tcp_free_acked_segments+0x8e>
    LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: removing %"U32_F":%"U32_F" from pcb->%s\n",
                                  lwip_ntohl(seg_list->tcphdr->seqno),
                                  lwip_ntohl(seg_list->tcphdr->seqno) + TCP_TCPLEN(seg_list),
                                  dbg_list_name));

    next = seg_list;
 80109a0:	68bb      	ldr	r3, [r7, #8]
 80109a2:	617b      	str	r3, [r7, #20]
    seg_list = seg_list->next;
 80109a4:	68bb      	ldr	r3, [r7, #8]
 80109a6:	681b      	ldr	r3, [r3, #0]
 80109a8:	60bb      	str	r3, [r7, #8]

    clen = pbuf_clen(next->p);
 80109aa:	697b      	ldr	r3, [r7, #20]
 80109ac:	685b      	ldr	r3, [r3, #4]
 80109ae:	4618      	mov	r0, r3
 80109b0:	f7fc fcec 	bl	800d38c <pbuf_clen>
 80109b4:	4603      	mov	r3, r0
 80109b6:	827b      	strh	r3, [r7, #18]
    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_receive: queuelen %"TCPWNDSIZE_F" ... ",
                                 (tcpwnd_size_t)pcb->snd_queuelen));
    LWIP_ASSERT("pcb->snd_queuelen >= pbuf_clen(next->p)", (pcb->snd_queuelen >= clen));
 80109b8:	68fb      	ldr	r3, [r7, #12]
 80109ba:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80109be:	8a7a      	ldrh	r2, [r7, #18]
 80109c0:	429a      	cmp	r2, r3
 80109c2:	d906      	bls.n	80109d2 <tcp_free_acked_segments+0x42>
 80109c4:	4b2a      	ldr	r3, [pc, #168]	; (8010a70 <tcp_free_acked_segments+0xe0>)
 80109c6:	f240 4257 	movw	r2, #1111	; 0x457
 80109ca:	492a      	ldr	r1, [pc, #168]	; (8010a74 <tcp_free_acked_segments+0xe4>)
 80109cc:	482a      	ldr	r0, [pc, #168]	; (8010a78 <tcp_free_acked_segments+0xe8>)
 80109ce:	f006 fa0f 	bl	8016df0 <iprintf>

    pcb->snd_queuelen = (u16_t)(pcb->snd_queuelen - clen);
 80109d2:	68fb      	ldr	r3, [r7, #12]
 80109d4:	f8b3 2066 	ldrh.w	r2, [r3, #102]	; 0x66
 80109d8:	8a7b      	ldrh	r3, [r7, #18]
 80109da:	1ad3      	subs	r3, r2, r3
 80109dc:	b29a      	uxth	r2, r3
 80109de:	68fb      	ldr	r3, [r7, #12]
 80109e0:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
    recv_acked = (tcpwnd_size_t)(recv_acked + next->len);
 80109e4:	697b      	ldr	r3, [r7, #20]
 80109e6:	891a      	ldrh	r2, [r3, #8]
 80109e8:	4b24      	ldr	r3, [pc, #144]	; (8010a7c <tcp_free_acked_segments+0xec>)
 80109ea:	881b      	ldrh	r3, [r3, #0]
 80109ec:	4413      	add	r3, r2
 80109ee:	b29a      	uxth	r2, r3
 80109f0:	4b22      	ldr	r3, [pc, #136]	; (8010a7c <tcp_free_acked_segments+0xec>)
 80109f2:	801a      	strh	r2, [r3, #0]
    tcp_seg_free(next);
 80109f4:	6978      	ldr	r0, [r7, #20]
 80109f6:	f7fe f90c 	bl	800ec12 <tcp_seg_free>

    LWIP_DEBUGF(TCP_QLEN_DEBUG, ("%"TCPWNDSIZE_F" (after freeing %s)\n",
                                 (tcpwnd_size_t)pcb->snd_queuelen,
                                 dbg_list_name));
    if (pcb->snd_queuelen != 0) {
 80109fa:	68fb      	ldr	r3, [r7, #12]
 80109fc:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8010a00:	2b00      	cmp	r3, #0
 8010a02:	d00c      	beq.n	8010a1e <tcp_free_acked_segments+0x8e>
      LWIP_ASSERT("tcp_receive: valid queue length",
 8010a04:	68bb      	ldr	r3, [r7, #8]
 8010a06:	2b00      	cmp	r3, #0
 8010a08:	d109      	bne.n	8010a1e <tcp_free_acked_segments+0x8e>
 8010a0a:	683b      	ldr	r3, [r7, #0]
 8010a0c:	2b00      	cmp	r3, #0
 8010a0e:	d106      	bne.n	8010a1e <tcp_free_acked_segments+0x8e>
 8010a10:	4b17      	ldr	r3, [pc, #92]	; (8010a70 <tcp_free_acked_segments+0xe0>)
 8010a12:	f240 4261 	movw	r2, #1121	; 0x461
 8010a16:	491a      	ldr	r1, [pc, #104]	; (8010a80 <tcp_free_acked_segments+0xf0>)
 8010a18:	4817      	ldr	r0, [pc, #92]	; (8010a78 <tcp_free_acked_segments+0xe8>)
 8010a1a:	f006 f9e9 	bl	8016df0 <iprintf>
  while (seg_list != NULL &&
 8010a1e:	68bb      	ldr	r3, [r7, #8]
 8010a20:	2b00      	cmp	r3, #0
 8010a22:	d020      	beq.n	8010a66 <tcp_free_acked_segments+0xd6>
         TCP_SEQ_LEQ(lwip_ntohl(seg_list->tcphdr->seqno) +
 8010a24:	68bb      	ldr	r3, [r7, #8]
 8010a26:	68db      	ldr	r3, [r3, #12]
 8010a28:	685b      	ldr	r3, [r3, #4]
 8010a2a:	4618      	mov	r0, r3
 8010a2c:	f7fb f843 	bl	800bab6 <lwip_htonl>
 8010a30:	4604      	mov	r4, r0
 8010a32:	68bb      	ldr	r3, [r7, #8]
 8010a34:	891b      	ldrh	r3, [r3, #8]
 8010a36:	461d      	mov	r5, r3
 8010a38:	68bb      	ldr	r3, [r7, #8]
 8010a3a:	68db      	ldr	r3, [r3, #12]
 8010a3c:	899b      	ldrh	r3, [r3, #12]
 8010a3e:	b29b      	uxth	r3, r3
 8010a40:	4618      	mov	r0, r3
 8010a42:	f7fb f823 	bl	800ba8c <lwip_htons>
 8010a46:	4603      	mov	r3, r0
 8010a48:	b2db      	uxtb	r3, r3
 8010a4a:	f003 0303 	and.w	r3, r3, #3
 8010a4e:	2b00      	cmp	r3, #0
 8010a50:	d001      	beq.n	8010a56 <tcp_free_acked_segments+0xc6>
 8010a52:	2301      	movs	r3, #1
 8010a54:	e000      	b.n	8010a58 <tcp_free_acked_segments+0xc8>
 8010a56:	2300      	movs	r3, #0
 8010a58:	442b      	add	r3, r5
 8010a5a:	18e2      	adds	r2, r4, r3
 8010a5c:	4b09      	ldr	r3, [pc, #36]	; (8010a84 <tcp_free_acked_segments+0xf4>)
 8010a5e:	681b      	ldr	r3, [r3, #0]
 8010a60:	1ad3      	subs	r3, r2, r3
  while (seg_list != NULL &&
 8010a62:	2b00      	cmp	r3, #0
 8010a64:	dd9c      	ble.n	80109a0 <tcp_free_acked_segments+0x10>
                  seg_list != NULL || dbg_other_seg_list != NULL);
    }
  }
  return seg_list;
 8010a66:	68bb      	ldr	r3, [r7, #8]
}
 8010a68:	4618      	mov	r0, r3
 8010a6a:	3718      	adds	r7, #24
 8010a6c:	46bd      	mov	sp, r7
 8010a6e:	bdb0      	pop	{r4, r5, r7, pc}
 8010a70:	08019eb4 	.word	0x08019eb4
 8010a74:	0801a19c 	.word	0x0801a19c
 8010a78:	08019f00 	.word	0x08019f00
 8010a7c:	2000f834 	.word	0x2000f834
 8010a80:	0801a1c4 	.word	0x0801a1c4
 8010a84:	2000f830 	.word	0x2000f830

08010a88 <tcp_receive>:
 *
 * Called from tcp_process().
 */
static void
tcp_receive(struct tcp_pcb *pcb)
{
 8010a88:	b5b0      	push	{r4, r5, r7, lr}
 8010a8a:	b094      	sub	sp, #80	; 0x50
 8010a8c:	af00      	add	r7, sp, #0
 8010a8e:	6078      	str	r0, [r7, #4]
  s16_t m;
  u32_t right_wnd_edge;
  int found_dupack = 0;
 8010a90:	2300      	movs	r3, #0
 8010a92:	64bb      	str	r3, [r7, #72]	; 0x48

  LWIP_ASSERT("tcp_receive: invalid pcb", pcb != NULL);
 8010a94:	687b      	ldr	r3, [r7, #4]
 8010a96:	2b00      	cmp	r3, #0
 8010a98:	d106      	bne.n	8010aa8 <tcp_receive+0x20>
 8010a9a:	4b91      	ldr	r3, [pc, #580]	; (8010ce0 <tcp_receive+0x258>)
 8010a9c:	f240 427b 	movw	r2, #1147	; 0x47b
 8010aa0:	4990      	ldr	r1, [pc, #576]	; (8010ce4 <tcp_receive+0x25c>)
 8010aa2:	4891      	ldr	r0, [pc, #580]	; (8010ce8 <tcp_receive+0x260>)
 8010aa4:	f006 f9a4 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_receive: wrong state", pcb->state >= ESTABLISHED);
 8010aa8:	687b      	ldr	r3, [r7, #4]
 8010aaa:	7d1b      	ldrb	r3, [r3, #20]
 8010aac:	2b03      	cmp	r3, #3
 8010aae:	d806      	bhi.n	8010abe <tcp_receive+0x36>
 8010ab0:	4b8b      	ldr	r3, [pc, #556]	; (8010ce0 <tcp_receive+0x258>)
 8010ab2:	f240 427c 	movw	r2, #1148	; 0x47c
 8010ab6:	498d      	ldr	r1, [pc, #564]	; (8010cec <tcp_receive+0x264>)
 8010ab8:	488b      	ldr	r0, [pc, #556]	; (8010ce8 <tcp_receive+0x260>)
 8010aba:	f006 f999 	bl	8016df0 <iprintf>

  if (flags & TCP_ACK) {
 8010abe:	4b8c      	ldr	r3, [pc, #560]	; (8010cf0 <tcp_receive+0x268>)
 8010ac0:	781b      	ldrb	r3, [r3, #0]
 8010ac2:	f003 0310 	and.w	r3, r3, #16
 8010ac6:	2b00      	cmp	r3, #0
 8010ac8:	f000 8264 	beq.w	8010f94 <tcp_receive+0x50c>
    right_wnd_edge = pcb->snd_wnd + pcb->snd_wl2;
 8010acc:	687b      	ldr	r3, [r7, #4]
 8010ace:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010ad2:	461a      	mov	r2, r3
 8010ad4:	687b      	ldr	r3, [r7, #4]
 8010ad6:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010ad8:	4413      	add	r3, r2
 8010ada:	633b      	str	r3, [r7, #48]	; 0x30

    /* Update window. */
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010adc:	687b      	ldr	r3, [r7, #4]
 8010ade:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010ae0:	4b84      	ldr	r3, [pc, #528]	; (8010cf4 <tcp_receive+0x26c>)
 8010ae2:	681b      	ldr	r3, [r3, #0]
 8010ae4:	1ad3      	subs	r3, r2, r3
 8010ae6:	2b00      	cmp	r3, #0
 8010ae8:	db1b      	blt.n	8010b22 <tcp_receive+0x9a>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010aea:	687b      	ldr	r3, [r7, #4]
 8010aec:	6d5a      	ldr	r2, [r3, #84]	; 0x54
 8010aee:	4b81      	ldr	r3, [pc, #516]	; (8010cf4 <tcp_receive+0x26c>)
 8010af0:	681b      	ldr	r3, [r3, #0]
    if (TCP_SEQ_LT(pcb->snd_wl1, seqno) ||
 8010af2:	429a      	cmp	r2, r3
 8010af4:	d106      	bne.n	8010b04 <tcp_receive+0x7c>
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010af6:	687b      	ldr	r3, [r7, #4]
 8010af8:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010afa:	4b7f      	ldr	r3, [pc, #508]	; (8010cf8 <tcp_receive+0x270>)
 8010afc:	681b      	ldr	r3, [r3, #0]
 8010afe:	1ad3      	subs	r3, r2, r3
 8010b00:	2b00      	cmp	r3, #0
 8010b02:	db0e      	blt.n	8010b22 <tcp_receive+0x9a>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b04:	687b      	ldr	r3, [r7, #4]
 8010b06:	6d9a      	ldr	r2, [r3, #88]	; 0x58
 8010b08:	4b7b      	ldr	r3, [pc, #492]	; (8010cf8 <tcp_receive+0x270>)
 8010b0a:	681b      	ldr	r3, [r3, #0]
        (pcb->snd_wl1 == seqno && TCP_SEQ_LT(pcb->snd_wl2, ackno)) ||
 8010b0c:	429a      	cmp	r2, r3
 8010b0e:	d125      	bne.n	8010b5c <tcp_receive+0xd4>
        (pcb->snd_wl2 == ackno && (u32_t)SND_WND_SCALE(pcb, tcphdr->wnd) > pcb->snd_wnd)) {
 8010b10:	4b7a      	ldr	r3, [pc, #488]	; (8010cfc <tcp_receive+0x274>)
 8010b12:	681b      	ldr	r3, [r3, #0]
 8010b14:	89db      	ldrh	r3, [r3, #14]
 8010b16:	b29a      	uxth	r2, r3
 8010b18:	687b      	ldr	r3, [r7, #4]
 8010b1a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b1e:	429a      	cmp	r2, r3
 8010b20:	d91c      	bls.n	8010b5c <tcp_receive+0xd4>
      pcb->snd_wnd = SND_WND_SCALE(pcb, tcphdr->wnd);
 8010b22:	4b76      	ldr	r3, [pc, #472]	; (8010cfc <tcp_receive+0x274>)
 8010b24:	681b      	ldr	r3, [r3, #0]
 8010b26:	89db      	ldrh	r3, [r3, #14]
 8010b28:	b29a      	uxth	r2, r3
 8010b2a:	687b      	ldr	r3, [r7, #4]
 8010b2c:	f8a3 2060 	strh.w	r2, [r3, #96]	; 0x60
      /* keep track of the biggest window announced by the remote host to calculate
         the maximum segment size */
      if (pcb->snd_wnd_max < pcb->snd_wnd) {
 8010b30:	687b      	ldr	r3, [r7, #4]
 8010b32:	f8b3 2062 	ldrh.w	r2, [r3, #98]	; 0x62
 8010b36:	687b      	ldr	r3, [r7, #4]
 8010b38:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8010b3c:	429a      	cmp	r2, r3
 8010b3e:	d205      	bcs.n	8010b4c <tcp_receive+0xc4>
        pcb->snd_wnd_max = pcb->snd_wnd;
 8010b40:	687b      	ldr	r3, [r7, #4]
 8010b42:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 8010b46:	687b      	ldr	r3, [r7, #4]
 8010b48:	f8a3 2062 	strh.w	r2, [r3, #98]	; 0x62
      }
      pcb->snd_wl1 = seqno;
 8010b4c:	4b69      	ldr	r3, [pc, #420]	; (8010cf4 <tcp_receive+0x26c>)
 8010b4e:	681a      	ldr	r2, [r3, #0]
 8010b50:	687b      	ldr	r3, [r7, #4]
 8010b52:	655a      	str	r2, [r3, #84]	; 0x54
      pcb->snd_wl2 = ackno;
 8010b54:	4b68      	ldr	r3, [pc, #416]	; (8010cf8 <tcp_receive+0x270>)
 8010b56:	681a      	ldr	r2, [r3, #0]
 8010b58:	687b      	ldr	r3, [r7, #4]
 8010b5a:	659a      	str	r2, [r3, #88]	; 0x58
     * If it only passes 1, should reset dupack counter
     *
     */

    /* Clause 1 */
    if (TCP_SEQ_LEQ(ackno, pcb->lastack)) {
 8010b5c:	4b66      	ldr	r3, [pc, #408]	; (8010cf8 <tcp_receive+0x270>)
 8010b5e:	681a      	ldr	r2, [r3, #0]
 8010b60:	687b      	ldr	r3, [r7, #4]
 8010b62:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010b64:	1ad3      	subs	r3, r2, r3
 8010b66:	2b00      	cmp	r3, #0
 8010b68:	dc58      	bgt.n	8010c1c <tcp_receive+0x194>
      /* Clause 2 */
      if (tcplen == 0) {
 8010b6a:	4b65      	ldr	r3, [pc, #404]	; (8010d00 <tcp_receive+0x278>)
 8010b6c:	881b      	ldrh	r3, [r3, #0]
 8010b6e:	2b00      	cmp	r3, #0
 8010b70:	d14b      	bne.n	8010c0a <tcp_receive+0x182>
        /* Clause 3 */
        if (pcb->snd_wl2 + pcb->snd_wnd == right_wnd_edge) {
 8010b72:	687b      	ldr	r3, [r7, #4]
 8010b74:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8010b76:	687a      	ldr	r2, [r7, #4]
 8010b78:	f8b2 2060 	ldrh.w	r2, [r2, #96]	; 0x60
 8010b7c:	4413      	add	r3, r2
 8010b7e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8010b80:	429a      	cmp	r2, r3
 8010b82:	d142      	bne.n	8010c0a <tcp_receive+0x182>
          /* Clause 4 */
          if (pcb->rtime >= 0) {
 8010b84:	687b      	ldr	r3, [r7, #4]
 8010b86:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8010b8a:	2b00      	cmp	r3, #0
 8010b8c:	db3d      	blt.n	8010c0a <tcp_receive+0x182>
            /* Clause 5 */
            if (pcb->lastack == ackno) {
 8010b8e:	687b      	ldr	r3, [r7, #4]
 8010b90:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8010b92:	4b59      	ldr	r3, [pc, #356]	; (8010cf8 <tcp_receive+0x270>)
 8010b94:	681b      	ldr	r3, [r3, #0]
 8010b96:	429a      	cmp	r2, r3
 8010b98:	d137      	bne.n	8010c0a <tcp_receive+0x182>
              found_dupack = 1;
 8010b9a:	2301      	movs	r3, #1
 8010b9c:	64bb      	str	r3, [r7, #72]	; 0x48
              if ((u8_t)(pcb->dupacks + 1) > pcb->dupacks) {
 8010b9e:	687b      	ldr	r3, [r7, #4]
 8010ba0:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010ba4:	2bff      	cmp	r3, #255	; 0xff
 8010ba6:	d007      	beq.n	8010bb8 <tcp_receive+0x130>
                ++pcb->dupacks;
 8010ba8:	687b      	ldr	r3, [r7, #4]
 8010baa:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bae:	3301      	adds	r3, #1
 8010bb0:	b2da      	uxtb	r2, r3
 8010bb2:	687b      	ldr	r3, [r7, #4]
 8010bb4:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
              }
              if (pcb->dupacks > 3) {
 8010bb8:	687b      	ldr	r3, [r7, #4]
 8010bba:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010bbe:	2b03      	cmp	r3, #3
 8010bc0:	d91b      	bls.n	8010bfa <tcp_receive+0x172>
                /* Inflate the congestion window */
                TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010bc2:	687b      	ldr	r3, [r7, #4]
 8010bc4:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010bc8:	687b      	ldr	r3, [r7, #4]
 8010bca:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010bcc:	4413      	add	r3, r2
 8010bce:	b29a      	uxth	r2, r3
 8010bd0:	687b      	ldr	r3, [r7, #4]
 8010bd2:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010bd6:	429a      	cmp	r2, r3
 8010bd8:	d30a      	bcc.n	8010bf0 <tcp_receive+0x168>
 8010bda:	687b      	ldr	r3, [r7, #4]
 8010bdc:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010be0:	687b      	ldr	r3, [r7, #4]
 8010be2:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010be4:	4413      	add	r3, r2
 8010be6:	b29a      	uxth	r2, r3
 8010be8:	687b      	ldr	r3, [r7, #4]
 8010bea:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010bee:	e004      	b.n	8010bfa <tcp_receive+0x172>
 8010bf0:	687b      	ldr	r3, [r7, #4]
 8010bf2:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010bf6:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
              }
              if (pcb->dupacks >= 3) {
 8010bfa:	687b      	ldr	r3, [r7, #4]
 8010bfc:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8010c00:	2b02      	cmp	r3, #2
 8010c02:	d902      	bls.n	8010c0a <tcp_receive+0x182>
                /* Do fast retransmit (checked via TF_INFR, not via dupacks count) */
                tcp_rexmit_fast(pcb);
 8010c04:	6878      	ldr	r0, [r7, #4]
 8010c06:	f002 fb45 	bl	8013294 <tcp_rexmit_fast>
          }
        }
      }
      /* If Clause (1) or more is true, but not a duplicate ack, reset
       * count of consecutive duplicate acks */
      if (!found_dupack) {
 8010c0a:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 8010c0c:	2b00      	cmp	r3, #0
 8010c0e:	f040 8161 	bne.w	8010ed4 <tcp_receive+0x44c>
        pcb->dupacks = 0;
 8010c12:	687b      	ldr	r3, [r7, #4]
 8010c14:	2200      	movs	r2, #0
 8010c16:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8010c1a:	e15b      	b.n	8010ed4 <tcp_receive+0x44c>
      }
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010c1c:	4b36      	ldr	r3, [pc, #216]	; (8010cf8 <tcp_receive+0x270>)
 8010c1e:	681a      	ldr	r2, [r3, #0]
 8010c20:	687b      	ldr	r3, [r7, #4]
 8010c22:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c24:	1ad3      	subs	r3, r2, r3
 8010c26:	3b01      	subs	r3, #1
 8010c28:	2b00      	cmp	r3, #0
 8010c2a:	f2c0 814e 	blt.w	8010eca <tcp_receive+0x442>
 8010c2e:	4b32      	ldr	r3, [pc, #200]	; (8010cf8 <tcp_receive+0x270>)
 8010c30:	681a      	ldr	r2, [r3, #0]
 8010c32:	687b      	ldr	r3, [r7, #4]
 8010c34:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8010c36:	1ad3      	subs	r3, r2, r3
 8010c38:	2b00      	cmp	r3, #0
 8010c3a:	f300 8146 	bgt.w	8010eca <tcp_receive+0x442>
      tcpwnd_size_t acked;

      /* Reset the "IN Fast Retransmit" flag, since we are no longer
         in fast retransmit. Also reset the congestion window to the
         slow start threshold. */
      if (pcb->flags & TF_INFR) {
 8010c3e:	687b      	ldr	r3, [r7, #4]
 8010c40:	8b5b      	ldrh	r3, [r3, #26]
 8010c42:	f003 0304 	and.w	r3, r3, #4
 8010c46:	2b00      	cmp	r3, #0
 8010c48:	d010      	beq.n	8010c6c <tcp_receive+0x1e4>
        tcp_clear_flags(pcb, TF_INFR);
 8010c4a:	687b      	ldr	r3, [r7, #4]
 8010c4c:	8b5b      	ldrh	r3, [r3, #26]
 8010c4e:	f023 0304 	bic.w	r3, r3, #4
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	687b      	ldr	r3, [r7, #4]
 8010c56:	835a      	strh	r2, [r3, #26]
        pcb->cwnd = pcb->ssthresh;
 8010c58:	687b      	ldr	r3, [r7, #4]
 8010c5a:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8010c5e:	687b      	ldr	r3, [r7, #4]
 8010c60:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
        pcb->bytes_acked = 0;
 8010c64:	687b      	ldr	r3, [r7, #4]
 8010c66:	2200      	movs	r2, #0
 8010c68:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
      }

      /* Reset the number of retransmissions. */
      pcb->nrtx = 0;
 8010c6c:	687b      	ldr	r3, [r7, #4]
 8010c6e:	2200      	movs	r2, #0
 8010c70:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42

      /* Reset the retransmission time-out. */
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010c74:	687b      	ldr	r3, [r7, #4]
 8010c76:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010c7a:	10db      	asrs	r3, r3, #3
 8010c7c:	b21b      	sxth	r3, r3
 8010c7e:	b29a      	uxth	r2, r3
 8010c80:	687b      	ldr	r3, [r7, #4]
 8010c82:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010c86:	b29b      	uxth	r3, r3
 8010c88:	4413      	add	r3, r2
 8010c8a:	b29b      	uxth	r3, r3
 8010c8c:	b21a      	sxth	r2, r3
 8010c8e:	687b      	ldr	r3, [r7, #4]
 8010c90:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      /* Record how much data this ACK acks */
      acked = (tcpwnd_size_t)(ackno - pcb->lastack);
 8010c94:	4b18      	ldr	r3, [pc, #96]	; (8010cf8 <tcp_receive+0x270>)
 8010c96:	681b      	ldr	r3, [r3, #0]
 8010c98:	b29a      	uxth	r2, r3
 8010c9a:	687b      	ldr	r3, [r7, #4]
 8010c9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8010c9e:	b29b      	uxth	r3, r3
 8010ca0:	1ad3      	subs	r3, r2, r3
 8010ca2:	85fb      	strh	r3, [r7, #46]	; 0x2e

      /* Reset the fast retransmit variables. */
      pcb->dupacks = 0;
 8010ca4:	687b      	ldr	r3, [r7, #4]
 8010ca6:	2200      	movs	r2, #0
 8010ca8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
      pcb->lastack = ackno;
 8010cac:	4b12      	ldr	r3, [pc, #72]	; (8010cf8 <tcp_receive+0x270>)
 8010cae:	681a      	ldr	r2, [r3, #0]
 8010cb0:	687b      	ldr	r3, [r7, #4]
 8010cb2:	645a      	str	r2, [r3, #68]	; 0x44

      /* Update the congestion control variables (cwnd and
         ssthresh). */
      if (pcb->state >= ESTABLISHED) {
 8010cb4:	687b      	ldr	r3, [r7, #4]
 8010cb6:	7d1b      	ldrb	r3, [r3, #20]
 8010cb8:	2b03      	cmp	r3, #3
 8010cba:	f240 8097 	bls.w	8010dec <tcp_receive+0x364>
        if (pcb->cwnd < pcb->ssthresh) {
 8010cbe:	687b      	ldr	r3, [r7, #4]
 8010cc0:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010cc4:	687b      	ldr	r3, [r7, #4]
 8010cc6:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 8010cca:	429a      	cmp	r2, r3
 8010ccc:	d245      	bcs.n	8010d5a <tcp_receive+0x2d2>
          tcpwnd_size_t increase;
          /* limit to 1 SMSS segment during period following RTO */
          u8_t num_seg = (pcb->flags & TF_RTO) ? 1 : 2;
 8010cce:	687b      	ldr	r3, [r7, #4]
 8010cd0:	8b5b      	ldrh	r3, [r3, #26]
 8010cd2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010cd6:	2b00      	cmp	r3, #0
 8010cd8:	d014      	beq.n	8010d04 <tcp_receive+0x27c>
 8010cda:	2301      	movs	r3, #1
 8010cdc:	e013      	b.n	8010d06 <tcp_receive+0x27e>
 8010cde:	bf00      	nop
 8010ce0:	08019eb4 	.word	0x08019eb4
 8010ce4:	0801a1e4 	.word	0x0801a1e4
 8010ce8:	08019f00 	.word	0x08019f00
 8010cec:	0801a200 	.word	0x0801a200
 8010cf0:	2000f838 	.word	0x2000f838
 8010cf4:	2000f82c 	.word	0x2000f82c
 8010cf8:	2000f830 	.word	0x2000f830
 8010cfc:	2000f81c 	.word	0x2000f81c
 8010d00:	2000f836 	.word	0x2000f836
 8010d04:	2302      	movs	r3, #2
 8010d06:	f887 302d 	strb.w	r3, [r7, #45]	; 0x2d
          /* RFC 3465, section 2.2 Slow Start */
          increase = LWIP_MIN(acked, (tcpwnd_size_t)(num_seg * pcb->mss));
 8010d0a:	f897 302d 	ldrb.w	r3, [r7, #45]	; 0x2d
 8010d0e:	b29a      	uxth	r2, r3
 8010d10:	687b      	ldr	r3, [r7, #4]
 8010d12:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010d14:	fb12 f303 	smulbb	r3, r2, r3
 8010d18:	b29b      	uxth	r3, r3
 8010d1a:	8dfa      	ldrh	r2, [r7, #46]	; 0x2e
 8010d1c:	4293      	cmp	r3, r2
 8010d1e:	bf28      	it	cs
 8010d20:	4613      	movcs	r3, r2
 8010d22:	857b      	strh	r3, [r7, #42]	; 0x2a
          TCP_WND_INC(pcb->cwnd, increase);
 8010d24:	687b      	ldr	r3, [r7, #4]
 8010d26:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d2a:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d2c:	4413      	add	r3, r2
 8010d2e:	b29a      	uxth	r2, r3
 8010d30:	687b      	ldr	r3, [r7, #4]
 8010d32:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d36:	429a      	cmp	r2, r3
 8010d38:	d309      	bcc.n	8010d4e <tcp_receive+0x2c6>
 8010d3a:	687b      	ldr	r3, [r7, #4]
 8010d3c:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010d40:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8010d42:	4413      	add	r3, r2
 8010d44:	b29a      	uxth	r2, r3
 8010d46:	687b      	ldr	r3, [r7, #4]
 8010d48:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d4c:	e04e      	b.n	8010dec <tcp_receive+0x364>
 8010d4e:	687b      	ldr	r3, [r7, #4]
 8010d50:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d54:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010d58:	e048      	b.n	8010dec <tcp_receive+0x364>
          LWIP_DEBUGF(TCP_CWND_DEBUG, ("tcp_receive: slow start cwnd %"TCPWNDSIZE_F"\n", pcb->cwnd));
        } else {
          /* RFC 3465, section 2.1 Congestion Avoidance */
          TCP_WND_INC(pcb->bytes_acked, acked);
 8010d5a:	687b      	ldr	r3, [r7, #4]
 8010d5c:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d60:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d62:	4413      	add	r3, r2
 8010d64:	b29a      	uxth	r2, r3
 8010d66:	687b      	ldr	r3, [r7, #4]
 8010d68:	f8b3 306a 	ldrh.w	r3, [r3, #106]	; 0x6a
 8010d6c:	429a      	cmp	r2, r3
 8010d6e:	d309      	bcc.n	8010d84 <tcp_receive+0x2fc>
 8010d70:	687b      	ldr	r3, [r7, #4]
 8010d72:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d76:	8dfb      	ldrh	r3, [r7, #46]	; 0x2e
 8010d78:	4413      	add	r3, r2
 8010d7a:	b29a      	uxth	r2, r3
 8010d7c:	687b      	ldr	r3, [r7, #4]
 8010d7e:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
 8010d82:	e004      	b.n	8010d8e <tcp_receive+0x306>
 8010d84:	687b      	ldr	r3, [r7, #4]
 8010d86:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010d8a:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
          if (pcb->bytes_acked >= pcb->cwnd) {
 8010d8e:	687b      	ldr	r3, [r7, #4]
 8010d90:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010d94:	687b      	ldr	r3, [r7, #4]
 8010d96:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010d9a:	429a      	cmp	r2, r3
 8010d9c:	d326      	bcc.n	8010dec <tcp_receive+0x364>
            pcb->bytes_acked = (tcpwnd_size_t)(pcb->bytes_acked - pcb->cwnd);
 8010d9e:	687b      	ldr	r3, [r7, #4]
 8010da0:	f8b3 206a 	ldrh.w	r2, [r3, #106]	; 0x6a
 8010da4:	687b      	ldr	r3, [r7, #4]
 8010da6:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010daa:	1ad3      	subs	r3, r2, r3
 8010dac:	b29a      	uxth	r2, r3
 8010dae:	687b      	ldr	r3, [r7, #4]
 8010db0:	f8a3 206a 	strh.w	r2, [r3, #106]	; 0x6a
            TCP_WND_INC(pcb->cwnd, pcb->mss);
 8010db4:	687b      	ldr	r3, [r7, #4]
 8010db6:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dba:	687b      	ldr	r3, [r7, #4]
 8010dbc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dbe:	4413      	add	r3, r2
 8010dc0:	b29a      	uxth	r2, r3
 8010dc2:	687b      	ldr	r3, [r7, #4]
 8010dc4:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 8010dc8:	429a      	cmp	r2, r3
 8010dca:	d30a      	bcc.n	8010de2 <tcp_receive+0x35a>
 8010dcc:	687b      	ldr	r3, [r7, #4]
 8010dce:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8010dd2:	687b      	ldr	r3, [r7, #4]
 8010dd4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8010dd6:	4413      	add	r3, r2
 8010dd8:	b29a      	uxth	r2, r3
 8010dda:	687b      	ldr	r3, [r7, #4]
 8010ddc:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
 8010de0:	e004      	b.n	8010dec <tcp_receive+0x364>
 8010de2:	687b      	ldr	r3, [r7, #4]
 8010de4:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010de8:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
                                    pcb->unacked != NULL ?
                                    lwip_ntohl(pcb->unacked->tcphdr->seqno) + TCP_TCPLEN(pcb->unacked) : 0));

      /* Remove segment from the unacknowledged list if the incoming
         ACK acknowledges them. */
      pcb->unacked = tcp_free_acked_segments(pcb, pcb->unacked, "unacked", pcb->unsent);
 8010dec:	687b      	ldr	r3, [r7, #4]
 8010dee:	6f19      	ldr	r1, [r3, #112]	; 0x70
 8010df0:	687b      	ldr	r3, [r7, #4]
 8010df2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010df4:	4a98      	ldr	r2, [pc, #608]	; (8011058 <tcp_receive+0x5d0>)
 8010df6:	6878      	ldr	r0, [r7, #4]
 8010df8:	f7ff fdca 	bl	8010990 <tcp_free_acked_segments>
 8010dfc:	4602      	mov	r2, r0
 8010dfe:	687b      	ldr	r3, [r7, #4]
 8010e00:	671a      	str	r2, [r3, #112]	; 0x70
         on the list are acknowledged by the ACK. This may seem
         strange since an "unsent" segment shouldn't be acked. The
         rationale is that lwIP puts all outstanding segments on the
         ->unsent list after a retransmission, so these segments may
         in fact have been sent once. */
      pcb->unsent = tcp_free_acked_segments(pcb, pcb->unsent, "unsent", pcb->unacked);
 8010e02:	687b      	ldr	r3, [r7, #4]
 8010e04:	6ed9      	ldr	r1, [r3, #108]	; 0x6c
 8010e06:	687b      	ldr	r3, [r7, #4]
 8010e08:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e0a:	4a94      	ldr	r2, [pc, #592]	; (801105c <tcp_receive+0x5d4>)
 8010e0c:	6878      	ldr	r0, [r7, #4]
 8010e0e:	f7ff fdbf 	bl	8010990 <tcp_free_acked_segments>
 8010e12:	4602      	mov	r2, r0
 8010e14:	687b      	ldr	r3, [r7, #4]
 8010e16:	66da      	str	r2, [r3, #108]	; 0x6c

      /* If there's nothing left to acknowledge, stop the retransmit
         timer, otherwise reset it to start again */
      if (pcb->unacked == NULL) {
 8010e18:	687b      	ldr	r3, [r7, #4]
 8010e1a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e1c:	2b00      	cmp	r3, #0
 8010e1e:	d104      	bne.n	8010e2a <tcp_receive+0x3a2>
        pcb->rtime = -1;
 8010e20:	687b      	ldr	r3, [r7, #4]
 8010e22:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8010e26:	861a      	strh	r2, [r3, #48]	; 0x30
 8010e28:	e002      	b.n	8010e30 <tcp_receive+0x3a8>
      } else {
        pcb->rtime = 0;
 8010e2a:	687b      	ldr	r3, [r7, #4]
 8010e2c:	2200      	movs	r2, #0
 8010e2e:	861a      	strh	r2, [r3, #48]	; 0x30
      }

      pcb->polltmr = 0;
 8010e30:	687b      	ldr	r3, [r7, #4]
 8010e32:	2200      	movs	r2, #0
 8010e34:	771a      	strb	r2, [r3, #28]

#if TCP_OVERSIZE
      if (pcb->unsent == NULL) {
 8010e36:	687b      	ldr	r3, [r7, #4]
 8010e38:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e3a:	2b00      	cmp	r3, #0
 8010e3c:	d103      	bne.n	8010e46 <tcp_receive+0x3be>
        pcb->unsent_oversize = 0;
 8010e3e:	687b      	ldr	r3, [r7, #4]
 8010e40:	2200      	movs	r2, #0
 8010e42:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
        /* Inform neighbor reachability of forward progress. */
        nd6_reachability_hint(ip6_current_src_addr());
      }
#endif /* LWIP_IPV6 && LWIP_ND6_TCP_REACHABILITY_HINTS*/

      pcb->snd_buf = (tcpwnd_size_t)(pcb->snd_buf + recv_acked);
 8010e46:	687b      	ldr	r3, [r7, #4]
 8010e48:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8010e4c:	4b84      	ldr	r3, [pc, #528]	; (8011060 <tcp_receive+0x5d8>)
 8010e4e:	881b      	ldrh	r3, [r3, #0]
 8010e50:	4413      	add	r3, r2
 8010e52:	b29a      	uxth	r2, r3
 8010e54:	687b      	ldr	r3, [r7, #4]
 8010e56:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
      /* check if this ACK ends our retransmission of in-flight data */
      if (pcb->flags & TF_RTO) {
 8010e5a:	687b      	ldr	r3, [r7, #4]
 8010e5c:	8b5b      	ldrh	r3, [r3, #26]
 8010e5e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8010e62:	2b00      	cmp	r3, #0
 8010e64:	d035      	beq.n	8010ed2 <tcp_receive+0x44a>
        /* RTO is done if
            1) both queues are empty or
            2) unacked is empty and unsent head contains data not part of RTO or
            3) unacked head contains data not part of RTO */
        if (pcb->unacked == NULL) {
 8010e66:	687b      	ldr	r3, [r7, #4]
 8010e68:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010e6a:	2b00      	cmp	r3, #0
 8010e6c:	d118      	bne.n	8010ea0 <tcp_receive+0x418>
          if ((pcb->unsent == NULL) ||
 8010e6e:	687b      	ldr	r3, [r7, #4]
 8010e70:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e72:	2b00      	cmp	r3, #0
 8010e74:	d00c      	beq.n	8010e90 <tcp_receive+0x408>
              (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unsent->tcphdr->seqno)))) {
 8010e76:	687b      	ldr	r3, [r7, #4]
 8010e78:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010e7a:	687b      	ldr	r3, [r7, #4]
 8010e7c:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8010e7e:	68db      	ldr	r3, [r3, #12]
 8010e80:	685b      	ldr	r3, [r3, #4]
 8010e82:	4618      	mov	r0, r3
 8010e84:	f7fa fe17 	bl	800bab6 <lwip_htonl>
 8010e88:	4603      	mov	r3, r0
 8010e8a:	1ae3      	subs	r3, r4, r3
          if ((pcb->unsent == NULL) ||
 8010e8c:	2b00      	cmp	r3, #0
 8010e8e:	dc20      	bgt.n	8010ed2 <tcp_receive+0x44a>
            tcp_clear_flags(pcb, TF_RTO);
 8010e90:	687b      	ldr	r3, [r7, #4]
 8010e92:	8b5b      	ldrh	r3, [r3, #26]
 8010e94:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010e98:	b29a      	uxth	r2, r3
 8010e9a:	687b      	ldr	r3, [r7, #4]
 8010e9c:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010e9e:	e018      	b.n	8010ed2 <tcp_receive+0x44a>
          }
        } else if (TCP_SEQ_LEQ(pcb->rto_end, lwip_ntohl(pcb->unacked->tcphdr->seqno))) {
 8010ea0:	687b      	ldr	r3, [r7, #4]
 8010ea2:	6cdc      	ldr	r4, [r3, #76]	; 0x4c
 8010ea4:	687b      	ldr	r3, [r7, #4]
 8010ea6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8010ea8:	68db      	ldr	r3, [r3, #12]
 8010eaa:	685b      	ldr	r3, [r3, #4]
 8010eac:	4618      	mov	r0, r3
 8010eae:	f7fa fe02 	bl	800bab6 <lwip_htonl>
 8010eb2:	4603      	mov	r3, r0
 8010eb4:	1ae3      	subs	r3, r4, r3
 8010eb6:	2b00      	cmp	r3, #0
 8010eb8:	dc0b      	bgt.n	8010ed2 <tcp_receive+0x44a>
          tcp_clear_flags(pcb, TF_RTO);
 8010eba:	687b      	ldr	r3, [r7, #4]
 8010ebc:	8b5b      	ldrh	r3, [r3, #26]
 8010ebe:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	687b      	ldr	r3, [r7, #4]
 8010ec6:	835a      	strh	r2, [r3, #26]
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ec8:	e003      	b.n	8010ed2 <tcp_receive+0x44a>
        }
      }
      /* End of ACK for new data processing. */
    } else {
      /* Out of sequence ACK, didn't really ack anything */
      tcp_send_empty_ack(pcb);
 8010eca:	6878      	ldr	r0, [r7, #4]
 8010ecc:	f002 fbce 	bl	801366c <tcp_send_empty_ack>
 8010ed0:	e000      	b.n	8010ed4 <tcp_receive+0x44c>
    } else if (TCP_SEQ_BETWEEN(ackno, pcb->lastack + 1, pcb->snd_nxt)) {
 8010ed2:	bf00      	nop
                                pcb->rttest, pcb->rtseq, ackno));

    /* RTT estimation calculations. This is done by checking if the
       incoming segment acknowledges the segment we use to take a
       round-trip time measurement. */
    if (pcb->rttest && TCP_SEQ_LT(pcb->rtseq, ackno)) {
 8010ed4:	687b      	ldr	r3, [r7, #4]
 8010ed6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ed8:	2b00      	cmp	r3, #0
 8010eda:	d05b      	beq.n	8010f94 <tcp_receive+0x50c>
 8010edc:	687b      	ldr	r3, [r7, #4]
 8010ede:	6b9a      	ldr	r2, [r3, #56]	; 0x38
 8010ee0:	4b60      	ldr	r3, [pc, #384]	; (8011064 <tcp_receive+0x5dc>)
 8010ee2:	681b      	ldr	r3, [r3, #0]
 8010ee4:	1ad3      	subs	r3, r2, r3
 8010ee6:	2b00      	cmp	r3, #0
 8010ee8:	da54      	bge.n	8010f94 <tcp_receive+0x50c>
      /* diff between this shouldn't exceed 32K since this are tcp timer ticks
         and a round-trip shouldn't be that long... */
      m = (s16_t)(tcp_ticks - pcb->rttest);
 8010eea:	4b5f      	ldr	r3, [pc, #380]	; (8011068 <tcp_receive+0x5e0>)
 8010eec:	681b      	ldr	r3, [r3, #0]
 8010eee:	b29a      	uxth	r2, r3
 8010ef0:	687b      	ldr	r3, [r7, #4]
 8010ef2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8010ef4:	b29b      	uxth	r3, r3
 8010ef6:	1ad3      	subs	r3, r2, r3
 8010ef8:	b29b      	uxth	r3, r3
 8010efa:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: experienced rtt %"U16_F" ticks (%"U16_F" msec).\n",
                                  m, (u16_t)(m * TCP_SLOW_INTERVAL)));

      /* This is taken directly from VJs original code in his paper */
      m = (s16_t)(m - (pcb->sa >> 3));
 8010efe:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f02:	687b      	ldr	r3, [r7, #4]
 8010f04:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f08:	10db      	asrs	r3, r3, #3
 8010f0a:	b21b      	sxth	r3, r3
 8010f0c:	b29b      	uxth	r3, r3
 8010f0e:	1ad3      	subs	r3, r2, r3
 8010f10:	b29b      	uxth	r3, r3
 8010f12:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sa = (s16_t)(pcb->sa + m);
 8010f16:	687b      	ldr	r3, [r7, #4]
 8010f18:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f1c:	b29a      	uxth	r2, r3
 8010f1e:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f22:	4413      	add	r3, r2
 8010f24:	b29b      	uxth	r3, r3
 8010f26:	b21a      	sxth	r2, r3
 8010f28:	687b      	ldr	r3, [r7, #4]
 8010f2a:	879a      	strh	r2, [r3, #60]	; 0x3c
      if (m < 0) {
 8010f2c:	f9b7 304e 	ldrsh.w	r3, [r7, #78]	; 0x4e
 8010f30:	2b00      	cmp	r3, #0
 8010f32:	da05      	bge.n	8010f40 <tcp_receive+0x4b8>
        m = (s16_t) - m;
 8010f34:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f38:	425b      	negs	r3, r3
 8010f3a:	b29b      	uxth	r3, r3
 8010f3c:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      }
      m = (s16_t)(m - (pcb->sv >> 2));
 8010f40:	f8b7 204e 	ldrh.w	r2, [r7, #78]	; 0x4e
 8010f44:	687b      	ldr	r3, [r7, #4]
 8010f46:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f4a:	109b      	asrs	r3, r3, #2
 8010f4c:	b21b      	sxth	r3, r3
 8010f4e:	b29b      	uxth	r3, r3
 8010f50:	1ad3      	subs	r3, r2, r3
 8010f52:	b29b      	uxth	r3, r3
 8010f54:	f8a7 304e 	strh.w	r3, [r7, #78]	; 0x4e
      pcb->sv = (s16_t)(pcb->sv + m);
 8010f58:	687b      	ldr	r3, [r7, #4]
 8010f5a:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f5e:	b29a      	uxth	r2, r3
 8010f60:	f8b7 304e 	ldrh.w	r3, [r7, #78]	; 0x4e
 8010f64:	4413      	add	r3, r2
 8010f66:	b29b      	uxth	r3, r3
 8010f68:	b21a      	sxth	r2, r3
 8010f6a:	687b      	ldr	r3, [r7, #4]
 8010f6c:	87da      	strh	r2, [r3, #62]	; 0x3e
      pcb->rto = (s16_t)((pcb->sa >> 3) + pcb->sv);
 8010f6e:	687b      	ldr	r3, [r7, #4]
 8010f70:	f9b3 303c 	ldrsh.w	r3, [r3, #60]	; 0x3c
 8010f74:	10db      	asrs	r3, r3, #3
 8010f76:	b21b      	sxth	r3, r3
 8010f78:	b29a      	uxth	r2, r3
 8010f7a:	687b      	ldr	r3, [r7, #4]
 8010f7c:	f9b3 303e 	ldrsh.w	r3, [r3, #62]	; 0x3e
 8010f80:	b29b      	uxth	r3, r3
 8010f82:	4413      	add	r3, r2
 8010f84:	b29b      	uxth	r3, r3
 8010f86:	b21a      	sxth	r2, r3
 8010f88:	687b      	ldr	r3, [r7, #4]
 8010f8a:	f8a3 2040 	strh.w	r2, [r3, #64]	; 0x40

      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_receive: RTO %"U16_F" (%"U16_F" milliseconds)\n",
                                  pcb->rto, (u16_t)(pcb->rto * TCP_SLOW_INTERVAL)));

      pcb->rttest = 0;
 8010f8e:	687b      	ldr	r3, [r7, #4]
 8010f90:	2200      	movs	r2, #0
 8010f92:	635a      	str	r2, [r3, #52]	; 0x34

  /* If the incoming segment contains data, we must process it
     further unless the pcb already received a FIN.
     (RFC 793, chapter 3.9, "SEGMENT ARRIVES" in states CLOSE-WAIT, CLOSING,
     LAST-ACK and TIME-WAIT: "Ignore the segment text.") */
  if ((tcplen > 0) && (pcb->state < CLOSE_WAIT)) {
 8010f94:	4b35      	ldr	r3, [pc, #212]	; (801106c <tcp_receive+0x5e4>)
 8010f96:	881b      	ldrh	r3, [r3, #0]
 8010f98:	2b00      	cmp	r3, #0
 8010f9a:	f000 84e2 	beq.w	8011962 <tcp_receive+0xeda>
 8010f9e:	687b      	ldr	r3, [r7, #4]
 8010fa0:	7d1b      	ldrb	r3, [r3, #20]
 8010fa2:	2b06      	cmp	r3, #6
 8010fa4:	f200 84dd 	bhi.w	8011962 <tcp_receive+0xeda>
       this if the sequence number of the incoming segment is less
       than rcv_nxt, and the sequence number plus the length of the
       segment is larger than rcv_nxt. */
    /*    if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
          if (TCP_SEQ_LT(pcb->rcv_nxt, seqno + tcplen)) {*/
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 8010fa8:	687b      	ldr	r3, [r7, #4]
 8010faa:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fac:	4b30      	ldr	r3, [pc, #192]	; (8011070 <tcp_receive+0x5e8>)
 8010fae:	681b      	ldr	r3, [r3, #0]
 8010fb0:	1ad3      	subs	r3, r2, r3
 8010fb2:	3b01      	subs	r3, #1
 8010fb4:	2b00      	cmp	r3, #0
 8010fb6:	f2c0 808f 	blt.w	80110d8 <tcp_receive+0x650>
 8010fba:	687b      	ldr	r3, [r7, #4]
 8010fbc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fbe:	4b2b      	ldr	r3, [pc, #172]	; (801106c <tcp_receive+0x5e4>)
 8010fc0:	881b      	ldrh	r3, [r3, #0]
 8010fc2:	4619      	mov	r1, r3
 8010fc4:	4b2a      	ldr	r3, [pc, #168]	; (8011070 <tcp_receive+0x5e8>)
 8010fc6:	681b      	ldr	r3, [r3, #0]
 8010fc8:	440b      	add	r3, r1
 8010fca:	1ad3      	subs	r3, r2, r3
 8010fcc:	3301      	adds	r3, #1
 8010fce:	2b00      	cmp	r3, #0
 8010fd0:	f300 8082 	bgt.w	80110d8 <tcp_receive+0x650>

         After we are done with adjusting the pbuf pointers we must
         adjust the ->data pointer in the seg and the segment
         length.*/

      struct pbuf *p = inseg.p;
 8010fd4:	4b27      	ldr	r3, [pc, #156]	; (8011074 <tcp_receive+0x5ec>)
 8010fd6:	685b      	ldr	r3, [r3, #4]
 8010fd8:	647b      	str	r3, [r7, #68]	; 0x44
      u32_t off32 = pcb->rcv_nxt - seqno;
 8010fda:	687b      	ldr	r3, [r7, #4]
 8010fdc:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8010fde:	4b24      	ldr	r3, [pc, #144]	; (8011070 <tcp_receive+0x5e8>)
 8010fe0:	681b      	ldr	r3, [r3, #0]
 8010fe2:	1ad3      	subs	r3, r2, r3
 8010fe4:	627b      	str	r3, [r7, #36]	; 0x24
      u16_t new_tot_len, off;
      LWIP_ASSERT("inseg.p != NULL", inseg.p);
 8010fe6:	4b23      	ldr	r3, [pc, #140]	; (8011074 <tcp_receive+0x5ec>)
 8010fe8:	685b      	ldr	r3, [r3, #4]
 8010fea:	2b00      	cmp	r3, #0
 8010fec:	d106      	bne.n	8010ffc <tcp_receive+0x574>
 8010fee:	4b22      	ldr	r3, [pc, #136]	; (8011078 <tcp_receive+0x5f0>)
 8010ff0:	f240 5294 	movw	r2, #1428	; 0x594
 8010ff4:	4921      	ldr	r1, [pc, #132]	; (801107c <tcp_receive+0x5f4>)
 8010ff6:	4822      	ldr	r0, [pc, #136]	; (8011080 <tcp_receive+0x5f8>)
 8010ff8:	f005 fefa 	bl	8016df0 <iprintf>
      LWIP_ASSERT("insane offset!", (off32 < 0xffff));
 8010ffc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8010ffe:	f64f 72fe 	movw	r2, #65534	; 0xfffe
 8011002:	4293      	cmp	r3, r2
 8011004:	d906      	bls.n	8011014 <tcp_receive+0x58c>
 8011006:	4b1c      	ldr	r3, [pc, #112]	; (8011078 <tcp_receive+0x5f0>)
 8011008:	f240 5295 	movw	r2, #1429	; 0x595
 801100c:	491d      	ldr	r1, [pc, #116]	; (8011084 <tcp_receive+0x5fc>)
 801100e:	481c      	ldr	r0, [pc, #112]	; (8011080 <tcp_receive+0x5f8>)
 8011010:	f005 feee 	bl	8016df0 <iprintf>
      off = (u16_t)off32;
 8011014:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8011016:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      LWIP_ASSERT("pbuf too short!", (((s32_t)inseg.p->tot_len) >= off));
 801101a:	4b16      	ldr	r3, [pc, #88]	; (8011074 <tcp_receive+0x5ec>)
 801101c:	685b      	ldr	r3, [r3, #4]
 801101e:	891b      	ldrh	r3, [r3, #8]
 8011020:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011024:	429a      	cmp	r2, r3
 8011026:	d906      	bls.n	8011036 <tcp_receive+0x5ae>
 8011028:	4b13      	ldr	r3, [pc, #76]	; (8011078 <tcp_receive+0x5f0>)
 801102a:	f240 5297 	movw	r2, #1431	; 0x597
 801102e:	4916      	ldr	r1, [pc, #88]	; (8011088 <tcp_receive+0x600>)
 8011030:	4813      	ldr	r0, [pc, #76]	; (8011080 <tcp_receive+0x5f8>)
 8011032:	f005 fedd 	bl	8016df0 <iprintf>
      inseg.len -= off;
 8011036:	4b0f      	ldr	r3, [pc, #60]	; (8011074 <tcp_receive+0x5ec>)
 8011038:	891a      	ldrh	r2, [r3, #8]
 801103a:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 801103e:	1ad3      	subs	r3, r2, r3
 8011040:	b29a      	uxth	r2, r3
 8011042:	4b0c      	ldr	r3, [pc, #48]	; (8011074 <tcp_receive+0x5ec>)
 8011044:	811a      	strh	r2, [r3, #8]
      new_tot_len = (u16_t)(inseg.p->tot_len - off);
 8011046:	4b0b      	ldr	r3, [pc, #44]	; (8011074 <tcp_receive+0x5ec>)
 8011048:	685b      	ldr	r3, [r3, #4]
 801104a:	891a      	ldrh	r2, [r3, #8]
 801104c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8011050:	1ad3      	subs	r3, r2, r3
 8011052:	847b      	strh	r3, [r7, #34]	; 0x22
      while (p->len < off) {
 8011054:	e02a      	b.n	80110ac <tcp_receive+0x624>
 8011056:	bf00      	nop
 8011058:	0801a21c 	.word	0x0801a21c
 801105c:	0801a224 	.word	0x0801a224
 8011060:	2000f834 	.word	0x2000f834
 8011064:	2000f830 	.word	0x2000f830
 8011068:	2000f7f4 	.word	0x2000f7f4
 801106c:	2000f836 	.word	0x2000f836
 8011070:	2000f82c 	.word	0x2000f82c
 8011074:	2000f80c 	.word	0x2000f80c
 8011078:	08019eb4 	.word	0x08019eb4
 801107c:	0801a22c 	.word	0x0801a22c
 8011080:	08019f00 	.word	0x08019f00
 8011084:	0801a23c 	.word	0x0801a23c
 8011088:	0801a24c 	.word	0x0801a24c
        off -= p->len;
 801108c:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801108e:	895b      	ldrh	r3, [r3, #10]
 8011090:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011094:	1ad3      	subs	r3, r2, r3
 8011096:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
        /* all pbufs up to and including this one have len==0, so tot_len is equal */
        p->tot_len = new_tot_len;
 801109a:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 801109c:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 801109e:	811a      	strh	r2, [r3, #8]
        p->len = 0;
 80110a0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a2:	2200      	movs	r2, #0
 80110a4:	815a      	strh	r2, [r3, #10]
        p = p->next;
 80110a6:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	647b      	str	r3, [r7, #68]	; 0x44
      while (p->len < off) {
 80110ac:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80110ae:	895b      	ldrh	r3, [r3, #10]
 80110b0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80110b4:	429a      	cmp	r2, r3
 80110b6:	d8e9      	bhi.n	801108c <tcp_receive+0x604>
      }
      /* cannot fail... */
      pbuf_remove_header(p, off);
 80110b8:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80110bc:	4619      	mov	r1, r3
 80110be:	6c78      	ldr	r0, [r7, #68]	; 0x44
 80110c0:	f7fc f850 	bl	800d164 <pbuf_remove_header>
      inseg.tcphdr->seqno = seqno = pcb->rcv_nxt;
 80110c4:	687b      	ldr	r3, [r7, #4]
 80110c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110c8:	4a91      	ldr	r2, [pc, #580]	; (8011310 <tcp_receive+0x888>)
 80110ca:	6013      	str	r3, [r2, #0]
 80110cc:	4b91      	ldr	r3, [pc, #580]	; (8011314 <tcp_receive+0x88c>)
 80110ce:	68db      	ldr	r3, [r3, #12]
 80110d0:	4a8f      	ldr	r2, [pc, #572]	; (8011310 <tcp_receive+0x888>)
 80110d2:	6812      	ldr	r2, [r2, #0]
 80110d4:	605a      	str	r2, [r3, #4]
    if (TCP_SEQ_BETWEEN(pcb->rcv_nxt, seqno + 1, seqno + tcplen - 1)) {
 80110d6:	e00d      	b.n	80110f4 <tcp_receive+0x66c>
    } else {
      if (TCP_SEQ_LT(seqno, pcb->rcv_nxt)) {
 80110d8:	4b8d      	ldr	r3, [pc, #564]	; (8011310 <tcp_receive+0x888>)
 80110da:	681a      	ldr	r2, [r3, #0]
 80110dc:	687b      	ldr	r3, [r7, #4]
 80110de:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110e0:	1ad3      	subs	r3, r2, r3
 80110e2:	2b00      	cmp	r3, #0
 80110e4:	da06      	bge.n	80110f4 <tcp_receive+0x66c>
        /* the whole segment is < rcv_nxt */
        /* must be a duplicate of a packet that has already been correctly handled */

        LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: duplicate seqno %"U32_F"\n", seqno));
        tcp_ack_now(pcb);
 80110e6:	687b      	ldr	r3, [r7, #4]
 80110e8:	8b5b      	ldrh	r3, [r3, #26]
 80110ea:	f043 0302 	orr.w	r3, r3, #2
 80110ee:	b29a      	uxth	r2, r3
 80110f0:	687b      	ldr	r3, [r7, #4]
 80110f2:	835a      	strh	r2, [r3, #26]
    }

    /* The sequence number must be within the window (above rcv_nxt
       and below rcv_nxt + rcv_wnd) in order to be further
       processed. */
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 80110f4:	4b86      	ldr	r3, [pc, #536]	; (8011310 <tcp_receive+0x888>)
 80110f6:	681a      	ldr	r2, [r3, #0]
 80110f8:	687b      	ldr	r3, [r7, #4]
 80110fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80110fc:	1ad3      	subs	r3, r2, r3
 80110fe:	2b00      	cmp	r3, #0
 8011100:	f2c0 842a 	blt.w	8011958 <tcp_receive+0xed0>
 8011104:	4b82      	ldr	r3, [pc, #520]	; (8011310 <tcp_receive+0x888>)
 8011106:	681a      	ldr	r2, [r3, #0]
 8011108:	687b      	ldr	r3, [r7, #4]
 801110a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801110c:	6879      	ldr	r1, [r7, #4]
 801110e:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011110:	440b      	add	r3, r1
 8011112:	1ad3      	subs	r3, r2, r3
 8011114:	3301      	adds	r3, #1
 8011116:	2b00      	cmp	r3, #0
 8011118:	f300 841e 	bgt.w	8011958 <tcp_receive+0xed0>
                        pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
      if (pcb->rcv_nxt == seqno) {
 801111c:	687b      	ldr	r3, [r7, #4]
 801111e:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8011120:	4b7b      	ldr	r3, [pc, #492]	; (8011310 <tcp_receive+0x888>)
 8011122:	681b      	ldr	r3, [r3, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	f040 829a 	bne.w	801165e <tcp_receive+0xbd6>
        /* The incoming segment is the next in sequence. We check if
           we have to trim the end of the segment and update rcv_nxt
           and pass the data to the application. */
        tcplen = TCP_TCPLEN(&inseg);
 801112a:	4b7a      	ldr	r3, [pc, #488]	; (8011314 <tcp_receive+0x88c>)
 801112c:	891c      	ldrh	r4, [r3, #8]
 801112e:	4b79      	ldr	r3, [pc, #484]	; (8011314 <tcp_receive+0x88c>)
 8011130:	68db      	ldr	r3, [r3, #12]
 8011132:	899b      	ldrh	r3, [r3, #12]
 8011134:	b29b      	uxth	r3, r3
 8011136:	4618      	mov	r0, r3
 8011138:	f7fa fca8 	bl	800ba8c <lwip_htons>
 801113c:	4603      	mov	r3, r0
 801113e:	b2db      	uxtb	r3, r3
 8011140:	f003 0303 	and.w	r3, r3, #3
 8011144:	2b00      	cmp	r3, #0
 8011146:	d001      	beq.n	801114c <tcp_receive+0x6c4>
 8011148:	2301      	movs	r3, #1
 801114a:	e000      	b.n	801114e <tcp_receive+0x6c6>
 801114c:	2300      	movs	r3, #0
 801114e:	4423      	add	r3, r4
 8011150:	b29a      	uxth	r2, r3
 8011152:	4b71      	ldr	r3, [pc, #452]	; (8011318 <tcp_receive+0x890>)
 8011154:	801a      	strh	r2, [r3, #0]

        if (tcplen > pcb->rcv_wnd) {
 8011156:	687b      	ldr	r3, [r7, #4]
 8011158:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801115a:	4b6f      	ldr	r3, [pc, #444]	; (8011318 <tcp_receive+0x890>)
 801115c:	881b      	ldrh	r3, [r3, #0]
 801115e:	429a      	cmp	r2, r3
 8011160:	d275      	bcs.n	801124e <tcp_receive+0x7c6>
          LWIP_DEBUGF(TCP_INPUT_DEBUG,
                      ("tcp_receive: other end overran receive window"
                       "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                       seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011162:	4b6c      	ldr	r3, [pc, #432]	; (8011314 <tcp_receive+0x88c>)
 8011164:	68db      	ldr	r3, [r3, #12]
 8011166:	899b      	ldrh	r3, [r3, #12]
 8011168:	b29b      	uxth	r3, r3
 801116a:	4618      	mov	r0, r3
 801116c:	f7fa fc8e 	bl	800ba8c <lwip_htons>
 8011170:	4603      	mov	r3, r0
 8011172:	b2db      	uxtb	r3, r3
 8011174:	f003 0301 	and.w	r3, r3, #1
 8011178:	2b00      	cmp	r3, #0
 801117a:	d01f      	beq.n	80111bc <tcp_receive+0x734>
            /* Must remove the FIN from the header as we're trimming
             * that byte of sequence-space from the packet */
            TCPH_FLAGS_SET(inseg.tcphdr, TCPH_FLAGS(inseg.tcphdr) & ~(unsigned int)TCP_FIN);
 801117c:	4b65      	ldr	r3, [pc, #404]	; (8011314 <tcp_receive+0x88c>)
 801117e:	68db      	ldr	r3, [r3, #12]
 8011180:	899b      	ldrh	r3, [r3, #12]
 8011182:	b29b      	uxth	r3, r3
 8011184:	b21b      	sxth	r3, r3
 8011186:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801118a:	b21c      	sxth	r4, r3
 801118c:	4b61      	ldr	r3, [pc, #388]	; (8011314 <tcp_receive+0x88c>)
 801118e:	68db      	ldr	r3, [r3, #12]
 8011190:	899b      	ldrh	r3, [r3, #12]
 8011192:	b29b      	uxth	r3, r3
 8011194:	4618      	mov	r0, r3
 8011196:	f7fa fc79 	bl	800ba8c <lwip_htons>
 801119a:	4603      	mov	r3, r0
 801119c:	b2db      	uxtb	r3, r3
 801119e:	b29b      	uxth	r3, r3
 80111a0:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 80111a4:	b29b      	uxth	r3, r3
 80111a6:	4618      	mov	r0, r3
 80111a8:	f7fa fc70 	bl	800ba8c <lwip_htons>
 80111ac:	4603      	mov	r3, r0
 80111ae:	b21b      	sxth	r3, r3
 80111b0:	4323      	orrs	r3, r4
 80111b2:	b21a      	sxth	r2, r3
 80111b4:	4b57      	ldr	r3, [pc, #348]	; (8011314 <tcp_receive+0x88c>)
 80111b6:	68db      	ldr	r3, [r3, #12]
 80111b8:	b292      	uxth	r2, r2
 80111ba:	819a      	strh	r2, [r3, #12]
          }
          /* Adjust length of segment to fit in the window. */
          TCPWND_CHECK16(pcb->rcv_wnd);
          inseg.len = (u16_t)pcb->rcv_wnd;
 80111bc:	687b      	ldr	r3, [r7, #4]
 80111be:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 80111c0:	4b54      	ldr	r3, [pc, #336]	; (8011314 <tcp_receive+0x88c>)
 80111c2:	811a      	strh	r2, [r3, #8]
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 80111c4:	4b53      	ldr	r3, [pc, #332]	; (8011314 <tcp_receive+0x88c>)
 80111c6:	68db      	ldr	r3, [r3, #12]
 80111c8:	899b      	ldrh	r3, [r3, #12]
 80111ca:	b29b      	uxth	r3, r3
 80111cc:	4618      	mov	r0, r3
 80111ce:	f7fa fc5d 	bl	800ba8c <lwip_htons>
 80111d2:	4603      	mov	r3, r0
 80111d4:	b2db      	uxtb	r3, r3
 80111d6:	f003 0302 	and.w	r3, r3, #2
 80111da:	2b00      	cmp	r3, #0
 80111dc:	d005      	beq.n	80111ea <tcp_receive+0x762>
            inseg.len -= 1;
 80111de:	4b4d      	ldr	r3, [pc, #308]	; (8011314 <tcp_receive+0x88c>)
 80111e0:	891b      	ldrh	r3, [r3, #8]
 80111e2:	3b01      	subs	r3, #1
 80111e4:	b29a      	uxth	r2, r3
 80111e6:	4b4b      	ldr	r3, [pc, #300]	; (8011314 <tcp_receive+0x88c>)
 80111e8:	811a      	strh	r2, [r3, #8]
          }
          pbuf_realloc(inseg.p, inseg.len);
 80111ea:	4b4a      	ldr	r3, [pc, #296]	; (8011314 <tcp_receive+0x88c>)
 80111ec:	685b      	ldr	r3, [r3, #4]
 80111ee:	4a49      	ldr	r2, [pc, #292]	; (8011314 <tcp_receive+0x88c>)
 80111f0:	8912      	ldrh	r2, [r2, #8]
 80111f2:	4611      	mov	r1, r2
 80111f4:	4618      	mov	r0, r3
 80111f6:	f7fb feb5 	bl	800cf64 <pbuf_realloc>
          tcplen = TCP_TCPLEN(&inseg);
 80111fa:	4b46      	ldr	r3, [pc, #280]	; (8011314 <tcp_receive+0x88c>)
 80111fc:	891c      	ldrh	r4, [r3, #8]
 80111fe:	4b45      	ldr	r3, [pc, #276]	; (8011314 <tcp_receive+0x88c>)
 8011200:	68db      	ldr	r3, [r3, #12]
 8011202:	899b      	ldrh	r3, [r3, #12]
 8011204:	b29b      	uxth	r3, r3
 8011206:	4618      	mov	r0, r3
 8011208:	f7fa fc40 	bl	800ba8c <lwip_htons>
 801120c:	4603      	mov	r3, r0
 801120e:	b2db      	uxtb	r3, r3
 8011210:	f003 0303 	and.w	r3, r3, #3
 8011214:	2b00      	cmp	r3, #0
 8011216:	d001      	beq.n	801121c <tcp_receive+0x794>
 8011218:	2301      	movs	r3, #1
 801121a:	e000      	b.n	801121e <tcp_receive+0x796>
 801121c:	2300      	movs	r3, #0
 801121e:	4423      	add	r3, r4
 8011220:	b29a      	uxth	r2, r3
 8011222:	4b3d      	ldr	r3, [pc, #244]	; (8011318 <tcp_receive+0x890>)
 8011224:	801a      	strh	r2, [r3, #0]
          LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011226:	4b3c      	ldr	r3, [pc, #240]	; (8011318 <tcp_receive+0x890>)
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	461a      	mov	r2, r3
 801122c:	4b38      	ldr	r3, [pc, #224]	; (8011310 <tcp_receive+0x888>)
 801122e:	681b      	ldr	r3, [r3, #0]
 8011230:	441a      	add	r2, r3
 8011232:	687b      	ldr	r3, [r7, #4]
 8011234:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011236:	6879      	ldr	r1, [r7, #4]
 8011238:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801123a:	440b      	add	r3, r1
 801123c:	429a      	cmp	r2, r3
 801123e:	d006      	beq.n	801124e <tcp_receive+0x7c6>
 8011240:	4b36      	ldr	r3, [pc, #216]	; (801131c <tcp_receive+0x894>)
 8011242:	f240 52cb 	movw	r2, #1483	; 0x5cb
 8011246:	4936      	ldr	r1, [pc, #216]	; (8011320 <tcp_receive+0x898>)
 8011248:	4836      	ldr	r0, [pc, #216]	; (8011324 <tcp_receive+0x89c>)
 801124a:	f005 fdd1 	bl	8016df0 <iprintf>
        }
#if TCP_QUEUE_OOSEQ
        /* Received in-sequence data, adjust ooseq data if:
           - FIN has been received or
           - inseq overlaps with ooseq */
        if (pcb->ooseq != NULL) {
 801124e:	687b      	ldr	r3, [r7, #4]
 8011250:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011252:	2b00      	cmp	r3, #0
 8011254:	f000 80e7 	beq.w	8011426 <tcp_receive+0x99e>
          if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 8011258:	4b2e      	ldr	r3, [pc, #184]	; (8011314 <tcp_receive+0x88c>)
 801125a:	68db      	ldr	r3, [r3, #12]
 801125c:	899b      	ldrh	r3, [r3, #12]
 801125e:	b29b      	uxth	r3, r3
 8011260:	4618      	mov	r0, r3
 8011262:	f7fa fc13 	bl	800ba8c <lwip_htons>
 8011266:	4603      	mov	r3, r0
 8011268:	b2db      	uxtb	r3, r3
 801126a:	f003 0301 	and.w	r3, r3, #1
 801126e:	2b00      	cmp	r3, #0
 8011270:	d010      	beq.n	8011294 <tcp_receive+0x80c>
            LWIP_DEBUGF(TCP_INPUT_DEBUG,
                        ("tcp_receive: received in-order FIN, binning ooseq queue\n"));
            /* Received in-order FIN means anything that was received
             * out of order must now have been received in-order, so
             * bin the ooseq queue */
            while (pcb->ooseq != NULL) {
 8011272:	e00a      	b.n	801128a <tcp_receive+0x802>
              struct tcp_seg *old_ooseq = pcb->ooseq;
 8011274:	687b      	ldr	r3, [r7, #4]
 8011276:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011278:	60fb      	str	r3, [r7, #12]
              pcb->ooseq = pcb->ooseq->next;
 801127a:	687b      	ldr	r3, [r7, #4]
 801127c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801127e:	681a      	ldr	r2, [r3, #0]
 8011280:	687b      	ldr	r3, [r7, #4]
 8011282:	675a      	str	r2, [r3, #116]	; 0x74
              tcp_seg_free(old_ooseq);
 8011284:	68f8      	ldr	r0, [r7, #12]
 8011286:	f7fd fcc4 	bl	800ec12 <tcp_seg_free>
            while (pcb->ooseq != NULL) {
 801128a:	687b      	ldr	r3, [r7, #4]
 801128c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801128e:	2b00      	cmp	r3, #0
 8011290:	d1f0      	bne.n	8011274 <tcp_receive+0x7ec>
 8011292:	e0c8      	b.n	8011426 <tcp_receive+0x99e>
            }
          } else {
            struct tcp_seg *next = pcb->ooseq;
 8011294:	687b      	ldr	r3, [r7, #4]
 8011296:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011298:	63fb      	str	r3, [r7, #60]	; 0x3c
            /* Remove all segments on ooseq that are covered by inseg already.
             * FIN is copied from ooseq to inseg if present. */
            while (next &&
 801129a:	e052      	b.n	8011342 <tcp_receive+0x8ba>
                   TCP_SEQ_GEQ(seqno + tcplen,
                               next->tcphdr->seqno + next->len)) {
              struct tcp_seg *tmp;
              /* inseg cannot have FIN here (already processed above) */
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 801129c:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801129e:	68db      	ldr	r3, [r3, #12]
 80112a0:	899b      	ldrh	r3, [r3, #12]
 80112a2:	b29b      	uxth	r3, r3
 80112a4:	4618      	mov	r0, r3
 80112a6:	f7fa fbf1 	bl	800ba8c <lwip_htons>
 80112aa:	4603      	mov	r3, r0
 80112ac:	b2db      	uxtb	r3, r3
 80112ae:	f003 0301 	and.w	r3, r3, #1
 80112b2:	2b00      	cmp	r3, #0
 80112b4:	d03d      	beq.n	8011332 <tcp_receive+0x8aa>
                  (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) == 0) {
 80112b6:	4b17      	ldr	r3, [pc, #92]	; (8011314 <tcp_receive+0x88c>)
 80112b8:	68db      	ldr	r3, [r3, #12]
 80112ba:	899b      	ldrh	r3, [r3, #12]
 80112bc:	b29b      	uxth	r3, r3
 80112be:	4618      	mov	r0, r3
 80112c0:	f7fa fbe4 	bl	800ba8c <lwip_htons>
 80112c4:	4603      	mov	r3, r0
 80112c6:	b2db      	uxtb	r3, r3
 80112c8:	f003 0302 	and.w	r3, r3, #2
              if ((TCPH_FLAGS(next->tcphdr) & TCP_FIN) != 0 &&
 80112cc:	2b00      	cmp	r3, #0
 80112ce:	d130      	bne.n	8011332 <tcp_receive+0x8aa>
                TCPH_SET_FLAG(inseg.tcphdr, TCP_FIN);
 80112d0:	4b10      	ldr	r3, [pc, #64]	; (8011314 <tcp_receive+0x88c>)
 80112d2:	68db      	ldr	r3, [r3, #12]
 80112d4:	899b      	ldrh	r3, [r3, #12]
 80112d6:	b29c      	uxth	r4, r3
 80112d8:	2001      	movs	r0, #1
 80112da:	f7fa fbd7 	bl	800ba8c <lwip_htons>
 80112de:	4603      	mov	r3, r0
 80112e0:	461a      	mov	r2, r3
 80112e2:	4b0c      	ldr	r3, [pc, #48]	; (8011314 <tcp_receive+0x88c>)
 80112e4:	68db      	ldr	r3, [r3, #12]
 80112e6:	4322      	orrs	r2, r4
 80112e8:	b292      	uxth	r2, r2
 80112ea:	819a      	strh	r2, [r3, #12]
                tcplen = TCP_TCPLEN(&inseg);
 80112ec:	4b09      	ldr	r3, [pc, #36]	; (8011314 <tcp_receive+0x88c>)
 80112ee:	891c      	ldrh	r4, [r3, #8]
 80112f0:	4b08      	ldr	r3, [pc, #32]	; (8011314 <tcp_receive+0x88c>)
 80112f2:	68db      	ldr	r3, [r3, #12]
 80112f4:	899b      	ldrh	r3, [r3, #12]
 80112f6:	b29b      	uxth	r3, r3
 80112f8:	4618      	mov	r0, r3
 80112fa:	f7fa fbc7 	bl	800ba8c <lwip_htons>
 80112fe:	4603      	mov	r3, r0
 8011300:	b2db      	uxtb	r3, r3
 8011302:	f003 0303 	and.w	r3, r3, #3
 8011306:	2b00      	cmp	r3, #0
 8011308:	d00e      	beq.n	8011328 <tcp_receive+0x8a0>
 801130a:	2301      	movs	r3, #1
 801130c:	e00d      	b.n	801132a <tcp_receive+0x8a2>
 801130e:	bf00      	nop
 8011310:	2000f82c 	.word	0x2000f82c
 8011314:	2000f80c 	.word	0x2000f80c
 8011318:	2000f836 	.word	0x2000f836
 801131c:	08019eb4 	.word	0x08019eb4
 8011320:	0801a25c 	.word	0x0801a25c
 8011324:	08019f00 	.word	0x08019f00
 8011328:	2300      	movs	r3, #0
 801132a:	4423      	add	r3, r4
 801132c:	b29a      	uxth	r2, r3
 801132e:	4b98      	ldr	r3, [pc, #608]	; (8011590 <tcp_receive+0xb08>)
 8011330:	801a      	strh	r2, [r3, #0]
              }
              tmp = next;
 8011332:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011334:	613b      	str	r3, [r7, #16]
              next = next->next;
 8011336:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011338:	681b      	ldr	r3, [r3, #0]
 801133a:	63fb      	str	r3, [r7, #60]	; 0x3c
              tcp_seg_free(tmp);
 801133c:	6938      	ldr	r0, [r7, #16]
 801133e:	f7fd fc68 	bl	800ec12 <tcp_seg_free>
            while (next &&
 8011342:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011344:	2b00      	cmp	r3, #0
 8011346:	d00e      	beq.n	8011366 <tcp_receive+0x8de>
                   TCP_SEQ_GEQ(seqno + tcplen,
 8011348:	4b91      	ldr	r3, [pc, #580]	; (8011590 <tcp_receive+0xb08>)
 801134a:	881b      	ldrh	r3, [r3, #0]
 801134c:	461a      	mov	r2, r3
 801134e:	4b91      	ldr	r3, [pc, #580]	; (8011594 <tcp_receive+0xb0c>)
 8011350:	681b      	ldr	r3, [r3, #0]
 8011352:	441a      	add	r2, r3
 8011354:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011356:	68db      	ldr	r3, [r3, #12]
 8011358:	685b      	ldr	r3, [r3, #4]
 801135a:	6bf9      	ldr	r1, [r7, #60]	; 0x3c
 801135c:	8909      	ldrh	r1, [r1, #8]
 801135e:	440b      	add	r3, r1
 8011360:	1ad3      	subs	r3, r2, r3
            while (next &&
 8011362:	2b00      	cmp	r3, #0
 8011364:	da9a      	bge.n	801129c <tcp_receive+0x814>
            }
            /* Now trim right side of inseg if it overlaps with the first
             * segment on ooseq */
            if (next &&
 8011366:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011368:	2b00      	cmp	r3, #0
 801136a:	d059      	beq.n	8011420 <tcp_receive+0x998>
                TCP_SEQ_GT(seqno + tcplen,
 801136c:	4b88      	ldr	r3, [pc, #544]	; (8011590 <tcp_receive+0xb08>)
 801136e:	881b      	ldrh	r3, [r3, #0]
 8011370:	461a      	mov	r2, r3
 8011372:	4b88      	ldr	r3, [pc, #544]	; (8011594 <tcp_receive+0xb0c>)
 8011374:	681b      	ldr	r3, [r3, #0]
 8011376:	441a      	add	r2, r3
 8011378:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801137a:	68db      	ldr	r3, [r3, #12]
 801137c:	685b      	ldr	r3, [r3, #4]
 801137e:	1ad3      	subs	r3, r2, r3
            if (next &&
 8011380:	2b00      	cmp	r3, #0
 8011382:	dd4d      	ble.n	8011420 <tcp_receive+0x998>
                           next->tcphdr->seqno)) {
              /* inseg cannot have FIN here (already processed above) */
              inseg.len = (u16_t)(next->tcphdr->seqno - seqno);
 8011384:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 8011386:	68db      	ldr	r3, [r3, #12]
 8011388:	685b      	ldr	r3, [r3, #4]
 801138a:	b29a      	uxth	r2, r3
 801138c:	4b81      	ldr	r3, [pc, #516]	; (8011594 <tcp_receive+0xb0c>)
 801138e:	681b      	ldr	r3, [r3, #0]
 8011390:	b29b      	uxth	r3, r3
 8011392:	1ad3      	subs	r3, r2, r3
 8011394:	b29a      	uxth	r2, r3
 8011396:	4b80      	ldr	r3, [pc, #512]	; (8011598 <tcp_receive+0xb10>)
 8011398:	811a      	strh	r2, [r3, #8]
              if (TCPH_FLAGS(inseg.tcphdr) & TCP_SYN) {
 801139a:	4b7f      	ldr	r3, [pc, #508]	; (8011598 <tcp_receive+0xb10>)
 801139c:	68db      	ldr	r3, [r3, #12]
 801139e:	899b      	ldrh	r3, [r3, #12]
 80113a0:	b29b      	uxth	r3, r3
 80113a2:	4618      	mov	r0, r3
 80113a4:	f7fa fb72 	bl	800ba8c <lwip_htons>
 80113a8:	4603      	mov	r3, r0
 80113aa:	b2db      	uxtb	r3, r3
 80113ac:	f003 0302 	and.w	r3, r3, #2
 80113b0:	2b00      	cmp	r3, #0
 80113b2:	d005      	beq.n	80113c0 <tcp_receive+0x938>
                inseg.len -= 1;
 80113b4:	4b78      	ldr	r3, [pc, #480]	; (8011598 <tcp_receive+0xb10>)
 80113b6:	891b      	ldrh	r3, [r3, #8]
 80113b8:	3b01      	subs	r3, #1
 80113ba:	b29a      	uxth	r2, r3
 80113bc:	4b76      	ldr	r3, [pc, #472]	; (8011598 <tcp_receive+0xb10>)
 80113be:	811a      	strh	r2, [r3, #8]
              }
              pbuf_realloc(inseg.p, inseg.len);
 80113c0:	4b75      	ldr	r3, [pc, #468]	; (8011598 <tcp_receive+0xb10>)
 80113c2:	685b      	ldr	r3, [r3, #4]
 80113c4:	4a74      	ldr	r2, [pc, #464]	; (8011598 <tcp_receive+0xb10>)
 80113c6:	8912      	ldrh	r2, [r2, #8]
 80113c8:	4611      	mov	r1, r2
 80113ca:	4618      	mov	r0, r3
 80113cc:	f7fb fdca 	bl	800cf64 <pbuf_realloc>
              tcplen = TCP_TCPLEN(&inseg);
 80113d0:	4b71      	ldr	r3, [pc, #452]	; (8011598 <tcp_receive+0xb10>)
 80113d2:	891c      	ldrh	r4, [r3, #8]
 80113d4:	4b70      	ldr	r3, [pc, #448]	; (8011598 <tcp_receive+0xb10>)
 80113d6:	68db      	ldr	r3, [r3, #12]
 80113d8:	899b      	ldrh	r3, [r3, #12]
 80113da:	b29b      	uxth	r3, r3
 80113dc:	4618      	mov	r0, r3
 80113de:	f7fa fb55 	bl	800ba8c <lwip_htons>
 80113e2:	4603      	mov	r3, r0
 80113e4:	b2db      	uxtb	r3, r3
 80113e6:	f003 0303 	and.w	r3, r3, #3
 80113ea:	2b00      	cmp	r3, #0
 80113ec:	d001      	beq.n	80113f2 <tcp_receive+0x96a>
 80113ee:	2301      	movs	r3, #1
 80113f0:	e000      	b.n	80113f4 <tcp_receive+0x96c>
 80113f2:	2300      	movs	r3, #0
 80113f4:	4423      	add	r3, r4
 80113f6:	b29a      	uxth	r2, r3
 80113f8:	4b65      	ldr	r3, [pc, #404]	; (8011590 <tcp_receive+0xb08>)
 80113fa:	801a      	strh	r2, [r3, #0]
              LWIP_ASSERT("tcp_receive: segment not trimmed correctly to ooseq queue\n",
 80113fc:	4b64      	ldr	r3, [pc, #400]	; (8011590 <tcp_receive+0xb08>)
 80113fe:	881b      	ldrh	r3, [r3, #0]
 8011400:	461a      	mov	r2, r3
 8011402:	4b64      	ldr	r3, [pc, #400]	; (8011594 <tcp_receive+0xb0c>)
 8011404:	681b      	ldr	r3, [r3, #0]
 8011406:	441a      	add	r2, r3
 8011408:	6bfb      	ldr	r3, [r7, #60]	; 0x3c
 801140a:	68db      	ldr	r3, [r3, #12]
 801140c:	685b      	ldr	r3, [r3, #4]
 801140e:	429a      	cmp	r2, r3
 8011410:	d006      	beq.n	8011420 <tcp_receive+0x998>
 8011412:	4b62      	ldr	r3, [pc, #392]	; (801159c <tcp_receive+0xb14>)
 8011414:	f240 52fc 	movw	r2, #1532	; 0x5fc
 8011418:	4961      	ldr	r1, [pc, #388]	; (80115a0 <tcp_receive+0xb18>)
 801141a:	4862      	ldr	r0, [pc, #392]	; (80115a4 <tcp_receive+0xb1c>)
 801141c:	f005 fce8 	bl	8016df0 <iprintf>
                          (seqno + tcplen) == next->tcphdr->seqno);
            }
            pcb->ooseq = next;
 8011420:	687b      	ldr	r3, [r7, #4]
 8011422:	6bfa      	ldr	r2, [r7, #60]	; 0x3c
 8011424:	675a      	str	r2, [r3, #116]	; 0x74
          }
        }
#endif /* TCP_QUEUE_OOSEQ */

        pcb->rcv_nxt = seqno + tcplen;
 8011426:	4b5a      	ldr	r3, [pc, #360]	; (8011590 <tcp_receive+0xb08>)
 8011428:	881b      	ldrh	r3, [r3, #0]
 801142a:	461a      	mov	r2, r3
 801142c:	4b59      	ldr	r3, [pc, #356]	; (8011594 <tcp_receive+0xb0c>)
 801142e:	681b      	ldr	r3, [r3, #0]
 8011430:	441a      	add	r2, r3
 8011432:	687b      	ldr	r3, [r7, #4]
 8011434:	625a      	str	r2, [r3, #36]	; 0x24

        /* Update the receiver's (our) window. */
        LWIP_ASSERT("tcp_receive: tcplen > rcv_wnd\n", pcb->rcv_wnd >= tcplen);
 8011436:	687b      	ldr	r3, [r7, #4]
 8011438:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801143a:	4b55      	ldr	r3, [pc, #340]	; (8011590 <tcp_receive+0xb08>)
 801143c:	881b      	ldrh	r3, [r3, #0]
 801143e:	429a      	cmp	r2, r3
 8011440:	d206      	bcs.n	8011450 <tcp_receive+0x9c8>
 8011442:	4b56      	ldr	r3, [pc, #344]	; (801159c <tcp_receive+0xb14>)
 8011444:	f240 6207 	movw	r2, #1543	; 0x607
 8011448:	4957      	ldr	r1, [pc, #348]	; (80115a8 <tcp_receive+0xb20>)
 801144a:	4856      	ldr	r0, [pc, #344]	; (80115a4 <tcp_receive+0xb1c>)
 801144c:	f005 fcd0 	bl	8016df0 <iprintf>
        pcb->rcv_wnd -= tcplen;
 8011450:	687b      	ldr	r3, [r7, #4]
 8011452:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 8011454:	4b4e      	ldr	r3, [pc, #312]	; (8011590 <tcp_receive+0xb08>)
 8011456:	881b      	ldrh	r3, [r3, #0]
 8011458:	1ad3      	subs	r3, r2, r3
 801145a:	b29a      	uxth	r2, r3
 801145c:	687b      	ldr	r3, [r7, #4]
 801145e:	851a      	strh	r2, [r3, #40]	; 0x28

        tcp_update_rcv_ann_wnd(pcb);
 8011460:	6878      	ldr	r0, [r7, #4]
 8011462:	f7fc fd99 	bl	800df98 <tcp_update_rcv_ann_wnd>
           chains its data on this pbuf as well.

           If the segment was a FIN, we set the TF_GOT_FIN flag that will
           be used to indicate to the application that the remote side has
           closed its end of the connection. */
        if (inseg.p->tot_len > 0) {
 8011466:	4b4c      	ldr	r3, [pc, #304]	; (8011598 <tcp_receive+0xb10>)
 8011468:	685b      	ldr	r3, [r3, #4]
 801146a:	891b      	ldrh	r3, [r3, #8]
 801146c:	2b00      	cmp	r3, #0
 801146e:	d006      	beq.n	801147e <tcp_receive+0x9f6>
          recv_data = inseg.p;
 8011470:	4b49      	ldr	r3, [pc, #292]	; (8011598 <tcp_receive+0xb10>)
 8011472:	685b      	ldr	r3, [r3, #4]
 8011474:	4a4d      	ldr	r2, [pc, #308]	; (80115ac <tcp_receive+0xb24>)
 8011476:	6013      	str	r3, [r2, #0]
          /* Since this pbuf now is the responsibility of the
             application, we delete our reference to it so that we won't
             (mistakingly) deallocate it. */
          inseg.p = NULL;
 8011478:	4b47      	ldr	r3, [pc, #284]	; (8011598 <tcp_receive+0xb10>)
 801147a:	2200      	movs	r2, #0
 801147c:	605a      	str	r2, [r3, #4]
        }
        if (TCPH_FLAGS(inseg.tcphdr) & TCP_FIN) {
 801147e:	4b46      	ldr	r3, [pc, #280]	; (8011598 <tcp_receive+0xb10>)
 8011480:	68db      	ldr	r3, [r3, #12]
 8011482:	899b      	ldrh	r3, [r3, #12]
 8011484:	b29b      	uxth	r3, r3
 8011486:	4618      	mov	r0, r3
 8011488:	f7fa fb00 	bl	800ba8c <lwip_htons>
 801148c:	4603      	mov	r3, r0
 801148e:	b2db      	uxtb	r3, r3
 8011490:	f003 0301 	and.w	r3, r3, #1
 8011494:	2b00      	cmp	r3, #0
 8011496:	f000 80b8 	beq.w	801160a <tcp_receive+0xb82>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: received FIN.\n"));
          recv_flags |= TF_GOT_FIN;
 801149a:	4b45      	ldr	r3, [pc, #276]	; (80115b0 <tcp_receive+0xb28>)
 801149c:	781b      	ldrb	r3, [r3, #0]
 801149e:	f043 0320 	orr.w	r3, r3, #32
 80114a2:	b2da      	uxtb	r2, r3
 80114a4:	4b42      	ldr	r3, [pc, #264]	; (80115b0 <tcp_receive+0xb28>)
 80114a6:	701a      	strb	r2, [r3, #0]
        }

#if TCP_QUEUE_OOSEQ
        /* We now check if we have segments on the ->ooseq queue that
           are now in sequence. */
        while (pcb->ooseq != NULL &&
 80114a8:	e0af      	b.n	801160a <tcp_receive+0xb82>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {

          struct tcp_seg *cseg = pcb->ooseq;
 80114aa:	687b      	ldr	r3, [r7, #4]
 80114ac:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114ae:	60bb      	str	r3, [r7, #8]
          seqno = pcb->ooseq->tcphdr->seqno;
 80114b0:	687b      	ldr	r3, [r7, #4]
 80114b2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80114b4:	68db      	ldr	r3, [r3, #12]
 80114b6:	685b      	ldr	r3, [r3, #4]
 80114b8:	4a36      	ldr	r2, [pc, #216]	; (8011594 <tcp_receive+0xb0c>)
 80114ba:	6013      	str	r3, [r2, #0]

          pcb->rcv_nxt += TCP_TCPLEN(cseg);
 80114bc:	68bb      	ldr	r3, [r7, #8]
 80114be:	891b      	ldrh	r3, [r3, #8]
 80114c0:	461c      	mov	r4, r3
 80114c2:	68bb      	ldr	r3, [r7, #8]
 80114c4:	68db      	ldr	r3, [r3, #12]
 80114c6:	899b      	ldrh	r3, [r3, #12]
 80114c8:	b29b      	uxth	r3, r3
 80114ca:	4618      	mov	r0, r3
 80114cc:	f7fa fade 	bl	800ba8c <lwip_htons>
 80114d0:	4603      	mov	r3, r0
 80114d2:	b2db      	uxtb	r3, r3
 80114d4:	f003 0303 	and.w	r3, r3, #3
 80114d8:	2b00      	cmp	r3, #0
 80114da:	d001      	beq.n	80114e0 <tcp_receive+0xa58>
 80114dc:	2301      	movs	r3, #1
 80114de:	e000      	b.n	80114e2 <tcp_receive+0xa5a>
 80114e0:	2300      	movs	r3, #0
 80114e2:	191a      	adds	r2, r3, r4
 80114e4:	687b      	ldr	r3, [r7, #4]
 80114e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80114e8:	441a      	add	r2, r3
 80114ea:	687b      	ldr	r3, [r7, #4]
 80114ec:	625a      	str	r2, [r3, #36]	; 0x24
          LWIP_ASSERT("tcp_receive: ooseq tcplen > rcv_wnd\n",
 80114ee:	687b      	ldr	r3, [r7, #4]
 80114f0:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80114f2:	461c      	mov	r4, r3
 80114f4:	68bb      	ldr	r3, [r7, #8]
 80114f6:	891b      	ldrh	r3, [r3, #8]
 80114f8:	461d      	mov	r5, r3
 80114fa:	68bb      	ldr	r3, [r7, #8]
 80114fc:	68db      	ldr	r3, [r3, #12]
 80114fe:	899b      	ldrh	r3, [r3, #12]
 8011500:	b29b      	uxth	r3, r3
 8011502:	4618      	mov	r0, r3
 8011504:	f7fa fac2 	bl	800ba8c <lwip_htons>
 8011508:	4603      	mov	r3, r0
 801150a:	b2db      	uxtb	r3, r3
 801150c:	f003 0303 	and.w	r3, r3, #3
 8011510:	2b00      	cmp	r3, #0
 8011512:	d001      	beq.n	8011518 <tcp_receive+0xa90>
 8011514:	2301      	movs	r3, #1
 8011516:	e000      	b.n	801151a <tcp_receive+0xa92>
 8011518:	2300      	movs	r3, #0
 801151a:	442b      	add	r3, r5
 801151c:	429c      	cmp	r4, r3
 801151e:	d206      	bcs.n	801152e <tcp_receive+0xaa6>
 8011520:	4b1e      	ldr	r3, [pc, #120]	; (801159c <tcp_receive+0xb14>)
 8011522:	f240 622b 	movw	r2, #1579	; 0x62b
 8011526:	4923      	ldr	r1, [pc, #140]	; (80115b4 <tcp_receive+0xb2c>)
 8011528:	481e      	ldr	r0, [pc, #120]	; (80115a4 <tcp_receive+0xb1c>)
 801152a:	f005 fc61 	bl	8016df0 <iprintf>
                      pcb->rcv_wnd >= TCP_TCPLEN(cseg));
          pcb->rcv_wnd -= TCP_TCPLEN(cseg);
 801152e:	68bb      	ldr	r3, [r7, #8]
 8011530:	891b      	ldrh	r3, [r3, #8]
 8011532:	461c      	mov	r4, r3
 8011534:	68bb      	ldr	r3, [r7, #8]
 8011536:	68db      	ldr	r3, [r3, #12]
 8011538:	899b      	ldrh	r3, [r3, #12]
 801153a:	b29b      	uxth	r3, r3
 801153c:	4618      	mov	r0, r3
 801153e:	f7fa faa5 	bl	800ba8c <lwip_htons>
 8011542:	4603      	mov	r3, r0
 8011544:	b2db      	uxtb	r3, r3
 8011546:	f003 0303 	and.w	r3, r3, #3
 801154a:	2b00      	cmp	r3, #0
 801154c:	d001      	beq.n	8011552 <tcp_receive+0xaca>
 801154e:	2301      	movs	r3, #1
 8011550:	e000      	b.n	8011554 <tcp_receive+0xacc>
 8011552:	2300      	movs	r3, #0
 8011554:	1919      	adds	r1, r3, r4
 8011556:	687b      	ldr	r3, [r7, #4]
 8011558:	8d1a      	ldrh	r2, [r3, #40]	; 0x28
 801155a:	b28b      	uxth	r3, r1
 801155c:	1ad3      	subs	r3, r2, r3
 801155e:	b29a      	uxth	r2, r3
 8011560:	687b      	ldr	r3, [r7, #4]
 8011562:	851a      	strh	r2, [r3, #40]	; 0x28

          tcp_update_rcv_ann_wnd(pcb);
 8011564:	6878      	ldr	r0, [r7, #4]
 8011566:	f7fc fd17 	bl	800df98 <tcp_update_rcv_ann_wnd>

          if (cseg->p->tot_len > 0) {
 801156a:	68bb      	ldr	r3, [r7, #8]
 801156c:	685b      	ldr	r3, [r3, #4]
 801156e:	891b      	ldrh	r3, [r3, #8]
 8011570:	2b00      	cmp	r3, #0
 8011572:	d028      	beq.n	80115c6 <tcp_receive+0xb3e>
            /* Chain this pbuf onto the pbuf that we will pass to
               the application. */
            /* With window scaling, this can overflow recv_data->tot_len, but
               that's not a problem since we explicitly fix that before passing
               recv_data to the application. */
            if (recv_data) {
 8011574:	4b0d      	ldr	r3, [pc, #52]	; (80115ac <tcp_receive+0xb24>)
 8011576:	681b      	ldr	r3, [r3, #0]
 8011578:	2b00      	cmp	r3, #0
 801157a:	d01d      	beq.n	80115b8 <tcp_receive+0xb30>
              pbuf_cat(recv_data, cseg->p);
 801157c:	4b0b      	ldr	r3, [pc, #44]	; (80115ac <tcp_receive+0xb24>)
 801157e:	681a      	ldr	r2, [r3, #0]
 8011580:	68bb      	ldr	r3, [r7, #8]
 8011582:	685b      	ldr	r3, [r3, #4]
 8011584:	4619      	mov	r1, r3
 8011586:	4610      	mov	r0, r2
 8011588:	f7fb ff40 	bl	800d40c <pbuf_cat>
 801158c:	e018      	b.n	80115c0 <tcp_receive+0xb38>
 801158e:	bf00      	nop
 8011590:	2000f836 	.word	0x2000f836
 8011594:	2000f82c 	.word	0x2000f82c
 8011598:	2000f80c 	.word	0x2000f80c
 801159c:	08019eb4 	.word	0x08019eb4
 80115a0:	0801a294 	.word	0x0801a294
 80115a4:	08019f00 	.word	0x08019f00
 80115a8:	0801a2d0 	.word	0x0801a2d0
 80115ac:	2000f83c 	.word	0x2000f83c
 80115b0:	2000f839 	.word	0x2000f839
 80115b4:	0801a2f0 	.word	0x0801a2f0
            } else {
              recv_data = cseg->p;
 80115b8:	68bb      	ldr	r3, [r7, #8]
 80115ba:	685b      	ldr	r3, [r3, #4]
 80115bc:	4a70      	ldr	r2, [pc, #448]	; (8011780 <tcp_receive+0xcf8>)
 80115be:	6013      	str	r3, [r2, #0]
            }
            cseg->p = NULL;
 80115c0:	68bb      	ldr	r3, [r7, #8]
 80115c2:	2200      	movs	r2, #0
 80115c4:	605a      	str	r2, [r3, #4]
          }
          if (TCPH_FLAGS(cseg->tcphdr) & TCP_FIN) {
 80115c6:	68bb      	ldr	r3, [r7, #8]
 80115c8:	68db      	ldr	r3, [r3, #12]
 80115ca:	899b      	ldrh	r3, [r3, #12]
 80115cc:	b29b      	uxth	r3, r3
 80115ce:	4618      	mov	r0, r3
 80115d0:	f7fa fa5c 	bl	800ba8c <lwip_htons>
 80115d4:	4603      	mov	r3, r0
 80115d6:	b2db      	uxtb	r3, r3
 80115d8:	f003 0301 	and.w	r3, r3, #1
 80115dc:	2b00      	cmp	r3, #0
 80115de:	d00d      	beq.n	80115fc <tcp_receive+0xb74>
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_receive: dequeued FIN.\n"));
            recv_flags |= TF_GOT_FIN;
 80115e0:	4b68      	ldr	r3, [pc, #416]	; (8011784 <tcp_receive+0xcfc>)
 80115e2:	781b      	ldrb	r3, [r3, #0]
 80115e4:	f043 0320 	orr.w	r3, r3, #32
 80115e8:	b2da      	uxtb	r2, r3
 80115ea:	4b66      	ldr	r3, [pc, #408]	; (8011784 <tcp_receive+0xcfc>)
 80115ec:	701a      	strb	r2, [r3, #0]
            if (pcb->state == ESTABLISHED) { /* force passive close or we can move to active close */
 80115ee:	687b      	ldr	r3, [r7, #4]
 80115f0:	7d1b      	ldrb	r3, [r3, #20]
 80115f2:	2b04      	cmp	r3, #4
 80115f4:	d102      	bne.n	80115fc <tcp_receive+0xb74>
              pcb->state = CLOSE_WAIT;
 80115f6:	687b      	ldr	r3, [r7, #4]
 80115f8:	2207      	movs	r2, #7
 80115fa:	751a      	strb	r2, [r3, #20]
            }
          }

          pcb->ooseq = cseg->next;
 80115fc:	68bb      	ldr	r3, [r7, #8]
 80115fe:	681a      	ldr	r2, [r3, #0]
 8011600:	687b      	ldr	r3, [r7, #4]
 8011602:	675a      	str	r2, [r3, #116]	; 0x74
          tcp_seg_free(cseg);
 8011604:	68b8      	ldr	r0, [r7, #8]
 8011606:	f7fd fb04 	bl	800ec12 <tcp_seg_free>
        while (pcb->ooseq != NULL &&
 801160a:	687b      	ldr	r3, [r7, #4]
 801160c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801160e:	2b00      	cmp	r3, #0
 8011610:	d008      	beq.n	8011624 <tcp_receive+0xb9c>
               pcb->ooseq->tcphdr->seqno == pcb->rcv_nxt) {
 8011612:	687b      	ldr	r3, [r7, #4]
 8011614:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011616:	68db      	ldr	r3, [r3, #12]
 8011618:	685a      	ldr	r2, [r3, #4]
 801161a:	687b      	ldr	r3, [r7, #4]
 801161c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
        while (pcb->ooseq != NULL &&
 801161e:	429a      	cmp	r2, r3
 8011620:	f43f af43 	beq.w	80114aa <tcp_receive+0xa22>
#endif /* LWIP_TCP_SACK_OUT */
#endif /* TCP_QUEUE_OOSEQ */


        /* Acknowledge the segment(s). */
        tcp_ack(pcb);
 8011624:	687b      	ldr	r3, [r7, #4]
 8011626:	8b5b      	ldrh	r3, [r3, #26]
 8011628:	f003 0301 	and.w	r3, r3, #1
 801162c:	2b00      	cmp	r3, #0
 801162e:	d00e      	beq.n	801164e <tcp_receive+0xbc6>
 8011630:	687b      	ldr	r3, [r7, #4]
 8011632:	8b5b      	ldrh	r3, [r3, #26]
 8011634:	f023 0301 	bic.w	r3, r3, #1
 8011638:	b29a      	uxth	r2, r3
 801163a:	687b      	ldr	r3, [r7, #4]
 801163c:	835a      	strh	r2, [r3, #26]
 801163e:	687b      	ldr	r3, [r7, #4]
 8011640:	8b5b      	ldrh	r3, [r3, #26]
 8011642:	f043 0302 	orr.w	r3, r3, #2
 8011646:	b29a      	uxth	r2, r3
 8011648:	687b      	ldr	r3, [r7, #4]
 801164a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801164c:	e188      	b.n	8011960 <tcp_receive+0xed8>
        tcp_ack(pcb);
 801164e:	687b      	ldr	r3, [r7, #4]
 8011650:	8b5b      	ldrh	r3, [r3, #26]
 8011652:	f043 0301 	orr.w	r3, r3, #1
 8011656:	b29a      	uxth	r2, r3
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	835a      	strh	r2, [r3, #26]
      if (pcb->rcv_nxt == seqno) {
 801165c:	e180      	b.n	8011960 <tcp_receive+0xed8>
      } else {
        /* We get here if the incoming segment is out-of-sequence. */

#if TCP_QUEUE_OOSEQ
        /* We queue the segment on the ->ooseq queue. */
        if (pcb->ooseq == NULL) {
 801165e:	687b      	ldr	r3, [r7, #4]
 8011660:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8011662:	2b00      	cmp	r3, #0
 8011664:	d106      	bne.n	8011674 <tcp_receive+0xbec>
          pcb->ooseq = tcp_seg_copy(&inseg);
 8011666:	4848      	ldr	r0, [pc, #288]	; (8011788 <tcp_receive+0xd00>)
 8011668:	f7fd faec 	bl	800ec44 <tcp_seg_copy>
 801166c:	4602      	mov	r2, r0
 801166e:	687b      	ldr	r3, [r7, #4]
 8011670:	675a      	str	r2, [r3, #116]	; 0x74
 8011672:	e16d      	b.n	8011950 <tcp_receive+0xec8>
#if LWIP_TCP_SACK_OUT
          /* This is the left edge of the lowest possible SACK range.
             It may start before the newly received segment (possibly adjusted below). */
          u32_t sackbeg = TCP_SEQ_LT(seqno, pcb->ooseq->tcphdr->seqno) ? seqno : pcb->ooseq->tcphdr->seqno;
#endif /* LWIP_TCP_SACK_OUT */
          struct tcp_seg *next, *prev = NULL;
 8011674:	2300      	movs	r3, #0
 8011676:	637b      	str	r3, [r7, #52]	; 0x34
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 8011678:	687b      	ldr	r3, [r7, #4]
 801167a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 801167c:	63bb      	str	r3, [r7, #56]	; 0x38
 801167e:	e157      	b.n	8011930 <tcp_receive+0xea8>
            if (seqno == next->tcphdr->seqno) {
 8011680:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011682:	68db      	ldr	r3, [r3, #12]
 8011684:	685a      	ldr	r2, [r3, #4]
 8011686:	4b41      	ldr	r3, [pc, #260]	; (801178c <tcp_receive+0xd04>)
 8011688:	681b      	ldr	r3, [r3, #0]
 801168a:	429a      	cmp	r2, r3
 801168c:	d11d      	bne.n	80116ca <tcp_receive+0xc42>
              /* The sequence number of the incoming segment is the
                 same as the sequence number of the segment on
                 ->ooseq. We check the lengths to see which one to
                 discard. */
              if (inseg.len > next->len) {
 801168e:	4b3e      	ldr	r3, [pc, #248]	; (8011788 <tcp_receive+0xd00>)
 8011690:	891a      	ldrh	r2, [r3, #8]
 8011692:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011694:	891b      	ldrh	r3, [r3, #8]
 8011696:	429a      	cmp	r2, r3
 8011698:	f240 814f 	bls.w	801193a <tcp_receive+0xeb2>
                /* The incoming segment is larger than the old
                   segment. We replace some segments with the new
                   one. */
                struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 801169c:	483a      	ldr	r0, [pc, #232]	; (8011788 <tcp_receive+0xd00>)
 801169e:	f7fd fad1 	bl	800ec44 <tcp_seg_copy>
 80116a2:	6178      	str	r0, [r7, #20]
                if (cseg != NULL) {
 80116a4:	697b      	ldr	r3, [r7, #20]
 80116a6:	2b00      	cmp	r3, #0
 80116a8:	f000 8149 	beq.w	801193e <tcp_receive+0xeb6>
                  if (prev != NULL) {
 80116ac:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d003      	beq.n	80116ba <tcp_receive+0xc32>
                    prev->next = cseg;
 80116b2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116b4:	697a      	ldr	r2, [r7, #20]
 80116b6:	601a      	str	r2, [r3, #0]
 80116b8:	e002      	b.n	80116c0 <tcp_receive+0xc38>
                  } else {
                    pcb->ooseq = cseg;
 80116ba:	687b      	ldr	r3, [r7, #4]
 80116bc:	697a      	ldr	r2, [r7, #20]
 80116be:	675a      	str	r2, [r3, #116]	; 0x74
                  }
                  tcp_oos_insert_segment(cseg, next);
 80116c0:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116c2:	6978      	ldr	r0, [r7, #20]
 80116c4:	f7ff f8dc 	bl	8010880 <tcp_oos_insert_segment>
                }
                break;
 80116c8:	e139      	b.n	801193e <tcp_receive+0xeb6>
                   segment was smaller than the old one; in either
                   case, we ditch the incoming segment. */
                break;
              }
            } else {
              if (prev == NULL) {
 80116ca:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80116cc:	2b00      	cmp	r3, #0
 80116ce:	d117      	bne.n	8011700 <tcp_receive+0xc78>
                if (TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {
 80116d0:	4b2e      	ldr	r3, [pc, #184]	; (801178c <tcp_receive+0xd04>)
 80116d2:	681a      	ldr	r2, [r3, #0]
 80116d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80116d6:	68db      	ldr	r3, [r3, #12]
 80116d8:	685b      	ldr	r3, [r3, #4]
 80116da:	1ad3      	subs	r3, r2, r3
 80116dc:	2b00      	cmp	r3, #0
 80116de:	da57      	bge.n	8011790 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is lower
                     than the sequence number of the first segment on the
                     queue. We put the incoming segment first on the
                     queue. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 80116e0:	4829      	ldr	r0, [pc, #164]	; (8011788 <tcp_receive+0xd00>)
 80116e2:	f7fd faaf 	bl	800ec44 <tcp_seg_copy>
 80116e6:	61b8      	str	r0, [r7, #24]
                  if (cseg != NULL) {
 80116e8:	69bb      	ldr	r3, [r7, #24]
 80116ea:	2b00      	cmp	r3, #0
 80116ec:	f000 8129 	beq.w	8011942 <tcp_receive+0xeba>
                    pcb->ooseq = cseg;
 80116f0:	687b      	ldr	r3, [r7, #4]
 80116f2:	69ba      	ldr	r2, [r7, #24]
 80116f4:	675a      	str	r2, [r3, #116]	; 0x74
                    tcp_oos_insert_segment(cseg, next);
 80116f6:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 80116f8:	69b8      	ldr	r0, [r7, #24]
 80116fa:	f7ff f8c1 	bl	8010880 <tcp_oos_insert_segment>
                  }
                  break;
 80116fe:	e120      	b.n	8011942 <tcp_receive+0xeba>
                }
              } else {
                /*if (TCP_SEQ_LT(prev->tcphdr->seqno, seqno) &&
                  TCP_SEQ_LT(seqno, next->tcphdr->seqno)) {*/
                if (TCP_SEQ_BETWEEN(seqno, prev->tcphdr->seqno + 1, next->tcphdr->seqno - 1)) {
 8011700:	4b22      	ldr	r3, [pc, #136]	; (801178c <tcp_receive+0xd04>)
 8011702:	681a      	ldr	r2, [r3, #0]
 8011704:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011706:	68db      	ldr	r3, [r3, #12]
 8011708:	685b      	ldr	r3, [r3, #4]
 801170a:	1ad3      	subs	r3, r2, r3
 801170c:	3b01      	subs	r3, #1
 801170e:	2b00      	cmp	r3, #0
 8011710:	db3e      	blt.n	8011790 <tcp_receive+0xd08>
 8011712:	4b1e      	ldr	r3, [pc, #120]	; (801178c <tcp_receive+0xd04>)
 8011714:	681a      	ldr	r2, [r3, #0]
 8011716:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011718:	68db      	ldr	r3, [r3, #12]
 801171a:	685b      	ldr	r3, [r3, #4]
 801171c:	1ad3      	subs	r3, r2, r3
 801171e:	3301      	adds	r3, #1
 8011720:	2b00      	cmp	r3, #0
 8011722:	dc35      	bgt.n	8011790 <tcp_receive+0xd08>
                  /* The sequence number of the incoming segment is in
                     between the sequence numbers of the previous and
                     the next segment on ->ooseq. We trim trim the previous
                     segment, delete next segments that included in received segment
                     and trim received, if needed. */
                  struct tcp_seg *cseg = tcp_seg_copy(&inseg);
 8011724:	4818      	ldr	r0, [pc, #96]	; (8011788 <tcp_receive+0xd00>)
 8011726:	f7fd fa8d 	bl	800ec44 <tcp_seg_copy>
 801172a:	61f8      	str	r0, [r7, #28]
                  if (cseg != NULL) {
 801172c:	69fb      	ldr	r3, [r7, #28]
 801172e:	2b00      	cmp	r3, #0
 8011730:	f000 8109 	beq.w	8011946 <tcp_receive+0xebe>
                    if (TCP_SEQ_GT(prev->tcphdr->seqno + prev->len, seqno)) {
 8011734:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011736:	68db      	ldr	r3, [r3, #12]
 8011738:	685b      	ldr	r3, [r3, #4]
 801173a:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 801173c:	8912      	ldrh	r2, [r2, #8]
 801173e:	441a      	add	r2, r3
 8011740:	4b12      	ldr	r3, [pc, #72]	; (801178c <tcp_receive+0xd04>)
 8011742:	681b      	ldr	r3, [r3, #0]
 8011744:	1ad3      	subs	r3, r2, r3
 8011746:	2b00      	cmp	r3, #0
 8011748:	dd12      	ble.n	8011770 <tcp_receive+0xce8>
                      /* We need to trim the prev segment. */
                      prev->len = (u16_t)(seqno - prev->tcphdr->seqno);
 801174a:	4b10      	ldr	r3, [pc, #64]	; (801178c <tcp_receive+0xd04>)
 801174c:	681b      	ldr	r3, [r3, #0]
 801174e:	b29a      	uxth	r2, r3
 8011750:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011752:	68db      	ldr	r3, [r3, #12]
 8011754:	685b      	ldr	r3, [r3, #4]
 8011756:	b29b      	uxth	r3, r3
 8011758:	1ad3      	subs	r3, r2, r3
 801175a:	b29a      	uxth	r2, r3
 801175c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801175e:	811a      	strh	r2, [r3, #8]
                      pbuf_realloc(prev->p, prev->len);
 8011760:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011762:	685a      	ldr	r2, [r3, #4]
 8011764:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011766:	891b      	ldrh	r3, [r3, #8]
 8011768:	4619      	mov	r1, r3
 801176a:	4610      	mov	r0, r2
 801176c:	f7fb fbfa 	bl	800cf64 <pbuf_realloc>
                    }
                    prev->next = cseg;
 8011770:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8011772:	69fa      	ldr	r2, [r7, #28]
 8011774:	601a      	str	r2, [r3, #0]
                    tcp_oos_insert_segment(cseg, next);
 8011776:	6bb9      	ldr	r1, [r7, #56]	; 0x38
 8011778:	69f8      	ldr	r0, [r7, #28]
 801177a:	f7ff f881 	bl	8010880 <tcp_oos_insert_segment>
                  }
                  break;
 801177e:	e0e2      	b.n	8011946 <tcp_receive+0xebe>
 8011780:	2000f83c 	.word	0x2000f83c
 8011784:	2000f839 	.word	0x2000f839
 8011788:	2000f80c 	.word	0x2000f80c
 801178c:	2000f82c 	.word	0x2000f82c
#endif /* LWIP_TCP_SACK_OUT */

              /* We don't use 'prev' below, so let's set it to current 'next'.
                 This way even if we break the loop below, 'prev' will be pointing
                 at the segment right in front of the newly added one. */
              prev = next;
 8011790:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011792:	637b      	str	r3, [r7, #52]	; 0x34

              /* If the "next" segment is the last segment on the
                 ooseq queue, we add the incoming segment to the end
                 of the list. */
              if (next->next == NULL &&
 8011794:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011796:	681b      	ldr	r3, [r3, #0]
 8011798:	2b00      	cmp	r3, #0
 801179a:	f040 80c6 	bne.w	801192a <tcp_receive+0xea2>
                  TCP_SEQ_GT(seqno, next->tcphdr->seqno)) {
 801179e:	4b80      	ldr	r3, [pc, #512]	; (80119a0 <tcp_receive+0xf18>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117a4:	68db      	ldr	r3, [r3, #12]
 80117a6:	685b      	ldr	r3, [r3, #4]
 80117a8:	1ad3      	subs	r3, r2, r3
              if (next->next == NULL &&
 80117aa:	2b00      	cmp	r3, #0
 80117ac:	f340 80bd 	ble.w	801192a <tcp_receive+0xea2>
                if (TCPH_FLAGS(next->tcphdr) & TCP_FIN) {
 80117b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117b2:	68db      	ldr	r3, [r3, #12]
 80117b4:	899b      	ldrh	r3, [r3, #12]
 80117b6:	b29b      	uxth	r3, r3
 80117b8:	4618      	mov	r0, r3
 80117ba:	f7fa f967 	bl	800ba8c <lwip_htons>
 80117be:	4603      	mov	r3, r0
 80117c0:	b2db      	uxtb	r3, r3
 80117c2:	f003 0301 	and.w	r3, r3, #1
 80117c6:	2b00      	cmp	r3, #0
 80117c8:	f040 80bf 	bne.w	801194a <tcp_receive+0xec2>
                  /* segment "next" already contains all data */
                  break;
                }
                next->next = tcp_seg_copy(&inseg);
 80117cc:	4875      	ldr	r0, [pc, #468]	; (80119a4 <tcp_receive+0xf1c>)
 80117ce:	f7fd fa39 	bl	800ec44 <tcp_seg_copy>
 80117d2:	4602      	mov	r2, r0
 80117d4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117d6:	601a      	str	r2, [r3, #0]
                if (next->next != NULL) {
 80117d8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117da:	681b      	ldr	r3, [r3, #0]
 80117dc:	2b00      	cmp	r3, #0
 80117de:	f000 80b6 	beq.w	801194e <tcp_receive+0xec6>
                  if (TCP_SEQ_GT(next->tcphdr->seqno + next->len, seqno)) {
 80117e2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80117e4:	68db      	ldr	r3, [r3, #12]
 80117e6:	685b      	ldr	r3, [r3, #4]
 80117e8:	6bba      	ldr	r2, [r7, #56]	; 0x38
 80117ea:	8912      	ldrh	r2, [r2, #8]
 80117ec:	441a      	add	r2, r3
 80117ee:	4b6c      	ldr	r3, [pc, #432]	; (80119a0 <tcp_receive+0xf18>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	1ad3      	subs	r3, r2, r3
 80117f4:	2b00      	cmp	r3, #0
 80117f6:	dd12      	ble.n	801181e <tcp_receive+0xd96>
                    /* We need to trim the last segment. */
                    next->len = (u16_t)(seqno - next->tcphdr->seqno);
 80117f8:	4b69      	ldr	r3, [pc, #420]	; (80119a0 <tcp_receive+0xf18>)
 80117fa:	681b      	ldr	r3, [r3, #0]
 80117fc:	b29a      	uxth	r2, r3
 80117fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011800:	68db      	ldr	r3, [r3, #12]
 8011802:	685b      	ldr	r3, [r3, #4]
 8011804:	b29b      	uxth	r3, r3
 8011806:	1ad3      	subs	r3, r2, r3
 8011808:	b29a      	uxth	r2, r3
 801180a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801180c:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->p, next->len);
 801180e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011810:	685a      	ldr	r2, [r3, #4]
 8011812:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011814:	891b      	ldrh	r3, [r3, #8]
 8011816:	4619      	mov	r1, r3
 8011818:	4610      	mov	r0, r2
 801181a:	f7fb fba3 	bl	800cf64 <pbuf_realloc>
                  }
                  /* check if the remote side overruns our receive window */
                  if (TCP_SEQ_GT((u32_t)tcplen + seqno, pcb->rcv_nxt + (u32_t)pcb->rcv_wnd)) {
 801181e:	4b62      	ldr	r3, [pc, #392]	; (80119a8 <tcp_receive+0xf20>)
 8011820:	881b      	ldrh	r3, [r3, #0]
 8011822:	461a      	mov	r2, r3
 8011824:	4b5e      	ldr	r3, [pc, #376]	; (80119a0 <tcp_receive+0xf18>)
 8011826:	681b      	ldr	r3, [r3, #0]
 8011828:	441a      	add	r2, r3
 801182a:	687b      	ldr	r3, [r7, #4]
 801182c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801182e:	6879      	ldr	r1, [r7, #4]
 8011830:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011832:	440b      	add	r3, r1
 8011834:	1ad3      	subs	r3, r2, r3
 8011836:	2b00      	cmp	r3, #0
 8011838:	f340 8089 	ble.w	801194e <tcp_receive+0xec6>
                    LWIP_DEBUGF(TCP_INPUT_DEBUG,
                                ("tcp_receive: other end overran receive window"
                                 "seqno %"U32_F" len %"U16_F" right edge %"U32_F"\n",
                                 seqno, tcplen, pcb->rcv_nxt + pcb->rcv_wnd));
                    if (TCPH_FLAGS(next->next->tcphdr) & TCP_FIN) {
 801183c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801183e:	681b      	ldr	r3, [r3, #0]
 8011840:	68db      	ldr	r3, [r3, #12]
 8011842:	899b      	ldrh	r3, [r3, #12]
 8011844:	b29b      	uxth	r3, r3
 8011846:	4618      	mov	r0, r3
 8011848:	f7fa f920 	bl	800ba8c <lwip_htons>
 801184c:	4603      	mov	r3, r0
 801184e:	b2db      	uxtb	r3, r3
 8011850:	f003 0301 	and.w	r3, r3, #1
 8011854:	2b00      	cmp	r3, #0
 8011856:	d022      	beq.n	801189e <tcp_receive+0xe16>
                      /* Must remove the FIN from the header as we're trimming
                       * that byte of sequence-space from the packet */
                      TCPH_FLAGS_SET(next->next->tcphdr, TCPH_FLAGS(next->next->tcphdr) & ~TCP_FIN);
 8011858:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801185a:	681b      	ldr	r3, [r3, #0]
 801185c:	68db      	ldr	r3, [r3, #12]
 801185e:	899b      	ldrh	r3, [r3, #12]
 8011860:	b29b      	uxth	r3, r3
 8011862:	b21b      	sxth	r3, r3
 8011864:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 8011868:	b21c      	sxth	r4, r3
 801186a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801186c:	681b      	ldr	r3, [r3, #0]
 801186e:	68db      	ldr	r3, [r3, #12]
 8011870:	899b      	ldrh	r3, [r3, #12]
 8011872:	b29b      	uxth	r3, r3
 8011874:	4618      	mov	r0, r3
 8011876:	f7fa f909 	bl	800ba8c <lwip_htons>
 801187a:	4603      	mov	r3, r0
 801187c:	b2db      	uxtb	r3, r3
 801187e:	b29b      	uxth	r3, r3
 8011880:	f003 033e 	and.w	r3, r3, #62	; 0x3e
 8011884:	b29b      	uxth	r3, r3
 8011886:	4618      	mov	r0, r3
 8011888:	f7fa f900 	bl	800ba8c <lwip_htons>
 801188c:	4603      	mov	r3, r0
 801188e:	b21b      	sxth	r3, r3
 8011890:	4323      	orrs	r3, r4
 8011892:	b21a      	sxth	r2, r3
 8011894:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011896:	681b      	ldr	r3, [r3, #0]
 8011898:	68db      	ldr	r3, [r3, #12]
 801189a:	b292      	uxth	r2, r2
 801189c:	819a      	strh	r2, [r3, #12]
                    }
                    /* Adjust length of segment to fit in the window. */
                    next->next->len = (u16_t)(pcb->rcv_nxt + pcb->rcv_wnd - seqno);
 801189e:	687b      	ldr	r3, [r7, #4]
 80118a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80118a2:	b29a      	uxth	r2, r3
 80118a4:	687b      	ldr	r3, [r7, #4]
 80118a6:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 80118a8:	4413      	add	r3, r2
 80118aa:	b299      	uxth	r1, r3
 80118ac:	4b3c      	ldr	r3, [pc, #240]	; (80119a0 <tcp_receive+0xf18>)
 80118ae:	681b      	ldr	r3, [r3, #0]
 80118b0:	b29a      	uxth	r2, r3
 80118b2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118b4:	681b      	ldr	r3, [r3, #0]
 80118b6:	1a8a      	subs	r2, r1, r2
 80118b8:	b292      	uxth	r2, r2
 80118ba:	811a      	strh	r2, [r3, #8]
                    pbuf_realloc(next->next->p, next->next->len);
 80118bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118be:	681b      	ldr	r3, [r3, #0]
 80118c0:	685a      	ldr	r2, [r3, #4]
 80118c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118c4:	681b      	ldr	r3, [r3, #0]
 80118c6:	891b      	ldrh	r3, [r3, #8]
 80118c8:	4619      	mov	r1, r3
 80118ca:	4610      	mov	r0, r2
 80118cc:	f7fb fb4a 	bl	800cf64 <pbuf_realloc>
                    tcplen = TCP_TCPLEN(next->next);
 80118d0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d2:	681b      	ldr	r3, [r3, #0]
 80118d4:	891c      	ldrh	r4, [r3, #8]
 80118d6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80118d8:	681b      	ldr	r3, [r3, #0]
 80118da:	68db      	ldr	r3, [r3, #12]
 80118dc:	899b      	ldrh	r3, [r3, #12]
 80118de:	b29b      	uxth	r3, r3
 80118e0:	4618      	mov	r0, r3
 80118e2:	f7fa f8d3 	bl	800ba8c <lwip_htons>
 80118e6:	4603      	mov	r3, r0
 80118e8:	b2db      	uxtb	r3, r3
 80118ea:	f003 0303 	and.w	r3, r3, #3
 80118ee:	2b00      	cmp	r3, #0
 80118f0:	d001      	beq.n	80118f6 <tcp_receive+0xe6e>
 80118f2:	2301      	movs	r3, #1
 80118f4:	e000      	b.n	80118f8 <tcp_receive+0xe70>
 80118f6:	2300      	movs	r3, #0
 80118f8:	4423      	add	r3, r4
 80118fa:	b29a      	uxth	r2, r3
 80118fc:	4b2a      	ldr	r3, [pc, #168]	; (80119a8 <tcp_receive+0xf20>)
 80118fe:	801a      	strh	r2, [r3, #0]
                    LWIP_ASSERT("tcp_receive: segment not trimmed correctly to rcv_wnd\n",
 8011900:	4b29      	ldr	r3, [pc, #164]	; (80119a8 <tcp_receive+0xf20>)
 8011902:	881b      	ldrh	r3, [r3, #0]
 8011904:	461a      	mov	r2, r3
 8011906:	4b26      	ldr	r3, [pc, #152]	; (80119a0 <tcp_receive+0xf18>)
 8011908:	681b      	ldr	r3, [r3, #0]
 801190a:	441a      	add	r2, r3
 801190c:	687b      	ldr	r3, [r7, #4]
 801190e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011910:	6879      	ldr	r1, [r7, #4]
 8011912:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 8011914:	440b      	add	r3, r1
 8011916:	429a      	cmp	r2, r3
 8011918:	d019      	beq.n	801194e <tcp_receive+0xec6>
 801191a:	4b24      	ldr	r3, [pc, #144]	; (80119ac <tcp_receive+0xf24>)
 801191c:	f44f 62df 	mov.w	r2, #1784	; 0x6f8
 8011920:	4923      	ldr	r1, [pc, #140]	; (80119b0 <tcp_receive+0xf28>)
 8011922:	4824      	ldr	r0, [pc, #144]	; (80119b4 <tcp_receive+0xf2c>)
 8011924:	f005 fa64 	bl	8016df0 <iprintf>
                                (seqno + tcplen) == (pcb->rcv_nxt + pcb->rcv_wnd));
                  }
                }
                break;
 8011928:	e011      	b.n	801194e <tcp_receive+0xec6>
          for (next = pcb->ooseq; next != NULL; next = next->next) {
 801192a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 801192c:	681b      	ldr	r3, [r3, #0]
 801192e:	63bb      	str	r3, [r7, #56]	; 0x38
 8011930:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8011932:	2b00      	cmp	r3, #0
 8011934:	f47f aea4 	bne.w	8011680 <tcp_receive+0xbf8>
 8011938:	e00a      	b.n	8011950 <tcp_receive+0xec8>
                break;
 801193a:	bf00      	nop
 801193c:	e008      	b.n	8011950 <tcp_receive+0xec8>
                break;
 801193e:	bf00      	nop
 8011940:	e006      	b.n	8011950 <tcp_receive+0xec8>
                  break;
 8011942:	bf00      	nop
 8011944:	e004      	b.n	8011950 <tcp_receive+0xec8>
                  break;
 8011946:	bf00      	nop
 8011948:	e002      	b.n	8011950 <tcp_receive+0xec8>
                  break;
 801194a:	bf00      	nop
 801194c:	e000      	b.n	8011950 <tcp_receive+0xec8>
                break;
 801194e:	bf00      	nop
#endif /* TCP_OOSEQ_BYTES_LIMIT || TCP_OOSEQ_PBUFS_LIMIT */
#endif /* TCP_QUEUE_OOSEQ */

        /* We send the ACK packet after we've (potentially) dealt with SACKs,
           so they can be included in the acknowledgment. */
        tcp_send_empty_ack(pcb);
 8011950:	6878      	ldr	r0, [r7, #4]
 8011952:	f001 fe8b 	bl	801366c <tcp_send_empty_ack>
      if (pcb->rcv_nxt == seqno) {
 8011956:	e003      	b.n	8011960 <tcp_receive+0xed8>
      }
    } else {
      /* The incoming segment is not within the window. */
      tcp_send_empty_ack(pcb);
 8011958:	6878      	ldr	r0, [r7, #4]
 801195a:	f001 fe87 	bl	801366c <tcp_send_empty_ack>
    if (TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt,
 801195e:	e01a      	b.n	8011996 <tcp_receive+0xf0e>
 8011960:	e019      	b.n	8011996 <tcp_receive+0xf0e>
    }
  } else {
    /* Segments with length 0 is taken care of here. Segments that
       fall out of the window are ACKed. */
    if (!TCP_SEQ_BETWEEN(seqno, pcb->rcv_nxt, pcb->rcv_nxt + pcb->rcv_wnd - 1)) {
 8011962:	4b0f      	ldr	r3, [pc, #60]	; (80119a0 <tcp_receive+0xf18>)
 8011964:	681a      	ldr	r2, [r3, #0]
 8011966:	687b      	ldr	r3, [r7, #4]
 8011968:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 801196a:	1ad3      	subs	r3, r2, r3
 801196c:	2b00      	cmp	r3, #0
 801196e:	db0a      	blt.n	8011986 <tcp_receive+0xefe>
 8011970:	4b0b      	ldr	r3, [pc, #44]	; (80119a0 <tcp_receive+0xf18>)
 8011972:	681a      	ldr	r2, [r3, #0]
 8011974:	687b      	ldr	r3, [r7, #4]
 8011976:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8011978:	6879      	ldr	r1, [r7, #4]
 801197a:	8d09      	ldrh	r1, [r1, #40]	; 0x28
 801197c:	440b      	add	r3, r1
 801197e:	1ad3      	subs	r3, r2, r3
 8011980:	3301      	adds	r3, #1
 8011982:	2b00      	cmp	r3, #0
 8011984:	dd07      	ble.n	8011996 <tcp_receive+0xf0e>
      tcp_ack_now(pcb);
 8011986:	687b      	ldr	r3, [r7, #4]
 8011988:	8b5b      	ldrh	r3, [r3, #26]
 801198a:	f043 0302 	orr.w	r3, r3, #2
 801198e:	b29a      	uxth	r2, r3
 8011990:	687b      	ldr	r3, [r7, #4]
 8011992:	835a      	strh	r2, [r3, #26]
    }
  }
}
 8011994:	e7ff      	b.n	8011996 <tcp_receive+0xf0e>
 8011996:	bf00      	nop
 8011998:	3750      	adds	r7, #80	; 0x50
 801199a:	46bd      	mov	sp, r7
 801199c:	bdb0      	pop	{r4, r5, r7, pc}
 801199e:	bf00      	nop
 80119a0:	2000f82c 	.word	0x2000f82c
 80119a4:	2000f80c 	.word	0x2000f80c
 80119a8:	2000f836 	.word	0x2000f836
 80119ac:	08019eb4 	.word	0x08019eb4
 80119b0:	0801a25c 	.word	0x0801a25c
 80119b4:	08019f00 	.word	0x08019f00

080119b8 <tcp_get_next_optbyte>:

static u8_t
tcp_get_next_optbyte(void)
{
 80119b8:	b480      	push	{r7}
 80119ba:	b083      	sub	sp, #12
 80119bc:	af00      	add	r7, sp, #0
  u16_t optidx = tcp_optidx++;
 80119be:	4b15      	ldr	r3, [pc, #84]	; (8011a14 <tcp_get_next_optbyte+0x5c>)
 80119c0:	881b      	ldrh	r3, [r3, #0]
 80119c2:	1c5a      	adds	r2, r3, #1
 80119c4:	b291      	uxth	r1, r2
 80119c6:	4a13      	ldr	r2, [pc, #76]	; (8011a14 <tcp_get_next_optbyte+0x5c>)
 80119c8:	8011      	strh	r1, [r2, #0]
 80119ca:	80fb      	strh	r3, [r7, #6]
  if ((tcphdr_opt2 == NULL) || (optidx < tcphdr_opt1len)) {
 80119cc:	4b12      	ldr	r3, [pc, #72]	; (8011a18 <tcp_get_next_optbyte+0x60>)
 80119ce:	681b      	ldr	r3, [r3, #0]
 80119d0:	2b00      	cmp	r3, #0
 80119d2:	d004      	beq.n	80119de <tcp_get_next_optbyte+0x26>
 80119d4:	4b11      	ldr	r3, [pc, #68]	; (8011a1c <tcp_get_next_optbyte+0x64>)
 80119d6:	881b      	ldrh	r3, [r3, #0]
 80119d8:	88fa      	ldrh	r2, [r7, #6]
 80119da:	429a      	cmp	r2, r3
 80119dc:	d208      	bcs.n	80119f0 <tcp_get_next_optbyte+0x38>
    u8_t *opts = (u8_t *)tcphdr + TCP_HLEN;
 80119de:	4b10      	ldr	r3, [pc, #64]	; (8011a20 <tcp_get_next_optbyte+0x68>)
 80119e0:	681b      	ldr	r3, [r3, #0]
 80119e2:	3314      	adds	r3, #20
 80119e4:	603b      	str	r3, [r7, #0]
    return opts[optidx];
 80119e6:	88fb      	ldrh	r3, [r7, #6]
 80119e8:	683a      	ldr	r2, [r7, #0]
 80119ea:	4413      	add	r3, r2
 80119ec:	781b      	ldrb	r3, [r3, #0]
 80119ee:	e00b      	b.n	8011a08 <tcp_get_next_optbyte+0x50>
  } else {
    u8_t idx = (u8_t)(optidx - tcphdr_opt1len);
 80119f0:	88fb      	ldrh	r3, [r7, #6]
 80119f2:	b2da      	uxtb	r2, r3
 80119f4:	4b09      	ldr	r3, [pc, #36]	; (8011a1c <tcp_get_next_optbyte+0x64>)
 80119f6:	881b      	ldrh	r3, [r3, #0]
 80119f8:	b2db      	uxtb	r3, r3
 80119fa:	1ad3      	subs	r3, r2, r3
 80119fc:	717b      	strb	r3, [r7, #5]
    return tcphdr_opt2[idx];
 80119fe:	4b06      	ldr	r3, [pc, #24]	; (8011a18 <tcp_get_next_optbyte+0x60>)
 8011a00:	681a      	ldr	r2, [r3, #0]
 8011a02:	797b      	ldrb	r3, [r7, #5]
 8011a04:	4413      	add	r3, r2
 8011a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8011a08:	4618      	mov	r0, r3
 8011a0a:	370c      	adds	r7, #12
 8011a0c:	46bd      	mov	sp, r7
 8011a0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011a12:	4770      	bx	lr
 8011a14:	2000f828 	.word	0x2000f828
 8011a18:	2000f824 	.word	0x2000f824
 8011a1c:	2000f822 	.word	0x2000f822
 8011a20:	2000f81c 	.word	0x2000f81c

08011a24 <tcp_parseopt>:
 *
 * @param pcb the tcp_pcb for which a segment arrived
 */
static void
tcp_parseopt(struct tcp_pcb *pcb)
{
 8011a24:	b580      	push	{r7, lr}
 8011a26:	b084      	sub	sp, #16
 8011a28:	af00      	add	r7, sp, #0
 8011a2a:	6078      	str	r0, [r7, #4]
  u16_t mss;
#if LWIP_TCP_TIMESTAMPS
  u32_t tsval;
#endif

  LWIP_ASSERT("tcp_parseopt: invalid pcb", pcb != NULL);
 8011a2c:	687b      	ldr	r3, [r7, #4]
 8011a2e:	2b00      	cmp	r3, #0
 8011a30:	d106      	bne.n	8011a40 <tcp_parseopt+0x1c>
 8011a32:	4b32      	ldr	r3, [pc, #200]	; (8011afc <tcp_parseopt+0xd8>)
 8011a34:	f240 727d 	movw	r2, #1917	; 0x77d
 8011a38:	4931      	ldr	r1, [pc, #196]	; (8011b00 <tcp_parseopt+0xdc>)
 8011a3a:	4832      	ldr	r0, [pc, #200]	; (8011b04 <tcp_parseopt+0xe0>)
 8011a3c:	f005 f9d8 	bl	8016df0 <iprintf>

  /* Parse the TCP MSS option, if present. */
  if (tcphdr_optlen != 0) {
 8011a40:	4b31      	ldr	r3, [pc, #196]	; (8011b08 <tcp_parseopt+0xe4>)
 8011a42:	881b      	ldrh	r3, [r3, #0]
 8011a44:	2b00      	cmp	r3, #0
 8011a46:	d055      	beq.n	8011af4 <tcp_parseopt+0xd0>
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011a48:	4b30      	ldr	r3, [pc, #192]	; (8011b0c <tcp_parseopt+0xe8>)
 8011a4a:	2200      	movs	r2, #0
 8011a4c:	801a      	strh	r2, [r3, #0]
 8011a4e:	e045      	b.n	8011adc <tcp_parseopt+0xb8>
      u8_t opt = tcp_get_next_optbyte();
 8011a50:	f7ff ffb2 	bl	80119b8 <tcp_get_next_optbyte>
 8011a54:	4603      	mov	r3, r0
 8011a56:	73fb      	strb	r3, [r7, #15]
      switch (opt) {
 8011a58:	7bfb      	ldrb	r3, [r7, #15]
 8011a5a:	2b02      	cmp	r3, #2
 8011a5c:	d006      	beq.n	8011a6c <tcp_parseopt+0x48>
 8011a5e:	2b02      	cmp	r3, #2
 8011a60:	dc2b      	bgt.n	8011aba <tcp_parseopt+0x96>
 8011a62:	2b00      	cmp	r3, #0
 8011a64:	d041      	beq.n	8011aea <tcp_parseopt+0xc6>
 8011a66:	2b01      	cmp	r3, #1
 8011a68:	d127      	bne.n	8011aba <tcp_parseopt+0x96>
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: EOL\n"));
          return;
        case LWIP_TCP_OPT_NOP:
          /* NOP option. */
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: NOP\n"));
          break;
 8011a6a:	e037      	b.n	8011adc <tcp_parseopt+0xb8>
        case LWIP_TCP_OPT_MSS:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: MSS\n"));
          if (tcp_get_next_optbyte() != LWIP_TCP_OPT_LEN_MSS || (tcp_optidx - 2 + LWIP_TCP_OPT_LEN_MSS) > tcphdr_optlen) {
 8011a6c:	f7ff ffa4 	bl	80119b8 <tcp_get_next_optbyte>
 8011a70:	4603      	mov	r3, r0
 8011a72:	2b04      	cmp	r3, #4
 8011a74:	d13b      	bne.n	8011aee <tcp_parseopt+0xca>
 8011a76:	4b25      	ldr	r3, [pc, #148]	; (8011b0c <tcp_parseopt+0xe8>)
 8011a78:	881b      	ldrh	r3, [r3, #0]
 8011a7a:	3301      	adds	r3, #1
 8011a7c:	4a22      	ldr	r2, [pc, #136]	; (8011b08 <tcp_parseopt+0xe4>)
 8011a7e:	8812      	ldrh	r2, [r2, #0]
 8011a80:	4293      	cmp	r3, r2
 8011a82:	da34      	bge.n	8011aee <tcp_parseopt+0xca>
            /* Bad length */
            LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: bad length\n"));
            return;
          }
          /* An MSS option with the right option length. */
          mss = (u16_t)(tcp_get_next_optbyte() << 8);
 8011a84:	f7ff ff98 	bl	80119b8 <tcp_get_next_optbyte>
 8011a88:	4603      	mov	r3, r0
 8011a8a:	b29b      	uxth	r3, r3
 8011a8c:	021b      	lsls	r3, r3, #8
 8011a8e:	81bb      	strh	r3, [r7, #12]
          mss |= tcp_get_next_optbyte();
 8011a90:	f7ff ff92 	bl	80119b8 <tcp_get_next_optbyte>
 8011a94:	4603      	mov	r3, r0
 8011a96:	b29a      	uxth	r2, r3
 8011a98:	89bb      	ldrh	r3, [r7, #12]
 8011a9a:	4313      	orrs	r3, r2
 8011a9c:	81bb      	strh	r3, [r7, #12]
          /* Limit the mss to the configured TCP_MSS and prevent division by zero */
          pcb->mss = ((mss > TCP_MSS) || (mss == 0)) ? TCP_MSS : mss;
 8011a9e:	89bb      	ldrh	r3, [r7, #12]
 8011aa0:	f5b3 7f06 	cmp.w	r3, #536	; 0x218
 8011aa4:	d804      	bhi.n	8011ab0 <tcp_parseopt+0x8c>
 8011aa6:	89bb      	ldrh	r3, [r7, #12]
 8011aa8:	2b00      	cmp	r3, #0
 8011aaa:	d001      	beq.n	8011ab0 <tcp_parseopt+0x8c>
 8011aac:	89ba      	ldrh	r2, [r7, #12]
 8011aae:	e001      	b.n	8011ab4 <tcp_parseopt+0x90>
 8011ab0:	f44f 7206 	mov.w	r2, #536	; 0x218
 8011ab4:	687b      	ldr	r3, [r7, #4]
 8011ab6:	865a      	strh	r2, [r3, #50]	; 0x32
          break;
 8011ab8:	e010      	b.n	8011adc <tcp_parseopt+0xb8>
          }
          break;
#endif /* LWIP_TCP_SACK_OUT */
        default:
          LWIP_DEBUGF(TCP_INPUT_DEBUG, ("tcp_parseopt: other\n"));
          data = tcp_get_next_optbyte();
 8011aba:	f7ff ff7d 	bl	80119b8 <tcp_get_next_optbyte>
 8011abe:	4603      	mov	r3, r0
 8011ac0:	72fb      	strb	r3, [r7, #11]
          if (data < 2) {
 8011ac2:	7afb      	ldrb	r3, [r7, #11]
 8011ac4:	2b01      	cmp	r3, #1
 8011ac6:	d914      	bls.n	8011af2 <tcp_parseopt+0xce>
               and we don't process them further. */
            return;
          }
          /* All other options have a length field, so that we easily
             can skip past them. */
          tcp_optidx += data - 2;
 8011ac8:	7afb      	ldrb	r3, [r7, #11]
 8011aca:	b29a      	uxth	r2, r3
 8011acc:	4b0f      	ldr	r3, [pc, #60]	; (8011b0c <tcp_parseopt+0xe8>)
 8011ace:	881b      	ldrh	r3, [r3, #0]
 8011ad0:	4413      	add	r3, r2
 8011ad2:	b29b      	uxth	r3, r3
 8011ad4:	3b02      	subs	r3, #2
 8011ad6:	b29a      	uxth	r2, r3
 8011ad8:	4b0c      	ldr	r3, [pc, #48]	; (8011b0c <tcp_parseopt+0xe8>)
 8011ada:	801a      	strh	r2, [r3, #0]
    for (tcp_optidx = 0; tcp_optidx < tcphdr_optlen; ) {
 8011adc:	4b0b      	ldr	r3, [pc, #44]	; (8011b0c <tcp_parseopt+0xe8>)
 8011ade:	881a      	ldrh	r2, [r3, #0]
 8011ae0:	4b09      	ldr	r3, [pc, #36]	; (8011b08 <tcp_parseopt+0xe4>)
 8011ae2:	881b      	ldrh	r3, [r3, #0]
 8011ae4:	429a      	cmp	r2, r3
 8011ae6:	d3b3      	bcc.n	8011a50 <tcp_parseopt+0x2c>
 8011ae8:	e004      	b.n	8011af4 <tcp_parseopt+0xd0>
          return;
 8011aea:	bf00      	nop
 8011aec:	e002      	b.n	8011af4 <tcp_parseopt+0xd0>
            return;
 8011aee:	bf00      	nop
 8011af0:	e000      	b.n	8011af4 <tcp_parseopt+0xd0>
            return;
 8011af2:	bf00      	nop
      }
    }
  }
}
 8011af4:	3710      	adds	r7, #16
 8011af6:	46bd      	mov	sp, r7
 8011af8:	bd80      	pop	{r7, pc}
 8011afa:	bf00      	nop
 8011afc:	08019eb4 	.word	0x08019eb4
 8011b00:	0801a318 	.word	0x0801a318
 8011b04:	08019f00 	.word	0x08019f00
 8011b08:	2000f820 	.word	0x2000f820
 8011b0c:	2000f828 	.word	0x2000f828

08011b10 <tcp_trigger_input_pcb_close>:

void
tcp_trigger_input_pcb_close(void)
{
 8011b10:	b480      	push	{r7}
 8011b12:	af00      	add	r7, sp, #0
  recv_flags |= TF_CLOSED;
 8011b14:	4b05      	ldr	r3, [pc, #20]	; (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b16:	781b      	ldrb	r3, [r3, #0]
 8011b18:	f043 0310 	orr.w	r3, r3, #16
 8011b1c:	b2da      	uxtb	r2, r3
 8011b1e:	4b03      	ldr	r3, [pc, #12]	; (8011b2c <tcp_trigger_input_pcb_close+0x1c>)
 8011b20:	701a      	strb	r2, [r3, #0]
}
 8011b22:	bf00      	nop
 8011b24:	46bd      	mov	sp, r7
 8011b26:	f85d 7b04 	ldr.w	r7, [sp], #4
 8011b2a:	4770      	bx	lr
 8011b2c:	2000f839 	.word	0x2000f839

08011b30 <tcp_route>:
static err_t tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif);

/* tcp_route: common code that returns a fixed bound netif or calls ip_route */
static struct netif *
tcp_route(const struct tcp_pcb *pcb, const ip_addr_t *src, const ip_addr_t *dst)
{
 8011b30:	b580      	push	{r7, lr}
 8011b32:	b084      	sub	sp, #16
 8011b34:	af00      	add	r7, sp, #0
 8011b36:	60f8      	str	r0, [r7, #12]
 8011b38:	60b9      	str	r1, [r7, #8]
 8011b3a:	607a      	str	r2, [r7, #4]
  LWIP_UNUSED_ARG(src); /* in case IPv4-only and source-based routing is disabled */

  if ((pcb != NULL) && (pcb->netif_idx != NETIF_NO_INDEX)) {
 8011b3c:	68fb      	ldr	r3, [r7, #12]
 8011b3e:	2b00      	cmp	r3, #0
 8011b40:	d00a      	beq.n	8011b58 <tcp_route+0x28>
 8011b42:	68fb      	ldr	r3, [r7, #12]
 8011b44:	7a1b      	ldrb	r3, [r3, #8]
 8011b46:	2b00      	cmp	r3, #0
 8011b48:	d006      	beq.n	8011b58 <tcp_route+0x28>
    return netif_get_by_index(pcb->netif_idx);
 8011b4a:	68fb      	ldr	r3, [r7, #12]
 8011b4c:	7a1b      	ldrb	r3, [r3, #8]
 8011b4e:	4618      	mov	r0, r3
 8011b50:	f7fb f800 	bl	800cb54 <netif_get_by_index>
 8011b54:	4603      	mov	r3, r0
 8011b56:	e003      	b.n	8011b60 <tcp_route+0x30>
  } else {
    return ip_route(src, dst);
 8011b58:	6878      	ldr	r0, [r7, #4]
 8011b5a:	f003 fcb9 	bl	80154d0 <ip4_route>
 8011b5e:	4603      	mov	r3, r0
  }
}
 8011b60:	4618      	mov	r0, r3
 8011b62:	3710      	adds	r7, #16
 8011b64:	46bd      	mov	sp, r7
 8011b66:	bd80      	pop	{r7, pc}

08011b68 <tcp_create_segment>:
 * The TCP header is filled in except ackno and wnd.
 * p is freed on failure.
 */
static struct tcp_seg *
tcp_create_segment(const struct tcp_pcb *pcb, struct pbuf *p, u8_t hdrflags, u32_t seqno, u8_t optflags)
{
 8011b68:	b590      	push	{r4, r7, lr}
 8011b6a:	b087      	sub	sp, #28
 8011b6c:	af00      	add	r7, sp, #0
 8011b6e:	60f8      	str	r0, [r7, #12]
 8011b70:	60b9      	str	r1, [r7, #8]
 8011b72:	603b      	str	r3, [r7, #0]
 8011b74:	4613      	mov	r3, r2
 8011b76:	71fb      	strb	r3, [r7, #7]
  struct tcp_seg *seg;
  u8_t optlen;

  LWIP_ASSERT("tcp_create_segment: invalid pcb", pcb != NULL);
 8011b78:	68fb      	ldr	r3, [r7, #12]
 8011b7a:	2b00      	cmp	r3, #0
 8011b7c:	d105      	bne.n	8011b8a <tcp_create_segment+0x22>
 8011b7e:	4b44      	ldr	r3, [pc, #272]	; (8011c90 <tcp_create_segment+0x128>)
 8011b80:	22a3      	movs	r2, #163	; 0xa3
 8011b82:	4944      	ldr	r1, [pc, #272]	; (8011c94 <tcp_create_segment+0x12c>)
 8011b84:	4844      	ldr	r0, [pc, #272]	; (8011c98 <tcp_create_segment+0x130>)
 8011b86:	f005 f933 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_create_segment: invalid pbuf", p != NULL);
 8011b8a:	68bb      	ldr	r3, [r7, #8]
 8011b8c:	2b00      	cmp	r3, #0
 8011b8e:	d105      	bne.n	8011b9c <tcp_create_segment+0x34>
 8011b90:	4b3f      	ldr	r3, [pc, #252]	; (8011c90 <tcp_create_segment+0x128>)
 8011b92:	22a4      	movs	r2, #164	; 0xa4
 8011b94:	4941      	ldr	r1, [pc, #260]	; (8011c9c <tcp_create_segment+0x134>)
 8011b96:	4840      	ldr	r0, [pc, #256]	; (8011c98 <tcp_create_segment+0x130>)
 8011b98:	f005 f92a 	bl	8016df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8011b9c:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011ba0:	009b      	lsls	r3, r3, #2
 8011ba2:	b2db      	uxtb	r3, r3
 8011ba4:	f003 0304 	and.w	r3, r3, #4
 8011ba8:	75fb      	strb	r3, [r7, #23]

  if ((seg = (struct tcp_seg *)memp_malloc(MEMP_TCP_SEG)) == NULL) {
 8011baa:	2003      	movs	r0, #3
 8011bac:	f7fa fc46 	bl	800c43c <memp_malloc>
 8011bb0:	6138      	str	r0, [r7, #16]
 8011bb2:	693b      	ldr	r3, [r7, #16]
 8011bb4:	2b00      	cmp	r3, #0
 8011bb6:	d104      	bne.n	8011bc2 <tcp_create_segment+0x5a>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no memory.\n"));
    pbuf_free(p);
 8011bb8:	68b8      	ldr	r0, [r7, #8]
 8011bba:	f7fb fb59 	bl	800d270 <pbuf_free>
    return NULL;
 8011bbe:	2300      	movs	r3, #0
 8011bc0:	e061      	b.n	8011c86 <tcp_create_segment+0x11e>
  }
  seg->flags = optflags;
 8011bc2:	693b      	ldr	r3, [r7, #16]
 8011bc4:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 8011bc8:	729a      	strb	r2, [r3, #10]
  seg->next = NULL;
 8011bca:	693b      	ldr	r3, [r7, #16]
 8011bcc:	2200      	movs	r2, #0
 8011bce:	601a      	str	r2, [r3, #0]
  seg->p = p;
 8011bd0:	693b      	ldr	r3, [r7, #16]
 8011bd2:	68ba      	ldr	r2, [r7, #8]
 8011bd4:	605a      	str	r2, [r3, #4]
  LWIP_ASSERT("p->tot_len >= optlen", p->tot_len >= optlen);
 8011bd6:	68bb      	ldr	r3, [r7, #8]
 8011bd8:	891a      	ldrh	r2, [r3, #8]
 8011bda:	7dfb      	ldrb	r3, [r7, #23]
 8011bdc:	b29b      	uxth	r3, r3
 8011bde:	429a      	cmp	r2, r3
 8011be0:	d205      	bcs.n	8011bee <tcp_create_segment+0x86>
 8011be2:	4b2b      	ldr	r3, [pc, #172]	; (8011c90 <tcp_create_segment+0x128>)
 8011be4:	22b0      	movs	r2, #176	; 0xb0
 8011be6:	492e      	ldr	r1, [pc, #184]	; (8011ca0 <tcp_create_segment+0x138>)
 8011be8:	482b      	ldr	r0, [pc, #172]	; (8011c98 <tcp_create_segment+0x130>)
 8011bea:	f005 f901 	bl	8016df0 <iprintf>
  seg->len = p->tot_len - optlen;
 8011bee:	68bb      	ldr	r3, [r7, #8]
 8011bf0:	891a      	ldrh	r2, [r3, #8]
 8011bf2:	7dfb      	ldrb	r3, [r7, #23]
 8011bf4:	b29b      	uxth	r3, r3
 8011bf6:	1ad3      	subs	r3, r2, r3
 8011bf8:	b29a      	uxth	r2, r3
 8011bfa:	693b      	ldr	r3, [r7, #16]
 8011bfc:	811a      	strh	r2, [r3, #8]
  LWIP_ASSERT("invalid optflags passed: TF_SEG_DATA_CHECKSUMMED",
              (optflags & TF_SEG_DATA_CHECKSUMMED) == 0);
#endif /* TCP_CHECKSUM_ON_COPY */

  /* build TCP header */
  if (pbuf_add_header(p, TCP_HLEN)) {
 8011bfe:	2114      	movs	r1, #20
 8011c00:	68b8      	ldr	r0, [r7, #8]
 8011c02:	f7fb fa9f 	bl	800d144 <pbuf_add_header>
 8011c06:	4603      	mov	r3, r0
 8011c08:	2b00      	cmp	r3, #0
 8011c0a:	d004      	beq.n	8011c16 <tcp_create_segment+0xae>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_create_segment: no room for TCP header in pbuf.\n"));
    TCP_STATS_INC(tcp.err);
    tcp_seg_free(seg);
 8011c0c:	6938      	ldr	r0, [r7, #16]
 8011c0e:	f7fd f800 	bl	800ec12 <tcp_seg_free>
    return NULL;
 8011c12:	2300      	movs	r3, #0
 8011c14:	e037      	b.n	8011c86 <tcp_create_segment+0x11e>
  }
  seg->tcphdr = (struct tcp_hdr *)seg->p->payload;
 8011c16:	693b      	ldr	r3, [r7, #16]
 8011c18:	685b      	ldr	r3, [r3, #4]
 8011c1a:	685a      	ldr	r2, [r3, #4]
 8011c1c:	693b      	ldr	r3, [r7, #16]
 8011c1e:	60da      	str	r2, [r3, #12]
  seg->tcphdr->src = lwip_htons(pcb->local_port);
 8011c20:	68fb      	ldr	r3, [r7, #12]
 8011c22:	8ada      	ldrh	r2, [r3, #22]
 8011c24:	693b      	ldr	r3, [r7, #16]
 8011c26:	68dc      	ldr	r4, [r3, #12]
 8011c28:	4610      	mov	r0, r2
 8011c2a:	f7f9 ff2f 	bl	800ba8c <lwip_htons>
 8011c2e:	4603      	mov	r3, r0
 8011c30:	8023      	strh	r3, [r4, #0]
  seg->tcphdr->dest = lwip_htons(pcb->remote_port);
 8011c32:	68fb      	ldr	r3, [r7, #12]
 8011c34:	8b1a      	ldrh	r2, [r3, #24]
 8011c36:	693b      	ldr	r3, [r7, #16]
 8011c38:	68dc      	ldr	r4, [r3, #12]
 8011c3a:	4610      	mov	r0, r2
 8011c3c:	f7f9 ff26 	bl	800ba8c <lwip_htons>
 8011c40:	4603      	mov	r3, r0
 8011c42:	8063      	strh	r3, [r4, #2]
  seg->tcphdr->seqno = lwip_htonl(seqno);
 8011c44:	693b      	ldr	r3, [r7, #16]
 8011c46:	68dc      	ldr	r4, [r3, #12]
 8011c48:	6838      	ldr	r0, [r7, #0]
 8011c4a:	f7f9 ff34 	bl	800bab6 <lwip_htonl>
 8011c4e:	4603      	mov	r3, r0
 8011c50:	6063      	str	r3, [r4, #4]
  /* ackno is set in tcp_output */
  TCPH_HDRLEN_FLAGS_SET(seg->tcphdr, (5 + optlen / 4), hdrflags);
 8011c52:	7dfb      	ldrb	r3, [r7, #23]
 8011c54:	089b      	lsrs	r3, r3, #2
 8011c56:	b2db      	uxtb	r3, r3
 8011c58:	b29b      	uxth	r3, r3
 8011c5a:	3305      	adds	r3, #5
 8011c5c:	b29b      	uxth	r3, r3
 8011c5e:	031b      	lsls	r3, r3, #12
 8011c60:	b29a      	uxth	r2, r3
 8011c62:	79fb      	ldrb	r3, [r7, #7]
 8011c64:	b29b      	uxth	r3, r3
 8011c66:	4313      	orrs	r3, r2
 8011c68:	b29a      	uxth	r2, r3
 8011c6a:	693b      	ldr	r3, [r7, #16]
 8011c6c:	68dc      	ldr	r4, [r3, #12]
 8011c6e:	4610      	mov	r0, r2
 8011c70:	f7f9 ff0c 	bl	800ba8c <lwip_htons>
 8011c74:	4603      	mov	r3, r0
 8011c76:	81a3      	strh	r3, [r4, #12]
  /* wnd and chksum are set in tcp_output */
  seg->tcphdr->urgp = 0;
 8011c78:	693b      	ldr	r3, [r7, #16]
 8011c7a:	68db      	ldr	r3, [r3, #12]
 8011c7c:	2200      	movs	r2, #0
 8011c7e:	749a      	strb	r2, [r3, #18]
 8011c80:	2200      	movs	r2, #0
 8011c82:	74da      	strb	r2, [r3, #19]
  return seg;
 8011c84:	693b      	ldr	r3, [r7, #16]
}
 8011c86:	4618      	mov	r0, r3
 8011c88:	371c      	adds	r7, #28
 8011c8a:	46bd      	mov	sp, r7
 8011c8c:	bd90      	pop	{r4, r7, pc}
 8011c8e:	bf00      	nop
 8011c90:	0801a334 	.word	0x0801a334
 8011c94:	0801a368 	.word	0x0801a368
 8011c98:	0801a388 	.word	0x0801a388
 8011c9c:	0801a3b0 	.word	0x0801a3b0
 8011ca0:	0801a3d4 	.word	0x0801a3d4

08011ca4 <tcp_pbuf_prealloc>:
#if TCP_OVERSIZE
static struct pbuf *
tcp_pbuf_prealloc(pbuf_layer layer, u16_t length, u16_t max_length,
                  u16_t *oversize, const struct tcp_pcb *pcb, u8_t apiflags,
                  u8_t first_seg)
{
 8011ca4:	b580      	push	{r7, lr}
 8011ca6:	b086      	sub	sp, #24
 8011ca8:	af00      	add	r7, sp, #0
 8011caa:	607b      	str	r3, [r7, #4]
 8011cac:	4603      	mov	r3, r0
 8011cae:	73fb      	strb	r3, [r7, #15]
 8011cb0:	460b      	mov	r3, r1
 8011cb2:	81bb      	strh	r3, [r7, #12]
 8011cb4:	4613      	mov	r3, r2
 8011cb6:	817b      	strh	r3, [r7, #10]
  struct pbuf *p;
  u16_t alloc = length;
 8011cb8:	89bb      	ldrh	r3, [r7, #12]
 8011cba:	82fb      	strh	r3, [r7, #22]

  LWIP_ASSERT("tcp_pbuf_prealloc: invalid oversize", oversize != NULL);
 8011cbc:	687b      	ldr	r3, [r7, #4]
 8011cbe:	2b00      	cmp	r3, #0
 8011cc0:	d105      	bne.n	8011cce <tcp_pbuf_prealloc+0x2a>
 8011cc2:	4b30      	ldr	r3, [pc, #192]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011cc4:	22e8      	movs	r2, #232	; 0xe8
 8011cc6:	4930      	ldr	r1, [pc, #192]	; (8011d88 <tcp_pbuf_prealloc+0xe4>)
 8011cc8:	4830      	ldr	r0, [pc, #192]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011cca:	f005 f891 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_pbuf_prealloc: invalid pcb", pcb != NULL);
 8011cce:	6a3b      	ldr	r3, [r7, #32]
 8011cd0:	2b00      	cmp	r3, #0
 8011cd2:	d105      	bne.n	8011ce0 <tcp_pbuf_prealloc+0x3c>
 8011cd4:	4b2b      	ldr	r3, [pc, #172]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011cd6:	22e9      	movs	r2, #233	; 0xe9
 8011cd8:	492d      	ldr	r1, [pc, #180]	; (8011d90 <tcp_pbuf_prealloc+0xec>)
 8011cda:	482c      	ldr	r0, [pc, #176]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011cdc:	f005 f888 	bl	8016df0 <iprintf>
  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(apiflags);
  LWIP_UNUSED_ARG(first_seg);
  alloc = max_length;
#else /* LWIP_NETIF_TX_SINGLE_PBUF */
  if (length < max_length) {
 8011ce0:	89ba      	ldrh	r2, [r7, #12]
 8011ce2:	897b      	ldrh	r3, [r7, #10]
 8011ce4:	429a      	cmp	r2, r3
 8011ce6:	d221      	bcs.n	8011d2c <tcp_pbuf_prealloc+0x88>
     *
     * Did the user set TCP_WRITE_FLAG_MORE?
     *
     * Will the Nagle algorithm defer transmission of this segment?
     */
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011ce8:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8011cec:	f003 0302 	and.w	r3, r3, #2
 8011cf0:	2b00      	cmp	r3, #0
 8011cf2:	d111      	bne.n	8011d18 <tcp_pbuf_prealloc+0x74>
        (!(pcb->flags & TF_NODELAY) &&
 8011cf4:	6a3b      	ldr	r3, [r7, #32]
 8011cf6:	8b5b      	ldrh	r3, [r3, #26]
 8011cf8:	f003 0340 	and.w	r3, r3, #64	; 0x40
    if ((apiflags & TCP_WRITE_FLAG_MORE) ||
 8011cfc:	2b00      	cmp	r3, #0
 8011cfe:	d115      	bne.n	8011d2c <tcp_pbuf_prealloc+0x88>
        (!(pcb->flags & TF_NODELAY) &&
 8011d00:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 8011d04:	2b00      	cmp	r3, #0
 8011d06:	d007      	beq.n	8011d18 <tcp_pbuf_prealloc+0x74>
         (!first_seg ||
          pcb->unsent != NULL ||
 8011d08:	6a3b      	ldr	r3, [r7, #32]
 8011d0a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
         (!first_seg ||
 8011d0c:	2b00      	cmp	r3, #0
 8011d0e:	d103      	bne.n	8011d18 <tcp_pbuf_prealloc+0x74>
          pcb->unacked != NULL))) {
 8011d10:	6a3b      	ldr	r3, [r7, #32]
 8011d12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
          pcb->unsent != NULL ||
 8011d14:	2b00      	cmp	r3, #0
 8011d16:	d009      	beq.n	8011d2c <tcp_pbuf_prealloc+0x88>
      alloc = LWIP_MIN(max_length, LWIP_MEM_ALIGN_SIZE(TCP_OVERSIZE_CALC_LENGTH(length)));
 8011d18:	89bb      	ldrh	r3, [r7, #12]
 8011d1a:	f203 231b 	addw	r3, r3, #539	; 0x21b
 8011d1e:	f023 0203 	bic.w	r2, r3, #3
 8011d22:	897b      	ldrh	r3, [r7, #10]
 8011d24:	4293      	cmp	r3, r2
 8011d26:	bf28      	it	cs
 8011d28:	4613      	movcs	r3, r2
 8011d2a:	82fb      	strh	r3, [r7, #22]
    }
  }
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */
  p = pbuf_alloc(layer, alloc, PBUF_RAM);
 8011d2c:	8af9      	ldrh	r1, [r7, #22]
 8011d2e:	7bfb      	ldrb	r3, [r7, #15]
 8011d30:	f44f 7220 	mov.w	r2, #640	; 0x280
 8011d34:	4618      	mov	r0, r3
 8011d36:	f7fa ffb7 	bl	800cca8 <pbuf_alloc>
 8011d3a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 8011d3c:	693b      	ldr	r3, [r7, #16]
 8011d3e:	2b00      	cmp	r3, #0
 8011d40:	d101      	bne.n	8011d46 <tcp_pbuf_prealloc+0xa2>
    return NULL;
 8011d42:	2300      	movs	r3, #0
 8011d44:	e019      	b.n	8011d7a <tcp_pbuf_prealloc+0xd6>
  }
  LWIP_ASSERT("need unchained pbuf", p->next == NULL);
 8011d46:	693b      	ldr	r3, [r7, #16]
 8011d48:	681b      	ldr	r3, [r3, #0]
 8011d4a:	2b00      	cmp	r3, #0
 8011d4c:	d006      	beq.n	8011d5c <tcp_pbuf_prealloc+0xb8>
 8011d4e:	4b0d      	ldr	r3, [pc, #52]	; (8011d84 <tcp_pbuf_prealloc+0xe0>)
 8011d50:	f240 120b 	movw	r2, #267	; 0x10b
 8011d54:	490f      	ldr	r1, [pc, #60]	; (8011d94 <tcp_pbuf_prealloc+0xf0>)
 8011d56:	480d      	ldr	r0, [pc, #52]	; (8011d8c <tcp_pbuf_prealloc+0xe8>)
 8011d58:	f005 f84a 	bl	8016df0 <iprintf>
  *oversize = p->len - length;
 8011d5c:	693b      	ldr	r3, [r7, #16]
 8011d5e:	895a      	ldrh	r2, [r3, #10]
 8011d60:	89bb      	ldrh	r3, [r7, #12]
 8011d62:	1ad3      	subs	r3, r2, r3
 8011d64:	b29a      	uxth	r2, r3
 8011d66:	687b      	ldr	r3, [r7, #4]
 8011d68:	801a      	strh	r2, [r3, #0]
  /* trim p->len to the currently used size */
  p->len = p->tot_len = length;
 8011d6a:	693b      	ldr	r3, [r7, #16]
 8011d6c:	89ba      	ldrh	r2, [r7, #12]
 8011d6e:	811a      	strh	r2, [r3, #8]
 8011d70:	693b      	ldr	r3, [r7, #16]
 8011d72:	891a      	ldrh	r2, [r3, #8]
 8011d74:	693b      	ldr	r3, [r7, #16]
 8011d76:	815a      	strh	r2, [r3, #10]
  return p;
 8011d78:	693b      	ldr	r3, [r7, #16]
}
 8011d7a:	4618      	mov	r0, r3
 8011d7c:	3718      	adds	r7, #24
 8011d7e:	46bd      	mov	sp, r7
 8011d80:	bd80      	pop	{r7, pc}
 8011d82:	bf00      	nop
 8011d84:	0801a334 	.word	0x0801a334
 8011d88:	0801a3ec 	.word	0x0801a3ec
 8011d8c:	0801a388 	.word	0x0801a388
 8011d90:	0801a410 	.word	0x0801a410
 8011d94:	0801a430 	.word	0x0801a430

08011d98 <tcp_write_checks>:
 * @param len length of data to send (checked agains snd_buf)
 * @return ERR_OK if tcp_write is allowed to proceed, another err_t otherwise
 */
static err_t
tcp_write_checks(struct tcp_pcb *pcb, u16_t len)
{
 8011d98:	b580      	push	{r7, lr}
 8011d9a:	b082      	sub	sp, #8
 8011d9c:	af00      	add	r7, sp, #0
 8011d9e:	6078      	str	r0, [r7, #4]
 8011da0:	460b      	mov	r3, r1
 8011da2:	807b      	strh	r3, [r7, #2]
  LWIP_ASSERT("tcp_write_checks: invalid pcb", pcb != NULL);
 8011da4:	687b      	ldr	r3, [r7, #4]
 8011da6:	2b00      	cmp	r3, #0
 8011da8:	d106      	bne.n	8011db8 <tcp_write_checks+0x20>
 8011daa:	4b33      	ldr	r3, [pc, #204]	; (8011e78 <tcp_write_checks+0xe0>)
 8011dac:	f240 1233 	movw	r2, #307	; 0x133
 8011db0:	4932      	ldr	r1, [pc, #200]	; (8011e7c <tcp_write_checks+0xe4>)
 8011db2:	4833      	ldr	r0, [pc, #204]	; (8011e80 <tcp_write_checks+0xe8>)
 8011db4:	f005 f81c 	bl	8016df0 <iprintf>

  /* connection is in invalid state for data transmission? */
  if ((pcb->state != ESTABLISHED) &&
 8011db8:	687b      	ldr	r3, [r7, #4]
 8011dba:	7d1b      	ldrb	r3, [r3, #20]
 8011dbc:	2b04      	cmp	r3, #4
 8011dbe:	d00e      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != CLOSE_WAIT) &&
 8011dc0:	687b      	ldr	r3, [r7, #4]
 8011dc2:	7d1b      	ldrb	r3, [r3, #20]
  if ((pcb->state != ESTABLISHED) &&
 8011dc4:	2b07      	cmp	r3, #7
 8011dc6:	d00a      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != SYN_SENT) &&
 8011dc8:	687b      	ldr	r3, [r7, #4]
 8011dca:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != CLOSE_WAIT) &&
 8011dcc:	2b02      	cmp	r3, #2
 8011dce:	d006      	beq.n	8011dde <tcp_write_checks+0x46>
      (pcb->state != SYN_RCVD)) {
 8011dd0:	687b      	ldr	r3, [r7, #4]
 8011dd2:	7d1b      	ldrb	r3, [r3, #20]
      (pcb->state != SYN_SENT) &&
 8011dd4:	2b03      	cmp	r3, #3
 8011dd6:	d002      	beq.n	8011dde <tcp_write_checks+0x46>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_STATE | LWIP_DBG_LEVEL_SEVERE, ("tcp_write() called in invalid state\n"));
    return ERR_CONN;
 8011dd8:	f06f 030a 	mvn.w	r3, #10
 8011ddc:	e048      	b.n	8011e70 <tcp_write_checks+0xd8>
  } else if (len == 0) {
 8011dde:	887b      	ldrh	r3, [r7, #2]
 8011de0:	2b00      	cmp	r3, #0
 8011de2:	d101      	bne.n	8011de8 <tcp_write_checks+0x50>
    return ERR_OK;
 8011de4:	2300      	movs	r3, #0
 8011de6:	e043      	b.n	8011e70 <tcp_write_checks+0xd8>
  }

  /* fail on too much data */
  if (len > pcb->snd_buf) {
 8011de8:	687b      	ldr	r3, [r7, #4]
 8011dea:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8011dee:	887a      	ldrh	r2, [r7, #2]
 8011df0:	429a      	cmp	r2, r3
 8011df2:	d909      	bls.n	8011e08 <tcp_write_checks+0x70>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too much data (len=%"U16_F" > snd_buf=%"TCPWNDSIZE_F")\n",
                len, pcb->snd_buf));
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011df4:	687b      	ldr	r3, [r7, #4]
 8011df6:	8b5b      	ldrh	r3, [r3, #26]
 8011df8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011dfc:	b29a      	uxth	r2, r3
 8011dfe:	687b      	ldr	r3, [r7, #4]
 8011e00:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e02:	f04f 33ff 	mov.w	r3, #4294967295
 8011e06:	e033      	b.n	8011e70 <tcp_write_checks+0xd8>
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: queuelen: %"TCPWNDSIZE_F"\n", (tcpwnd_size_t)pcb->snd_queuelen));

  /* If total number of pbufs on the unsent/unacked queues exceeds the
   * configured maximum, return an error */
  /* check for configured max queuelen and possible overflow */
  if (pcb->snd_queuelen >= LWIP_MIN(TCP_SND_QUEUELEN, (TCP_SNDQUEUELEN_OVERFLOW + 1))) {
 8011e08:	687b      	ldr	r3, [r7, #4]
 8011e0a:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e0e:	2b08      	cmp	r3, #8
 8011e10:	d909      	bls.n	8011e26 <tcp_write_checks+0x8e>
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SEVERE, ("tcp_write: too long queue %"U16_F" (max %"U16_F")\n",
                pcb->snd_queuelen, (u16_t)TCP_SND_QUEUELEN));
    TCP_STATS_INC(tcp.memerr);
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8011e12:	687b      	ldr	r3, [r7, #4]
 8011e14:	8b5b      	ldrh	r3, [r3, #26]
 8011e16:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8011e1a:	b29a      	uxth	r2, r3
 8011e1c:	687b      	ldr	r3, [r7, #4]
 8011e1e:	835a      	strh	r2, [r3, #26]
    return ERR_MEM;
 8011e20:	f04f 33ff 	mov.w	r3, #4294967295
 8011e24:	e024      	b.n	8011e70 <tcp_write_checks+0xd8>
  }
  if (pcb->snd_queuelen != 0) {
 8011e26:	687b      	ldr	r3, [r7, #4]
 8011e28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011e2c:	2b00      	cmp	r3, #0
 8011e2e:	d00f      	beq.n	8011e50 <tcp_write_checks+0xb8>
    LWIP_ASSERT("tcp_write: pbufs on queue => at least one queue non-empty",
 8011e30:	687b      	ldr	r3, [r7, #4]
 8011e32:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e34:	2b00      	cmp	r3, #0
 8011e36:	d11a      	bne.n	8011e6e <tcp_write_checks+0xd6>
 8011e38:	687b      	ldr	r3, [r7, #4]
 8011e3a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e3c:	2b00      	cmp	r3, #0
 8011e3e:	d116      	bne.n	8011e6e <tcp_write_checks+0xd6>
 8011e40:	4b0d      	ldr	r3, [pc, #52]	; (8011e78 <tcp_write_checks+0xe0>)
 8011e42:	f240 1255 	movw	r2, #341	; 0x155
 8011e46:	490f      	ldr	r1, [pc, #60]	; (8011e84 <tcp_write_checks+0xec>)
 8011e48:	480d      	ldr	r0, [pc, #52]	; (8011e80 <tcp_write_checks+0xe8>)
 8011e4a:	f004 ffd1 	bl	8016df0 <iprintf>
 8011e4e:	e00e      	b.n	8011e6e <tcp_write_checks+0xd6>
                pcb->unacked != NULL || pcb->unsent != NULL);
  } else {
    LWIP_ASSERT("tcp_write: no pbufs on queue => both queues empty",
 8011e50:	687b      	ldr	r3, [r7, #4]
 8011e52:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8011e54:	2b00      	cmp	r3, #0
 8011e56:	d103      	bne.n	8011e60 <tcp_write_checks+0xc8>
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011e5c:	2b00      	cmp	r3, #0
 8011e5e:	d006      	beq.n	8011e6e <tcp_write_checks+0xd6>
 8011e60:	4b05      	ldr	r3, [pc, #20]	; (8011e78 <tcp_write_checks+0xe0>)
 8011e62:	f44f 72ac 	mov.w	r2, #344	; 0x158
 8011e66:	4908      	ldr	r1, [pc, #32]	; (8011e88 <tcp_write_checks+0xf0>)
 8011e68:	4805      	ldr	r0, [pc, #20]	; (8011e80 <tcp_write_checks+0xe8>)
 8011e6a:	f004 ffc1 	bl	8016df0 <iprintf>
                pcb->unacked == NULL && pcb->unsent == NULL);
  }
  return ERR_OK;
 8011e6e:	2300      	movs	r3, #0
}
 8011e70:	4618      	mov	r0, r3
 8011e72:	3708      	adds	r7, #8
 8011e74:	46bd      	mov	sp, r7
 8011e76:	bd80      	pop	{r7, pc}
 8011e78:	0801a334 	.word	0x0801a334
 8011e7c:	0801a444 	.word	0x0801a444
 8011e80:	0801a388 	.word	0x0801a388
 8011e84:	0801a464 	.word	0x0801a464
 8011e88:	0801a4a0 	.word	0x0801a4a0

08011e8c <tcp_write>:
 * - TCP_WRITE_FLAG_MORE (0x02) for TCP connection, PSH flag will not be set on last segment sent,
 * @return ERR_OK if enqueued, another err_t on error
 */
err_t
tcp_write(struct tcp_pcb *pcb, const void *arg, u16_t len, u8_t apiflags)
{
 8011e8c:	b590      	push	{r4, r7, lr}
 8011e8e:	b09b      	sub	sp, #108	; 0x6c
 8011e90:	af04      	add	r7, sp, #16
 8011e92:	60f8      	str	r0, [r7, #12]
 8011e94:	60b9      	str	r1, [r7, #8]
 8011e96:	4611      	mov	r1, r2
 8011e98:	461a      	mov	r2, r3
 8011e9a:	460b      	mov	r3, r1
 8011e9c:	80fb      	strh	r3, [r7, #6]
 8011e9e:	4613      	mov	r3, r2
 8011ea0:	717b      	strb	r3, [r7, #5]
  struct pbuf *concat_p = NULL;
 8011ea2:	2300      	movs	r3, #0
 8011ea4:	657b      	str	r3, [r7, #84]	; 0x54
  struct tcp_seg *last_unsent = NULL, *seg = NULL, *prev_seg = NULL, *queue = NULL;
 8011ea6:	2300      	movs	r3, #0
 8011ea8:	653b      	str	r3, [r7, #80]	; 0x50
 8011eaa:	2300      	movs	r3, #0
 8011eac:	64fb      	str	r3, [r7, #76]	; 0x4c
 8011eae:	2300      	movs	r3, #0
 8011eb0:	64bb      	str	r3, [r7, #72]	; 0x48
 8011eb2:	2300      	movs	r3, #0
 8011eb4:	647b      	str	r3, [r7, #68]	; 0x44
  u16_t pos = 0; /* position in 'arg' data */
 8011eb6:	2300      	movs	r3, #0
 8011eb8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  u16_t queuelen;
  u8_t optlen;
  u8_t optflags = 0;
 8011ebc:	2300      	movs	r3, #0
 8011ebe:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
#if TCP_OVERSIZE
  u16_t oversize = 0;
 8011ec2:	2300      	movs	r3, #0
 8011ec4:	827b      	strh	r3, [r7, #18]
  u16_t oversize_used = 0;
 8011ec6:	2300      	movs	r3, #0
 8011ec8:	87fb      	strh	r3, [r7, #62]	; 0x3e
#if TCP_OVERSIZE_DBGCHECK
  u16_t oversize_add = 0;
#endif /* TCP_OVERSIZE_DBGCHECK*/
#endif /* TCP_OVERSIZE */
  u16_t extendlen = 0;
 8011eca:	2300      	movs	r3, #0
 8011ecc:	87bb      	strh	r3, [r7, #60]	; 0x3c
  u16_t concat_chksummed = 0;
#endif /* TCP_CHECKSUM_ON_COPY */
  err_t err;
  u16_t mss_local;

  LWIP_ERROR("tcp_write: invalid pcb", pcb != NULL, return ERR_ARG);
 8011ece:	68fb      	ldr	r3, [r7, #12]
 8011ed0:	2b00      	cmp	r3, #0
 8011ed2:	d109      	bne.n	8011ee8 <tcp_write+0x5c>
 8011ed4:	4ba4      	ldr	r3, [pc, #656]	; (8012168 <tcp_write+0x2dc>)
 8011ed6:	f44f 72cf 	mov.w	r2, #414	; 0x19e
 8011eda:	49a4      	ldr	r1, [pc, #656]	; (801216c <tcp_write+0x2e0>)
 8011edc:	48a4      	ldr	r0, [pc, #656]	; (8012170 <tcp_write+0x2e4>)
 8011ede:	f004 ff87 	bl	8016df0 <iprintf>
 8011ee2:	f06f 030f 	mvn.w	r3, #15
 8011ee6:	e32a      	b.n	801253e <tcp_write+0x6b2>

  /* don't allocate segments bigger than half the maximum window we ever received */
  mss_local = LWIP_MIN(pcb->mss, TCPWND_MIN16(pcb->snd_wnd_max / 2));
 8011ee8:	68fb      	ldr	r3, [r7, #12]
 8011eea:	f8b3 3062 	ldrh.w	r3, [r3, #98]	; 0x62
 8011eee:	085b      	lsrs	r3, r3, #1
 8011ef0:	b29a      	uxth	r2, r3
 8011ef2:	68fb      	ldr	r3, [r7, #12]
 8011ef4:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011ef6:	4293      	cmp	r3, r2
 8011ef8:	bf28      	it	cs
 8011efa:	4613      	movcs	r3, r2
 8011efc:	84bb      	strh	r3, [r7, #36]	; 0x24
  mss_local = mss_local ? mss_local : pcb->mss;
 8011efe:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f00:	2b00      	cmp	r3, #0
 8011f02:	d102      	bne.n	8011f0a <tcp_write+0x7e>
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8011f08:	e000      	b.n	8011f0c <tcp_write+0x80>
 8011f0a:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 8011f0c:	84bb      	strh	r3, [r7, #36]	; 0x24
  apiflags |= TCP_WRITE_FLAG_COPY;
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_write(pcb=%p, data=%p, len=%"U16_F", apiflags=%"U16_F")\n",
                                 (void *)pcb, arg, len, (u16_t)apiflags));
  LWIP_ERROR("tcp_write: arg == NULL (programmer violates API)",
 8011f0e:	68bb      	ldr	r3, [r7, #8]
 8011f10:	2b00      	cmp	r3, #0
 8011f12:	d109      	bne.n	8011f28 <tcp_write+0x9c>
 8011f14:	4b94      	ldr	r3, [pc, #592]	; (8012168 <tcp_write+0x2dc>)
 8011f16:	f240 12ad 	movw	r2, #429	; 0x1ad
 8011f1a:	4996      	ldr	r1, [pc, #600]	; (8012174 <tcp_write+0x2e8>)
 8011f1c:	4894      	ldr	r0, [pc, #592]	; (8012170 <tcp_write+0x2e4>)
 8011f1e:	f004 ff67 	bl	8016df0 <iprintf>
 8011f22:	f06f 030f 	mvn.w	r3, #15
 8011f26:	e30a      	b.n	801253e <tcp_write+0x6b2>
             arg != NULL, return ERR_ARG;);

  err = tcp_write_checks(pcb, len);
 8011f28:	88fb      	ldrh	r3, [r7, #6]
 8011f2a:	4619      	mov	r1, r3
 8011f2c:	68f8      	ldr	r0, [r7, #12]
 8011f2e:	f7ff ff33 	bl	8011d98 <tcp_write_checks>
 8011f32:	4603      	mov	r3, r0
 8011f34:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (err != ERR_OK) {
 8011f38:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f3c:	2b00      	cmp	r3, #0
 8011f3e:	d002      	beq.n	8011f46 <tcp_write+0xba>
    return err;
 8011f40:	f997 3023 	ldrsb.w	r3, [r7, #35]	; 0x23
 8011f44:	e2fb      	b.n	801253e <tcp_write+0x6b2>
  }
  queuelen = pcb->snd_queuelen;
 8011f46:	68fb      	ldr	r3, [r7, #12]
 8011f48:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8011f4c:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
    /* ensure that segments can hold at least one data byte... */
    mss_local = LWIP_MAX(mss_local, LWIP_TCP_OPT_LEN_TS + 1);
  } else
#endif /* LWIP_TCP_TIMESTAMPS */
  {
    optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8011f50:	2300      	movs	r3, #0
 8011f52:	f887 3022 	strb.w	r3, [r7, #34]	; 0x22
   *
   * pos records progress as data is segmented.
   */

  /* Find the tail of the unsent queue. */
  if (pcb->unsent != NULL) {
 8011f56:	68fb      	ldr	r3, [r7, #12]
 8011f58:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f5a:	2b00      	cmp	r3, #0
 8011f5c:	f000 80f6 	beq.w	801214c <tcp_write+0x2c0>
    u16_t space;
    u16_t unsent_optlen;

    /* @todo: this could be sped up by keeping last_unsent in the pcb */
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f60:	68fb      	ldr	r3, [r7, #12]
 8011f62:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8011f64:	653b      	str	r3, [r7, #80]	; 0x50
 8011f66:	e002      	b.n	8011f6e <tcp_write+0xe2>
         last_unsent = last_unsent->next);
 8011f68:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f6a:	681b      	ldr	r3, [r3, #0]
 8011f6c:	653b      	str	r3, [r7, #80]	; 0x50
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8011f6e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f70:	681b      	ldr	r3, [r3, #0]
 8011f72:	2b00      	cmp	r3, #0
 8011f74:	d1f8      	bne.n	8011f68 <tcp_write+0xdc>

    /* Usable space at the end of the last unsent segment */
    unsent_optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(last_unsent->flags, pcb);
 8011f76:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f78:	7a9b      	ldrb	r3, [r3, #10]
 8011f7a:	009b      	lsls	r3, r3, #2
 8011f7c:	b29b      	uxth	r3, r3
 8011f7e:	f003 0304 	and.w	r3, r3, #4
 8011f82:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("mss_local is too small", mss_local >= last_unsent->len + unsent_optlen);
 8011f84:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011f86:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011f88:	891b      	ldrh	r3, [r3, #8]
 8011f8a:	4619      	mov	r1, r3
 8011f8c:	8c3b      	ldrh	r3, [r7, #32]
 8011f8e:	440b      	add	r3, r1
 8011f90:	429a      	cmp	r2, r3
 8011f92:	da06      	bge.n	8011fa2 <tcp_write+0x116>
 8011f94:	4b74      	ldr	r3, [pc, #464]	; (8012168 <tcp_write+0x2dc>)
 8011f96:	f44f 72f3 	mov.w	r2, #486	; 0x1e6
 8011f9a:	4977      	ldr	r1, [pc, #476]	; (8012178 <tcp_write+0x2ec>)
 8011f9c:	4874      	ldr	r0, [pc, #464]	; (8012170 <tcp_write+0x2e4>)
 8011f9e:	f004 ff27 	bl	8016df0 <iprintf>
    space = mss_local - (last_unsent->len + unsent_optlen);
 8011fa2:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fa4:	891a      	ldrh	r2, [r3, #8]
 8011fa6:	8c3b      	ldrh	r3, [r7, #32]
 8011fa8:	4413      	add	r3, r2
 8011faa:	b29b      	uxth	r3, r3
 8011fac:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 8011fae:	1ad3      	subs	r3, r2, r3
 8011fb0:	877b      	strh	r3, [r7, #58]	; 0x3a
#if TCP_OVERSIZE_DBGCHECK
    /* check that pcb->unsent_oversize matches last_unsent->oversize_left */
    LWIP_ASSERT("unsent_oversize mismatch (pcb vs. last_unsent)",
                pcb->unsent_oversize == last_unsent->oversize_left);
#endif /* TCP_OVERSIZE_DBGCHECK */
    oversize = pcb->unsent_oversize;
 8011fb2:	68fb      	ldr	r3, [r7, #12]
 8011fb4:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8011fb8:	827b      	strh	r3, [r7, #18]
    if (oversize > 0) {
 8011fba:	8a7b      	ldrh	r3, [r7, #18]
 8011fbc:	2b00      	cmp	r3, #0
 8011fbe:	d026      	beq.n	801200e <tcp_write+0x182>
      LWIP_ASSERT("inconsistent oversize vs. space", oversize <= space);
 8011fc0:	8a7b      	ldrh	r3, [r7, #18]
 8011fc2:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fc4:	429a      	cmp	r2, r3
 8011fc6:	d206      	bcs.n	8011fd6 <tcp_write+0x14a>
 8011fc8:	4b67      	ldr	r3, [pc, #412]	; (8012168 <tcp_write+0x2dc>)
 8011fca:	f44f 72fc 	mov.w	r2, #504	; 0x1f8
 8011fce:	496b      	ldr	r1, [pc, #428]	; (801217c <tcp_write+0x2f0>)
 8011fd0:	4867      	ldr	r0, [pc, #412]	; (8012170 <tcp_write+0x2e4>)
 8011fd2:	f004 ff0d 	bl	8016df0 <iprintf>
      seg = last_unsent;
 8011fd6:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8011fd8:	64fb      	str	r3, [r7, #76]	; 0x4c
      oversize_used = LWIP_MIN(space, LWIP_MIN(oversize, len));
 8011fda:	8a7b      	ldrh	r3, [r7, #18]
 8011fdc:	88fa      	ldrh	r2, [r7, #6]
 8011fde:	4293      	cmp	r3, r2
 8011fe0:	bf28      	it	cs
 8011fe2:	4613      	movcs	r3, r2
 8011fe4:	b29b      	uxth	r3, r3
 8011fe6:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8011fe8:	4293      	cmp	r3, r2
 8011fea:	bf28      	it	cs
 8011fec:	4613      	movcs	r3, r2
 8011fee:	87fb      	strh	r3, [r7, #62]	; 0x3e
      pos += oversize_used;
 8011ff0:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8011ff4:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8011ff6:	4413      	add	r3, r2
 8011ff8:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
      oversize -= oversize_used;
 8011ffc:	8a7a      	ldrh	r2, [r7, #18]
 8011ffe:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012000:	1ad3      	subs	r3, r2, r3
 8012002:	b29b      	uxth	r3, r3
 8012004:	827b      	strh	r3, [r7, #18]
      space -= oversize_used;
 8012006:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012008:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801200a:	1ad3      	subs	r3, r2, r3
 801200c:	877b      	strh	r3, [r7, #58]	; 0x3a
    }
    /* now we are either finished or oversize is zero */
    LWIP_ASSERT("inconsistent oversize vs. len", (oversize == 0) || (pos == len));
 801200e:	8a7b      	ldrh	r3, [r7, #18]
 8012010:	2b00      	cmp	r3, #0
 8012012:	d00b      	beq.n	801202c <tcp_write+0x1a0>
 8012014:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012018:	88fb      	ldrh	r3, [r7, #6]
 801201a:	429a      	cmp	r2, r3
 801201c:	d006      	beq.n	801202c <tcp_write+0x1a0>
 801201e:	4b52      	ldr	r3, [pc, #328]	; (8012168 <tcp_write+0x2dc>)
 8012020:	f44f 7200 	mov.w	r2, #512	; 0x200
 8012024:	4956      	ldr	r1, [pc, #344]	; (8012180 <tcp_write+0x2f4>)
 8012026:	4852      	ldr	r0, [pc, #328]	; (8012170 <tcp_write+0x2e4>)
 8012028:	f004 fee2 	bl	8016df0 <iprintf>
     *
     * This phase is skipped for LWIP_NETIF_TX_SINGLE_PBUF as we could only execute
     * it after rexmit puts a segment from unacked to unsent and at this point,
     * oversize info is lost.
     */
    if ((pos < len) && (space > 0) && (last_unsent->len > 0)) {
 801202c:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012030:	88fb      	ldrh	r3, [r7, #6]
 8012032:	429a      	cmp	r2, r3
 8012034:	f080 8167 	bcs.w	8012306 <tcp_write+0x47a>
 8012038:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 801203a:	2b00      	cmp	r3, #0
 801203c:	f000 8163 	beq.w	8012306 <tcp_write+0x47a>
 8012040:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012042:	891b      	ldrh	r3, [r3, #8]
 8012044:	2b00      	cmp	r3, #0
 8012046:	f000 815e 	beq.w	8012306 <tcp_write+0x47a>
      u16_t seglen = LWIP_MIN(space, len - pos);
 801204a:	88fa      	ldrh	r2, [r7, #6]
 801204c:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012050:	1ad2      	subs	r2, r2, r3
 8012052:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8012054:	4293      	cmp	r3, r2
 8012056:	bfa8      	it	ge
 8012058:	4613      	movge	r3, r2
 801205a:	83fb      	strh	r3, [r7, #30]
      seg = last_unsent;
 801205c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801205e:	64fb      	str	r3, [r7, #76]	; 0x4c

      /* Create a pbuf with a copy or reference to seglen bytes. We
       * can use PBUF_RAW here since the data appears in the middle of
       * a segment. A header will never be prepended. */
      if (apiflags & TCP_WRITE_FLAG_COPY) {
 8012060:	797b      	ldrb	r3, [r7, #5]
 8012062:	f003 0301 	and.w	r3, r3, #1
 8012066:	2b00      	cmp	r3, #0
 8012068:	d027      	beq.n	80120ba <tcp_write+0x22e>
        /* Data is copied */
        if ((concat_p = tcp_pbuf_prealloc(PBUF_RAW, seglen, space, &oversize, pcb, apiflags, 1)) == NULL) {
 801206a:	f107 0012 	add.w	r0, r7, #18
 801206e:	8f7a      	ldrh	r2, [r7, #58]	; 0x3a
 8012070:	8bf9      	ldrh	r1, [r7, #30]
 8012072:	2301      	movs	r3, #1
 8012074:	9302      	str	r3, [sp, #8]
 8012076:	797b      	ldrb	r3, [r7, #5]
 8012078:	9301      	str	r3, [sp, #4]
 801207a:	68fb      	ldr	r3, [r7, #12]
 801207c:	9300      	str	r3, [sp, #0]
 801207e:	4603      	mov	r3, r0
 8012080:	2000      	movs	r0, #0
 8012082:	f7ff fe0f 	bl	8011ca4 <tcp_pbuf_prealloc>
 8012086:	6578      	str	r0, [r7, #84]	; 0x54
 8012088:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801208a:	2b00      	cmp	r3, #0
 801208c:	f000 8225 	beq.w	80124da <tcp_write+0x64e>
          goto memerr;
        }
#if TCP_OVERSIZE_DBGCHECK
        oversize_add = oversize;
#endif /* TCP_OVERSIZE_DBGCHECK */
        TCP_DATA_COPY2(concat_p->payload, (const u8_t *)arg + pos, seglen, &concat_chksum, &concat_chksum_swapped);
 8012090:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012092:	6858      	ldr	r0, [r3, #4]
 8012094:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012098:	68ba      	ldr	r2, [r7, #8]
 801209a:	4413      	add	r3, r2
 801209c:	8bfa      	ldrh	r2, [r7, #30]
 801209e:	4619      	mov	r1, r3
 80120a0:	f005 f822 	bl	80170e8 <memcpy>
#if TCP_CHECKSUM_ON_COPY
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
        queuelen += pbuf_clen(concat_p);
 80120a4:	6d78      	ldr	r0, [r7, #84]	; 0x54
 80120a6:	f7fb f971 	bl	800d38c <pbuf_clen>
 80120aa:	4603      	mov	r3, r0
 80120ac:	461a      	mov	r2, r3
 80120ae:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 80120b2:	4413      	add	r3, r2
 80120b4:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
 80120b8:	e041      	b.n	801213e <tcp_write+0x2b2>
      } else {
        /* Data is not copied */
        /* If the last unsent pbuf is of type PBUF_ROM, try to extend it. */
        struct pbuf *p;
        for (p = last_unsent->p; p->next != NULL; p = p->next);
 80120ba:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80120bc:	685b      	ldr	r3, [r3, #4]
 80120be:	637b      	str	r3, [r7, #52]	; 0x34
 80120c0:	e002      	b.n	80120c8 <tcp_write+0x23c>
 80120c2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120c4:	681b      	ldr	r3, [r3, #0]
 80120c6:	637b      	str	r3, [r7, #52]	; 0x34
 80120c8:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120ca:	681b      	ldr	r3, [r3, #0]
 80120cc:	2b00      	cmp	r3, #0
 80120ce:	d1f8      	bne.n	80120c2 <tcp_write+0x236>
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120d0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120d2:	7b1b      	ldrb	r3, [r3, #12]
 80120d4:	f003 03c0 	and.w	r3, r3, #192	; 0xc0
 80120d8:	2b00      	cmp	r3, #0
 80120da:	d115      	bne.n	8012108 <tcp_write+0x27c>
            (const u8_t *)p->payload + p->len == (const u8_t *)arg) {
 80120dc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80120de:	685b      	ldr	r3, [r3, #4]
 80120e0:	6b7a      	ldr	r2, [r7, #52]	; 0x34
 80120e2:	8952      	ldrh	r2, [r2, #10]
 80120e4:	4413      	add	r3, r2
        if (((p->type_internal & (PBUF_TYPE_FLAG_STRUCT_DATA_CONTIGUOUS | PBUF_TYPE_FLAG_DATA_VOLATILE)) == 0) &&
 80120e6:	68ba      	ldr	r2, [r7, #8]
 80120e8:	429a      	cmp	r2, r3
 80120ea:	d10d      	bne.n	8012108 <tcp_write+0x27c>
          LWIP_ASSERT("tcp_write: ROM pbufs cannot be oversized", pos == 0);
 80120ec:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80120f0:	2b00      	cmp	r3, #0
 80120f2:	d006      	beq.n	8012102 <tcp_write+0x276>
 80120f4:	4b1c      	ldr	r3, [pc, #112]	; (8012168 <tcp_write+0x2dc>)
 80120f6:	f240 2231 	movw	r2, #561	; 0x231
 80120fa:	4922      	ldr	r1, [pc, #136]	; (8012184 <tcp_write+0x2f8>)
 80120fc:	481c      	ldr	r0, [pc, #112]	; (8012170 <tcp_write+0x2e4>)
 80120fe:	f004 fe77 	bl	8016df0 <iprintf>
          extendlen = seglen;
 8012102:	8bfb      	ldrh	r3, [r7, #30]
 8012104:	87bb      	strh	r3, [r7, #60]	; 0x3c
 8012106:	e01a      	b.n	801213e <tcp_write+0x2b2>
        } else {
          if ((concat_p = pbuf_alloc(PBUF_RAW, seglen, PBUF_ROM)) == NULL) {
 8012108:	8bfb      	ldrh	r3, [r7, #30]
 801210a:	2201      	movs	r2, #1
 801210c:	4619      	mov	r1, r3
 801210e:	2000      	movs	r0, #0
 8012110:	f7fa fdca 	bl	800cca8 <pbuf_alloc>
 8012114:	6578      	str	r0, [r7, #84]	; 0x54
 8012116:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012118:	2b00      	cmp	r3, #0
 801211a:	f000 81e0 	beq.w	80124de <tcp_write+0x652>
            LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                        ("tcp_write: could not allocate memory for zero-copy pbuf\n"));
            goto memerr;
          }
          /* reference the non-volatile payload data */
          ((struct pbuf_rom *)concat_p)->payload = (const u8_t *)arg + pos;
 801211e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012122:	68ba      	ldr	r2, [r7, #8]
 8012124:	441a      	add	r2, r3
 8012126:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 8012128:	605a      	str	r2, [r3, #4]
          queuelen += pbuf_clen(concat_p);
 801212a:	6d78      	ldr	r0, [r7, #84]	; 0x54
 801212c:	f7fb f92e 	bl	800d38c <pbuf_clen>
 8012130:	4603      	mov	r3, r0
 8012132:	461a      	mov	r2, r3
 8012134:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012138:	4413      	add	r3, r2
 801213a:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
                           &concat_chksum, &concat_chksum_swapped);
        concat_chksummed += seglen;
#endif /* TCP_CHECKSUM_ON_COPY */
      }

      pos += seglen;
 801213e:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 8012142:	8bfb      	ldrh	r3, [r7, #30]
 8012144:	4413      	add	r3, r2
 8012146:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
 801214a:	e0dc      	b.n	8012306 <tcp_write+0x47a>
    }
#endif /* !LWIP_NETIF_TX_SINGLE_PBUF */
  } else {
#if TCP_OVERSIZE
    LWIP_ASSERT("unsent_oversize mismatch (pcb->unsent is NULL)",
 801214c:	68fb      	ldr	r3, [r7, #12]
 801214e:	f8b3 3068 	ldrh.w	r3, [r3, #104]	; 0x68
 8012152:	2b00      	cmp	r3, #0
 8012154:	f000 80d7 	beq.w	8012306 <tcp_write+0x47a>
 8012158:	4b03      	ldr	r3, [pc, #12]	; (8012168 <tcp_write+0x2dc>)
 801215a:	f240 224a 	movw	r2, #586	; 0x24a
 801215e:	490a      	ldr	r1, [pc, #40]	; (8012188 <tcp_write+0x2fc>)
 8012160:	4803      	ldr	r0, [pc, #12]	; (8012170 <tcp_write+0x2e4>)
 8012162:	f004 fe45 	bl	8016df0 <iprintf>
   * Phase 3: Create new segments.
   *
   * The new segments are chained together in the local 'queue'
   * variable, ready to be appended to pcb->unsent.
   */
  while (pos < len) {
 8012166:	e0ce      	b.n	8012306 <tcp_write+0x47a>
 8012168:	0801a334 	.word	0x0801a334
 801216c:	0801a4d4 	.word	0x0801a4d4
 8012170:	0801a388 	.word	0x0801a388
 8012174:	0801a4ec 	.word	0x0801a4ec
 8012178:	0801a520 	.word	0x0801a520
 801217c:	0801a538 	.word	0x0801a538
 8012180:	0801a558 	.word	0x0801a558
 8012184:	0801a578 	.word	0x0801a578
 8012188:	0801a5a4 	.word	0x0801a5a4
    struct pbuf *p;
    u16_t left = len - pos;
 801218c:	88fa      	ldrh	r2, [r7, #6]
 801218e:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012192:	1ad3      	subs	r3, r2, r3
 8012194:	83bb      	strh	r3, [r7, #28]
    u16_t max_len = mss_local - optlen;
 8012196:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 801219a:	b29b      	uxth	r3, r3
 801219c:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 801219e:	1ad3      	subs	r3, r2, r3
 80121a0:	837b      	strh	r3, [r7, #26]
    u16_t seglen = LWIP_MIN(left, max_len);
 80121a2:	8b7a      	ldrh	r2, [r7, #26]
 80121a4:	8bbb      	ldrh	r3, [r7, #28]
 80121a6:	4293      	cmp	r3, r2
 80121a8:	bf28      	it	cs
 80121aa:	4613      	movcs	r3, r2
 80121ac:	833b      	strh	r3, [r7, #24]
#if TCP_CHECKSUM_ON_COPY
    u16_t chksum = 0;
    u8_t chksum_swapped = 0;
#endif /* TCP_CHECKSUM_ON_COPY */

    if (apiflags & TCP_WRITE_FLAG_COPY) {
 80121ae:	797b      	ldrb	r3, [r7, #5]
 80121b0:	f003 0301 	and.w	r3, r3, #1
 80121b4:	2b00      	cmp	r3, #0
 80121b6:	d036      	beq.n	8012226 <tcp_write+0x39a>
      /* If copy is set, memory should be allocated and data copied
       * into pbuf */
      if ((p = tcp_pbuf_prealloc(PBUF_TRANSPORT, seglen + optlen, mss_local, &oversize, pcb, apiflags, queue == NULL)) == NULL) {
 80121b8:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 80121bc:	b29a      	uxth	r2, r3
 80121be:	8b3b      	ldrh	r3, [r7, #24]
 80121c0:	4413      	add	r3, r2
 80121c2:	b299      	uxth	r1, r3
 80121c4:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80121c6:	2b00      	cmp	r3, #0
 80121c8:	bf0c      	ite	eq
 80121ca:	2301      	moveq	r3, #1
 80121cc:	2300      	movne	r3, #0
 80121ce:	b2db      	uxtb	r3, r3
 80121d0:	f107 0012 	add.w	r0, r7, #18
 80121d4:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80121d6:	9302      	str	r3, [sp, #8]
 80121d8:	797b      	ldrb	r3, [r7, #5]
 80121da:	9301      	str	r3, [sp, #4]
 80121dc:	68fb      	ldr	r3, [r7, #12]
 80121de:	9300      	str	r3, [sp, #0]
 80121e0:	4603      	mov	r3, r0
 80121e2:	2036      	movs	r0, #54	; 0x36
 80121e4:	f7ff fd5e 	bl	8011ca4 <tcp_pbuf_prealloc>
 80121e8:	6338      	str	r0, [r7, #48]	; 0x30
 80121ea:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121ec:	2b00      	cmp	r3, #0
 80121ee:	f000 8178 	beq.w	80124e2 <tcp_write+0x656>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write : could not allocate memory for pbuf copy size %"U16_F"\n", seglen));
        goto memerr;
      }
      LWIP_ASSERT("tcp_write: check that first pbuf can hold the complete seglen",
 80121f2:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80121f4:	895b      	ldrh	r3, [r3, #10]
 80121f6:	8b3a      	ldrh	r2, [r7, #24]
 80121f8:	429a      	cmp	r2, r3
 80121fa:	d906      	bls.n	801220a <tcp_write+0x37e>
 80121fc:	4b8c      	ldr	r3, [pc, #560]	; (8012430 <tcp_write+0x5a4>)
 80121fe:	f240 2266 	movw	r2, #614	; 0x266
 8012202:	498c      	ldr	r1, [pc, #560]	; (8012434 <tcp_write+0x5a8>)
 8012204:	488c      	ldr	r0, [pc, #560]	; (8012438 <tcp_write+0x5ac>)
 8012206:	f004 fdf3 	bl	8016df0 <iprintf>
                  (p->len >= seglen));
      TCP_DATA_COPY2((char *)p->payload + optlen, (const u8_t *)arg + pos, seglen, &chksum, &chksum_swapped);
 801220a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801220c:	685a      	ldr	r2, [r3, #4]
 801220e:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012212:	18d0      	adds	r0, r2, r3
 8012214:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012218:	68ba      	ldr	r2, [r7, #8]
 801221a:	4413      	add	r3, r2
 801221c:	8b3a      	ldrh	r2, [r7, #24]
 801221e:	4619      	mov	r1, r3
 8012220:	f004 ff62 	bl	80170e8 <memcpy>
 8012224:	e02f      	b.n	8012286 <tcp_write+0x3fa>
       * sent out on the link (as it has to be ACKed by the remote
       * party) we can safely use PBUF_ROM instead of PBUF_REF here.
       */
      struct pbuf *p2;
#if TCP_OVERSIZE
      LWIP_ASSERT("oversize == 0", oversize == 0);
 8012226:	8a7b      	ldrh	r3, [r7, #18]
 8012228:	2b00      	cmp	r3, #0
 801222a:	d006      	beq.n	801223a <tcp_write+0x3ae>
 801222c:	4b80      	ldr	r3, [pc, #512]	; (8012430 <tcp_write+0x5a4>)
 801222e:	f240 2271 	movw	r2, #625	; 0x271
 8012232:	4982      	ldr	r1, [pc, #520]	; (801243c <tcp_write+0x5b0>)
 8012234:	4880      	ldr	r0, [pc, #512]	; (8012438 <tcp_write+0x5ac>)
 8012236:	f004 fddb 	bl	8016df0 <iprintf>
#endif /* TCP_OVERSIZE */
      if ((p2 = pbuf_alloc(PBUF_TRANSPORT, seglen, PBUF_ROM)) == NULL) {
 801223a:	8b3b      	ldrh	r3, [r7, #24]
 801223c:	2201      	movs	r2, #1
 801223e:	4619      	mov	r1, r3
 8012240:	2036      	movs	r0, #54	; 0x36
 8012242:	f7fa fd31 	bl	800cca8 <pbuf_alloc>
 8012246:	6178      	str	r0, [r7, #20]
 8012248:	697b      	ldr	r3, [r7, #20]
 801224a:	2b00      	cmp	r3, #0
 801224c:	f000 814b 	beq.w	80124e6 <tcp_write+0x65a>
        chksum_swapped = 1;
        chksum = SWAP_BYTES_IN_WORD(chksum);
      }
#endif /* TCP_CHECKSUM_ON_COPY */
      /* reference the non-volatile payload data */
      ((struct pbuf_rom *)p2)->payload = (const u8_t *)arg + pos;
 8012250:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8012254:	68ba      	ldr	r2, [r7, #8]
 8012256:	441a      	add	r2, r3
 8012258:	697b      	ldr	r3, [r7, #20]
 801225a:	605a      	str	r2, [r3, #4]

      /* Second, allocate a pbuf for the headers. */
      if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 801225c:	f897 3022 	ldrb.w	r3, [r7, #34]	; 0x22
 8012260:	b29b      	uxth	r3, r3
 8012262:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012266:	4619      	mov	r1, r3
 8012268:	2036      	movs	r0, #54	; 0x36
 801226a:	f7fa fd1d 	bl	800cca8 <pbuf_alloc>
 801226e:	6338      	str	r0, [r7, #48]	; 0x30
 8012270:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8012272:	2b00      	cmp	r3, #0
 8012274:	d103      	bne.n	801227e <tcp_write+0x3f2>
        /* If allocation fails, we have to deallocate the data pbuf as
         * well. */
        pbuf_free(p2);
 8012276:	6978      	ldr	r0, [r7, #20]
 8012278:	f7fa fffa 	bl	800d270 <pbuf_free>
        LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: could not allocate memory for header pbuf\n"));
        goto memerr;
 801227c:	e136      	b.n	80124ec <tcp_write+0x660>
      }
      /* Concatenate the headers and data pbufs together. */
      pbuf_cat(p/*header*/, p2/*data*/);
 801227e:	6979      	ldr	r1, [r7, #20]
 8012280:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012282:	f7fb f8c3 	bl	800d40c <pbuf_cat>
    }

    queuelen += pbuf_clen(p);
 8012286:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8012288:	f7fb f880 	bl	800d38c <pbuf_clen>
 801228c:	4603      	mov	r3, r0
 801228e:	461a      	mov	r2, r3
 8012290:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8012294:	4413      	add	r3, r2
 8012296:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40

    /* Now that there are more segments queued, we check again if the
     * length of the queue exceeds the configured maximum or
     * overflows. */
    if (queuelen > LWIP_MIN(TCP_SND_QUEUELEN, TCP_SNDQUEUELEN_OVERFLOW)) {
 801229a:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 801229e:	2b09      	cmp	r3, #9
 80122a0:	d903      	bls.n	80122aa <tcp_write+0x41e>
      LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_write: queue too long %"U16_F" (%d)\n",
                  queuelen, (int)TCP_SND_QUEUELEN));
      pbuf_free(p);
 80122a2:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80122a4:	f7fa ffe4 	bl	800d270 <pbuf_free>
      goto memerr;
 80122a8:	e120      	b.n	80124ec <tcp_write+0x660>
    }

    if ((seg = tcp_create_segment(pcb, p, 0, pcb->snd_lbb + pos, optflags)) == NULL) {
 80122aa:	68fb      	ldr	r3, [r7, #12]
 80122ac:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 80122ae:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80122b2:	441a      	add	r2, r3
 80122b4:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80122b8:	9300      	str	r3, [sp, #0]
 80122ba:	4613      	mov	r3, r2
 80122bc:	2200      	movs	r2, #0
 80122be:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80122c0:	68f8      	ldr	r0, [r7, #12]
 80122c2:	f7ff fc51 	bl	8011b68 <tcp_create_segment>
 80122c6:	64f8      	str	r0, [r7, #76]	; 0x4c
 80122c8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122ca:	2b00      	cmp	r3, #0
 80122cc:	f000 810d 	beq.w	80124ea <tcp_write+0x65e>
    seg->chksum_swapped = chksum_swapped;
    seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

    /* first segment of to-be-queued data? */
    if (queue == NULL) {
 80122d0:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 80122d2:	2b00      	cmp	r3, #0
 80122d4:	d102      	bne.n	80122dc <tcp_write+0x450>
      queue = seg;
 80122d6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122d8:	647b      	str	r3, [r7, #68]	; 0x44
 80122da:	e00c      	b.n	80122f6 <tcp_write+0x46a>
    } else {
      /* Attach the segment to the end of the queued segments */
      LWIP_ASSERT("prev_seg != NULL", prev_seg != NULL);
 80122dc:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122de:	2b00      	cmp	r3, #0
 80122e0:	d106      	bne.n	80122f0 <tcp_write+0x464>
 80122e2:	4b53      	ldr	r3, [pc, #332]	; (8012430 <tcp_write+0x5a4>)
 80122e4:	f240 22ab 	movw	r2, #683	; 0x2ab
 80122e8:	4955      	ldr	r1, [pc, #340]	; (8012440 <tcp_write+0x5b4>)
 80122ea:	4853      	ldr	r0, [pc, #332]	; (8012438 <tcp_write+0x5ac>)
 80122ec:	f004 fd80 	bl	8016df0 <iprintf>
      prev_seg->next = seg;
 80122f0:	6cbb      	ldr	r3, [r7, #72]	; 0x48
 80122f2:	6cfa      	ldr	r2, [r7, #76]	; 0x4c
 80122f4:	601a      	str	r2, [r3, #0]
    }
    /* remember last segment of to-be-queued data for next iteration */
    prev_seg = seg;
 80122f6:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80122f8:	64bb      	str	r3, [r7, #72]	; 0x48

    LWIP_DEBUGF(TCP_OUTPUT_DEBUG | LWIP_DBG_TRACE, ("tcp_write: queueing %"U32_F":%"U32_F"\n",
                lwip_ntohl(seg->tcphdr->seqno),
                lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg)));

    pos += seglen;
 80122fa:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80122fe:	8b3b      	ldrh	r3, [r7, #24]
 8012300:	4413      	add	r3, r2
 8012302:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
  while (pos < len) {
 8012306:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801230a:	88fb      	ldrh	r3, [r7, #6]
 801230c:	429a      	cmp	r2, r3
 801230e:	f4ff af3d 	bcc.w	801218c <tcp_write+0x300>
  /*
   * Phase 1: If data has been added to the preallocated tail of
   * last_unsent, we update the length fields of the pbuf chain.
   */
#if TCP_OVERSIZE
  if (oversize_used > 0) {
 8012312:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012314:	2b00      	cmp	r3, #0
 8012316:	d02c      	beq.n	8012372 <tcp_write+0x4e6>
    struct pbuf *p;
    /* Bump tot_len of whole chain, len of tail */
    for (p = last_unsent->p; p; p = p->next) {
 8012318:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801231a:	685b      	ldr	r3, [r3, #4]
 801231c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801231e:	e01e      	b.n	801235e <tcp_write+0x4d2>
      p->tot_len += oversize_used;
 8012320:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012322:	891a      	ldrh	r2, [r3, #8]
 8012324:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012326:	4413      	add	r3, r2
 8012328:	b29a      	uxth	r2, r3
 801232a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801232c:	811a      	strh	r2, [r3, #8]
      if (p->next == NULL) {
 801232e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012330:	681b      	ldr	r3, [r3, #0]
 8012332:	2b00      	cmp	r3, #0
 8012334:	d110      	bne.n	8012358 <tcp_write+0x4cc>
        TCP_DATA_COPY((char *)p->payload + p->len, arg, oversize_used, last_unsent);
 8012336:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012338:	685b      	ldr	r3, [r3, #4]
 801233a:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 801233c:	8952      	ldrh	r2, [r2, #10]
 801233e:	4413      	add	r3, r2
 8012340:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8012342:	68b9      	ldr	r1, [r7, #8]
 8012344:	4618      	mov	r0, r3
 8012346:	f004 fecf 	bl	80170e8 <memcpy>
        p->len += oversize_used;
 801234a:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801234c:	895a      	ldrh	r2, [r3, #10]
 801234e:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8012350:	4413      	add	r3, r2
 8012352:	b29a      	uxth	r2, r3
 8012354:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012356:	815a      	strh	r2, [r3, #10]
    for (p = last_unsent->p; p; p = p->next) {
 8012358:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 801235a:	681b      	ldr	r3, [r3, #0]
 801235c:	62fb      	str	r3, [r7, #44]	; 0x2c
 801235e:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8012360:	2b00      	cmp	r3, #0
 8012362:	d1dd      	bne.n	8012320 <tcp_write+0x494>
      }
    }
    last_unsent->len += oversize_used;
 8012364:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012366:	891a      	ldrh	r2, [r3, #8]
 8012368:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 801236a:	4413      	add	r3, r2
 801236c:	b29a      	uxth	r2, r3
 801236e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012370:	811a      	strh	r2, [r3, #8]
    LWIP_ASSERT("last_unsent->oversize_left >= oversize_used",
                last_unsent->oversize_left >= oversize_used);
    last_unsent->oversize_left -= oversize_used;
#endif /* TCP_OVERSIZE_DBGCHECK */
  }
  pcb->unsent_oversize = oversize;
 8012372:	8a7a      	ldrh	r2, [r7, #18]
 8012374:	68fb      	ldr	r3, [r7, #12]
 8012376:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68

  /*
   * Phase 2: concat_p can be concatenated onto last_unsent->p, unless we
   * determined that the last ROM pbuf can be extended to include the new data.
   */
  if (concat_p != NULL) {
 801237a:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 801237c:	2b00      	cmp	r3, #0
 801237e:	d018      	beq.n	80123b2 <tcp_write+0x526>
    LWIP_ASSERT("tcp_write: cannot concatenate when pcb->unsent is empty",
 8012380:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012382:	2b00      	cmp	r3, #0
 8012384:	d106      	bne.n	8012394 <tcp_write+0x508>
 8012386:	4b2a      	ldr	r3, [pc, #168]	; (8012430 <tcp_write+0x5a4>)
 8012388:	f44f 7238 	mov.w	r2, #736	; 0x2e0
 801238c:	492d      	ldr	r1, [pc, #180]	; (8012444 <tcp_write+0x5b8>)
 801238e:	482a      	ldr	r0, [pc, #168]	; (8012438 <tcp_write+0x5ac>)
 8012390:	f004 fd2e 	bl	8016df0 <iprintf>
                (last_unsent != NULL));
    pbuf_cat(last_unsent->p, concat_p);
 8012394:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012396:	685b      	ldr	r3, [r3, #4]
 8012398:	6d79      	ldr	r1, [r7, #84]	; 0x54
 801239a:	4618      	mov	r0, r3
 801239c:	f7fb f836 	bl	800d40c <pbuf_cat>
    last_unsent->len += concat_p->tot_len;
 80123a0:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123a2:	891a      	ldrh	r2, [r3, #8]
 80123a4:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80123a6:	891b      	ldrh	r3, [r3, #8]
 80123a8:	4413      	add	r3, r2
 80123aa:	b29a      	uxth	r2, r3
 80123ac:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ae:	811a      	strh	r2, [r3, #8]
 80123b0:	e037      	b.n	8012422 <tcp_write+0x596>
  } else if (extendlen > 0) {
 80123b2:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123b4:	2b00      	cmp	r3, #0
 80123b6:	d034      	beq.n	8012422 <tcp_write+0x596>
    struct pbuf *p;
    LWIP_ASSERT("tcp_write: extension of reference requires reference",
 80123b8:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123ba:	2b00      	cmp	r3, #0
 80123bc:	d003      	beq.n	80123c6 <tcp_write+0x53a>
 80123be:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123c0:	685b      	ldr	r3, [r3, #4]
 80123c2:	2b00      	cmp	r3, #0
 80123c4:	d106      	bne.n	80123d4 <tcp_write+0x548>
 80123c6:	4b1a      	ldr	r3, [pc, #104]	; (8012430 <tcp_write+0x5a4>)
 80123c8:	f240 22e6 	movw	r2, #742	; 0x2e6
 80123cc:	491e      	ldr	r1, [pc, #120]	; (8012448 <tcp_write+0x5bc>)
 80123ce:	481a      	ldr	r0, [pc, #104]	; (8012438 <tcp_write+0x5ac>)
 80123d0:	f004 fd0e 	bl	8016df0 <iprintf>
                last_unsent != NULL && last_unsent->p != NULL);
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123d4:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 80123d6:	685b      	ldr	r3, [r3, #4]
 80123d8:	62bb      	str	r3, [r7, #40]	; 0x28
 80123da:	e009      	b.n	80123f0 <tcp_write+0x564>
      p->tot_len += extendlen;
 80123dc:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123de:	891a      	ldrh	r2, [r3, #8]
 80123e0:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123e2:	4413      	add	r3, r2
 80123e4:	b29a      	uxth	r2, r3
 80123e6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123e8:	811a      	strh	r2, [r3, #8]
    for (p = last_unsent->p; p->next != NULL; p = p->next) {
 80123ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123ec:	681b      	ldr	r3, [r3, #0]
 80123ee:	62bb      	str	r3, [r7, #40]	; 0x28
 80123f0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123f2:	681b      	ldr	r3, [r3, #0]
 80123f4:	2b00      	cmp	r3, #0
 80123f6:	d1f1      	bne.n	80123dc <tcp_write+0x550>
    }
    p->tot_len += extendlen;
 80123f8:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80123fa:	891a      	ldrh	r2, [r3, #8]
 80123fc:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80123fe:	4413      	add	r3, r2
 8012400:	b29a      	uxth	r2, r3
 8012402:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012404:	811a      	strh	r2, [r3, #8]
    p->len += extendlen;
 8012406:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012408:	895a      	ldrh	r2, [r3, #10]
 801240a:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801240c:	4413      	add	r3, r2
 801240e:	b29a      	uxth	r2, r3
 8012410:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8012412:	815a      	strh	r2, [r3, #10]
    last_unsent->len += extendlen;
 8012414:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012416:	891a      	ldrh	r2, [r3, #8]
 8012418:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 801241a:	4413      	add	r3, r2
 801241c:	b29a      	uxth	r2, r3
 801241e:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012420:	811a      	strh	r2, [r3, #8]

  /*
   * Phase 3: Append queue to pcb->unsent. Queue may be NULL, but that
   * is harmless
   */
  if (last_unsent == NULL) {
 8012422:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 8012424:	2b00      	cmp	r3, #0
 8012426:	d111      	bne.n	801244c <tcp_write+0x5c0>
    pcb->unsent = queue;
 8012428:	68fb      	ldr	r3, [r7, #12]
 801242a:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 801242c:	66da      	str	r2, [r3, #108]	; 0x6c
 801242e:	e010      	b.n	8012452 <tcp_write+0x5c6>
 8012430:	0801a334 	.word	0x0801a334
 8012434:	0801a5d4 	.word	0x0801a5d4
 8012438:	0801a388 	.word	0x0801a388
 801243c:	0801a614 	.word	0x0801a614
 8012440:	0801a624 	.word	0x0801a624
 8012444:	0801a638 	.word	0x0801a638
 8012448:	0801a670 	.word	0x0801a670
  } else {
    last_unsent->next = queue;
 801244c:	6d3b      	ldr	r3, [r7, #80]	; 0x50
 801244e:	6c7a      	ldr	r2, [r7, #68]	; 0x44
 8012450:	601a      	str	r2, [r3, #0]
  }

  /*
   * Finally update the pcb state.
   */
  pcb->snd_lbb += len;
 8012452:	68fb      	ldr	r3, [r7, #12]
 8012454:	6dda      	ldr	r2, [r3, #92]	; 0x5c
 8012456:	88fb      	ldrh	r3, [r7, #6]
 8012458:	441a      	add	r2, r3
 801245a:	68fb      	ldr	r3, [r7, #12]
 801245c:	65da      	str	r2, [r3, #92]	; 0x5c
  pcb->snd_buf -= len;
 801245e:	68fb      	ldr	r3, [r7, #12]
 8012460:	f8b3 2064 	ldrh.w	r2, [r3, #100]	; 0x64
 8012464:	88fb      	ldrh	r3, [r7, #6]
 8012466:	1ad3      	subs	r3, r2, r3
 8012468:	b29a      	uxth	r2, r3
 801246a:	68fb      	ldr	r3, [r7, #12]
 801246c:	f8a3 2064 	strh.w	r2, [r3, #100]	; 0x64
  pcb->snd_queuelen = queuelen;
 8012470:	68fb      	ldr	r3, [r7, #12]
 8012472:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 8012476:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_write: %"S16_F" (after enqueued)\n",
                               pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 801247a:	68fb      	ldr	r3, [r7, #12]
 801247c:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012480:	2b00      	cmp	r3, #0
 8012482:	d00e      	beq.n	80124a2 <tcp_write+0x616>
    LWIP_ASSERT("tcp_write: valid queue length",
 8012484:	68fb      	ldr	r3, [r7, #12]
 8012486:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012488:	2b00      	cmp	r3, #0
 801248a:	d10a      	bne.n	80124a2 <tcp_write+0x616>
 801248c:	68fb      	ldr	r3, [r7, #12]
 801248e:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012490:	2b00      	cmp	r3, #0
 8012492:	d106      	bne.n	80124a2 <tcp_write+0x616>
 8012494:	4b2c      	ldr	r3, [pc, #176]	; (8012548 <tcp_write+0x6bc>)
 8012496:	f240 3212 	movw	r2, #786	; 0x312
 801249a:	492c      	ldr	r1, [pc, #176]	; (801254c <tcp_write+0x6c0>)
 801249c:	482c      	ldr	r0, [pc, #176]	; (8012550 <tcp_write+0x6c4>)
 801249e:	f004 fca7 	bl	8016df0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  /* Set the PSH flag in the last segment that we enqueued. */
  if (seg != NULL && seg->tcphdr != NULL && ((apiflags & TCP_WRITE_FLAG_MORE) == 0)) {
 80124a2:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124a4:	2b00      	cmp	r3, #0
 80124a6:	d016      	beq.n	80124d6 <tcp_write+0x64a>
 80124a8:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124aa:	68db      	ldr	r3, [r3, #12]
 80124ac:	2b00      	cmp	r3, #0
 80124ae:	d012      	beq.n	80124d6 <tcp_write+0x64a>
 80124b0:	797b      	ldrb	r3, [r7, #5]
 80124b2:	f003 0302 	and.w	r3, r3, #2
 80124b6:	2b00      	cmp	r3, #0
 80124b8:	d10d      	bne.n	80124d6 <tcp_write+0x64a>
    TCPH_SET_FLAG(seg->tcphdr, TCP_PSH);
 80124ba:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124bc:	68db      	ldr	r3, [r3, #12]
 80124be:	899b      	ldrh	r3, [r3, #12]
 80124c0:	b29c      	uxth	r4, r3
 80124c2:	2008      	movs	r0, #8
 80124c4:	f7f9 fae2 	bl	800ba8c <lwip_htons>
 80124c8:	4603      	mov	r3, r0
 80124ca:	461a      	mov	r2, r3
 80124cc:	6cfb      	ldr	r3, [r7, #76]	; 0x4c
 80124ce:	68db      	ldr	r3, [r3, #12]
 80124d0:	4322      	orrs	r2, r4
 80124d2:	b292      	uxth	r2, r2
 80124d4:	819a      	strh	r2, [r3, #12]
  }

  return ERR_OK;
 80124d6:	2300      	movs	r3, #0
 80124d8:	e031      	b.n	801253e <tcp_write+0x6b2>
          goto memerr;
 80124da:	bf00      	nop
 80124dc:	e006      	b.n	80124ec <tcp_write+0x660>
            goto memerr;
 80124de:	bf00      	nop
 80124e0:	e004      	b.n	80124ec <tcp_write+0x660>
        goto memerr;
 80124e2:	bf00      	nop
 80124e4:	e002      	b.n	80124ec <tcp_write+0x660>
        goto memerr;
 80124e6:	bf00      	nop
 80124e8:	e000      	b.n	80124ec <tcp_write+0x660>
      goto memerr;
 80124ea:	bf00      	nop
memerr:
  tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80124ec:	68fb      	ldr	r3, [r7, #12]
 80124ee:	8b5b      	ldrh	r3, [r3, #26]
 80124f0:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80124f4:	b29a      	uxth	r2, r3
 80124f6:	68fb      	ldr	r3, [r7, #12]
 80124f8:	835a      	strh	r2, [r3, #26]
  TCP_STATS_INC(tcp.memerr);

  if (concat_p != NULL) {
 80124fa:	6d7b      	ldr	r3, [r7, #84]	; 0x54
 80124fc:	2b00      	cmp	r3, #0
 80124fe:	d002      	beq.n	8012506 <tcp_write+0x67a>
    pbuf_free(concat_p);
 8012500:	6d78      	ldr	r0, [r7, #84]	; 0x54
 8012502:	f7fa feb5 	bl	800d270 <pbuf_free>
  }
  if (queue != NULL) {
 8012506:	6c7b      	ldr	r3, [r7, #68]	; 0x44
 8012508:	2b00      	cmp	r3, #0
 801250a:	d002      	beq.n	8012512 <tcp_write+0x686>
    tcp_segs_free(queue);
 801250c:	6c78      	ldr	r0, [r7, #68]	; 0x44
 801250e:	f7fc fb6b 	bl	800ebe8 <tcp_segs_free>
  }
  if (pcb->snd_queuelen != 0) {
 8012512:	68fb      	ldr	r3, [r7, #12]
 8012514:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012518:	2b00      	cmp	r3, #0
 801251a:	d00e      	beq.n	801253a <tcp_write+0x6ae>
    LWIP_ASSERT("tcp_write: valid queue length", pcb->unacked != NULL ||
 801251c:	68fb      	ldr	r3, [r7, #12]
 801251e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012520:	2b00      	cmp	r3, #0
 8012522:	d10a      	bne.n	801253a <tcp_write+0x6ae>
 8012524:	68fb      	ldr	r3, [r7, #12]
 8012526:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012528:	2b00      	cmp	r3, #0
 801252a:	d106      	bne.n	801253a <tcp_write+0x6ae>
 801252c:	4b06      	ldr	r3, [pc, #24]	; (8012548 <tcp_write+0x6bc>)
 801252e:	f240 3227 	movw	r2, #807	; 0x327
 8012532:	4906      	ldr	r1, [pc, #24]	; (801254c <tcp_write+0x6c0>)
 8012534:	4806      	ldr	r0, [pc, #24]	; (8012550 <tcp_write+0x6c4>)
 8012536:	f004 fc5b 	bl	8016df0 <iprintf>
                pcb->unsent != NULL);
  }
  LWIP_DEBUGF(TCP_QLEN_DEBUG | LWIP_DBG_STATE, ("tcp_write: %"S16_F" (with mem err)\n", pcb->snd_queuelen));
  return ERR_MEM;
 801253a:	f04f 33ff 	mov.w	r3, #4294967295
}
 801253e:	4618      	mov	r0, r3
 8012540:	375c      	adds	r7, #92	; 0x5c
 8012542:	46bd      	mov	sp, r7
 8012544:	bd90      	pop	{r4, r7, pc}
 8012546:	bf00      	nop
 8012548:	0801a334 	.word	0x0801a334
 801254c:	0801a6a8 	.word	0x0801a6a8
 8012550:	0801a388 	.word	0x0801a388

08012554 <tcp_split_unsent_seg>:
 * @param pcb the tcp_pcb for which to split the unsent head
 * @param split the amount of payload to remain in the head
 */
err_t
tcp_split_unsent_seg(struct tcp_pcb *pcb, u16_t split)
{
 8012554:	b590      	push	{r4, r7, lr}
 8012556:	b08b      	sub	sp, #44	; 0x2c
 8012558:	af02      	add	r7, sp, #8
 801255a:	6078      	str	r0, [r7, #4]
 801255c:	460b      	mov	r3, r1
 801255e:	807b      	strh	r3, [r7, #2]
  struct tcp_seg *seg = NULL, *useg = NULL;
 8012560:	2300      	movs	r3, #0
 8012562:	61fb      	str	r3, [r7, #28]
 8012564:	2300      	movs	r3, #0
 8012566:	617b      	str	r3, [r7, #20]
  struct pbuf *p = NULL;
 8012568:	2300      	movs	r3, #0
 801256a:	613b      	str	r3, [r7, #16]
  u16_t chksum = 0;
  u8_t chksum_swapped = 0;
  struct pbuf *q;
#endif /* TCP_CHECKSUM_ON_COPY */

  LWIP_ASSERT("tcp_split_unsent_seg: invalid pcb", pcb != NULL);
 801256c:	687b      	ldr	r3, [r7, #4]
 801256e:	2b00      	cmp	r3, #0
 8012570:	d106      	bne.n	8012580 <tcp_split_unsent_seg+0x2c>
 8012572:	4b95      	ldr	r3, [pc, #596]	; (80127c8 <tcp_split_unsent_seg+0x274>)
 8012574:	f240 324b 	movw	r2, #843	; 0x34b
 8012578:	4994      	ldr	r1, [pc, #592]	; (80127cc <tcp_split_unsent_seg+0x278>)
 801257a:	4895      	ldr	r0, [pc, #596]	; (80127d0 <tcp_split_unsent_seg+0x27c>)
 801257c:	f004 fc38 	bl	8016df0 <iprintf>

  useg = pcb->unsent;
 8012580:	687b      	ldr	r3, [r7, #4]
 8012582:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012584:	617b      	str	r3, [r7, #20]
  if (useg == NULL) {
 8012586:	697b      	ldr	r3, [r7, #20]
 8012588:	2b00      	cmp	r3, #0
 801258a:	d102      	bne.n	8012592 <tcp_split_unsent_seg+0x3e>
    return ERR_MEM;
 801258c:	f04f 33ff 	mov.w	r3, #4294967295
 8012590:	e116      	b.n	80127c0 <tcp_split_unsent_seg+0x26c>
  }

  if (split == 0) {
 8012592:	887b      	ldrh	r3, [r7, #2]
 8012594:	2b00      	cmp	r3, #0
 8012596:	d109      	bne.n	80125ac <tcp_split_unsent_seg+0x58>
    LWIP_ASSERT("Can't split segment into length 0", 0);
 8012598:	4b8b      	ldr	r3, [pc, #556]	; (80127c8 <tcp_split_unsent_seg+0x274>)
 801259a:	f240 3253 	movw	r2, #851	; 0x353
 801259e:	498d      	ldr	r1, [pc, #564]	; (80127d4 <tcp_split_unsent_seg+0x280>)
 80125a0:	488b      	ldr	r0, [pc, #556]	; (80127d0 <tcp_split_unsent_seg+0x27c>)
 80125a2:	f004 fc25 	bl	8016df0 <iprintf>
    return ERR_VAL;
 80125a6:	f06f 0305 	mvn.w	r3, #5
 80125aa:	e109      	b.n	80127c0 <tcp_split_unsent_seg+0x26c>
  }

  if (useg->len <= split) {
 80125ac:	697b      	ldr	r3, [r7, #20]
 80125ae:	891b      	ldrh	r3, [r3, #8]
 80125b0:	887a      	ldrh	r2, [r7, #2]
 80125b2:	429a      	cmp	r2, r3
 80125b4:	d301      	bcc.n	80125ba <tcp_split_unsent_seg+0x66>
    return ERR_OK;
 80125b6:	2300      	movs	r3, #0
 80125b8:	e102      	b.n	80127c0 <tcp_split_unsent_seg+0x26c>
  }

  LWIP_ASSERT("split <= mss", split <= pcb->mss);
 80125ba:	687b      	ldr	r3, [r7, #4]
 80125bc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80125be:	887a      	ldrh	r2, [r7, #2]
 80125c0:	429a      	cmp	r2, r3
 80125c2:	d906      	bls.n	80125d2 <tcp_split_unsent_seg+0x7e>
 80125c4:	4b80      	ldr	r3, [pc, #512]	; (80127c8 <tcp_split_unsent_seg+0x274>)
 80125c6:	f240 325b 	movw	r2, #859	; 0x35b
 80125ca:	4983      	ldr	r1, [pc, #524]	; (80127d8 <tcp_split_unsent_seg+0x284>)
 80125cc:	4880      	ldr	r0, [pc, #512]	; (80127d0 <tcp_split_unsent_seg+0x27c>)
 80125ce:	f004 fc0f 	bl	8016df0 <iprintf>
  LWIP_ASSERT("useg->len > 0", useg->len > 0);
 80125d2:	697b      	ldr	r3, [r7, #20]
 80125d4:	891b      	ldrh	r3, [r3, #8]
 80125d6:	2b00      	cmp	r3, #0
 80125d8:	d106      	bne.n	80125e8 <tcp_split_unsent_seg+0x94>
 80125da:	4b7b      	ldr	r3, [pc, #492]	; (80127c8 <tcp_split_unsent_seg+0x274>)
 80125dc:	f44f 7257 	mov.w	r2, #860	; 0x35c
 80125e0:	497e      	ldr	r1, [pc, #504]	; (80127dc <tcp_split_unsent_seg+0x288>)
 80125e2:	487b      	ldr	r0, [pc, #492]	; (80127d0 <tcp_split_unsent_seg+0x27c>)
 80125e4:	f004 fc04 	bl	8016df0 <iprintf>
   * to split this packet so we may actually exceed the max value by
   * one!
   */
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue: split_unsent_seg: %u\n", (unsigned int)pcb->snd_queuelen));

  optflags = useg->flags;
 80125e8:	697b      	ldr	r3, [r7, #20]
 80125ea:	7a9b      	ldrb	r3, [r3, #10]
 80125ec:	73fb      	strb	r3, [r7, #15]
#if TCP_CHECKSUM_ON_COPY
  /* Remove since checksum is not stored until after tcp_create_segment() */
  optflags &= ~TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */
  optlen = LWIP_TCP_OPT_LENGTH(optflags);
 80125ee:	7bfb      	ldrb	r3, [r7, #15]
 80125f0:	009b      	lsls	r3, r3, #2
 80125f2:	b2db      	uxtb	r3, r3
 80125f4:	f003 0304 	and.w	r3, r3, #4
 80125f8:	73bb      	strb	r3, [r7, #14]
  remainder = useg->len - split;
 80125fa:	697b      	ldr	r3, [r7, #20]
 80125fc:	891a      	ldrh	r2, [r3, #8]
 80125fe:	887b      	ldrh	r3, [r7, #2]
 8012600:	1ad3      	subs	r3, r2, r3
 8012602:	81bb      	strh	r3, [r7, #12]

  /* Create new pbuf for the remainder of the split */
  p = pbuf_alloc(PBUF_TRANSPORT, remainder + optlen, PBUF_RAM);
 8012604:	7bbb      	ldrb	r3, [r7, #14]
 8012606:	b29a      	uxth	r2, r3
 8012608:	89bb      	ldrh	r3, [r7, #12]
 801260a:	4413      	add	r3, r2
 801260c:	b29b      	uxth	r3, r3
 801260e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8012612:	4619      	mov	r1, r3
 8012614:	2036      	movs	r0, #54	; 0x36
 8012616:	f7fa fb47 	bl	800cca8 <pbuf_alloc>
 801261a:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801261c:	693b      	ldr	r3, [r7, #16]
 801261e:	2b00      	cmp	r3, #0
 8012620:	f000 80b7 	beq.w	8012792 <tcp_split_unsent_seg+0x23e>
                ("tcp_split_unsent_seg: could not allocate memory for pbuf remainder %u\n", remainder));
    goto memerr;
  }

  /* Offset into the original pbuf is past TCP/IP headers, options, and split amount */
  offset = useg->p->tot_len - useg->len + split;
 8012624:	697b      	ldr	r3, [r7, #20]
 8012626:	685b      	ldr	r3, [r3, #4]
 8012628:	891a      	ldrh	r2, [r3, #8]
 801262a:	697b      	ldr	r3, [r7, #20]
 801262c:	891b      	ldrh	r3, [r3, #8]
 801262e:	1ad3      	subs	r3, r2, r3
 8012630:	b29a      	uxth	r2, r3
 8012632:	887b      	ldrh	r3, [r7, #2]
 8012634:	4413      	add	r3, r2
 8012636:	817b      	strh	r3, [r7, #10]
  /* Copy remainder into new pbuf, headers and options will not be filled out */
  if (pbuf_copy_partial(useg->p, (u8_t *)p->payload + optlen, remainder, offset ) != remainder) {
 8012638:	697b      	ldr	r3, [r7, #20]
 801263a:	6858      	ldr	r0, [r3, #4]
 801263c:	693b      	ldr	r3, [r7, #16]
 801263e:	685a      	ldr	r2, [r3, #4]
 8012640:	7bbb      	ldrb	r3, [r7, #14]
 8012642:	18d1      	adds	r1, r2, r3
 8012644:	897b      	ldrh	r3, [r7, #10]
 8012646:	89ba      	ldrh	r2, [r7, #12]
 8012648:	f7fb f808 	bl	800d65c <pbuf_copy_partial>
 801264c:	4603      	mov	r3, r0
 801264e:	461a      	mov	r2, r3
 8012650:	89bb      	ldrh	r3, [r7, #12]
 8012652:	4293      	cmp	r3, r2
 8012654:	f040 809f 	bne.w	8012796 <tcp_split_unsent_seg+0x242>
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Options are created when calling tcp_output() */

  /* Migrate flags from original segment */
  split_flags = TCPH_FLAGS(useg->tcphdr);
 8012658:	697b      	ldr	r3, [r7, #20]
 801265a:	68db      	ldr	r3, [r3, #12]
 801265c:	899b      	ldrh	r3, [r3, #12]
 801265e:	b29b      	uxth	r3, r3
 8012660:	4618      	mov	r0, r3
 8012662:	f7f9 fa13 	bl	800ba8c <lwip_htons>
 8012666:	4603      	mov	r3, r0
 8012668:	b2db      	uxtb	r3, r3
 801266a:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 801266e:	76fb      	strb	r3, [r7, #27]
  remainder_flags = 0; /* ACK added in tcp_output() */
 8012670:	2300      	movs	r3, #0
 8012672:	76bb      	strb	r3, [r7, #26]

  if (split_flags & TCP_PSH) {
 8012674:	7efb      	ldrb	r3, [r7, #27]
 8012676:	f003 0308 	and.w	r3, r3, #8
 801267a:	2b00      	cmp	r3, #0
 801267c:	d007      	beq.n	801268e <tcp_split_unsent_seg+0x13a>
    split_flags &= ~TCP_PSH;
 801267e:	7efb      	ldrb	r3, [r7, #27]
 8012680:	f023 0308 	bic.w	r3, r3, #8
 8012684:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_PSH;
 8012686:	7ebb      	ldrb	r3, [r7, #26]
 8012688:	f043 0308 	orr.w	r3, r3, #8
 801268c:	76bb      	strb	r3, [r7, #26]
  }
  if (split_flags & TCP_FIN) {
 801268e:	7efb      	ldrb	r3, [r7, #27]
 8012690:	f003 0301 	and.w	r3, r3, #1
 8012694:	2b00      	cmp	r3, #0
 8012696:	d007      	beq.n	80126a8 <tcp_split_unsent_seg+0x154>
    split_flags &= ~TCP_FIN;
 8012698:	7efb      	ldrb	r3, [r7, #27]
 801269a:	f023 0301 	bic.w	r3, r3, #1
 801269e:	76fb      	strb	r3, [r7, #27]
    remainder_flags |= TCP_FIN;
 80126a0:	7ebb      	ldrb	r3, [r7, #26]
 80126a2:	f043 0301 	orr.w	r3, r3, #1
 80126a6:	76bb      	strb	r3, [r7, #26]
  }
  /* SYN should be left on split, RST should not be present with data */

  seg = tcp_create_segment(pcb, p, remainder_flags, lwip_ntohl(useg->tcphdr->seqno) + split, optflags);
 80126a8:	697b      	ldr	r3, [r7, #20]
 80126aa:	68db      	ldr	r3, [r3, #12]
 80126ac:	685b      	ldr	r3, [r3, #4]
 80126ae:	4618      	mov	r0, r3
 80126b0:	f7f9 fa01 	bl	800bab6 <lwip_htonl>
 80126b4:	4602      	mov	r2, r0
 80126b6:	887b      	ldrh	r3, [r7, #2]
 80126b8:	18d1      	adds	r1, r2, r3
 80126ba:	7eba      	ldrb	r2, [r7, #26]
 80126bc:	7bfb      	ldrb	r3, [r7, #15]
 80126be:	9300      	str	r3, [sp, #0]
 80126c0:	460b      	mov	r3, r1
 80126c2:	6939      	ldr	r1, [r7, #16]
 80126c4:	6878      	ldr	r0, [r7, #4]
 80126c6:	f7ff fa4f 	bl	8011b68 <tcp_create_segment>
 80126ca:	61f8      	str	r0, [r7, #28]
  if (seg == NULL) {
 80126cc:	69fb      	ldr	r3, [r7, #28]
 80126ce:	2b00      	cmp	r3, #0
 80126d0:	d063      	beq.n	801279a <tcp_split_unsent_seg+0x246>
  seg->chksum_swapped = chksum_swapped;
  seg->flags |= TF_SEG_DATA_CHECKSUMMED;
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Remove this segment from the queue since trimming it may free pbufs */
  pcb->snd_queuelen -= pbuf_clen(useg->p);
 80126d2:	697b      	ldr	r3, [r7, #20]
 80126d4:	685b      	ldr	r3, [r3, #4]
 80126d6:	4618      	mov	r0, r3
 80126d8:	f7fa fe58 	bl	800d38c <pbuf_clen>
 80126dc:	4603      	mov	r3, r0
 80126de:	461a      	mov	r2, r3
 80126e0:	687b      	ldr	r3, [r7, #4]
 80126e2:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 80126e6:	1a9b      	subs	r3, r3, r2
 80126e8:	b29a      	uxth	r2, r3
 80126ea:	687b      	ldr	r3, [r7, #4]
 80126ec:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Trim the original pbuf into our split size.  At this point our remainder segment must be setup
  successfully because we are modifying the original segment */
  pbuf_realloc(useg->p, useg->p->tot_len - remainder);
 80126f0:	697b      	ldr	r3, [r7, #20]
 80126f2:	6858      	ldr	r0, [r3, #4]
 80126f4:	697b      	ldr	r3, [r7, #20]
 80126f6:	685b      	ldr	r3, [r3, #4]
 80126f8:	891a      	ldrh	r2, [r3, #8]
 80126fa:	89bb      	ldrh	r3, [r7, #12]
 80126fc:	1ad3      	subs	r3, r2, r3
 80126fe:	b29b      	uxth	r3, r3
 8012700:	4619      	mov	r1, r3
 8012702:	f7fa fc2f 	bl	800cf64 <pbuf_realloc>
  useg->len -= remainder;
 8012706:	697b      	ldr	r3, [r7, #20]
 8012708:	891a      	ldrh	r2, [r3, #8]
 801270a:	89bb      	ldrh	r3, [r7, #12]
 801270c:	1ad3      	subs	r3, r2, r3
 801270e:	b29a      	uxth	r2, r3
 8012710:	697b      	ldr	r3, [r7, #20]
 8012712:	811a      	strh	r2, [r3, #8]
  TCPH_SET_FLAG(useg->tcphdr, split_flags);
 8012714:	697b      	ldr	r3, [r7, #20]
 8012716:	68db      	ldr	r3, [r3, #12]
 8012718:	899b      	ldrh	r3, [r3, #12]
 801271a:	b29c      	uxth	r4, r3
 801271c:	7efb      	ldrb	r3, [r7, #27]
 801271e:	b29b      	uxth	r3, r3
 8012720:	4618      	mov	r0, r3
 8012722:	f7f9 f9b3 	bl	800ba8c <lwip_htons>
 8012726:	4603      	mov	r3, r0
 8012728:	461a      	mov	r2, r3
 801272a:	697b      	ldr	r3, [r7, #20]
 801272c:	68db      	ldr	r3, [r3, #12]
 801272e:	4322      	orrs	r2, r4
 8012730:	b292      	uxth	r2, r2
 8012732:	819a      	strh	r2, [r3, #12]
  /* By trimming, realloc may have actually shrunk the pbuf, so clear oversize_left */
  useg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */

  /* Add back to the queue with new trimmed pbuf */
  pcb->snd_queuelen += pbuf_clen(useg->p);
 8012734:	697b      	ldr	r3, [r7, #20]
 8012736:	685b      	ldr	r3, [r3, #4]
 8012738:	4618      	mov	r0, r3
 801273a:	f7fa fe27 	bl	800d38c <pbuf_clen>
 801273e:	4603      	mov	r3, r0
 8012740:	461a      	mov	r2, r3
 8012742:	687b      	ldr	r3, [r7, #4]
 8012744:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012748:	4413      	add	r3, r2
 801274a:	b29a      	uxth	r2, r3
 801274c:	687b      	ldr	r3, [r7, #4]
 801274e:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
#endif /* TCP_CHECKSUM_ON_COPY */

  /* Update number of segments on the queues. Note that length now may
   * exceed TCP_SND_QUEUELEN! We don't have to touch pcb->snd_buf
   * because the total amount of data is constant when packet is split */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 8012752:	69fb      	ldr	r3, [r7, #28]
 8012754:	685b      	ldr	r3, [r3, #4]
 8012756:	4618      	mov	r0, r3
 8012758:	f7fa fe18 	bl	800d38c <pbuf_clen>
 801275c:	4603      	mov	r3, r0
 801275e:	461a      	mov	r2, r3
 8012760:	687b      	ldr	r3, [r7, #4]
 8012762:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012766:	4413      	add	r3, r2
 8012768:	b29a      	uxth	r2, r3
 801276a:	687b      	ldr	r3, [r7, #4]
 801276c:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66

  /* Finally insert remainder into queue after split (which stays head) */
  seg->next = useg->next;
 8012770:	697b      	ldr	r3, [r7, #20]
 8012772:	681a      	ldr	r2, [r3, #0]
 8012774:	69fb      	ldr	r3, [r7, #28]
 8012776:	601a      	str	r2, [r3, #0]
  useg->next = seg;
 8012778:	697b      	ldr	r3, [r7, #20]
 801277a:	69fa      	ldr	r2, [r7, #28]
 801277c:	601a      	str	r2, [r3, #0]

#if TCP_OVERSIZE
  /* If remainder is last segment on the unsent, ensure we clear the oversize amount
   * because the remainder is always sized to the exact remaining amount */
  if (seg->next == NULL) {
 801277e:	69fb      	ldr	r3, [r7, #28]
 8012780:	681b      	ldr	r3, [r3, #0]
 8012782:	2b00      	cmp	r3, #0
 8012784:	d103      	bne.n	801278e <tcp_split_unsent_seg+0x23a>
    pcb->unsent_oversize = 0;
 8012786:	687b      	ldr	r3, [r7, #4]
 8012788:	2200      	movs	r2, #0
 801278a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  return ERR_OK;
 801278e:	2300      	movs	r3, #0
 8012790:	e016      	b.n	80127c0 <tcp_split_unsent_seg+0x26c>
    goto memerr;
 8012792:	bf00      	nop
 8012794:	e002      	b.n	801279c <tcp_split_unsent_seg+0x248>
    goto memerr;
 8012796:	bf00      	nop
 8012798:	e000      	b.n	801279c <tcp_split_unsent_seg+0x248>
    goto memerr;
 801279a:	bf00      	nop
memerr:
  TCP_STATS_INC(tcp.memerr);

  LWIP_ASSERT("seg == NULL", seg == NULL);
 801279c:	69fb      	ldr	r3, [r7, #28]
 801279e:	2b00      	cmp	r3, #0
 80127a0:	d006      	beq.n	80127b0 <tcp_split_unsent_seg+0x25c>
 80127a2:	4b09      	ldr	r3, [pc, #36]	; (80127c8 <tcp_split_unsent_seg+0x274>)
 80127a4:	f44f 7276 	mov.w	r2, #984	; 0x3d8
 80127a8:	490d      	ldr	r1, [pc, #52]	; (80127e0 <tcp_split_unsent_seg+0x28c>)
 80127aa:	4809      	ldr	r0, [pc, #36]	; (80127d0 <tcp_split_unsent_seg+0x27c>)
 80127ac:	f004 fb20 	bl	8016df0 <iprintf>
  if (p != NULL) {
 80127b0:	693b      	ldr	r3, [r7, #16]
 80127b2:	2b00      	cmp	r3, #0
 80127b4:	d002      	beq.n	80127bc <tcp_split_unsent_seg+0x268>
    pbuf_free(p);
 80127b6:	6938      	ldr	r0, [r7, #16]
 80127b8:	f7fa fd5a 	bl	800d270 <pbuf_free>
  }

  return ERR_MEM;
 80127bc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80127c0:	4618      	mov	r0, r3
 80127c2:	3724      	adds	r7, #36	; 0x24
 80127c4:	46bd      	mov	sp, r7
 80127c6:	bd90      	pop	{r4, r7, pc}
 80127c8:	0801a334 	.word	0x0801a334
 80127cc:	0801a6c8 	.word	0x0801a6c8
 80127d0:	0801a388 	.word	0x0801a388
 80127d4:	0801a6ec 	.word	0x0801a6ec
 80127d8:	0801a710 	.word	0x0801a710
 80127dc:	0801a720 	.word	0x0801a720
 80127e0:	0801a730 	.word	0x0801a730

080127e4 <tcp_send_fin>:
 * @param pcb the tcp_pcb over which to send a segment
 * @return ERR_OK if sent, another err_t otherwise
 */
err_t
tcp_send_fin(struct tcp_pcb *pcb)
{
 80127e4:	b590      	push	{r4, r7, lr}
 80127e6:	b085      	sub	sp, #20
 80127e8:	af00      	add	r7, sp, #0
 80127ea:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_send_fin: invalid pcb", pcb != NULL);
 80127ec:	687b      	ldr	r3, [r7, #4]
 80127ee:	2b00      	cmp	r3, #0
 80127f0:	d106      	bne.n	8012800 <tcp_send_fin+0x1c>
 80127f2:	4b21      	ldr	r3, [pc, #132]	; (8012878 <tcp_send_fin+0x94>)
 80127f4:	f240 32eb 	movw	r2, #1003	; 0x3eb
 80127f8:	4920      	ldr	r1, [pc, #128]	; (801287c <tcp_send_fin+0x98>)
 80127fa:	4821      	ldr	r0, [pc, #132]	; (8012880 <tcp_send_fin+0x9c>)
 80127fc:	f004 faf8 	bl	8016df0 <iprintf>

  /* first, try to add the fin to the last unsent segment */
  if (pcb->unsent != NULL) {
 8012800:	687b      	ldr	r3, [r7, #4]
 8012802:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012804:	2b00      	cmp	r3, #0
 8012806:	d02e      	beq.n	8012866 <tcp_send_fin+0x82>
    struct tcp_seg *last_unsent;
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012808:	687b      	ldr	r3, [r7, #4]
 801280a:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 801280c:	60fb      	str	r3, [r7, #12]
 801280e:	e002      	b.n	8012816 <tcp_send_fin+0x32>
         last_unsent = last_unsent->next);
 8012810:	68fb      	ldr	r3, [r7, #12]
 8012812:	681b      	ldr	r3, [r3, #0]
 8012814:	60fb      	str	r3, [r7, #12]
    for (last_unsent = pcb->unsent; last_unsent->next != NULL;
 8012816:	68fb      	ldr	r3, [r7, #12]
 8012818:	681b      	ldr	r3, [r3, #0]
 801281a:	2b00      	cmp	r3, #0
 801281c:	d1f8      	bne.n	8012810 <tcp_send_fin+0x2c>

    if ((TCPH_FLAGS(last_unsent->tcphdr) & (TCP_SYN | TCP_FIN | TCP_RST)) == 0) {
 801281e:	68fb      	ldr	r3, [r7, #12]
 8012820:	68db      	ldr	r3, [r3, #12]
 8012822:	899b      	ldrh	r3, [r3, #12]
 8012824:	b29b      	uxth	r3, r3
 8012826:	4618      	mov	r0, r3
 8012828:	f7f9 f930 	bl	800ba8c <lwip_htons>
 801282c:	4603      	mov	r3, r0
 801282e:	b2db      	uxtb	r3, r3
 8012830:	f003 0307 	and.w	r3, r3, #7
 8012834:	2b00      	cmp	r3, #0
 8012836:	d116      	bne.n	8012866 <tcp_send_fin+0x82>
      /* no SYN/FIN/RST flag in the header, we can add the FIN flag */
      TCPH_SET_FLAG(last_unsent->tcphdr, TCP_FIN);
 8012838:	68fb      	ldr	r3, [r7, #12]
 801283a:	68db      	ldr	r3, [r3, #12]
 801283c:	899b      	ldrh	r3, [r3, #12]
 801283e:	b29c      	uxth	r4, r3
 8012840:	2001      	movs	r0, #1
 8012842:	f7f9 f923 	bl	800ba8c <lwip_htons>
 8012846:	4603      	mov	r3, r0
 8012848:	461a      	mov	r2, r3
 801284a:	68fb      	ldr	r3, [r7, #12]
 801284c:	68db      	ldr	r3, [r3, #12]
 801284e:	4322      	orrs	r2, r4
 8012850:	b292      	uxth	r2, r2
 8012852:	819a      	strh	r2, [r3, #12]
      tcp_set_flags(pcb, TF_FIN);
 8012854:	687b      	ldr	r3, [r7, #4]
 8012856:	8b5b      	ldrh	r3, [r3, #26]
 8012858:	f043 0320 	orr.w	r3, r3, #32
 801285c:	b29a      	uxth	r2, r3
 801285e:	687b      	ldr	r3, [r7, #4]
 8012860:	835a      	strh	r2, [r3, #26]
      return ERR_OK;
 8012862:	2300      	movs	r3, #0
 8012864:	e004      	b.n	8012870 <tcp_send_fin+0x8c>
    }
  }
  /* no data, no length, flags, copy=1, no optdata */
  return tcp_enqueue_flags(pcb, TCP_FIN);
 8012866:	2101      	movs	r1, #1
 8012868:	6878      	ldr	r0, [r7, #4]
 801286a:	f000 f80b 	bl	8012884 <tcp_enqueue_flags>
 801286e:	4603      	mov	r3, r0
}
 8012870:	4618      	mov	r0, r3
 8012872:	3714      	adds	r7, #20
 8012874:	46bd      	mov	sp, r7
 8012876:	bd90      	pop	{r4, r7, pc}
 8012878:	0801a334 	.word	0x0801a334
 801287c:	0801a73c 	.word	0x0801a73c
 8012880:	0801a388 	.word	0x0801a388

08012884 <tcp_enqueue_flags>:
 * @param pcb Protocol control block for the TCP connection.
 * @param flags TCP header flags to set in the outgoing segment.
 */
err_t
tcp_enqueue_flags(struct tcp_pcb *pcb, u8_t flags)
{
 8012884:	b580      	push	{r7, lr}
 8012886:	b08a      	sub	sp, #40	; 0x28
 8012888:	af02      	add	r7, sp, #8
 801288a:	6078      	str	r0, [r7, #4]
 801288c:	460b      	mov	r3, r1
 801288e:	70fb      	strb	r3, [r7, #3]
  struct pbuf *p;
  struct tcp_seg *seg;
  u8_t optflags = 0;
 8012890:	2300      	movs	r3, #0
 8012892:	77fb      	strb	r3, [r7, #31]
  u8_t optlen = 0;
 8012894:	2300      	movs	r3, #0
 8012896:	75fb      	strb	r3, [r7, #23]

  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: queuelen: %"U16_F"\n", (u16_t)pcb->snd_queuelen));

  LWIP_ASSERT("tcp_enqueue_flags: need either TCP_SYN or TCP_FIN in flags (programmer violates API)",
 8012898:	78fb      	ldrb	r3, [r7, #3]
 801289a:	f003 0303 	and.w	r3, r3, #3
 801289e:	2b00      	cmp	r3, #0
 80128a0:	d106      	bne.n	80128b0 <tcp_enqueue_flags+0x2c>
 80128a2:	4b67      	ldr	r3, [pc, #412]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 80128a4:	f240 4211 	movw	r2, #1041	; 0x411
 80128a8:	4966      	ldr	r1, [pc, #408]	; (8012a44 <tcp_enqueue_flags+0x1c0>)
 80128aa:	4867      	ldr	r0, [pc, #412]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 80128ac:	f004 faa0 	bl	8016df0 <iprintf>
              (flags & (TCP_SYN | TCP_FIN)) != 0);
  LWIP_ASSERT("tcp_enqueue_flags: invalid pcb", pcb != NULL);
 80128b0:	687b      	ldr	r3, [r7, #4]
 80128b2:	2b00      	cmp	r3, #0
 80128b4:	d106      	bne.n	80128c4 <tcp_enqueue_flags+0x40>
 80128b6:	4b62      	ldr	r3, [pc, #392]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 80128b8:	f240 4213 	movw	r2, #1043	; 0x413
 80128bc:	4963      	ldr	r1, [pc, #396]	; (8012a4c <tcp_enqueue_flags+0x1c8>)
 80128be:	4862      	ldr	r0, [pc, #392]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 80128c0:	f004 fa96 	bl	8016df0 <iprintf>

  /* No need to check pcb->snd_queuelen if only SYN or FIN are allowed! */

  /* Get options for this segment. This is a special case since this is the
     only place where a SYN can be sent. */
  if (flags & TCP_SYN) {
 80128c4:	78fb      	ldrb	r3, [r7, #3]
 80128c6:	f003 0302 	and.w	r3, r3, #2
 80128ca:	2b00      	cmp	r3, #0
 80128cc:	d001      	beq.n	80128d2 <tcp_enqueue_flags+0x4e>
    optflags = TF_SEG_OPTS_MSS;
 80128ce:	2301      	movs	r3, #1
 80128d0:	77fb      	strb	r3, [r7, #31]
    /* Make sure the timestamp option is only included in data segments if we
       agreed about it with the remote host (and in active open SYN segments). */
    optflags |= TF_SEG_OPTS_TS;
  }
#endif /* LWIP_TCP_TIMESTAMPS */
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 80128d2:	7ffb      	ldrb	r3, [r7, #31]
 80128d4:	009b      	lsls	r3, r3, #2
 80128d6:	b2db      	uxtb	r3, r3
 80128d8:	f003 0304 	and.w	r3, r3, #4
 80128dc:	75fb      	strb	r3, [r7, #23]

  /* Allocate pbuf with room for TCP header + options */
  if ((p = pbuf_alloc(PBUF_TRANSPORT, optlen, PBUF_RAM)) == NULL) {
 80128de:	7dfb      	ldrb	r3, [r7, #23]
 80128e0:	b29b      	uxth	r3, r3
 80128e2:	f44f 7220 	mov.w	r2, #640	; 0x280
 80128e6:	4619      	mov	r1, r3
 80128e8:	2036      	movs	r0, #54	; 0x36
 80128ea:	f7fa f9dd 	bl	800cca8 <pbuf_alloc>
 80128ee:	6138      	str	r0, [r7, #16]
 80128f0:	693b      	ldr	r3, [r7, #16]
 80128f2:	2b00      	cmp	r3, #0
 80128f4:	d109      	bne.n	801290a <tcp_enqueue_flags+0x86>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 80128f6:	687b      	ldr	r3, [r7, #4]
 80128f8:	8b5b      	ldrh	r3, [r3, #26]
 80128fa:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80128fe:	b29a      	uxth	r2, r3
 8012900:	687b      	ldr	r3, [r7, #4]
 8012902:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 8012904:	f04f 33ff 	mov.w	r3, #4294967295
 8012908:	e095      	b.n	8012a36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("tcp_enqueue_flags: check that first pbuf can hold optlen",
 801290a:	693b      	ldr	r3, [r7, #16]
 801290c:	895a      	ldrh	r2, [r3, #10]
 801290e:	7dfb      	ldrb	r3, [r7, #23]
 8012910:	b29b      	uxth	r3, r3
 8012912:	429a      	cmp	r2, r3
 8012914:	d206      	bcs.n	8012924 <tcp_enqueue_flags+0xa0>
 8012916:	4b4a      	ldr	r3, [pc, #296]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 8012918:	f240 4239 	movw	r2, #1081	; 0x439
 801291c:	494c      	ldr	r1, [pc, #304]	; (8012a50 <tcp_enqueue_flags+0x1cc>)
 801291e:	484a      	ldr	r0, [pc, #296]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 8012920:	f004 fa66 	bl	8016df0 <iprintf>
              (p->len >= optlen));

  /* Allocate memory for tcp_seg, and fill in fields. */
  if ((seg = tcp_create_segment(pcb, p, flags, pcb->snd_lbb, optflags)) == NULL) {
 8012924:	687b      	ldr	r3, [r7, #4]
 8012926:	6dd9      	ldr	r1, [r3, #92]	; 0x5c
 8012928:	78fa      	ldrb	r2, [r7, #3]
 801292a:	7ffb      	ldrb	r3, [r7, #31]
 801292c:	9300      	str	r3, [sp, #0]
 801292e:	460b      	mov	r3, r1
 8012930:	6939      	ldr	r1, [r7, #16]
 8012932:	6878      	ldr	r0, [r7, #4]
 8012934:	f7ff f918 	bl	8011b68 <tcp_create_segment>
 8012938:	60f8      	str	r0, [r7, #12]
 801293a:	68fb      	ldr	r3, [r7, #12]
 801293c:	2b00      	cmp	r3, #0
 801293e:	d109      	bne.n	8012954 <tcp_enqueue_flags+0xd0>
    tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012940:	687b      	ldr	r3, [r7, #4]
 8012942:	8b5b      	ldrh	r3, [r3, #26]
 8012944:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012948:	b29a      	uxth	r2, r3
 801294a:	687b      	ldr	r3, [r7, #4]
 801294c:	835a      	strh	r2, [r3, #26]
    TCP_STATS_INC(tcp.memerr);
    return ERR_MEM;
 801294e:	f04f 33ff 	mov.w	r3, #4294967295
 8012952:	e070      	b.n	8012a36 <tcp_enqueue_flags+0x1b2>
  }
  LWIP_ASSERT("seg->tcphdr not aligned", ((mem_ptr_t)seg->tcphdr % LWIP_MIN(MEM_ALIGNMENT, 4)) == 0);
 8012954:	68fb      	ldr	r3, [r7, #12]
 8012956:	68db      	ldr	r3, [r3, #12]
 8012958:	f003 0303 	and.w	r3, r3, #3
 801295c:	2b00      	cmp	r3, #0
 801295e:	d006      	beq.n	801296e <tcp_enqueue_flags+0xea>
 8012960:	4b37      	ldr	r3, [pc, #220]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 8012962:	f240 4242 	movw	r2, #1090	; 0x442
 8012966:	493b      	ldr	r1, [pc, #236]	; (8012a54 <tcp_enqueue_flags+0x1d0>)
 8012968:	4837      	ldr	r0, [pc, #220]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 801296a:	f004 fa41 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_enqueue_flags: invalid segment length", seg->len == 0);
 801296e:	68fb      	ldr	r3, [r7, #12]
 8012970:	891b      	ldrh	r3, [r3, #8]
 8012972:	2b00      	cmp	r3, #0
 8012974:	d006      	beq.n	8012984 <tcp_enqueue_flags+0x100>
 8012976:	4b32      	ldr	r3, [pc, #200]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 8012978:	f240 4243 	movw	r2, #1091	; 0x443
 801297c:	4936      	ldr	r1, [pc, #216]	; (8012a58 <tcp_enqueue_flags+0x1d4>)
 801297e:	4832      	ldr	r0, [pc, #200]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 8012980:	f004 fa36 	bl	8016df0 <iprintf>
               lwip_ntohl(seg->tcphdr->seqno),
               lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg),
               (u16_t)flags));

  /* Now append seg to pcb->unsent queue */
  if (pcb->unsent == NULL) {
 8012984:	687b      	ldr	r3, [r7, #4]
 8012986:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012988:	2b00      	cmp	r3, #0
 801298a:	d103      	bne.n	8012994 <tcp_enqueue_flags+0x110>
    pcb->unsent = seg;
 801298c:	687b      	ldr	r3, [r7, #4]
 801298e:	68fa      	ldr	r2, [r7, #12]
 8012990:	66da      	str	r2, [r3, #108]	; 0x6c
 8012992:	e00d      	b.n	80129b0 <tcp_enqueue_flags+0x12c>
  } else {
    struct tcp_seg *useg;
    for (useg = pcb->unsent; useg->next != NULL; useg = useg->next);
 8012994:	687b      	ldr	r3, [r7, #4]
 8012996:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012998:	61bb      	str	r3, [r7, #24]
 801299a:	e002      	b.n	80129a2 <tcp_enqueue_flags+0x11e>
 801299c:	69bb      	ldr	r3, [r7, #24]
 801299e:	681b      	ldr	r3, [r3, #0]
 80129a0:	61bb      	str	r3, [r7, #24]
 80129a2:	69bb      	ldr	r3, [r7, #24]
 80129a4:	681b      	ldr	r3, [r3, #0]
 80129a6:	2b00      	cmp	r3, #0
 80129a8:	d1f8      	bne.n	801299c <tcp_enqueue_flags+0x118>
    useg->next = seg;
 80129aa:	69bb      	ldr	r3, [r7, #24]
 80129ac:	68fa      	ldr	r2, [r7, #12]
 80129ae:	601a      	str	r2, [r3, #0]
  }
#if TCP_OVERSIZE
  /* The new unsent tail has no space */
  pcb->unsent_oversize = 0;
 80129b0:	687b      	ldr	r3, [r7, #4]
 80129b2:	2200      	movs	r2, #0
 80129b4:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
#endif /* TCP_OVERSIZE */

  /* SYN and FIN bump the sequence number */
  if ((flags & TCP_SYN) || (flags & TCP_FIN)) {
 80129b8:	78fb      	ldrb	r3, [r7, #3]
 80129ba:	f003 0302 	and.w	r3, r3, #2
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d104      	bne.n	80129cc <tcp_enqueue_flags+0x148>
 80129c2:	78fb      	ldrb	r3, [r7, #3]
 80129c4:	f003 0301 	and.w	r3, r3, #1
 80129c8:	2b00      	cmp	r3, #0
 80129ca:	d004      	beq.n	80129d6 <tcp_enqueue_flags+0x152>
    pcb->snd_lbb++;
 80129cc:	687b      	ldr	r3, [r7, #4]
 80129ce:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80129d0:	1c5a      	adds	r2, r3, #1
 80129d2:	687b      	ldr	r3, [r7, #4]
 80129d4:	65da      	str	r2, [r3, #92]	; 0x5c
    /* optlen does not influence snd_buf */
  }
  if (flags & TCP_FIN) {
 80129d6:	78fb      	ldrb	r3, [r7, #3]
 80129d8:	f003 0301 	and.w	r3, r3, #1
 80129dc:	2b00      	cmp	r3, #0
 80129de:	d006      	beq.n	80129ee <tcp_enqueue_flags+0x16a>
    tcp_set_flags(pcb, TF_FIN);
 80129e0:	687b      	ldr	r3, [r7, #4]
 80129e2:	8b5b      	ldrh	r3, [r3, #26]
 80129e4:	f043 0320 	orr.w	r3, r3, #32
 80129e8:	b29a      	uxth	r2, r3
 80129ea:	687b      	ldr	r3, [r7, #4]
 80129ec:	835a      	strh	r2, [r3, #26]
  }

  /* update number of segments on the queues */
  pcb->snd_queuelen += pbuf_clen(seg->p);
 80129ee:	68fb      	ldr	r3, [r7, #12]
 80129f0:	685b      	ldr	r3, [r3, #4]
 80129f2:	4618      	mov	r0, r3
 80129f4:	f7fa fcca 	bl	800d38c <pbuf_clen>
 80129f8:	4603      	mov	r3, r0
 80129fa:	461a      	mov	r2, r3
 80129fc:	687b      	ldr	r3, [r7, #4]
 80129fe:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a02:	4413      	add	r3, r2
 8012a04:	b29a      	uxth	r2, r3
 8012a06:	687b      	ldr	r3, [r7, #4]
 8012a08:	f8a3 2066 	strh.w	r2, [r3, #102]	; 0x66
  LWIP_DEBUGF(TCP_QLEN_DEBUG, ("tcp_enqueue_flags: %"S16_F" (after enqueued)\n", pcb->snd_queuelen));
  if (pcb->snd_queuelen != 0) {
 8012a0c:	687b      	ldr	r3, [r7, #4]
 8012a0e:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012a12:	2b00      	cmp	r3, #0
 8012a14:	d00e      	beq.n	8012a34 <tcp_enqueue_flags+0x1b0>
    LWIP_ASSERT("tcp_enqueue_flags: invalid queue length",
 8012a16:	687b      	ldr	r3, [r7, #4]
 8012a18:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012a1a:	2b00      	cmp	r3, #0
 8012a1c:	d10a      	bne.n	8012a34 <tcp_enqueue_flags+0x1b0>
 8012a1e:	687b      	ldr	r3, [r7, #4]
 8012a20:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012a22:	2b00      	cmp	r3, #0
 8012a24:	d106      	bne.n	8012a34 <tcp_enqueue_flags+0x1b0>
 8012a26:	4b06      	ldr	r3, [pc, #24]	; (8012a40 <tcp_enqueue_flags+0x1bc>)
 8012a28:	f240 4265 	movw	r2, #1125	; 0x465
 8012a2c:	490b      	ldr	r1, [pc, #44]	; (8012a5c <tcp_enqueue_flags+0x1d8>)
 8012a2e:	4806      	ldr	r0, [pc, #24]	; (8012a48 <tcp_enqueue_flags+0x1c4>)
 8012a30:	f004 f9de 	bl	8016df0 <iprintf>
                pcb->unacked != NULL || pcb->unsent != NULL);
  }

  return ERR_OK;
 8012a34:	2300      	movs	r3, #0
}
 8012a36:	4618      	mov	r0, r3
 8012a38:	3720      	adds	r7, #32
 8012a3a:	46bd      	mov	sp, r7
 8012a3c:	bd80      	pop	{r7, pc}
 8012a3e:	bf00      	nop
 8012a40:	0801a334 	.word	0x0801a334
 8012a44:	0801a758 	.word	0x0801a758
 8012a48:	0801a388 	.word	0x0801a388
 8012a4c:	0801a7b0 	.word	0x0801a7b0
 8012a50:	0801a7d0 	.word	0x0801a7d0
 8012a54:	0801a80c 	.word	0x0801a80c
 8012a58:	0801a824 	.word	0x0801a824
 8012a5c:	0801a850 	.word	0x0801a850

08012a60 <tcp_output>:
 * @return ERR_OK if data has been sent or nothing to send
 *         another err_t on error
 */
err_t
tcp_output(struct tcp_pcb *pcb)
{
 8012a60:	b5b0      	push	{r4, r5, r7, lr}
 8012a62:	b08a      	sub	sp, #40	; 0x28
 8012a64:	af00      	add	r7, sp, #0
 8012a66:	6078      	str	r0, [r7, #4]
  s16_t i = 0;
#endif /* TCP_CWND_DEBUG */

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("tcp_output: invalid pcb", pcb != NULL);
 8012a68:	687b      	ldr	r3, [r7, #4]
 8012a6a:	2b00      	cmp	r3, #0
 8012a6c:	d106      	bne.n	8012a7c <tcp_output+0x1c>
 8012a6e:	4b8a      	ldr	r3, [pc, #552]	; (8012c98 <tcp_output+0x238>)
 8012a70:	f240 42e1 	movw	r2, #1249	; 0x4e1
 8012a74:	4989      	ldr	r1, [pc, #548]	; (8012c9c <tcp_output+0x23c>)
 8012a76:	488a      	ldr	r0, [pc, #552]	; (8012ca0 <tcp_output+0x240>)
 8012a78:	f004 f9ba 	bl	8016df0 <iprintf>
  /* pcb->state LISTEN not allowed here */
  LWIP_ASSERT("don't call tcp_output for listen-pcbs",
 8012a7c:	687b      	ldr	r3, [r7, #4]
 8012a7e:	7d1b      	ldrb	r3, [r3, #20]
 8012a80:	2b01      	cmp	r3, #1
 8012a82:	d106      	bne.n	8012a92 <tcp_output+0x32>
 8012a84:	4b84      	ldr	r3, [pc, #528]	; (8012c98 <tcp_output+0x238>)
 8012a86:	f240 42e3 	movw	r2, #1251	; 0x4e3
 8012a8a:	4986      	ldr	r1, [pc, #536]	; (8012ca4 <tcp_output+0x244>)
 8012a8c:	4884      	ldr	r0, [pc, #528]	; (8012ca0 <tcp_output+0x240>)
 8012a8e:	f004 f9af 	bl	8016df0 <iprintf>

  /* First, check if we are invoked by the TCP input processing
     code. If so, we do not output anything. Instead, we rely on the
     input processing code to call us when input processing is done
     with. */
  if (tcp_input_pcb == pcb) {
 8012a92:	4b85      	ldr	r3, [pc, #532]	; (8012ca8 <tcp_output+0x248>)
 8012a94:	681b      	ldr	r3, [r3, #0]
 8012a96:	687a      	ldr	r2, [r7, #4]
 8012a98:	429a      	cmp	r2, r3
 8012a9a:	d101      	bne.n	8012aa0 <tcp_output+0x40>
    return ERR_OK;
 8012a9c:	2300      	movs	r3, #0
 8012a9e:	e1ce      	b.n	8012e3e <tcp_output+0x3de>
  }

  wnd = LWIP_MIN(pcb->snd_wnd, pcb->cwnd);
 8012aa0:	687b      	ldr	r3, [r7, #4]
 8012aa2:	f8b3 2048 	ldrh.w	r2, [r3, #72]	; 0x48
 8012aa6:	687b      	ldr	r3, [r7, #4]
 8012aa8:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012aac:	4293      	cmp	r3, r2
 8012aae:	bf28      	it	cs
 8012ab0:	4613      	movcs	r3, r2
 8012ab2:	b29b      	uxth	r3, r3
 8012ab4:	61bb      	str	r3, [r7, #24]

  seg = pcb->unsent;
 8012ab6:	687b      	ldr	r3, [r7, #4]
 8012ab8:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012aba:	627b      	str	r3, [r7, #36]	; 0x24

  if (seg == NULL) {
 8012abc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012abe:	2b00      	cmp	r3, #0
 8012ac0:	d10b      	bne.n	8012ada <tcp_output+0x7a>
                                 ", seg == NULL, ack %"U32_F"\n",
                                 pcb->snd_wnd, pcb->cwnd, wnd, pcb->lastack));

    /* If the TF_ACK_NOW flag is set and the ->unsent queue is empty, construct
     * an empty ACK segment and send it. */
    if (pcb->flags & TF_ACK_NOW) {
 8012ac2:	687b      	ldr	r3, [r7, #4]
 8012ac4:	8b5b      	ldrh	r3, [r3, #26]
 8012ac6:	f003 0302 	and.w	r3, r3, #2
 8012aca:	2b00      	cmp	r3, #0
 8012acc:	f000 81aa 	beq.w	8012e24 <tcp_output+0x3c4>
      return tcp_send_empty_ack(pcb);
 8012ad0:	6878      	ldr	r0, [r7, #4]
 8012ad2:	f000 fdcb 	bl	801366c <tcp_send_empty_ack>
 8012ad6:	4603      	mov	r3, r0
 8012ad8:	e1b1      	b.n	8012e3e <tcp_output+0x3de>
                 pcb->snd_wnd, pcb->cwnd, wnd,
                 lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len,
                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack));
  }

  netif = tcp_route(pcb, &pcb->local_ip, &pcb->remote_ip);
 8012ada:	6879      	ldr	r1, [r7, #4]
 8012adc:	687b      	ldr	r3, [r7, #4]
 8012ade:	3304      	adds	r3, #4
 8012ae0:	461a      	mov	r2, r3
 8012ae2:	6878      	ldr	r0, [r7, #4]
 8012ae4:	f7ff f824 	bl	8011b30 <tcp_route>
 8012ae8:	6178      	str	r0, [r7, #20]
  if (netif == NULL) {
 8012aea:	697b      	ldr	r3, [r7, #20]
 8012aec:	2b00      	cmp	r3, #0
 8012aee:	d102      	bne.n	8012af6 <tcp_output+0x96>
    return ERR_RTE;
 8012af0:	f06f 0303 	mvn.w	r3, #3
 8012af4:	e1a3      	b.n	8012e3e <tcp_output+0x3de>
  }

  /* If we don't have a local IP address, we get one from netif */
  if (ip_addr_isany(&pcb->local_ip)) {
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	2b00      	cmp	r3, #0
 8012afa:	d003      	beq.n	8012b04 <tcp_output+0xa4>
 8012afc:	687b      	ldr	r3, [r7, #4]
 8012afe:	681b      	ldr	r3, [r3, #0]
 8012b00:	2b00      	cmp	r3, #0
 8012b02:	d111      	bne.n	8012b28 <tcp_output+0xc8>
    const ip_addr_t *local_ip = ip_netif_get_local_ip(netif, &pcb->remote_ip);
 8012b04:	697b      	ldr	r3, [r7, #20]
 8012b06:	2b00      	cmp	r3, #0
 8012b08:	d002      	beq.n	8012b10 <tcp_output+0xb0>
 8012b0a:	697b      	ldr	r3, [r7, #20]
 8012b0c:	3304      	adds	r3, #4
 8012b0e:	e000      	b.n	8012b12 <tcp_output+0xb2>
 8012b10:	2300      	movs	r3, #0
 8012b12:	613b      	str	r3, [r7, #16]
    if (local_ip == NULL) {
 8012b14:	693b      	ldr	r3, [r7, #16]
 8012b16:	2b00      	cmp	r3, #0
 8012b18:	d102      	bne.n	8012b20 <tcp_output+0xc0>
      return ERR_RTE;
 8012b1a:	f06f 0303 	mvn.w	r3, #3
 8012b1e:	e18e      	b.n	8012e3e <tcp_output+0x3de>
    }
    ip_addr_copy(pcb->local_ip, *local_ip);
 8012b20:	693b      	ldr	r3, [r7, #16]
 8012b22:	681a      	ldr	r2, [r3, #0]
 8012b24:	687b      	ldr	r3, [r7, #4]
 8012b26:	601a      	str	r2, [r3, #0]
  }

  /* Handle the current segment not fitting within the window */
  if (lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len > wnd) {
 8012b28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012b2a:	68db      	ldr	r3, [r3, #12]
 8012b2c:	685b      	ldr	r3, [r3, #4]
 8012b2e:	4618      	mov	r0, r3
 8012b30:	f7f8 ffc1 	bl	800bab6 <lwip_htonl>
 8012b34:	4602      	mov	r2, r0
 8012b36:	687b      	ldr	r3, [r7, #4]
 8012b38:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012b3a:	1ad3      	subs	r3, r2, r3
 8012b3c:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012b3e:	8912      	ldrh	r2, [r2, #8]
 8012b40:	4413      	add	r3, r2
 8012b42:	69ba      	ldr	r2, [r7, #24]
 8012b44:	429a      	cmp	r2, r3
 8012b46:	d227      	bcs.n	8012b98 <tcp_output+0x138>
     * within the remaining (could be 0) send window and RTO timer is not running (we
     * have no in-flight data). If window is still too small after persist timer fires,
     * then we split the segment. We don't consider the congestion window since a cwnd
     * smaller than 1 SMSS implies in-flight data
     */
    if (wnd == pcb->snd_wnd && pcb->unacked == NULL && pcb->persist_backoff == 0) {
 8012b48:	687b      	ldr	r3, [r7, #4]
 8012b4a:	f8b3 3060 	ldrh.w	r3, [r3, #96]	; 0x60
 8012b4e:	461a      	mov	r2, r3
 8012b50:	69bb      	ldr	r3, [r7, #24]
 8012b52:	4293      	cmp	r3, r2
 8012b54:	d114      	bne.n	8012b80 <tcp_output+0x120>
 8012b56:	687b      	ldr	r3, [r7, #4]
 8012b58:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012b5a:	2b00      	cmp	r3, #0
 8012b5c:	d110      	bne.n	8012b80 <tcp_output+0x120>
 8012b5e:	687b      	ldr	r3, [r7, #4]
 8012b60:	f893 3099 	ldrb.w	r3, [r3, #153]	; 0x99
 8012b64:	2b00      	cmp	r3, #0
 8012b66:	d10b      	bne.n	8012b80 <tcp_output+0x120>
      pcb->persist_cnt = 0;
 8012b68:	687b      	ldr	r3, [r7, #4]
 8012b6a:	2200      	movs	r2, #0
 8012b6c:	f883 2098 	strb.w	r2, [r3, #152]	; 0x98
      pcb->persist_backoff = 1;
 8012b70:	687b      	ldr	r3, [r7, #4]
 8012b72:	2201      	movs	r2, #1
 8012b74:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99
      pcb->persist_probe = 0;
 8012b78:	687b      	ldr	r3, [r7, #4]
 8012b7a:	2200      	movs	r2, #0
 8012b7c:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
    }
    /* We need an ACK, but can't send data now, so send an empty ACK */
    if (pcb->flags & TF_ACK_NOW) {
 8012b80:	687b      	ldr	r3, [r7, #4]
 8012b82:	8b5b      	ldrh	r3, [r3, #26]
 8012b84:	f003 0302 	and.w	r3, r3, #2
 8012b88:	2b00      	cmp	r3, #0
 8012b8a:	f000 814d 	beq.w	8012e28 <tcp_output+0x3c8>
      return tcp_send_empty_ack(pcb);
 8012b8e:	6878      	ldr	r0, [r7, #4]
 8012b90:	f000 fd6c 	bl	801366c <tcp_send_empty_ack>
 8012b94:	4603      	mov	r3, r0
 8012b96:	e152      	b.n	8012e3e <tcp_output+0x3de>
    }
    goto output_done;
  }
  /* Stop persist timer, above conditions are not active */
  pcb->persist_backoff = 0;
 8012b98:	687b      	ldr	r3, [r7, #4]
 8012b9a:	2200      	movs	r2, #0
 8012b9c:	f883 2099 	strb.w	r2, [r3, #153]	; 0x99

  /* useg should point to last segment on unacked queue */
  useg = pcb->unacked;
 8012ba0:	687b      	ldr	r3, [r7, #4]
 8012ba2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012ba4:	623b      	str	r3, [r7, #32]
  if (useg != NULL) {
 8012ba6:	6a3b      	ldr	r3, [r7, #32]
 8012ba8:	2b00      	cmp	r3, #0
 8012baa:	f000 811c 	beq.w	8012de6 <tcp_output+0x386>
    for (; useg->next != NULL; useg = useg->next);
 8012bae:	e002      	b.n	8012bb6 <tcp_output+0x156>
 8012bb0:	6a3b      	ldr	r3, [r7, #32]
 8012bb2:	681b      	ldr	r3, [r3, #0]
 8012bb4:	623b      	str	r3, [r7, #32]
 8012bb6:	6a3b      	ldr	r3, [r7, #32]
 8012bb8:	681b      	ldr	r3, [r3, #0]
 8012bba:	2b00      	cmp	r3, #0
 8012bbc:	d1f8      	bne.n	8012bb0 <tcp_output+0x150>
  }
  /* data available and window allows it to be sent? */
  while (seg != NULL &&
 8012bbe:	e112      	b.n	8012de6 <tcp_output+0x386>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
    LWIP_ASSERT("RST not expected here!",
 8012bc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012bc2:	68db      	ldr	r3, [r3, #12]
 8012bc4:	899b      	ldrh	r3, [r3, #12]
 8012bc6:	b29b      	uxth	r3, r3
 8012bc8:	4618      	mov	r0, r3
 8012bca:	f7f8 ff5f 	bl	800ba8c <lwip_htons>
 8012bce:	4603      	mov	r3, r0
 8012bd0:	b2db      	uxtb	r3, r3
 8012bd2:	f003 0304 	and.w	r3, r3, #4
 8012bd6:	2b00      	cmp	r3, #0
 8012bd8:	d006      	beq.n	8012be8 <tcp_output+0x188>
 8012bda:	4b2f      	ldr	r3, [pc, #188]	; (8012c98 <tcp_output+0x238>)
 8012bdc:	f240 5236 	movw	r2, #1334	; 0x536
 8012be0:	4932      	ldr	r1, [pc, #200]	; (8012cac <tcp_output+0x24c>)
 8012be2:	482f      	ldr	r0, [pc, #188]	; (8012ca0 <tcp_output+0x240>)
 8012be4:	f004 f904 	bl	8016df0 <iprintf>
     * - if tcp_write had a memory error before (prevent delayed ACK timeout) or
     * - if FIN was already enqueued for this PCB (SYN is always alone in a segment -
     *   either seg->next != NULL or pcb->unacked == NULL;
     *   RST is no sent using tcp_write/tcp_output.
     */
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012be8:	687b      	ldr	r3, [r7, #4]
 8012bea:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012bec:	2b00      	cmp	r3, #0
 8012bee:	d01f      	beq.n	8012c30 <tcp_output+0x1d0>
 8012bf0:	687b      	ldr	r3, [r7, #4]
 8012bf2:	8b5b      	ldrh	r3, [r3, #26]
 8012bf4:	f003 0344 	and.w	r3, r3, #68	; 0x44
 8012bf8:	2b00      	cmp	r3, #0
 8012bfa:	d119      	bne.n	8012c30 <tcp_output+0x1d0>
 8012bfc:	687b      	ldr	r3, [r7, #4]
 8012bfe:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c00:	2b00      	cmp	r3, #0
 8012c02:	d00b      	beq.n	8012c1c <tcp_output+0x1bc>
 8012c04:	687b      	ldr	r3, [r7, #4]
 8012c06:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c08:	681b      	ldr	r3, [r3, #0]
 8012c0a:	2b00      	cmp	r3, #0
 8012c0c:	d110      	bne.n	8012c30 <tcp_output+0x1d0>
 8012c0e:	687b      	ldr	r3, [r7, #4]
 8012c10:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012c12:	891a      	ldrh	r2, [r3, #8]
 8012c14:	687b      	ldr	r3, [r7, #4]
 8012c16:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d209      	bcs.n	8012c30 <tcp_output+0x1d0>
 8012c1c:	687b      	ldr	r3, [r7, #4]
 8012c1e:	f8b3 3064 	ldrh.w	r3, [r3, #100]	; 0x64
 8012c22:	2b00      	cmp	r3, #0
 8012c24:	d004      	beq.n	8012c30 <tcp_output+0x1d0>
 8012c26:	687b      	ldr	r3, [r7, #4]
 8012c28:	f8b3 3066 	ldrh.w	r3, [r3, #102]	; 0x66
 8012c2c:	2b08      	cmp	r3, #8
 8012c2e:	d901      	bls.n	8012c34 <tcp_output+0x1d4>
 8012c30:	2301      	movs	r3, #1
 8012c32:	e000      	b.n	8012c36 <tcp_output+0x1d6>
 8012c34:	2300      	movs	r3, #0
 8012c36:	2b00      	cmp	r3, #0
 8012c38:	d106      	bne.n	8012c48 <tcp_output+0x1e8>
        ((pcb->flags & (TF_NAGLEMEMERR | TF_FIN)) == 0)) {
 8012c3a:	687b      	ldr	r3, [r7, #4]
 8012c3c:	8b5b      	ldrh	r3, [r3, #26]
 8012c3e:	f003 03a0 	and.w	r3, r3, #160	; 0xa0
    if ((tcp_do_output_nagle(pcb) == 0) &&
 8012c42:	2b00      	cmp	r3, #0
 8012c44:	f000 80e4 	beq.w	8012e10 <tcp_output+0x3b0>
                                 pcb->lastack,
                                 lwip_ntohl(seg->tcphdr->seqno), pcb->lastack, i));
    ++i;
#endif /* TCP_CWND_DEBUG */

    if (pcb->state != SYN_SENT) {
 8012c48:	687b      	ldr	r3, [r7, #4]
 8012c4a:	7d1b      	ldrb	r3, [r3, #20]
 8012c4c:	2b02      	cmp	r3, #2
 8012c4e:	d00d      	beq.n	8012c6c <tcp_output+0x20c>
      TCPH_SET_FLAG(seg->tcphdr, TCP_ACK);
 8012c50:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c52:	68db      	ldr	r3, [r3, #12]
 8012c54:	899b      	ldrh	r3, [r3, #12]
 8012c56:	b29c      	uxth	r4, r3
 8012c58:	2010      	movs	r0, #16
 8012c5a:	f7f8 ff17 	bl	800ba8c <lwip_htons>
 8012c5e:	4603      	mov	r3, r0
 8012c60:	461a      	mov	r2, r3
 8012c62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012c64:	68db      	ldr	r3, [r3, #12]
 8012c66:	4322      	orrs	r2, r4
 8012c68:	b292      	uxth	r2, r2
 8012c6a:	819a      	strh	r2, [r3, #12]
    }

    err = tcp_output_segment(seg, pcb, netif);
 8012c6c:	697a      	ldr	r2, [r7, #20]
 8012c6e:	6879      	ldr	r1, [r7, #4]
 8012c70:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012c72:	f000 f909 	bl	8012e88 <tcp_output_segment>
 8012c76:	4603      	mov	r3, r0
 8012c78:	73fb      	strb	r3, [r7, #15]
    if (err != ERR_OK) {
 8012c7a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c7e:	2b00      	cmp	r3, #0
 8012c80:	d016      	beq.n	8012cb0 <tcp_output+0x250>
      /* segment could not be sent, for whatever reason */
      tcp_set_flags(pcb, TF_NAGLEMEMERR);
 8012c82:	687b      	ldr	r3, [r7, #4]
 8012c84:	8b5b      	ldrh	r3, [r3, #26]
 8012c86:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8012c8a:	b29a      	uxth	r2, r3
 8012c8c:	687b      	ldr	r3, [r7, #4]
 8012c8e:	835a      	strh	r2, [r3, #26]
      return err;
 8012c90:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8012c94:	e0d3      	b.n	8012e3e <tcp_output+0x3de>
 8012c96:	bf00      	nop
 8012c98:	0801a334 	.word	0x0801a334
 8012c9c:	0801a878 	.word	0x0801a878
 8012ca0:	0801a388 	.word	0x0801a388
 8012ca4:	0801a890 	.word	0x0801a890
 8012ca8:	2000f840 	.word	0x2000f840
 8012cac:	0801a8b8 	.word	0x0801a8b8
    }
#if TCP_OVERSIZE_DBGCHECK
    seg->oversize_left = 0;
#endif /* TCP_OVERSIZE_DBGCHECK */
    pcb->unsent = seg->next;
 8012cb0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cb2:	681a      	ldr	r2, [r3, #0]
 8012cb4:	687b      	ldr	r3, [r7, #4]
 8012cb6:	66da      	str	r2, [r3, #108]	; 0x6c
    if (pcb->state != SYN_SENT) {
 8012cb8:	687b      	ldr	r3, [r7, #4]
 8012cba:	7d1b      	ldrb	r3, [r3, #20]
 8012cbc:	2b02      	cmp	r3, #2
 8012cbe:	d006      	beq.n	8012cce <tcp_output+0x26e>
      tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8012cc0:	687b      	ldr	r3, [r7, #4]
 8012cc2:	8b5b      	ldrh	r3, [r3, #26]
 8012cc4:	f023 0303 	bic.w	r3, r3, #3
 8012cc8:	b29a      	uxth	r2, r3
 8012cca:	687b      	ldr	r3, [r7, #4]
 8012ccc:	835a      	strh	r2, [r3, #26]
    }
    snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 8012cce:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cd0:	68db      	ldr	r3, [r3, #12]
 8012cd2:	685b      	ldr	r3, [r3, #4]
 8012cd4:	4618      	mov	r0, r3
 8012cd6:	f7f8 feee 	bl	800bab6 <lwip_htonl>
 8012cda:	4604      	mov	r4, r0
 8012cdc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012cde:	891b      	ldrh	r3, [r3, #8]
 8012ce0:	461d      	mov	r5, r3
 8012ce2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012ce4:	68db      	ldr	r3, [r3, #12]
 8012ce6:	899b      	ldrh	r3, [r3, #12]
 8012ce8:	b29b      	uxth	r3, r3
 8012cea:	4618      	mov	r0, r3
 8012cec:	f7f8 fece 	bl	800ba8c <lwip_htons>
 8012cf0:	4603      	mov	r3, r0
 8012cf2:	b2db      	uxtb	r3, r3
 8012cf4:	f003 0303 	and.w	r3, r3, #3
 8012cf8:	2b00      	cmp	r3, #0
 8012cfa:	d001      	beq.n	8012d00 <tcp_output+0x2a0>
 8012cfc:	2301      	movs	r3, #1
 8012cfe:	e000      	b.n	8012d02 <tcp_output+0x2a2>
 8012d00:	2300      	movs	r3, #0
 8012d02:	442b      	add	r3, r5
 8012d04:	4423      	add	r3, r4
 8012d06:	60bb      	str	r3, [r7, #8]
    if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 8012d08:	687b      	ldr	r3, [r7, #4]
 8012d0a:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 8012d0c:	68bb      	ldr	r3, [r7, #8]
 8012d0e:	1ad3      	subs	r3, r2, r3
 8012d10:	2b00      	cmp	r3, #0
 8012d12:	da02      	bge.n	8012d1a <tcp_output+0x2ba>
      pcb->snd_nxt = snd_nxt;
 8012d14:	687b      	ldr	r3, [r7, #4]
 8012d16:	68ba      	ldr	r2, [r7, #8]
 8012d18:	651a      	str	r2, [r3, #80]	; 0x50
    }
    /* put segment on unacknowledged list if length > 0 */
    if (TCP_TCPLEN(seg) > 0) {
 8012d1a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d1c:	891b      	ldrh	r3, [r3, #8]
 8012d1e:	461c      	mov	r4, r3
 8012d20:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d22:	68db      	ldr	r3, [r3, #12]
 8012d24:	899b      	ldrh	r3, [r3, #12]
 8012d26:	b29b      	uxth	r3, r3
 8012d28:	4618      	mov	r0, r3
 8012d2a:	f7f8 feaf 	bl	800ba8c <lwip_htons>
 8012d2e:	4603      	mov	r3, r0
 8012d30:	b2db      	uxtb	r3, r3
 8012d32:	f003 0303 	and.w	r3, r3, #3
 8012d36:	2b00      	cmp	r3, #0
 8012d38:	d001      	beq.n	8012d3e <tcp_output+0x2de>
 8012d3a:	2301      	movs	r3, #1
 8012d3c:	e000      	b.n	8012d40 <tcp_output+0x2e0>
 8012d3e:	2300      	movs	r3, #0
 8012d40:	4423      	add	r3, r4
 8012d42:	2b00      	cmp	r3, #0
 8012d44:	d049      	beq.n	8012dda <tcp_output+0x37a>
      seg->next = NULL;
 8012d46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d48:	2200      	movs	r2, #0
 8012d4a:	601a      	str	r2, [r3, #0]
      /* unacked list is empty? */
      if (pcb->unacked == NULL) {
 8012d4c:	687b      	ldr	r3, [r7, #4]
 8012d4e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8012d50:	2b00      	cmp	r3, #0
 8012d52:	d105      	bne.n	8012d60 <tcp_output+0x300>
        pcb->unacked = seg;
 8012d54:	687b      	ldr	r3, [r7, #4]
 8012d56:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012d58:	671a      	str	r2, [r3, #112]	; 0x70
        useg = seg;
 8012d5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d5c:	623b      	str	r3, [r7, #32]
 8012d5e:	e03f      	b.n	8012de0 <tcp_output+0x380>
        /* unacked list is not empty? */
      } else {
        /* In the case of fast retransmit, the packet should not go to the tail
         * of the unacked queue, but rather somewhere before it. We need to check for
         * this case. -STJ Jul 27, 2004 */
        if (TCP_SEQ_LT(lwip_ntohl(seg->tcphdr->seqno), lwip_ntohl(useg->tcphdr->seqno))) {
 8012d60:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012d62:	68db      	ldr	r3, [r3, #12]
 8012d64:	685b      	ldr	r3, [r3, #4]
 8012d66:	4618      	mov	r0, r3
 8012d68:	f7f8 fea5 	bl	800bab6 <lwip_htonl>
 8012d6c:	4604      	mov	r4, r0
 8012d6e:	6a3b      	ldr	r3, [r7, #32]
 8012d70:	68db      	ldr	r3, [r3, #12]
 8012d72:	685b      	ldr	r3, [r3, #4]
 8012d74:	4618      	mov	r0, r3
 8012d76:	f7f8 fe9e 	bl	800bab6 <lwip_htonl>
 8012d7a:	4603      	mov	r3, r0
 8012d7c:	1ae3      	subs	r3, r4, r3
 8012d7e:	2b00      	cmp	r3, #0
 8012d80:	da24      	bge.n	8012dcc <tcp_output+0x36c>
          /* add segment to before tail of unacked list, keeping the list sorted */
          struct tcp_seg **cur_seg = &(pcb->unacked);
 8012d82:	687b      	ldr	r3, [r7, #4]
 8012d84:	3370      	adds	r3, #112	; 0x70
 8012d86:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d88:	e002      	b.n	8012d90 <tcp_output+0x330>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
            cur_seg = &((*cur_seg)->next );
 8012d8a:	69fb      	ldr	r3, [r7, #28]
 8012d8c:	681b      	ldr	r3, [r3, #0]
 8012d8e:	61fb      	str	r3, [r7, #28]
          while (*cur_seg &&
 8012d90:	69fb      	ldr	r3, [r7, #28]
 8012d92:	681b      	ldr	r3, [r3, #0]
 8012d94:	2b00      	cmp	r3, #0
 8012d96:	d011      	beq.n	8012dbc <tcp_output+0x35c>
                 TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 8012d98:	69fb      	ldr	r3, [r7, #28]
 8012d9a:	681b      	ldr	r3, [r3, #0]
 8012d9c:	68db      	ldr	r3, [r3, #12]
 8012d9e:	685b      	ldr	r3, [r3, #4]
 8012da0:	4618      	mov	r0, r3
 8012da2:	f7f8 fe88 	bl	800bab6 <lwip_htonl>
 8012da6:	4604      	mov	r4, r0
 8012da8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012daa:	68db      	ldr	r3, [r3, #12]
 8012dac:	685b      	ldr	r3, [r3, #4]
 8012dae:	4618      	mov	r0, r3
 8012db0:	f7f8 fe81 	bl	800bab6 <lwip_htonl>
 8012db4:	4603      	mov	r3, r0
 8012db6:	1ae3      	subs	r3, r4, r3
          while (*cur_seg &&
 8012db8:	2b00      	cmp	r3, #0
 8012dba:	dbe6      	blt.n	8012d8a <tcp_output+0x32a>
          }
          seg->next = (*cur_seg);
 8012dbc:	69fb      	ldr	r3, [r7, #28]
 8012dbe:	681a      	ldr	r2, [r3, #0]
 8012dc0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dc2:	601a      	str	r2, [r3, #0]
          (*cur_seg) = seg;
 8012dc4:	69fb      	ldr	r3, [r7, #28]
 8012dc6:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dc8:	601a      	str	r2, [r3, #0]
 8012dca:	e009      	b.n	8012de0 <tcp_output+0x380>
        } else {
          /* add segment to tail of unacked list */
          useg->next = seg;
 8012dcc:	6a3b      	ldr	r3, [r7, #32]
 8012dce:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012dd0:	601a      	str	r2, [r3, #0]
          useg = useg->next;
 8012dd2:	6a3b      	ldr	r3, [r7, #32]
 8012dd4:	681b      	ldr	r3, [r3, #0]
 8012dd6:	623b      	str	r3, [r7, #32]
 8012dd8:	e002      	b.n	8012de0 <tcp_output+0x380>
        }
      }
      /* do not queue empty segments on the unacked list */
    } else {
      tcp_seg_free(seg);
 8012dda:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8012ddc:	f7fb ff19 	bl	800ec12 <tcp_seg_free>
    }
    seg = pcb->unsent;
 8012de0:	687b      	ldr	r3, [r7, #4]
 8012de2:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012de4:	627b      	str	r3, [r7, #36]	; 0x24
  while (seg != NULL &&
 8012de6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012de8:	2b00      	cmp	r3, #0
 8012dea:	d012      	beq.n	8012e12 <tcp_output+0x3b2>
         lwip_ntohl(seg->tcphdr->seqno) - pcb->lastack + seg->len <= wnd) {
 8012dec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8012dee:	68db      	ldr	r3, [r3, #12]
 8012df0:	685b      	ldr	r3, [r3, #4]
 8012df2:	4618      	mov	r0, r3
 8012df4:	f7f8 fe5f 	bl	800bab6 <lwip_htonl>
 8012df8:	4602      	mov	r2, r0
 8012dfa:	687b      	ldr	r3, [r7, #4]
 8012dfc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8012dfe:	1ad3      	subs	r3, r2, r3
 8012e00:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8012e02:	8912      	ldrh	r2, [r2, #8]
 8012e04:	4413      	add	r3, r2
  while (seg != NULL &&
 8012e06:	69ba      	ldr	r2, [r7, #24]
 8012e08:	429a      	cmp	r2, r3
 8012e0a:	f4bf aed9 	bcs.w	8012bc0 <tcp_output+0x160>
 8012e0e:	e000      	b.n	8012e12 <tcp_output+0x3b2>
      break;
 8012e10:	bf00      	nop
  }
#if TCP_OVERSIZE
  if (pcb->unsent == NULL) {
 8012e12:	687b      	ldr	r3, [r7, #4]
 8012e14:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 8012e16:	2b00      	cmp	r3, #0
 8012e18:	d108      	bne.n	8012e2c <tcp_output+0x3cc>
    /* last unsent has been removed, reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8012e1a:	687b      	ldr	r3, [r7, #4]
 8012e1c:	2200      	movs	r2, #0
 8012e1e:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
 8012e22:	e004      	b.n	8012e2e <tcp_output+0x3ce>
    goto output_done;
 8012e24:	bf00      	nop
 8012e26:	e002      	b.n	8012e2e <tcp_output+0x3ce>
    goto output_done;
 8012e28:	bf00      	nop
 8012e2a:	e000      	b.n	8012e2e <tcp_output+0x3ce>
  }
#endif /* TCP_OVERSIZE */

output_done:
 8012e2c:	bf00      	nop
  tcp_clear_flags(pcb, TF_NAGLEMEMERR);
 8012e2e:	687b      	ldr	r3, [r7, #4]
 8012e30:	8b5b      	ldrh	r3, [r3, #26]
 8012e32:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8012e36:	b29a      	uxth	r2, r3
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	835a      	strh	r2, [r3, #26]
  return ERR_OK;
 8012e3c:	2300      	movs	r3, #0
}
 8012e3e:	4618      	mov	r0, r3
 8012e40:	3728      	adds	r7, #40	; 0x28
 8012e42:	46bd      	mov	sp, r7
 8012e44:	bdb0      	pop	{r4, r5, r7, pc}
 8012e46:	bf00      	nop

08012e48 <tcp_output_segment_busy>:
 * @arg seg the tcp segment to check
 * @return 1 if ref != 1, 0 if ref == 1
 */
static int
tcp_output_segment_busy(const struct tcp_seg *seg)
{
 8012e48:	b580      	push	{r7, lr}
 8012e4a:	b082      	sub	sp, #8
 8012e4c:	af00      	add	r7, sp, #0
 8012e4e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_output_segment_busy: invalid seg", seg != NULL);
 8012e50:	687b      	ldr	r3, [r7, #4]
 8012e52:	2b00      	cmp	r3, #0
 8012e54:	d106      	bne.n	8012e64 <tcp_output_segment_busy+0x1c>
 8012e56:	4b09      	ldr	r3, [pc, #36]	; (8012e7c <tcp_output_segment_busy+0x34>)
 8012e58:	f240 529a 	movw	r2, #1434	; 0x59a
 8012e5c:	4908      	ldr	r1, [pc, #32]	; (8012e80 <tcp_output_segment_busy+0x38>)
 8012e5e:	4809      	ldr	r0, [pc, #36]	; (8012e84 <tcp_output_segment_busy+0x3c>)
 8012e60:	f003 ffc6 	bl	8016df0 <iprintf>

  /* We only need to check the first pbuf here:
     If a pbuf is queued for transmission, a driver calls pbuf_ref(),
     which only changes the ref count of the first pbuf */
  if (seg->p->ref != 1) {
 8012e64:	687b      	ldr	r3, [r7, #4]
 8012e66:	685b      	ldr	r3, [r3, #4]
 8012e68:	7b9b      	ldrb	r3, [r3, #14]
 8012e6a:	2b01      	cmp	r3, #1
 8012e6c:	d001      	beq.n	8012e72 <tcp_output_segment_busy+0x2a>
    /* other reference found */
    return 1;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e000      	b.n	8012e74 <tcp_output_segment_busy+0x2c>
  }
  /* no other references found */
  return 0;
 8012e72:	2300      	movs	r3, #0
}
 8012e74:	4618      	mov	r0, r3
 8012e76:	3708      	adds	r7, #8
 8012e78:	46bd      	mov	sp, r7
 8012e7a:	bd80      	pop	{r7, pc}
 8012e7c:	0801a334 	.word	0x0801a334
 8012e80:	0801a8d0 	.word	0x0801a8d0
 8012e84:	0801a388 	.word	0x0801a388

08012e88 <tcp_output_segment>:
 * @param pcb the tcp_pcb for the TCP connection used to send the segment
 * @param netif the netif used to send the segment
 */
static err_t
tcp_output_segment(struct tcp_seg *seg, struct tcp_pcb *pcb, struct netif *netif)
{
 8012e88:	b5b0      	push	{r4, r5, r7, lr}
 8012e8a:	b08c      	sub	sp, #48	; 0x30
 8012e8c:	af04      	add	r7, sp, #16
 8012e8e:	60f8      	str	r0, [r7, #12]
 8012e90:	60b9      	str	r1, [r7, #8]
 8012e92:	607a      	str	r2, [r7, #4]
  u32_t *opts;
#if TCP_CHECKSUM_ON_COPY
  int seg_chksum_was_swapped = 0;
#endif

  LWIP_ASSERT("tcp_output_segment: invalid seg", seg != NULL);
 8012e94:	68fb      	ldr	r3, [r7, #12]
 8012e96:	2b00      	cmp	r3, #0
 8012e98:	d106      	bne.n	8012ea8 <tcp_output_segment+0x20>
 8012e9a:	4b64      	ldr	r3, [pc, #400]	; (801302c <tcp_output_segment+0x1a4>)
 8012e9c:	f44f 62b7 	mov.w	r2, #1464	; 0x5b8
 8012ea0:	4963      	ldr	r1, [pc, #396]	; (8013030 <tcp_output_segment+0x1a8>)
 8012ea2:	4864      	ldr	r0, [pc, #400]	; (8013034 <tcp_output_segment+0x1ac>)
 8012ea4:	f003 ffa4 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid pcb", pcb != NULL);
 8012ea8:	68bb      	ldr	r3, [r7, #8]
 8012eaa:	2b00      	cmp	r3, #0
 8012eac:	d106      	bne.n	8012ebc <tcp_output_segment+0x34>
 8012eae:	4b5f      	ldr	r3, [pc, #380]	; (801302c <tcp_output_segment+0x1a4>)
 8012eb0:	f240 52b9 	movw	r2, #1465	; 0x5b9
 8012eb4:	4960      	ldr	r1, [pc, #384]	; (8013038 <tcp_output_segment+0x1b0>)
 8012eb6:	485f      	ldr	r0, [pc, #380]	; (8013034 <tcp_output_segment+0x1ac>)
 8012eb8:	f003 ff9a 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_output_segment: invalid netif", netif != NULL);
 8012ebc:	687b      	ldr	r3, [r7, #4]
 8012ebe:	2b00      	cmp	r3, #0
 8012ec0:	d106      	bne.n	8012ed0 <tcp_output_segment+0x48>
 8012ec2:	4b5a      	ldr	r3, [pc, #360]	; (801302c <tcp_output_segment+0x1a4>)
 8012ec4:	f240 52ba 	movw	r2, #1466	; 0x5ba
 8012ec8:	495c      	ldr	r1, [pc, #368]	; (801303c <tcp_output_segment+0x1b4>)
 8012eca:	485a      	ldr	r0, [pc, #360]	; (8013034 <tcp_output_segment+0x1ac>)
 8012ecc:	f003 ff90 	bl	8016df0 <iprintf>

  if (tcp_output_segment_busy(seg)) {
 8012ed0:	68f8      	ldr	r0, [r7, #12]
 8012ed2:	f7ff ffb9 	bl	8012e48 <tcp_output_segment_busy>
 8012ed6:	4603      	mov	r3, r0
 8012ed8:	2b00      	cmp	r3, #0
 8012eda:	d001      	beq.n	8012ee0 <tcp_output_segment+0x58>
    /* This should not happen: rexmit functions should have checked this.
       However, since this function modifies p->len, we must not continue in this case. */
    LWIP_DEBUGF(TCP_RTO_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("tcp_output_segment: segment busy\n"));
    return ERR_OK;
 8012edc:	2300      	movs	r3, #0
 8012ede:	e0a1      	b.n	8013024 <tcp_output_segment+0x19c>
  }

  /* The TCP header has already been constructed, but the ackno and
   wnd fields remain. */
  seg->tcphdr->ackno = lwip_htonl(pcb->rcv_nxt);
 8012ee0:	68bb      	ldr	r3, [r7, #8]
 8012ee2:	6a5a      	ldr	r2, [r3, #36]	; 0x24
 8012ee4:	68fb      	ldr	r3, [r7, #12]
 8012ee6:	68dc      	ldr	r4, [r3, #12]
 8012ee8:	4610      	mov	r0, r2
 8012eea:	f7f8 fde4 	bl	800bab6 <lwip_htonl>
 8012eee:	4603      	mov	r3, r0
 8012ef0:	60a3      	str	r3, [r4, #8]
       the window scale option) is never scaled. */
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(pcb->rcv_ann_wnd));
  } else
#endif /* LWIP_WND_SCALE */
  {
    seg->tcphdr->wnd = lwip_htons(TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
 8012ef2:	68bb      	ldr	r3, [r7, #8]
 8012ef4:	8d5a      	ldrh	r2, [r3, #42]	; 0x2a
 8012ef6:	68fb      	ldr	r3, [r7, #12]
 8012ef8:	68dc      	ldr	r4, [r3, #12]
 8012efa:	4610      	mov	r0, r2
 8012efc:	f7f8 fdc6 	bl	800ba8c <lwip_htons>
 8012f00:	4603      	mov	r3, r0
 8012f02:	81e3      	strh	r3, [r4, #14]
  }

  pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8012f04:	68bb      	ldr	r3, [r7, #8]
 8012f06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8012f08:	68ba      	ldr	r2, [r7, #8]
 8012f0a:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 8012f0c:	441a      	add	r2, r3
 8012f0e:	68bb      	ldr	r3, [r7, #8]
 8012f10:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Add any requested options.  NB MSS option is only set on SYN
     packets, so ignore it here */
  /* cast through void* to get rid of alignment warnings */
  opts = (u32_t *)(void *)(seg->tcphdr + 1);
 8012f12:	68fb      	ldr	r3, [r7, #12]
 8012f14:	68db      	ldr	r3, [r3, #12]
 8012f16:	3314      	adds	r3, #20
 8012f18:	61fb      	str	r3, [r7, #28]
  if (seg->flags & TF_SEG_OPTS_MSS) {
 8012f1a:	68fb      	ldr	r3, [r7, #12]
 8012f1c:	7a9b      	ldrb	r3, [r3, #10]
 8012f1e:	f003 0301 	and.w	r3, r3, #1
 8012f22:	2b00      	cmp	r3, #0
 8012f24:	d015      	beq.n	8012f52 <tcp_output_segment+0xca>
    u16_t mss;
#if TCP_CALCULATE_EFF_SEND_MSS
    mss = tcp_eff_send_mss_netif(TCP_MSS, netif, &pcb->remote_ip);
 8012f26:	68bb      	ldr	r3, [r7, #8]
 8012f28:	3304      	adds	r3, #4
 8012f2a:	461a      	mov	r2, r3
 8012f2c:	6879      	ldr	r1, [r7, #4]
 8012f2e:	f44f 7006 	mov.w	r0, #536	; 0x218
 8012f32:	f7fc fa33 	bl	800f39c <tcp_eff_send_mss_netif>
 8012f36:	4603      	mov	r3, r0
 8012f38:	837b      	strh	r3, [r7, #26]
#else /* TCP_CALCULATE_EFF_SEND_MSS */
    mss = TCP_MSS;
#endif /* TCP_CALCULATE_EFF_SEND_MSS */
    *opts = TCP_BUILD_MSS_OPTION(mss);
 8012f3a:	8b7b      	ldrh	r3, [r7, #26]
 8012f3c:	f043 7301 	orr.w	r3, r3, #33816576	; 0x2040000
 8012f40:	4618      	mov	r0, r3
 8012f42:	f7f8 fdb8 	bl	800bab6 <lwip_htonl>
 8012f46:	4602      	mov	r2, r0
 8012f48:	69fb      	ldr	r3, [r7, #28]
 8012f4a:	601a      	str	r2, [r3, #0]
    opts += 1;
 8012f4c:	69fb      	ldr	r3, [r7, #28]
 8012f4e:	3304      	adds	r3, #4
 8012f50:	61fb      	str	r3, [r7, #28]
  }
#endif

  /* Set retransmission timer running if it is not currently enabled
     This must be set before checking the route. */
  if (pcb->rtime < 0) {
 8012f52:	68bb      	ldr	r3, [r7, #8]
 8012f54:	f9b3 3030 	ldrsh.w	r3, [r3, #48]	; 0x30
 8012f58:	2b00      	cmp	r3, #0
 8012f5a:	da02      	bge.n	8012f62 <tcp_output_segment+0xda>
    pcb->rtime = 0;
 8012f5c:	68bb      	ldr	r3, [r7, #8]
 8012f5e:	2200      	movs	r2, #0
 8012f60:	861a      	strh	r2, [r3, #48]	; 0x30
  }

  if (pcb->rttest == 0) {
 8012f62:	68bb      	ldr	r3, [r7, #8]
 8012f64:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8012f66:	2b00      	cmp	r3, #0
 8012f68:	d10c      	bne.n	8012f84 <tcp_output_segment+0xfc>
    pcb->rttest = tcp_ticks;
 8012f6a:	4b35      	ldr	r3, [pc, #212]	; (8013040 <tcp_output_segment+0x1b8>)
 8012f6c:	681a      	ldr	r2, [r3, #0]
 8012f6e:	68bb      	ldr	r3, [r7, #8]
 8012f70:	635a      	str	r2, [r3, #52]	; 0x34
    pcb->rtseq = lwip_ntohl(seg->tcphdr->seqno);
 8012f72:	68fb      	ldr	r3, [r7, #12]
 8012f74:	68db      	ldr	r3, [r3, #12]
 8012f76:	685b      	ldr	r3, [r3, #4]
 8012f78:	4618      	mov	r0, r3
 8012f7a:	f7f8 fd9c 	bl	800bab6 <lwip_htonl>
 8012f7e:	4602      	mov	r2, r0
 8012f80:	68bb      	ldr	r3, [r7, #8]
 8012f82:	639a      	str	r2, [r3, #56]	; 0x38
  }
  LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output_segment: %"U32_F":%"U32_F"\n",
                                 lwip_htonl(seg->tcphdr->seqno), lwip_htonl(seg->tcphdr->seqno) +
                                 seg->len));

  len = (u16_t)((u8_t *)seg->tcphdr - (u8_t *)seg->p->payload);
 8012f84:	68fb      	ldr	r3, [r7, #12]
 8012f86:	68da      	ldr	r2, [r3, #12]
 8012f88:	68fb      	ldr	r3, [r7, #12]
 8012f8a:	685b      	ldr	r3, [r3, #4]
 8012f8c:	685b      	ldr	r3, [r3, #4]
 8012f8e:	1ad3      	subs	r3, r2, r3
 8012f90:	833b      	strh	r3, [r7, #24]
  if (len == 0) {
    /** Exclude retransmitted segments from this count. */
    MIB2_STATS_INC(mib2.tcpoutsegs);
  }

  seg->p->len -= len;
 8012f92:	68fb      	ldr	r3, [r7, #12]
 8012f94:	685b      	ldr	r3, [r3, #4]
 8012f96:	8959      	ldrh	r1, [r3, #10]
 8012f98:	68fb      	ldr	r3, [r7, #12]
 8012f9a:	685b      	ldr	r3, [r3, #4]
 8012f9c:	8b3a      	ldrh	r2, [r7, #24]
 8012f9e:	1a8a      	subs	r2, r1, r2
 8012fa0:	b292      	uxth	r2, r2
 8012fa2:	815a      	strh	r2, [r3, #10]
  seg->p->tot_len -= len;
 8012fa4:	68fb      	ldr	r3, [r7, #12]
 8012fa6:	685b      	ldr	r3, [r3, #4]
 8012fa8:	8919      	ldrh	r1, [r3, #8]
 8012faa:	68fb      	ldr	r3, [r7, #12]
 8012fac:	685b      	ldr	r3, [r3, #4]
 8012fae:	8b3a      	ldrh	r2, [r7, #24]
 8012fb0:	1a8a      	subs	r2, r1, r2
 8012fb2:	b292      	uxth	r2, r2
 8012fb4:	811a      	strh	r2, [r3, #8]

  seg->p->payload = seg->tcphdr;
 8012fb6:	68fb      	ldr	r3, [r7, #12]
 8012fb8:	685b      	ldr	r3, [r3, #4]
 8012fba:	68fa      	ldr	r2, [r7, #12]
 8012fbc:	68d2      	ldr	r2, [r2, #12]
 8012fbe:	605a      	str	r2, [r3, #4]

  seg->tcphdr->chksum = 0;
 8012fc0:	68fb      	ldr	r3, [r7, #12]
 8012fc2:	68db      	ldr	r3, [r3, #12]
 8012fc4:	2200      	movs	r2, #0
 8012fc6:	741a      	strb	r2, [r3, #16]
 8012fc8:	2200      	movs	r2, #0
 8012fca:	745a      	strb	r2, [r3, #17]

#ifdef LWIP_HOOK_TCP_OUT_ADD_TCPOPTS
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(seg->p, seg->tcphdr, pcb, opts);
#endif
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(seg->tcphdr + 1)) + LWIP_TCP_OPT_LENGTH_SEGMENT(seg->flags, pcb));
 8012fcc:	68fb      	ldr	r3, [r7, #12]
 8012fce:	68da      	ldr	r2, [r3, #12]
 8012fd0:	68fb      	ldr	r3, [r7, #12]
 8012fd2:	7a9b      	ldrb	r3, [r3, #10]
 8012fd4:	f003 0301 	and.w	r3, r3, #1
 8012fd8:	2b00      	cmp	r3, #0
 8012fda:	d001      	beq.n	8012fe0 <tcp_output_segment+0x158>
 8012fdc:	2318      	movs	r3, #24
 8012fde:	e000      	b.n	8012fe2 <tcp_output_segment+0x15a>
 8012fe0:	2314      	movs	r3, #20
 8012fe2:	4413      	add	r3, r2
 8012fe4:	69fa      	ldr	r2, [r7, #28]
 8012fe6:	429a      	cmp	r2, r3
 8012fe8:	d006      	beq.n	8012ff8 <tcp_output_segment+0x170>
 8012fea:	4b10      	ldr	r3, [pc, #64]	; (801302c <tcp_output_segment+0x1a4>)
 8012fec:	f240 621c 	movw	r2, #1564	; 0x61c
 8012ff0:	4914      	ldr	r1, [pc, #80]	; (8013044 <tcp_output_segment+0x1bc>)
 8012ff2:	4810      	ldr	r0, [pc, #64]	; (8013034 <tcp_output_segment+0x1ac>)
 8012ff4:	f003 fefc 	bl	8016df0 <iprintf>
  }
#endif /* CHECKSUM_GEN_TCP */
  TCP_STATS_INC(tcp.xmit);

  NETIF_SET_HINTS(netif, &(pcb->netif_hints));
  err = ip_output_if(seg->p, &pcb->local_ip, &pcb->remote_ip, pcb->ttl,
 8012ff8:	68fb      	ldr	r3, [r7, #12]
 8012ffa:	6858      	ldr	r0, [r3, #4]
 8012ffc:	68b9      	ldr	r1, [r7, #8]
 8012ffe:	68bb      	ldr	r3, [r7, #8]
 8013000:	1d1c      	adds	r4, r3, #4
 8013002:	68bb      	ldr	r3, [r7, #8]
 8013004:	7add      	ldrb	r5, [r3, #11]
 8013006:	68bb      	ldr	r3, [r7, #8]
 8013008:	7a9b      	ldrb	r3, [r3, #10]
 801300a:	687a      	ldr	r2, [r7, #4]
 801300c:	9202      	str	r2, [sp, #8]
 801300e:	2206      	movs	r2, #6
 8013010:	9201      	str	r2, [sp, #4]
 8013012:	9300      	str	r3, [sp, #0]
 8013014:	462b      	mov	r3, r5
 8013016:	4622      	mov	r2, r4
 8013018:	f002 fc18 	bl	801584c <ip4_output_if>
 801301c:	4603      	mov	r3, r0
 801301e:	75fb      	strb	r3, [r7, #23]
    seg->chksum = SWAP_BYTES_IN_WORD(seg->chksum);
    seg->chksum_swapped = 1;
  }
#endif

  return err;
 8013020:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 8013024:	4618      	mov	r0, r3
 8013026:	3720      	adds	r7, #32
 8013028:	46bd      	mov	sp, r7
 801302a:	bdb0      	pop	{r4, r5, r7, pc}
 801302c:	0801a334 	.word	0x0801a334
 8013030:	0801a8f8 	.word	0x0801a8f8
 8013034:	0801a388 	.word	0x0801a388
 8013038:	0801a918 	.word	0x0801a918
 801303c:	0801a938 	.word	0x0801a938
 8013040:	2000f7f4 	.word	0x2000f7f4
 8013044:	0801a95c 	.word	0x0801a95c

08013048 <tcp_rexmit_rto_prepare>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
err_t
tcp_rexmit_rto_prepare(struct tcp_pcb *pcb)
{
 8013048:	b5b0      	push	{r4, r5, r7, lr}
 801304a:	b084      	sub	sp, #16
 801304c:	af00      	add	r7, sp, #0
 801304e:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;

  LWIP_ASSERT("tcp_rexmit_rto_prepare: invalid pcb", pcb != NULL);
 8013050:	687b      	ldr	r3, [r7, #4]
 8013052:	2b00      	cmp	r3, #0
 8013054:	d106      	bne.n	8013064 <tcp_rexmit_rto_prepare+0x1c>
 8013056:	4b31      	ldr	r3, [pc, #196]	; (801311c <tcp_rexmit_rto_prepare+0xd4>)
 8013058:	f240 6263 	movw	r2, #1635	; 0x663
 801305c:	4930      	ldr	r1, [pc, #192]	; (8013120 <tcp_rexmit_rto_prepare+0xd8>)
 801305e:	4831      	ldr	r0, [pc, #196]	; (8013124 <tcp_rexmit_rto_prepare+0xdc>)
 8013060:	f003 fec6 	bl	8016df0 <iprintf>

  if (pcb->unacked == NULL) {
 8013064:	687b      	ldr	r3, [r7, #4]
 8013066:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013068:	2b00      	cmp	r3, #0
 801306a:	d102      	bne.n	8013072 <tcp_rexmit_rto_prepare+0x2a>
    return ERR_VAL;
 801306c:	f06f 0305 	mvn.w	r3, #5
 8013070:	e050      	b.n	8013114 <tcp_rexmit_rto_prepare+0xcc>

  /* Move all unacked segments to the head of the unsent queue.
     However, give up if any of the unsent pbufs are still referenced by the
     netif driver due to deferred transmission. No point loading the link further
     if it is struggling to flush its buffered writes. */
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 8013072:	687b      	ldr	r3, [r7, #4]
 8013074:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8013076:	60fb      	str	r3, [r7, #12]
 8013078:	e00b      	b.n	8013092 <tcp_rexmit_rto_prepare+0x4a>
    if (tcp_output_segment_busy(seg)) {
 801307a:	68f8      	ldr	r0, [r7, #12]
 801307c:	f7ff fee4 	bl	8012e48 <tcp_output_segment_busy>
 8013080:	4603      	mov	r3, r0
 8013082:	2b00      	cmp	r3, #0
 8013084:	d002      	beq.n	801308c <tcp_rexmit_rto_prepare+0x44>
      LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
      return ERR_VAL;
 8013086:	f06f 0305 	mvn.w	r3, #5
 801308a:	e043      	b.n	8013114 <tcp_rexmit_rto_prepare+0xcc>
  for (seg = pcb->unacked; seg->next != NULL; seg = seg->next) {
 801308c:	68fb      	ldr	r3, [r7, #12]
 801308e:	681b      	ldr	r3, [r3, #0]
 8013090:	60fb      	str	r3, [r7, #12]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	2b00      	cmp	r3, #0
 8013098:	d1ef      	bne.n	801307a <tcp_rexmit_rto_prepare+0x32>
    }
  }
  if (tcp_output_segment_busy(seg)) {
 801309a:	68f8      	ldr	r0, [r7, #12]
 801309c:	f7ff fed4 	bl	8012e48 <tcp_output_segment_busy>
 80130a0:	4603      	mov	r3, r0
 80130a2:	2b00      	cmp	r3, #0
 80130a4:	d002      	beq.n	80130ac <tcp_rexmit_rto_prepare+0x64>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit_rto: segment busy\n"));
    return ERR_VAL;
 80130a6:	f06f 0305 	mvn.w	r3, #5
 80130aa:	e033      	b.n	8013114 <tcp_rexmit_rto_prepare+0xcc>
  }
  /* concatenate unsent queue after unacked queue */
  seg->next = pcb->unsent;
 80130ac:	687b      	ldr	r3, [r7, #4]
 80130ae:	6eda      	ldr	r2, [r3, #108]	; 0x6c
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	601a      	str	r2, [r3, #0]
  if (pcb->unsent == NULL) {
    pcb->unsent_oversize = seg->oversize_left;
  }
#endif /* TCP_OVERSIZE_DBGCHECK */
  /* unsent queue is the concatenated queue (of unacked, unsent) */
  pcb->unsent = pcb->unacked;
 80130b4:	687b      	ldr	r3, [r7, #4]
 80130b6:	6f1a      	ldr	r2, [r3, #112]	; 0x70
 80130b8:	687b      	ldr	r3, [r7, #4]
 80130ba:	66da      	str	r2, [r3, #108]	; 0x6c
  /* unacked queue is now empty */
  pcb->unacked = NULL;
 80130bc:	687b      	ldr	r3, [r7, #4]
 80130be:	2200      	movs	r2, #0
 80130c0:	671a      	str	r2, [r3, #112]	; 0x70

  /* Mark RTO in-progress */
  tcp_set_flags(pcb, TF_RTO);
 80130c2:	687b      	ldr	r3, [r7, #4]
 80130c4:	8b5b      	ldrh	r3, [r3, #26]
 80130c6:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
 80130ca:	b29a      	uxth	r2, r3
 80130cc:	687b      	ldr	r3, [r7, #4]
 80130ce:	835a      	strh	r2, [r3, #26]
  /* Record the next byte following retransmit */
  pcb->rto_end = lwip_ntohl(seg->tcphdr->seqno) + TCP_TCPLEN(seg);
 80130d0:	68fb      	ldr	r3, [r7, #12]
 80130d2:	68db      	ldr	r3, [r3, #12]
 80130d4:	685b      	ldr	r3, [r3, #4]
 80130d6:	4618      	mov	r0, r3
 80130d8:	f7f8 fced 	bl	800bab6 <lwip_htonl>
 80130dc:	4604      	mov	r4, r0
 80130de:	68fb      	ldr	r3, [r7, #12]
 80130e0:	891b      	ldrh	r3, [r3, #8]
 80130e2:	461d      	mov	r5, r3
 80130e4:	68fb      	ldr	r3, [r7, #12]
 80130e6:	68db      	ldr	r3, [r3, #12]
 80130e8:	899b      	ldrh	r3, [r3, #12]
 80130ea:	b29b      	uxth	r3, r3
 80130ec:	4618      	mov	r0, r3
 80130ee:	f7f8 fccd 	bl	800ba8c <lwip_htons>
 80130f2:	4603      	mov	r3, r0
 80130f4:	b2db      	uxtb	r3, r3
 80130f6:	f003 0303 	and.w	r3, r3, #3
 80130fa:	2b00      	cmp	r3, #0
 80130fc:	d001      	beq.n	8013102 <tcp_rexmit_rto_prepare+0xba>
 80130fe:	2301      	movs	r3, #1
 8013100:	e000      	b.n	8013104 <tcp_rexmit_rto_prepare+0xbc>
 8013102:	2300      	movs	r3, #0
 8013104:	442b      	add	r3, r5
 8013106:	18e2      	adds	r2, r4, r3
 8013108:	687b      	ldr	r3, [r7, #4]
 801310a:	64da      	str	r2, [r3, #76]	; 0x4c
  /* Don't take any RTT measurements after retransmitting. */
  pcb->rttest = 0;
 801310c:	687b      	ldr	r3, [r7, #4]
 801310e:	2200      	movs	r2, #0
 8013110:	635a      	str	r2, [r3, #52]	; 0x34

  return ERR_OK;
 8013112:	2300      	movs	r3, #0
}
 8013114:	4618      	mov	r0, r3
 8013116:	3710      	adds	r7, #16
 8013118:	46bd      	mov	sp, r7
 801311a:	bdb0      	pop	{r4, r5, r7, pc}
 801311c:	0801a334 	.word	0x0801a334
 8013120:	0801a970 	.word	0x0801a970
 8013124:	0801a388 	.word	0x0801a388

08013128 <tcp_rexmit_rto_commit>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto_commit(struct tcp_pcb *pcb)
{
 8013128:	b580      	push	{r7, lr}
 801312a:	b082      	sub	sp, #8
 801312c:	af00      	add	r7, sp, #0
 801312e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto_commit: invalid pcb", pcb != NULL);
 8013130:	687b      	ldr	r3, [r7, #4]
 8013132:	2b00      	cmp	r3, #0
 8013134:	d106      	bne.n	8013144 <tcp_rexmit_rto_commit+0x1c>
 8013136:	4b0d      	ldr	r3, [pc, #52]	; (801316c <tcp_rexmit_rto_commit+0x44>)
 8013138:	f44f 62d3 	mov.w	r2, #1688	; 0x698
 801313c:	490c      	ldr	r1, [pc, #48]	; (8013170 <tcp_rexmit_rto_commit+0x48>)
 801313e:	480d      	ldr	r0, [pc, #52]	; (8013174 <tcp_rexmit_rto_commit+0x4c>)
 8013140:	f003 fe56 	bl	8016df0 <iprintf>

  /* increment number of retransmissions */
  if (pcb->nrtx < 0xFF) {
 8013144:	687b      	ldr	r3, [r7, #4]
 8013146:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801314a:	2bff      	cmp	r3, #255	; 0xff
 801314c:	d007      	beq.n	801315e <tcp_rexmit_rto_commit+0x36>
    ++pcb->nrtx;
 801314e:	687b      	ldr	r3, [r7, #4]
 8013150:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013154:	3301      	adds	r3, #1
 8013156:	b2da      	uxtb	r2, r3
 8013158:	687b      	ldr	r3, [r7, #4]
 801315a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }
  /* Do the actual retransmission */
  tcp_output(pcb);
 801315e:	6878      	ldr	r0, [r7, #4]
 8013160:	f7ff fc7e 	bl	8012a60 <tcp_output>
}
 8013164:	bf00      	nop
 8013166:	3708      	adds	r7, #8
 8013168:	46bd      	mov	sp, r7
 801316a:	bd80      	pop	{r7, pc}
 801316c:	0801a334 	.word	0x0801a334
 8013170:	0801a994 	.word	0x0801a994
 8013174:	0801a388 	.word	0x0801a388

08013178 <tcp_rexmit_rto>:
 *
 * @param pcb the tcp_pcb for which to re-enqueue all unacked segments
 */
void
tcp_rexmit_rto(struct tcp_pcb *pcb)
{
 8013178:	b580      	push	{r7, lr}
 801317a:	b082      	sub	sp, #8
 801317c:	af00      	add	r7, sp, #0
 801317e:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_rto: invalid pcb", pcb != NULL);
 8013180:	687b      	ldr	r3, [r7, #4]
 8013182:	2b00      	cmp	r3, #0
 8013184:	d106      	bne.n	8013194 <tcp_rexmit_rto+0x1c>
 8013186:	4b0a      	ldr	r3, [pc, #40]	; (80131b0 <tcp_rexmit_rto+0x38>)
 8013188:	f240 62ad 	movw	r2, #1709	; 0x6ad
 801318c:	4909      	ldr	r1, [pc, #36]	; (80131b4 <tcp_rexmit_rto+0x3c>)
 801318e:	480a      	ldr	r0, [pc, #40]	; (80131b8 <tcp_rexmit_rto+0x40>)
 8013190:	f003 fe2e 	bl	8016df0 <iprintf>

  if (tcp_rexmit_rto_prepare(pcb) == ERR_OK) {
 8013194:	6878      	ldr	r0, [r7, #4]
 8013196:	f7ff ff57 	bl	8013048 <tcp_rexmit_rto_prepare>
 801319a:	4603      	mov	r3, r0
 801319c:	2b00      	cmp	r3, #0
 801319e:	d102      	bne.n	80131a6 <tcp_rexmit_rto+0x2e>
    tcp_rexmit_rto_commit(pcb);
 80131a0:	6878      	ldr	r0, [r7, #4]
 80131a2:	f7ff ffc1 	bl	8013128 <tcp_rexmit_rto_commit>
  }
}
 80131a6:	bf00      	nop
 80131a8:	3708      	adds	r7, #8
 80131aa:	46bd      	mov	sp, r7
 80131ac:	bd80      	pop	{r7, pc}
 80131ae:	bf00      	nop
 80131b0:	0801a334 	.word	0x0801a334
 80131b4:	0801a9b8 	.word	0x0801a9b8
 80131b8:	0801a388 	.word	0x0801a388

080131bc <tcp_rexmit>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
err_t
tcp_rexmit(struct tcp_pcb *pcb)
{
 80131bc:	b590      	push	{r4, r7, lr}
 80131be:	b085      	sub	sp, #20
 80131c0:	af00      	add	r7, sp, #0
 80131c2:	6078      	str	r0, [r7, #4]
  struct tcp_seg *seg;
  struct tcp_seg **cur_seg;

  LWIP_ASSERT("tcp_rexmit: invalid pcb", pcb != NULL);
 80131c4:	687b      	ldr	r3, [r7, #4]
 80131c6:	2b00      	cmp	r3, #0
 80131c8:	d106      	bne.n	80131d8 <tcp_rexmit+0x1c>
 80131ca:	4b2f      	ldr	r3, [pc, #188]	; (8013288 <tcp_rexmit+0xcc>)
 80131cc:	f240 62c1 	movw	r2, #1729	; 0x6c1
 80131d0:	492e      	ldr	r1, [pc, #184]	; (801328c <tcp_rexmit+0xd0>)
 80131d2:	482f      	ldr	r0, [pc, #188]	; (8013290 <tcp_rexmit+0xd4>)
 80131d4:	f003 fe0c 	bl	8016df0 <iprintf>

  if (pcb->unacked == NULL) {
 80131d8:	687b      	ldr	r3, [r7, #4]
 80131da:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131dc:	2b00      	cmp	r3, #0
 80131de:	d102      	bne.n	80131e6 <tcp_rexmit+0x2a>
    return ERR_VAL;
 80131e0:	f06f 0305 	mvn.w	r3, #5
 80131e4:	e04c      	b.n	8013280 <tcp_rexmit+0xc4>
  }

  seg = pcb->unacked;
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80131ea:	60bb      	str	r3, [r7, #8]

  /* Give up if the segment is still referenced by the netif driver
     due to deferred transmission. */
  if (tcp_output_segment_busy(seg)) {
 80131ec:	68b8      	ldr	r0, [r7, #8]
 80131ee:	f7ff fe2b 	bl	8012e48 <tcp_output_segment_busy>
 80131f2:	4603      	mov	r3, r0
 80131f4:	2b00      	cmp	r3, #0
 80131f6:	d002      	beq.n	80131fe <tcp_rexmit+0x42>
    LWIP_DEBUGF(TCP_RTO_DEBUG, ("tcp_rexmit busy\n"));
    return ERR_VAL;
 80131f8:	f06f 0305 	mvn.w	r3, #5
 80131fc:	e040      	b.n	8013280 <tcp_rexmit+0xc4>
  }

  /* Move the first unacked segment to the unsent queue */
  /* Keep the unsent queue sorted. */
  pcb->unacked = seg->next;
 80131fe:	68bb      	ldr	r3, [r7, #8]
 8013200:	681a      	ldr	r2, [r3, #0]
 8013202:	687b      	ldr	r3, [r7, #4]
 8013204:	671a      	str	r2, [r3, #112]	; 0x70

  cur_seg = &(pcb->unsent);
 8013206:	687b      	ldr	r3, [r7, #4]
 8013208:	336c      	adds	r3, #108	; 0x6c
 801320a:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 801320c:	e002      	b.n	8013214 <tcp_rexmit+0x58>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
    cur_seg = &((*cur_seg)->next );
 801320e:	68fb      	ldr	r3, [r7, #12]
 8013210:	681b      	ldr	r3, [r3, #0]
 8013212:	60fb      	str	r3, [r7, #12]
  while (*cur_seg &&
 8013214:	68fb      	ldr	r3, [r7, #12]
 8013216:	681b      	ldr	r3, [r3, #0]
 8013218:	2b00      	cmp	r3, #0
 801321a:	d011      	beq.n	8013240 <tcp_rexmit+0x84>
         TCP_SEQ_LT(lwip_ntohl((*cur_seg)->tcphdr->seqno), lwip_ntohl(seg->tcphdr->seqno))) {
 801321c:	68fb      	ldr	r3, [r7, #12]
 801321e:	681b      	ldr	r3, [r3, #0]
 8013220:	68db      	ldr	r3, [r3, #12]
 8013222:	685b      	ldr	r3, [r3, #4]
 8013224:	4618      	mov	r0, r3
 8013226:	f7f8 fc46 	bl	800bab6 <lwip_htonl>
 801322a:	4604      	mov	r4, r0
 801322c:	68bb      	ldr	r3, [r7, #8]
 801322e:	68db      	ldr	r3, [r3, #12]
 8013230:	685b      	ldr	r3, [r3, #4]
 8013232:	4618      	mov	r0, r3
 8013234:	f7f8 fc3f 	bl	800bab6 <lwip_htonl>
 8013238:	4603      	mov	r3, r0
 801323a:	1ae3      	subs	r3, r4, r3
  while (*cur_seg &&
 801323c:	2b00      	cmp	r3, #0
 801323e:	dbe6      	blt.n	801320e <tcp_rexmit+0x52>
  }
  seg->next = *cur_seg;
 8013240:	68fb      	ldr	r3, [r7, #12]
 8013242:	681a      	ldr	r2, [r3, #0]
 8013244:	68bb      	ldr	r3, [r7, #8]
 8013246:	601a      	str	r2, [r3, #0]
  *cur_seg = seg;
 8013248:	68fb      	ldr	r3, [r7, #12]
 801324a:	68ba      	ldr	r2, [r7, #8]
 801324c:	601a      	str	r2, [r3, #0]
#if TCP_OVERSIZE
  if (seg->next == NULL) {
 801324e:	68bb      	ldr	r3, [r7, #8]
 8013250:	681b      	ldr	r3, [r3, #0]
 8013252:	2b00      	cmp	r3, #0
 8013254:	d103      	bne.n	801325e <tcp_rexmit+0xa2>
    /* the retransmitted segment is last in unsent, so reset unsent_oversize */
    pcb->unsent_oversize = 0;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	2200      	movs	r2, #0
 801325a:	f8a3 2068 	strh.w	r2, [r3, #104]	; 0x68
  }
#endif /* TCP_OVERSIZE */

  if (pcb->nrtx < 0xFF) {
 801325e:	687b      	ldr	r3, [r7, #4]
 8013260:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8013264:	2bff      	cmp	r3, #255	; 0xff
 8013266:	d007      	beq.n	8013278 <tcp_rexmit+0xbc>
    ++pcb->nrtx;
 8013268:	687b      	ldr	r3, [r7, #4]
 801326a:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 801326e:	3301      	adds	r3, #1
 8013270:	b2da      	uxtb	r2, r3
 8013272:	687b      	ldr	r3, [r7, #4]
 8013274:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  }

  /* Don't take any rtt measurements after retransmitting. */
  pcb->rttest = 0;
 8013278:	687b      	ldr	r3, [r7, #4]
 801327a:	2200      	movs	r2, #0
 801327c:	635a      	str	r2, [r3, #52]	; 0x34

  /* Do the actual retransmission. */
  MIB2_STATS_INC(mib2.tcpretranssegs);
  /* No need to call tcp_output: we are always called from tcp_input()
     and thus tcp_output directly returns. */
  return ERR_OK;
 801327e:	2300      	movs	r3, #0
}
 8013280:	4618      	mov	r0, r3
 8013282:	3714      	adds	r7, #20
 8013284:	46bd      	mov	sp, r7
 8013286:	bd90      	pop	{r4, r7, pc}
 8013288:	0801a334 	.word	0x0801a334
 801328c:	0801a9d4 	.word	0x0801a9d4
 8013290:	0801a388 	.word	0x0801a388

08013294 <tcp_rexmit_fast>:
 *
 * @param pcb the tcp_pcb for which to retransmit the first unacked segment
 */
void
tcp_rexmit_fast(struct tcp_pcb *pcb)
{
 8013294:	b580      	push	{r7, lr}
 8013296:	b082      	sub	sp, #8
 8013298:	af00      	add	r7, sp, #0
 801329a:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("tcp_rexmit_fast: invalid pcb", pcb != NULL);
 801329c:	687b      	ldr	r3, [r7, #4]
 801329e:	2b00      	cmp	r3, #0
 80132a0:	d106      	bne.n	80132b0 <tcp_rexmit_fast+0x1c>
 80132a2:	4b2a      	ldr	r3, [pc, #168]	; (801334c <tcp_rexmit_fast+0xb8>)
 80132a4:	f240 62f9 	movw	r2, #1785	; 0x6f9
 80132a8:	4929      	ldr	r1, [pc, #164]	; (8013350 <tcp_rexmit_fast+0xbc>)
 80132aa:	482a      	ldr	r0, [pc, #168]	; (8013354 <tcp_rexmit_fast+0xc0>)
 80132ac:	f003 fda0 	bl	8016df0 <iprintf>

  if (pcb->unacked != NULL && !(pcb->flags & TF_INFR)) {
 80132b0:	687b      	ldr	r3, [r7, #4]
 80132b2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80132b4:	2b00      	cmp	r3, #0
 80132b6:	d044      	beq.n	8013342 <tcp_rexmit_fast+0xae>
 80132b8:	687b      	ldr	r3, [r7, #4]
 80132ba:	8b5b      	ldrh	r3, [r3, #26]
 80132bc:	f003 0304 	and.w	r3, r3, #4
 80132c0:	2b00      	cmp	r3, #0
 80132c2:	d13e      	bne.n	8013342 <tcp_rexmit_fast+0xae>
    LWIP_DEBUGF(TCP_FR_DEBUG,
                ("tcp_receive: dupacks %"U16_F" (%"U32_F
                 "), fast retransmit %"U32_F"\n",
                 (u16_t)pcb->dupacks, pcb->lastack,
                 lwip_ntohl(pcb->unacked->tcphdr->seqno)));
    if (tcp_rexmit(pcb) == ERR_OK) {
 80132c4:	6878      	ldr	r0, [r7, #4]
 80132c6:	f7ff ff79 	bl	80131bc <tcp_rexmit>
 80132ca:	4603      	mov	r3, r0
 80132cc:	2b00      	cmp	r3, #0
 80132ce:	d138      	bne.n	8013342 <tcp_rexmit_fast+0xae>
      /* Set ssthresh to half of the minimum of the current
       * cwnd and the advertised window */
      pcb->ssthresh = LWIP_MIN(pcb->cwnd, pcb->snd_wnd) / 2;
 80132d0:	687b      	ldr	r3, [r7, #4]
 80132d2:	f8b3 2060 	ldrh.w	r2, [r3, #96]	; 0x60
 80132d6:	687b      	ldr	r3, [r7, #4]
 80132d8:	f8b3 3048 	ldrh.w	r3, [r3, #72]	; 0x48
 80132dc:	4293      	cmp	r3, r2
 80132de:	bf28      	it	cs
 80132e0:	4613      	movcs	r3, r2
 80132e2:	b29b      	uxth	r3, r3
 80132e4:	0fda      	lsrs	r2, r3, #31
 80132e6:	4413      	add	r3, r2
 80132e8:	105b      	asrs	r3, r3, #1
 80132ea:	b29a      	uxth	r2, r3
 80132ec:	687b      	ldr	r3, [r7, #4]
 80132ee:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a

      /* The minimum value for ssthresh should be 2 MSS */
      if (pcb->ssthresh < (2U * pcb->mss)) {
 80132f2:	687b      	ldr	r3, [r7, #4]
 80132f4:	f8b3 304a 	ldrh.w	r3, [r3, #74]	; 0x4a
 80132f8:	461a      	mov	r2, r3
 80132fa:	687b      	ldr	r3, [r7, #4]
 80132fc:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 80132fe:	005b      	lsls	r3, r3, #1
 8013300:	429a      	cmp	r2, r3
 8013302:	d206      	bcs.n	8013312 <tcp_rexmit_fast+0x7e>
        LWIP_DEBUGF(TCP_FR_DEBUG,
                    ("tcp_receive: The minimum value for ssthresh %"TCPWNDSIZE_F
                     " should be min 2 mss %"U16_F"...\n",
                     pcb->ssthresh, (u16_t)(2 * pcb->mss)));
        pcb->ssthresh = 2 * pcb->mss;
 8013304:	687b      	ldr	r3, [r7, #4]
 8013306:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 8013308:	005b      	lsls	r3, r3, #1
 801330a:	b29a      	uxth	r2, r3
 801330c:	687b      	ldr	r3, [r7, #4]
 801330e:	f8a3 204a 	strh.w	r2, [r3, #74]	; 0x4a
      }

      pcb->cwnd = pcb->ssthresh + 3 * pcb->mss;
 8013312:	687b      	ldr	r3, [r7, #4]
 8013314:	f8b3 204a 	ldrh.w	r2, [r3, #74]	; 0x4a
 8013318:	687b      	ldr	r3, [r7, #4]
 801331a:	8e5b      	ldrh	r3, [r3, #50]	; 0x32
 801331c:	4619      	mov	r1, r3
 801331e:	0049      	lsls	r1, r1, #1
 8013320:	440b      	add	r3, r1
 8013322:	b29b      	uxth	r3, r3
 8013324:	4413      	add	r3, r2
 8013326:	b29a      	uxth	r2, r3
 8013328:	687b      	ldr	r3, [r7, #4]
 801332a:	f8a3 2048 	strh.w	r2, [r3, #72]	; 0x48
      tcp_set_flags(pcb, TF_INFR);
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	8b5b      	ldrh	r3, [r3, #26]
 8013332:	f043 0304 	orr.w	r3, r3, #4
 8013336:	b29a      	uxth	r2, r3
 8013338:	687b      	ldr	r3, [r7, #4]
 801333a:	835a      	strh	r2, [r3, #26]

      /* Reset the retransmission timer to prevent immediate rto retransmissions */
      pcb->rtime = 0;
 801333c:	687b      	ldr	r3, [r7, #4]
 801333e:	2200      	movs	r2, #0
 8013340:	861a      	strh	r2, [r3, #48]	; 0x30
    }
  }
}
 8013342:	bf00      	nop
 8013344:	3708      	adds	r7, #8
 8013346:	46bd      	mov	sp, r7
 8013348:	bd80      	pop	{r7, pc}
 801334a:	bf00      	nop
 801334c:	0801a334 	.word	0x0801a334
 8013350:	0801a9ec 	.word	0x0801a9ec
 8013354:	0801a388 	.word	0x0801a388

08013358 <tcp_output_alloc_header_common>:

static struct pbuf *
tcp_output_alloc_header_common(u32_t ackno, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */,
                        u16_t src_port, u16_t dst_port, u8_t flags, u16_t wnd)
{
 8013358:	b580      	push	{r7, lr}
 801335a:	b086      	sub	sp, #24
 801335c:	af00      	add	r7, sp, #0
 801335e:	60f8      	str	r0, [r7, #12]
 8013360:	607b      	str	r3, [r7, #4]
 8013362:	460b      	mov	r3, r1
 8013364:	817b      	strh	r3, [r7, #10]
 8013366:	4613      	mov	r3, r2
 8013368:	813b      	strh	r3, [r7, #8]
  struct tcp_hdr *tcphdr;
  struct pbuf *p;

  p = pbuf_alloc(PBUF_IP, TCP_HLEN + optlen + datalen, PBUF_RAM);
 801336a:	897a      	ldrh	r2, [r7, #10]
 801336c:	893b      	ldrh	r3, [r7, #8]
 801336e:	4413      	add	r3, r2
 8013370:	b29b      	uxth	r3, r3
 8013372:	3314      	adds	r3, #20
 8013374:	b29b      	uxth	r3, r3
 8013376:	f44f 7220 	mov.w	r2, #640	; 0x280
 801337a:	4619      	mov	r1, r3
 801337c:	2022      	movs	r0, #34	; 0x22
 801337e:	f7f9 fc93 	bl	800cca8 <pbuf_alloc>
 8013382:	6178      	str	r0, [r7, #20]
  if (p != NULL) {
 8013384:	697b      	ldr	r3, [r7, #20]
 8013386:	2b00      	cmp	r3, #0
 8013388:	d04d      	beq.n	8013426 <tcp_output_alloc_header_common+0xce>
    LWIP_ASSERT("check that first pbuf can hold struct tcp_hdr",
 801338a:	897b      	ldrh	r3, [r7, #10]
 801338c:	3313      	adds	r3, #19
 801338e:	697a      	ldr	r2, [r7, #20]
 8013390:	8952      	ldrh	r2, [r2, #10]
 8013392:	4293      	cmp	r3, r2
 8013394:	db06      	blt.n	80133a4 <tcp_output_alloc_header_common+0x4c>
 8013396:	4b26      	ldr	r3, [pc, #152]	; (8013430 <tcp_output_alloc_header_common+0xd8>)
 8013398:	f240 7223 	movw	r2, #1827	; 0x723
 801339c:	4925      	ldr	r1, [pc, #148]	; (8013434 <tcp_output_alloc_header_common+0xdc>)
 801339e:	4826      	ldr	r0, [pc, #152]	; (8013438 <tcp_output_alloc_header_common+0xe0>)
 80133a0:	f003 fd26 	bl	8016df0 <iprintf>
                (p->len >= TCP_HLEN + optlen));
    tcphdr = (struct tcp_hdr *)p->payload;
 80133a4:	697b      	ldr	r3, [r7, #20]
 80133a6:	685b      	ldr	r3, [r3, #4]
 80133a8:	613b      	str	r3, [r7, #16]
    tcphdr->src = lwip_htons(src_port);
 80133aa:	8c3b      	ldrh	r3, [r7, #32]
 80133ac:	4618      	mov	r0, r3
 80133ae:	f7f8 fb6d 	bl	800ba8c <lwip_htons>
 80133b2:	4603      	mov	r3, r0
 80133b4:	461a      	mov	r2, r3
 80133b6:	693b      	ldr	r3, [r7, #16]
 80133b8:	801a      	strh	r2, [r3, #0]
    tcphdr->dest = lwip_htons(dst_port);
 80133ba:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80133bc:	4618      	mov	r0, r3
 80133be:	f7f8 fb65 	bl	800ba8c <lwip_htons>
 80133c2:	4603      	mov	r3, r0
 80133c4:	461a      	mov	r2, r3
 80133c6:	693b      	ldr	r3, [r7, #16]
 80133c8:	805a      	strh	r2, [r3, #2]
    tcphdr->seqno = seqno_be;
 80133ca:	693b      	ldr	r3, [r7, #16]
 80133cc:	687a      	ldr	r2, [r7, #4]
 80133ce:	605a      	str	r2, [r3, #4]
    tcphdr->ackno = lwip_htonl(ackno);
 80133d0:	68f8      	ldr	r0, [r7, #12]
 80133d2:	f7f8 fb70 	bl	800bab6 <lwip_htonl>
 80133d6:	4602      	mov	r2, r0
 80133d8:	693b      	ldr	r3, [r7, #16]
 80133da:	609a      	str	r2, [r3, #8]
    TCPH_HDRLEN_FLAGS_SET(tcphdr, (5 + optlen / 4), flags);
 80133dc:	897b      	ldrh	r3, [r7, #10]
 80133de:	089b      	lsrs	r3, r3, #2
 80133e0:	b29b      	uxth	r3, r3
 80133e2:	3305      	adds	r3, #5
 80133e4:	b29b      	uxth	r3, r3
 80133e6:	031b      	lsls	r3, r3, #12
 80133e8:	b29a      	uxth	r2, r3
 80133ea:	f897 3028 	ldrb.w	r3, [r7, #40]	; 0x28
 80133ee:	b29b      	uxth	r3, r3
 80133f0:	4313      	orrs	r3, r2
 80133f2:	b29b      	uxth	r3, r3
 80133f4:	4618      	mov	r0, r3
 80133f6:	f7f8 fb49 	bl	800ba8c <lwip_htons>
 80133fa:	4603      	mov	r3, r0
 80133fc:	461a      	mov	r2, r3
 80133fe:	693b      	ldr	r3, [r7, #16]
 8013400:	819a      	strh	r2, [r3, #12]
    tcphdr->wnd = lwip_htons(wnd);
 8013402:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013404:	4618      	mov	r0, r3
 8013406:	f7f8 fb41 	bl	800ba8c <lwip_htons>
 801340a:	4603      	mov	r3, r0
 801340c:	461a      	mov	r2, r3
 801340e:	693b      	ldr	r3, [r7, #16]
 8013410:	81da      	strh	r2, [r3, #14]
    tcphdr->chksum = 0;
 8013412:	693b      	ldr	r3, [r7, #16]
 8013414:	2200      	movs	r2, #0
 8013416:	741a      	strb	r2, [r3, #16]
 8013418:	2200      	movs	r2, #0
 801341a:	745a      	strb	r2, [r3, #17]
    tcphdr->urgp = 0;
 801341c:	693b      	ldr	r3, [r7, #16]
 801341e:	2200      	movs	r2, #0
 8013420:	749a      	strb	r2, [r3, #18]
 8013422:	2200      	movs	r2, #0
 8013424:	74da      	strb	r2, [r3, #19]
  }
  return p;
 8013426:	697b      	ldr	r3, [r7, #20]
}
 8013428:	4618      	mov	r0, r3
 801342a:	3718      	adds	r7, #24
 801342c:	46bd      	mov	sp, r7
 801342e:	bd80      	pop	{r7, pc}
 8013430:	0801a334 	.word	0x0801a334
 8013434:	0801aa0c 	.word	0x0801aa0c
 8013438:	0801a388 	.word	0x0801a388

0801343c <tcp_output_alloc_header>:
 * @return pbuf with p->payload being the tcp_hdr
 */
static struct pbuf *
tcp_output_alloc_header(struct tcp_pcb *pcb, u16_t optlen, u16_t datalen,
                        u32_t seqno_be /* already in network byte order */)
{
 801343c:	b5b0      	push	{r4, r5, r7, lr}
 801343e:	b08a      	sub	sp, #40	; 0x28
 8013440:	af04      	add	r7, sp, #16
 8013442:	60f8      	str	r0, [r7, #12]
 8013444:	607b      	str	r3, [r7, #4]
 8013446:	460b      	mov	r3, r1
 8013448:	817b      	strh	r3, [r7, #10]
 801344a:	4613      	mov	r3, r2
 801344c:	813b      	strh	r3, [r7, #8]
  struct pbuf *p;

  LWIP_ASSERT("tcp_output_alloc_header: invalid pcb", pcb != NULL);
 801344e:	68fb      	ldr	r3, [r7, #12]
 8013450:	2b00      	cmp	r3, #0
 8013452:	d106      	bne.n	8013462 <tcp_output_alloc_header+0x26>
 8013454:	4b15      	ldr	r3, [pc, #84]	; (80134ac <tcp_output_alloc_header+0x70>)
 8013456:	f240 7242 	movw	r2, #1858	; 0x742
 801345a:	4915      	ldr	r1, [pc, #84]	; (80134b0 <tcp_output_alloc_header+0x74>)
 801345c:	4815      	ldr	r0, [pc, #84]	; (80134b4 <tcp_output_alloc_header+0x78>)
 801345e:	f003 fcc7 	bl	8016df0 <iprintf>

  p = tcp_output_alloc_header_common(pcb->rcv_nxt, optlen, datalen,
 8013462:	68fb      	ldr	r3, [r7, #12]
 8013464:	6a58      	ldr	r0, [r3, #36]	; 0x24
 8013466:	68fb      	ldr	r3, [r7, #12]
 8013468:	8adb      	ldrh	r3, [r3, #22]
 801346a:	68fa      	ldr	r2, [r7, #12]
 801346c:	8b12      	ldrh	r2, [r2, #24]
 801346e:	68f9      	ldr	r1, [r7, #12]
 8013470:	8d49      	ldrh	r1, [r1, #42]	; 0x2a
 8013472:	893d      	ldrh	r5, [r7, #8]
 8013474:	897c      	ldrh	r4, [r7, #10]
 8013476:	9103      	str	r1, [sp, #12]
 8013478:	2110      	movs	r1, #16
 801347a:	9102      	str	r1, [sp, #8]
 801347c:	9201      	str	r2, [sp, #4]
 801347e:	9300      	str	r3, [sp, #0]
 8013480:	687b      	ldr	r3, [r7, #4]
 8013482:	462a      	mov	r2, r5
 8013484:	4621      	mov	r1, r4
 8013486:	f7ff ff67 	bl	8013358 <tcp_output_alloc_header_common>
 801348a:	6178      	str	r0, [r7, #20]
    seqno_be, pcb->local_port, pcb->remote_port, TCP_ACK,
    TCPWND_MIN16(RCV_WND_SCALE(pcb, pcb->rcv_ann_wnd)));
  if (p != NULL) {
 801348c:	697b      	ldr	r3, [r7, #20]
 801348e:	2b00      	cmp	r3, #0
 8013490:	d006      	beq.n	80134a0 <tcp_output_alloc_header+0x64>
    /* If we're sending a packet, update the announced right window edge */
    pcb->rcv_ann_right_edge = pcb->rcv_nxt + pcb->rcv_ann_wnd;
 8013492:	68fb      	ldr	r3, [r7, #12]
 8013494:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8013496:	68fa      	ldr	r2, [r7, #12]
 8013498:	8d52      	ldrh	r2, [r2, #42]	; 0x2a
 801349a:	441a      	add	r2, r3
 801349c:	68fb      	ldr	r3, [r7, #12]
 801349e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  return p;
 80134a0:	697b      	ldr	r3, [r7, #20]
}
 80134a2:	4618      	mov	r0, r3
 80134a4:	3718      	adds	r7, #24
 80134a6:	46bd      	mov	sp, r7
 80134a8:	bdb0      	pop	{r4, r5, r7, pc}
 80134aa:	bf00      	nop
 80134ac:	0801a334 	.word	0x0801a334
 80134b0:	0801aa3c 	.word	0x0801aa3c
 80134b4:	0801a388 	.word	0x0801a388

080134b8 <tcp_output_fill_options>:

/* Fill in options for control segments */
static void
tcp_output_fill_options(const struct tcp_pcb *pcb, struct pbuf *p, u8_t optflags, u8_t num_sacks)
{
 80134b8:	b580      	push	{r7, lr}
 80134ba:	b088      	sub	sp, #32
 80134bc:	af00      	add	r7, sp, #0
 80134be:	60f8      	str	r0, [r7, #12]
 80134c0:	60b9      	str	r1, [r7, #8]
 80134c2:	4611      	mov	r1, r2
 80134c4:	461a      	mov	r2, r3
 80134c6:	460b      	mov	r3, r1
 80134c8:	71fb      	strb	r3, [r7, #7]
 80134ca:	4613      	mov	r3, r2
 80134cc:	71bb      	strb	r3, [r7, #6]
  struct tcp_hdr *tcphdr;
  u32_t *opts;
  u16_t sacks_len = 0;
 80134ce:	2300      	movs	r3, #0
 80134d0:	83fb      	strh	r3, [r7, #30]

  LWIP_ASSERT("tcp_output_fill_options: invalid pbuf", p != NULL);
 80134d2:	68bb      	ldr	r3, [r7, #8]
 80134d4:	2b00      	cmp	r3, #0
 80134d6:	d106      	bne.n	80134e6 <tcp_output_fill_options+0x2e>
 80134d8:	4b12      	ldr	r3, [pc, #72]	; (8013524 <tcp_output_fill_options+0x6c>)
 80134da:	f240 7256 	movw	r2, #1878	; 0x756
 80134de:	4912      	ldr	r1, [pc, #72]	; (8013528 <tcp_output_fill_options+0x70>)
 80134e0:	4812      	ldr	r0, [pc, #72]	; (801352c <tcp_output_fill_options+0x74>)
 80134e2:	f003 fc85 	bl	8016df0 <iprintf>

  tcphdr = (struct tcp_hdr *)p->payload;
 80134e6:	68bb      	ldr	r3, [r7, #8]
 80134e8:	685b      	ldr	r3, [r3, #4]
 80134ea:	61bb      	str	r3, [r7, #24]
  opts = (u32_t *)(void *)(tcphdr + 1);
 80134ec:	69bb      	ldr	r3, [r7, #24]
 80134ee:	3314      	adds	r3, #20
 80134f0:	617b      	str	r3, [r7, #20]
  opts = LWIP_HOOK_TCP_OUT_ADD_TCPOPTS(p, tcphdr, pcb, opts);
#endif

  LWIP_UNUSED_ARG(pcb);
  LWIP_UNUSED_ARG(sacks_len);
  LWIP_ASSERT("options not filled", (u8_t *)opts == ((u8_t *)(tcphdr + 1)) + sacks_len * 4 + LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb));
 80134f2:	8bfb      	ldrh	r3, [r7, #30]
 80134f4:	009b      	lsls	r3, r3, #2
 80134f6:	461a      	mov	r2, r3
 80134f8:	79fb      	ldrb	r3, [r7, #7]
 80134fa:	009b      	lsls	r3, r3, #2
 80134fc:	f003 0304 	and.w	r3, r3, #4
 8013500:	4413      	add	r3, r2
 8013502:	3314      	adds	r3, #20
 8013504:	69ba      	ldr	r2, [r7, #24]
 8013506:	4413      	add	r3, r2
 8013508:	697a      	ldr	r2, [r7, #20]
 801350a:	429a      	cmp	r2, r3
 801350c:	d006      	beq.n	801351c <tcp_output_fill_options+0x64>
 801350e:	4b05      	ldr	r3, [pc, #20]	; (8013524 <tcp_output_fill_options+0x6c>)
 8013510:	f240 7275 	movw	r2, #1909	; 0x775
 8013514:	4906      	ldr	r1, [pc, #24]	; (8013530 <tcp_output_fill_options+0x78>)
 8013516:	4805      	ldr	r0, [pc, #20]	; (801352c <tcp_output_fill_options+0x74>)
 8013518:	f003 fc6a 	bl	8016df0 <iprintf>
  LWIP_UNUSED_ARG(optflags); /* for LWIP_NOASSERT */
  LWIP_UNUSED_ARG(opts); /* for LWIP_NOASSERT */
}
 801351c:	bf00      	nop
 801351e:	3720      	adds	r7, #32
 8013520:	46bd      	mov	sp, r7
 8013522:	bd80      	pop	{r7, pc}
 8013524:	0801a334 	.word	0x0801a334
 8013528:	0801aa64 	.word	0x0801aa64
 801352c:	0801a388 	.word	0x0801a388
 8013530:	0801a95c 	.word	0x0801a95c

08013534 <tcp_output_control_segment>:
 * header checksum and calling ip_output_if while handling netif hints and stats.
 */
static err_t
tcp_output_control_segment(const struct tcp_pcb *pcb, struct pbuf *p,
                           const ip_addr_t *src, const ip_addr_t *dst)
{
 8013534:	b580      	push	{r7, lr}
 8013536:	b08a      	sub	sp, #40	; 0x28
 8013538:	af04      	add	r7, sp, #16
 801353a:	60f8      	str	r0, [r7, #12]
 801353c:	60b9      	str	r1, [r7, #8]
 801353e:	607a      	str	r2, [r7, #4]
 8013540:	603b      	str	r3, [r7, #0]
  err_t err;
  struct netif *netif;

  LWIP_ASSERT("tcp_output_control_segment: invalid pbuf", p != NULL);
 8013542:	68bb      	ldr	r3, [r7, #8]
 8013544:	2b00      	cmp	r3, #0
 8013546:	d106      	bne.n	8013556 <tcp_output_control_segment+0x22>
 8013548:	4b1c      	ldr	r3, [pc, #112]	; (80135bc <tcp_output_control_segment+0x88>)
 801354a:	f240 7287 	movw	r2, #1927	; 0x787
 801354e:	491c      	ldr	r1, [pc, #112]	; (80135c0 <tcp_output_control_segment+0x8c>)
 8013550:	481c      	ldr	r0, [pc, #112]	; (80135c4 <tcp_output_control_segment+0x90>)
 8013552:	f003 fc4d 	bl	8016df0 <iprintf>

  netif = tcp_route(pcb, src, dst);
 8013556:	683a      	ldr	r2, [r7, #0]
 8013558:	6879      	ldr	r1, [r7, #4]
 801355a:	68f8      	ldr	r0, [r7, #12]
 801355c:	f7fe fae8 	bl	8011b30 <tcp_route>
 8013560:	6138      	str	r0, [r7, #16]
  if (netif == NULL) {
 8013562:	693b      	ldr	r3, [r7, #16]
 8013564:	2b00      	cmp	r3, #0
 8013566:	d102      	bne.n	801356e <tcp_output_control_segment+0x3a>
    err = ERR_RTE;
 8013568:	23fc      	movs	r3, #252	; 0xfc
 801356a:	75fb      	strb	r3, [r7, #23]
 801356c:	e01c      	b.n	80135a8 <tcp_output_control_segment+0x74>
      struct tcp_hdr *tcphdr = (struct tcp_hdr *)p->payload;
      tcphdr->chksum = ip_chksum_pseudo(p, IP_PROTO_TCP, p->tot_len,
                                        src, dst);
    }
#endif
    if (pcb != NULL) {
 801356e:	68fb      	ldr	r3, [r7, #12]
 8013570:	2b00      	cmp	r3, #0
 8013572:	d006      	beq.n	8013582 <tcp_output_control_segment+0x4e>
      NETIF_SET_HINTS(netif, LWIP_CONST_CAST(struct netif_hint*, &(pcb->netif_hints)));
      ttl = pcb->ttl;
 8013574:	68fb      	ldr	r3, [r7, #12]
 8013576:	7adb      	ldrb	r3, [r3, #11]
 8013578:	75bb      	strb	r3, [r7, #22]
      tos = pcb->tos;
 801357a:	68fb      	ldr	r3, [r7, #12]
 801357c:	7a9b      	ldrb	r3, [r3, #10]
 801357e:	757b      	strb	r3, [r7, #21]
 8013580:	e003      	b.n	801358a <tcp_output_control_segment+0x56>
    } else {
      /* Send output with hardcoded TTL/HL since we have no access to the pcb */
      ttl = TCP_TTL;
 8013582:	23ff      	movs	r3, #255	; 0xff
 8013584:	75bb      	strb	r3, [r7, #22]
      tos = 0;
 8013586:	2300      	movs	r3, #0
 8013588:	757b      	strb	r3, [r7, #21]
    }
    TCP_STATS_INC(tcp.xmit);
    err = ip_output_if(p, src, dst, ttl, tos, IP_PROTO_TCP, netif);
 801358a:	7dba      	ldrb	r2, [r7, #22]
 801358c:	693b      	ldr	r3, [r7, #16]
 801358e:	9302      	str	r3, [sp, #8]
 8013590:	2306      	movs	r3, #6
 8013592:	9301      	str	r3, [sp, #4]
 8013594:	7d7b      	ldrb	r3, [r7, #21]
 8013596:	9300      	str	r3, [sp, #0]
 8013598:	4613      	mov	r3, r2
 801359a:	683a      	ldr	r2, [r7, #0]
 801359c:	6879      	ldr	r1, [r7, #4]
 801359e:	68b8      	ldr	r0, [r7, #8]
 80135a0:	f002 f954 	bl	801584c <ip4_output_if>
 80135a4:	4603      	mov	r3, r0
 80135a6:	75fb      	strb	r3, [r7, #23]
    NETIF_RESET_HINTS(netif);
  }
  pbuf_free(p);
 80135a8:	68b8      	ldr	r0, [r7, #8]
 80135aa:	f7f9 fe61 	bl	800d270 <pbuf_free>
  return err;
 80135ae:	f997 3017 	ldrsb.w	r3, [r7, #23]
}
 80135b2:	4618      	mov	r0, r3
 80135b4:	3718      	adds	r7, #24
 80135b6:	46bd      	mov	sp, r7
 80135b8:	bd80      	pop	{r7, pc}
 80135ba:	bf00      	nop
 80135bc:	0801a334 	.word	0x0801a334
 80135c0:	0801aa8c 	.word	0x0801aa8c
 80135c4:	0801a388 	.word	0x0801a388

080135c8 <tcp_rst>:
 */
void
tcp_rst(const struct tcp_pcb *pcb, u32_t seqno, u32_t ackno,
        const ip_addr_t *local_ip, const ip_addr_t *remote_ip,
        u16_t local_port, u16_t remote_port)
{
 80135c8:	b590      	push	{r4, r7, lr}
 80135ca:	b08b      	sub	sp, #44	; 0x2c
 80135cc:	af04      	add	r7, sp, #16
 80135ce:	60f8      	str	r0, [r7, #12]
 80135d0:	60b9      	str	r1, [r7, #8]
 80135d2:	607a      	str	r2, [r7, #4]
 80135d4:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  u16_t wnd;
  u8_t optlen;

  LWIP_ASSERT("tcp_rst: invalid local_ip", local_ip != NULL);
 80135d6:	683b      	ldr	r3, [r7, #0]
 80135d8:	2b00      	cmp	r3, #0
 80135da:	d106      	bne.n	80135ea <tcp_rst+0x22>
 80135dc:	4b1f      	ldr	r3, [pc, #124]	; (801365c <tcp_rst+0x94>)
 80135de:	f240 72c4 	movw	r2, #1988	; 0x7c4
 80135e2:	491f      	ldr	r1, [pc, #124]	; (8013660 <tcp_rst+0x98>)
 80135e4:	481f      	ldr	r0, [pc, #124]	; (8013664 <tcp_rst+0x9c>)
 80135e6:	f003 fc03 	bl	8016df0 <iprintf>
  LWIP_ASSERT("tcp_rst: invalid remote_ip", remote_ip != NULL);
 80135ea:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80135ec:	2b00      	cmp	r3, #0
 80135ee:	d106      	bne.n	80135fe <tcp_rst+0x36>
 80135f0:	4b1a      	ldr	r3, [pc, #104]	; (801365c <tcp_rst+0x94>)
 80135f2:	f240 72c5 	movw	r2, #1989	; 0x7c5
 80135f6:	491c      	ldr	r1, [pc, #112]	; (8013668 <tcp_rst+0xa0>)
 80135f8:	481a      	ldr	r0, [pc, #104]	; (8013664 <tcp_rst+0x9c>)
 80135fa:	f003 fbf9 	bl	8016df0 <iprintf>

  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80135fe:	2300      	movs	r3, #0
 8013600:	75fb      	strb	r3, [r7, #23]

#if LWIP_WND_SCALE
  wnd = PP_HTONS(((TCP_WND >> TCP_RCV_SCALE) & 0xFFFF));
#else
  wnd = PP_HTONS(TCP_WND);
 8013602:	f246 0308 	movw	r3, #24584	; 0x6008
 8013606:	82bb      	strh	r3, [r7, #20]
#endif

  p = tcp_output_alloc_header_common(ackno, optlen, 0, lwip_htonl(seqno), local_port,
 8013608:	7dfb      	ldrb	r3, [r7, #23]
 801360a:	b29c      	uxth	r4, r3
 801360c:	68b8      	ldr	r0, [r7, #8]
 801360e:	f7f8 fa52 	bl	800bab6 <lwip_htonl>
 8013612:	4602      	mov	r2, r0
 8013614:	8abb      	ldrh	r3, [r7, #20]
 8013616:	9303      	str	r3, [sp, #12]
 8013618:	2314      	movs	r3, #20
 801361a:	9302      	str	r3, [sp, #8]
 801361c:	8e3b      	ldrh	r3, [r7, #48]	; 0x30
 801361e:	9301      	str	r3, [sp, #4]
 8013620:	8dbb      	ldrh	r3, [r7, #44]	; 0x2c
 8013622:	9300      	str	r3, [sp, #0]
 8013624:	4613      	mov	r3, r2
 8013626:	2200      	movs	r2, #0
 8013628:	4621      	mov	r1, r4
 801362a:	6878      	ldr	r0, [r7, #4]
 801362c:	f7ff fe94 	bl	8013358 <tcp_output_alloc_header_common>
 8013630:	6138      	str	r0, [r7, #16]
    remote_port, TCP_RST | TCP_ACK, wnd);
  if (p == NULL) {
 8013632:	693b      	ldr	r3, [r7, #16]
 8013634:	2b00      	cmp	r3, #0
 8013636:	d00c      	beq.n	8013652 <tcp_rst+0x8a>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_rst: could not allocate memory for pbuf\n"));
    return;
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 8013638:	7dfb      	ldrb	r3, [r7, #23]
 801363a:	2200      	movs	r2, #0
 801363c:	6939      	ldr	r1, [r7, #16]
 801363e:	68f8      	ldr	r0, [r7, #12]
 8013640:	f7ff ff3a 	bl	80134b8 <tcp_output_fill_options>

  MIB2_STATS_INC(mib2.tcpoutrsts);

  tcp_output_control_segment(pcb, p, local_ip, remote_ip);
 8013644:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8013646:	683a      	ldr	r2, [r7, #0]
 8013648:	6939      	ldr	r1, [r7, #16]
 801364a:	68f8      	ldr	r0, [r7, #12]
 801364c:	f7ff ff72 	bl	8013534 <tcp_output_control_segment>
 8013650:	e000      	b.n	8013654 <tcp_rst+0x8c>
    return;
 8013652:	bf00      	nop
  LWIP_DEBUGF(TCP_RST_DEBUG, ("tcp_rst: seqno %"U32_F" ackno %"U32_F".\n", seqno, ackno));
}
 8013654:	371c      	adds	r7, #28
 8013656:	46bd      	mov	sp, r7
 8013658:	bd90      	pop	{r4, r7, pc}
 801365a:	bf00      	nop
 801365c:	0801a334 	.word	0x0801a334
 8013660:	0801aab8 	.word	0x0801aab8
 8013664:	0801a388 	.word	0x0801a388
 8013668:	0801aad4 	.word	0x0801aad4

0801366c <tcp_send_empty_ack>:
 *
 * @param pcb Protocol control block for the TCP connection to send the ACK
 */
err_t
tcp_send_empty_ack(struct tcp_pcb *pcb)
{
 801366c:	b590      	push	{r4, r7, lr}
 801366e:	b087      	sub	sp, #28
 8013670:	af00      	add	r7, sp, #0
 8013672:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen, optflags = 0;
 8013674:	2300      	movs	r3, #0
 8013676:	75fb      	strb	r3, [r7, #23]
  u8_t num_sacks = 0;
 8013678:	2300      	movs	r3, #0
 801367a:	75bb      	strb	r3, [r7, #22]

  LWIP_ASSERT("tcp_send_empty_ack: invalid pcb", pcb != NULL);
 801367c:	687b      	ldr	r3, [r7, #4]
 801367e:	2b00      	cmp	r3, #0
 8013680:	d106      	bne.n	8013690 <tcp_send_empty_ack+0x24>
 8013682:	4b28      	ldr	r3, [pc, #160]	; (8013724 <tcp_send_empty_ack+0xb8>)
 8013684:	f240 72ea 	movw	r2, #2026	; 0x7ea
 8013688:	4927      	ldr	r1, [pc, #156]	; (8013728 <tcp_send_empty_ack+0xbc>)
 801368a:	4828      	ldr	r0, [pc, #160]	; (801372c <tcp_send_empty_ack+0xc0>)
 801368c:	f003 fbb0 	bl	8016df0 <iprintf>
#if LWIP_TCP_TIMESTAMPS
  if (pcb->flags & TF_TIMESTAMP) {
    optflags = TF_SEG_OPTS_TS;
  }
#endif
  optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(optflags, pcb);
 8013690:	7dfb      	ldrb	r3, [r7, #23]
 8013692:	009b      	lsls	r3, r3, #2
 8013694:	b2db      	uxtb	r3, r3
 8013696:	f003 0304 	and.w	r3, r3, #4
 801369a:	757b      	strb	r3, [r7, #21]
  if ((num_sacks = tcp_get_num_sacks(pcb, optlen)) > 0) {
    optlen += 4 + num_sacks * 8; /* 4 bytes for header (including 2*NOP), plus 8B for each SACK */
  }
#endif

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt));
 801369c:	7d7b      	ldrb	r3, [r7, #21]
 801369e:	b29c      	uxth	r4, r3
 80136a0:	687b      	ldr	r3, [r7, #4]
 80136a2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80136a4:	4618      	mov	r0, r3
 80136a6:	f7f8 fa06 	bl	800bab6 <lwip_htonl>
 80136aa:	4603      	mov	r3, r0
 80136ac:	2200      	movs	r2, #0
 80136ae:	4621      	mov	r1, r4
 80136b0:	6878      	ldr	r0, [r7, #4]
 80136b2:	f7ff fec3 	bl	801343c <tcp_output_alloc_header>
 80136b6:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 80136b8:	693b      	ldr	r3, [r7, #16]
 80136ba:	2b00      	cmp	r3, #0
 80136bc:	d109      	bne.n	80136d2 <tcp_send_empty_ack+0x66>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136be:	687b      	ldr	r3, [r7, #4]
 80136c0:	8b5b      	ldrh	r3, [r3, #26]
 80136c2:	f043 0303 	orr.w	r3, r3, #3
 80136c6:	b29a      	uxth	r2, r3
 80136c8:	687b      	ldr	r3, [r7, #4]
 80136ca:	835a      	strh	r2, [r3, #26]
    LWIP_DEBUGF(TCP_OUTPUT_DEBUG, ("tcp_output: (ACK) could not allocate pbuf\n"));
    return ERR_BUF;
 80136cc:	f06f 0301 	mvn.w	r3, #1
 80136d0:	e023      	b.n	801371a <tcp_send_empty_ack+0xae>
  }
  tcp_output_fill_options(pcb, p, optflags, num_sacks);
 80136d2:	7dbb      	ldrb	r3, [r7, #22]
 80136d4:	7dfa      	ldrb	r2, [r7, #23]
 80136d6:	6939      	ldr	r1, [r7, #16]
 80136d8:	6878      	ldr	r0, [r7, #4]
 80136da:	f7ff feed 	bl	80134b8 <tcp_output_fill_options>
  pcb->ts_lastacksent = pcb->rcv_nxt;
#endif

  LWIP_DEBUGF(TCP_OUTPUT_DEBUG,
              ("tcp_output: sending ACK for %"U32_F"\n", pcb->rcv_nxt));
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80136de:	687a      	ldr	r2, [r7, #4]
 80136e0:	687b      	ldr	r3, [r7, #4]
 80136e2:	3304      	adds	r3, #4
 80136e4:	6939      	ldr	r1, [r7, #16]
 80136e6:	6878      	ldr	r0, [r7, #4]
 80136e8:	f7ff ff24 	bl	8013534 <tcp_output_control_segment>
 80136ec:	4603      	mov	r3, r0
 80136ee:	73fb      	strb	r3, [r7, #15]
  if (err != ERR_OK) {
 80136f0:	f997 300f 	ldrsb.w	r3, [r7, #15]
 80136f4:	2b00      	cmp	r3, #0
 80136f6:	d007      	beq.n	8013708 <tcp_send_empty_ack+0x9c>
    /* let tcp_fasttmr retry sending this ACK */
    tcp_set_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 80136f8:	687b      	ldr	r3, [r7, #4]
 80136fa:	8b5b      	ldrh	r3, [r3, #26]
 80136fc:	f043 0303 	orr.w	r3, r3, #3
 8013700:	b29a      	uxth	r2, r3
 8013702:	687b      	ldr	r3, [r7, #4]
 8013704:	835a      	strh	r2, [r3, #26]
 8013706:	e006      	b.n	8013716 <tcp_send_empty_ack+0xaa>
  } else {
    /* remove ACK flags from the PCB, as we sent an empty ACK now */
    tcp_clear_flags(pcb, TF_ACK_DELAY | TF_ACK_NOW);
 8013708:	687b      	ldr	r3, [r7, #4]
 801370a:	8b5b      	ldrh	r3, [r3, #26]
 801370c:	f023 0303 	bic.w	r3, r3, #3
 8013710:	b29a      	uxth	r2, r3
 8013712:	687b      	ldr	r3, [r7, #4]
 8013714:	835a      	strh	r2, [r3, #26]
  }

  return err;
 8013716:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801371a:	4618      	mov	r0, r3
 801371c:	371c      	adds	r7, #28
 801371e:	46bd      	mov	sp, r7
 8013720:	bd90      	pop	{r4, r7, pc}
 8013722:	bf00      	nop
 8013724:	0801a334 	.word	0x0801a334
 8013728:	0801aaf0 	.word	0x0801aaf0
 801372c:	0801a388 	.word	0x0801a388

08013730 <tcp_keepalive>:
 *
 * @param pcb the tcp_pcb for which to send a keepalive packet
 */
err_t
tcp_keepalive(struct tcp_pcb *pcb)
{
 8013730:	b590      	push	{r4, r7, lr}
 8013732:	b087      	sub	sp, #28
 8013734:	af00      	add	r7, sp, #0
 8013736:	6078      	str	r0, [r7, #4]
  err_t err;
  struct pbuf *p;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 8013738:	2300      	movs	r3, #0
 801373a:	75fb      	strb	r3, [r7, #23]

  LWIP_ASSERT("tcp_keepalive: invalid pcb", pcb != NULL);
 801373c:	687b      	ldr	r3, [r7, #4]
 801373e:	2b00      	cmp	r3, #0
 8013740:	d106      	bne.n	8013750 <tcp_keepalive+0x20>
 8013742:	4b18      	ldr	r3, [pc, #96]	; (80137a4 <tcp_keepalive+0x74>)
 8013744:	f640 0224 	movw	r2, #2084	; 0x824
 8013748:	4917      	ldr	r1, [pc, #92]	; (80137a8 <tcp_keepalive+0x78>)
 801374a:	4818      	ldr	r0, [pc, #96]	; (80137ac <tcp_keepalive+0x7c>)
 801374c:	f003 fb50 	bl	8016df0 <iprintf>
  LWIP_DEBUGF(TCP_DEBUG, ("\n"));

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: tcp_ticks %"U32_F"   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
                          tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  p = tcp_output_alloc_header(pcb, optlen, 0, lwip_htonl(pcb->snd_nxt - 1));
 8013750:	7dfb      	ldrb	r3, [r7, #23]
 8013752:	b29c      	uxth	r4, r3
 8013754:	687b      	ldr	r3, [r7, #4]
 8013756:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8013758:	3b01      	subs	r3, #1
 801375a:	4618      	mov	r0, r3
 801375c:	f7f8 f9ab 	bl	800bab6 <lwip_htonl>
 8013760:	4603      	mov	r3, r0
 8013762:	2200      	movs	r2, #0
 8013764:	4621      	mov	r1, r4
 8013766:	6878      	ldr	r0, [r7, #4]
 8013768:	f7ff fe68 	bl	801343c <tcp_output_alloc_header>
 801376c:	6138      	str	r0, [r7, #16]
  if (p == NULL) {
 801376e:	693b      	ldr	r3, [r7, #16]
 8013770:	2b00      	cmp	r3, #0
 8013772:	d102      	bne.n	801377a <tcp_keepalive+0x4a>
    LWIP_DEBUGF(TCP_DEBUG,
                ("tcp_keepalive: could not allocate memory for pbuf\n"));
    return ERR_MEM;
 8013774:	f04f 33ff 	mov.w	r3, #4294967295
 8013778:	e010      	b.n	801379c <tcp_keepalive+0x6c>
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 801377a:	7dfb      	ldrb	r3, [r7, #23]
 801377c:	2200      	movs	r2, #0
 801377e:	6939      	ldr	r1, [r7, #16]
 8013780:	6878      	ldr	r0, [r7, #4]
 8013782:	f7ff fe99 	bl	80134b8 <tcp_output_fill_options>
  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 8013786:	687a      	ldr	r2, [r7, #4]
 8013788:	687b      	ldr	r3, [r7, #4]
 801378a:	3304      	adds	r3, #4
 801378c:	6939      	ldr	r1, [r7, #16]
 801378e:	6878      	ldr	r0, [r7, #4]
 8013790:	f7ff fed0 	bl	8013534 <tcp_output_control_segment>
 8013794:	4603      	mov	r3, r0
 8013796:	73fb      	strb	r3, [r7, #15]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_keepalive: seqno %"U32_F" ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 8013798:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801379c:	4618      	mov	r0, r3
 801379e:	371c      	adds	r7, #28
 80137a0:	46bd      	mov	sp, r7
 80137a2:	bd90      	pop	{r4, r7, pc}
 80137a4:	0801a334 	.word	0x0801a334
 80137a8:	0801ab10 	.word	0x0801ab10
 80137ac:	0801a388 	.word	0x0801a388

080137b0 <tcp_zero_window_probe>:
 *
 * @param pcb the tcp_pcb for which to send a zero-window probe packet
 */
err_t
tcp_zero_window_probe(struct tcp_pcb *pcb)
{
 80137b0:	b590      	push	{r4, r7, lr}
 80137b2:	b08b      	sub	sp, #44	; 0x2c
 80137b4:	af00      	add	r7, sp, #0
 80137b6:	6078      	str	r0, [r7, #4]
  struct tcp_hdr *tcphdr;
  struct tcp_seg *seg;
  u16_t len;
  u8_t is_fin;
  u32_t snd_nxt;
  u8_t optlen = LWIP_TCP_OPT_LENGTH_SEGMENT(0, pcb);
 80137b8:	2300      	movs	r3, #0
 80137ba:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27

  LWIP_ASSERT("tcp_zero_window_probe: invalid pcb", pcb != NULL);
 80137be:	687b      	ldr	r3, [r7, #4]
 80137c0:	2b00      	cmp	r3, #0
 80137c2:	d106      	bne.n	80137d2 <tcp_zero_window_probe+0x22>
 80137c4:	4b4c      	ldr	r3, [pc, #304]	; (80138f8 <tcp_zero_window_probe+0x148>)
 80137c6:	f640 024f 	movw	r2, #2127	; 0x84f
 80137ca:	494c      	ldr	r1, [pc, #304]	; (80138fc <tcp_zero_window_probe+0x14c>)
 80137cc:	484c      	ldr	r0, [pc, #304]	; (8013900 <tcp_zero_window_probe+0x150>)
 80137ce:	f003 fb0f 	bl	8016df0 <iprintf>
              ("tcp_zero_window_probe: tcp_ticks %"U32_F
               "   pcb->tmr %"U32_F" pcb->keep_cnt_sent %"U16_F"\n",
               tcp_ticks, pcb->tmr, (u16_t)pcb->keep_cnt_sent));

  /* Only consider unsent, persist timer should be off when there is data in-flight */
  seg = pcb->unsent;
 80137d2:	687b      	ldr	r3, [r7, #4]
 80137d4:	6edb      	ldr	r3, [r3, #108]	; 0x6c
 80137d6:	623b      	str	r3, [r7, #32]
  if (seg == NULL) {
 80137d8:	6a3b      	ldr	r3, [r7, #32]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d101      	bne.n	80137e2 <tcp_zero_window_probe+0x32>
    /* Not expected, persist timer should be off when the send buffer is empty */
    return ERR_OK;
 80137de:	2300      	movs	r3, #0
 80137e0:	e086      	b.n	80138f0 <tcp_zero_window_probe+0x140>

  /* increment probe count. NOTE: we record probe even if it fails
     to actually transmit due to an error. This ensures memory exhaustion/
     routing problem doesn't leave a zero-window pcb as an indefinite zombie.
     RTO mechanism has similar behavior, see pcb->nrtx */
  if (pcb->persist_probe < 0xFF) {
 80137e2:	687b      	ldr	r3, [r7, #4]
 80137e4:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80137e8:	2bff      	cmp	r3, #255	; 0xff
 80137ea:	d007      	beq.n	80137fc <tcp_zero_window_probe+0x4c>
    ++pcb->persist_probe;
 80137ec:	687b      	ldr	r3, [r7, #4]
 80137ee:	f893 309a 	ldrb.w	r3, [r3, #154]	; 0x9a
 80137f2:	3301      	adds	r3, #1
 80137f4:	b2da      	uxtb	r2, r3
 80137f6:	687b      	ldr	r3, [r7, #4]
 80137f8:	f883 209a 	strb.w	r2, [r3, #154]	; 0x9a
  }

  is_fin = ((TCPH_FLAGS(seg->tcphdr) & TCP_FIN) != 0) && (seg->len == 0);
 80137fc:	6a3b      	ldr	r3, [r7, #32]
 80137fe:	68db      	ldr	r3, [r3, #12]
 8013800:	899b      	ldrh	r3, [r3, #12]
 8013802:	b29b      	uxth	r3, r3
 8013804:	4618      	mov	r0, r3
 8013806:	f7f8 f941 	bl	800ba8c <lwip_htons>
 801380a:	4603      	mov	r3, r0
 801380c:	b2db      	uxtb	r3, r3
 801380e:	f003 0301 	and.w	r3, r3, #1
 8013812:	2b00      	cmp	r3, #0
 8013814:	d005      	beq.n	8013822 <tcp_zero_window_probe+0x72>
 8013816:	6a3b      	ldr	r3, [r7, #32]
 8013818:	891b      	ldrh	r3, [r3, #8]
 801381a:	2b00      	cmp	r3, #0
 801381c:	d101      	bne.n	8013822 <tcp_zero_window_probe+0x72>
 801381e:	2301      	movs	r3, #1
 8013820:	e000      	b.n	8013824 <tcp_zero_window_probe+0x74>
 8013822:	2300      	movs	r3, #0
 8013824:	77fb      	strb	r3, [r7, #31]
  /* we want to send one seqno: either FIN or data (no options) */
  len = is_fin ? 0 : 1;
 8013826:	7ffb      	ldrb	r3, [r7, #31]
 8013828:	2b00      	cmp	r3, #0
 801382a:	bf0c      	ite	eq
 801382c:	2301      	moveq	r3, #1
 801382e:	2300      	movne	r3, #0
 8013830:	b2db      	uxtb	r3, r3
 8013832:	83bb      	strh	r3, [r7, #28]

  p = tcp_output_alloc_header(pcb, optlen, len, seg->tcphdr->seqno);
 8013834:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 8013838:	b299      	uxth	r1, r3
 801383a:	6a3b      	ldr	r3, [r7, #32]
 801383c:	68db      	ldr	r3, [r3, #12]
 801383e:	685b      	ldr	r3, [r3, #4]
 8013840:	8bba      	ldrh	r2, [r7, #28]
 8013842:	6878      	ldr	r0, [r7, #4]
 8013844:	f7ff fdfa 	bl	801343c <tcp_output_alloc_header>
 8013848:	61b8      	str	r0, [r7, #24]
  if (p == NULL) {
 801384a:	69bb      	ldr	r3, [r7, #24]
 801384c:	2b00      	cmp	r3, #0
 801384e:	d102      	bne.n	8013856 <tcp_zero_window_probe+0xa6>
    LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: no memory for pbuf\n"));
    return ERR_MEM;
 8013850:	f04f 33ff 	mov.w	r3, #4294967295
 8013854:	e04c      	b.n	80138f0 <tcp_zero_window_probe+0x140>
  }
  tcphdr = (struct tcp_hdr *)p->payload;
 8013856:	69bb      	ldr	r3, [r7, #24]
 8013858:	685b      	ldr	r3, [r3, #4]
 801385a:	617b      	str	r3, [r7, #20]

  if (is_fin) {
 801385c:	7ffb      	ldrb	r3, [r7, #31]
 801385e:	2b00      	cmp	r3, #0
 8013860:	d011      	beq.n	8013886 <tcp_zero_window_probe+0xd6>
    /* FIN segment, no data */
    TCPH_FLAGS_SET(tcphdr, TCP_ACK | TCP_FIN);
 8013862:	697b      	ldr	r3, [r7, #20]
 8013864:	899b      	ldrh	r3, [r3, #12]
 8013866:	b29b      	uxth	r3, r3
 8013868:	b21b      	sxth	r3, r3
 801386a:	f423 537c 	bic.w	r3, r3, #16128	; 0x3f00
 801386e:	b21c      	sxth	r4, r3
 8013870:	2011      	movs	r0, #17
 8013872:	f7f8 f90b 	bl	800ba8c <lwip_htons>
 8013876:	4603      	mov	r3, r0
 8013878:	b21b      	sxth	r3, r3
 801387a:	4323      	orrs	r3, r4
 801387c:	b21b      	sxth	r3, r3
 801387e:	b29a      	uxth	r2, r3
 8013880:	697b      	ldr	r3, [r7, #20]
 8013882:	819a      	strh	r2, [r3, #12]
 8013884:	e010      	b.n	80138a8 <tcp_zero_window_probe+0xf8>
  } else {
    /* Data segment, copy in one byte from the head of the unacked queue */
    char *d = ((char *)p->payload + TCP_HLEN);
 8013886:	69bb      	ldr	r3, [r7, #24]
 8013888:	685b      	ldr	r3, [r3, #4]
 801388a:	3314      	adds	r3, #20
 801388c:	613b      	str	r3, [r7, #16]
    /* Depending on whether the segment has already been sent (unacked) or not
       (unsent), seg->p->payload points to the IP header or TCP header.
       Ensure we copy the first TCP data byte: */
    pbuf_copy_partial(seg->p, d, 1, seg->p->tot_len - seg->len);
 801388e:	6a3b      	ldr	r3, [r7, #32]
 8013890:	6858      	ldr	r0, [r3, #4]
 8013892:	6a3b      	ldr	r3, [r7, #32]
 8013894:	685b      	ldr	r3, [r3, #4]
 8013896:	891a      	ldrh	r2, [r3, #8]
 8013898:	6a3b      	ldr	r3, [r7, #32]
 801389a:	891b      	ldrh	r3, [r3, #8]
 801389c:	1ad3      	subs	r3, r2, r3
 801389e:	b29b      	uxth	r3, r3
 80138a0:	2201      	movs	r2, #1
 80138a2:	6939      	ldr	r1, [r7, #16]
 80138a4:	f7f9 feda 	bl	800d65c <pbuf_copy_partial>
  }

  /* The byte may be acknowledged without the window being opened. */
  snd_nxt = lwip_ntohl(seg->tcphdr->seqno) + 1;
 80138a8:	6a3b      	ldr	r3, [r7, #32]
 80138aa:	68db      	ldr	r3, [r3, #12]
 80138ac:	685b      	ldr	r3, [r3, #4]
 80138ae:	4618      	mov	r0, r3
 80138b0:	f7f8 f901 	bl	800bab6 <lwip_htonl>
 80138b4:	4603      	mov	r3, r0
 80138b6:	3301      	adds	r3, #1
 80138b8:	60fb      	str	r3, [r7, #12]
  if (TCP_SEQ_LT(pcb->snd_nxt, snd_nxt)) {
 80138ba:	687b      	ldr	r3, [r7, #4]
 80138bc:	6d1a      	ldr	r2, [r3, #80]	; 0x50
 80138be:	68fb      	ldr	r3, [r7, #12]
 80138c0:	1ad3      	subs	r3, r2, r3
 80138c2:	2b00      	cmp	r3, #0
 80138c4:	da02      	bge.n	80138cc <tcp_zero_window_probe+0x11c>
    pcb->snd_nxt = snd_nxt;
 80138c6:	687b      	ldr	r3, [r7, #4]
 80138c8:	68fa      	ldr	r2, [r7, #12]
 80138ca:	651a      	str	r2, [r3, #80]	; 0x50
  }
  tcp_output_fill_options(pcb, p, 0, optlen);
 80138cc:	f897 3027 	ldrb.w	r3, [r7, #39]	; 0x27
 80138d0:	2200      	movs	r2, #0
 80138d2:	69b9      	ldr	r1, [r7, #24]
 80138d4:	6878      	ldr	r0, [r7, #4]
 80138d6:	f7ff fdef 	bl	80134b8 <tcp_output_fill_options>

  err = tcp_output_control_segment(pcb, p, &pcb->local_ip, &pcb->remote_ip);
 80138da:	687a      	ldr	r2, [r7, #4]
 80138dc:	687b      	ldr	r3, [r7, #4]
 80138de:	3304      	adds	r3, #4
 80138e0:	69b9      	ldr	r1, [r7, #24]
 80138e2:	6878      	ldr	r0, [r7, #4]
 80138e4:	f7ff fe26 	bl	8013534 <tcp_output_control_segment>
 80138e8:	4603      	mov	r3, r0
 80138ea:	72fb      	strb	r3, [r7, #11]

  LWIP_DEBUGF(TCP_DEBUG, ("tcp_zero_window_probe: seqno %"U32_F
                          " ackno %"U32_F" err %d.\n",
                          pcb->snd_nxt - 1, pcb->rcv_nxt, (int)err));
  return err;
 80138ec:	f997 300b 	ldrsb.w	r3, [r7, #11]
}
 80138f0:	4618      	mov	r0, r3
 80138f2:	372c      	adds	r7, #44	; 0x2c
 80138f4:	46bd      	mov	sp, r7
 80138f6:	bd90      	pop	{r4, r7, pc}
 80138f8:	0801a334 	.word	0x0801a334
 80138fc:	0801ab2c 	.word	0x0801ab2c
 8013900:	0801a388 	.word	0x0801a388

08013904 <tcpip_tcp_timer>:
 *
 * @param arg unused argument
 */
static void
tcpip_tcp_timer(void *arg)
{
 8013904:	b580      	push	{r7, lr}
 8013906:	b082      	sub	sp, #8
 8013908:	af00      	add	r7, sp, #0
 801390a:	6078      	str	r0, [r7, #4]
  LWIP_UNUSED_ARG(arg);

  /* call TCP timer handler */
  tcp_tmr();
 801390c:	f7f9 ff94 	bl	800d838 <tcp_tmr>
  /* timer still needed? */
  if (tcp_active_pcbs || tcp_tw_pcbs) {
 8013910:	4b0a      	ldr	r3, [pc, #40]	; (801393c <tcpip_tcp_timer+0x38>)
 8013912:	681b      	ldr	r3, [r3, #0]
 8013914:	2b00      	cmp	r3, #0
 8013916:	d103      	bne.n	8013920 <tcpip_tcp_timer+0x1c>
 8013918:	4b09      	ldr	r3, [pc, #36]	; (8013940 <tcpip_tcp_timer+0x3c>)
 801391a:	681b      	ldr	r3, [r3, #0]
 801391c:	2b00      	cmp	r3, #0
 801391e:	d005      	beq.n	801392c <tcpip_tcp_timer+0x28>
    /* restart timer */
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 8013920:	2200      	movs	r2, #0
 8013922:	4908      	ldr	r1, [pc, #32]	; (8013944 <tcpip_tcp_timer+0x40>)
 8013924:	20fa      	movs	r0, #250	; 0xfa
 8013926:	f000 f8f3 	bl	8013b10 <sys_timeout>
 801392a:	e003      	b.n	8013934 <tcpip_tcp_timer+0x30>
  } else {
    /* disable timer */
    tcpip_tcp_timer_active = 0;
 801392c:	4b06      	ldr	r3, [pc, #24]	; (8013948 <tcpip_tcp_timer+0x44>)
 801392e:	2200      	movs	r2, #0
 8013930:	601a      	str	r2, [r3, #0]
  }
}
 8013932:	bf00      	nop
 8013934:	bf00      	nop
 8013936:	3708      	adds	r7, #8
 8013938:	46bd      	mov	sp, r7
 801393a:	bd80      	pop	{r7, pc}
 801393c:	2000f800 	.word	0x2000f800
 8013940:	2000f804 	.word	0x2000f804
 8013944:	08013905 	.word	0x08013905
 8013948:	2000f84c 	.word	0x2000f84c

0801394c <tcp_timer_needed>:
 * the reason is to have the TCP timer only running when
 * there are active (or time-wait) PCBs.
 */
void
tcp_timer_needed(void)
{
 801394c:	b580      	push	{r7, lr}
 801394e:	af00      	add	r7, sp, #0
  LWIP_ASSERT_CORE_LOCKED();

  /* timer is off but needed again? */
  if (!tcpip_tcp_timer_active && (tcp_active_pcbs || tcp_tw_pcbs)) {
 8013950:	4b0a      	ldr	r3, [pc, #40]	; (801397c <tcp_timer_needed+0x30>)
 8013952:	681b      	ldr	r3, [r3, #0]
 8013954:	2b00      	cmp	r3, #0
 8013956:	d10f      	bne.n	8013978 <tcp_timer_needed+0x2c>
 8013958:	4b09      	ldr	r3, [pc, #36]	; (8013980 <tcp_timer_needed+0x34>)
 801395a:	681b      	ldr	r3, [r3, #0]
 801395c:	2b00      	cmp	r3, #0
 801395e:	d103      	bne.n	8013968 <tcp_timer_needed+0x1c>
 8013960:	4b08      	ldr	r3, [pc, #32]	; (8013984 <tcp_timer_needed+0x38>)
 8013962:	681b      	ldr	r3, [r3, #0]
 8013964:	2b00      	cmp	r3, #0
 8013966:	d007      	beq.n	8013978 <tcp_timer_needed+0x2c>
    /* enable and start timer */
    tcpip_tcp_timer_active = 1;
 8013968:	4b04      	ldr	r3, [pc, #16]	; (801397c <tcp_timer_needed+0x30>)
 801396a:	2201      	movs	r2, #1
 801396c:	601a      	str	r2, [r3, #0]
    sys_timeout(TCP_TMR_INTERVAL, tcpip_tcp_timer, NULL);
 801396e:	2200      	movs	r2, #0
 8013970:	4905      	ldr	r1, [pc, #20]	; (8013988 <tcp_timer_needed+0x3c>)
 8013972:	20fa      	movs	r0, #250	; 0xfa
 8013974:	f000 f8cc 	bl	8013b10 <sys_timeout>
  }
}
 8013978:	bf00      	nop
 801397a:	bd80      	pop	{r7, pc}
 801397c:	2000f84c 	.word	0x2000f84c
 8013980:	2000f800 	.word	0x2000f800
 8013984:	2000f804 	.word	0x2000f804
 8013988:	08013905 	.word	0x08013905

0801398c <sys_timeout_abs>:
#if LWIP_DEBUG_TIMERNAMES
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
sys_timeout_abs(u32_t abs_time, sys_timeout_handler handler, void *arg)
#endif
{
 801398c:	b580      	push	{r7, lr}
 801398e:	b086      	sub	sp, #24
 8013990:	af00      	add	r7, sp, #0
 8013992:	60f8      	str	r0, [r7, #12]
 8013994:	60b9      	str	r1, [r7, #8]
 8013996:	607a      	str	r2, [r7, #4]
  struct sys_timeo *timeout, *t;

  timeout = (struct sys_timeo *)memp_malloc(MEMP_SYS_TIMEOUT);
 8013998:	200a      	movs	r0, #10
 801399a:	f7f8 fd4f 	bl	800c43c <memp_malloc>
 801399e:	6138      	str	r0, [r7, #16]
  if (timeout == NULL) {
 80139a0:	693b      	ldr	r3, [r7, #16]
 80139a2:	2b00      	cmp	r3, #0
 80139a4:	d109      	bne.n	80139ba <sys_timeout_abs+0x2e>
    LWIP_ASSERT("sys_timeout: timeout != NULL, pool MEMP_SYS_TIMEOUT is empty", timeout != NULL);
 80139a6:	693b      	ldr	r3, [r7, #16]
 80139a8:	2b00      	cmp	r3, #0
 80139aa:	d151      	bne.n	8013a50 <sys_timeout_abs+0xc4>
 80139ac:	4b2a      	ldr	r3, [pc, #168]	; (8013a58 <sys_timeout_abs+0xcc>)
 80139ae:	22be      	movs	r2, #190	; 0xbe
 80139b0:	492a      	ldr	r1, [pc, #168]	; (8013a5c <sys_timeout_abs+0xd0>)
 80139b2:	482b      	ldr	r0, [pc, #172]	; (8013a60 <sys_timeout_abs+0xd4>)
 80139b4:	f003 fa1c 	bl	8016df0 <iprintf>
    return;
 80139b8:	e04a      	b.n	8013a50 <sys_timeout_abs+0xc4>
  }

  timeout->next = NULL;
 80139ba:	693b      	ldr	r3, [r7, #16]
 80139bc:	2200      	movs	r2, #0
 80139be:	601a      	str	r2, [r3, #0]
  timeout->h = handler;
 80139c0:	693b      	ldr	r3, [r7, #16]
 80139c2:	68ba      	ldr	r2, [r7, #8]
 80139c4:	609a      	str	r2, [r3, #8]
  timeout->arg = arg;
 80139c6:	693b      	ldr	r3, [r7, #16]
 80139c8:	687a      	ldr	r2, [r7, #4]
 80139ca:	60da      	str	r2, [r3, #12]
  timeout->time = abs_time;
 80139cc:	693b      	ldr	r3, [r7, #16]
 80139ce:	68fa      	ldr	r2, [r7, #12]
 80139d0:	605a      	str	r2, [r3, #4]
  timeout->handler_name = handler_name;
  LWIP_DEBUGF(TIMERS_DEBUG, ("sys_timeout: %p abs_time=%"U32_F" handler=%s arg=%p\n",
                             (void *)timeout, abs_time, handler_name, (void *)arg));
#endif /* LWIP_DEBUG_TIMERNAMES */

  if (next_timeout == NULL) {
 80139d2:	4b24      	ldr	r3, [pc, #144]	; (8013a64 <sys_timeout_abs+0xd8>)
 80139d4:	681b      	ldr	r3, [r3, #0]
 80139d6:	2b00      	cmp	r3, #0
 80139d8:	d103      	bne.n	80139e2 <sys_timeout_abs+0x56>
    next_timeout = timeout;
 80139da:	4a22      	ldr	r2, [pc, #136]	; (8013a64 <sys_timeout_abs+0xd8>)
 80139dc:	693b      	ldr	r3, [r7, #16]
 80139de:	6013      	str	r3, [r2, #0]
    return;
 80139e0:	e037      	b.n	8013a52 <sys_timeout_abs+0xc6>
  }
  if (TIME_LESS_THAN(timeout->time, next_timeout->time)) {
 80139e2:	693b      	ldr	r3, [r7, #16]
 80139e4:	685a      	ldr	r2, [r3, #4]
 80139e6:	4b1f      	ldr	r3, [pc, #124]	; (8013a64 <sys_timeout_abs+0xd8>)
 80139e8:	681b      	ldr	r3, [r3, #0]
 80139ea:	685b      	ldr	r3, [r3, #4]
 80139ec:	1ad3      	subs	r3, r2, r3
 80139ee:	0fdb      	lsrs	r3, r3, #31
 80139f0:	f003 0301 	and.w	r3, r3, #1
 80139f4:	b2db      	uxtb	r3, r3
 80139f6:	2b00      	cmp	r3, #0
 80139f8:	d007      	beq.n	8013a0a <sys_timeout_abs+0x7e>
    timeout->next = next_timeout;
 80139fa:	4b1a      	ldr	r3, [pc, #104]	; (8013a64 <sys_timeout_abs+0xd8>)
 80139fc:	681a      	ldr	r2, [r3, #0]
 80139fe:	693b      	ldr	r3, [r7, #16]
 8013a00:	601a      	str	r2, [r3, #0]
    next_timeout = timeout;
 8013a02:	4a18      	ldr	r2, [pc, #96]	; (8013a64 <sys_timeout_abs+0xd8>)
 8013a04:	693b      	ldr	r3, [r7, #16]
 8013a06:	6013      	str	r3, [r2, #0]
 8013a08:	e023      	b.n	8013a52 <sys_timeout_abs+0xc6>
  } else {
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a0a:	4b16      	ldr	r3, [pc, #88]	; (8013a64 <sys_timeout_abs+0xd8>)
 8013a0c:	681b      	ldr	r3, [r3, #0]
 8013a0e:	617b      	str	r3, [r7, #20]
 8013a10:	e01a      	b.n	8013a48 <sys_timeout_abs+0xbc>
      if ((t->next == NULL) || TIME_LESS_THAN(timeout->time, t->next->time)) {
 8013a12:	697b      	ldr	r3, [r7, #20]
 8013a14:	681b      	ldr	r3, [r3, #0]
 8013a16:	2b00      	cmp	r3, #0
 8013a18:	d00b      	beq.n	8013a32 <sys_timeout_abs+0xa6>
 8013a1a:	693b      	ldr	r3, [r7, #16]
 8013a1c:	685a      	ldr	r2, [r3, #4]
 8013a1e:	697b      	ldr	r3, [r7, #20]
 8013a20:	681b      	ldr	r3, [r3, #0]
 8013a22:	685b      	ldr	r3, [r3, #4]
 8013a24:	1ad3      	subs	r3, r2, r3
 8013a26:	0fdb      	lsrs	r3, r3, #31
 8013a28:	f003 0301 	and.w	r3, r3, #1
 8013a2c:	b2db      	uxtb	r3, r3
 8013a2e:	2b00      	cmp	r3, #0
 8013a30:	d007      	beq.n	8013a42 <sys_timeout_abs+0xb6>
        timeout->next = t->next;
 8013a32:	697b      	ldr	r3, [r7, #20]
 8013a34:	681a      	ldr	r2, [r3, #0]
 8013a36:	693b      	ldr	r3, [r7, #16]
 8013a38:	601a      	str	r2, [r3, #0]
        t->next = timeout;
 8013a3a:	697b      	ldr	r3, [r7, #20]
 8013a3c:	693a      	ldr	r2, [r7, #16]
 8013a3e:	601a      	str	r2, [r3, #0]
        break;
 8013a40:	e007      	b.n	8013a52 <sys_timeout_abs+0xc6>
    for (t = next_timeout; t != NULL; t = t->next) {
 8013a42:	697b      	ldr	r3, [r7, #20]
 8013a44:	681b      	ldr	r3, [r3, #0]
 8013a46:	617b      	str	r3, [r7, #20]
 8013a48:	697b      	ldr	r3, [r7, #20]
 8013a4a:	2b00      	cmp	r3, #0
 8013a4c:	d1e1      	bne.n	8013a12 <sys_timeout_abs+0x86>
 8013a4e:	e000      	b.n	8013a52 <sys_timeout_abs+0xc6>
    return;
 8013a50:	bf00      	nop
      }
    }
  }
}
 8013a52:	3718      	adds	r7, #24
 8013a54:	46bd      	mov	sp, r7
 8013a56:	bd80      	pop	{r7, pc}
 8013a58:	0801ab50 	.word	0x0801ab50
 8013a5c:	0801ab84 	.word	0x0801ab84
 8013a60:	0801abc4 	.word	0x0801abc4
 8013a64:	2000f844 	.word	0x2000f844

08013a68 <lwip_cyclic_timer>:
#if !LWIP_TESTMODE
static
#endif
void
lwip_cyclic_timer(void *arg)
{
 8013a68:	b580      	push	{r7, lr}
 8013a6a:	b086      	sub	sp, #24
 8013a6c:	af00      	add	r7, sp, #0
 8013a6e:	6078      	str	r0, [r7, #4]
  u32_t now;
  u32_t next_timeout_time;
  const struct lwip_cyclic_timer *cyclic = (const struct lwip_cyclic_timer *)arg;
 8013a70:	687b      	ldr	r3, [r7, #4]
 8013a72:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  LWIP_DEBUGF(TIMERS_DEBUG, ("tcpip: %s()\n", cyclic->handler_name));
#endif
  cyclic->handler();
 8013a74:	697b      	ldr	r3, [r7, #20]
 8013a76:	685b      	ldr	r3, [r3, #4]
 8013a78:	4798      	blx	r3

  now = sys_now();
 8013a7a:	f7f1 fca7 	bl	80053cc <sys_now>
 8013a7e:	6138      	str	r0, [r7, #16]
  next_timeout_time = (u32_t)(current_timeout_due_time + cyclic->interval_ms);  /* overflow handled by TIME_LESS_THAN macro */ 
 8013a80:	697b      	ldr	r3, [r7, #20]
 8013a82:	681a      	ldr	r2, [r3, #0]
 8013a84:	4b0f      	ldr	r3, [pc, #60]	; (8013ac4 <lwip_cyclic_timer+0x5c>)
 8013a86:	681b      	ldr	r3, [r3, #0]
 8013a88:	4413      	add	r3, r2
 8013a8a:	60fb      	str	r3, [r7, #12]
  if (TIME_LESS_THAN(next_timeout_time, now)) {
 8013a8c:	68fa      	ldr	r2, [r7, #12]
 8013a8e:	693b      	ldr	r3, [r7, #16]
 8013a90:	1ad3      	subs	r3, r2, r3
 8013a92:	0fdb      	lsrs	r3, r3, #31
 8013a94:	f003 0301 	and.w	r3, r3, #1
 8013a98:	b2db      	uxtb	r3, r3
 8013a9a:	2b00      	cmp	r3, #0
 8013a9c:	d009      	beq.n	8013ab2 <lwip_cyclic_timer+0x4a>
    /* timer would immediately expire again -> "overload" -> restart without any correction */
#if LWIP_DEBUG_TIMERNAMES
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs((u32_t)(now + cyclic->interval_ms), lwip_cyclic_timer, arg);
 8013a9e:	697b      	ldr	r3, [r7, #20]
 8013aa0:	681a      	ldr	r2, [r3, #0]
 8013aa2:	693b      	ldr	r3, [r7, #16]
 8013aa4:	4413      	add	r3, r2
 8013aa6:	687a      	ldr	r2, [r7, #4]
 8013aa8:	4907      	ldr	r1, [pc, #28]	; (8013ac8 <lwip_cyclic_timer+0x60>)
 8013aaa:	4618      	mov	r0, r3
 8013aac:	f7ff ff6e 	bl	801398c <sys_timeout_abs>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg, cyclic->handler_name);
#else
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
#endif
  }
}
 8013ab0:	e004      	b.n	8013abc <lwip_cyclic_timer+0x54>
    sys_timeout_abs(next_timeout_time, lwip_cyclic_timer, arg);
 8013ab2:	687a      	ldr	r2, [r7, #4]
 8013ab4:	4904      	ldr	r1, [pc, #16]	; (8013ac8 <lwip_cyclic_timer+0x60>)
 8013ab6:	68f8      	ldr	r0, [r7, #12]
 8013ab8:	f7ff ff68 	bl	801398c <sys_timeout_abs>
}
 8013abc:	bf00      	nop
 8013abe:	3718      	adds	r7, #24
 8013ac0:	46bd      	mov	sp, r7
 8013ac2:	bd80      	pop	{r7, pc}
 8013ac4:	2000f848 	.word	0x2000f848
 8013ac8:	08013a69 	.word	0x08013a69

08013acc <sys_timeouts_init>:

/** Initialize this module */
void sys_timeouts_init(void)
{
 8013acc:	b580      	push	{r7, lr}
 8013ace:	b082      	sub	sp, #8
 8013ad0:	af00      	add	r7, sp, #0
  size_t i;
  /* tcp_tmr() at index 0 is started on demand */
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013ad2:	2301      	movs	r3, #1
 8013ad4:	607b      	str	r3, [r7, #4]
 8013ad6:	e00e      	b.n	8013af6 <sys_timeouts_init+0x2a>
    /* we have to cast via size_t to get rid of const warning
      (this is OK as cyclic_timer() casts back to const* */
    sys_timeout(lwip_cyclic_timers[i].interval_ms, lwip_cyclic_timer, LWIP_CONST_CAST(void *, &lwip_cyclic_timers[i]));
 8013ad8:	4a0b      	ldr	r2, [pc, #44]	; (8013b08 <sys_timeouts_init+0x3c>)
 8013ada:	687b      	ldr	r3, [r7, #4]
 8013adc:	f852 0033 	ldr.w	r0, [r2, r3, lsl #3]
 8013ae0:	687b      	ldr	r3, [r7, #4]
 8013ae2:	00db      	lsls	r3, r3, #3
 8013ae4:	4a08      	ldr	r2, [pc, #32]	; (8013b08 <sys_timeouts_init+0x3c>)
 8013ae6:	4413      	add	r3, r2
 8013ae8:	461a      	mov	r2, r3
 8013aea:	4908      	ldr	r1, [pc, #32]	; (8013b0c <sys_timeouts_init+0x40>)
 8013aec:	f000 f810 	bl	8013b10 <sys_timeout>
  for (i = (LWIP_TCP ? 1 : 0); i < LWIP_ARRAYSIZE(lwip_cyclic_timers); i++) {
 8013af0:	687b      	ldr	r3, [r7, #4]
 8013af2:	3301      	adds	r3, #1
 8013af4:	607b      	str	r3, [r7, #4]
 8013af6:	687b      	ldr	r3, [r7, #4]
 8013af8:	2b02      	cmp	r3, #2
 8013afa:	d9ed      	bls.n	8013ad8 <sys_timeouts_init+0xc>
  }
}
 8013afc:	bf00      	nop
 8013afe:	bf00      	nop
 8013b00:	3708      	adds	r7, #8
 8013b02:	46bd      	mov	sp, r7
 8013b04:	bd80      	pop	{r7, pc}
 8013b06:	bf00      	nop
 8013b08:	0801b7c8 	.word	0x0801b7c8
 8013b0c:	08013a69 	.word	0x08013a69

08013b10 <sys_timeout>:
sys_timeout_debug(u32_t msecs, sys_timeout_handler handler, void *arg, const char *handler_name)
#else /* LWIP_DEBUG_TIMERNAMES */
void
sys_timeout(u32_t msecs, sys_timeout_handler handler, void *arg)
#endif /* LWIP_DEBUG_TIMERNAMES */
{
 8013b10:	b580      	push	{r7, lr}
 8013b12:	b086      	sub	sp, #24
 8013b14:	af00      	add	r7, sp, #0
 8013b16:	60f8      	str	r0, [r7, #12]
 8013b18:	60b9      	str	r1, [r7, #8]
 8013b1a:	607a      	str	r2, [r7, #4]
  u32_t next_timeout_time;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("Timeout time too long, max is LWIP_UINT32_MAX/4 msecs", msecs <= (LWIP_UINT32_MAX / 4));
 8013b1c:	68fb      	ldr	r3, [r7, #12]
 8013b1e:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8013b22:	d306      	bcc.n	8013b32 <sys_timeout+0x22>
 8013b24:	4b0a      	ldr	r3, [pc, #40]	; (8013b50 <sys_timeout+0x40>)
 8013b26:	f240 1229 	movw	r2, #297	; 0x129
 8013b2a:	490a      	ldr	r1, [pc, #40]	; (8013b54 <sys_timeout+0x44>)
 8013b2c:	480a      	ldr	r0, [pc, #40]	; (8013b58 <sys_timeout+0x48>)
 8013b2e:	f003 f95f 	bl	8016df0 <iprintf>

  next_timeout_time = (u32_t)(sys_now() + msecs); /* overflow handled by TIME_LESS_THAN macro */ 
 8013b32:	f7f1 fc4b 	bl	80053cc <sys_now>
 8013b36:	4602      	mov	r2, r0
 8013b38:	68fb      	ldr	r3, [r7, #12]
 8013b3a:	4413      	add	r3, r2
 8013b3c:	617b      	str	r3, [r7, #20]

#if LWIP_DEBUG_TIMERNAMES
  sys_timeout_abs(next_timeout_time, handler, arg, handler_name);
#else
  sys_timeout_abs(next_timeout_time, handler, arg);
 8013b3e:	687a      	ldr	r2, [r7, #4]
 8013b40:	68b9      	ldr	r1, [r7, #8]
 8013b42:	6978      	ldr	r0, [r7, #20]
 8013b44:	f7ff ff22 	bl	801398c <sys_timeout_abs>
#endif
}
 8013b48:	bf00      	nop
 8013b4a:	3718      	adds	r7, #24
 8013b4c:	46bd      	mov	sp, r7
 8013b4e:	bd80      	pop	{r7, pc}
 8013b50:	0801ab50 	.word	0x0801ab50
 8013b54:	0801abec 	.word	0x0801abec
 8013b58:	0801abc4 	.word	0x0801abc4

08013b5c <sys_check_timeouts>:
 *
 * Must be called periodically from your main loop.
 */
void
sys_check_timeouts(void)
{
 8013b5c:	b580      	push	{r7, lr}
 8013b5e:	b084      	sub	sp, #16
 8013b60:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  /* Process only timers expired at the start of the function. */
  now = sys_now();
 8013b62:	f7f1 fc33 	bl	80053cc <sys_now>
 8013b66:	60f8      	str	r0, [r7, #12]
    sys_timeout_handler handler;
    void *arg;

    PBUF_CHECK_FREE_OOSEQ();

    tmptimeout = next_timeout;
 8013b68:	4b17      	ldr	r3, [pc, #92]	; (8013bc8 <sys_check_timeouts+0x6c>)
 8013b6a:	681b      	ldr	r3, [r3, #0]
 8013b6c:	60bb      	str	r3, [r7, #8]
    if (tmptimeout == NULL) {
 8013b6e:	68bb      	ldr	r3, [r7, #8]
 8013b70:	2b00      	cmp	r3, #0
 8013b72:	d022      	beq.n	8013bba <sys_check_timeouts+0x5e>
      return;
    }

    if (TIME_LESS_THAN(now, tmptimeout->time)) {
 8013b74:	68bb      	ldr	r3, [r7, #8]
 8013b76:	685b      	ldr	r3, [r3, #4]
 8013b78:	68fa      	ldr	r2, [r7, #12]
 8013b7a:	1ad3      	subs	r3, r2, r3
 8013b7c:	0fdb      	lsrs	r3, r3, #31
 8013b7e:	f003 0301 	and.w	r3, r3, #1
 8013b82:	b2db      	uxtb	r3, r3
 8013b84:	2b00      	cmp	r3, #0
 8013b86:	d11a      	bne.n	8013bbe <sys_check_timeouts+0x62>
      return;
    }

    /* Timeout has expired */
    next_timeout = tmptimeout->next;
 8013b88:	68bb      	ldr	r3, [r7, #8]
 8013b8a:	681b      	ldr	r3, [r3, #0]
 8013b8c:	4a0e      	ldr	r2, [pc, #56]	; (8013bc8 <sys_check_timeouts+0x6c>)
 8013b8e:	6013      	str	r3, [r2, #0]
    handler = tmptimeout->h;
 8013b90:	68bb      	ldr	r3, [r7, #8]
 8013b92:	689b      	ldr	r3, [r3, #8]
 8013b94:	607b      	str	r3, [r7, #4]
    arg = tmptimeout->arg;
 8013b96:	68bb      	ldr	r3, [r7, #8]
 8013b98:	68db      	ldr	r3, [r3, #12]
 8013b9a:	603b      	str	r3, [r7, #0]
    current_timeout_due_time = tmptimeout->time;
 8013b9c:	68bb      	ldr	r3, [r7, #8]
 8013b9e:	685b      	ldr	r3, [r3, #4]
 8013ba0:	4a0a      	ldr	r2, [pc, #40]	; (8013bcc <sys_check_timeouts+0x70>)
 8013ba2:	6013      	str	r3, [r2, #0]
    if (handler != NULL) {
      LWIP_DEBUGF(TIMERS_DEBUG, ("sct calling h=%s t=%"U32_F" arg=%p\n",
                                 tmptimeout->handler_name, sys_now() - tmptimeout->time, arg));
    }
#endif /* LWIP_DEBUG_TIMERNAMES */
    memp_free(MEMP_SYS_TIMEOUT, tmptimeout);
 8013ba4:	68b9      	ldr	r1, [r7, #8]
 8013ba6:	200a      	movs	r0, #10
 8013ba8:	f7f8 fcbe 	bl	800c528 <memp_free>
    if (handler != NULL) {
 8013bac:	687b      	ldr	r3, [r7, #4]
 8013bae:	2b00      	cmp	r3, #0
 8013bb0:	d0da      	beq.n	8013b68 <sys_check_timeouts+0xc>
      handler(arg);
 8013bb2:	687b      	ldr	r3, [r7, #4]
 8013bb4:	6838      	ldr	r0, [r7, #0]
 8013bb6:	4798      	blx	r3
  do {
 8013bb8:	e7d6      	b.n	8013b68 <sys_check_timeouts+0xc>
      return;
 8013bba:	bf00      	nop
 8013bbc:	e000      	b.n	8013bc0 <sys_check_timeouts+0x64>
      return;
 8013bbe:	bf00      	nop
    }
    LWIP_TCPIP_THREAD_ALIVE();

    /* Repeat until all expired timers have been called */
  } while (1);
}
 8013bc0:	3710      	adds	r7, #16
 8013bc2:	46bd      	mov	sp, r7
 8013bc4:	bd80      	pop	{r7, pc}
 8013bc6:	bf00      	nop
 8013bc8:	2000f844 	.word	0x2000f844
 8013bcc:	2000f848 	.word	0x2000f848

08013bd0 <sys_timeouts_sleeptime>:
/** Return the time left before the next timeout is due. If no timeouts are
 * enqueued, returns 0xffffffff
 */
u32_t
sys_timeouts_sleeptime(void)
{
 8013bd0:	b580      	push	{r7, lr}
 8013bd2:	b082      	sub	sp, #8
 8013bd4:	af00      	add	r7, sp, #0
  u32_t now;

  LWIP_ASSERT_CORE_LOCKED();

  if (next_timeout == NULL) {
 8013bd6:	4b16      	ldr	r3, [pc, #88]	; (8013c30 <sys_timeouts_sleeptime+0x60>)
 8013bd8:	681b      	ldr	r3, [r3, #0]
 8013bda:	2b00      	cmp	r3, #0
 8013bdc:	d102      	bne.n	8013be4 <sys_timeouts_sleeptime+0x14>
    return SYS_TIMEOUTS_SLEEPTIME_INFINITE;
 8013bde:	f04f 33ff 	mov.w	r3, #4294967295
 8013be2:	e020      	b.n	8013c26 <sys_timeouts_sleeptime+0x56>
  }
  now = sys_now();
 8013be4:	f7f1 fbf2 	bl	80053cc <sys_now>
 8013be8:	6078      	str	r0, [r7, #4]
  if (TIME_LESS_THAN(next_timeout->time, now)) {
 8013bea:	4b11      	ldr	r3, [pc, #68]	; (8013c30 <sys_timeouts_sleeptime+0x60>)
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	685a      	ldr	r2, [r3, #4]
 8013bf0:	687b      	ldr	r3, [r7, #4]
 8013bf2:	1ad3      	subs	r3, r2, r3
 8013bf4:	0fdb      	lsrs	r3, r3, #31
 8013bf6:	f003 0301 	and.w	r3, r3, #1
 8013bfa:	b2db      	uxtb	r3, r3
 8013bfc:	2b00      	cmp	r3, #0
 8013bfe:	d001      	beq.n	8013c04 <sys_timeouts_sleeptime+0x34>
    return 0;
 8013c00:	2300      	movs	r3, #0
 8013c02:	e010      	b.n	8013c26 <sys_timeouts_sleeptime+0x56>
  } else {
    u32_t ret = (u32_t)(next_timeout->time - now);
 8013c04:	4b0a      	ldr	r3, [pc, #40]	; (8013c30 <sys_timeouts_sleeptime+0x60>)
 8013c06:	681b      	ldr	r3, [r3, #0]
 8013c08:	685a      	ldr	r2, [r3, #4]
 8013c0a:	687b      	ldr	r3, [r7, #4]
 8013c0c:	1ad3      	subs	r3, r2, r3
 8013c0e:	603b      	str	r3, [r7, #0]
    LWIP_ASSERT("invalid sleeptime", ret <= LWIP_MAX_TIMEOUT);
 8013c10:	683b      	ldr	r3, [r7, #0]
 8013c12:	2b00      	cmp	r3, #0
 8013c14:	da06      	bge.n	8013c24 <sys_timeouts_sleeptime+0x54>
 8013c16:	4b07      	ldr	r3, [pc, #28]	; (8013c34 <sys_timeouts_sleeptime+0x64>)
 8013c18:	f44f 72dc 	mov.w	r2, #440	; 0x1b8
 8013c1c:	4906      	ldr	r1, [pc, #24]	; (8013c38 <sys_timeouts_sleeptime+0x68>)
 8013c1e:	4807      	ldr	r0, [pc, #28]	; (8013c3c <sys_timeouts_sleeptime+0x6c>)
 8013c20:	f003 f8e6 	bl	8016df0 <iprintf>
    return ret;
 8013c24:	683b      	ldr	r3, [r7, #0]
  }
}
 8013c26:	4618      	mov	r0, r3
 8013c28:	3708      	adds	r7, #8
 8013c2a:	46bd      	mov	sp, r7
 8013c2c:	bd80      	pop	{r7, pc}
 8013c2e:	bf00      	nop
 8013c30:	2000f844 	.word	0x2000f844
 8013c34:	0801ab50 	.word	0x0801ab50
 8013c38:	0801ac24 	.word	0x0801ac24
 8013c3c:	0801abc4 	.word	0x0801abc4

08013c40 <udp_init>:
/**
 * Initialize this module.
 */
void
udp_init(void)
{
 8013c40:	b580      	push	{r7, lr}
 8013c42:	af00      	add	r7, sp, #0
#ifdef LWIP_RAND
  udp_port = UDP_ENSURE_LOCAL_PORT_RANGE(LWIP_RAND());
 8013c44:	f002 ffe6 	bl	8016c14 <rand>
 8013c48:	4603      	mov	r3, r0
 8013c4a:	b29b      	uxth	r3, r3
 8013c4c:	f3c3 030d 	ubfx	r3, r3, #0, #14
 8013c50:	b29b      	uxth	r3, r3
 8013c52:	f5a3 4380 	sub.w	r3, r3, #16384	; 0x4000
 8013c56:	b29a      	uxth	r2, r3
 8013c58:	4b01      	ldr	r3, [pc, #4]	; (8013c60 <udp_init+0x20>)
 8013c5a:	801a      	strh	r2, [r3, #0]
#endif /* LWIP_RAND */
}
 8013c5c:	bf00      	nop
 8013c5e:	bd80      	pop	{r7, pc}
 8013c60:	2000002c 	.word	0x2000002c

08013c64 <udp_new_port>:
 *
 * @return a new (free) local UDP port number
 */
static u16_t
udp_new_port(void)
{
 8013c64:	b480      	push	{r7}
 8013c66:	b083      	sub	sp, #12
 8013c68:	af00      	add	r7, sp, #0
  u16_t n = 0;
 8013c6a:	2300      	movs	r3, #0
 8013c6c:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *pcb;

again:
  if (udp_port++ == UDP_LOCAL_PORT_RANGE_END) {
 8013c6e:	4b17      	ldr	r3, [pc, #92]	; (8013ccc <udp_new_port+0x68>)
 8013c70:	881b      	ldrh	r3, [r3, #0]
 8013c72:	1c5a      	adds	r2, r3, #1
 8013c74:	b291      	uxth	r1, r2
 8013c76:	4a15      	ldr	r2, [pc, #84]	; (8013ccc <udp_new_port+0x68>)
 8013c78:	8011      	strh	r1, [r2, #0]
 8013c7a:	f64f 72ff 	movw	r2, #65535	; 0xffff
 8013c7e:	4293      	cmp	r3, r2
 8013c80:	d103      	bne.n	8013c8a <udp_new_port+0x26>
    udp_port = UDP_LOCAL_PORT_RANGE_START;
 8013c82:	4b12      	ldr	r3, [pc, #72]	; (8013ccc <udp_new_port+0x68>)
 8013c84:	f44f 4240 	mov.w	r2, #49152	; 0xc000
 8013c88:	801a      	strh	r2, [r3, #0]
  }
  /* Check all PCBs. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013c8a:	4b11      	ldr	r3, [pc, #68]	; (8013cd0 <udp_new_port+0x6c>)
 8013c8c:	681b      	ldr	r3, [r3, #0]
 8013c8e:	603b      	str	r3, [r7, #0]
 8013c90:	e011      	b.n	8013cb6 <udp_new_port+0x52>
    if (pcb->local_port == udp_port) {
 8013c92:	683b      	ldr	r3, [r7, #0]
 8013c94:	8a5a      	ldrh	r2, [r3, #18]
 8013c96:	4b0d      	ldr	r3, [pc, #52]	; (8013ccc <udp_new_port+0x68>)
 8013c98:	881b      	ldrh	r3, [r3, #0]
 8013c9a:	429a      	cmp	r2, r3
 8013c9c:	d108      	bne.n	8013cb0 <udp_new_port+0x4c>
      if (++n > (UDP_LOCAL_PORT_RANGE_END - UDP_LOCAL_PORT_RANGE_START)) {
 8013c9e:	88fb      	ldrh	r3, [r7, #6]
 8013ca0:	3301      	adds	r3, #1
 8013ca2:	80fb      	strh	r3, [r7, #6]
 8013ca4:	88fb      	ldrh	r3, [r7, #6]
 8013ca6:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8013caa:	d3e0      	bcc.n	8013c6e <udp_new_port+0xa>
        return 0;
 8013cac:	2300      	movs	r3, #0
 8013cae:	e007      	b.n	8013cc0 <udp_new_port+0x5c>
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013cb0:	683b      	ldr	r3, [r7, #0]
 8013cb2:	68db      	ldr	r3, [r3, #12]
 8013cb4:	603b      	str	r3, [r7, #0]
 8013cb6:	683b      	ldr	r3, [r7, #0]
 8013cb8:	2b00      	cmp	r3, #0
 8013cba:	d1ea      	bne.n	8013c92 <udp_new_port+0x2e>
      }
      goto again;
    }
  }
  return udp_port;
 8013cbc:	4b03      	ldr	r3, [pc, #12]	; (8013ccc <udp_new_port+0x68>)
 8013cbe:	881b      	ldrh	r3, [r3, #0]
}
 8013cc0:	4618      	mov	r0, r3
 8013cc2:	370c      	adds	r7, #12
 8013cc4:	46bd      	mov	sp, r7
 8013cc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8013cca:	4770      	bx	lr
 8013ccc:	2000002c 	.word	0x2000002c
 8013cd0:	2000f850 	.word	0x2000f850

08013cd4 <udp_input_local_match>:
 * @param broadcast 1 if his is an IPv4 broadcast (global or subnet-only), 0 otherwise (only used for IPv4)
 * @return 1 on match, 0 otherwise
 */
static u8_t
udp_input_local_match(struct udp_pcb *pcb, struct netif *inp, u8_t broadcast)
{
 8013cd4:	b580      	push	{r7, lr}
 8013cd6:	b084      	sub	sp, #16
 8013cd8:	af00      	add	r7, sp, #0
 8013cda:	60f8      	str	r0, [r7, #12]
 8013cdc:	60b9      	str	r1, [r7, #8]
 8013cde:	4613      	mov	r3, r2
 8013ce0:	71fb      	strb	r3, [r7, #7]
  LWIP_UNUSED_ARG(inp);       /* in IPv6 only case */
  LWIP_UNUSED_ARG(broadcast); /* in IPv6 only case */

  LWIP_ASSERT("udp_input_local_match: invalid pcb", pcb != NULL);
 8013ce2:	68fb      	ldr	r3, [r7, #12]
 8013ce4:	2b00      	cmp	r3, #0
 8013ce6:	d105      	bne.n	8013cf4 <udp_input_local_match+0x20>
 8013ce8:	4b27      	ldr	r3, [pc, #156]	; (8013d88 <udp_input_local_match+0xb4>)
 8013cea:	2287      	movs	r2, #135	; 0x87
 8013cec:	4927      	ldr	r1, [pc, #156]	; (8013d8c <udp_input_local_match+0xb8>)
 8013cee:	4828      	ldr	r0, [pc, #160]	; (8013d90 <udp_input_local_match+0xbc>)
 8013cf0:	f003 f87e 	bl	8016df0 <iprintf>
  LWIP_ASSERT("udp_input_local_match: invalid netif", inp != NULL);
 8013cf4:	68bb      	ldr	r3, [r7, #8]
 8013cf6:	2b00      	cmp	r3, #0
 8013cf8:	d105      	bne.n	8013d06 <udp_input_local_match+0x32>
 8013cfa:	4b23      	ldr	r3, [pc, #140]	; (8013d88 <udp_input_local_match+0xb4>)
 8013cfc:	2288      	movs	r2, #136	; 0x88
 8013cfe:	4925      	ldr	r1, [pc, #148]	; (8013d94 <udp_input_local_match+0xc0>)
 8013d00:	4823      	ldr	r0, [pc, #140]	; (8013d90 <udp_input_local_match+0xbc>)
 8013d02:	f003 f875 	bl	8016df0 <iprintf>

  /* check if PCB is bound to specific netif */
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d06:	68fb      	ldr	r3, [r7, #12]
 8013d08:	7a1b      	ldrb	r3, [r3, #8]
 8013d0a:	2b00      	cmp	r3, #0
 8013d0c:	d00b      	beq.n	8013d26 <udp_input_local_match+0x52>
      (pcb->netif_idx != netif_get_index(ip_data.current_input_netif))) {
 8013d0e:	68fb      	ldr	r3, [r7, #12]
 8013d10:	7a1a      	ldrb	r2, [r3, #8]
 8013d12:	4b21      	ldr	r3, [pc, #132]	; (8013d98 <udp_input_local_match+0xc4>)
 8013d14:	685b      	ldr	r3, [r3, #4]
 8013d16:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8013d1a:	3301      	adds	r3, #1
 8013d1c:	b2db      	uxtb	r3, r3
  if ((pcb->netif_idx != NETIF_NO_INDEX) &&
 8013d1e:	429a      	cmp	r2, r3
 8013d20:	d001      	beq.n	8013d26 <udp_input_local_match+0x52>
    return 0;
 8013d22:	2300      	movs	r3, #0
 8013d24:	e02b      	b.n	8013d7e <udp_input_local_match+0xaa>
  /* Only need to check PCB if incoming IP version matches PCB IP version */
  if (IP_ADDR_PCB_VERSION_MATCH_EXACT(pcb, ip_current_dest_addr())) {
#if LWIP_IPV4
    /* Special case: IPv4 broadcast: all or broadcasts in my subnet
     * Note: broadcast variable can only be 1 if it is an IPv4 broadcast */
    if (broadcast != 0) {
 8013d26:	79fb      	ldrb	r3, [r7, #7]
 8013d28:	2b00      	cmp	r3, #0
 8013d2a:	d018      	beq.n	8013d5e <udp_input_local_match+0x8a>
#if IP_SOF_BROADCAST_RECV
      if (ip_get_option(pcb, SOF_BROADCAST))
#endif /* IP_SOF_BROADCAST_RECV */
      {
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d2c:	68fb      	ldr	r3, [r7, #12]
 8013d2e:	2b00      	cmp	r3, #0
 8013d30:	d013      	beq.n	8013d5a <udp_input_local_match+0x86>
 8013d32:	68fb      	ldr	r3, [r7, #12]
 8013d34:	681b      	ldr	r3, [r3, #0]
 8013d36:	2b00      	cmp	r3, #0
 8013d38:	d00f      	beq.n	8013d5a <udp_input_local_match+0x86>
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d3a:	4b17      	ldr	r3, [pc, #92]	; (8013d98 <udp_input_local_match+0xc4>)
 8013d3c:	695b      	ldr	r3, [r3, #20]
        if (ip4_addr_isany(ip_2_ip4(&pcb->local_ip)) ||
 8013d3e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013d42:	d00a      	beq.n	8013d5a <udp_input_local_match+0x86>
            ip4_addr_netcmp(ip_2_ip4(&pcb->local_ip), ip4_current_dest_addr(), netif_ip4_netmask(inp))) {
 8013d44:	68fb      	ldr	r3, [r7, #12]
 8013d46:	681a      	ldr	r2, [r3, #0]
 8013d48:	4b13      	ldr	r3, [pc, #76]	; (8013d98 <udp_input_local_match+0xc4>)
 8013d4a:	695b      	ldr	r3, [r3, #20]
 8013d4c:	405a      	eors	r2, r3
 8013d4e:	68bb      	ldr	r3, [r7, #8]
 8013d50:	3308      	adds	r3, #8
 8013d52:	681b      	ldr	r3, [r3, #0]
 8013d54:	4013      	ands	r3, r2
            ((ip4_current_dest_addr()->addr == IPADDR_BROADCAST)) ||
 8013d56:	2b00      	cmp	r3, #0
 8013d58:	d110      	bne.n	8013d7c <udp_input_local_match+0xa8>
          return 1;
 8013d5a:	2301      	movs	r3, #1
 8013d5c:	e00f      	b.n	8013d7e <udp_input_local_match+0xaa>
        }
      }
    } else
#endif /* LWIP_IPV4 */
      /* Handle IPv4 and IPv6: all or exact match */
      if (ip_addr_isany(&pcb->local_ip) || ip_addr_cmp(&pcb->local_ip, ip_current_dest_addr())) {
 8013d5e:	68fb      	ldr	r3, [r7, #12]
 8013d60:	2b00      	cmp	r3, #0
 8013d62:	d009      	beq.n	8013d78 <udp_input_local_match+0xa4>
 8013d64:	68fb      	ldr	r3, [r7, #12]
 8013d66:	681b      	ldr	r3, [r3, #0]
 8013d68:	2b00      	cmp	r3, #0
 8013d6a:	d005      	beq.n	8013d78 <udp_input_local_match+0xa4>
 8013d6c:	68fb      	ldr	r3, [r7, #12]
 8013d6e:	681a      	ldr	r2, [r3, #0]
 8013d70:	4b09      	ldr	r3, [pc, #36]	; (8013d98 <udp_input_local_match+0xc4>)
 8013d72:	695b      	ldr	r3, [r3, #20]
 8013d74:	429a      	cmp	r2, r3
 8013d76:	d101      	bne.n	8013d7c <udp_input_local_match+0xa8>
        return 1;
 8013d78:	2301      	movs	r3, #1
 8013d7a:	e000      	b.n	8013d7e <udp_input_local_match+0xaa>
      }
  }

  return 0;
 8013d7c:	2300      	movs	r3, #0
}
 8013d7e:	4618      	mov	r0, r3
 8013d80:	3710      	adds	r7, #16
 8013d82:	46bd      	mov	sp, r7
 8013d84:	bd80      	pop	{r7, pc}
 8013d86:	bf00      	nop
 8013d88:	0801ac38 	.word	0x0801ac38
 8013d8c:	0801ac68 	.word	0x0801ac68
 8013d90:	0801ac8c 	.word	0x0801ac8c
 8013d94:	0801acb4 	.word	0x0801acb4
 8013d98:	20009ee0 	.word	0x20009ee0

08013d9c <udp_input>:
 * @param inp network interface on which the datagram was received.
 *
 */
void
udp_input(struct pbuf *p, struct netif *inp)
{
 8013d9c:	b590      	push	{r4, r7, lr}
 8013d9e:	b08d      	sub	sp, #52	; 0x34
 8013da0:	af02      	add	r7, sp, #8
 8013da2:	6078      	str	r0, [r7, #4]
 8013da4:	6039      	str	r1, [r7, #0]
  struct udp_hdr *udphdr;
  struct udp_pcb *pcb, *prev;
  struct udp_pcb *uncon_pcb;
  u16_t src, dest;
  u8_t broadcast;
  u8_t for_us = 0;
 8013da6:	2300      	movs	r3, #0
 8013da8:	76fb      	strb	r3, [r7, #27]

  LWIP_UNUSED_ARG(inp);

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ASSERT("udp_input: invalid pbuf", p != NULL);
 8013daa:	687b      	ldr	r3, [r7, #4]
 8013dac:	2b00      	cmp	r3, #0
 8013dae:	d105      	bne.n	8013dbc <udp_input+0x20>
 8013db0:	4b7c      	ldr	r3, [pc, #496]	; (8013fa4 <udp_input+0x208>)
 8013db2:	22cf      	movs	r2, #207	; 0xcf
 8013db4:	497c      	ldr	r1, [pc, #496]	; (8013fa8 <udp_input+0x20c>)
 8013db6:	487d      	ldr	r0, [pc, #500]	; (8013fac <udp_input+0x210>)
 8013db8:	f003 f81a 	bl	8016df0 <iprintf>
  LWIP_ASSERT("udp_input: invalid netif", inp != NULL);
 8013dbc:	683b      	ldr	r3, [r7, #0]
 8013dbe:	2b00      	cmp	r3, #0
 8013dc0:	d105      	bne.n	8013dce <udp_input+0x32>
 8013dc2:	4b78      	ldr	r3, [pc, #480]	; (8013fa4 <udp_input+0x208>)
 8013dc4:	22d0      	movs	r2, #208	; 0xd0
 8013dc6:	497a      	ldr	r1, [pc, #488]	; (8013fb0 <udp_input+0x214>)
 8013dc8:	4878      	ldr	r0, [pc, #480]	; (8013fac <udp_input+0x210>)
 8013dca:	f003 f811 	bl	8016df0 <iprintf>
  PERF_START;

  UDP_STATS_INC(udp.recv);

  /* Check minimum length (UDP header) */
  if (p->len < UDP_HLEN) {
 8013dce:	687b      	ldr	r3, [r7, #4]
 8013dd0:	895b      	ldrh	r3, [r3, #10]
 8013dd2:	2b07      	cmp	r3, #7
 8013dd4:	d803      	bhi.n	8013dde <udp_input+0x42>
    LWIP_DEBUGF(UDP_DEBUG,
                ("udp_input: short UDP datagram (%"U16_F" bytes) discarded\n", p->tot_len));
    UDP_STATS_INC(udp.lenerr);
    UDP_STATS_INC(udp.drop);
    MIB2_STATS_INC(mib2.udpinerrors);
    pbuf_free(p);
 8013dd6:	6878      	ldr	r0, [r7, #4]
 8013dd8:	f7f9 fa4a 	bl	800d270 <pbuf_free>
    goto end;
 8013ddc:	e0de      	b.n	8013f9c <udp_input+0x200>
  }

  udphdr = (struct udp_hdr *)p->payload;
 8013dde:	687b      	ldr	r3, [r7, #4]
 8013de0:	685b      	ldr	r3, [r3, #4]
 8013de2:	617b      	str	r3, [r7, #20]

  /* is broadcast packet ? */
  broadcast = ip_addr_isbroadcast(ip_current_dest_addr(), ip_current_netif());
 8013de4:	4b73      	ldr	r3, [pc, #460]	; (8013fb4 <udp_input+0x218>)
 8013de6:	695b      	ldr	r3, [r3, #20]
 8013de8:	4a72      	ldr	r2, [pc, #456]	; (8013fb4 <udp_input+0x218>)
 8013dea:	6812      	ldr	r2, [r2, #0]
 8013dec:	4611      	mov	r1, r2
 8013dee:	4618      	mov	r0, r3
 8013df0:	f001 fe04 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8013df4:	4603      	mov	r3, r0
 8013df6:	74fb      	strb	r3, [r7, #19]

  LWIP_DEBUGF(UDP_DEBUG, ("udp_input: received datagram of length %"U16_F"\n", p->tot_len));

  /* convert src and dest ports to host byte order */
  src = lwip_ntohs(udphdr->src);
 8013df8:	697b      	ldr	r3, [r7, #20]
 8013dfa:	881b      	ldrh	r3, [r3, #0]
 8013dfc:	b29b      	uxth	r3, r3
 8013dfe:	4618      	mov	r0, r3
 8013e00:	f7f7 fe44 	bl	800ba8c <lwip_htons>
 8013e04:	4603      	mov	r3, r0
 8013e06:	823b      	strh	r3, [r7, #16]
  dest = lwip_ntohs(udphdr->dest);
 8013e08:	697b      	ldr	r3, [r7, #20]
 8013e0a:	885b      	ldrh	r3, [r3, #2]
 8013e0c:	b29b      	uxth	r3, r3
 8013e0e:	4618      	mov	r0, r3
 8013e10:	f7f7 fe3c 	bl	800ba8c <lwip_htons>
 8013e14:	4603      	mov	r3, r0
 8013e16:	81fb      	strh	r3, [r7, #14]
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_dest_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", lwip_ntohs(udphdr->dest)));
  ip_addr_debug_print_val(UDP_DEBUG, *ip_current_src_addr());
  LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", lwip_ntohs(udphdr->src)));

  pcb = NULL;
 8013e18:	2300      	movs	r3, #0
 8013e1a:	627b      	str	r3, [r7, #36]	; 0x24
  prev = NULL;
 8013e1c:	2300      	movs	r3, #0
 8013e1e:	623b      	str	r3, [r7, #32]
  uncon_pcb = NULL;
 8013e20:	2300      	movs	r3, #0
 8013e22:	61fb      	str	r3, [r7, #28]
  /* Iterate through the UDP pcb list for a matching pcb.
   * 'Perfect match' pcbs (connected to the remote port & ip address) are
   * preferred. If no perfect match is found, the first unconnected pcb that
   * matches the local port and ip address gets the datagram. */
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013e24:	4b64      	ldr	r3, [pc, #400]	; (8013fb8 <udp_input+0x21c>)
 8013e26:	681b      	ldr	r3, [r3, #0]
 8013e28:	627b      	str	r3, [r7, #36]	; 0x24
 8013e2a:	e054      	b.n	8013ed6 <udp_input+0x13a>
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F") <-- (", pcb->local_port));
    ip_addr_debug_print_val(UDP_DEBUG, pcb->remote_ip);
    LWIP_DEBUGF(UDP_DEBUG, (", %"U16_F")\n", pcb->remote_port));

    /* compare PCB local addr+port to UDP destination addr+port */
    if ((pcb->local_port == dest) &&
 8013e2c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e2e:	8a5b      	ldrh	r3, [r3, #18]
 8013e30:	89fa      	ldrh	r2, [r7, #14]
 8013e32:	429a      	cmp	r2, r3
 8013e34:	d14a      	bne.n	8013ecc <udp_input+0x130>
        (udp_input_local_match(pcb, inp, broadcast) != 0)) {
 8013e36:	7cfb      	ldrb	r3, [r7, #19]
 8013e38:	461a      	mov	r2, r3
 8013e3a:	6839      	ldr	r1, [r7, #0]
 8013e3c:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8013e3e:	f7ff ff49 	bl	8013cd4 <udp_input_local_match>
 8013e42:	4603      	mov	r3, r0
    if ((pcb->local_port == dest) &&
 8013e44:	2b00      	cmp	r3, #0
 8013e46:	d041      	beq.n	8013ecc <udp_input+0x130>
      if ((pcb->flags & UDP_FLAGS_CONNECTED) == 0) {
 8013e48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e4a:	7c1b      	ldrb	r3, [r3, #16]
 8013e4c:	f003 0304 	and.w	r3, r3, #4
 8013e50:	2b00      	cmp	r3, #0
 8013e52:	d11d      	bne.n	8013e90 <udp_input+0xf4>
        if (uncon_pcb == NULL) {
 8013e54:	69fb      	ldr	r3, [r7, #28]
 8013e56:	2b00      	cmp	r3, #0
 8013e58:	d102      	bne.n	8013e60 <udp_input+0xc4>
          /* the first unconnected matching PCB */
          uncon_pcb = pcb;
 8013e5a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e5c:	61fb      	str	r3, [r7, #28]
 8013e5e:	e017      	b.n	8013e90 <udp_input+0xf4>
#if LWIP_IPV4
        } else if (broadcast && ip4_current_dest_addr()->addr == IPADDR_BROADCAST) {
 8013e60:	7cfb      	ldrb	r3, [r7, #19]
 8013e62:	2b00      	cmp	r3, #0
 8013e64:	d014      	beq.n	8013e90 <udp_input+0xf4>
 8013e66:	4b53      	ldr	r3, [pc, #332]	; (8013fb4 <udp_input+0x218>)
 8013e68:	695b      	ldr	r3, [r3, #20]
 8013e6a:	f1b3 3fff 	cmp.w	r3, #4294967295
 8013e6e:	d10f      	bne.n	8013e90 <udp_input+0xf4>
          /* global broadcast address (only valid for IPv4; match was checked before) */
          if (!IP_IS_V4_VAL(uncon_pcb->local_ip) || !ip4_addr_cmp(ip_2_ip4(&uncon_pcb->local_ip), netif_ip4_addr(inp))) {
 8013e70:	69fb      	ldr	r3, [r7, #28]
 8013e72:	681a      	ldr	r2, [r3, #0]
 8013e74:	683b      	ldr	r3, [r7, #0]
 8013e76:	3304      	adds	r3, #4
 8013e78:	681b      	ldr	r3, [r3, #0]
 8013e7a:	429a      	cmp	r2, r3
 8013e7c:	d008      	beq.n	8013e90 <udp_input+0xf4>
            /* uncon_pcb does not match the input netif, check this pcb */
            if (IP_IS_V4_VAL(pcb->local_ip) && ip4_addr_cmp(ip_2_ip4(&pcb->local_ip), netif_ip4_addr(inp))) {
 8013e7e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e80:	681a      	ldr	r2, [r3, #0]
 8013e82:	683b      	ldr	r3, [r7, #0]
 8013e84:	3304      	adds	r3, #4
 8013e86:	681b      	ldr	r3, [r3, #0]
 8013e88:	429a      	cmp	r2, r3
 8013e8a:	d101      	bne.n	8013e90 <udp_input+0xf4>
              /* better match */
              uncon_pcb = pcb;
 8013e8c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e8e:	61fb      	str	r3, [r7, #28]
        }
#endif /* SO_REUSE */
      }

      /* compare PCB remote addr+port to UDP source addr+port */
      if ((pcb->remote_port == src) &&
 8013e90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e92:	8a9b      	ldrh	r3, [r3, #20]
 8013e94:	8a3a      	ldrh	r2, [r7, #16]
 8013e96:	429a      	cmp	r2, r3
 8013e98:	d118      	bne.n	8013ecc <udp_input+0x130>
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013e9a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013e9c:	685b      	ldr	r3, [r3, #4]
      if ((pcb->remote_port == src) &&
 8013e9e:	2b00      	cmp	r3, #0
 8013ea0:	d005      	beq.n	8013eae <udp_input+0x112>
           ip_addr_cmp(&pcb->remote_ip, ip_current_src_addr()))) {
 8013ea2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ea4:	685a      	ldr	r2, [r3, #4]
 8013ea6:	4b43      	ldr	r3, [pc, #268]	; (8013fb4 <udp_input+0x218>)
 8013ea8:	691b      	ldr	r3, [r3, #16]
          (ip_addr_isany_val(pcb->remote_ip) ||
 8013eaa:	429a      	cmp	r2, r3
 8013eac:	d10e      	bne.n	8013ecc <udp_input+0x130>
        /* the first fully matching PCB */
        if (prev != NULL) {
 8013eae:	6a3b      	ldr	r3, [r7, #32]
 8013eb0:	2b00      	cmp	r3, #0
 8013eb2:	d014      	beq.n	8013ede <udp_input+0x142>
          /* move the pcb to the front of udp_pcbs so that is
             found faster next time */
          prev->next = pcb->next;
 8013eb4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eb6:	68da      	ldr	r2, [r3, #12]
 8013eb8:	6a3b      	ldr	r3, [r7, #32]
 8013eba:	60da      	str	r2, [r3, #12]
          pcb->next = udp_pcbs;
 8013ebc:	4b3e      	ldr	r3, [pc, #248]	; (8013fb8 <udp_input+0x21c>)
 8013ebe:	681a      	ldr	r2, [r3, #0]
 8013ec0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec2:	60da      	str	r2, [r3, #12]
          udp_pcbs = pcb;
 8013ec4:	4a3c      	ldr	r2, [pc, #240]	; (8013fb8 <udp_input+0x21c>)
 8013ec6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ec8:	6013      	str	r3, [r2, #0]
        } else {
          UDP_STATS_INC(udp.cachehit);
        }
        break;
 8013eca:	e008      	b.n	8013ede <udp_input+0x142>
      }
    }

    prev = pcb;
 8013ecc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ece:	623b      	str	r3, [r7, #32]
  for (pcb = udp_pcbs; pcb != NULL; pcb = pcb->next) {
 8013ed0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed2:	68db      	ldr	r3, [r3, #12]
 8013ed4:	627b      	str	r3, [r7, #36]	; 0x24
 8013ed6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ed8:	2b00      	cmp	r3, #0
 8013eda:	d1a7      	bne.n	8013e2c <udp_input+0x90>
 8013edc:	e000      	b.n	8013ee0 <udp_input+0x144>
        break;
 8013ede:	bf00      	nop
  }
  /* no fully matching pcb found? then look for an unconnected pcb */
  if (pcb == NULL) {
 8013ee0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013ee2:	2b00      	cmp	r3, #0
 8013ee4:	d101      	bne.n	8013eea <udp_input+0x14e>
    pcb = uncon_pcb;
 8013ee6:	69fb      	ldr	r3, [r7, #28]
 8013ee8:	627b      	str	r3, [r7, #36]	; 0x24
  }

  /* Check checksum if this is a match or if it was directed at us. */
  if (pcb != NULL) {
 8013eea:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013eec:	2b00      	cmp	r3, #0
 8013eee:	d002      	beq.n	8013ef6 <udp_input+0x15a>
    for_us = 1;
 8013ef0:	2301      	movs	r3, #1
 8013ef2:	76fb      	strb	r3, [r7, #27]
 8013ef4:	e00a      	b.n	8013f0c <udp_input+0x170>
      for_us = netif_get_ip6_addr_match(inp, ip6_current_dest_addr()) >= 0;
    }
#endif /* LWIP_IPV6 */
#if LWIP_IPV4
    if (!ip_current_is_v6()) {
      for_us = ip4_addr_cmp(netif_ip4_addr(inp), ip4_current_dest_addr());
 8013ef6:	683b      	ldr	r3, [r7, #0]
 8013ef8:	3304      	adds	r3, #4
 8013efa:	681a      	ldr	r2, [r3, #0]
 8013efc:	4b2d      	ldr	r3, [pc, #180]	; (8013fb4 <udp_input+0x218>)
 8013efe:	695b      	ldr	r3, [r3, #20]
 8013f00:	429a      	cmp	r2, r3
 8013f02:	bf0c      	ite	eq
 8013f04:	2301      	moveq	r3, #1
 8013f06:	2300      	movne	r3, #0
 8013f08:	b2db      	uxtb	r3, r3
 8013f0a:	76fb      	strb	r3, [r7, #27]
    }
#endif /* LWIP_IPV4 */
  }

  if (for_us) {
 8013f0c:	7efb      	ldrb	r3, [r7, #27]
 8013f0e:	2b00      	cmp	r3, #0
 8013f10:	d041      	beq.n	8013f96 <udp_input+0x1fa>
          }
        }
      }
    }
#endif /* CHECKSUM_CHECK_UDP */
    if (pbuf_remove_header(p, UDP_HLEN)) {
 8013f12:	2108      	movs	r1, #8
 8013f14:	6878      	ldr	r0, [r7, #4]
 8013f16:	f7f9 f925 	bl	800d164 <pbuf_remove_header>
 8013f1a:	4603      	mov	r3, r0
 8013f1c:	2b00      	cmp	r3, #0
 8013f1e:	d00a      	beq.n	8013f36 <udp_input+0x19a>
      /* Can we cope with this failing? Just assert for now */
      LWIP_ASSERT("pbuf_remove_header failed\n", 0);
 8013f20:	4b20      	ldr	r3, [pc, #128]	; (8013fa4 <udp_input+0x208>)
 8013f22:	f44f 72b8 	mov.w	r2, #368	; 0x170
 8013f26:	4925      	ldr	r1, [pc, #148]	; (8013fbc <udp_input+0x220>)
 8013f28:	4820      	ldr	r0, [pc, #128]	; (8013fac <udp_input+0x210>)
 8013f2a:	f002 ff61 	bl	8016df0 <iprintf>
      UDP_STATS_INC(udp.drop);
      MIB2_STATS_INC(mib2.udpinerrors);
      pbuf_free(p);
 8013f2e:	6878      	ldr	r0, [r7, #4]
 8013f30:	f7f9 f99e 	bl	800d270 <pbuf_free>
      goto end;
 8013f34:	e032      	b.n	8013f9c <udp_input+0x200>
    }

    if (pcb != NULL) {
 8013f36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f38:	2b00      	cmp	r3, #0
 8013f3a:	d012      	beq.n	8013f62 <udp_input+0x1c6>
          }
        }
      }
#endif /* SO_REUSE && SO_REUSE_RXTOALL */
      /* callback */
      if (pcb->recv != NULL) {
 8013f3c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f3e:	699b      	ldr	r3, [r3, #24]
 8013f40:	2b00      	cmp	r3, #0
 8013f42:	d00a      	beq.n	8013f5a <udp_input+0x1be>
        /* now the recv function is responsible for freeing p */
        pcb->recv(pcb->recv_arg, pcb, p, ip_current_src_addr(), src);
 8013f44:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f46:	699c      	ldr	r4, [r3, #24]
 8013f48:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8013f4a:	69d8      	ldr	r0, [r3, #28]
 8013f4c:	8a3b      	ldrh	r3, [r7, #16]
 8013f4e:	9300      	str	r3, [sp, #0]
 8013f50:	4b1b      	ldr	r3, [pc, #108]	; (8013fc0 <udp_input+0x224>)
 8013f52:	687a      	ldr	r2, [r7, #4]
 8013f54:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8013f56:	47a0      	blx	r4
  } else {
    pbuf_free(p);
  }
end:
  PERF_STOP("udp_input");
  return;
 8013f58:	e021      	b.n	8013f9e <udp_input+0x202>
        pbuf_free(p);
 8013f5a:	6878      	ldr	r0, [r7, #4]
 8013f5c:	f7f9 f988 	bl	800d270 <pbuf_free>
        goto end;
 8013f60:	e01c      	b.n	8013f9c <udp_input+0x200>
      if (!broadcast && !ip_addr_ismulticast(ip_current_dest_addr())) {
 8013f62:	7cfb      	ldrb	r3, [r7, #19]
 8013f64:	2b00      	cmp	r3, #0
 8013f66:	d112      	bne.n	8013f8e <udp_input+0x1f2>
 8013f68:	4b12      	ldr	r3, [pc, #72]	; (8013fb4 <udp_input+0x218>)
 8013f6a:	695b      	ldr	r3, [r3, #20]
 8013f6c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8013f70:	2be0      	cmp	r3, #224	; 0xe0
 8013f72:	d00c      	beq.n	8013f8e <udp_input+0x1f2>
        pbuf_header_force(p, (s16_t)(ip_current_header_tot_len() + UDP_HLEN));
 8013f74:	4b0f      	ldr	r3, [pc, #60]	; (8013fb4 <udp_input+0x218>)
 8013f76:	899b      	ldrh	r3, [r3, #12]
 8013f78:	3308      	adds	r3, #8
 8013f7a:	b29b      	uxth	r3, r3
 8013f7c:	b21b      	sxth	r3, r3
 8013f7e:	4619      	mov	r1, r3
 8013f80:	6878      	ldr	r0, [r7, #4]
 8013f82:	f7f9 f962 	bl	800d24a <pbuf_header_force>
        icmp_port_unreach(ip_current_is_v6(), p);
 8013f86:	2103      	movs	r1, #3
 8013f88:	6878      	ldr	r0, [r7, #4]
 8013f8a:	f001 fa17 	bl	80153bc <icmp_dest_unreach>
      pbuf_free(p);
 8013f8e:	6878      	ldr	r0, [r7, #4]
 8013f90:	f7f9 f96e 	bl	800d270 <pbuf_free>
  return;
 8013f94:	e003      	b.n	8013f9e <udp_input+0x202>
    pbuf_free(p);
 8013f96:	6878      	ldr	r0, [r7, #4]
 8013f98:	f7f9 f96a 	bl	800d270 <pbuf_free>
  return;
 8013f9c:	bf00      	nop
  UDP_STATS_INC(udp.drop);
  MIB2_STATS_INC(mib2.udpinerrors);
  pbuf_free(p);
  PERF_STOP("udp_input");
#endif /* CHECKSUM_CHECK_UDP */
}
 8013f9e:	372c      	adds	r7, #44	; 0x2c
 8013fa0:	46bd      	mov	sp, r7
 8013fa2:	bd90      	pop	{r4, r7, pc}
 8013fa4:	0801ac38 	.word	0x0801ac38
 8013fa8:	0801acdc 	.word	0x0801acdc
 8013fac:	0801ac8c 	.word	0x0801ac8c
 8013fb0:	0801acf4 	.word	0x0801acf4
 8013fb4:	20009ee0 	.word	0x20009ee0
 8013fb8:	2000f850 	.word	0x2000f850
 8013fbc:	0801ad10 	.word	0x0801ad10
 8013fc0:	20009ef0 	.word	0x20009ef0

08013fc4 <udp_bind>:
 *
 * @see udp_disconnect()
 */
err_t
udp_bind(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 8013fc4:	b580      	push	{r7, lr}
 8013fc6:	b086      	sub	sp, #24
 8013fc8:	af00      	add	r7, sp, #0
 8013fca:	60f8      	str	r0, [r7, #12]
 8013fcc:	60b9      	str	r1, [r7, #8]
 8013fce:	4613      	mov	r3, r2
 8013fd0:	80fb      	strh	r3, [r7, #6]

  LWIP_ASSERT_CORE_LOCKED();

#if LWIP_IPV4
  /* Don't propagate NULL pointer (IPv4 ANY) to subsequent functions */
  if (ipaddr == NULL) {
 8013fd2:	68bb      	ldr	r3, [r7, #8]
 8013fd4:	2b00      	cmp	r3, #0
 8013fd6:	d101      	bne.n	8013fdc <udp_bind+0x18>
    ipaddr = IP4_ADDR_ANY;
 8013fd8:	4b39      	ldr	r3, [pc, #228]	; (80140c0 <udp_bind+0xfc>)
 8013fda:	60bb      	str	r3, [r7, #8]
  }
#else /* LWIP_IPV4 */
  LWIP_ERROR("udp_bind: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
#endif /* LWIP_IPV4 */

  LWIP_ERROR("udp_bind: invalid pcb", pcb != NULL, return ERR_ARG);
 8013fdc:	68fb      	ldr	r3, [r7, #12]
 8013fde:	2b00      	cmp	r3, #0
 8013fe0:	d109      	bne.n	8013ff6 <udp_bind+0x32>
 8013fe2:	4b38      	ldr	r3, [pc, #224]	; (80140c4 <udp_bind+0x100>)
 8013fe4:	f240 32b7 	movw	r2, #951	; 0x3b7
 8013fe8:	4937      	ldr	r1, [pc, #220]	; (80140c8 <udp_bind+0x104>)
 8013fea:	4838      	ldr	r0, [pc, #224]	; (80140cc <udp_bind+0x108>)
 8013fec:	f002 ff00 	bl	8016df0 <iprintf>
 8013ff0:	f06f 030f 	mvn.w	r3, #15
 8013ff4:	e060      	b.n	80140b8 <udp_bind+0xf4>

  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, ("udp_bind(ipaddr = "));
  ip_addr_debug_print(UDP_DEBUG | LWIP_DBG_TRACE, ipaddr);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE, (", port = %"U16_F")\n", port));

  rebind = 0;
 8013ff6:	2300      	movs	r3, #0
 8013ff8:	74fb      	strb	r3, [r7, #19]
  /* Check for double bind and rebind of the same pcb */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8013ffa:	4b35      	ldr	r3, [pc, #212]	; (80140d0 <udp_bind+0x10c>)
 8013ffc:	681b      	ldr	r3, [r3, #0]
 8013ffe:	617b      	str	r3, [r7, #20]
 8014000:	e009      	b.n	8014016 <udp_bind+0x52>
    /* is this UDP PCB already on active list? */
    if (pcb == ipcb) {
 8014002:	68fa      	ldr	r2, [r7, #12]
 8014004:	697b      	ldr	r3, [r7, #20]
 8014006:	429a      	cmp	r2, r3
 8014008:	d102      	bne.n	8014010 <udp_bind+0x4c>
      rebind = 1;
 801400a:	2301      	movs	r3, #1
 801400c:	74fb      	strb	r3, [r7, #19]
      break;
 801400e:	e005      	b.n	801401c <udp_bind+0x58>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014010:	697b      	ldr	r3, [r7, #20]
 8014012:	68db      	ldr	r3, [r3, #12]
 8014014:	617b      	str	r3, [r7, #20]
 8014016:	697b      	ldr	r3, [r7, #20]
 8014018:	2b00      	cmp	r3, #0
 801401a:	d1f2      	bne.n	8014002 <udp_bind+0x3e>
    ipaddr = &zoned_ipaddr;
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  /* no port specified? */
  if (port == 0) {
 801401c:	88fb      	ldrh	r3, [r7, #6]
 801401e:	2b00      	cmp	r3, #0
 8014020:	d109      	bne.n	8014036 <udp_bind+0x72>
    port = udp_new_port();
 8014022:	f7ff fe1f 	bl	8013c64 <udp_new_port>
 8014026:	4603      	mov	r3, r0
 8014028:	80fb      	strh	r3, [r7, #6]
    if (port == 0) {
 801402a:	88fb      	ldrh	r3, [r7, #6]
 801402c:	2b00      	cmp	r3, #0
 801402e:	d12c      	bne.n	801408a <udp_bind+0xc6>
      /* no more ports available in local range */
      LWIP_DEBUGF(UDP_DEBUG, ("udp_bind: out of free UDP ports\n"));
      return ERR_USE;
 8014030:	f06f 0307 	mvn.w	r3, #7
 8014034:	e040      	b.n	80140b8 <udp_bind+0xf4>
    }
  } else {
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014036:	4b26      	ldr	r3, [pc, #152]	; (80140d0 <udp_bind+0x10c>)
 8014038:	681b      	ldr	r3, [r3, #0]
 801403a:	617b      	str	r3, [r7, #20]
 801403c:	e022      	b.n	8014084 <udp_bind+0xc0>
      if (pcb != ipcb) {
 801403e:	68fa      	ldr	r2, [r7, #12]
 8014040:	697b      	ldr	r3, [r7, #20]
 8014042:	429a      	cmp	r2, r3
 8014044:	d01b      	beq.n	801407e <udp_bind+0xba>
        if (!ip_get_option(pcb, SOF_REUSEADDR) ||
            !ip_get_option(ipcb, SOF_REUSEADDR))
#endif /* SO_REUSE */
        {
          /* port matches that of PCB in list and REUSEADDR not set -> reject */
          if ((ipcb->local_port == port) &&
 8014046:	697b      	ldr	r3, [r7, #20]
 8014048:	8a5b      	ldrh	r3, [r3, #18]
 801404a:	88fa      	ldrh	r2, [r7, #6]
 801404c:	429a      	cmp	r2, r3
 801404e:	d116      	bne.n	801407e <udp_bind+0xba>
              /* IP address matches or any IP used? */
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 8014050:	697b      	ldr	r3, [r7, #20]
 8014052:	681a      	ldr	r2, [r3, #0]
 8014054:	68bb      	ldr	r3, [r7, #8]
 8014056:	681b      	ldr	r3, [r3, #0]
          if ((ipcb->local_port == port) &&
 8014058:	429a      	cmp	r2, r3
 801405a:	d00d      	beq.n	8014078 <udp_bind+0xb4>
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801405c:	68bb      	ldr	r3, [r7, #8]
 801405e:	2b00      	cmp	r3, #0
 8014060:	d00a      	beq.n	8014078 <udp_bind+0xb4>
 8014062:	68bb      	ldr	r3, [r7, #8]
 8014064:	681b      	ldr	r3, [r3, #0]
 8014066:	2b00      	cmp	r3, #0
 8014068:	d006      	beq.n	8014078 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 801406a:	697b      	ldr	r3, [r7, #20]
              (ip_addr_cmp(&ipcb->local_ip, ipaddr) || ip_addr_isany(ipaddr) ||
 801406c:	2b00      	cmp	r3, #0
 801406e:	d003      	beq.n	8014078 <udp_bind+0xb4>
              ip_addr_isany(&ipcb->local_ip))) {
 8014070:	697b      	ldr	r3, [r7, #20]
 8014072:	681b      	ldr	r3, [r3, #0]
 8014074:	2b00      	cmp	r3, #0
 8014076:	d102      	bne.n	801407e <udp_bind+0xba>
            /* other PCB already binds to this local IP and port */
            LWIP_DEBUGF(UDP_DEBUG,
                        ("udp_bind: local port %"U16_F" already bound by another pcb\n", port));
            return ERR_USE;
 8014078:	f06f 0307 	mvn.w	r3, #7
 801407c:	e01c      	b.n	80140b8 <udp_bind+0xf4>
    for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 801407e:	697b      	ldr	r3, [r7, #20]
 8014080:	68db      	ldr	r3, [r3, #12]
 8014082:	617b      	str	r3, [r7, #20]
 8014084:	697b      	ldr	r3, [r7, #20]
 8014086:	2b00      	cmp	r3, #0
 8014088:	d1d9      	bne.n	801403e <udp_bind+0x7a>
        }
      }
    }
  }

  ip_addr_set_ipaddr(&pcb->local_ip, ipaddr);
 801408a:	68bb      	ldr	r3, [r7, #8]
 801408c:	2b00      	cmp	r3, #0
 801408e:	d002      	beq.n	8014096 <udp_bind+0xd2>
 8014090:	68bb      	ldr	r3, [r7, #8]
 8014092:	681b      	ldr	r3, [r3, #0]
 8014094:	e000      	b.n	8014098 <udp_bind+0xd4>
 8014096:	2300      	movs	r3, #0
 8014098:	68fa      	ldr	r2, [r7, #12]
 801409a:	6013      	str	r3, [r2, #0]

  pcb->local_port = port;
 801409c:	68fb      	ldr	r3, [r7, #12]
 801409e:	88fa      	ldrh	r2, [r7, #6]
 80140a0:	825a      	strh	r2, [r3, #18]
  mib2_udp_bind(pcb);
  /* pcb not active yet? */
  if (rebind == 0) {
 80140a2:	7cfb      	ldrb	r3, [r7, #19]
 80140a4:	2b00      	cmp	r3, #0
 80140a6:	d106      	bne.n	80140b6 <udp_bind+0xf2>
    /* place the PCB on the active list if not already there */
    pcb->next = udp_pcbs;
 80140a8:	4b09      	ldr	r3, [pc, #36]	; (80140d0 <udp_bind+0x10c>)
 80140aa:	681a      	ldr	r2, [r3, #0]
 80140ac:	68fb      	ldr	r3, [r7, #12]
 80140ae:	60da      	str	r2, [r3, #12]
    udp_pcbs = pcb;
 80140b0:	4a07      	ldr	r2, [pc, #28]	; (80140d0 <udp_bind+0x10c>)
 80140b2:	68fb      	ldr	r3, [r7, #12]
 80140b4:	6013      	str	r3, [r2, #0]
  }
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, ("udp_bind: bound to "));
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, pcb->local_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->local_port));
  return ERR_OK;
 80140b6:	2300      	movs	r3, #0
}
 80140b8:	4618      	mov	r0, r3
 80140ba:	3718      	adds	r7, #24
 80140bc:	46bd      	mov	sp, r7
 80140be:	bd80      	pop	{r7, pc}
 80140c0:	0801b7e0 	.word	0x0801b7e0
 80140c4:	0801ac38 	.word	0x0801ac38
 80140c8:	0801af00 	.word	0x0801af00
 80140cc:	0801ac8c 	.word	0x0801ac8c
 80140d0:	2000f850 	.word	0x2000f850

080140d4 <udp_connect>:
 *
 * @see udp_disconnect()
 */
err_t
udp_connect(struct udp_pcb *pcb, const ip_addr_t *ipaddr, u16_t port)
{
 80140d4:	b580      	push	{r7, lr}
 80140d6:	b086      	sub	sp, #24
 80140d8:	af00      	add	r7, sp, #0
 80140da:	60f8      	str	r0, [r7, #12]
 80140dc:	60b9      	str	r1, [r7, #8]
 80140de:	4613      	mov	r3, r2
 80140e0:	80fb      	strh	r3, [r7, #6]
  struct udp_pcb *ipcb;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_connect: invalid pcb", pcb != NULL, return ERR_ARG);
 80140e2:	68fb      	ldr	r3, [r7, #12]
 80140e4:	2b00      	cmp	r3, #0
 80140e6:	d109      	bne.n	80140fc <udp_connect+0x28>
 80140e8:	4b2c      	ldr	r3, [pc, #176]	; (801419c <udp_connect+0xc8>)
 80140ea:	f240 4235 	movw	r2, #1077	; 0x435
 80140ee:	492c      	ldr	r1, [pc, #176]	; (80141a0 <udp_connect+0xcc>)
 80140f0:	482c      	ldr	r0, [pc, #176]	; (80141a4 <udp_connect+0xd0>)
 80140f2:	f002 fe7d 	bl	8016df0 <iprintf>
 80140f6:	f06f 030f 	mvn.w	r3, #15
 80140fa:	e04b      	b.n	8014194 <udp_connect+0xc0>
  LWIP_ERROR("udp_connect: invalid ipaddr", ipaddr != NULL, return ERR_ARG);
 80140fc:	68bb      	ldr	r3, [r7, #8]
 80140fe:	2b00      	cmp	r3, #0
 8014100:	d109      	bne.n	8014116 <udp_connect+0x42>
 8014102:	4b26      	ldr	r3, [pc, #152]	; (801419c <udp_connect+0xc8>)
 8014104:	f240 4236 	movw	r2, #1078	; 0x436
 8014108:	4927      	ldr	r1, [pc, #156]	; (80141a8 <udp_connect+0xd4>)
 801410a:	4826      	ldr	r0, [pc, #152]	; (80141a4 <udp_connect+0xd0>)
 801410c:	f002 fe70 	bl	8016df0 <iprintf>
 8014110:	f06f 030f 	mvn.w	r3, #15
 8014114:	e03e      	b.n	8014194 <udp_connect+0xc0>

  if (pcb->local_port == 0) {
 8014116:	68fb      	ldr	r3, [r7, #12]
 8014118:	8a5b      	ldrh	r3, [r3, #18]
 801411a:	2b00      	cmp	r3, #0
 801411c:	d10f      	bne.n	801413e <udp_connect+0x6a>
    err_t err = udp_bind(pcb, &pcb->local_ip, pcb->local_port);
 801411e:	68f9      	ldr	r1, [r7, #12]
 8014120:	68fb      	ldr	r3, [r7, #12]
 8014122:	8a5b      	ldrh	r3, [r3, #18]
 8014124:	461a      	mov	r2, r3
 8014126:	68f8      	ldr	r0, [r7, #12]
 8014128:	f7ff ff4c 	bl	8013fc4 <udp_bind>
 801412c:	4603      	mov	r3, r0
 801412e:	74fb      	strb	r3, [r7, #19]
    if (err != ERR_OK) {
 8014130:	f997 3013 	ldrsb.w	r3, [r7, #19]
 8014134:	2b00      	cmp	r3, #0
 8014136:	d002      	beq.n	801413e <udp_connect+0x6a>
      return err;
 8014138:	f997 3013 	ldrsb.w	r3, [r7, #19]
 801413c:	e02a      	b.n	8014194 <udp_connect+0xc0>
    }
  }

  ip_addr_set_ipaddr(&pcb->remote_ip, ipaddr);
 801413e:	68bb      	ldr	r3, [r7, #8]
 8014140:	2b00      	cmp	r3, #0
 8014142:	d002      	beq.n	801414a <udp_connect+0x76>
 8014144:	68bb      	ldr	r3, [r7, #8]
 8014146:	681b      	ldr	r3, [r3, #0]
 8014148:	e000      	b.n	801414c <udp_connect+0x78>
 801414a:	2300      	movs	r3, #0
 801414c:	68fa      	ldr	r2, [r7, #12]
 801414e:	6053      	str	r3, [r2, #4]
      ip6_addr_lacks_zone(ip_2_ip6(&pcb->remote_ip), IP6_UNKNOWN)) {
    ip6_addr_select_zone(ip_2_ip6(&pcb->remote_ip), ip_2_ip6(&pcb->local_ip));
  }
#endif /* LWIP_IPV6 && LWIP_IPV6_SCOPES */

  pcb->remote_port = port;
 8014150:	68fb      	ldr	r3, [r7, #12]
 8014152:	88fa      	ldrh	r2, [r7, #6]
 8014154:	829a      	strh	r2, [r3, #20]
  pcb->flags |= UDP_FLAGS_CONNECTED;
 8014156:	68fb      	ldr	r3, [r7, #12]
 8014158:	7c1b      	ldrb	r3, [r3, #16]
 801415a:	f043 0304 	orr.w	r3, r3, #4
 801415e:	b2da      	uxtb	r2, r3
 8014160:	68fb      	ldr	r3, [r7, #12]
 8014162:	741a      	strb	r2, [r3, #16]
  ip_addr_debug_print_val(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE,
                          pcb->remote_ip);
  LWIP_DEBUGF(UDP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_STATE, (", port %"U16_F")\n", pcb->remote_port));

  /* Insert UDP PCB into the list of active UDP PCBs. */
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014164:	4b11      	ldr	r3, [pc, #68]	; (80141ac <udp_connect+0xd8>)
 8014166:	681b      	ldr	r3, [r3, #0]
 8014168:	617b      	str	r3, [r7, #20]
 801416a:	e008      	b.n	801417e <udp_connect+0xaa>
    if (pcb == ipcb) {
 801416c:	68fa      	ldr	r2, [r7, #12]
 801416e:	697b      	ldr	r3, [r7, #20]
 8014170:	429a      	cmp	r2, r3
 8014172:	d101      	bne.n	8014178 <udp_connect+0xa4>
      /* already on the list, just return */
      return ERR_OK;
 8014174:	2300      	movs	r3, #0
 8014176:	e00d      	b.n	8014194 <udp_connect+0xc0>
  for (ipcb = udp_pcbs; ipcb != NULL; ipcb = ipcb->next) {
 8014178:	697b      	ldr	r3, [r7, #20]
 801417a:	68db      	ldr	r3, [r3, #12]
 801417c:	617b      	str	r3, [r7, #20]
 801417e:	697b      	ldr	r3, [r7, #20]
 8014180:	2b00      	cmp	r3, #0
 8014182:	d1f3      	bne.n	801416c <udp_connect+0x98>
    }
  }
  /* PCB not yet on the list, add PCB now */
  pcb->next = udp_pcbs;
 8014184:	4b09      	ldr	r3, [pc, #36]	; (80141ac <udp_connect+0xd8>)
 8014186:	681a      	ldr	r2, [r3, #0]
 8014188:	68fb      	ldr	r3, [r7, #12]
 801418a:	60da      	str	r2, [r3, #12]
  udp_pcbs = pcb;
 801418c:	4a07      	ldr	r2, [pc, #28]	; (80141ac <udp_connect+0xd8>)
 801418e:	68fb      	ldr	r3, [r7, #12]
 8014190:	6013      	str	r3, [r2, #0]
  return ERR_OK;
 8014192:	2300      	movs	r3, #0
}
 8014194:	4618      	mov	r0, r3
 8014196:	3718      	adds	r7, #24
 8014198:	46bd      	mov	sp, r7
 801419a:	bd80      	pop	{r7, pc}
 801419c:	0801ac38 	.word	0x0801ac38
 80141a0:	0801af18 	.word	0x0801af18
 80141a4:	0801ac8c 	.word	0x0801ac8c
 80141a8:	0801af34 	.word	0x0801af34
 80141ac:	2000f850 	.word	0x2000f850

080141b0 <udp_recv>:
 * @param recv function pointer of the callback function
 * @param recv_arg additional argument to pass to the callback function
 */
void
udp_recv(struct udp_pcb *pcb, udp_recv_fn recv, void *recv_arg)
{
 80141b0:	b580      	push	{r7, lr}
 80141b2:	b084      	sub	sp, #16
 80141b4:	af00      	add	r7, sp, #0
 80141b6:	60f8      	str	r0, [r7, #12]
 80141b8:	60b9      	str	r1, [r7, #8]
 80141ba:	607a      	str	r2, [r7, #4]
  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_recv: invalid pcb", pcb != NULL, return);
 80141bc:	68fb      	ldr	r3, [r7, #12]
 80141be:	2b00      	cmp	r3, #0
 80141c0:	d107      	bne.n	80141d2 <udp_recv+0x22>
 80141c2:	4b08      	ldr	r3, [pc, #32]	; (80141e4 <udp_recv+0x34>)
 80141c4:	f240 428a 	movw	r2, #1162	; 0x48a
 80141c8:	4907      	ldr	r1, [pc, #28]	; (80141e8 <udp_recv+0x38>)
 80141ca:	4808      	ldr	r0, [pc, #32]	; (80141ec <udp_recv+0x3c>)
 80141cc:	f002 fe10 	bl	8016df0 <iprintf>
 80141d0:	e005      	b.n	80141de <udp_recv+0x2e>

  /* remember recv() callback and user data */
  pcb->recv = recv;
 80141d2:	68fb      	ldr	r3, [r7, #12]
 80141d4:	68ba      	ldr	r2, [r7, #8]
 80141d6:	619a      	str	r2, [r3, #24]
  pcb->recv_arg = recv_arg;
 80141d8:	68fb      	ldr	r3, [r7, #12]
 80141da:	687a      	ldr	r2, [r7, #4]
 80141dc:	61da      	str	r2, [r3, #28]
}
 80141de:	3710      	adds	r7, #16
 80141e0:	46bd      	mov	sp, r7
 80141e2:	bd80      	pop	{r7, pc}
 80141e4:	0801ac38 	.word	0x0801ac38
 80141e8:	0801af6c 	.word	0x0801af6c
 80141ec:	0801ac8c 	.word	0x0801ac8c

080141f0 <udp_remove>:
 *
 * @see udp_new()
 */
void
udp_remove(struct udp_pcb *pcb)
{
 80141f0:	b580      	push	{r7, lr}
 80141f2:	b084      	sub	sp, #16
 80141f4:	af00      	add	r7, sp, #0
 80141f6:	6078      	str	r0, [r7, #4]
  struct udp_pcb *pcb2;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("udp_remove: invalid pcb", pcb != NULL, return);
 80141f8:	687b      	ldr	r3, [r7, #4]
 80141fa:	2b00      	cmp	r3, #0
 80141fc:	d107      	bne.n	801420e <udp_remove+0x1e>
 80141fe:	4b19      	ldr	r3, [pc, #100]	; (8014264 <udp_remove+0x74>)
 8014200:	f240 42a1 	movw	r2, #1185	; 0x4a1
 8014204:	4918      	ldr	r1, [pc, #96]	; (8014268 <udp_remove+0x78>)
 8014206:	4819      	ldr	r0, [pc, #100]	; (801426c <udp_remove+0x7c>)
 8014208:	f002 fdf2 	bl	8016df0 <iprintf>
 801420c:	e026      	b.n	801425c <udp_remove+0x6c>

  mib2_udp_unbind(pcb);
  /* pcb to be removed is first in list? */
  if (udp_pcbs == pcb) {
 801420e:	4b18      	ldr	r3, [pc, #96]	; (8014270 <udp_remove+0x80>)
 8014210:	681b      	ldr	r3, [r3, #0]
 8014212:	687a      	ldr	r2, [r7, #4]
 8014214:	429a      	cmp	r2, r3
 8014216:	d105      	bne.n	8014224 <udp_remove+0x34>
    /* make list start at 2nd pcb */
    udp_pcbs = udp_pcbs->next;
 8014218:	4b15      	ldr	r3, [pc, #84]	; (8014270 <udp_remove+0x80>)
 801421a:	681b      	ldr	r3, [r3, #0]
 801421c:	68db      	ldr	r3, [r3, #12]
 801421e:	4a14      	ldr	r2, [pc, #80]	; (8014270 <udp_remove+0x80>)
 8014220:	6013      	str	r3, [r2, #0]
 8014222:	e017      	b.n	8014254 <udp_remove+0x64>
    /* pcb not 1st in list */
  } else {
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014224:	4b12      	ldr	r3, [pc, #72]	; (8014270 <udp_remove+0x80>)
 8014226:	681b      	ldr	r3, [r3, #0]
 8014228:	60fb      	str	r3, [r7, #12]
 801422a:	e010      	b.n	801424e <udp_remove+0x5e>
      /* find pcb in udp_pcbs list */
      if (pcb2->next != NULL && pcb2->next == pcb) {
 801422c:	68fb      	ldr	r3, [r7, #12]
 801422e:	68db      	ldr	r3, [r3, #12]
 8014230:	2b00      	cmp	r3, #0
 8014232:	d009      	beq.n	8014248 <udp_remove+0x58>
 8014234:	68fb      	ldr	r3, [r7, #12]
 8014236:	68db      	ldr	r3, [r3, #12]
 8014238:	687a      	ldr	r2, [r7, #4]
 801423a:	429a      	cmp	r2, r3
 801423c:	d104      	bne.n	8014248 <udp_remove+0x58>
        /* remove pcb from list */
        pcb2->next = pcb->next;
 801423e:	687b      	ldr	r3, [r7, #4]
 8014240:	68da      	ldr	r2, [r3, #12]
 8014242:	68fb      	ldr	r3, [r7, #12]
 8014244:	60da      	str	r2, [r3, #12]
        break;
 8014246:	e005      	b.n	8014254 <udp_remove+0x64>
    for (pcb2 = udp_pcbs; pcb2 != NULL; pcb2 = pcb2->next) {
 8014248:	68fb      	ldr	r3, [r7, #12]
 801424a:	68db      	ldr	r3, [r3, #12]
 801424c:	60fb      	str	r3, [r7, #12]
 801424e:	68fb      	ldr	r3, [r7, #12]
 8014250:	2b00      	cmp	r3, #0
 8014252:	d1eb      	bne.n	801422c <udp_remove+0x3c>
      }
    }
  }
  memp_free(MEMP_UDP_PCB, pcb);
 8014254:	6879      	ldr	r1, [r7, #4]
 8014256:	2000      	movs	r0, #0
 8014258:	f7f8 f966 	bl	800c528 <memp_free>
}
 801425c:	3710      	adds	r7, #16
 801425e:	46bd      	mov	sp, r7
 8014260:	bd80      	pop	{r7, pc}
 8014262:	bf00      	nop
 8014264:	0801ac38 	.word	0x0801ac38
 8014268:	0801af84 	.word	0x0801af84
 801426c:	0801ac8c 	.word	0x0801ac8c
 8014270:	2000f850 	.word	0x2000f850

08014274 <udp_new>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new(void)
{
 8014274:	b580      	push	{r7, lr}
 8014276:	b082      	sub	sp, #8
 8014278:	af00      	add	r7, sp, #0
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = (struct udp_pcb *)memp_malloc(MEMP_UDP_PCB);
 801427a:	2000      	movs	r0, #0
 801427c:	f7f8 f8de 	bl	800c43c <memp_malloc>
 8014280:	6078      	str	r0, [r7, #4]
  /* could allocate UDP PCB? */
  if (pcb != NULL) {
 8014282:	687b      	ldr	r3, [r7, #4]
 8014284:	2b00      	cmp	r3, #0
 8014286:	d007      	beq.n	8014298 <udp_new+0x24>
    /* UDP Lite: by initializing to all zeroes, chksum_len is set to 0
     * which means checksum is generated over the whole datagram per default
     * (recommended as default by RFC 3828). */
    /* initialize PCB to all zeroes */
    memset(pcb, 0, sizeof(struct udp_pcb));
 8014288:	2220      	movs	r2, #32
 801428a:	2100      	movs	r1, #0
 801428c:	6878      	ldr	r0, [r7, #4]
 801428e:	f002 fe4e 	bl	8016f2e <memset>
    pcb->ttl = UDP_TTL;
 8014292:	687b      	ldr	r3, [r7, #4]
 8014294:	22ff      	movs	r2, #255	; 0xff
 8014296:	72da      	strb	r2, [r3, #11]
#if LWIP_MULTICAST_TX_OPTIONS
    udp_set_multicast_ttl(pcb, UDP_TTL);
#endif /* LWIP_MULTICAST_TX_OPTIONS */
  }
  return pcb;
 8014298:	687b      	ldr	r3, [r7, #4]
}
 801429a:	4618      	mov	r0, r3
 801429c:	3708      	adds	r7, #8
 801429e:	46bd      	mov	sp, r7
 80142a0:	bd80      	pop	{r7, pc}

080142a2 <udp_new_ip_type>:
 *
 * @see udp_remove()
 */
struct udp_pcb *
udp_new_ip_type(u8_t type)
{
 80142a2:	b580      	push	{r7, lr}
 80142a4:	b084      	sub	sp, #16
 80142a6:	af00      	add	r7, sp, #0
 80142a8:	4603      	mov	r3, r0
 80142aa:	71fb      	strb	r3, [r7, #7]
  struct udp_pcb *pcb;

  LWIP_ASSERT_CORE_LOCKED();

  pcb = udp_new();
 80142ac:	f7ff ffe2 	bl	8014274 <udp_new>
 80142b0:	60f8      	str	r0, [r7, #12]
    IP_SET_TYPE_VAL(pcb->remote_ip, type);
  }
#else
  LWIP_UNUSED_ARG(type);
#endif /* LWIP_IPV4 && LWIP_IPV6 */
  return pcb;
 80142b2:	68fb      	ldr	r3, [r7, #12]
}
 80142b4:	4618      	mov	r0, r3
 80142b6:	3710      	adds	r7, #16
 80142b8:	46bd      	mov	sp, r7
 80142ba:	bd80      	pop	{r7, pc}

080142bc <udp_netif_ip_addr_changed>:
 *
 * @param old_addr IP address of the netif before change
 * @param new_addr IP address of the netif after change
 */
void udp_netif_ip_addr_changed(const ip_addr_t *old_addr, const ip_addr_t *new_addr)
{
 80142bc:	b480      	push	{r7}
 80142be:	b085      	sub	sp, #20
 80142c0:	af00      	add	r7, sp, #0
 80142c2:	6078      	str	r0, [r7, #4]
 80142c4:	6039      	str	r1, [r7, #0]
  struct udp_pcb *upcb;

  if (!ip_addr_isany(old_addr) && !ip_addr_isany(new_addr)) {
 80142c6:	687b      	ldr	r3, [r7, #4]
 80142c8:	2b00      	cmp	r3, #0
 80142ca:	d01e      	beq.n	801430a <udp_netif_ip_addr_changed+0x4e>
 80142cc:	687b      	ldr	r3, [r7, #4]
 80142ce:	681b      	ldr	r3, [r3, #0]
 80142d0:	2b00      	cmp	r3, #0
 80142d2:	d01a      	beq.n	801430a <udp_netif_ip_addr_changed+0x4e>
 80142d4:	683b      	ldr	r3, [r7, #0]
 80142d6:	2b00      	cmp	r3, #0
 80142d8:	d017      	beq.n	801430a <udp_netif_ip_addr_changed+0x4e>
 80142da:	683b      	ldr	r3, [r7, #0]
 80142dc:	681b      	ldr	r3, [r3, #0]
 80142de:	2b00      	cmp	r3, #0
 80142e0:	d013      	beq.n	801430a <udp_netif_ip_addr_changed+0x4e>
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80142e2:	4b0d      	ldr	r3, [pc, #52]	; (8014318 <udp_netif_ip_addr_changed+0x5c>)
 80142e4:	681b      	ldr	r3, [r3, #0]
 80142e6:	60fb      	str	r3, [r7, #12]
 80142e8:	e00c      	b.n	8014304 <udp_netif_ip_addr_changed+0x48>
      /* PCB bound to current local interface address? */
      if (ip_addr_cmp(&upcb->local_ip, old_addr)) {
 80142ea:	68fb      	ldr	r3, [r7, #12]
 80142ec:	681a      	ldr	r2, [r3, #0]
 80142ee:	687b      	ldr	r3, [r7, #4]
 80142f0:	681b      	ldr	r3, [r3, #0]
 80142f2:	429a      	cmp	r2, r3
 80142f4:	d103      	bne.n	80142fe <udp_netif_ip_addr_changed+0x42>
        /* The PCB is bound to the old ipaddr and
         * is set to bound to the new one instead */
        ip_addr_copy(upcb->local_ip, *new_addr);
 80142f6:	683b      	ldr	r3, [r7, #0]
 80142f8:	681a      	ldr	r2, [r3, #0]
 80142fa:	68fb      	ldr	r3, [r7, #12]
 80142fc:	601a      	str	r2, [r3, #0]
    for (upcb = udp_pcbs; upcb != NULL; upcb = upcb->next) {
 80142fe:	68fb      	ldr	r3, [r7, #12]
 8014300:	68db      	ldr	r3, [r3, #12]
 8014302:	60fb      	str	r3, [r7, #12]
 8014304:	68fb      	ldr	r3, [r7, #12]
 8014306:	2b00      	cmp	r3, #0
 8014308:	d1ef      	bne.n	80142ea <udp_netif_ip_addr_changed+0x2e>
      }
    }
  }
}
 801430a:	bf00      	nop
 801430c:	3714      	adds	r7, #20
 801430e:	46bd      	mov	sp, r7
 8014310:	f85d 7b04 	ldr.w	r7, [sp], #4
 8014314:	4770      	bx	lr
 8014316:	bf00      	nop
 8014318:	2000f850 	.word	0x2000f850

0801431c <etharp_free_entry>:
#endif /* ARP_QUEUEING */

/** Clean up ARP table entries */
static void
etharp_free_entry(int i)
{
 801431c:	b580      	push	{r7, lr}
 801431e:	b082      	sub	sp, #8
 8014320:	af00      	add	r7, sp, #0
 8014322:	6078      	str	r0, [r7, #4]
  /* remove from SNMP ARP index tree */
  mib2_remove_arp_entry(arp_table[i].netif, &arp_table[i].ipaddr);
  /* and empty packet queue */
  if (arp_table[i].q != NULL) {
 8014324:	4915      	ldr	r1, [pc, #84]	; (801437c <etharp_free_entry+0x60>)
 8014326:	687a      	ldr	r2, [r7, #4]
 8014328:	4613      	mov	r3, r2
 801432a:	005b      	lsls	r3, r3, #1
 801432c:	4413      	add	r3, r2
 801432e:	00db      	lsls	r3, r3, #3
 8014330:	440b      	add	r3, r1
 8014332:	681b      	ldr	r3, [r3, #0]
 8014334:	2b00      	cmp	r3, #0
 8014336:	d013      	beq.n	8014360 <etharp_free_entry+0x44>
    /* remove all queued packets */
    LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_free_entry: freeing entry %"U16_F", packet queue %p.\n", (u16_t)i, (void *)(arp_table[i].q)));
    free_etharp_q(arp_table[i].q);
 8014338:	4910      	ldr	r1, [pc, #64]	; (801437c <etharp_free_entry+0x60>)
 801433a:	687a      	ldr	r2, [r7, #4]
 801433c:	4613      	mov	r3, r2
 801433e:	005b      	lsls	r3, r3, #1
 8014340:	4413      	add	r3, r2
 8014342:	00db      	lsls	r3, r3, #3
 8014344:	440b      	add	r3, r1
 8014346:	681b      	ldr	r3, [r3, #0]
 8014348:	4618      	mov	r0, r3
 801434a:	f7f8 ff91 	bl	800d270 <pbuf_free>
    arp_table[i].q = NULL;
 801434e:	490b      	ldr	r1, [pc, #44]	; (801437c <etharp_free_entry+0x60>)
 8014350:	687a      	ldr	r2, [r7, #4]
 8014352:	4613      	mov	r3, r2
 8014354:	005b      	lsls	r3, r3, #1
 8014356:	4413      	add	r3, r2
 8014358:	00db      	lsls	r3, r3, #3
 801435a:	440b      	add	r3, r1
 801435c:	2200      	movs	r2, #0
 801435e:	601a      	str	r2, [r3, #0]
  }
  /* recycle entry for re-use */
  arp_table[i].state = ETHARP_STATE_EMPTY;
 8014360:	4906      	ldr	r1, [pc, #24]	; (801437c <etharp_free_entry+0x60>)
 8014362:	687a      	ldr	r2, [r7, #4]
 8014364:	4613      	mov	r3, r2
 8014366:	005b      	lsls	r3, r3, #1
 8014368:	4413      	add	r3, r2
 801436a:	00db      	lsls	r3, r3, #3
 801436c:	440b      	add	r3, r1
 801436e:	3314      	adds	r3, #20
 8014370:	2200      	movs	r2, #0
 8014372:	701a      	strb	r2, [r3, #0]
  arp_table[i].ctime = 0;
  arp_table[i].netif = NULL;
  ip4_addr_set_zero(&arp_table[i].ipaddr);
  arp_table[i].ethaddr = ethzero;
#endif /* LWIP_DEBUG */
}
 8014374:	bf00      	nop
 8014376:	3708      	adds	r7, #8
 8014378:	46bd      	mov	sp, r7
 801437a:	bd80      	pop	{r7, pc}
 801437c:	2000f854 	.word	0x2000f854

08014380 <etharp_tmr>:
 * This function should be called every ARP_TMR_INTERVAL milliseconds (1 second),
 * in order to expire entries in the ARP table.
 */
void
etharp_tmr(void)
{
 8014380:	b580      	push	{r7, lr}
 8014382:	b082      	sub	sp, #8
 8014384:	af00      	add	r7, sp, #0
  int i;

  LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer\n"));
  /* remove expired entries from the ARP table */
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014386:	2300      	movs	r3, #0
 8014388:	607b      	str	r3, [r7, #4]
 801438a:	e096      	b.n	80144ba <etharp_tmr+0x13a>
    u8_t state = arp_table[i].state;
 801438c:	494f      	ldr	r1, [pc, #316]	; (80144cc <etharp_tmr+0x14c>)
 801438e:	687a      	ldr	r2, [r7, #4]
 8014390:	4613      	mov	r3, r2
 8014392:	005b      	lsls	r3, r3, #1
 8014394:	4413      	add	r3, r2
 8014396:	00db      	lsls	r3, r3, #3
 8014398:	440b      	add	r3, r1
 801439a:	3314      	adds	r3, #20
 801439c:	781b      	ldrb	r3, [r3, #0]
 801439e:	70fb      	strb	r3, [r7, #3]
    if (state != ETHARP_STATE_EMPTY
 80143a0:	78fb      	ldrb	r3, [r7, #3]
 80143a2:	2b00      	cmp	r3, #0
 80143a4:	f000 8086 	beq.w	80144b4 <etharp_tmr+0x134>
#if ETHARP_SUPPORT_STATIC_ENTRIES
        && (state != ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
       ) {
      arp_table[i].ctime++;
 80143a8:	4948      	ldr	r1, [pc, #288]	; (80144cc <etharp_tmr+0x14c>)
 80143aa:	687a      	ldr	r2, [r7, #4]
 80143ac:	4613      	mov	r3, r2
 80143ae:	005b      	lsls	r3, r3, #1
 80143b0:	4413      	add	r3, r2
 80143b2:	00db      	lsls	r3, r3, #3
 80143b4:	440b      	add	r3, r1
 80143b6:	3312      	adds	r3, #18
 80143b8:	881b      	ldrh	r3, [r3, #0]
 80143ba:	3301      	adds	r3, #1
 80143bc:	b298      	uxth	r0, r3
 80143be:	4943      	ldr	r1, [pc, #268]	; (80144cc <etharp_tmr+0x14c>)
 80143c0:	687a      	ldr	r2, [r7, #4]
 80143c2:	4613      	mov	r3, r2
 80143c4:	005b      	lsls	r3, r3, #1
 80143c6:	4413      	add	r3, r2
 80143c8:	00db      	lsls	r3, r3, #3
 80143ca:	440b      	add	r3, r1
 80143cc:	3312      	adds	r3, #18
 80143ce:	4602      	mov	r2, r0
 80143d0:	801a      	strh	r2, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80143d2:	493e      	ldr	r1, [pc, #248]	; (80144cc <etharp_tmr+0x14c>)
 80143d4:	687a      	ldr	r2, [r7, #4]
 80143d6:	4613      	mov	r3, r2
 80143d8:	005b      	lsls	r3, r3, #1
 80143da:	4413      	add	r3, r2
 80143dc:	00db      	lsls	r3, r3, #3
 80143de:	440b      	add	r3, r1
 80143e0:	3312      	adds	r3, #18
 80143e2:	881b      	ldrh	r3, [r3, #0]
 80143e4:	f5b3 7f96 	cmp.w	r3, #300	; 0x12c
 80143e8:	d215      	bcs.n	8014416 <etharp_tmr+0x96>
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 80143ea:	4938      	ldr	r1, [pc, #224]	; (80144cc <etharp_tmr+0x14c>)
 80143ec:	687a      	ldr	r2, [r7, #4]
 80143ee:	4613      	mov	r3, r2
 80143f0:	005b      	lsls	r3, r3, #1
 80143f2:	4413      	add	r3, r2
 80143f4:	00db      	lsls	r3, r3, #3
 80143f6:	440b      	add	r3, r1
 80143f8:	3314      	adds	r3, #20
 80143fa:	781b      	ldrb	r3, [r3, #0]
      if ((arp_table[i].ctime >= ARP_MAXAGE) ||
 80143fc:	2b01      	cmp	r3, #1
 80143fe:	d10e      	bne.n	801441e <etharp_tmr+0x9e>
           (arp_table[i].ctime >= ARP_MAXPENDING))) {
 8014400:	4932      	ldr	r1, [pc, #200]	; (80144cc <etharp_tmr+0x14c>)
 8014402:	687a      	ldr	r2, [r7, #4]
 8014404:	4613      	mov	r3, r2
 8014406:	005b      	lsls	r3, r3, #1
 8014408:	4413      	add	r3, r2
 801440a:	00db      	lsls	r3, r3, #3
 801440c:	440b      	add	r3, r1
 801440e:	3312      	adds	r3, #18
 8014410:	881b      	ldrh	r3, [r3, #0]
          ((arp_table[i].state == ETHARP_STATE_PENDING)  &&
 8014412:	2b04      	cmp	r3, #4
 8014414:	d903      	bls.n	801441e <etharp_tmr+0x9e>
        /* pending or stable entry has become old! */
        LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_timer: expired %s entry %d.\n",
                                   arp_table[i].state >= ETHARP_STATE_STABLE ? "stable" : "pending", i));
        /* clean up entries that have just been expired */
        etharp_free_entry(i);
 8014416:	6878      	ldr	r0, [r7, #4]
 8014418:	f7ff ff80 	bl	801431c <etharp_free_entry>
 801441c:	e04a      	b.n	80144b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_1) {
 801441e:	492b      	ldr	r1, [pc, #172]	; (80144cc <etharp_tmr+0x14c>)
 8014420:	687a      	ldr	r2, [r7, #4]
 8014422:	4613      	mov	r3, r2
 8014424:	005b      	lsls	r3, r3, #1
 8014426:	4413      	add	r3, r2
 8014428:	00db      	lsls	r3, r3, #3
 801442a:	440b      	add	r3, r1
 801442c:	3314      	adds	r3, #20
 801442e:	781b      	ldrb	r3, [r3, #0]
 8014430:	2b03      	cmp	r3, #3
 8014432:	d10a      	bne.n	801444a <etharp_tmr+0xca>
        /* Don't send more than one request every 2 seconds. */
        arp_table[i].state = ETHARP_STATE_STABLE_REREQUESTING_2;
 8014434:	4925      	ldr	r1, [pc, #148]	; (80144cc <etharp_tmr+0x14c>)
 8014436:	687a      	ldr	r2, [r7, #4]
 8014438:	4613      	mov	r3, r2
 801443a:	005b      	lsls	r3, r3, #1
 801443c:	4413      	add	r3, r2
 801443e:	00db      	lsls	r3, r3, #3
 8014440:	440b      	add	r3, r1
 8014442:	3314      	adds	r3, #20
 8014444:	2204      	movs	r2, #4
 8014446:	701a      	strb	r2, [r3, #0]
 8014448:	e034      	b.n	80144b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_STABLE_REREQUESTING_2) {
 801444a:	4920      	ldr	r1, [pc, #128]	; (80144cc <etharp_tmr+0x14c>)
 801444c:	687a      	ldr	r2, [r7, #4]
 801444e:	4613      	mov	r3, r2
 8014450:	005b      	lsls	r3, r3, #1
 8014452:	4413      	add	r3, r2
 8014454:	00db      	lsls	r3, r3, #3
 8014456:	440b      	add	r3, r1
 8014458:	3314      	adds	r3, #20
 801445a:	781b      	ldrb	r3, [r3, #0]
 801445c:	2b04      	cmp	r3, #4
 801445e:	d10a      	bne.n	8014476 <etharp_tmr+0xf6>
        /* Reset state to stable, so that the next transmitted packet will
           re-send an ARP request. */
        arp_table[i].state = ETHARP_STATE_STABLE;
 8014460:	491a      	ldr	r1, [pc, #104]	; (80144cc <etharp_tmr+0x14c>)
 8014462:	687a      	ldr	r2, [r7, #4]
 8014464:	4613      	mov	r3, r2
 8014466:	005b      	lsls	r3, r3, #1
 8014468:	4413      	add	r3, r2
 801446a:	00db      	lsls	r3, r3, #3
 801446c:	440b      	add	r3, r1
 801446e:	3314      	adds	r3, #20
 8014470:	2202      	movs	r2, #2
 8014472:	701a      	strb	r2, [r3, #0]
 8014474:	e01e      	b.n	80144b4 <etharp_tmr+0x134>
      } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014476:	4915      	ldr	r1, [pc, #84]	; (80144cc <etharp_tmr+0x14c>)
 8014478:	687a      	ldr	r2, [r7, #4]
 801447a:	4613      	mov	r3, r2
 801447c:	005b      	lsls	r3, r3, #1
 801447e:	4413      	add	r3, r2
 8014480:	00db      	lsls	r3, r3, #3
 8014482:	440b      	add	r3, r1
 8014484:	3314      	adds	r3, #20
 8014486:	781b      	ldrb	r3, [r3, #0]
 8014488:	2b01      	cmp	r3, #1
 801448a:	d113      	bne.n	80144b4 <etharp_tmr+0x134>
        /* still pending, resend an ARP query */
        etharp_request(arp_table[i].netif, &arp_table[i].ipaddr);
 801448c:	490f      	ldr	r1, [pc, #60]	; (80144cc <etharp_tmr+0x14c>)
 801448e:	687a      	ldr	r2, [r7, #4]
 8014490:	4613      	mov	r3, r2
 8014492:	005b      	lsls	r3, r3, #1
 8014494:	4413      	add	r3, r2
 8014496:	00db      	lsls	r3, r3, #3
 8014498:	440b      	add	r3, r1
 801449a:	3308      	adds	r3, #8
 801449c:	6818      	ldr	r0, [r3, #0]
 801449e:	687a      	ldr	r2, [r7, #4]
 80144a0:	4613      	mov	r3, r2
 80144a2:	005b      	lsls	r3, r3, #1
 80144a4:	4413      	add	r3, r2
 80144a6:	00db      	lsls	r3, r3, #3
 80144a8:	4a08      	ldr	r2, [pc, #32]	; (80144cc <etharp_tmr+0x14c>)
 80144aa:	4413      	add	r3, r2
 80144ac:	3304      	adds	r3, #4
 80144ae:	4619      	mov	r1, r3
 80144b0:	f000 fe6e 	bl	8015190 <etharp_request>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144b4:	687b      	ldr	r3, [r7, #4]
 80144b6:	3301      	adds	r3, #1
 80144b8:	607b      	str	r3, [r7, #4]
 80144ba:	687b      	ldr	r3, [r7, #4]
 80144bc:	2b09      	cmp	r3, #9
 80144be:	f77f af65 	ble.w	801438c <etharp_tmr+0xc>
      }
    }
  }
}
 80144c2:	bf00      	nop
 80144c4:	bf00      	nop
 80144c6:	3708      	adds	r7, #8
 80144c8:	46bd      	mov	sp, r7
 80144ca:	bd80      	pop	{r7, pc}
 80144cc:	2000f854 	.word	0x2000f854

080144d0 <etharp_find_entry>:
 * @return The ARP entry index that matched or is created, ERR_MEM if no
 * entry is found or could be recycled.
 */
static s16_t
etharp_find_entry(const ip4_addr_t *ipaddr, u8_t flags, struct netif *netif)
{
 80144d0:	b580      	push	{r7, lr}
 80144d2:	b08a      	sub	sp, #40	; 0x28
 80144d4:	af00      	add	r7, sp, #0
 80144d6:	60f8      	str	r0, [r7, #12]
 80144d8:	460b      	mov	r3, r1
 80144da:	607a      	str	r2, [r7, #4]
 80144dc:	72fb      	strb	r3, [r7, #11]
  s16_t old_pending = ARP_TABLE_SIZE, old_stable = ARP_TABLE_SIZE;
 80144de:	230a      	movs	r3, #10
 80144e0:	84fb      	strh	r3, [r7, #38]	; 0x26
 80144e2:	230a      	movs	r3, #10
 80144e4:	84bb      	strh	r3, [r7, #36]	; 0x24
  s16_t empty = ARP_TABLE_SIZE;
 80144e6:	230a      	movs	r3, #10
 80144e8:	847b      	strh	r3, [r7, #34]	; 0x22
  s16_t i = 0;
 80144ea:	2300      	movs	r3, #0
 80144ec:	843b      	strh	r3, [r7, #32]
  /* oldest entry with packets on queue */
  s16_t old_queue = ARP_TABLE_SIZE;
 80144ee:	230a      	movs	r3, #10
 80144f0:	83fb      	strh	r3, [r7, #30]
  /* its age */
  u16_t age_queue = 0, age_pending = 0, age_stable = 0;
 80144f2:	2300      	movs	r3, #0
 80144f4:	83bb      	strh	r3, [r7, #28]
 80144f6:	2300      	movs	r3, #0
 80144f8:	837b      	strh	r3, [r7, #26]
 80144fa:	2300      	movs	r3, #0
 80144fc:	833b      	strh	r3, [r7, #24]
   * 4) remember the oldest pending entry with queued packets (if any)
   * 5) search for a matching IP entry, either pending or stable
   *    until 5 matches, or all entries are searched for.
   */

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 80144fe:	2300      	movs	r3, #0
 8014500:	843b      	strh	r3, [r7, #32]
 8014502:	e0ae      	b.n	8014662 <etharp_find_entry+0x192>
    u8_t state = arp_table[i].state;
 8014504:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014508:	49a6      	ldr	r1, [pc, #664]	; (80147a4 <etharp_find_entry+0x2d4>)
 801450a:	4613      	mov	r3, r2
 801450c:	005b      	lsls	r3, r3, #1
 801450e:	4413      	add	r3, r2
 8014510:	00db      	lsls	r3, r3, #3
 8014512:	440b      	add	r3, r1
 8014514:	3314      	adds	r3, #20
 8014516:	781b      	ldrb	r3, [r3, #0]
 8014518:	75fb      	strb	r3, [r7, #23]
    /* no empty entry found yet and now we do find one? */
    if ((empty == ARP_TABLE_SIZE) && (state == ETHARP_STATE_EMPTY)) {
 801451a:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801451e:	2b0a      	cmp	r3, #10
 8014520:	d105      	bne.n	801452e <etharp_find_entry+0x5e>
 8014522:	7dfb      	ldrb	r3, [r7, #23]
 8014524:	2b00      	cmp	r3, #0
 8014526:	d102      	bne.n	801452e <etharp_find_entry+0x5e>
      LWIP_DEBUGF(ETHARP_DEBUG, ("etharp_find_entry: found empty entry %d\n", (int)i));
      /* remember first empty entry */
      empty = i;
 8014528:	8c3b      	ldrh	r3, [r7, #32]
 801452a:	847b      	strh	r3, [r7, #34]	; 0x22
 801452c:	e095      	b.n	801465a <etharp_find_entry+0x18a>
    } else if (state != ETHARP_STATE_EMPTY) {
 801452e:	7dfb      	ldrb	r3, [r7, #23]
 8014530:	2b00      	cmp	r3, #0
 8014532:	f000 8092 	beq.w	801465a <etharp_find_entry+0x18a>
      LWIP_ASSERT("state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE",
 8014536:	7dfb      	ldrb	r3, [r7, #23]
 8014538:	2b01      	cmp	r3, #1
 801453a:	d009      	beq.n	8014550 <etharp_find_entry+0x80>
 801453c:	7dfb      	ldrb	r3, [r7, #23]
 801453e:	2b01      	cmp	r3, #1
 8014540:	d806      	bhi.n	8014550 <etharp_find_entry+0x80>
 8014542:	4b99      	ldr	r3, [pc, #612]	; (80147a8 <etharp_find_entry+0x2d8>)
 8014544:	f240 1223 	movw	r2, #291	; 0x123
 8014548:	4998      	ldr	r1, [pc, #608]	; (80147ac <etharp_find_entry+0x2dc>)
 801454a:	4899      	ldr	r0, [pc, #612]	; (80147b0 <etharp_find_entry+0x2e0>)
 801454c:	f002 fc50 	bl	8016df0 <iprintf>
                  state == ETHARP_STATE_PENDING || state >= ETHARP_STATE_STABLE);
      /* if given, does IP address match IP address in ARP entry? */
      if (ipaddr && ip4_addr_cmp(ipaddr, &arp_table[i].ipaddr)
 8014550:	68fb      	ldr	r3, [r7, #12]
 8014552:	2b00      	cmp	r3, #0
 8014554:	d020      	beq.n	8014598 <etharp_find_entry+0xc8>
 8014556:	68fb      	ldr	r3, [r7, #12]
 8014558:	6819      	ldr	r1, [r3, #0]
 801455a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801455e:	4891      	ldr	r0, [pc, #580]	; (80147a4 <etharp_find_entry+0x2d4>)
 8014560:	4613      	mov	r3, r2
 8014562:	005b      	lsls	r3, r3, #1
 8014564:	4413      	add	r3, r2
 8014566:	00db      	lsls	r3, r3, #3
 8014568:	4403      	add	r3, r0
 801456a:	3304      	adds	r3, #4
 801456c:	681b      	ldr	r3, [r3, #0]
 801456e:	4299      	cmp	r1, r3
 8014570:	d112      	bne.n	8014598 <etharp_find_entry+0xc8>
#if ETHARP_TABLE_MATCH_NETIF
          && ((netif == NULL) || (netif == arp_table[i].netif))
 8014572:	687b      	ldr	r3, [r7, #4]
 8014574:	2b00      	cmp	r3, #0
 8014576:	d00c      	beq.n	8014592 <etharp_find_entry+0xc2>
 8014578:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801457c:	4989      	ldr	r1, [pc, #548]	; (80147a4 <etharp_find_entry+0x2d4>)
 801457e:	4613      	mov	r3, r2
 8014580:	005b      	lsls	r3, r3, #1
 8014582:	4413      	add	r3, r2
 8014584:	00db      	lsls	r3, r3, #3
 8014586:	440b      	add	r3, r1
 8014588:	3308      	adds	r3, #8
 801458a:	681b      	ldr	r3, [r3, #0]
 801458c:	687a      	ldr	r2, [r7, #4]
 801458e:	429a      	cmp	r2, r3
 8014590:	d102      	bne.n	8014598 <etharp_find_entry+0xc8>
#endif /* ETHARP_TABLE_MATCH_NETIF */
         ) {
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: found matching entry %d\n", (int)i));
        /* found exact IP address match, simply bail out */
        return i;
 8014592:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014596:	e100      	b.n	801479a <etharp_find_entry+0x2ca>
      }
      /* pending entry? */
      if (state == ETHARP_STATE_PENDING) {
 8014598:	7dfb      	ldrb	r3, [r7, #23]
 801459a:	2b01      	cmp	r3, #1
 801459c:	d140      	bne.n	8014620 <etharp_find_entry+0x150>
        /* pending with queued packets? */
        if (arp_table[i].q != NULL) {
 801459e:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145a2:	4980      	ldr	r1, [pc, #512]	; (80147a4 <etharp_find_entry+0x2d4>)
 80145a4:	4613      	mov	r3, r2
 80145a6:	005b      	lsls	r3, r3, #1
 80145a8:	4413      	add	r3, r2
 80145aa:	00db      	lsls	r3, r3, #3
 80145ac:	440b      	add	r3, r1
 80145ae:	681b      	ldr	r3, [r3, #0]
 80145b0:	2b00      	cmp	r3, #0
 80145b2:	d01a      	beq.n	80145ea <etharp_find_entry+0x11a>
          if (arp_table[i].ctime >= age_queue) {
 80145b4:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145b8:	497a      	ldr	r1, [pc, #488]	; (80147a4 <etharp_find_entry+0x2d4>)
 80145ba:	4613      	mov	r3, r2
 80145bc:	005b      	lsls	r3, r3, #1
 80145be:	4413      	add	r3, r2
 80145c0:	00db      	lsls	r3, r3, #3
 80145c2:	440b      	add	r3, r1
 80145c4:	3312      	adds	r3, #18
 80145c6:	881b      	ldrh	r3, [r3, #0]
 80145c8:	8bba      	ldrh	r2, [r7, #28]
 80145ca:	429a      	cmp	r2, r3
 80145cc:	d845      	bhi.n	801465a <etharp_find_entry+0x18a>
            old_queue = i;
 80145ce:	8c3b      	ldrh	r3, [r7, #32]
 80145d0:	83fb      	strh	r3, [r7, #30]
            age_queue = arp_table[i].ctime;
 80145d2:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145d6:	4973      	ldr	r1, [pc, #460]	; (80147a4 <etharp_find_entry+0x2d4>)
 80145d8:	4613      	mov	r3, r2
 80145da:	005b      	lsls	r3, r3, #1
 80145dc:	4413      	add	r3, r2
 80145de:	00db      	lsls	r3, r3, #3
 80145e0:	440b      	add	r3, r1
 80145e2:	3312      	adds	r3, #18
 80145e4:	881b      	ldrh	r3, [r3, #0]
 80145e6:	83bb      	strh	r3, [r7, #28]
 80145e8:	e037      	b.n	801465a <etharp_find_entry+0x18a>
          }
        } else
          /* pending without queued packets? */
        {
          if (arp_table[i].ctime >= age_pending) {
 80145ea:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80145ee:	496d      	ldr	r1, [pc, #436]	; (80147a4 <etharp_find_entry+0x2d4>)
 80145f0:	4613      	mov	r3, r2
 80145f2:	005b      	lsls	r3, r3, #1
 80145f4:	4413      	add	r3, r2
 80145f6:	00db      	lsls	r3, r3, #3
 80145f8:	440b      	add	r3, r1
 80145fa:	3312      	adds	r3, #18
 80145fc:	881b      	ldrh	r3, [r3, #0]
 80145fe:	8b7a      	ldrh	r2, [r7, #26]
 8014600:	429a      	cmp	r2, r3
 8014602:	d82a      	bhi.n	801465a <etharp_find_entry+0x18a>
            old_pending = i;
 8014604:	8c3b      	ldrh	r3, [r7, #32]
 8014606:	84fb      	strh	r3, [r7, #38]	; 0x26
            age_pending = arp_table[i].ctime;
 8014608:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801460c:	4965      	ldr	r1, [pc, #404]	; (80147a4 <etharp_find_entry+0x2d4>)
 801460e:	4613      	mov	r3, r2
 8014610:	005b      	lsls	r3, r3, #1
 8014612:	4413      	add	r3, r2
 8014614:	00db      	lsls	r3, r3, #3
 8014616:	440b      	add	r3, r1
 8014618:	3312      	adds	r3, #18
 801461a:	881b      	ldrh	r3, [r3, #0]
 801461c:	837b      	strh	r3, [r7, #26]
 801461e:	e01c      	b.n	801465a <etharp_find_entry+0x18a>
          }
        }
        /* stable entry? */
      } else if (state >= ETHARP_STATE_STABLE) {
 8014620:	7dfb      	ldrb	r3, [r7, #23]
 8014622:	2b01      	cmp	r3, #1
 8014624:	d919      	bls.n	801465a <etharp_find_entry+0x18a>
        /* don't record old_stable for static entries since they never expire */
        if (state < ETHARP_STATE_STATIC)
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
        {
          /* remember entry with oldest stable entry in oldest, its age in maxtime */
          if (arp_table[i].ctime >= age_stable) {
 8014626:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801462a:	495e      	ldr	r1, [pc, #376]	; (80147a4 <etharp_find_entry+0x2d4>)
 801462c:	4613      	mov	r3, r2
 801462e:	005b      	lsls	r3, r3, #1
 8014630:	4413      	add	r3, r2
 8014632:	00db      	lsls	r3, r3, #3
 8014634:	440b      	add	r3, r1
 8014636:	3312      	adds	r3, #18
 8014638:	881b      	ldrh	r3, [r3, #0]
 801463a:	8b3a      	ldrh	r2, [r7, #24]
 801463c:	429a      	cmp	r2, r3
 801463e:	d80c      	bhi.n	801465a <etharp_find_entry+0x18a>
            old_stable = i;
 8014640:	8c3b      	ldrh	r3, [r7, #32]
 8014642:	84bb      	strh	r3, [r7, #36]	; 0x24
            age_stable = arp_table[i].ctime;
 8014644:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014648:	4956      	ldr	r1, [pc, #344]	; (80147a4 <etharp_find_entry+0x2d4>)
 801464a:	4613      	mov	r3, r2
 801464c:	005b      	lsls	r3, r3, #1
 801464e:	4413      	add	r3, r2
 8014650:	00db      	lsls	r3, r3, #3
 8014652:	440b      	add	r3, r1
 8014654:	3312      	adds	r3, #18
 8014656:	881b      	ldrh	r3, [r3, #0]
 8014658:	833b      	strh	r3, [r7, #24]
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 801465a:	8c3b      	ldrh	r3, [r7, #32]
 801465c:	3301      	adds	r3, #1
 801465e:	b29b      	uxth	r3, r3
 8014660:	843b      	strh	r3, [r7, #32]
 8014662:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014666:	2b09      	cmp	r3, #9
 8014668:	f77f af4c 	ble.w	8014504 <etharp_find_entry+0x34>
    }
  }
  /* { we have no match } => try to create a new entry */

  /* don't create new entry, only search? */
  if (((flags & ETHARP_FLAG_FIND_ONLY) != 0) ||
 801466c:	7afb      	ldrb	r3, [r7, #11]
 801466e:	f003 0302 	and.w	r3, r3, #2
 8014672:	2b00      	cmp	r3, #0
 8014674:	d108      	bne.n	8014688 <etharp_find_entry+0x1b8>
 8014676:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 801467a:	2b0a      	cmp	r3, #10
 801467c:	d107      	bne.n	801468e <etharp_find_entry+0x1be>
      /* or no empty entry found and not allowed to recycle? */
      ((empty == ARP_TABLE_SIZE) && ((flags & ETHARP_FLAG_TRY_HARD) == 0))) {
 801467e:	7afb      	ldrb	r3, [r7, #11]
 8014680:	f003 0301 	and.w	r3, r3, #1
 8014684:	2b00      	cmp	r3, #0
 8014686:	d102      	bne.n	801468e <etharp_find_entry+0x1be>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty entry found and not allowed to recycle\n"));
    return (s16_t)ERR_MEM;
 8014688:	f04f 33ff 	mov.w	r3, #4294967295
 801468c:	e085      	b.n	801479a <etharp_find_entry+0x2ca>
   *
   * { ETHARP_FLAG_TRY_HARD is set at this point }
   */

  /* 1) empty entry available? */
  if (empty < ARP_TABLE_SIZE) {
 801468e:	f9b7 3022 	ldrsh.w	r3, [r7, #34]	; 0x22
 8014692:	2b09      	cmp	r3, #9
 8014694:	dc02      	bgt.n	801469c <etharp_find_entry+0x1cc>
    i = empty;
 8014696:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8014698:	843b      	strh	r3, [r7, #32]
 801469a:	e039      	b.n	8014710 <etharp_find_entry+0x240>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting empty entry %d\n", (int)i));
  } else {
    /* 2) found recyclable stable entry? */
    if (old_stable < ARP_TABLE_SIZE) {
 801469c:	f9b7 3024 	ldrsh.w	r3, [r7, #36]	; 0x24
 80146a0:	2b09      	cmp	r3, #9
 80146a2:	dc14      	bgt.n	80146ce <etharp_find_entry+0x1fe>
      /* recycle oldest stable*/
      i = old_stable;
 80146a4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80146a6:	843b      	strh	r3, [r7, #32]
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest stable entry %d\n", (int)i));
      /* no queued packets should exist on stable entries */
      LWIP_ASSERT("arp_table[i].q == NULL", arp_table[i].q == NULL);
 80146a8:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 80146ac:	493d      	ldr	r1, [pc, #244]	; (80147a4 <etharp_find_entry+0x2d4>)
 80146ae:	4613      	mov	r3, r2
 80146b0:	005b      	lsls	r3, r3, #1
 80146b2:	4413      	add	r3, r2
 80146b4:	00db      	lsls	r3, r3, #3
 80146b6:	440b      	add	r3, r1
 80146b8:	681b      	ldr	r3, [r3, #0]
 80146ba:	2b00      	cmp	r3, #0
 80146bc:	d018      	beq.n	80146f0 <etharp_find_entry+0x220>
 80146be:	4b3a      	ldr	r3, [pc, #232]	; (80147a8 <etharp_find_entry+0x2d8>)
 80146c0:	f240 126d 	movw	r2, #365	; 0x16d
 80146c4:	493b      	ldr	r1, [pc, #236]	; (80147b4 <etharp_find_entry+0x2e4>)
 80146c6:	483a      	ldr	r0, [pc, #232]	; (80147b0 <etharp_find_entry+0x2e0>)
 80146c8:	f002 fb92 	bl	8016df0 <iprintf>
 80146cc:	e010      	b.n	80146f0 <etharp_find_entry+0x220>
      /* 3) found recyclable pending entry without queued packets? */
    } else if (old_pending < ARP_TABLE_SIZE) {
 80146ce:	f9b7 3026 	ldrsh.w	r3, [r7, #38]	; 0x26
 80146d2:	2b09      	cmp	r3, #9
 80146d4:	dc02      	bgt.n	80146dc <etharp_find_entry+0x20c>
      /* recycle oldest pending */
      i = old_pending;
 80146d6:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80146d8:	843b      	strh	r3, [r7, #32]
 80146da:	e009      	b.n	80146f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d (without queue)\n", (int)i));
      /* 4) found recyclable pending entry with queued packets? */
    } else if (old_queue < ARP_TABLE_SIZE) {
 80146dc:	f9b7 301e 	ldrsh.w	r3, [r7, #30]
 80146e0:	2b09      	cmp	r3, #9
 80146e2:	dc02      	bgt.n	80146ea <etharp_find_entry+0x21a>
      /* recycle oldest pending (queued packets are free in etharp_free_entry) */
      i = old_queue;
 80146e4:	8bfb      	ldrh	r3, [r7, #30]
 80146e6:	843b      	strh	r3, [r7, #32]
 80146e8:	e002      	b.n	80146f0 <etharp_find_entry+0x220>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: selecting oldest pending entry %d, freeing packet queue %p\n", (int)i, (void *)(arp_table[i].q)));
      /* no empty or recyclable entries found */
    } else {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_find_entry: no empty or recyclable entries found\n"));
      return (s16_t)ERR_MEM;
 80146ea:	f04f 33ff 	mov.w	r3, #4294967295
 80146ee:	e054      	b.n	801479a <etharp_find_entry+0x2ca>
    }

    /* { empty or recyclable entry found } */
    LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 80146f0:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 80146f4:	2b09      	cmp	r3, #9
 80146f6:	dd06      	ble.n	8014706 <etharp_find_entry+0x236>
 80146f8:	4b2b      	ldr	r3, [pc, #172]	; (80147a8 <etharp_find_entry+0x2d8>)
 80146fa:	f240 127f 	movw	r2, #383	; 0x17f
 80146fe:	492e      	ldr	r1, [pc, #184]	; (80147b8 <etharp_find_entry+0x2e8>)
 8014700:	482b      	ldr	r0, [pc, #172]	; (80147b0 <etharp_find_entry+0x2e0>)
 8014702:	f002 fb75 	bl	8016df0 <iprintf>
    etharp_free_entry(i);
 8014706:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 801470a:	4618      	mov	r0, r3
 801470c:	f7ff fe06 	bl	801431c <etharp_free_entry>
  }

  LWIP_ASSERT("i < ARP_TABLE_SIZE", i < ARP_TABLE_SIZE);
 8014710:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
 8014714:	2b09      	cmp	r3, #9
 8014716:	dd06      	ble.n	8014726 <etharp_find_entry+0x256>
 8014718:	4b23      	ldr	r3, [pc, #140]	; (80147a8 <etharp_find_entry+0x2d8>)
 801471a:	f240 1283 	movw	r2, #387	; 0x183
 801471e:	4926      	ldr	r1, [pc, #152]	; (80147b8 <etharp_find_entry+0x2e8>)
 8014720:	4823      	ldr	r0, [pc, #140]	; (80147b0 <etharp_find_entry+0x2e0>)
 8014722:	f002 fb65 	bl	8016df0 <iprintf>
  LWIP_ASSERT("arp_table[i].state == ETHARP_STATE_EMPTY",
 8014726:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801472a:	491e      	ldr	r1, [pc, #120]	; (80147a4 <etharp_find_entry+0x2d4>)
 801472c:	4613      	mov	r3, r2
 801472e:	005b      	lsls	r3, r3, #1
 8014730:	4413      	add	r3, r2
 8014732:	00db      	lsls	r3, r3, #3
 8014734:	440b      	add	r3, r1
 8014736:	3314      	adds	r3, #20
 8014738:	781b      	ldrb	r3, [r3, #0]
 801473a:	2b00      	cmp	r3, #0
 801473c:	d006      	beq.n	801474c <etharp_find_entry+0x27c>
 801473e:	4b1a      	ldr	r3, [pc, #104]	; (80147a8 <etharp_find_entry+0x2d8>)
 8014740:	f44f 72c2 	mov.w	r2, #388	; 0x184
 8014744:	491d      	ldr	r1, [pc, #116]	; (80147bc <etharp_find_entry+0x2ec>)
 8014746:	481a      	ldr	r0, [pc, #104]	; (80147b0 <etharp_find_entry+0x2e0>)
 8014748:	f002 fb52 	bl	8016df0 <iprintf>
              arp_table[i].state == ETHARP_STATE_EMPTY);

  /* IP address given? */
  if (ipaddr != NULL) {
 801474c:	68fb      	ldr	r3, [r7, #12]
 801474e:	2b00      	cmp	r3, #0
 8014750:	d00b      	beq.n	801476a <etharp_find_entry+0x29a>
    /* set IP address */
    ip4_addr_copy(arp_table[i].ipaddr, *ipaddr);
 8014752:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014756:	68fb      	ldr	r3, [r7, #12]
 8014758:	6819      	ldr	r1, [r3, #0]
 801475a:	4812      	ldr	r0, [pc, #72]	; (80147a4 <etharp_find_entry+0x2d4>)
 801475c:	4613      	mov	r3, r2
 801475e:	005b      	lsls	r3, r3, #1
 8014760:	4413      	add	r3, r2
 8014762:	00db      	lsls	r3, r3, #3
 8014764:	4403      	add	r3, r0
 8014766:	3304      	adds	r3, #4
 8014768:	6019      	str	r1, [r3, #0]
  }
  arp_table[i].ctime = 0;
 801476a:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 801476e:	490d      	ldr	r1, [pc, #52]	; (80147a4 <etharp_find_entry+0x2d4>)
 8014770:	4613      	mov	r3, r2
 8014772:	005b      	lsls	r3, r3, #1
 8014774:	4413      	add	r3, r2
 8014776:	00db      	lsls	r3, r3, #3
 8014778:	440b      	add	r3, r1
 801477a:	3312      	adds	r3, #18
 801477c:	2200      	movs	r2, #0
 801477e:	801a      	strh	r2, [r3, #0]
#if ETHARP_TABLE_MATCH_NETIF
  arp_table[i].netif = netif;
 8014780:	f9b7 2020 	ldrsh.w	r2, [r7, #32]
 8014784:	4907      	ldr	r1, [pc, #28]	; (80147a4 <etharp_find_entry+0x2d4>)
 8014786:	4613      	mov	r3, r2
 8014788:	005b      	lsls	r3, r3, #1
 801478a:	4413      	add	r3, r2
 801478c:	00db      	lsls	r3, r3, #3
 801478e:	440b      	add	r3, r1
 8014790:	3308      	adds	r3, #8
 8014792:	687a      	ldr	r2, [r7, #4]
 8014794:	601a      	str	r2, [r3, #0]
#endif /* ETHARP_TABLE_MATCH_NETIF */
  return (s16_t)i;
 8014796:	f9b7 3020 	ldrsh.w	r3, [r7, #32]
}
 801479a:	4618      	mov	r0, r3
 801479c:	3728      	adds	r7, #40	; 0x28
 801479e:	46bd      	mov	sp, r7
 80147a0:	bd80      	pop	{r7, pc}
 80147a2:	bf00      	nop
 80147a4:	2000f854 	.word	0x2000f854
 80147a8:	0801af9c 	.word	0x0801af9c
 80147ac:	0801afd4 	.word	0x0801afd4
 80147b0:	0801b014 	.word	0x0801b014
 80147b4:	0801b03c 	.word	0x0801b03c
 80147b8:	0801b054 	.word	0x0801b054
 80147bc:	0801b068 	.word	0x0801b068

080147c0 <etharp_update_arp_entry>:
 *
 * @see pbuf_free()
 */
static err_t
etharp_update_arp_entry(struct netif *netif, const ip4_addr_t *ipaddr, struct eth_addr *ethaddr, u8_t flags)
{
 80147c0:	b580      	push	{r7, lr}
 80147c2:	b088      	sub	sp, #32
 80147c4:	af02      	add	r7, sp, #8
 80147c6:	60f8      	str	r0, [r7, #12]
 80147c8:	60b9      	str	r1, [r7, #8]
 80147ca:	607a      	str	r2, [r7, #4]
 80147cc:	70fb      	strb	r3, [r7, #3]
  s16_t i;
  LWIP_ASSERT("netif->hwaddr_len == ETH_HWADDR_LEN", netif->hwaddr_len == ETH_HWADDR_LEN);
 80147ce:	68fb      	ldr	r3, [r7, #12]
 80147d0:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80147d4:	2b06      	cmp	r3, #6
 80147d6:	d006      	beq.n	80147e6 <etharp_update_arp_entry+0x26>
 80147d8:	4b48      	ldr	r3, [pc, #288]	; (80148fc <etharp_update_arp_entry+0x13c>)
 80147da:	f240 12a9 	movw	r2, #425	; 0x1a9
 80147de:	4948      	ldr	r1, [pc, #288]	; (8014900 <etharp_update_arp_entry+0x140>)
 80147e0:	4848      	ldr	r0, [pc, #288]	; (8014904 <etharp_update_arp_entry+0x144>)
 80147e2:	f002 fb05 	bl	8016df0 <iprintf>
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: %"U16_F".%"U16_F".%"U16_F".%"U16_F" - %02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F":%02"X16_F"\n",
              ip4_addr1_16(ipaddr), ip4_addr2_16(ipaddr), ip4_addr3_16(ipaddr), ip4_addr4_16(ipaddr),
              (u16_t)ethaddr->addr[0], (u16_t)ethaddr->addr[1], (u16_t)ethaddr->addr[2],
              (u16_t)ethaddr->addr[3], (u16_t)ethaddr->addr[4], (u16_t)ethaddr->addr[5]));
  /* non-unicast address? */
  if (ip4_addr_isany(ipaddr) ||
 80147e6:	68bb      	ldr	r3, [r7, #8]
 80147e8:	2b00      	cmp	r3, #0
 80147ea:	d012      	beq.n	8014812 <etharp_update_arp_entry+0x52>
 80147ec:	68bb      	ldr	r3, [r7, #8]
 80147ee:	681b      	ldr	r3, [r3, #0]
 80147f0:	2b00      	cmp	r3, #0
 80147f2:	d00e      	beq.n	8014812 <etharp_update_arp_entry+0x52>
      ip4_addr_isbroadcast(ipaddr, netif) ||
 80147f4:	68bb      	ldr	r3, [r7, #8]
 80147f6:	681b      	ldr	r3, [r3, #0]
 80147f8:	68f9      	ldr	r1, [r7, #12]
 80147fa:	4618      	mov	r0, r3
 80147fc:	f001 f8fe 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8014800:	4603      	mov	r3, r0
  if (ip4_addr_isany(ipaddr) ||
 8014802:	2b00      	cmp	r3, #0
 8014804:	d105      	bne.n	8014812 <etharp_update_arp_entry+0x52>
      ip4_addr_ismulticast(ipaddr)) {
 8014806:	68bb      	ldr	r3, [r7, #8]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
      ip4_addr_isbroadcast(ipaddr, netif) ||
 801480e:	2be0      	cmp	r3, #224	; 0xe0
 8014810:	d102      	bne.n	8014818 <etharp_update_arp_entry+0x58>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014812:	f06f 030f 	mvn.w	r3, #15
 8014816:	e06c      	b.n	80148f2 <etharp_update_arp_entry+0x132>
  }
  /* find or create ARP entry */
  i = etharp_find_entry(ipaddr, flags, netif);
 8014818:	78fb      	ldrb	r3, [r7, #3]
 801481a:	68fa      	ldr	r2, [r7, #12]
 801481c:	4619      	mov	r1, r3
 801481e:	68b8      	ldr	r0, [r7, #8]
 8014820:	f7ff fe56 	bl	80144d0 <etharp_find_entry>
 8014824:	4603      	mov	r3, r0
 8014826:	82fb      	strh	r3, [r7, #22]
  /* bail out if no entry could be found */
  if (i < 0) {
 8014828:	f9b7 3016 	ldrsh.w	r3, [r7, #22]
 801482c:	2b00      	cmp	r3, #0
 801482e:	da02      	bge.n	8014836 <etharp_update_arp_entry+0x76>
    return (err_t)i;
 8014830:	8afb      	ldrh	r3, [r7, #22]
 8014832:	b25b      	sxtb	r3, r3
 8014834:	e05d      	b.n	80148f2 <etharp_update_arp_entry+0x132>
    return ERR_VAL;
  } else
#endif /* ETHARP_SUPPORT_STATIC_ENTRIES */
  {
    /* mark it stable */
    arp_table[i].state = ETHARP_STATE_STABLE;
 8014836:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801483a:	4933      	ldr	r1, [pc, #204]	; (8014908 <etharp_update_arp_entry+0x148>)
 801483c:	4613      	mov	r3, r2
 801483e:	005b      	lsls	r3, r3, #1
 8014840:	4413      	add	r3, r2
 8014842:	00db      	lsls	r3, r3, #3
 8014844:	440b      	add	r3, r1
 8014846:	3314      	adds	r3, #20
 8014848:	2202      	movs	r2, #2
 801484a:	701a      	strb	r2, [r3, #0]
  }

  /* record network interface */
  arp_table[i].netif = netif;
 801484c:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014850:	492d      	ldr	r1, [pc, #180]	; (8014908 <etharp_update_arp_entry+0x148>)
 8014852:	4613      	mov	r3, r2
 8014854:	005b      	lsls	r3, r3, #1
 8014856:	4413      	add	r3, r2
 8014858:	00db      	lsls	r3, r3, #3
 801485a:	440b      	add	r3, r1
 801485c:	3308      	adds	r3, #8
 801485e:	68fa      	ldr	r2, [r7, #12]
 8014860:	601a      	str	r2, [r3, #0]
  /* insert in SNMP ARP index tree */
  mib2_add_arp_entry(netif, &arp_table[i].ipaddr);

  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_update_arp_entry: updating stable entry %"S16_F"\n", i));
  /* update address */
  SMEMCPY(&arp_table[i].ethaddr, ethaddr, ETH_HWADDR_LEN);
 8014862:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014866:	4613      	mov	r3, r2
 8014868:	005b      	lsls	r3, r3, #1
 801486a:	4413      	add	r3, r2
 801486c:	00db      	lsls	r3, r3, #3
 801486e:	3308      	adds	r3, #8
 8014870:	4a25      	ldr	r2, [pc, #148]	; (8014908 <etharp_update_arp_entry+0x148>)
 8014872:	4413      	add	r3, r2
 8014874:	3304      	adds	r3, #4
 8014876:	2206      	movs	r2, #6
 8014878:	6879      	ldr	r1, [r7, #4]
 801487a:	4618      	mov	r0, r3
 801487c:	f002 fc34 	bl	80170e8 <memcpy>
  /* reset time stamp */
  arp_table[i].ctime = 0;
 8014880:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 8014884:	4920      	ldr	r1, [pc, #128]	; (8014908 <etharp_update_arp_entry+0x148>)
 8014886:	4613      	mov	r3, r2
 8014888:	005b      	lsls	r3, r3, #1
 801488a:	4413      	add	r3, r2
 801488c:	00db      	lsls	r3, r3, #3
 801488e:	440b      	add	r3, r1
 8014890:	3312      	adds	r3, #18
 8014892:	2200      	movs	r2, #0
 8014894:	801a      	strh	r2, [r3, #0]
    /* get the packet pointer */
    p = q->p;
    /* now queue entry can be freed */
    memp_free(MEMP_ARP_QUEUE, q);
#else /* ARP_QUEUEING */
  if (arp_table[i].q != NULL) {
 8014896:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 801489a:	491b      	ldr	r1, [pc, #108]	; (8014908 <etharp_update_arp_entry+0x148>)
 801489c:	4613      	mov	r3, r2
 801489e:	005b      	lsls	r3, r3, #1
 80148a0:	4413      	add	r3, r2
 80148a2:	00db      	lsls	r3, r3, #3
 80148a4:	440b      	add	r3, r1
 80148a6:	681b      	ldr	r3, [r3, #0]
 80148a8:	2b00      	cmp	r3, #0
 80148aa:	d021      	beq.n	80148f0 <etharp_update_arp_entry+0x130>
    struct pbuf *p = arp_table[i].q;
 80148ac:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148b0:	4915      	ldr	r1, [pc, #84]	; (8014908 <etharp_update_arp_entry+0x148>)
 80148b2:	4613      	mov	r3, r2
 80148b4:	005b      	lsls	r3, r3, #1
 80148b6:	4413      	add	r3, r2
 80148b8:	00db      	lsls	r3, r3, #3
 80148ba:	440b      	add	r3, r1
 80148bc:	681b      	ldr	r3, [r3, #0]
 80148be:	613b      	str	r3, [r7, #16]
    arp_table[i].q = NULL;
 80148c0:	f9b7 2016 	ldrsh.w	r2, [r7, #22]
 80148c4:	4910      	ldr	r1, [pc, #64]	; (8014908 <etharp_update_arp_entry+0x148>)
 80148c6:	4613      	mov	r3, r2
 80148c8:	005b      	lsls	r3, r3, #1
 80148ca:	4413      	add	r3, r2
 80148cc:	00db      	lsls	r3, r3, #3
 80148ce:	440b      	add	r3, r1
 80148d0:	2200      	movs	r2, #0
 80148d2:	601a      	str	r2, [r3, #0]
#endif /* ARP_QUEUEING */
    /* send the queued IP packet */
    ethernet_output(netif, p, (struct eth_addr *)(netif->hwaddr), ethaddr, ETHTYPE_IP);
 80148d4:	68fb      	ldr	r3, [r7, #12]
 80148d6:	f103 0226 	add.w	r2, r3, #38	; 0x26
 80148da:	f44f 6300 	mov.w	r3, #2048	; 0x800
 80148de:	9300      	str	r3, [sp, #0]
 80148e0:	687b      	ldr	r3, [r7, #4]
 80148e2:	6939      	ldr	r1, [r7, #16]
 80148e4:	68f8      	ldr	r0, [r7, #12]
 80148e6:	f001 ff97 	bl	8016818 <ethernet_output>
    /* free the queued IP packet */
    pbuf_free(p);
 80148ea:	6938      	ldr	r0, [r7, #16]
 80148ec:	f7f8 fcc0 	bl	800d270 <pbuf_free>
  }
  return ERR_OK;
 80148f0:	2300      	movs	r3, #0
}
 80148f2:	4618      	mov	r0, r3
 80148f4:	3718      	adds	r7, #24
 80148f6:	46bd      	mov	sp, r7
 80148f8:	bd80      	pop	{r7, pc}
 80148fa:	bf00      	nop
 80148fc:	0801af9c 	.word	0x0801af9c
 8014900:	0801b094 	.word	0x0801b094
 8014904:	0801b014 	.word	0x0801b014
 8014908:	2000f854 	.word	0x2000f854

0801490c <etharp_cleanup_netif>:
 *
 * @param netif points to a network interface
 */
void
etharp_cleanup_netif(struct netif *netif)
{
 801490c:	b580      	push	{r7, lr}
 801490e:	b084      	sub	sp, #16
 8014910:	af00      	add	r7, sp, #0
 8014912:	6078      	str	r0, [r7, #4]
  int i;

  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014914:	2300      	movs	r3, #0
 8014916:	60fb      	str	r3, [r7, #12]
 8014918:	e01e      	b.n	8014958 <etharp_cleanup_netif+0x4c>
    u8_t state = arp_table[i].state;
 801491a:	4913      	ldr	r1, [pc, #76]	; (8014968 <etharp_cleanup_netif+0x5c>)
 801491c:	68fa      	ldr	r2, [r7, #12]
 801491e:	4613      	mov	r3, r2
 8014920:	005b      	lsls	r3, r3, #1
 8014922:	4413      	add	r3, r2
 8014924:	00db      	lsls	r3, r3, #3
 8014926:	440b      	add	r3, r1
 8014928:	3314      	adds	r3, #20
 801492a:	781b      	ldrb	r3, [r3, #0]
 801492c:	72fb      	strb	r3, [r7, #11]
    if ((state != ETHARP_STATE_EMPTY) && (arp_table[i].netif == netif)) {
 801492e:	7afb      	ldrb	r3, [r7, #11]
 8014930:	2b00      	cmp	r3, #0
 8014932:	d00e      	beq.n	8014952 <etharp_cleanup_netif+0x46>
 8014934:	490c      	ldr	r1, [pc, #48]	; (8014968 <etharp_cleanup_netif+0x5c>)
 8014936:	68fa      	ldr	r2, [r7, #12]
 8014938:	4613      	mov	r3, r2
 801493a:	005b      	lsls	r3, r3, #1
 801493c:	4413      	add	r3, r2
 801493e:	00db      	lsls	r3, r3, #3
 8014940:	440b      	add	r3, r1
 8014942:	3308      	adds	r3, #8
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	687a      	ldr	r2, [r7, #4]
 8014948:	429a      	cmp	r2, r3
 801494a:	d102      	bne.n	8014952 <etharp_cleanup_netif+0x46>
      etharp_free_entry(i);
 801494c:	68f8      	ldr	r0, [r7, #12]
 801494e:	f7ff fce5 	bl	801431c <etharp_free_entry>
  for (i = 0; i < ARP_TABLE_SIZE; ++i) {
 8014952:	68fb      	ldr	r3, [r7, #12]
 8014954:	3301      	adds	r3, #1
 8014956:	60fb      	str	r3, [r7, #12]
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	2b09      	cmp	r3, #9
 801495c:	dddd      	ble.n	801491a <etharp_cleanup_netif+0xe>
    }
  }
}
 801495e:	bf00      	nop
 8014960:	bf00      	nop
 8014962:	3710      	adds	r7, #16
 8014964:	46bd      	mov	sp, r7
 8014966:	bd80      	pop	{r7, pc}
 8014968:	2000f854 	.word	0x2000f854

0801496c <etharp_input>:
 *
 * @see pbuf_free()
 */
void
etharp_input(struct pbuf *p, struct netif *netif)
{
 801496c:	b5b0      	push	{r4, r5, r7, lr}
 801496e:	b08a      	sub	sp, #40	; 0x28
 8014970:	af04      	add	r7, sp, #16
 8014972:	6078      	str	r0, [r7, #4]
 8014974:	6039      	str	r1, [r7, #0]
  ip4_addr_t sipaddr, dipaddr;
  u8_t for_us;

  LWIP_ASSERT_CORE_LOCKED();

  LWIP_ERROR("netif != NULL", (netif != NULL), return;);
 8014976:	683b      	ldr	r3, [r7, #0]
 8014978:	2b00      	cmp	r3, #0
 801497a:	d107      	bne.n	801498c <etharp_input+0x20>
 801497c:	4b3d      	ldr	r3, [pc, #244]	; (8014a74 <etharp_input+0x108>)
 801497e:	f240 228a 	movw	r2, #650	; 0x28a
 8014982:	493d      	ldr	r1, [pc, #244]	; (8014a78 <etharp_input+0x10c>)
 8014984:	483d      	ldr	r0, [pc, #244]	; (8014a7c <etharp_input+0x110>)
 8014986:	f002 fa33 	bl	8016df0 <iprintf>
 801498a:	e06f      	b.n	8014a6c <etharp_input+0x100>

  hdr = (struct etharp_hdr *)p->payload;
 801498c:	687b      	ldr	r3, [r7, #4]
 801498e:	685b      	ldr	r3, [r3, #4]
 8014990:	613b      	str	r3, [r7, #16]

  /* RFC 826 "Packet Reception": */
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 8014992:	693b      	ldr	r3, [r7, #16]
 8014994:	881b      	ldrh	r3, [r3, #0]
 8014996:	b29b      	uxth	r3, r3
 8014998:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 801499c:	d10c      	bne.n	80149b8 <etharp_input+0x4c>
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 801499e:	693b      	ldr	r3, [r7, #16]
 80149a0:	791b      	ldrb	r3, [r3, #4]
  if ((hdr->hwtype != PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET)) ||
 80149a2:	2b06      	cmp	r3, #6
 80149a4:	d108      	bne.n	80149b8 <etharp_input+0x4c>
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149a6:	693b      	ldr	r3, [r7, #16]
 80149a8:	795b      	ldrb	r3, [r3, #5]
      (hdr->hwlen != ETH_HWADDR_LEN) ||
 80149aa:	2b04      	cmp	r3, #4
 80149ac:	d104      	bne.n	80149b8 <etharp_input+0x4c>
      (hdr->proto != PP_HTONS(ETHTYPE_IP)))  {
 80149ae:	693b      	ldr	r3, [r7, #16]
 80149b0:	885b      	ldrh	r3, [r3, #2]
 80149b2:	b29b      	uxth	r3, r3
      (hdr->protolen != sizeof(ip4_addr_t)) ||
 80149b4:	2b08      	cmp	r3, #8
 80149b6:	d003      	beq.n	80149c0 <etharp_input+0x54>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING,
                ("etharp_input: packet dropped, wrong hw type, hwlen, proto, protolen or ethernet type (%"U16_F"/%"U16_F"/%"U16_F"/%"U16_F")\n",
                 hdr->hwtype, (u16_t)hdr->hwlen, hdr->proto, (u16_t)hdr->protolen));
    ETHARP_STATS_INC(etharp.proterr);
    ETHARP_STATS_INC(etharp.drop);
    pbuf_free(p);
 80149b8:	6878      	ldr	r0, [r7, #4]
 80149ba:	f7f8 fc59 	bl	800d270 <pbuf_free>
    return;
 80149be:	e055      	b.n	8014a6c <etharp_input+0x100>
  autoip_arp_reply(netif, hdr);
#endif /* LWIP_AUTOIP */

  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing (not using structure copy which breaks strict-aliasing rules). */
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&sipaddr, &hdr->sipaddr);
 80149c0:	693b      	ldr	r3, [r7, #16]
 80149c2:	330e      	adds	r3, #14
 80149c4:	681b      	ldr	r3, [r3, #0]
 80149c6:	60fb      	str	r3, [r7, #12]
  IPADDR_WORDALIGNED_COPY_TO_IP4_ADDR_T(&dipaddr, &hdr->dipaddr);
 80149c8:	693b      	ldr	r3, [r7, #16]
 80149ca:	3318      	adds	r3, #24
 80149cc:	681b      	ldr	r3, [r3, #0]
 80149ce:	60bb      	str	r3, [r7, #8]

  /* this interface is not configured? */
  if (ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80149d0:	683b      	ldr	r3, [r7, #0]
 80149d2:	3304      	adds	r3, #4
 80149d4:	681b      	ldr	r3, [r3, #0]
 80149d6:	2b00      	cmp	r3, #0
 80149d8:	d102      	bne.n	80149e0 <etharp_input+0x74>
    for_us = 0;
 80149da:	2300      	movs	r3, #0
 80149dc:	75fb      	strb	r3, [r7, #23]
 80149de:	e009      	b.n	80149f4 <etharp_input+0x88>
  } else {
    /* ARP packet directed to us? */
    for_us = (u8_t)ip4_addr_cmp(&dipaddr, netif_ip4_addr(netif));
 80149e0:	68ba      	ldr	r2, [r7, #8]
 80149e2:	683b      	ldr	r3, [r7, #0]
 80149e4:	3304      	adds	r3, #4
 80149e6:	681b      	ldr	r3, [r3, #0]
 80149e8:	429a      	cmp	r2, r3
 80149ea:	bf0c      	ite	eq
 80149ec:	2301      	moveq	r3, #1
 80149ee:	2300      	movne	r3, #0
 80149f0:	b2db      	uxtb	r3, r3
 80149f2:	75fb      	strb	r3, [r7, #23]
  /* ARP message directed to us?
      -> add IP address in ARP cache; assume requester wants to talk to us,
         can result in directly sending the queued packets for this host.
     ARP message not directed to us?
      ->  update the source IP address in the cache, if present */
  etharp_update_arp_entry(netif, &sipaddr, &(hdr->shwaddr),
 80149f4:	693b      	ldr	r3, [r7, #16]
 80149f6:	f103 0208 	add.w	r2, r3, #8
 80149fa:	7dfb      	ldrb	r3, [r7, #23]
 80149fc:	2b00      	cmp	r3, #0
 80149fe:	d001      	beq.n	8014a04 <etharp_input+0x98>
 8014a00:	2301      	movs	r3, #1
 8014a02:	e000      	b.n	8014a06 <etharp_input+0x9a>
 8014a04:	2302      	movs	r3, #2
 8014a06:	f107 010c 	add.w	r1, r7, #12
 8014a0a:	6838      	ldr	r0, [r7, #0]
 8014a0c:	f7ff fed8 	bl	80147c0 <etharp_update_arp_entry>
                          for_us ? ETHARP_FLAG_TRY_HARD : ETHARP_FLAG_FIND_ONLY);

  /* now act on the message itself */
  switch (hdr->opcode) {
 8014a10:	693b      	ldr	r3, [r7, #16]
 8014a12:	88db      	ldrh	r3, [r3, #6]
 8014a14:	b29b      	uxth	r3, r3
 8014a16:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8014a1a:	d003      	beq.n	8014a24 <etharp_input+0xb8>
 8014a1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8014a20:	d01e      	beq.n	8014a60 <etharp_input+0xf4>
#endif /* (LWIP_DHCP && DHCP_DOES_ARP_CHECK) */
      break;
    default:
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_input: ARP unknown opcode type %"S16_F"\n", lwip_htons(hdr->opcode)));
      ETHARP_STATS_INC(etharp.err);
      break;
 8014a22:	e020      	b.n	8014a66 <etharp_input+0xfa>
      if (for_us) {
 8014a24:	7dfb      	ldrb	r3, [r7, #23]
 8014a26:	2b00      	cmp	r3, #0
 8014a28:	d01c      	beq.n	8014a64 <etharp_input+0xf8>
                   (struct eth_addr *)netif->hwaddr, &hdr->shwaddr,
 8014a2a:	683b      	ldr	r3, [r7, #0]
 8014a2c:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8014a30:	693b      	ldr	r3, [r7, #16]
 8014a32:	f103 0408 	add.w	r4, r3, #8
                   (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif),
 8014a36:	683b      	ldr	r3, [r7, #0]
 8014a38:	f103 0526 	add.w	r5, r3, #38	; 0x26
 8014a3c:	683b      	ldr	r3, [r7, #0]
 8014a3e:	3304      	adds	r3, #4
                   &hdr->shwaddr, &sipaddr,
 8014a40:	693a      	ldr	r2, [r7, #16]
 8014a42:	3208      	adds	r2, #8
        etharp_raw(netif,
 8014a44:	2102      	movs	r1, #2
 8014a46:	9103      	str	r1, [sp, #12]
 8014a48:	f107 010c 	add.w	r1, r7, #12
 8014a4c:	9102      	str	r1, [sp, #8]
 8014a4e:	9201      	str	r2, [sp, #4]
 8014a50:	9300      	str	r3, [sp, #0]
 8014a52:	462b      	mov	r3, r5
 8014a54:	4622      	mov	r2, r4
 8014a56:	4601      	mov	r1, r0
 8014a58:	6838      	ldr	r0, [r7, #0]
 8014a5a:	f000 faeb 	bl	8015034 <etharp_raw>
      break;
 8014a5e:	e001      	b.n	8014a64 <etharp_input+0xf8>
      break;
 8014a60:	bf00      	nop
 8014a62:	e000      	b.n	8014a66 <etharp_input+0xfa>
      break;
 8014a64:	bf00      	nop
  }
  /* free ARP packet */
  pbuf_free(p);
 8014a66:	6878      	ldr	r0, [r7, #4]
 8014a68:	f7f8 fc02 	bl	800d270 <pbuf_free>
}
 8014a6c:	3718      	adds	r7, #24
 8014a6e:	46bd      	mov	sp, r7
 8014a70:	bdb0      	pop	{r4, r5, r7, pc}
 8014a72:	bf00      	nop
 8014a74:	0801af9c 	.word	0x0801af9c
 8014a78:	0801b0ec 	.word	0x0801b0ec
 8014a7c:	0801b014 	.word	0x0801b014

08014a80 <etharp_output_to_arp_index>:
/** Just a small helper function that sends a pbuf to an ethernet address
 * in the arp_table specified by the index 'arp_idx'.
 */
static err_t
etharp_output_to_arp_index(struct netif *netif, struct pbuf *q, netif_addr_idx_t arp_idx)
{
 8014a80:	b580      	push	{r7, lr}
 8014a82:	b086      	sub	sp, #24
 8014a84:	af02      	add	r7, sp, #8
 8014a86:	60f8      	str	r0, [r7, #12]
 8014a88:	60b9      	str	r1, [r7, #8]
 8014a8a:	4613      	mov	r3, r2
 8014a8c:	71fb      	strb	r3, [r7, #7]
  LWIP_ASSERT("arp_table[arp_idx].state >= ETHARP_STATE_STABLE",
 8014a8e:	79fa      	ldrb	r2, [r7, #7]
 8014a90:	4944      	ldr	r1, [pc, #272]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014a92:	4613      	mov	r3, r2
 8014a94:	005b      	lsls	r3, r3, #1
 8014a96:	4413      	add	r3, r2
 8014a98:	00db      	lsls	r3, r3, #3
 8014a9a:	440b      	add	r3, r1
 8014a9c:	3314      	adds	r3, #20
 8014a9e:	781b      	ldrb	r3, [r3, #0]
 8014aa0:	2b01      	cmp	r3, #1
 8014aa2:	d806      	bhi.n	8014ab2 <etharp_output_to_arp_index+0x32>
 8014aa4:	4b40      	ldr	r3, [pc, #256]	; (8014ba8 <etharp_output_to_arp_index+0x128>)
 8014aa6:	f240 22ee 	movw	r2, #750	; 0x2ee
 8014aaa:	4940      	ldr	r1, [pc, #256]	; (8014bac <etharp_output_to_arp_index+0x12c>)
 8014aac:	4840      	ldr	r0, [pc, #256]	; (8014bb0 <etharp_output_to_arp_index+0x130>)
 8014aae:	f002 f99f 	bl	8016df0 <iprintf>
              arp_table[arp_idx].state >= ETHARP_STATE_STABLE);
  /* if arp table entry is about to expire: re-request it,
     but only if its state is ETHARP_STATE_STABLE to prevent flooding the
     network with ARP requests if this address is used frequently. */
  if (arp_table[arp_idx].state == ETHARP_STATE_STABLE) {
 8014ab2:	79fa      	ldrb	r2, [r7, #7]
 8014ab4:	493b      	ldr	r1, [pc, #236]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014ab6:	4613      	mov	r3, r2
 8014ab8:	005b      	lsls	r3, r3, #1
 8014aba:	4413      	add	r3, r2
 8014abc:	00db      	lsls	r3, r3, #3
 8014abe:	440b      	add	r3, r1
 8014ac0:	3314      	adds	r3, #20
 8014ac2:	781b      	ldrb	r3, [r3, #0]
 8014ac4:	2b02      	cmp	r3, #2
 8014ac6:	d153      	bne.n	8014b70 <etharp_output_to_arp_index+0xf0>
    if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_BROADCAST) {
 8014ac8:	79fa      	ldrb	r2, [r7, #7]
 8014aca:	4936      	ldr	r1, [pc, #216]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014acc:	4613      	mov	r3, r2
 8014ace:	005b      	lsls	r3, r3, #1
 8014ad0:	4413      	add	r3, r2
 8014ad2:	00db      	lsls	r3, r3, #3
 8014ad4:	440b      	add	r3, r1
 8014ad6:	3312      	adds	r3, #18
 8014ad8:	881b      	ldrh	r3, [r3, #0]
 8014ada:	f5b3 7f8e 	cmp.w	r3, #284	; 0x11c
 8014ade:	d919      	bls.n	8014b14 <etharp_output_to_arp_index+0x94>
      /* issue a standard request using broadcast */
      if (etharp_request(netif, &arp_table[arp_idx].ipaddr) == ERR_OK) {
 8014ae0:	79fa      	ldrb	r2, [r7, #7]
 8014ae2:	4613      	mov	r3, r2
 8014ae4:	005b      	lsls	r3, r3, #1
 8014ae6:	4413      	add	r3, r2
 8014ae8:	00db      	lsls	r3, r3, #3
 8014aea:	4a2e      	ldr	r2, [pc, #184]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014aec:	4413      	add	r3, r2
 8014aee:	3304      	adds	r3, #4
 8014af0:	4619      	mov	r1, r3
 8014af2:	68f8      	ldr	r0, [r7, #12]
 8014af4:	f000 fb4c 	bl	8015190 <etharp_request>
 8014af8:	4603      	mov	r3, r0
 8014afa:	2b00      	cmp	r3, #0
 8014afc:	d138      	bne.n	8014b70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014afe:	79fa      	ldrb	r2, [r7, #7]
 8014b00:	4928      	ldr	r1, [pc, #160]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b02:	4613      	mov	r3, r2
 8014b04:	005b      	lsls	r3, r3, #1
 8014b06:	4413      	add	r3, r2
 8014b08:	00db      	lsls	r3, r3, #3
 8014b0a:	440b      	add	r3, r1
 8014b0c:	3314      	adds	r3, #20
 8014b0e:	2203      	movs	r2, #3
 8014b10:	701a      	strb	r2, [r3, #0]
 8014b12:	e02d      	b.n	8014b70 <etharp_output_to_arp_index+0xf0>
      }
    } else if (arp_table[arp_idx].ctime >= ARP_AGE_REREQUEST_USED_UNICAST) {
 8014b14:	79fa      	ldrb	r2, [r7, #7]
 8014b16:	4923      	ldr	r1, [pc, #140]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b18:	4613      	mov	r3, r2
 8014b1a:	005b      	lsls	r3, r3, #1
 8014b1c:	4413      	add	r3, r2
 8014b1e:	00db      	lsls	r3, r3, #3
 8014b20:	440b      	add	r3, r1
 8014b22:	3312      	adds	r3, #18
 8014b24:	881b      	ldrh	r3, [r3, #0]
 8014b26:	f5b3 7f87 	cmp.w	r3, #270	; 0x10e
 8014b2a:	d321      	bcc.n	8014b70 <etharp_output_to_arp_index+0xf0>
      /* issue a unicast request (for 15 seconds) to prevent unnecessary broadcast */
      if (etharp_request_dst(netif, &arp_table[arp_idx].ipaddr, &arp_table[arp_idx].ethaddr) == ERR_OK) {
 8014b2c:	79fa      	ldrb	r2, [r7, #7]
 8014b2e:	4613      	mov	r3, r2
 8014b30:	005b      	lsls	r3, r3, #1
 8014b32:	4413      	add	r3, r2
 8014b34:	00db      	lsls	r3, r3, #3
 8014b36:	4a1b      	ldr	r2, [pc, #108]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b38:	4413      	add	r3, r2
 8014b3a:	1d19      	adds	r1, r3, #4
 8014b3c:	79fa      	ldrb	r2, [r7, #7]
 8014b3e:	4613      	mov	r3, r2
 8014b40:	005b      	lsls	r3, r3, #1
 8014b42:	4413      	add	r3, r2
 8014b44:	00db      	lsls	r3, r3, #3
 8014b46:	3308      	adds	r3, #8
 8014b48:	4a16      	ldr	r2, [pc, #88]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b4a:	4413      	add	r3, r2
 8014b4c:	3304      	adds	r3, #4
 8014b4e:	461a      	mov	r2, r3
 8014b50:	68f8      	ldr	r0, [r7, #12]
 8014b52:	f000 fafb 	bl	801514c <etharp_request_dst>
 8014b56:	4603      	mov	r3, r0
 8014b58:	2b00      	cmp	r3, #0
 8014b5a:	d109      	bne.n	8014b70 <etharp_output_to_arp_index+0xf0>
        arp_table[arp_idx].state = ETHARP_STATE_STABLE_REREQUESTING_1;
 8014b5c:	79fa      	ldrb	r2, [r7, #7]
 8014b5e:	4911      	ldr	r1, [pc, #68]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b60:	4613      	mov	r3, r2
 8014b62:	005b      	lsls	r3, r3, #1
 8014b64:	4413      	add	r3, r2
 8014b66:	00db      	lsls	r3, r3, #3
 8014b68:	440b      	add	r3, r1
 8014b6a:	3314      	adds	r3, #20
 8014b6c:	2203      	movs	r2, #3
 8014b6e:	701a      	strb	r2, [r3, #0]
      }
    }
  }

  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), &arp_table[arp_idx].ethaddr, ETHTYPE_IP);
 8014b70:	68fb      	ldr	r3, [r7, #12]
 8014b72:	f103 0126 	add.w	r1, r3, #38	; 0x26
 8014b76:	79fa      	ldrb	r2, [r7, #7]
 8014b78:	4613      	mov	r3, r2
 8014b7a:	005b      	lsls	r3, r3, #1
 8014b7c:	4413      	add	r3, r2
 8014b7e:	00db      	lsls	r3, r3, #3
 8014b80:	3308      	adds	r3, #8
 8014b82:	4a08      	ldr	r2, [pc, #32]	; (8014ba4 <etharp_output_to_arp_index+0x124>)
 8014b84:	4413      	add	r3, r2
 8014b86:	3304      	adds	r3, #4
 8014b88:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014b8c:	9200      	str	r2, [sp, #0]
 8014b8e:	460a      	mov	r2, r1
 8014b90:	68b9      	ldr	r1, [r7, #8]
 8014b92:	68f8      	ldr	r0, [r7, #12]
 8014b94:	f001 fe40 	bl	8016818 <ethernet_output>
 8014b98:	4603      	mov	r3, r0
}
 8014b9a:	4618      	mov	r0, r3
 8014b9c:	3710      	adds	r7, #16
 8014b9e:	46bd      	mov	sp, r7
 8014ba0:	bd80      	pop	{r7, pc}
 8014ba2:	bf00      	nop
 8014ba4:	2000f854 	.word	0x2000f854
 8014ba8:	0801af9c 	.word	0x0801af9c
 8014bac:	0801b10c 	.word	0x0801b10c
 8014bb0:	0801b014 	.word	0x0801b014

08014bb4 <etharp_output>:
 * - ERR_RTE No route to destination (no gateway to external networks),
 * or the return type of either etharp_query() or ethernet_output().
 */
err_t
etharp_output(struct netif *netif, struct pbuf *q, const ip4_addr_t *ipaddr)
{
 8014bb4:	b580      	push	{r7, lr}
 8014bb6:	b08a      	sub	sp, #40	; 0x28
 8014bb8:	af02      	add	r7, sp, #8
 8014bba:	60f8      	str	r0, [r7, #12]
 8014bbc:	60b9      	str	r1, [r7, #8]
 8014bbe:	607a      	str	r2, [r7, #4]
  const struct eth_addr *dest;
  struct eth_addr mcastaddr;
  const ip4_addr_t *dst_addr = ipaddr;
 8014bc0:	687b      	ldr	r3, [r7, #4]
 8014bc2:	61bb      	str	r3, [r7, #24]

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_ASSERT("netif != NULL", netif != NULL);
 8014bc4:	68fb      	ldr	r3, [r7, #12]
 8014bc6:	2b00      	cmp	r3, #0
 8014bc8:	d106      	bne.n	8014bd8 <etharp_output+0x24>
 8014bca:	4b73      	ldr	r3, [pc, #460]	; (8014d98 <etharp_output+0x1e4>)
 8014bcc:	f240 321e 	movw	r2, #798	; 0x31e
 8014bd0:	4972      	ldr	r1, [pc, #456]	; (8014d9c <etharp_output+0x1e8>)
 8014bd2:	4873      	ldr	r0, [pc, #460]	; (8014da0 <etharp_output+0x1ec>)
 8014bd4:	f002 f90c 	bl	8016df0 <iprintf>
  LWIP_ASSERT("q != NULL", q != NULL);
 8014bd8:	68bb      	ldr	r3, [r7, #8]
 8014bda:	2b00      	cmp	r3, #0
 8014bdc:	d106      	bne.n	8014bec <etharp_output+0x38>
 8014bde:	4b6e      	ldr	r3, [pc, #440]	; (8014d98 <etharp_output+0x1e4>)
 8014be0:	f240 321f 	movw	r2, #799	; 0x31f
 8014be4:	496f      	ldr	r1, [pc, #444]	; (8014da4 <etharp_output+0x1f0>)
 8014be6:	486e      	ldr	r0, [pc, #440]	; (8014da0 <etharp_output+0x1ec>)
 8014be8:	f002 f902 	bl	8016df0 <iprintf>
  LWIP_ASSERT("ipaddr != NULL", ipaddr != NULL);
 8014bec:	687b      	ldr	r3, [r7, #4]
 8014bee:	2b00      	cmp	r3, #0
 8014bf0:	d106      	bne.n	8014c00 <etharp_output+0x4c>
 8014bf2:	4b69      	ldr	r3, [pc, #420]	; (8014d98 <etharp_output+0x1e4>)
 8014bf4:	f44f 7248 	mov.w	r2, #800	; 0x320
 8014bf8:	496b      	ldr	r1, [pc, #428]	; (8014da8 <etharp_output+0x1f4>)
 8014bfa:	4869      	ldr	r0, [pc, #420]	; (8014da0 <etharp_output+0x1ec>)
 8014bfc:	f002 f8f8 	bl	8016df0 <iprintf>

  /* Determine on destination hardware address. Broadcasts and multicasts
   * are special, other IP addresses are looked up in the ARP table. */

  /* broadcast destination IP address? */
  if (ip4_addr_isbroadcast(ipaddr, netif)) {
 8014c00:	687b      	ldr	r3, [r7, #4]
 8014c02:	681b      	ldr	r3, [r3, #0]
 8014c04:	68f9      	ldr	r1, [r7, #12]
 8014c06:	4618      	mov	r0, r3
 8014c08:	f000 fef8 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8014c0c:	4603      	mov	r3, r0
 8014c0e:	2b00      	cmp	r3, #0
 8014c10:	d002      	beq.n	8014c18 <etharp_output+0x64>
    /* broadcast on Ethernet also */
    dest = (const struct eth_addr *)&ethbroadcast;
 8014c12:	4b66      	ldr	r3, [pc, #408]	; (8014dac <etharp_output+0x1f8>)
 8014c14:	61fb      	str	r3, [r7, #28]
 8014c16:	e0af      	b.n	8014d78 <etharp_output+0x1c4>
    /* multicast destination IP address? */
  } else if (ip4_addr_ismulticast(ipaddr)) {
 8014c18:	687b      	ldr	r3, [r7, #4]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8014c20:	2be0      	cmp	r3, #224	; 0xe0
 8014c22:	d118      	bne.n	8014c56 <etharp_output+0xa2>
    /* Hash IP multicast address to MAC address.*/
    mcastaddr.addr[0] = LL_IP4_MULTICAST_ADDR_0;
 8014c24:	2301      	movs	r3, #1
 8014c26:	743b      	strb	r3, [r7, #16]
    mcastaddr.addr[1] = LL_IP4_MULTICAST_ADDR_1;
 8014c28:	2300      	movs	r3, #0
 8014c2a:	747b      	strb	r3, [r7, #17]
    mcastaddr.addr[2] = LL_IP4_MULTICAST_ADDR_2;
 8014c2c:	235e      	movs	r3, #94	; 0x5e
 8014c2e:	74bb      	strb	r3, [r7, #18]
    mcastaddr.addr[3] = ip4_addr2(ipaddr) & 0x7f;
 8014c30:	687b      	ldr	r3, [r7, #4]
 8014c32:	3301      	adds	r3, #1
 8014c34:	781b      	ldrb	r3, [r3, #0]
 8014c36:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8014c3a:	b2db      	uxtb	r3, r3
 8014c3c:	74fb      	strb	r3, [r7, #19]
    mcastaddr.addr[4] = ip4_addr3(ipaddr);
 8014c3e:	687b      	ldr	r3, [r7, #4]
 8014c40:	3302      	adds	r3, #2
 8014c42:	781b      	ldrb	r3, [r3, #0]
 8014c44:	753b      	strb	r3, [r7, #20]
    mcastaddr.addr[5] = ip4_addr4(ipaddr);
 8014c46:	687b      	ldr	r3, [r7, #4]
 8014c48:	3303      	adds	r3, #3
 8014c4a:	781b      	ldrb	r3, [r3, #0]
 8014c4c:	757b      	strb	r3, [r7, #21]
    /* destination Ethernet address is multicast */
    dest = &mcastaddr;
 8014c4e:	f107 0310 	add.w	r3, r7, #16
 8014c52:	61fb      	str	r3, [r7, #28]
 8014c54:	e090      	b.n	8014d78 <etharp_output+0x1c4>
    /* unicast destination IP address? */
  } else {
    netif_addr_idx_t i;
    /* outside local network? if so, this can neither be a global broadcast nor
       a subnet broadcast. */
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c56:	687b      	ldr	r3, [r7, #4]
 8014c58:	681a      	ldr	r2, [r3, #0]
 8014c5a:	68fb      	ldr	r3, [r7, #12]
 8014c5c:	3304      	adds	r3, #4
 8014c5e:	681b      	ldr	r3, [r3, #0]
 8014c60:	405a      	eors	r2, r3
 8014c62:	68fb      	ldr	r3, [r7, #12]
 8014c64:	3308      	adds	r3, #8
 8014c66:	681b      	ldr	r3, [r3, #0]
 8014c68:	4013      	ands	r3, r2
 8014c6a:	2b00      	cmp	r3, #0
 8014c6c:	d012      	beq.n	8014c94 <etharp_output+0xe0>
        !ip4_addr_islinklocal(ipaddr)) {
 8014c6e:	687b      	ldr	r3, [r7, #4]
 8014c70:	681b      	ldr	r3, [r3, #0]
 8014c72:	b29b      	uxth	r3, r3
    if (!ip4_addr_netcmp(ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif)) &&
 8014c74:	f64f 62a9 	movw	r2, #65193	; 0xfea9
 8014c78:	4293      	cmp	r3, r2
 8014c7a:	d00b      	beq.n	8014c94 <etharp_output+0xe0>
        dst_addr = LWIP_HOOK_ETHARP_GET_GW(netif, ipaddr);
        if (dst_addr == NULL)
#endif /* LWIP_HOOK_ETHARP_GET_GW */
        {
          /* interface has default gateway? */
          if (!ip4_addr_isany_val(*netif_ip4_gw(netif))) {
 8014c7c:	68fb      	ldr	r3, [r7, #12]
 8014c7e:	330c      	adds	r3, #12
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2b00      	cmp	r3, #0
 8014c84:	d003      	beq.n	8014c8e <etharp_output+0xda>
            /* send to hardware address of default gateway IP address */
            dst_addr = netif_ip4_gw(netif);
 8014c86:	68fb      	ldr	r3, [r7, #12]
 8014c88:	330c      	adds	r3, #12
 8014c8a:	61bb      	str	r3, [r7, #24]
 8014c8c:	e002      	b.n	8014c94 <etharp_output+0xe0>
            /* no default gateway available */
          } else {
            /* no route to destination error (default gateway missing) */
            return ERR_RTE;
 8014c8e:	f06f 0303 	mvn.w	r3, #3
 8014c92:	e07d      	b.n	8014d90 <etharp_output+0x1dc>
    if (netif->hints != NULL) {
      /* per-pcb cached entry was given */
      netif_addr_idx_t etharp_cached_entry = netif->hints->addr_hint;
      if (etharp_cached_entry < ARP_TABLE_SIZE) {
#endif /* LWIP_NETIF_HWADDRHINT */
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014c94:	4b46      	ldr	r3, [pc, #280]	; (8014db0 <etharp_output+0x1fc>)
 8014c96:	781b      	ldrb	r3, [r3, #0]
 8014c98:	4619      	mov	r1, r3
 8014c9a:	4a46      	ldr	r2, [pc, #280]	; (8014db4 <etharp_output+0x200>)
 8014c9c:	460b      	mov	r3, r1
 8014c9e:	005b      	lsls	r3, r3, #1
 8014ca0:	440b      	add	r3, r1
 8014ca2:	00db      	lsls	r3, r3, #3
 8014ca4:	4413      	add	r3, r2
 8014ca6:	3314      	adds	r3, #20
 8014ca8:	781b      	ldrb	r3, [r3, #0]
 8014caa:	2b01      	cmp	r3, #1
 8014cac:	d925      	bls.n	8014cfa <etharp_output+0x146>
#if ETHARP_TABLE_MATCH_NETIF
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014cae:	4b40      	ldr	r3, [pc, #256]	; (8014db0 <etharp_output+0x1fc>)
 8014cb0:	781b      	ldrb	r3, [r3, #0]
 8014cb2:	4619      	mov	r1, r3
 8014cb4:	4a3f      	ldr	r2, [pc, #252]	; (8014db4 <etharp_output+0x200>)
 8014cb6:	460b      	mov	r3, r1
 8014cb8:	005b      	lsls	r3, r3, #1
 8014cba:	440b      	add	r3, r1
 8014cbc:	00db      	lsls	r3, r3, #3
 8014cbe:	4413      	add	r3, r2
 8014cc0:	3308      	adds	r3, #8
 8014cc2:	681b      	ldr	r3, [r3, #0]
        if ((arp_table[etharp_cached_entry].state >= ETHARP_STATE_STABLE) &&
 8014cc4:	68fa      	ldr	r2, [r7, #12]
 8014cc6:	429a      	cmp	r2, r3
 8014cc8:	d117      	bne.n	8014cfa <etharp_output+0x146>
#endif
            (ip4_addr_cmp(dst_addr, &arp_table[etharp_cached_entry].ipaddr))) {
 8014cca:	69bb      	ldr	r3, [r7, #24]
 8014ccc:	681a      	ldr	r2, [r3, #0]
 8014cce:	4b38      	ldr	r3, [pc, #224]	; (8014db0 <etharp_output+0x1fc>)
 8014cd0:	781b      	ldrb	r3, [r3, #0]
 8014cd2:	4618      	mov	r0, r3
 8014cd4:	4937      	ldr	r1, [pc, #220]	; (8014db4 <etharp_output+0x200>)
 8014cd6:	4603      	mov	r3, r0
 8014cd8:	005b      	lsls	r3, r3, #1
 8014cda:	4403      	add	r3, r0
 8014cdc:	00db      	lsls	r3, r3, #3
 8014cde:	440b      	add	r3, r1
 8014ce0:	3304      	adds	r3, #4
 8014ce2:	681b      	ldr	r3, [r3, #0]
            (arp_table[etharp_cached_entry].netif == netif) &&
 8014ce4:	429a      	cmp	r2, r3
 8014ce6:	d108      	bne.n	8014cfa <etharp_output+0x146>
          /* the per-pcb-cached entry is stable and the right one! */
          ETHARP_STATS_INC(etharp.cachehit);
          return etharp_output_to_arp_index(netif, q, etharp_cached_entry);
 8014ce8:	4b31      	ldr	r3, [pc, #196]	; (8014db0 <etharp_output+0x1fc>)
 8014cea:	781b      	ldrb	r3, [r3, #0]
 8014cec:	461a      	mov	r2, r3
 8014cee:	68b9      	ldr	r1, [r7, #8]
 8014cf0:	68f8      	ldr	r0, [r7, #12]
 8014cf2:	f7ff fec5 	bl	8014a80 <etharp_output_to_arp_index>
 8014cf6:	4603      	mov	r3, r0
 8014cf8:	e04a      	b.n	8014d90 <etharp_output+0x1dc>
    }
#endif /* LWIP_NETIF_HWADDRHINT */

    /* find stable entry: do this here since this is a critical path for
       throughput and etharp_find_entry() is kind of slow */
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014cfa:	2300      	movs	r3, #0
 8014cfc:	75fb      	strb	r3, [r7, #23]
 8014cfe:	e031      	b.n	8014d64 <etharp_output+0x1b0>
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d00:	7dfa      	ldrb	r2, [r7, #23]
 8014d02:	492c      	ldr	r1, [pc, #176]	; (8014db4 <etharp_output+0x200>)
 8014d04:	4613      	mov	r3, r2
 8014d06:	005b      	lsls	r3, r3, #1
 8014d08:	4413      	add	r3, r2
 8014d0a:	00db      	lsls	r3, r3, #3
 8014d0c:	440b      	add	r3, r1
 8014d0e:	3314      	adds	r3, #20
 8014d10:	781b      	ldrb	r3, [r3, #0]
 8014d12:	2b01      	cmp	r3, #1
 8014d14:	d923      	bls.n	8014d5e <etharp_output+0x1aa>
#if ETHARP_TABLE_MATCH_NETIF
          (arp_table[i].netif == netif) &&
 8014d16:	7dfa      	ldrb	r2, [r7, #23]
 8014d18:	4926      	ldr	r1, [pc, #152]	; (8014db4 <etharp_output+0x200>)
 8014d1a:	4613      	mov	r3, r2
 8014d1c:	005b      	lsls	r3, r3, #1
 8014d1e:	4413      	add	r3, r2
 8014d20:	00db      	lsls	r3, r3, #3
 8014d22:	440b      	add	r3, r1
 8014d24:	3308      	adds	r3, #8
 8014d26:	681b      	ldr	r3, [r3, #0]
      if ((arp_table[i].state >= ETHARP_STATE_STABLE) &&
 8014d28:	68fa      	ldr	r2, [r7, #12]
 8014d2a:	429a      	cmp	r2, r3
 8014d2c:	d117      	bne.n	8014d5e <etharp_output+0x1aa>
#endif
          (ip4_addr_cmp(dst_addr, &arp_table[i].ipaddr))) {
 8014d2e:	69bb      	ldr	r3, [r7, #24]
 8014d30:	6819      	ldr	r1, [r3, #0]
 8014d32:	7dfa      	ldrb	r2, [r7, #23]
 8014d34:	481f      	ldr	r0, [pc, #124]	; (8014db4 <etharp_output+0x200>)
 8014d36:	4613      	mov	r3, r2
 8014d38:	005b      	lsls	r3, r3, #1
 8014d3a:	4413      	add	r3, r2
 8014d3c:	00db      	lsls	r3, r3, #3
 8014d3e:	4403      	add	r3, r0
 8014d40:	3304      	adds	r3, #4
 8014d42:	681b      	ldr	r3, [r3, #0]
          (arp_table[i].netif == netif) &&
 8014d44:	4299      	cmp	r1, r3
 8014d46:	d10a      	bne.n	8014d5e <etharp_output+0x1aa>
        /* found an existing, stable entry */
        ETHARP_SET_ADDRHINT(netif, i);
 8014d48:	4a19      	ldr	r2, [pc, #100]	; (8014db0 <etharp_output+0x1fc>)
 8014d4a:	7dfb      	ldrb	r3, [r7, #23]
 8014d4c:	7013      	strb	r3, [r2, #0]
        return etharp_output_to_arp_index(netif, q, i);
 8014d4e:	7dfb      	ldrb	r3, [r7, #23]
 8014d50:	461a      	mov	r2, r3
 8014d52:	68b9      	ldr	r1, [r7, #8]
 8014d54:	68f8      	ldr	r0, [r7, #12]
 8014d56:	f7ff fe93 	bl	8014a80 <etharp_output_to_arp_index>
 8014d5a:	4603      	mov	r3, r0
 8014d5c:	e018      	b.n	8014d90 <etharp_output+0x1dc>
    for (i = 0; i < ARP_TABLE_SIZE; i++) {
 8014d5e:	7dfb      	ldrb	r3, [r7, #23]
 8014d60:	3301      	adds	r3, #1
 8014d62:	75fb      	strb	r3, [r7, #23]
 8014d64:	7dfb      	ldrb	r3, [r7, #23]
 8014d66:	2b09      	cmp	r3, #9
 8014d68:	d9ca      	bls.n	8014d00 <etharp_output+0x14c>
      }
    }
    /* no stable entry found, use the (slower) query function:
       queue on destination Ethernet address belonging to ipaddr */
    return etharp_query(netif, dst_addr, q);
 8014d6a:	68ba      	ldr	r2, [r7, #8]
 8014d6c:	69b9      	ldr	r1, [r7, #24]
 8014d6e:	68f8      	ldr	r0, [r7, #12]
 8014d70:	f000 f822 	bl	8014db8 <etharp_query>
 8014d74:	4603      	mov	r3, r0
 8014d76:	e00b      	b.n	8014d90 <etharp_output+0x1dc>
  }

  /* continuation for multicast/broadcast destinations */
  /* obtain source Ethernet address of the given interface */
  /* send packet directly on the link */
  return ethernet_output(netif, q, (struct eth_addr *)(netif->hwaddr), dest, ETHTYPE_IP);
 8014d78:	68fb      	ldr	r3, [r7, #12]
 8014d7a:	f103 0226 	add.w	r2, r3, #38	; 0x26
 8014d7e:	f44f 6300 	mov.w	r3, #2048	; 0x800
 8014d82:	9300      	str	r3, [sp, #0]
 8014d84:	69fb      	ldr	r3, [r7, #28]
 8014d86:	68b9      	ldr	r1, [r7, #8]
 8014d88:	68f8      	ldr	r0, [r7, #12]
 8014d8a:	f001 fd45 	bl	8016818 <ethernet_output>
 8014d8e:	4603      	mov	r3, r0
}
 8014d90:	4618      	mov	r0, r3
 8014d92:	3720      	adds	r7, #32
 8014d94:	46bd      	mov	sp, r7
 8014d96:	bd80      	pop	{r7, pc}
 8014d98:	0801af9c 	.word	0x0801af9c
 8014d9c:	0801b0ec 	.word	0x0801b0ec
 8014da0:	0801b014 	.word	0x0801b014
 8014da4:	0801b13c 	.word	0x0801b13c
 8014da8:	0801b0dc 	.word	0x0801b0dc
 8014dac:	0801b7e4 	.word	0x0801b7e4
 8014db0:	2000f944 	.word	0x2000f944
 8014db4:	2000f854 	.word	0x2000f854

08014db8 <etharp_query>:
 * - ERR_ARG Non-unicast address given, those will not appear in ARP cache.
 *
 */
err_t
etharp_query(struct netif *netif, const ip4_addr_t *ipaddr, struct pbuf *q)
{
 8014db8:	b580      	push	{r7, lr}
 8014dba:	b08c      	sub	sp, #48	; 0x30
 8014dbc:	af02      	add	r7, sp, #8
 8014dbe:	60f8      	str	r0, [r7, #12]
 8014dc0:	60b9      	str	r1, [r7, #8]
 8014dc2:	607a      	str	r2, [r7, #4]
  struct eth_addr *srcaddr = (struct eth_addr *)netif->hwaddr;
 8014dc4:	68fb      	ldr	r3, [r7, #12]
 8014dc6:	3326      	adds	r3, #38	; 0x26
 8014dc8:	617b      	str	r3, [r7, #20]
  err_t result = ERR_MEM;
 8014dca:	23ff      	movs	r3, #255	; 0xff
 8014dcc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
  int is_new_entry = 0;
 8014dd0:	2300      	movs	r3, #0
 8014dd2:	623b      	str	r3, [r7, #32]
  s16_t i_err;
  netif_addr_idx_t i;

  /* non-unicast address? */
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014dd4:	68bb      	ldr	r3, [r7, #8]
 8014dd6:	681b      	ldr	r3, [r3, #0]
 8014dd8:	68f9      	ldr	r1, [r7, #12]
 8014dda:	4618      	mov	r0, r3
 8014ddc:	f000 fe0e 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8014de0:	4603      	mov	r3, r0
 8014de2:	2b00      	cmp	r3, #0
 8014de4:	d10c      	bne.n	8014e00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014de6:	68bb      	ldr	r3, [r7, #8]
 8014de8:	681b      	ldr	r3, [r3, #0]
 8014dea:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
  if (ip4_addr_isbroadcast(ipaddr, netif) ||
 8014dee:	2be0      	cmp	r3, #224	; 0xe0
 8014df0:	d006      	beq.n	8014e00 <etharp_query+0x48>
      ip4_addr_ismulticast(ipaddr) ||
 8014df2:	68bb      	ldr	r3, [r7, #8]
 8014df4:	2b00      	cmp	r3, #0
 8014df6:	d003      	beq.n	8014e00 <etharp_query+0x48>
      ip4_addr_isany(ipaddr)) {
 8014df8:	68bb      	ldr	r3, [r7, #8]
 8014dfa:	681b      	ldr	r3, [r3, #0]
 8014dfc:	2b00      	cmp	r3, #0
 8014dfe:	d102      	bne.n	8014e06 <etharp_query+0x4e>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: will not add non-unicast IP address to ARP cache\n"));
    return ERR_ARG;
 8014e00:	f06f 030f 	mvn.w	r3, #15
 8014e04:	e101      	b.n	801500a <etharp_query+0x252>
  }

  /* find entry in ARP cache, ask to create entry if queueing packet */
  i_err = etharp_find_entry(ipaddr, ETHARP_FLAG_TRY_HARD, netif);
 8014e06:	68fa      	ldr	r2, [r7, #12]
 8014e08:	2101      	movs	r1, #1
 8014e0a:	68b8      	ldr	r0, [r7, #8]
 8014e0c:	f7ff fb60 	bl	80144d0 <etharp_find_entry>
 8014e10:	4603      	mov	r3, r0
 8014e12:	827b      	strh	r3, [r7, #18]

  /* could not find or create entry? */
  if (i_err < 0) {
 8014e14:	f9b7 3012 	ldrsh.w	r3, [r7, #18]
 8014e18:	2b00      	cmp	r3, #0
 8014e1a:	da02      	bge.n	8014e22 <etharp_query+0x6a>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not create ARP entry\n"));
    if (q) {
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: packet dropped\n"));
      ETHARP_STATS_INC(etharp.memerr);
    }
    return (err_t)i_err;
 8014e1c:	8a7b      	ldrh	r3, [r7, #18]
 8014e1e:	b25b      	sxtb	r3, r3
 8014e20:	e0f3      	b.n	801500a <etharp_query+0x252>
  }
  LWIP_ASSERT("type overflow", (size_t)i_err < NETIF_ADDR_IDX_MAX);
 8014e22:	8a7b      	ldrh	r3, [r7, #18]
 8014e24:	2b7e      	cmp	r3, #126	; 0x7e
 8014e26:	d906      	bls.n	8014e36 <etharp_query+0x7e>
 8014e28:	4b7a      	ldr	r3, [pc, #488]	; (8015014 <etharp_query+0x25c>)
 8014e2a:	f240 32c1 	movw	r2, #961	; 0x3c1
 8014e2e:	497a      	ldr	r1, [pc, #488]	; (8015018 <etharp_query+0x260>)
 8014e30:	487a      	ldr	r0, [pc, #488]	; (801501c <etharp_query+0x264>)
 8014e32:	f001 ffdd 	bl	8016df0 <iprintf>
  i = (netif_addr_idx_t)i_err;
 8014e36:	8a7b      	ldrh	r3, [r7, #18]
 8014e38:	747b      	strb	r3, [r7, #17]

  /* mark a fresh entry as pending (we just sent a request) */
  if (arp_table[i].state == ETHARP_STATE_EMPTY) {
 8014e3a:	7c7a      	ldrb	r2, [r7, #17]
 8014e3c:	4978      	ldr	r1, [pc, #480]	; (8015020 <etharp_query+0x268>)
 8014e3e:	4613      	mov	r3, r2
 8014e40:	005b      	lsls	r3, r3, #1
 8014e42:	4413      	add	r3, r2
 8014e44:	00db      	lsls	r3, r3, #3
 8014e46:	440b      	add	r3, r1
 8014e48:	3314      	adds	r3, #20
 8014e4a:	781b      	ldrb	r3, [r3, #0]
 8014e4c:	2b00      	cmp	r3, #0
 8014e4e:	d115      	bne.n	8014e7c <etharp_query+0xc4>
    is_new_entry = 1;
 8014e50:	2301      	movs	r3, #1
 8014e52:	623b      	str	r3, [r7, #32]
    arp_table[i].state = ETHARP_STATE_PENDING;
 8014e54:	7c7a      	ldrb	r2, [r7, #17]
 8014e56:	4972      	ldr	r1, [pc, #456]	; (8015020 <etharp_query+0x268>)
 8014e58:	4613      	mov	r3, r2
 8014e5a:	005b      	lsls	r3, r3, #1
 8014e5c:	4413      	add	r3, r2
 8014e5e:	00db      	lsls	r3, r3, #3
 8014e60:	440b      	add	r3, r1
 8014e62:	3314      	adds	r3, #20
 8014e64:	2201      	movs	r2, #1
 8014e66:	701a      	strb	r2, [r3, #0]
    /* record network interface for re-sending arp request in etharp_tmr */
    arp_table[i].netif = netif;
 8014e68:	7c7a      	ldrb	r2, [r7, #17]
 8014e6a:	496d      	ldr	r1, [pc, #436]	; (8015020 <etharp_query+0x268>)
 8014e6c:	4613      	mov	r3, r2
 8014e6e:	005b      	lsls	r3, r3, #1
 8014e70:	4413      	add	r3, r2
 8014e72:	00db      	lsls	r3, r3, #3
 8014e74:	440b      	add	r3, r1
 8014e76:	3308      	adds	r3, #8
 8014e78:	68fa      	ldr	r2, [r7, #12]
 8014e7a:	601a      	str	r2, [r3, #0]
  }

  /* { i is either a STABLE or (new or existing) PENDING entry } */
  LWIP_ASSERT("arp_table[i].state == PENDING or STABLE",
 8014e7c:	7c7a      	ldrb	r2, [r7, #17]
 8014e7e:	4968      	ldr	r1, [pc, #416]	; (8015020 <etharp_query+0x268>)
 8014e80:	4613      	mov	r3, r2
 8014e82:	005b      	lsls	r3, r3, #1
 8014e84:	4413      	add	r3, r2
 8014e86:	00db      	lsls	r3, r3, #3
 8014e88:	440b      	add	r3, r1
 8014e8a:	3314      	adds	r3, #20
 8014e8c:	781b      	ldrb	r3, [r3, #0]
 8014e8e:	2b01      	cmp	r3, #1
 8014e90:	d011      	beq.n	8014eb6 <etharp_query+0xfe>
 8014e92:	7c7a      	ldrb	r2, [r7, #17]
 8014e94:	4962      	ldr	r1, [pc, #392]	; (8015020 <etharp_query+0x268>)
 8014e96:	4613      	mov	r3, r2
 8014e98:	005b      	lsls	r3, r3, #1
 8014e9a:	4413      	add	r3, r2
 8014e9c:	00db      	lsls	r3, r3, #3
 8014e9e:	440b      	add	r3, r1
 8014ea0:	3314      	adds	r3, #20
 8014ea2:	781b      	ldrb	r3, [r3, #0]
 8014ea4:	2b01      	cmp	r3, #1
 8014ea6:	d806      	bhi.n	8014eb6 <etharp_query+0xfe>
 8014ea8:	4b5a      	ldr	r3, [pc, #360]	; (8015014 <etharp_query+0x25c>)
 8014eaa:	f240 32cd 	movw	r2, #973	; 0x3cd
 8014eae:	495d      	ldr	r1, [pc, #372]	; (8015024 <etharp_query+0x26c>)
 8014eb0:	485a      	ldr	r0, [pc, #360]	; (801501c <etharp_query+0x264>)
 8014eb2:	f001 ff9d 	bl	8016df0 <iprintf>
              ((arp_table[i].state == ETHARP_STATE_PENDING) ||
               (arp_table[i].state >= ETHARP_STATE_STABLE)));

  /* do we have a new entry? or an implicit query request? */
  if (is_new_entry || (q == NULL)) {
 8014eb6:	6a3b      	ldr	r3, [r7, #32]
 8014eb8:	2b00      	cmp	r3, #0
 8014eba:	d102      	bne.n	8014ec2 <etharp_query+0x10a>
 8014ebc:	687b      	ldr	r3, [r7, #4]
 8014ebe:	2b00      	cmp	r3, #0
 8014ec0:	d10c      	bne.n	8014edc <etharp_query+0x124>
    /* try to resolve it; send out ARP request */
    result = etharp_request(netif, ipaddr);
 8014ec2:	68b9      	ldr	r1, [r7, #8]
 8014ec4:	68f8      	ldr	r0, [r7, #12]
 8014ec6:	f000 f963 	bl	8015190 <etharp_request>
 8014eca:	4603      	mov	r3, r0
 8014ecc:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
      /* ARP request couldn't be sent */
      /* We don't re-send arp request in etharp_tmr, but we still queue packets,
         since this failure could be temporary, and the next packet calling
         etharp_query again could lead to sending the queued packets. */
    }
    if (q == NULL) {
 8014ed0:	687b      	ldr	r3, [r7, #4]
 8014ed2:	2b00      	cmp	r3, #0
 8014ed4:	d102      	bne.n	8014edc <etharp_query+0x124>
      return result;
 8014ed6:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
 8014eda:	e096      	b.n	801500a <etharp_query+0x252>
    }
  }

  /* packet given? */
  LWIP_ASSERT("q != NULL", q != NULL);
 8014edc:	687b      	ldr	r3, [r7, #4]
 8014ede:	2b00      	cmp	r3, #0
 8014ee0:	d106      	bne.n	8014ef0 <etharp_query+0x138>
 8014ee2:	4b4c      	ldr	r3, [pc, #304]	; (8015014 <etharp_query+0x25c>)
 8014ee4:	f240 32e1 	movw	r2, #993	; 0x3e1
 8014ee8:	494f      	ldr	r1, [pc, #316]	; (8015028 <etharp_query+0x270>)
 8014eea:	484c      	ldr	r0, [pc, #304]	; (801501c <etharp_query+0x264>)
 8014eec:	f001 ff80 	bl	8016df0 <iprintf>
  /* stable entry? */
  if (arp_table[i].state >= ETHARP_STATE_STABLE) {
 8014ef0:	7c7a      	ldrb	r2, [r7, #17]
 8014ef2:	494b      	ldr	r1, [pc, #300]	; (8015020 <etharp_query+0x268>)
 8014ef4:	4613      	mov	r3, r2
 8014ef6:	005b      	lsls	r3, r3, #1
 8014ef8:	4413      	add	r3, r2
 8014efa:	00db      	lsls	r3, r3, #3
 8014efc:	440b      	add	r3, r1
 8014efe:	3314      	adds	r3, #20
 8014f00:	781b      	ldrb	r3, [r3, #0]
 8014f02:	2b01      	cmp	r3, #1
 8014f04:	d917      	bls.n	8014f36 <etharp_query+0x17e>
    /* we have a valid IP->Ethernet address mapping */
    ETHARP_SET_ADDRHINT(netif, i);
 8014f06:	4a49      	ldr	r2, [pc, #292]	; (801502c <etharp_query+0x274>)
 8014f08:	7c7b      	ldrb	r3, [r7, #17]
 8014f0a:	7013      	strb	r3, [r2, #0]
    /* send the packet */
    result = ethernet_output(netif, q, srcaddr, &(arp_table[i].ethaddr), ETHTYPE_IP);
 8014f0c:	7c7a      	ldrb	r2, [r7, #17]
 8014f0e:	4613      	mov	r3, r2
 8014f10:	005b      	lsls	r3, r3, #1
 8014f12:	4413      	add	r3, r2
 8014f14:	00db      	lsls	r3, r3, #3
 8014f16:	3308      	adds	r3, #8
 8014f18:	4a41      	ldr	r2, [pc, #260]	; (8015020 <etharp_query+0x268>)
 8014f1a:	4413      	add	r3, r2
 8014f1c:	3304      	adds	r3, #4
 8014f1e:	f44f 6200 	mov.w	r2, #2048	; 0x800
 8014f22:	9200      	str	r2, [sp, #0]
 8014f24:	697a      	ldr	r2, [r7, #20]
 8014f26:	6879      	ldr	r1, [r7, #4]
 8014f28:	68f8      	ldr	r0, [r7, #12]
 8014f2a:	f001 fc75 	bl	8016818 <ethernet_output>
 8014f2e:	4603      	mov	r3, r0
 8014f30:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014f34:	e067      	b.n	8015006 <etharp_query+0x24e>
    /* pending entry? (either just created or already pending */
  } else if (arp_table[i].state == ETHARP_STATE_PENDING) {
 8014f36:	7c7a      	ldrb	r2, [r7, #17]
 8014f38:	4939      	ldr	r1, [pc, #228]	; (8015020 <etharp_query+0x268>)
 8014f3a:	4613      	mov	r3, r2
 8014f3c:	005b      	lsls	r3, r3, #1
 8014f3e:	4413      	add	r3, r2
 8014f40:	00db      	lsls	r3, r3, #3
 8014f42:	440b      	add	r3, r1
 8014f44:	3314      	adds	r3, #20
 8014f46:	781b      	ldrb	r3, [r3, #0]
 8014f48:	2b01      	cmp	r3, #1
 8014f4a:	d15c      	bne.n	8015006 <etharp_query+0x24e>
    /* entry is still pending, queue the given packet 'q' */
    struct pbuf *p;
    int copy_needed = 0;
 8014f4c:	2300      	movs	r3, #0
 8014f4e:	61bb      	str	r3, [r7, #24]
    /* IF q includes a pbuf that must be copied, copy the whole chain into a
     * new PBUF_RAM. See the definition of PBUF_NEEDS_COPY for details. */
    p = q;
 8014f50:	687b      	ldr	r3, [r7, #4]
 8014f52:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f54:	e01c      	b.n	8014f90 <etharp_query+0x1d8>
      LWIP_ASSERT("no packet queues allowed!", (p->len != p->tot_len) || (p->next == 0));
 8014f56:	69fb      	ldr	r3, [r7, #28]
 8014f58:	895a      	ldrh	r2, [r3, #10]
 8014f5a:	69fb      	ldr	r3, [r7, #28]
 8014f5c:	891b      	ldrh	r3, [r3, #8]
 8014f5e:	429a      	cmp	r2, r3
 8014f60:	d10a      	bne.n	8014f78 <etharp_query+0x1c0>
 8014f62:	69fb      	ldr	r3, [r7, #28]
 8014f64:	681b      	ldr	r3, [r3, #0]
 8014f66:	2b00      	cmp	r3, #0
 8014f68:	d006      	beq.n	8014f78 <etharp_query+0x1c0>
 8014f6a:	4b2a      	ldr	r3, [pc, #168]	; (8015014 <etharp_query+0x25c>)
 8014f6c:	f240 32f1 	movw	r2, #1009	; 0x3f1
 8014f70:	492f      	ldr	r1, [pc, #188]	; (8015030 <etharp_query+0x278>)
 8014f72:	482a      	ldr	r0, [pc, #168]	; (801501c <etharp_query+0x264>)
 8014f74:	f001 ff3c 	bl	8016df0 <iprintf>
      if (PBUF_NEEDS_COPY(p)) {
 8014f78:	69fb      	ldr	r3, [r7, #28]
 8014f7a:	7b1b      	ldrb	r3, [r3, #12]
 8014f7c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8014f80:	2b00      	cmp	r3, #0
 8014f82:	d002      	beq.n	8014f8a <etharp_query+0x1d2>
        copy_needed = 1;
 8014f84:	2301      	movs	r3, #1
 8014f86:	61bb      	str	r3, [r7, #24]
        break;
 8014f88:	e005      	b.n	8014f96 <etharp_query+0x1de>
      }
      p = p->next;
 8014f8a:	69fb      	ldr	r3, [r7, #28]
 8014f8c:	681b      	ldr	r3, [r3, #0]
 8014f8e:	61fb      	str	r3, [r7, #28]
    while (p) {
 8014f90:	69fb      	ldr	r3, [r7, #28]
 8014f92:	2b00      	cmp	r3, #0
 8014f94:	d1df      	bne.n	8014f56 <etharp_query+0x19e>
    }
    if (copy_needed) {
 8014f96:	69bb      	ldr	r3, [r7, #24]
 8014f98:	2b00      	cmp	r3, #0
 8014f9a:	d007      	beq.n	8014fac <etharp_query+0x1f4>
      /* copy the whole packet into new pbufs */
      p = pbuf_clone(PBUF_LINK, PBUF_RAM, q);
 8014f9c:	687a      	ldr	r2, [r7, #4]
 8014f9e:	f44f 7120 	mov.w	r1, #640	; 0x280
 8014fa2:	200e      	movs	r0, #14
 8014fa4:	f7f8 fbcc 	bl	800d740 <pbuf_clone>
 8014fa8:	61f8      	str	r0, [r7, #28]
 8014faa:	e004      	b.n	8014fb6 <etharp_query+0x1fe>
    } else {
      /* referencing the old pbuf is enough */
      p = q;
 8014fac:	687b      	ldr	r3, [r7, #4]
 8014fae:	61fb      	str	r3, [r7, #28]
      pbuf_ref(p);
 8014fb0:	69f8      	ldr	r0, [r7, #28]
 8014fb2:	f7f8 fa03 	bl	800d3bc <pbuf_ref>
    }
    /* packet could be taken over? */
    if (p != NULL) {
 8014fb6:	69fb      	ldr	r3, [r7, #28]
 8014fb8:	2b00      	cmp	r3, #0
 8014fba:	d021      	beq.n	8015000 <etharp_query+0x248>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
        result = ERR_MEM;
      }
#else /* ARP_QUEUEING */
      /* always queue one packet per ARP request only, freeing a previously queued packet */
      if (arp_table[i].q != NULL) {
 8014fbc:	7c7a      	ldrb	r2, [r7, #17]
 8014fbe:	4918      	ldr	r1, [pc, #96]	; (8015020 <etharp_query+0x268>)
 8014fc0:	4613      	mov	r3, r2
 8014fc2:	005b      	lsls	r3, r3, #1
 8014fc4:	4413      	add	r3, r2
 8014fc6:	00db      	lsls	r3, r3, #3
 8014fc8:	440b      	add	r3, r1
 8014fca:	681b      	ldr	r3, [r3, #0]
 8014fcc:	2b00      	cmp	r3, #0
 8014fce:	d00a      	beq.n	8014fe6 <etharp_query+0x22e>
        LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: dropped previously queued packet %p for ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
        pbuf_free(arp_table[i].q);
 8014fd0:	7c7a      	ldrb	r2, [r7, #17]
 8014fd2:	4913      	ldr	r1, [pc, #76]	; (8015020 <etharp_query+0x268>)
 8014fd4:	4613      	mov	r3, r2
 8014fd6:	005b      	lsls	r3, r3, #1
 8014fd8:	4413      	add	r3, r2
 8014fda:	00db      	lsls	r3, r3, #3
 8014fdc:	440b      	add	r3, r1
 8014fde:	681b      	ldr	r3, [r3, #0]
 8014fe0:	4618      	mov	r0, r3
 8014fe2:	f7f8 f945 	bl	800d270 <pbuf_free>
      }
      arp_table[i].q = p;
 8014fe6:	7c7a      	ldrb	r2, [r7, #17]
 8014fe8:	490d      	ldr	r1, [pc, #52]	; (8015020 <etharp_query+0x268>)
 8014fea:	4613      	mov	r3, r2
 8014fec:	005b      	lsls	r3, r3, #1
 8014fee:	4413      	add	r3, r2
 8014ff0:	00db      	lsls	r3, r3, #3
 8014ff2:	440b      	add	r3, r1
 8014ff4:	69fa      	ldr	r2, [r7, #28]
 8014ff6:	601a      	str	r2, [r3, #0]
      result = ERR_OK;
 8014ff8:	2300      	movs	r3, #0
 8014ffa:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
 8014ffe:	e002      	b.n	8015006 <etharp_query+0x24e>
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: queued packet %p on ARP entry %"U16_F"\n", (void *)q, (u16_t)i));
#endif /* ARP_QUEUEING */
    } else {
      ETHARP_STATS_INC(etharp.memerr);
      LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_query: could not queue a copy of PBUF_REF packet %p (out of memory)\n", (void *)q));
      result = ERR_MEM;
 8015000:	23ff      	movs	r3, #255	; 0xff
 8015002:	f887 3027 	strb.w	r3, [r7, #39]	; 0x27
    }
  }
  return result;
 8015006:	f997 3027 	ldrsb.w	r3, [r7, #39]	; 0x27
}
 801500a:	4618      	mov	r0, r3
 801500c:	3728      	adds	r7, #40	; 0x28
 801500e:	46bd      	mov	sp, r7
 8015010:	bd80      	pop	{r7, pc}
 8015012:	bf00      	nop
 8015014:	0801af9c 	.word	0x0801af9c
 8015018:	0801b148 	.word	0x0801b148
 801501c:	0801b014 	.word	0x0801b014
 8015020:	2000f854 	.word	0x2000f854
 8015024:	0801b158 	.word	0x0801b158
 8015028:	0801b13c 	.word	0x0801b13c
 801502c:	2000f944 	.word	0x2000f944
 8015030:	0801b180 	.word	0x0801b180

08015034 <etharp_raw>:
etharp_raw(struct netif *netif, const struct eth_addr *ethsrc_addr,
           const struct eth_addr *ethdst_addr,
           const struct eth_addr *hwsrc_addr, const ip4_addr_t *ipsrc_addr,
           const struct eth_addr *hwdst_addr, const ip4_addr_t *ipdst_addr,
           const u16_t opcode)
{
 8015034:	b580      	push	{r7, lr}
 8015036:	b08a      	sub	sp, #40	; 0x28
 8015038:	af02      	add	r7, sp, #8
 801503a:	60f8      	str	r0, [r7, #12]
 801503c:	60b9      	str	r1, [r7, #8]
 801503e:	607a      	str	r2, [r7, #4]
 8015040:	603b      	str	r3, [r7, #0]
  struct pbuf *p;
  err_t result = ERR_OK;
 8015042:	2300      	movs	r3, #0
 8015044:	77fb      	strb	r3, [r7, #31]
  struct etharp_hdr *hdr;

  LWIP_ASSERT("netif != NULL", netif != NULL);
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b00      	cmp	r3, #0
 801504a:	d106      	bne.n	801505a <etharp_raw+0x26>
 801504c:	4b3a      	ldr	r3, [pc, #232]	; (8015138 <etharp_raw+0x104>)
 801504e:	f240 4257 	movw	r2, #1111	; 0x457
 8015052:	493a      	ldr	r1, [pc, #232]	; (801513c <etharp_raw+0x108>)
 8015054:	483a      	ldr	r0, [pc, #232]	; (8015140 <etharp_raw+0x10c>)
 8015056:	f001 fecb 	bl	8016df0 <iprintf>

  /* allocate a pbuf for the outgoing ARP request packet */
  p = pbuf_alloc(PBUF_LINK, SIZEOF_ETHARP_HDR, PBUF_RAM);
 801505a:	f44f 7220 	mov.w	r2, #640	; 0x280
 801505e:	211c      	movs	r1, #28
 8015060:	200e      	movs	r0, #14
 8015062:	f7f7 fe21 	bl	800cca8 <pbuf_alloc>
 8015066:	61b8      	str	r0, [r7, #24]
  /* could allocate a pbuf for an ARP request? */
  if (p == NULL) {
 8015068:	69bb      	ldr	r3, [r7, #24]
 801506a:	2b00      	cmp	r3, #0
 801506c:	d102      	bne.n	8015074 <etharp_raw+0x40>
    LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
                ("etharp_raw: could not allocate pbuf for ARP request.\n"));
    ETHARP_STATS_INC(etharp.memerr);
    return ERR_MEM;
 801506e:	f04f 33ff 	mov.w	r3, #4294967295
 8015072:	e05d      	b.n	8015130 <etharp_raw+0xfc>
  }
  LWIP_ASSERT("check that first pbuf can hold struct etharp_hdr",
 8015074:	69bb      	ldr	r3, [r7, #24]
 8015076:	895b      	ldrh	r3, [r3, #10]
 8015078:	2b1b      	cmp	r3, #27
 801507a:	d806      	bhi.n	801508a <etharp_raw+0x56>
 801507c:	4b2e      	ldr	r3, [pc, #184]	; (8015138 <etharp_raw+0x104>)
 801507e:	f240 4262 	movw	r2, #1122	; 0x462
 8015082:	4930      	ldr	r1, [pc, #192]	; (8015144 <etharp_raw+0x110>)
 8015084:	482e      	ldr	r0, [pc, #184]	; (8015140 <etharp_raw+0x10c>)
 8015086:	f001 feb3 	bl	8016df0 <iprintf>
              (p->len >= SIZEOF_ETHARP_HDR));

  hdr = (struct etharp_hdr *)p->payload;
 801508a:	69bb      	ldr	r3, [r7, #24]
 801508c:	685b      	ldr	r3, [r3, #4]
 801508e:	617b      	str	r3, [r7, #20]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_raw: sending raw ARP packet.\n"));
  hdr->opcode = lwip_htons(opcode);
 8015090:	8ebb      	ldrh	r3, [r7, #52]	; 0x34
 8015092:	4618      	mov	r0, r3
 8015094:	f7f6 fcfa 	bl	800ba8c <lwip_htons>
 8015098:	4603      	mov	r3, r0
 801509a:	461a      	mov	r2, r3
 801509c:	697b      	ldr	r3, [r7, #20]
 801509e:	80da      	strh	r2, [r3, #6]

  LWIP_ASSERT("netif->hwaddr_len must be the same as ETH_HWADDR_LEN for etharp!",
 80150a0:	68fb      	ldr	r3, [r7, #12]
 80150a2:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 80150a6:	2b06      	cmp	r3, #6
 80150a8:	d006      	beq.n	80150b8 <etharp_raw+0x84>
 80150aa:	4b23      	ldr	r3, [pc, #140]	; (8015138 <etharp_raw+0x104>)
 80150ac:	f240 4269 	movw	r2, #1129	; 0x469
 80150b0:	4925      	ldr	r1, [pc, #148]	; (8015148 <etharp_raw+0x114>)
 80150b2:	4823      	ldr	r0, [pc, #140]	; (8015140 <etharp_raw+0x10c>)
 80150b4:	f001 fe9c 	bl	8016df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));

  /* Write the ARP MAC-Addresses */
  SMEMCPY(&hdr->shwaddr, hwsrc_addr, ETH_HWADDR_LEN);
 80150b8:	697b      	ldr	r3, [r7, #20]
 80150ba:	3308      	adds	r3, #8
 80150bc:	2206      	movs	r2, #6
 80150be:	6839      	ldr	r1, [r7, #0]
 80150c0:	4618      	mov	r0, r3
 80150c2:	f002 f811 	bl	80170e8 <memcpy>
  SMEMCPY(&hdr->dhwaddr, hwdst_addr, ETH_HWADDR_LEN);
 80150c6:	697b      	ldr	r3, [r7, #20]
 80150c8:	3312      	adds	r3, #18
 80150ca:	2206      	movs	r2, #6
 80150cc:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80150ce:	4618      	mov	r0, r3
 80150d0:	f002 f80a 	bl	80170e8 <memcpy>
  /* Copy struct ip4_addr_wordaligned to aligned ip4_addr, to support compilers without
   * structure packing. */
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->sipaddr, ipsrc_addr);
 80150d4:	697b      	ldr	r3, [r7, #20]
 80150d6:	330e      	adds	r3, #14
 80150d8:	6aba      	ldr	r2, [r7, #40]	; 0x28
 80150da:	6812      	ldr	r2, [r2, #0]
 80150dc:	601a      	str	r2, [r3, #0]
  IPADDR_WORDALIGNED_COPY_FROM_IP4_ADDR_T(&hdr->dipaddr, ipdst_addr);
 80150de:	697b      	ldr	r3, [r7, #20]
 80150e0:	3318      	adds	r3, #24
 80150e2:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80150e4:	6812      	ldr	r2, [r2, #0]
 80150e6:	601a      	str	r2, [r3, #0]

  hdr->hwtype = PP_HTONS(LWIP_IANA_HWTYPE_ETHERNET);
 80150e8:	697b      	ldr	r3, [r7, #20]
 80150ea:	2200      	movs	r2, #0
 80150ec:	701a      	strb	r2, [r3, #0]
 80150ee:	2200      	movs	r2, #0
 80150f0:	f042 0201 	orr.w	r2, r2, #1
 80150f4:	705a      	strb	r2, [r3, #1]
  hdr->proto = PP_HTONS(ETHTYPE_IP);
 80150f6:	697b      	ldr	r3, [r7, #20]
 80150f8:	2200      	movs	r2, #0
 80150fa:	f042 0208 	orr.w	r2, r2, #8
 80150fe:	709a      	strb	r2, [r3, #2]
 8015100:	2200      	movs	r2, #0
 8015102:	70da      	strb	r2, [r3, #3]
  /* set hwlen and protolen */
  hdr->hwlen = ETH_HWADDR_LEN;
 8015104:	697b      	ldr	r3, [r7, #20]
 8015106:	2206      	movs	r2, #6
 8015108:	711a      	strb	r2, [r3, #4]
  hdr->protolen = sizeof(ip4_addr_t);
 801510a:	697b      	ldr	r3, [r7, #20]
 801510c:	2204      	movs	r2, #4
 801510e:	715a      	strb	r2, [r3, #5]
  if (ip4_addr_islinklocal(ipsrc_addr)) {
    ethernet_output(netif, p, ethsrc_addr, &ethbroadcast, ETHTYPE_ARP);
  } else
#endif /* LWIP_AUTOIP */
  {
    ethernet_output(netif, p, ethsrc_addr, ethdst_addr, ETHTYPE_ARP);
 8015110:	f640 0306 	movw	r3, #2054	; 0x806
 8015114:	9300      	str	r3, [sp, #0]
 8015116:	687b      	ldr	r3, [r7, #4]
 8015118:	68ba      	ldr	r2, [r7, #8]
 801511a:	69b9      	ldr	r1, [r7, #24]
 801511c:	68f8      	ldr	r0, [r7, #12]
 801511e:	f001 fb7b 	bl	8016818 <ethernet_output>
  }

  ETHARP_STATS_INC(etharp.xmit);
  /* free ARP query packet */
  pbuf_free(p);
 8015122:	69b8      	ldr	r0, [r7, #24]
 8015124:	f7f8 f8a4 	bl	800d270 <pbuf_free>
  p = NULL;
 8015128:	2300      	movs	r3, #0
 801512a:	61bb      	str	r3, [r7, #24]
  /* could not allocate pbuf for ARP request */

  return result;
 801512c:	f997 301f 	ldrsb.w	r3, [r7, #31]
}
 8015130:	4618      	mov	r0, r3
 8015132:	3720      	adds	r7, #32
 8015134:	46bd      	mov	sp, r7
 8015136:	bd80      	pop	{r7, pc}
 8015138:	0801af9c 	.word	0x0801af9c
 801513c:	0801b0ec 	.word	0x0801b0ec
 8015140:	0801b014 	.word	0x0801b014
 8015144:	0801b19c 	.word	0x0801b19c
 8015148:	0801b1d0 	.word	0x0801b1d0

0801514c <etharp_request_dst>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
static err_t
etharp_request_dst(struct netif *netif, const ip4_addr_t *ipaddr, const struct eth_addr *hw_dst_addr)
{
 801514c:	b580      	push	{r7, lr}
 801514e:	b088      	sub	sp, #32
 8015150:	af04      	add	r7, sp, #16
 8015152:	60f8      	str	r0, [r7, #12]
 8015154:	60b9      	str	r1, [r7, #8]
 8015156:	607a      	str	r2, [r7, #4]
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015158:	68fb      	ldr	r3, [r7, #12]
 801515a:	f103 0126 	add.w	r1, r3, #38	; 0x26
                    (struct eth_addr *)netif->hwaddr, netif_ip4_addr(netif), &ethzero,
 801515e:	68fb      	ldr	r3, [r7, #12]
 8015160:	f103 0026 	add.w	r0, r3, #38	; 0x26
 8015164:	68fb      	ldr	r3, [r7, #12]
 8015166:	3304      	adds	r3, #4
  return etharp_raw(netif, (struct eth_addr *)netif->hwaddr, hw_dst_addr,
 8015168:	2201      	movs	r2, #1
 801516a:	9203      	str	r2, [sp, #12]
 801516c:	68ba      	ldr	r2, [r7, #8]
 801516e:	9202      	str	r2, [sp, #8]
 8015170:	4a06      	ldr	r2, [pc, #24]	; (801518c <etharp_request_dst+0x40>)
 8015172:	9201      	str	r2, [sp, #4]
 8015174:	9300      	str	r3, [sp, #0]
 8015176:	4603      	mov	r3, r0
 8015178:	687a      	ldr	r2, [r7, #4]
 801517a:	68f8      	ldr	r0, [r7, #12]
 801517c:	f7ff ff5a 	bl	8015034 <etharp_raw>
 8015180:	4603      	mov	r3, r0
                    ipaddr, ARP_REQUEST);
}
 8015182:	4618      	mov	r0, r3
 8015184:	3710      	adds	r7, #16
 8015186:	46bd      	mov	sp, r7
 8015188:	bd80      	pop	{r7, pc}
 801518a:	bf00      	nop
 801518c:	0801b7ec 	.word	0x0801b7ec

08015190 <etharp_request>:
 *         ERR_MEM if the ARP packet couldn't be allocated
 *         any other err_t on failure
 */
err_t
etharp_request(struct netif *netif, const ip4_addr_t *ipaddr)
{
 8015190:	b580      	push	{r7, lr}
 8015192:	b082      	sub	sp, #8
 8015194:	af00      	add	r7, sp, #0
 8015196:	6078      	str	r0, [r7, #4]
 8015198:	6039      	str	r1, [r7, #0]
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE, ("etharp_request: sending ARP request.\n"));
  return etharp_request_dst(netif, ipaddr, &ethbroadcast);
 801519a:	4a05      	ldr	r2, [pc, #20]	; (80151b0 <etharp_request+0x20>)
 801519c:	6839      	ldr	r1, [r7, #0]
 801519e:	6878      	ldr	r0, [r7, #4]
 80151a0:	f7ff ffd4 	bl	801514c <etharp_request_dst>
 80151a4:	4603      	mov	r3, r0
}
 80151a6:	4618      	mov	r0, r3
 80151a8:	3708      	adds	r7, #8
 80151aa:	46bd      	mov	sp, r7
 80151ac:	bd80      	pop	{r7, pc}
 80151ae:	bf00      	nop
 80151b0:	0801b7e4 	.word	0x0801b7e4

080151b4 <icmp_input>:
 * @param p the icmp echo request packet, p->payload pointing to the icmp header
 * @param inp the netif on which this packet was received
 */
void
icmp_input(struct pbuf *p, struct netif *inp)
{
 80151b4:	b580      	push	{r7, lr}
 80151b6:	b08e      	sub	sp, #56	; 0x38
 80151b8:	af04      	add	r7, sp, #16
 80151ba:	6078      	str	r0, [r7, #4]
 80151bc:	6039      	str	r1, [r7, #0]
  const ip4_addr_t *src;

  ICMP_STATS_INC(icmp.recv);
  MIB2_STATS_INC(mib2.icmpinmsgs);

  iphdr_in = ip4_current_header();
 80151be:	4b79      	ldr	r3, [pc, #484]	; (80153a4 <icmp_input+0x1f0>)
 80151c0:	689b      	ldr	r3, [r3, #8]
 80151c2:	627b      	str	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(iphdr_in);
 80151c4:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80151c6:	781b      	ldrb	r3, [r3, #0]
 80151c8:	f003 030f 	and.w	r3, r3, #15
 80151cc:	b2db      	uxtb	r3, r3
 80151ce:	009b      	lsls	r3, r3, #2
 80151d0:	b2db      	uxtb	r3, r3
 80151d2:	847b      	strh	r3, [r7, #34]	; 0x22
  if (hlen < IP_HLEN) {
 80151d4:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80151d6:	2b13      	cmp	r3, #19
 80151d8:	f240 80cd 	bls.w	8015376 <icmp_input+0x1c2>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short IP header (%"S16_F" bytes) received\n", hlen));
    goto lenerr;
  }
  if (p->len < sizeof(u16_t) * 2) {
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	895b      	ldrh	r3, [r3, #10]
 80151e0:	2b03      	cmp	r3, #3
 80151e2:	f240 80ca 	bls.w	801537a <icmp_input+0x1c6>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: short ICMP (%"U16_F" bytes) received\n", p->tot_len));
    goto lenerr;
  }

  type = *((u8_t *)p->payload);
 80151e6:	687b      	ldr	r3, [r7, #4]
 80151e8:	685b      	ldr	r3, [r3, #4]
 80151ea:	781b      	ldrb	r3, [r3, #0]
 80151ec:	f887 3021 	strb.w	r3, [r7, #33]	; 0x21
#ifdef LWIP_DEBUG
  code = *(((u8_t *)p->payload) + 1);
  /* if debug is enabled but debug statement below is somehow disabled: */
  LWIP_UNUSED_ARG(code);
#endif /* LWIP_DEBUG */
  switch (type) {
 80151f0:	f897 3021 	ldrb.w	r3, [r7, #33]	; 0x21
 80151f4:	2b00      	cmp	r3, #0
 80151f6:	f000 80b7 	beq.w	8015368 <icmp_input+0x1b4>
 80151fa:	2b08      	cmp	r3, #8
 80151fc:	f040 80b7 	bne.w	801536e <icmp_input+0x1ba>
         (as obviously, an echo request has been sent, too). */
      MIB2_STATS_INC(mib2.icmpinechoreps);
      break;
    case ICMP_ECHO:
      MIB2_STATS_INC(mib2.icmpinechos);
      src = ip4_current_dest_addr();
 8015200:	4b69      	ldr	r3, [pc, #420]	; (80153a8 <icmp_input+0x1f4>)
 8015202:	61fb      	str	r3, [r7, #28]
      /* multicast destination address? */
      if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015204:	4b67      	ldr	r3, [pc, #412]	; (80153a4 <icmp_input+0x1f0>)
 8015206:	695b      	ldr	r3, [r3, #20]
 8015208:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801520c:	2be0      	cmp	r3, #224	; 0xe0
 801520e:	f000 80bb 	beq.w	8015388 <icmp_input+0x1d4>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to multicast pings\n"));
        goto icmperr;
#endif /* LWIP_MULTICAST_PING */
      }
      /* broadcast destination address? */
      if (ip4_addr_isbroadcast(ip4_current_dest_addr(), ip_current_netif())) {
 8015212:	4b64      	ldr	r3, [pc, #400]	; (80153a4 <icmp_input+0x1f0>)
 8015214:	695b      	ldr	r3, [r3, #20]
 8015216:	4a63      	ldr	r2, [pc, #396]	; (80153a4 <icmp_input+0x1f0>)
 8015218:	6812      	ldr	r2, [r2, #0]
 801521a:	4611      	mov	r1, r2
 801521c:	4618      	mov	r0, r3
 801521e:	f000 fbed 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8015222:	4603      	mov	r3, r0
 8015224:	2b00      	cmp	r3, #0
 8015226:	f040 80b1 	bne.w	801538c <icmp_input+0x1d8>
        LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: Not echoing to broadcast pings\n"));
        goto icmperr;
#endif /* LWIP_BROADCAST_PING */
      }
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ping\n"));
      if (p->tot_len < sizeof(struct icmp_echo_hdr)) {
 801522a:	687b      	ldr	r3, [r7, #4]
 801522c:	891b      	ldrh	r3, [r3, #8]
 801522e:	2b07      	cmp	r3, #7
 8015230:	f240 80a5 	bls.w	801537e <icmp_input+0x1ca>
          return;
        }
      }
#endif
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN
      if (pbuf_add_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 8015234:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015236:	330e      	adds	r3, #14
 8015238:	4619      	mov	r1, r3
 801523a:	6878      	ldr	r0, [r7, #4]
 801523c:	f7f7 ff82 	bl	800d144 <pbuf_add_header>
 8015240:	4603      	mov	r3, r0
 8015242:	2b00      	cmp	r3, #0
 8015244:	d04b      	beq.n	80152de <icmp_input+0x12a>
        /* p is not big enough to contain link headers
         * allocate a new one and copy p into it
         */
        struct pbuf *r;
        u16_t alloc_len = (u16_t)(p->tot_len + hlen);
 8015246:	687b      	ldr	r3, [r7, #4]
 8015248:	891a      	ldrh	r2, [r3, #8]
 801524a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801524c:	4413      	add	r3, r2
 801524e:	837b      	strh	r3, [r7, #26]
        if (alloc_len < p->tot_len) {
 8015250:	687b      	ldr	r3, [r7, #4]
 8015252:	891b      	ldrh	r3, [r3, #8]
 8015254:	8b7a      	ldrh	r2, [r7, #26]
 8015256:	429a      	cmp	r2, r3
 8015258:	f0c0 809a 	bcc.w	8015390 <icmp_input+0x1dc>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed (tot_len overflow)\n"));
          goto icmperr;
        }
        /* allocate new packet buffer with space for link headers */
        r = pbuf_alloc(PBUF_LINK, alloc_len, PBUF_RAM);
 801525c:	8b7b      	ldrh	r3, [r7, #26]
 801525e:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015262:	4619      	mov	r1, r3
 8015264:	200e      	movs	r0, #14
 8015266:	f7f7 fd1f 	bl	800cca8 <pbuf_alloc>
 801526a:	6178      	str	r0, [r7, #20]
        if (r == NULL) {
 801526c:	697b      	ldr	r3, [r7, #20]
 801526e:	2b00      	cmp	r3, #0
 8015270:	f000 8090 	beq.w	8015394 <icmp_input+0x1e0>
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: allocating new pbuf failed\n"));
          goto icmperr;
        }
        if (r->len < hlen + sizeof(struct icmp_echo_hdr)) {
 8015274:	697b      	ldr	r3, [r7, #20]
 8015276:	895b      	ldrh	r3, [r3, #10]
 8015278:	461a      	mov	r2, r3
 801527a:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801527c:	3308      	adds	r3, #8
 801527e:	429a      	cmp	r2, r3
 8015280:	d203      	bcs.n	801528a <icmp_input+0xd6>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("first pbuf cannot hold the ICMP header"));
          pbuf_free(r);
 8015282:	6978      	ldr	r0, [r7, #20]
 8015284:	f7f7 fff4 	bl	800d270 <pbuf_free>
          goto icmperr;
 8015288:	e085      	b.n	8015396 <icmp_input+0x1e2>
        }
        /* copy the ip header */
        MEMCPY(r->payload, iphdr_in, hlen);
 801528a:	697b      	ldr	r3, [r7, #20]
 801528c:	685b      	ldr	r3, [r3, #4]
 801528e:	8c7a      	ldrh	r2, [r7, #34]	; 0x22
 8015290:	6a79      	ldr	r1, [r7, #36]	; 0x24
 8015292:	4618      	mov	r0, r3
 8015294:	f001 ff28 	bl	80170e8 <memcpy>
        /* switch r->payload back to icmp header (cannot fail) */
        if (pbuf_remove_header(r, hlen)) {
 8015298:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 801529a:	4619      	mov	r1, r3
 801529c:	6978      	ldr	r0, [r7, #20]
 801529e:	f7f7 ff61 	bl	800d164 <pbuf_remove_header>
 80152a2:	4603      	mov	r3, r0
 80152a4:	2b00      	cmp	r3, #0
 80152a6:	d009      	beq.n	80152bc <icmp_input+0x108>
          LWIP_ASSERT("icmp_input: moving r->payload to icmp header failed\n", 0);
 80152a8:	4b40      	ldr	r3, [pc, #256]	; (80153ac <icmp_input+0x1f8>)
 80152aa:	22b6      	movs	r2, #182	; 0xb6
 80152ac:	4940      	ldr	r1, [pc, #256]	; (80153b0 <icmp_input+0x1fc>)
 80152ae:	4841      	ldr	r0, [pc, #260]	; (80153b4 <icmp_input+0x200>)
 80152b0:	f001 fd9e 	bl	8016df0 <iprintf>
          pbuf_free(r);
 80152b4:	6978      	ldr	r0, [r7, #20]
 80152b6:	f7f7 ffdb 	bl	800d270 <pbuf_free>
          goto icmperr;
 80152ba:	e06c      	b.n	8015396 <icmp_input+0x1e2>
        }
        /* copy the rest of the packet without ip header */
        if (pbuf_copy(r, p) != ERR_OK) {
 80152bc:	6879      	ldr	r1, [r7, #4]
 80152be:	6978      	ldr	r0, [r7, #20]
 80152c0:	f7f8 f8fa 	bl	800d4b8 <pbuf_copy>
 80152c4:	4603      	mov	r3, r0
 80152c6:	2b00      	cmp	r3, #0
 80152c8:	d003      	beq.n	80152d2 <icmp_input+0x11e>
          LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("icmp_input: copying to new pbuf failed"));
          pbuf_free(r);
 80152ca:	6978      	ldr	r0, [r7, #20]
 80152cc:	f7f7 ffd0 	bl	800d270 <pbuf_free>
          goto icmperr;
 80152d0:	e061      	b.n	8015396 <icmp_input+0x1e2>
        }
        /* free the original p */
        pbuf_free(p);
 80152d2:	6878      	ldr	r0, [r7, #4]
 80152d4:	f7f7 ffcc 	bl	800d270 <pbuf_free>
        /* we now have an identical copy of p that has room for link headers */
        p = r;
 80152d8:	697b      	ldr	r3, [r7, #20]
 80152da:	607b      	str	r3, [r7, #4]
 80152dc:	e00f      	b.n	80152fe <icmp_input+0x14a>
      } else {
        /* restore p->payload to point to icmp header (cannot fail) */
        if (pbuf_remove_header(p, hlen + PBUF_LINK_HLEN + PBUF_LINK_ENCAPSULATION_HLEN)) {
 80152de:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 80152e0:	330e      	adds	r3, #14
 80152e2:	4619      	mov	r1, r3
 80152e4:	6878      	ldr	r0, [r7, #4]
 80152e6:	f7f7 ff3d 	bl	800d164 <pbuf_remove_header>
 80152ea:	4603      	mov	r3, r0
 80152ec:	2b00      	cmp	r3, #0
 80152ee:	d006      	beq.n	80152fe <icmp_input+0x14a>
          LWIP_ASSERT("icmp_input: restoring original p->payload failed\n", 0);
 80152f0:	4b2e      	ldr	r3, [pc, #184]	; (80153ac <icmp_input+0x1f8>)
 80152f2:	22c7      	movs	r2, #199	; 0xc7
 80152f4:	4930      	ldr	r1, [pc, #192]	; (80153b8 <icmp_input+0x204>)
 80152f6:	482f      	ldr	r0, [pc, #188]	; (80153b4 <icmp_input+0x200>)
 80152f8:	f001 fd7a 	bl	8016df0 <iprintf>
          goto icmperr;
 80152fc:	e04b      	b.n	8015396 <icmp_input+0x1e2>
      }
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN */
      /* At this point, all checks are OK. */
      /* We generate an answer by switching the dest and src ip addresses,
       * setting the icmp type to ECHO_RESPONSE and updating the checksum. */
      iecho = (struct icmp_echo_hdr *)p->payload;
 80152fe:	687b      	ldr	r3, [r7, #4]
 8015300:	685b      	ldr	r3, [r3, #4]
 8015302:	613b      	str	r3, [r7, #16]
      if (pbuf_add_header(p, hlen)) {
 8015304:	8c7b      	ldrh	r3, [r7, #34]	; 0x22
 8015306:	4619      	mov	r1, r3
 8015308:	6878      	ldr	r0, [r7, #4]
 801530a:	f7f7 ff1b 	bl	800d144 <pbuf_add_header>
 801530e:	4603      	mov	r3, r0
 8015310:	2b00      	cmp	r3, #0
 8015312:	d12b      	bne.n	801536c <icmp_input+0x1b8>
        LWIP_DEBUGF(ICMP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("Can't move over header in packet"));
      } else {
        err_t ret;
        struct ip_hdr *iphdr = (struct ip_hdr *)p->payload;
 8015314:	687b      	ldr	r3, [r7, #4]
 8015316:	685b      	ldr	r3, [r3, #4]
 8015318:	60fb      	str	r3, [r7, #12]
        ip4_addr_copy(iphdr->src, *src);
 801531a:	69fb      	ldr	r3, [r7, #28]
 801531c:	681a      	ldr	r2, [r3, #0]
 801531e:	68fb      	ldr	r3, [r7, #12]
 8015320:	60da      	str	r2, [r3, #12]
        ip4_addr_copy(iphdr->dest, *ip4_current_src_addr());
 8015322:	4b20      	ldr	r3, [pc, #128]	; (80153a4 <icmp_input+0x1f0>)
 8015324:	691a      	ldr	r2, [r3, #16]
 8015326:	68fb      	ldr	r3, [r7, #12]
 8015328:	611a      	str	r2, [r3, #16]
        ICMPH_TYPE_SET(iecho, ICMP_ER);
 801532a:	693b      	ldr	r3, [r7, #16]
 801532c:	2200      	movs	r2, #0
 801532e:	701a      	strb	r2, [r3, #0]
        else {
          iecho->chksum = 0;
        }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF */
#else /* CHECKSUM_GEN_ICMP */
        iecho->chksum = 0;
 8015330:	693b      	ldr	r3, [r7, #16]
 8015332:	2200      	movs	r2, #0
 8015334:	709a      	strb	r2, [r3, #2]
 8015336:	2200      	movs	r2, #0
 8015338:	70da      	strb	r2, [r3, #3]
#endif /* CHECKSUM_GEN_ICMP */

        /* Set the correct TTL and recalculate the header checksum. */
        IPH_TTL_SET(iphdr, ICMP_TTL);
 801533a:	68fb      	ldr	r3, [r7, #12]
 801533c:	22ff      	movs	r2, #255	; 0xff
 801533e:	721a      	strb	r2, [r3, #8]
        IPH_CHKSUM_SET(iphdr, 0);
 8015340:	68fb      	ldr	r3, [r7, #12]
 8015342:	2200      	movs	r2, #0
 8015344:	729a      	strb	r2, [r3, #10]
 8015346:	2200      	movs	r2, #0
 8015348:	72da      	strb	r2, [r3, #11]
        MIB2_STATS_INC(mib2.icmpoutmsgs);
        /* increase number of echo replies attempted to send */
        MIB2_STATS_INC(mib2.icmpoutechoreps);

        /* send an ICMP packet */
        ret = ip4_output_if(p, src, LWIP_IP_HDRINCL,
 801534a:	683b      	ldr	r3, [r7, #0]
 801534c:	9302      	str	r3, [sp, #8]
 801534e:	2301      	movs	r3, #1
 8015350:	9301      	str	r3, [sp, #4]
 8015352:	2300      	movs	r3, #0
 8015354:	9300      	str	r3, [sp, #0]
 8015356:	23ff      	movs	r3, #255	; 0xff
 8015358:	2200      	movs	r2, #0
 801535a:	69f9      	ldr	r1, [r7, #28]
 801535c:	6878      	ldr	r0, [r7, #4]
 801535e:	f000 fa75 	bl	801584c <ip4_output_if>
 8015362:	4603      	mov	r3, r0
 8015364:	72fb      	strb	r3, [r7, #11]
                            ICMP_TTL, 0, IP_PROTO_ICMP, inp);
        if (ret != ERR_OK) {
          LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ip_output_if returned an error: %s\n", lwip_strerr(ret)));
        }
      }
      break;
 8015366:	e001      	b.n	801536c <icmp_input+0x1b8>
      break;
 8015368:	bf00      	nop
 801536a:	e000      	b.n	801536e <icmp_input+0x1ba>
      break;
 801536c:	bf00      	nop
      LWIP_DEBUGF(ICMP_DEBUG, ("icmp_input: ICMP type %"S16_F" code %"S16_F" not supported.\n",
                               (s16_t)type, (s16_t)code));
      ICMP_STATS_INC(icmp.proterr);
      ICMP_STATS_INC(icmp.drop);
  }
  pbuf_free(p);
 801536e:	6878      	ldr	r0, [r7, #4]
 8015370:	f7f7 ff7e 	bl	800d270 <pbuf_free>
  return;
 8015374:	e013      	b.n	801539e <icmp_input+0x1ea>
    goto lenerr;
 8015376:	bf00      	nop
 8015378:	e002      	b.n	8015380 <icmp_input+0x1cc>
    goto lenerr;
 801537a:	bf00      	nop
 801537c:	e000      	b.n	8015380 <icmp_input+0x1cc>
        goto lenerr;
 801537e:	bf00      	nop
lenerr:
  pbuf_free(p);
 8015380:	6878      	ldr	r0, [r7, #4]
 8015382:	f7f7 ff75 	bl	800d270 <pbuf_free>
  ICMP_STATS_INC(icmp.lenerr);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 8015386:	e00a      	b.n	801539e <icmp_input+0x1ea>
        goto icmperr;
 8015388:	bf00      	nop
 801538a:	e004      	b.n	8015396 <icmp_input+0x1e2>
        goto icmperr;
 801538c:	bf00      	nop
 801538e:	e002      	b.n	8015396 <icmp_input+0x1e2>
          goto icmperr;
 8015390:	bf00      	nop
 8015392:	e000      	b.n	8015396 <icmp_input+0x1e2>
          goto icmperr;
 8015394:	bf00      	nop
#if LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING
icmperr:
  pbuf_free(p);
 8015396:	6878      	ldr	r0, [r7, #4]
 8015398:	f7f7 ff6a 	bl	800d270 <pbuf_free>
  ICMP_STATS_INC(icmp.err);
  MIB2_STATS_INC(mib2.icmpinerrors);
  return;
 801539c:	bf00      	nop
#endif /* LWIP_ICMP_ECHO_CHECK_INPUT_PBUF_LEN || !LWIP_MULTICAST_PING || !LWIP_BROADCAST_PING */
}
 801539e:	3728      	adds	r7, #40	; 0x28
 80153a0:	46bd      	mov	sp, r7
 80153a2:	bd80      	pop	{r7, pc}
 80153a4:	20009ee0 	.word	0x20009ee0
 80153a8:	20009ef4 	.word	0x20009ef4
 80153ac:	0801b214 	.word	0x0801b214
 80153b0:	0801b24c 	.word	0x0801b24c
 80153b4:	0801b284 	.word	0x0801b284
 80153b8:	0801b2ac 	.word	0x0801b2ac

080153bc <icmp_dest_unreach>:
 *          p->payload pointing to the IP header
 * @param t type of the 'unreachable' packet
 */
void
icmp_dest_unreach(struct pbuf *p, enum icmp_dur_type t)
{
 80153bc:	b580      	push	{r7, lr}
 80153be:	b082      	sub	sp, #8
 80153c0:	af00      	add	r7, sp, #0
 80153c2:	6078      	str	r0, [r7, #4]
 80153c4:	460b      	mov	r3, r1
 80153c6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpoutdestunreachs);
  icmp_send_response(p, ICMP_DUR, t);
 80153c8:	78fb      	ldrb	r3, [r7, #3]
 80153ca:	461a      	mov	r2, r3
 80153cc:	2103      	movs	r1, #3
 80153ce:	6878      	ldr	r0, [r7, #4]
 80153d0:	f000 f814 	bl	80153fc <icmp_send_response>
}
 80153d4:	bf00      	nop
 80153d6:	3708      	adds	r7, #8
 80153d8:	46bd      	mov	sp, r7
 80153da:	bd80      	pop	{r7, pc}

080153dc <icmp_time_exceeded>:
 *          p->payload pointing to the IP header
 * @param t type of the 'time exceeded' packet
 */
void
icmp_time_exceeded(struct pbuf *p, enum icmp_te_type t)
{
 80153dc:	b580      	push	{r7, lr}
 80153de:	b082      	sub	sp, #8
 80153e0:	af00      	add	r7, sp, #0
 80153e2:	6078      	str	r0, [r7, #4]
 80153e4:	460b      	mov	r3, r1
 80153e6:	70fb      	strb	r3, [r7, #3]
  MIB2_STATS_INC(mib2.icmpouttimeexcds);
  icmp_send_response(p, ICMP_TE, t);
 80153e8:	78fb      	ldrb	r3, [r7, #3]
 80153ea:	461a      	mov	r2, r3
 80153ec:	210b      	movs	r1, #11
 80153ee:	6878      	ldr	r0, [r7, #4]
 80153f0:	f000 f804 	bl	80153fc <icmp_send_response>
}
 80153f4:	bf00      	nop
 80153f6:	3708      	adds	r7, #8
 80153f8:	46bd      	mov	sp, r7
 80153fa:	bd80      	pop	{r7, pc}

080153fc <icmp_send_response>:
 * @param type Type of the ICMP header
 * @param code Code of the ICMP header
 */
static void
icmp_send_response(struct pbuf *p, u8_t type, u8_t code)
{
 80153fc:	b580      	push	{r7, lr}
 80153fe:	b08c      	sub	sp, #48	; 0x30
 8015400:	af04      	add	r7, sp, #16
 8015402:	6078      	str	r0, [r7, #4]
 8015404:	460b      	mov	r3, r1
 8015406:	70fb      	strb	r3, [r7, #3]
 8015408:	4613      	mov	r3, r2
 801540a:	70bb      	strb	r3, [r7, #2]

  /* increase number of messages attempted to send */
  MIB2_STATS_INC(mib2.icmpoutmsgs);

  /* ICMP header + IP header + 8 bytes of data */
  q = pbuf_alloc(PBUF_IP, sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE,
 801540c:	f44f 7220 	mov.w	r2, #640	; 0x280
 8015410:	2124      	movs	r1, #36	; 0x24
 8015412:	2022      	movs	r0, #34	; 0x22
 8015414:	f7f7 fc48 	bl	800cca8 <pbuf_alloc>
 8015418:	61f8      	str	r0, [r7, #28]
                 PBUF_RAM);
  if (q == NULL) {
 801541a:	69fb      	ldr	r3, [r7, #28]
 801541c:	2b00      	cmp	r3, #0
 801541e:	d04c      	beq.n	80154ba <icmp_send_response+0xbe>
    LWIP_DEBUGF(ICMP_DEBUG, ("icmp_time_exceeded: failed to allocate pbuf for ICMP packet.\n"));
    MIB2_STATS_INC(mib2.icmpouterrors);
    return;
  }
  LWIP_ASSERT("check that first pbuf can hold icmp message",
 8015420:	69fb      	ldr	r3, [r7, #28]
 8015422:	895b      	ldrh	r3, [r3, #10]
 8015424:	2b23      	cmp	r3, #35	; 0x23
 8015426:	d806      	bhi.n	8015436 <icmp_send_response+0x3a>
 8015428:	4b26      	ldr	r3, [pc, #152]	; (80154c4 <icmp_send_response+0xc8>)
 801542a:	f44f 72b4 	mov.w	r2, #360	; 0x168
 801542e:	4926      	ldr	r1, [pc, #152]	; (80154c8 <icmp_send_response+0xcc>)
 8015430:	4826      	ldr	r0, [pc, #152]	; (80154cc <icmp_send_response+0xd0>)
 8015432:	f001 fcdd 	bl	8016df0 <iprintf>
              (q->len >= (sizeof(struct icmp_echo_hdr) + IP_HLEN + ICMP_DEST_UNREACH_DATASIZE)));

  iphdr = (struct ip_hdr *)p->payload;
 8015436:	687b      	ldr	r3, [r7, #4]
 8015438:	685b      	ldr	r3, [r3, #4]
 801543a:	61bb      	str	r3, [r7, #24]
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->src);
  LWIP_DEBUGF(ICMP_DEBUG, (" to "));
  ip4_addr_debug_print_val(ICMP_DEBUG, iphdr->dest);
  LWIP_DEBUGF(ICMP_DEBUG, ("\n"));

  icmphdr = (struct icmp_echo_hdr *)q->payload;
 801543c:	69fb      	ldr	r3, [r7, #28]
 801543e:	685b      	ldr	r3, [r3, #4]
 8015440:	617b      	str	r3, [r7, #20]
  icmphdr->type = type;
 8015442:	697b      	ldr	r3, [r7, #20]
 8015444:	78fa      	ldrb	r2, [r7, #3]
 8015446:	701a      	strb	r2, [r3, #0]
  icmphdr->code = code;
 8015448:	697b      	ldr	r3, [r7, #20]
 801544a:	78ba      	ldrb	r2, [r7, #2]
 801544c:	705a      	strb	r2, [r3, #1]
  icmphdr->id = 0;
 801544e:	697b      	ldr	r3, [r7, #20]
 8015450:	2200      	movs	r2, #0
 8015452:	711a      	strb	r2, [r3, #4]
 8015454:	2200      	movs	r2, #0
 8015456:	715a      	strb	r2, [r3, #5]
  icmphdr->seqno = 0;
 8015458:	697b      	ldr	r3, [r7, #20]
 801545a:	2200      	movs	r2, #0
 801545c:	719a      	strb	r2, [r3, #6]
 801545e:	2200      	movs	r2, #0
 8015460:	71da      	strb	r2, [r3, #7]

  /* copy fields from original packet */
  SMEMCPY((u8_t *)q->payload + sizeof(struct icmp_echo_hdr), (u8_t *)p->payload,
 8015462:	69fb      	ldr	r3, [r7, #28]
 8015464:	685b      	ldr	r3, [r3, #4]
 8015466:	f103 0008 	add.w	r0, r3, #8
 801546a:	687b      	ldr	r3, [r7, #4]
 801546c:	685b      	ldr	r3, [r3, #4]
 801546e:	221c      	movs	r2, #28
 8015470:	4619      	mov	r1, r3
 8015472:	f001 fe39 	bl	80170e8 <memcpy>
          IP_HLEN + ICMP_DEST_UNREACH_DATASIZE);

  ip4_addr_copy(iphdr_src, iphdr->src);
 8015476:	69bb      	ldr	r3, [r7, #24]
 8015478:	68db      	ldr	r3, [r3, #12]
 801547a:	60fb      	str	r3, [r7, #12]
    ip4_addr_t iphdr_dst;
    ip4_addr_copy(iphdr_dst, iphdr->dest);
    netif = ip4_route_src(&iphdr_dst, &iphdr_src);
  }
#else
  netif = ip4_route(&iphdr_src);
 801547c:	f107 030c 	add.w	r3, r7, #12
 8015480:	4618      	mov	r0, r3
 8015482:	f000 f825 	bl	80154d0 <ip4_route>
 8015486:	6138      	str	r0, [r7, #16]
#endif
  if (netif != NULL) {
 8015488:	693b      	ldr	r3, [r7, #16]
 801548a:	2b00      	cmp	r3, #0
 801548c:	d011      	beq.n	80154b2 <icmp_send_response+0xb6>
    /* calculate checksum */
    icmphdr->chksum = 0;
 801548e:	697b      	ldr	r3, [r7, #20]
 8015490:	2200      	movs	r2, #0
 8015492:	709a      	strb	r2, [r3, #2]
 8015494:	2200      	movs	r2, #0
 8015496:	70da      	strb	r2, [r3, #3]
    IF__NETIF_CHECKSUM_ENABLED(netif, NETIF_CHECKSUM_GEN_ICMP) {
      icmphdr->chksum = inet_chksum(icmphdr, q->len);
    }
#endif
    ICMP_STATS_INC(icmp.xmit);
    ip4_output_if(q, NULL, &iphdr_src, ICMP_TTL, 0, IP_PROTO_ICMP, netif);
 8015498:	f107 020c 	add.w	r2, r7, #12
 801549c:	693b      	ldr	r3, [r7, #16]
 801549e:	9302      	str	r3, [sp, #8]
 80154a0:	2301      	movs	r3, #1
 80154a2:	9301      	str	r3, [sp, #4]
 80154a4:	2300      	movs	r3, #0
 80154a6:	9300      	str	r3, [sp, #0]
 80154a8:	23ff      	movs	r3, #255	; 0xff
 80154aa:	2100      	movs	r1, #0
 80154ac:	69f8      	ldr	r0, [r7, #28]
 80154ae:	f000 f9cd 	bl	801584c <ip4_output_if>
  }
  pbuf_free(q);
 80154b2:	69f8      	ldr	r0, [r7, #28]
 80154b4:	f7f7 fedc 	bl	800d270 <pbuf_free>
 80154b8:	e000      	b.n	80154bc <icmp_send_response+0xc0>
    return;
 80154ba:	bf00      	nop
}
 80154bc:	3720      	adds	r7, #32
 80154be:	46bd      	mov	sp, r7
 80154c0:	bd80      	pop	{r7, pc}
 80154c2:	bf00      	nop
 80154c4:	0801b214 	.word	0x0801b214
 80154c8:	0801b2e0 	.word	0x0801b2e0
 80154cc:	0801b284 	.word	0x0801b284

080154d0 <ip4_route>:
 * @param dest the destination IP address for which to find the route
 * @return the netif on which to send to reach dest
 */
struct netif *
ip4_route(const ip4_addr_t *dest)
{
 80154d0:	b480      	push	{r7}
 80154d2:	b085      	sub	sp, #20
 80154d4:	af00      	add	r7, sp, #0
 80154d6:	6078      	str	r0, [r7, #4]

  /* bug #54569: in case LWIP_SINGLE_NETIF=1 and LWIP_DEBUGF() disabled, the following loop is optimized away */
  LWIP_UNUSED_ARG(dest);

  /* iterate through netifs */
  NETIF_FOREACH(netif) {
 80154d8:	4b33      	ldr	r3, [pc, #204]	; (80155a8 <ip4_route+0xd8>)
 80154da:	681b      	ldr	r3, [r3, #0]
 80154dc:	60fb      	str	r3, [r7, #12]
 80154de:	e036      	b.n	801554e <ip4_route+0x7e>
    /* is the netif up, does it have a link and a valid address? */
    if (netif_is_up(netif) && netif_is_link_up(netif) && !ip4_addr_isany_val(*netif_ip4_addr(netif))) {
 80154e0:	68fb      	ldr	r3, [r7, #12]
 80154e2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154e6:	f003 0301 	and.w	r3, r3, #1
 80154ea:	b2db      	uxtb	r3, r3
 80154ec:	2b00      	cmp	r3, #0
 80154ee:	d02b      	beq.n	8015548 <ip4_route+0x78>
 80154f0:	68fb      	ldr	r3, [r7, #12]
 80154f2:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80154f6:	089b      	lsrs	r3, r3, #2
 80154f8:	f003 0301 	and.w	r3, r3, #1
 80154fc:	b2db      	uxtb	r3, r3
 80154fe:	2b00      	cmp	r3, #0
 8015500:	d022      	beq.n	8015548 <ip4_route+0x78>
 8015502:	68fb      	ldr	r3, [r7, #12]
 8015504:	3304      	adds	r3, #4
 8015506:	681b      	ldr	r3, [r3, #0]
 8015508:	2b00      	cmp	r3, #0
 801550a:	d01d      	beq.n	8015548 <ip4_route+0x78>
      /* network mask matches? */
      if (ip4_addr_netcmp(dest, netif_ip4_addr(netif), netif_ip4_netmask(netif))) {
 801550c:	687b      	ldr	r3, [r7, #4]
 801550e:	681a      	ldr	r2, [r3, #0]
 8015510:	68fb      	ldr	r3, [r7, #12]
 8015512:	3304      	adds	r3, #4
 8015514:	681b      	ldr	r3, [r3, #0]
 8015516:	405a      	eors	r2, r3
 8015518:	68fb      	ldr	r3, [r7, #12]
 801551a:	3308      	adds	r3, #8
 801551c:	681b      	ldr	r3, [r3, #0]
 801551e:	4013      	ands	r3, r2
 8015520:	2b00      	cmp	r3, #0
 8015522:	d101      	bne.n	8015528 <ip4_route+0x58>
        /* return netif on which to forward IP packet */
        return netif;
 8015524:	68fb      	ldr	r3, [r7, #12]
 8015526:	e038      	b.n	801559a <ip4_route+0xca>
      }
      /* gateway matches on a non broadcast interface? (i.e. peer in a point to point interface) */
      if (((netif->flags & NETIF_FLAG_BROADCAST) == 0) && ip4_addr_cmp(dest, netif_ip4_gw(netif))) {
 8015528:	68fb      	ldr	r3, [r7, #12]
 801552a:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 801552e:	f003 0302 	and.w	r3, r3, #2
 8015532:	2b00      	cmp	r3, #0
 8015534:	d108      	bne.n	8015548 <ip4_route+0x78>
 8015536:	687b      	ldr	r3, [r7, #4]
 8015538:	681a      	ldr	r2, [r3, #0]
 801553a:	68fb      	ldr	r3, [r7, #12]
 801553c:	330c      	adds	r3, #12
 801553e:	681b      	ldr	r3, [r3, #0]
 8015540:	429a      	cmp	r2, r3
 8015542:	d101      	bne.n	8015548 <ip4_route+0x78>
        /* return netif on which to forward IP packet */
        return netif;
 8015544:	68fb      	ldr	r3, [r7, #12]
 8015546:	e028      	b.n	801559a <ip4_route+0xca>
  NETIF_FOREACH(netif) {
 8015548:	68fb      	ldr	r3, [r7, #12]
 801554a:	681b      	ldr	r3, [r3, #0]
 801554c:	60fb      	str	r3, [r7, #12]
 801554e:	68fb      	ldr	r3, [r7, #12]
 8015550:	2b00      	cmp	r3, #0
 8015552:	d1c5      	bne.n	80154e0 <ip4_route+0x10>
    return netif;
  }
#endif
#endif /* !LWIP_SINGLE_NETIF */

  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015554:	4b15      	ldr	r3, [pc, #84]	; (80155ac <ip4_route+0xdc>)
 8015556:	681b      	ldr	r3, [r3, #0]
 8015558:	2b00      	cmp	r3, #0
 801555a:	d01a      	beq.n	8015592 <ip4_route+0xc2>
 801555c:	4b13      	ldr	r3, [pc, #76]	; (80155ac <ip4_route+0xdc>)
 801555e:	681b      	ldr	r3, [r3, #0]
 8015560:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015564:	f003 0301 	and.w	r3, r3, #1
 8015568:	2b00      	cmp	r3, #0
 801556a:	d012      	beq.n	8015592 <ip4_route+0xc2>
 801556c:	4b0f      	ldr	r3, [pc, #60]	; (80155ac <ip4_route+0xdc>)
 801556e:	681b      	ldr	r3, [r3, #0]
 8015570:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015574:	f003 0304 	and.w	r3, r3, #4
 8015578:	2b00      	cmp	r3, #0
 801557a:	d00a      	beq.n	8015592 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 801557c:	4b0b      	ldr	r3, [pc, #44]	; (80155ac <ip4_route+0xdc>)
 801557e:	681b      	ldr	r3, [r3, #0]
 8015580:	3304      	adds	r3, #4
 8015582:	681b      	ldr	r3, [r3, #0]
  if ((netif_default == NULL) || !netif_is_up(netif_default) || !netif_is_link_up(netif_default) ||
 8015584:	2b00      	cmp	r3, #0
 8015586:	d004      	beq.n	8015592 <ip4_route+0xc2>
      ip4_addr_isany_val(*netif_ip4_addr(netif_default)) || ip4_addr_isloopback(dest)) {
 8015588:	687b      	ldr	r3, [r7, #4]
 801558a:	681b      	ldr	r3, [r3, #0]
 801558c:	b2db      	uxtb	r3, r3
 801558e:	2b7f      	cmp	r3, #127	; 0x7f
 8015590:	d101      	bne.n	8015596 <ip4_route+0xc6>
       If this is not good enough for you, use LWIP_HOOK_IP4_ROUTE() */
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_route: No route to %"U16_F".%"U16_F".%"U16_F".%"U16_F"\n",
                ip4_addr1_16(dest), ip4_addr2_16(dest), ip4_addr3_16(dest), ip4_addr4_16(dest)));
    IP_STATS_INC(ip.rterr);
    MIB2_STATS_INC(mib2.ipoutnoroutes);
    return NULL;
 8015592:	2300      	movs	r3, #0
 8015594:	e001      	b.n	801559a <ip4_route+0xca>
  }

  return netif_default;
 8015596:	4b05      	ldr	r3, [pc, #20]	; (80155ac <ip4_route+0xdc>)
 8015598:	681b      	ldr	r3, [r3, #0]
}
 801559a:	4618      	mov	r0, r3
 801559c:	3714      	adds	r7, #20
 801559e:	46bd      	mov	sp, r7
 80155a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80155a4:	4770      	bx	lr
 80155a6:	bf00      	nop
 80155a8:	2000f7e8 	.word	0x2000f7e8
 80155ac:	2000f7ec 	.word	0x2000f7ec

080155b0 <ip4_input_accept>:
#endif /* IP_FORWARD */

/** Return true if the current input packet should be accepted on this netif */
static int
ip4_input_accept(struct netif *netif)
{
 80155b0:	b580      	push	{r7, lr}
 80155b2:	b082      	sub	sp, #8
 80155b4:	af00      	add	r7, sp, #0
 80155b6:	6078      	str	r0, [r7, #4]
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(netif_ip4_addr(netif)) & ip4_addr_get_u32(netif_ip4_netmask(netif)),
                         ip4_addr_get_u32(ip4_current_dest_addr()) & ~ip4_addr_get_u32(netif_ip4_netmask(netif))));

  /* interface is up and configured? */
  if ((netif_is_up(netif)) && (!ip4_addr_isany_val(*netif_ip4_addr(netif)))) {
 80155b8:	687b      	ldr	r3, [r7, #4]
 80155ba:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80155be:	f003 0301 	and.w	r3, r3, #1
 80155c2:	b2db      	uxtb	r3, r3
 80155c4:	2b00      	cmp	r3, #0
 80155c6:	d016      	beq.n	80155f6 <ip4_input_accept+0x46>
 80155c8:	687b      	ldr	r3, [r7, #4]
 80155ca:	3304      	adds	r3, #4
 80155cc:	681b      	ldr	r3, [r3, #0]
 80155ce:	2b00      	cmp	r3, #0
 80155d0:	d011      	beq.n	80155f6 <ip4_input_accept+0x46>
    /* unicast to this interface address? */
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155d2:	4b0b      	ldr	r3, [pc, #44]	; (8015600 <ip4_input_accept+0x50>)
 80155d4:	695a      	ldr	r2, [r3, #20]
 80155d6:	687b      	ldr	r3, [r7, #4]
 80155d8:	3304      	adds	r3, #4
 80155da:	681b      	ldr	r3, [r3, #0]
 80155dc:	429a      	cmp	r2, r3
 80155de:	d008      	beq.n	80155f2 <ip4_input_accept+0x42>
        /* or broadcast on this interface network address? */
        ip4_addr_isbroadcast(ip4_current_dest_addr(), netif)
 80155e0:	4b07      	ldr	r3, [pc, #28]	; (8015600 <ip4_input_accept+0x50>)
 80155e2:	695b      	ldr	r3, [r3, #20]
 80155e4:	6879      	ldr	r1, [r7, #4]
 80155e6:	4618      	mov	r0, r3
 80155e8:	f000 fa08 	bl	80159fc <ip4_addr_isbroadcast_u32>
 80155ec:	4603      	mov	r3, r0
    if (ip4_addr_cmp(ip4_current_dest_addr(), netif_ip4_addr(netif)) ||
 80155ee:	2b00      	cmp	r3, #0
 80155f0:	d001      	beq.n	80155f6 <ip4_input_accept+0x46>
#endif /* LWIP_NETIF_LOOPBACK && !LWIP_HAVE_LOOPIF */
       ) {
      LWIP_DEBUGF(IP_DEBUG, ("ip4_input: packet accepted on interface %c%c\n",
                             netif->name[0], netif->name[1]));
      /* accept on this netif */
      return 1;
 80155f2:	2301      	movs	r3, #1
 80155f4:	e000      	b.n	80155f8 <ip4_input_accept+0x48>
      /* accept on this netif */
      return 1;
    }
#endif /* LWIP_AUTOIP */
  }
  return 0;
 80155f6:	2300      	movs	r3, #0
}
 80155f8:	4618      	mov	r0, r3
 80155fa:	3708      	adds	r7, #8
 80155fc:	46bd      	mov	sp, r7
 80155fe:	bd80      	pop	{r7, pc}
 8015600:	20009ee0 	.word	0x20009ee0

08015604 <ip4_input>:
 * @return ERR_OK if the packet was processed (could return ERR_* if it wasn't
 *         processed, but currently always returns ERR_OK)
 */
err_t
ip4_input(struct pbuf *p, struct netif *inp)
{
 8015604:	b580      	push	{r7, lr}
 8015606:	b086      	sub	sp, #24
 8015608:	af00      	add	r7, sp, #0
 801560a:	6078      	str	r0, [r7, #4]
 801560c:	6039      	str	r1, [r7, #0]

  IP_STATS_INC(ip.recv);
  MIB2_STATS_INC(mib2.ipinreceives);

  /* identify the IP header */
  iphdr = (struct ip_hdr *)p->payload;
 801560e:	687b      	ldr	r3, [r7, #4]
 8015610:	685b      	ldr	r3, [r3, #4]
 8015612:	617b      	str	r3, [r7, #20]
  if (IPH_V(iphdr) != 4) {
 8015614:	697b      	ldr	r3, [r7, #20]
 8015616:	781b      	ldrb	r3, [r3, #0]
 8015618:	091b      	lsrs	r3, r3, #4
 801561a:	b2db      	uxtb	r3, r3
 801561c:	2b04      	cmp	r3, #4
 801561e:	d004      	beq.n	801562a <ip4_input+0x26>
    LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_WARNING, ("IP packet dropped due to bad version number %"U16_F"\n", (u16_t)IPH_V(iphdr)));
    ip4_debug_print(p);
    pbuf_free(p);
 8015620:	6878      	ldr	r0, [r7, #4]
 8015622:	f7f7 fe25 	bl	800d270 <pbuf_free>
    IP_STATS_INC(ip.err);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipinhdrerrors);
    return ERR_OK;
 8015626:	2300      	movs	r3, #0
 8015628:	e107      	b.n	801583a <ip4_input+0x236>
    return ERR_OK;
  }
#endif

  /* obtain IP header length in bytes */
  iphdr_hlen = IPH_HL_BYTES(iphdr);
 801562a:	697b      	ldr	r3, [r7, #20]
 801562c:	781b      	ldrb	r3, [r3, #0]
 801562e:	f003 030f 	and.w	r3, r3, #15
 8015632:	b2db      	uxtb	r3, r3
 8015634:	009b      	lsls	r3, r3, #2
 8015636:	b2db      	uxtb	r3, r3
 8015638:	81fb      	strh	r3, [r7, #14]
  /* obtain ip length in bytes */
  iphdr_len = lwip_ntohs(IPH_LEN(iphdr));
 801563a:	697b      	ldr	r3, [r7, #20]
 801563c:	885b      	ldrh	r3, [r3, #2]
 801563e:	b29b      	uxth	r3, r3
 8015640:	4618      	mov	r0, r3
 8015642:	f7f6 fa23 	bl	800ba8c <lwip_htons>
 8015646:	4603      	mov	r3, r0
 8015648:	81bb      	strh	r3, [r7, #12]

  /* Trim pbuf. This is especially required for packets < 60 bytes. */
  if (iphdr_len < p->tot_len) {
 801564a:	687b      	ldr	r3, [r7, #4]
 801564c:	891b      	ldrh	r3, [r3, #8]
 801564e:	89ba      	ldrh	r2, [r7, #12]
 8015650:	429a      	cmp	r2, r3
 8015652:	d204      	bcs.n	801565e <ip4_input+0x5a>
    pbuf_realloc(p, iphdr_len);
 8015654:	89bb      	ldrh	r3, [r7, #12]
 8015656:	4619      	mov	r1, r3
 8015658:	6878      	ldr	r0, [r7, #4]
 801565a:	f7f7 fc83 	bl	800cf64 <pbuf_realloc>
  }

  /* header length exceeds first pbuf length, or ip length exceeds total pbuf length? */
  if ((iphdr_hlen > p->len) || (iphdr_len > p->tot_len) || (iphdr_hlen < IP_HLEN)) {
 801565e:	687b      	ldr	r3, [r7, #4]
 8015660:	895b      	ldrh	r3, [r3, #10]
 8015662:	89fa      	ldrh	r2, [r7, #14]
 8015664:	429a      	cmp	r2, r3
 8015666:	d807      	bhi.n	8015678 <ip4_input+0x74>
 8015668:	687b      	ldr	r3, [r7, #4]
 801566a:	891b      	ldrh	r3, [r3, #8]
 801566c:	89ba      	ldrh	r2, [r7, #12]
 801566e:	429a      	cmp	r2, r3
 8015670:	d802      	bhi.n	8015678 <ip4_input+0x74>
 8015672:	89fb      	ldrh	r3, [r7, #14]
 8015674:	2b13      	cmp	r3, #19
 8015676:	d804      	bhi.n	8015682 <ip4_input+0x7e>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS,
                  ("IP (len %"U16_F") is longer than pbuf (len %"U16_F"), IP packet dropped.\n",
                   iphdr_len, p->tot_len));
    }
    /* free (drop) packet pbufs */
    pbuf_free(p);
 8015678:	6878      	ldr	r0, [r7, #4]
 801567a:	f7f7 fdf9 	bl	800d270 <pbuf_free>
    IP_STATS_INC(ip.lenerr);
    IP_STATS_INC(ip.drop);
    MIB2_STATS_INC(mib2.ipindiscards);
    return ERR_OK;
 801567e:	2300      	movs	r3, #0
 8015680:	e0db      	b.n	801583a <ip4_input+0x236>
    }
  }
#endif

  /* copy IP addresses to aligned ip_addr_t */
  ip_addr_copy_from_ip4(ip_data.current_iphdr_dest, iphdr->dest);
 8015682:	697b      	ldr	r3, [r7, #20]
 8015684:	691b      	ldr	r3, [r3, #16]
 8015686:	4a6f      	ldr	r2, [pc, #444]	; (8015844 <ip4_input+0x240>)
 8015688:	6153      	str	r3, [r2, #20]
  ip_addr_copy_from_ip4(ip_data.current_iphdr_src, iphdr->src);
 801568a:	697b      	ldr	r3, [r7, #20]
 801568c:	68db      	ldr	r3, [r3, #12]
 801568e:	4a6d      	ldr	r2, [pc, #436]	; (8015844 <ip4_input+0x240>)
 8015690:	6113      	str	r3, [r2, #16]

  /* match packet against an interface, i.e. is this packet for us? */
  if (ip4_addr_ismulticast(ip4_current_dest_addr())) {
 8015692:	4b6c      	ldr	r3, [pc, #432]	; (8015844 <ip4_input+0x240>)
 8015694:	695b      	ldr	r3, [r3, #20]
 8015696:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 801569a:	2be0      	cmp	r3, #224	; 0xe0
 801569c:	d112      	bne.n	80156c4 <ip4_input+0xc0>
      netif = inp;
    } else {
      netif = NULL;
    }
#else /* LWIP_IGMP */
    if ((netif_is_up(inp)) && (!ip4_addr_isany_val(*netif_ip4_addr(inp)))) {
 801569e:	683b      	ldr	r3, [r7, #0]
 80156a0:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80156a4:	f003 0301 	and.w	r3, r3, #1
 80156a8:	b2db      	uxtb	r3, r3
 80156aa:	2b00      	cmp	r3, #0
 80156ac:	d007      	beq.n	80156be <ip4_input+0xba>
 80156ae:	683b      	ldr	r3, [r7, #0]
 80156b0:	3304      	adds	r3, #4
 80156b2:	681b      	ldr	r3, [r3, #0]
 80156b4:	2b00      	cmp	r3, #0
 80156b6:	d002      	beq.n	80156be <ip4_input+0xba>
      netif = inp;
 80156b8:	683b      	ldr	r3, [r7, #0]
 80156ba:	613b      	str	r3, [r7, #16]
 80156bc:	e02a      	b.n	8015714 <ip4_input+0x110>
    } else {
      netif = NULL;
 80156be:	2300      	movs	r3, #0
 80156c0:	613b      	str	r3, [r7, #16]
 80156c2:	e027      	b.n	8015714 <ip4_input+0x110>
    }
#endif /* LWIP_IGMP */
  } else {
    /* start trying with inp. if that's not acceptable, start walking the
       list of configured netifs. */
    if (ip4_input_accept(inp)) {
 80156c4:	6838      	ldr	r0, [r7, #0]
 80156c6:	f7ff ff73 	bl	80155b0 <ip4_input_accept>
 80156ca:	4603      	mov	r3, r0
 80156cc:	2b00      	cmp	r3, #0
 80156ce:	d002      	beq.n	80156d6 <ip4_input+0xd2>
      netif = inp;
 80156d0:	683b      	ldr	r3, [r7, #0]
 80156d2:	613b      	str	r3, [r7, #16]
 80156d4:	e01e      	b.n	8015714 <ip4_input+0x110>
    } else {
      netif = NULL;
 80156d6:	2300      	movs	r3, #0
 80156d8:	613b      	str	r3, [r7, #16]
#if !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF
      /* Packets sent to the loopback address must not be accepted on an
       * interface that does not have the loopback address assigned to it,
       * unless a non-loopback interface is used for loopback traffic. */
      if (!ip4_addr_isloopback(ip4_current_dest_addr()))
 80156da:	4b5a      	ldr	r3, [pc, #360]	; (8015844 <ip4_input+0x240>)
 80156dc:	695b      	ldr	r3, [r3, #20]
 80156de:	b2db      	uxtb	r3, r3
 80156e0:	2b7f      	cmp	r3, #127	; 0x7f
 80156e2:	d017      	beq.n	8015714 <ip4_input+0x110>
#endif /* !LWIP_NETIF_LOOPBACK || LWIP_HAVE_LOOPIF */
      {
#if !LWIP_SINGLE_NETIF
        NETIF_FOREACH(netif) {
 80156e4:	4b58      	ldr	r3, [pc, #352]	; (8015848 <ip4_input+0x244>)
 80156e6:	681b      	ldr	r3, [r3, #0]
 80156e8:	613b      	str	r3, [r7, #16]
 80156ea:	e00e      	b.n	801570a <ip4_input+0x106>
          if (netif == inp) {
 80156ec:	693a      	ldr	r2, [r7, #16]
 80156ee:	683b      	ldr	r3, [r7, #0]
 80156f0:	429a      	cmp	r2, r3
 80156f2:	d006      	beq.n	8015702 <ip4_input+0xfe>
            /* we checked that before already */
            continue;
          }
          if (ip4_input_accept(netif)) {
 80156f4:	6938      	ldr	r0, [r7, #16]
 80156f6:	f7ff ff5b 	bl	80155b0 <ip4_input_accept>
 80156fa:	4603      	mov	r3, r0
 80156fc:	2b00      	cmp	r3, #0
 80156fe:	d108      	bne.n	8015712 <ip4_input+0x10e>
 8015700:	e000      	b.n	8015704 <ip4_input+0x100>
            continue;
 8015702:	bf00      	nop
        NETIF_FOREACH(netif) {
 8015704:	693b      	ldr	r3, [r7, #16]
 8015706:	681b      	ldr	r3, [r3, #0]
 8015708:	613b      	str	r3, [r7, #16]
 801570a:	693b      	ldr	r3, [r7, #16]
 801570c:	2b00      	cmp	r3, #0
 801570e:	d1ed      	bne.n	80156ec <ip4_input+0xe8>
 8015710:	e000      	b.n	8015714 <ip4_input+0x110>
            break;
 8015712:	bf00      	nop
      && !ip4_addr_isany_val(*ip4_current_src_addr())
#endif /* IP_ACCEPT_LINK_LAYER_ADDRESSING */
     )
#endif /* LWIP_IGMP || IP_ACCEPT_LINK_LAYER_ADDRESSING */
  {
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 8015714:	4b4b      	ldr	r3, [pc, #300]	; (8015844 <ip4_input+0x240>)
 8015716:	691b      	ldr	r3, [r3, #16]
 8015718:	6839      	ldr	r1, [r7, #0]
 801571a:	4618      	mov	r0, r3
 801571c:	f000 f96e 	bl	80159fc <ip4_addr_isbroadcast_u32>
 8015720:	4603      	mov	r3, r0
 8015722:	2b00      	cmp	r3, #0
 8015724:	d105      	bne.n	8015732 <ip4_input+0x12e>
        (ip4_addr_ismulticast(ip4_current_src_addr()))) {
 8015726:	4b47      	ldr	r3, [pc, #284]	; (8015844 <ip4_input+0x240>)
 8015728:	691b      	ldr	r3, [r3, #16]
 801572a:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
    if ((ip4_addr_isbroadcast(ip4_current_src_addr(), inp)) ||
 801572e:	2be0      	cmp	r3, #224	; 0xe0
 8015730:	d104      	bne.n	801573c <ip4_input+0x138>
      /* packet source is not valid */
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_WARNING, ("ip4_input: packet source is not valid.\n"));
      /* free (drop) packet pbufs */
      pbuf_free(p);
 8015732:	6878      	ldr	r0, [r7, #4]
 8015734:	f7f7 fd9c 	bl	800d270 <pbuf_free>
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
      return ERR_OK;
 8015738:	2300      	movs	r3, #0
 801573a:	e07e      	b.n	801583a <ip4_input+0x236>
    }
  }

  /* packet not for us? */
  if (netif == NULL) {
 801573c:	693b      	ldr	r3, [r7, #16]
 801573e:	2b00      	cmp	r3, #0
 8015740:	d104      	bne.n	801574c <ip4_input+0x148>
    {
      IP_STATS_INC(ip.drop);
      MIB2_STATS_INC(mib2.ipinaddrerrors);
      MIB2_STATS_INC(mib2.ipindiscards);
    }
    pbuf_free(p);
 8015742:	6878      	ldr	r0, [r7, #4]
 8015744:	f7f7 fd94 	bl	800d270 <pbuf_free>
    return ERR_OK;
 8015748:	2300      	movs	r3, #0
 801574a:	e076      	b.n	801583a <ip4_input+0x236>
  }
  /* packet consists of multiple fragments? */
  if ((IPH_OFFSET(iphdr) & PP_HTONS(IP_OFFMASK | IP_MF)) != 0) {
 801574c:	697b      	ldr	r3, [r7, #20]
 801574e:	88db      	ldrh	r3, [r3, #6]
 8015750:	b29b      	uxth	r3, r3
 8015752:	461a      	mov	r2, r3
 8015754:	f64f 733f 	movw	r3, #65343	; 0xff3f
 8015758:	4013      	ands	r3, r2
 801575a:	2b00      	cmp	r3, #0
 801575c:	d00b      	beq.n	8015776 <ip4_input+0x172>
#if IP_REASSEMBLY /* packet fragment reassembly code present? */
    LWIP_DEBUGF(IP_DEBUG, ("IP packet is a fragment (id=0x%04"X16_F" tot_len=%"U16_F" len=%"U16_F" MF=%"U16_F" offset=%"U16_F"), calling ip4_reass()\n",
                           lwip_ntohs(IPH_ID(iphdr)), p->tot_len, lwip_ntohs(IPH_LEN(iphdr)), (u16_t)!!(IPH_OFFSET(iphdr) & PP_HTONS(IP_MF)), (u16_t)((lwip_ntohs(IPH_OFFSET(iphdr)) & IP_OFFMASK) * 8)));
    /* reassemble the packet*/
    p = ip4_reass(p);
 801575e:	6878      	ldr	r0, [r7, #4]
 8015760:	f000 fc92 	bl	8016088 <ip4_reass>
 8015764:	6078      	str	r0, [r7, #4]
    /* packet not fully reassembled yet? */
    if (p == NULL) {
 8015766:	687b      	ldr	r3, [r7, #4]
 8015768:	2b00      	cmp	r3, #0
 801576a:	d101      	bne.n	8015770 <ip4_input+0x16c>
      return ERR_OK;
 801576c:	2300      	movs	r3, #0
 801576e:	e064      	b.n	801583a <ip4_input+0x236>
    }
    iphdr = (const struct ip_hdr *)p->payload;
 8015770:	687b      	ldr	r3, [r7, #4]
 8015772:	685b      	ldr	r3, [r3, #4]
 8015774:	617b      	str	r3, [r7, #20]
  /* send to upper layers */
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: \n"));
  ip4_debug_print(p);
  LWIP_DEBUGF(IP_DEBUG, ("ip4_input: p->len %"U16_F" p->tot_len %"U16_F"\n", p->len, p->tot_len));

  ip_data.current_netif = netif;
 8015776:	4a33      	ldr	r2, [pc, #204]	; (8015844 <ip4_input+0x240>)
 8015778:	693b      	ldr	r3, [r7, #16]
 801577a:	6013      	str	r3, [r2, #0]
  ip_data.current_input_netif = inp;
 801577c:	4a31      	ldr	r2, [pc, #196]	; (8015844 <ip4_input+0x240>)
 801577e:	683b      	ldr	r3, [r7, #0]
 8015780:	6053      	str	r3, [r2, #4]
  ip_data.current_ip4_header = iphdr;
 8015782:	4a30      	ldr	r2, [pc, #192]	; (8015844 <ip4_input+0x240>)
 8015784:	697b      	ldr	r3, [r7, #20]
 8015786:	6093      	str	r3, [r2, #8]
  ip_data.current_ip_header_tot_len = IPH_HL_BYTES(iphdr);
 8015788:	697b      	ldr	r3, [r7, #20]
 801578a:	781b      	ldrb	r3, [r3, #0]
 801578c:	f003 030f 	and.w	r3, r3, #15
 8015790:	b2db      	uxtb	r3, r3
 8015792:	009b      	lsls	r3, r3, #2
 8015794:	b2db      	uxtb	r3, r3
 8015796:	b29a      	uxth	r2, r3
 8015798:	4b2a      	ldr	r3, [pc, #168]	; (8015844 <ip4_input+0x240>)
 801579a:	819a      	strh	r2, [r3, #12]
  /* raw input did not eat the packet? */
  raw_status = raw_input(p, inp);
  if (raw_status != RAW_INPUT_EATEN)
#endif /* LWIP_RAW */
  {
    pbuf_remove_header(p, iphdr_hlen); /* Move to payload, no check necessary. */
 801579c:	89fb      	ldrh	r3, [r7, #14]
 801579e:	4619      	mov	r1, r3
 80157a0:	6878      	ldr	r0, [r7, #4]
 80157a2:	f7f7 fcdf 	bl	800d164 <pbuf_remove_header>

    switch (IPH_PROTO(iphdr)) {
 80157a6:	697b      	ldr	r3, [r7, #20]
 80157a8:	7a5b      	ldrb	r3, [r3, #9]
 80157aa:	2b11      	cmp	r3, #17
 80157ac:	d006      	beq.n	80157bc <ip4_input+0x1b8>
 80157ae:	2b11      	cmp	r3, #17
 80157b0:	dc13      	bgt.n	80157da <ip4_input+0x1d6>
 80157b2:	2b01      	cmp	r3, #1
 80157b4:	d00c      	beq.n	80157d0 <ip4_input+0x1cc>
 80157b6:	2b06      	cmp	r3, #6
 80157b8:	d005      	beq.n	80157c6 <ip4_input+0x1c2>
 80157ba:	e00e      	b.n	80157da <ip4_input+0x1d6>
      case IP_PROTO_UDP:
#if LWIP_UDPLITE
      case IP_PROTO_UDPLITE:
#endif /* LWIP_UDPLITE */
        MIB2_STATS_INC(mib2.ipindelivers);
        udp_input(p, inp);
 80157bc:	6839      	ldr	r1, [r7, #0]
 80157be:	6878      	ldr	r0, [r7, #4]
 80157c0:	f7fe faec 	bl	8013d9c <udp_input>
        break;
 80157c4:	e026      	b.n	8015814 <ip4_input+0x210>
#endif /* LWIP_UDP */
#if LWIP_TCP
      case IP_PROTO_TCP:
        MIB2_STATS_INC(mib2.ipindelivers);
        tcp_input(p, inp);
 80157c6:	6839      	ldr	r1, [r7, #0]
 80157c8:	6878      	ldr	r0, [r7, #4]
 80157ca:	f7f9 fea5 	bl	800f518 <tcp_input>
        break;
 80157ce:	e021      	b.n	8015814 <ip4_input+0x210>
#endif /* LWIP_TCP */
#if LWIP_ICMP
      case IP_PROTO_ICMP:
        MIB2_STATS_INC(mib2.ipindelivers);
        icmp_input(p, inp);
 80157d0:	6839      	ldr	r1, [r7, #0]
 80157d2:	6878      	ldr	r0, [r7, #4]
 80157d4:	f7ff fcee 	bl	80151b4 <icmp_input>
        break;
 80157d8:	e01c      	b.n	8015814 <ip4_input+0x210>
        } else
#endif /* LWIP_RAW */
        {
#if LWIP_ICMP
          /* send ICMP destination protocol unreachable unless is was a broadcast */
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80157da:	4b1a      	ldr	r3, [pc, #104]	; (8015844 <ip4_input+0x240>)
 80157dc:	695b      	ldr	r3, [r3, #20]
 80157de:	6939      	ldr	r1, [r7, #16]
 80157e0:	4618      	mov	r0, r3
 80157e2:	f000 f90b 	bl	80159fc <ip4_addr_isbroadcast_u32>
 80157e6:	4603      	mov	r3, r0
 80157e8:	2b00      	cmp	r3, #0
 80157ea:	d10f      	bne.n	801580c <ip4_input+0x208>
              !ip4_addr_ismulticast(ip4_current_dest_addr())) {
 80157ec:	4b15      	ldr	r3, [pc, #84]	; (8015844 <ip4_input+0x240>)
 80157ee:	695b      	ldr	r3, [r3, #20]
 80157f0:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
          if (!ip4_addr_isbroadcast(ip4_current_dest_addr(), netif) &&
 80157f4:	2be0      	cmp	r3, #224	; 0xe0
 80157f6:	d009      	beq.n	801580c <ip4_input+0x208>
            pbuf_header_force(p, (s16_t)iphdr_hlen); /* Move to ip header, no check necessary. */
 80157f8:	f9b7 300e 	ldrsh.w	r3, [r7, #14]
 80157fc:	4619      	mov	r1, r3
 80157fe:	6878      	ldr	r0, [r7, #4]
 8015800:	f7f7 fd23 	bl	800d24a <pbuf_header_force>
            icmp_dest_unreach(p, ICMP_DUR_PROTO);
 8015804:	2102      	movs	r1, #2
 8015806:	6878      	ldr	r0, [r7, #4]
 8015808:	f7ff fdd8 	bl	80153bc <icmp_dest_unreach>

          IP_STATS_INC(ip.proterr);
          IP_STATS_INC(ip.drop);
          MIB2_STATS_INC(mib2.ipinunknownprotos);
        }
        pbuf_free(p);
 801580c:	6878      	ldr	r0, [r7, #4]
 801580e:	f7f7 fd2f 	bl	800d270 <pbuf_free>
        break;
 8015812:	bf00      	nop
    }
  }

  /* @todo: this is not really necessary... */
  ip_data.current_netif = NULL;
 8015814:	4b0b      	ldr	r3, [pc, #44]	; (8015844 <ip4_input+0x240>)
 8015816:	2200      	movs	r2, #0
 8015818:	601a      	str	r2, [r3, #0]
  ip_data.current_input_netif = NULL;
 801581a:	4b0a      	ldr	r3, [pc, #40]	; (8015844 <ip4_input+0x240>)
 801581c:	2200      	movs	r2, #0
 801581e:	605a      	str	r2, [r3, #4]
  ip_data.current_ip4_header = NULL;
 8015820:	4b08      	ldr	r3, [pc, #32]	; (8015844 <ip4_input+0x240>)
 8015822:	2200      	movs	r2, #0
 8015824:	609a      	str	r2, [r3, #8]
  ip_data.current_ip_header_tot_len = 0;
 8015826:	4b07      	ldr	r3, [pc, #28]	; (8015844 <ip4_input+0x240>)
 8015828:	2200      	movs	r2, #0
 801582a:	819a      	strh	r2, [r3, #12]
  ip4_addr_set_any(ip4_current_src_addr());
 801582c:	4b05      	ldr	r3, [pc, #20]	; (8015844 <ip4_input+0x240>)
 801582e:	2200      	movs	r2, #0
 8015830:	611a      	str	r2, [r3, #16]
  ip4_addr_set_any(ip4_current_dest_addr());
 8015832:	4b04      	ldr	r3, [pc, #16]	; (8015844 <ip4_input+0x240>)
 8015834:	2200      	movs	r2, #0
 8015836:	615a      	str	r2, [r3, #20]

  return ERR_OK;
 8015838:	2300      	movs	r3, #0
}
 801583a:	4618      	mov	r0, r3
 801583c:	3718      	adds	r7, #24
 801583e:	46bd      	mov	sp, r7
 8015840:	bd80      	pop	{r7, pc}
 8015842:	bf00      	nop
 8015844:	20009ee0 	.word	0x20009ee0
 8015848:	2000f7e8 	.word	0x2000f7e8

0801584c <ip4_output_if>:
 */
err_t
ip4_output_if(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
              u8_t ttl, u8_t tos,
              u8_t proto, struct netif *netif)
{
 801584c:	b580      	push	{r7, lr}
 801584e:	b08a      	sub	sp, #40	; 0x28
 8015850:	af04      	add	r7, sp, #16
 8015852:	60f8      	str	r0, [r7, #12]
 8015854:	60b9      	str	r1, [r7, #8]
 8015856:	607a      	str	r2, [r7, #4]
 8015858:	70fb      	strb	r3, [r7, #3]
ip4_output_if_opt(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos, u8_t proto, struct netif *netif, void *ip_options,
                  u16_t optlen)
{
#endif /* IP_OPTIONS_SEND */
  const ip4_addr_t *src_used = src;
 801585a:	68bb      	ldr	r3, [r7, #8]
 801585c:	617b      	str	r3, [r7, #20]
  if (dest != LWIP_IP_HDRINCL) {
 801585e:	687b      	ldr	r3, [r7, #4]
 8015860:	2b00      	cmp	r3, #0
 8015862:	d009      	beq.n	8015878 <ip4_output_if+0x2c>
    if (ip4_addr_isany(src)) {
 8015864:	68bb      	ldr	r3, [r7, #8]
 8015866:	2b00      	cmp	r3, #0
 8015868:	d003      	beq.n	8015872 <ip4_output_if+0x26>
 801586a:	68bb      	ldr	r3, [r7, #8]
 801586c:	681b      	ldr	r3, [r3, #0]
 801586e:	2b00      	cmp	r3, #0
 8015870:	d102      	bne.n	8015878 <ip4_output_if+0x2c>
      src_used = netif_ip4_addr(netif);
 8015872:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015874:	3304      	adds	r3, #4
 8015876:	617b      	str	r3, [r7, #20]

#if IP_OPTIONS_SEND
  return ip4_output_if_opt_src(p, src_used, dest, ttl, tos, proto, netif,
                               ip_options, optlen);
#else /* IP_OPTIONS_SEND */
  return ip4_output_if_src(p, src_used, dest, ttl, tos, proto, netif);
 8015878:	78fa      	ldrb	r2, [r7, #3]
 801587a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801587c:	9302      	str	r3, [sp, #8]
 801587e:	f897 3024 	ldrb.w	r3, [r7, #36]	; 0x24
 8015882:	9301      	str	r3, [sp, #4]
 8015884:	f897 3020 	ldrb.w	r3, [r7, #32]
 8015888:	9300      	str	r3, [sp, #0]
 801588a:	4613      	mov	r3, r2
 801588c:	687a      	ldr	r2, [r7, #4]
 801588e:	6979      	ldr	r1, [r7, #20]
 8015890:	68f8      	ldr	r0, [r7, #12]
 8015892:	f000 f805 	bl	80158a0 <ip4_output_if_src>
 8015896:	4603      	mov	r3, r0
#endif /* IP_OPTIONS_SEND */
}
 8015898:	4618      	mov	r0, r3
 801589a:	3718      	adds	r7, #24
 801589c:	46bd      	mov	sp, r7
 801589e:	bd80      	pop	{r7, pc}

080158a0 <ip4_output_if_src>:
 */
err_t
ip4_output_if_src(struct pbuf *p, const ip4_addr_t *src, const ip4_addr_t *dest,
                  u8_t ttl, u8_t tos,
                  u8_t proto, struct netif *netif)
{
 80158a0:	b580      	push	{r7, lr}
 80158a2:	b088      	sub	sp, #32
 80158a4:	af00      	add	r7, sp, #0
 80158a6:	60f8      	str	r0, [r7, #12]
 80158a8:	60b9      	str	r1, [r7, #8]
 80158aa:	607a      	str	r2, [r7, #4]
 80158ac:	70fb      	strb	r3, [r7, #3]
#if CHECKSUM_GEN_IP_INLINE
  u32_t chk_sum = 0;
#endif /* CHECKSUM_GEN_IP_INLINE */

  LWIP_ASSERT_CORE_LOCKED();
  LWIP_IP_CHECK_PBUF_REF_COUNT_FOR_TX(p);
 80158ae:	68fb      	ldr	r3, [r7, #12]
 80158b0:	7b9b      	ldrb	r3, [r3, #14]
 80158b2:	2b01      	cmp	r3, #1
 80158b4:	d006      	beq.n	80158c4 <ip4_output_if_src+0x24>
 80158b6:	4b4b      	ldr	r3, [pc, #300]	; (80159e4 <ip4_output_if_src+0x144>)
 80158b8:	f44f 7255 	mov.w	r2, #852	; 0x354
 80158bc:	494a      	ldr	r1, [pc, #296]	; (80159e8 <ip4_output_if_src+0x148>)
 80158be:	484b      	ldr	r0, [pc, #300]	; (80159ec <ip4_output_if_src+0x14c>)
 80158c0:	f001 fa96 	bl	8016df0 <iprintf>

  MIB2_STATS_INC(mib2.ipoutrequests);

  /* Should the IP header be generated or is it already included in p? */
  if (dest != LWIP_IP_HDRINCL) {
 80158c4:	687b      	ldr	r3, [r7, #4]
 80158c6:	2b00      	cmp	r3, #0
 80158c8:	d060      	beq.n	801598c <ip4_output_if_src+0xec>
    u16_t ip_hlen = IP_HLEN;
 80158ca:	2314      	movs	r3, #20
 80158cc:	837b      	strh	r3, [r7, #26]
      }
#endif /* CHECKSUM_GEN_IP_INLINE */
    }
#endif /* IP_OPTIONS_SEND */
    /* generate IP header */
    if (pbuf_add_header(p, IP_HLEN)) {
 80158ce:	2114      	movs	r1, #20
 80158d0:	68f8      	ldr	r0, [r7, #12]
 80158d2:	f7f7 fc37 	bl	800d144 <pbuf_add_header>
 80158d6:	4603      	mov	r3, r0
 80158d8:	2b00      	cmp	r3, #0
 80158da:	d002      	beq.n	80158e2 <ip4_output_if_src+0x42>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: not enough room for IP header in pbuf\n"));

      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 80158dc:	f06f 0301 	mvn.w	r3, #1
 80158e0:	e07c      	b.n	80159dc <ip4_output_if_src+0x13c>
    }

    iphdr = (struct ip_hdr *)p->payload;
 80158e2:	68fb      	ldr	r3, [r7, #12]
 80158e4:	685b      	ldr	r3, [r3, #4]
 80158e6:	61fb      	str	r3, [r7, #28]
    LWIP_ASSERT("check that first pbuf can hold struct ip_hdr",
 80158e8:	68fb      	ldr	r3, [r7, #12]
 80158ea:	895b      	ldrh	r3, [r3, #10]
 80158ec:	2b13      	cmp	r3, #19
 80158ee:	d806      	bhi.n	80158fe <ip4_output_if_src+0x5e>
 80158f0:	4b3c      	ldr	r3, [pc, #240]	; (80159e4 <ip4_output_if_src+0x144>)
 80158f2:	f44f 7262 	mov.w	r2, #904	; 0x388
 80158f6:	493e      	ldr	r1, [pc, #248]	; (80159f0 <ip4_output_if_src+0x150>)
 80158f8:	483c      	ldr	r0, [pc, #240]	; (80159ec <ip4_output_if_src+0x14c>)
 80158fa:	f001 fa79 	bl	8016df0 <iprintf>
                (p->len >= sizeof(struct ip_hdr)));

    IPH_TTL_SET(iphdr, ttl);
 80158fe:	69fb      	ldr	r3, [r7, #28]
 8015900:	78fa      	ldrb	r2, [r7, #3]
 8015902:	721a      	strb	r2, [r3, #8]
    IPH_PROTO_SET(iphdr, proto);
 8015904:	69fb      	ldr	r3, [r7, #28]
 8015906:	f897 202c 	ldrb.w	r2, [r7, #44]	; 0x2c
 801590a:	725a      	strb	r2, [r3, #9]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(proto | (ttl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */

    /* dest cannot be NULL here */
    ip4_addr_copy(iphdr->dest, *dest);
 801590c:	687b      	ldr	r3, [r7, #4]
 801590e:	681a      	ldr	r2, [r3, #0]
 8015910:	69fb      	ldr	r3, [r7, #28]
 8015912:	611a      	str	r2, [r3, #16]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += ip4_addr_get_u32(&iphdr->dest) & 0xFFFF;
    chk_sum += ip4_addr_get_u32(&iphdr->dest) >> 16;
#endif /* CHECKSUM_GEN_IP_INLINE */

    IPH_VHL_SET(iphdr, 4, ip_hlen / 4);
 8015914:	8b7b      	ldrh	r3, [r7, #26]
 8015916:	089b      	lsrs	r3, r3, #2
 8015918:	b29b      	uxth	r3, r3
 801591a:	b2db      	uxtb	r3, r3
 801591c:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8015920:	b2da      	uxtb	r2, r3
 8015922:	69fb      	ldr	r3, [r7, #28]
 8015924:	701a      	strb	r2, [r3, #0]
    IPH_TOS_SET(iphdr, tos);
 8015926:	69fb      	ldr	r3, [r7, #28]
 8015928:	f897 2028 	ldrb.w	r2, [r7, #40]	; 0x28
 801592c:	705a      	strb	r2, [r3, #1]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += PP_NTOHS(tos | (iphdr->_v_hl << 8));
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_LEN_SET(iphdr, lwip_htons(p->tot_len));
 801592e:	68fb      	ldr	r3, [r7, #12]
 8015930:	891b      	ldrh	r3, [r3, #8]
 8015932:	4618      	mov	r0, r3
 8015934:	f7f6 f8aa 	bl	800ba8c <lwip_htons>
 8015938:	4603      	mov	r3, r0
 801593a:	461a      	mov	r2, r3
 801593c:	69fb      	ldr	r3, [r7, #28]
 801593e:	805a      	strh	r2, [r3, #2]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_len;
#endif /* CHECKSUM_GEN_IP_INLINE */
    IPH_OFFSET_SET(iphdr, 0);
 8015940:	69fb      	ldr	r3, [r7, #28]
 8015942:	2200      	movs	r2, #0
 8015944:	719a      	strb	r2, [r3, #6]
 8015946:	2200      	movs	r2, #0
 8015948:	71da      	strb	r2, [r3, #7]
    IPH_ID_SET(iphdr, lwip_htons(ip_id));
 801594a:	4b2a      	ldr	r3, [pc, #168]	; (80159f4 <ip4_output_if_src+0x154>)
 801594c:	881b      	ldrh	r3, [r3, #0]
 801594e:	4618      	mov	r0, r3
 8015950:	f7f6 f89c 	bl	800ba8c <lwip_htons>
 8015954:	4603      	mov	r3, r0
 8015956:	461a      	mov	r2, r3
 8015958:	69fb      	ldr	r3, [r7, #28]
 801595a:	809a      	strh	r2, [r3, #4]
#if CHECKSUM_GEN_IP_INLINE
    chk_sum += iphdr->_id;
#endif /* CHECKSUM_GEN_IP_INLINE */
    ++ip_id;
 801595c:	4b25      	ldr	r3, [pc, #148]	; (80159f4 <ip4_output_if_src+0x154>)
 801595e:	881b      	ldrh	r3, [r3, #0]
 8015960:	3301      	adds	r3, #1
 8015962:	b29a      	uxth	r2, r3
 8015964:	4b23      	ldr	r3, [pc, #140]	; (80159f4 <ip4_output_if_src+0x154>)
 8015966:	801a      	strh	r2, [r3, #0]

    if (src == NULL) {
 8015968:	68bb      	ldr	r3, [r7, #8]
 801596a:	2b00      	cmp	r3, #0
 801596c:	d104      	bne.n	8015978 <ip4_output_if_src+0xd8>
      ip4_addr_copy(iphdr->src, *IP4_ADDR_ANY4);
 801596e:	4b22      	ldr	r3, [pc, #136]	; (80159f8 <ip4_output_if_src+0x158>)
 8015970:	681a      	ldr	r2, [r3, #0]
 8015972:	69fb      	ldr	r3, [r7, #28]
 8015974:	60da      	str	r2, [r3, #12]
 8015976:	e003      	b.n	8015980 <ip4_output_if_src+0xe0>
    } else {
      /* src cannot be NULL here */
      ip4_addr_copy(iphdr->src, *src);
 8015978:	68bb      	ldr	r3, [r7, #8]
 801597a:	681a      	ldr	r2, [r3, #0]
 801597c:	69fb      	ldr	r3, [r7, #28]
 801597e:	60da      	str	r2, [r3, #12]
    else {
      IPH_CHKSUM_SET(iphdr, 0);
    }
#endif /* LWIP_CHECKSUM_CTRL_PER_NETIF*/
#else /* CHECKSUM_GEN_IP_INLINE */
    IPH_CHKSUM_SET(iphdr, 0);
 8015980:	69fb      	ldr	r3, [r7, #28]
 8015982:	2200      	movs	r2, #0
 8015984:	729a      	strb	r2, [r3, #10]
 8015986:	2200      	movs	r2, #0
 8015988:	72da      	strb	r2, [r3, #11]
 801598a:	e00f      	b.n	80159ac <ip4_output_if_src+0x10c>
    }
#endif /* CHECKSUM_GEN_IP */
#endif /* CHECKSUM_GEN_IP_INLINE */
  } else {
    /* IP header already included in p */
    if (p->len < IP_HLEN) {
 801598c:	68fb      	ldr	r3, [r7, #12]
 801598e:	895b      	ldrh	r3, [r3, #10]
 8015990:	2b13      	cmp	r3, #19
 8015992:	d802      	bhi.n	801599a <ip4_output_if_src+0xfa>
      LWIP_DEBUGF(IP_DEBUG | LWIP_DBG_LEVEL_SERIOUS, ("ip4_output: LWIP_IP_HDRINCL but pbuf is too short\n"));
      IP_STATS_INC(ip.err);
      MIB2_STATS_INC(mib2.ipoutdiscards);
      return ERR_BUF;
 8015994:	f06f 0301 	mvn.w	r3, #1
 8015998:	e020      	b.n	80159dc <ip4_output_if_src+0x13c>
    }
    iphdr = (struct ip_hdr *)p->payload;
 801599a:	68fb      	ldr	r3, [r7, #12]
 801599c:	685b      	ldr	r3, [r3, #4]
 801599e:	61fb      	str	r3, [r7, #28]
    ip4_addr_copy(dest_addr, iphdr->dest);
 80159a0:	69fb      	ldr	r3, [r7, #28]
 80159a2:	691b      	ldr	r3, [r3, #16]
 80159a4:	617b      	str	r3, [r7, #20]
    dest = &dest_addr;
 80159a6:	f107 0314 	add.w	r3, r7, #20
 80159aa:	607b      	str	r3, [r7, #4]
  }
#endif /* LWIP_MULTICAST_TX_OPTIONS */
#endif /* ENABLE_LOOPBACK */
#if IP_FRAG
  /* don't fragment if interface has mtu set to 0 [loopif] */
  if (netif->mtu && (p->tot_len > netif->mtu)) {
 80159ac:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ae:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80159b0:	2b00      	cmp	r3, #0
 80159b2:	d00c      	beq.n	80159ce <ip4_output_if_src+0x12e>
 80159b4:	68fb      	ldr	r3, [r7, #12]
 80159b6:	891a      	ldrh	r2, [r3, #8]
 80159b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159ba:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 80159bc:	429a      	cmp	r2, r3
 80159be:	d906      	bls.n	80159ce <ip4_output_if_src+0x12e>
    return ip4_frag(p, netif, dest);
 80159c0:	687a      	ldr	r2, [r7, #4]
 80159c2:	6b39      	ldr	r1, [r7, #48]	; 0x30
 80159c4:	68f8      	ldr	r0, [r7, #12]
 80159c6:	f000 fd53 	bl	8016470 <ip4_frag>
 80159ca:	4603      	mov	r3, r0
 80159cc:	e006      	b.n	80159dc <ip4_output_if_src+0x13c>
  }
#endif /* IP_FRAG */

  LWIP_DEBUGF(IP_DEBUG, ("ip4_output_if: call netif->output()\n"));
  return netif->output(netif, p, dest);
 80159ce:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80159d0:	695b      	ldr	r3, [r3, #20]
 80159d2:	687a      	ldr	r2, [r7, #4]
 80159d4:	68f9      	ldr	r1, [r7, #12]
 80159d6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80159d8:	4798      	blx	r3
 80159da:	4603      	mov	r3, r0
}
 80159dc:	4618      	mov	r0, r3
 80159de:	3720      	adds	r7, #32
 80159e0:	46bd      	mov	sp, r7
 80159e2:	bd80      	pop	{r7, pc}
 80159e4:	0801b30c 	.word	0x0801b30c
 80159e8:	0801b340 	.word	0x0801b340
 80159ec:	0801b34c 	.word	0x0801b34c
 80159f0:	0801b374 	.word	0x0801b374
 80159f4:	2000f946 	.word	0x2000f946
 80159f8:	0801b7e0 	.word	0x0801b7e0

080159fc <ip4_addr_isbroadcast_u32>:
 * @param netif the network interface against which the address is checked
 * @return returns non-zero if the address is a broadcast address
 */
u8_t
ip4_addr_isbroadcast_u32(u32_t addr, const struct netif *netif)
{
 80159fc:	b480      	push	{r7}
 80159fe:	b085      	sub	sp, #20
 8015a00:	af00      	add	r7, sp, #0
 8015a02:	6078      	str	r0, [r7, #4]
 8015a04:	6039      	str	r1, [r7, #0]
  ip4_addr_t ipaddr;
  ip4_addr_set_u32(&ipaddr, addr);
 8015a06:	687b      	ldr	r3, [r7, #4]
 8015a08:	60fb      	str	r3, [r7, #12]

  /* all ones (broadcast) or all zeroes (old skool broadcast) */
  if ((~addr == IPADDR_ANY) ||
 8015a0a:	687b      	ldr	r3, [r7, #4]
 8015a0c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8015a10:	d002      	beq.n	8015a18 <ip4_addr_isbroadcast_u32+0x1c>
 8015a12:	687b      	ldr	r3, [r7, #4]
 8015a14:	2b00      	cmp	r3, #0
 8015a16:	d101      	bne.n	8015a1c <ip4_addr_isbroadcast_u32+0x20>
      (addr == IPADDR_ANY)) {
    return 1;
 8015a18:	2301      	movs	r3, #1
 8015a1a:	e02a      	b.n	8015a72 <ip4_addr_isbroadcast_u32+0x76>
    /* no broadcast support on this network interface? */
  } else if ((netif->flags & NETIF_FLAG_BROADCAST) == 0) {
 8015a1c:	683b      	ldr	r3, [r7, #0]
 8015a1e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 8015a22:	f003 0302 	and.w	r3, r3, #2
 8015a26:	2b00      	cmp	r3, #0
 8015a28:	d101      	bne.n	8015a2e <ip4_addr_isbroadcast_u32+0x32>
    /* the given address cannot be a broadcast address
     * nor can we check against any broadcast addresses */
    return 0;
 8015a2a:	2300      	movs	r3, #0
 8015a2c:	e021      	b.n	8015a72 <ip4_addr_isbroadcast_u32+0x76>
    /* address matches network interface address exactly? => no broadcast */
  } else if (addr == ip4_addr_get_u32(netif_ip4_addr(netif))) {
 8015a2e:	683b      	ldr	r3, [r7, #0]
 8015a30:	3304      	adds	r3, #4
 8015a32:	681b      	ldr	r3, [r3, #0]
 8015a34:	687a      	ldr	r2, [r7, #4]
 8015a36:	429a      	cmp	r2, r3
 8015a38:	d101      	bne.n	8015a3e <ip4_addr_isbroadcast_u32+0x42>
    return 0;
 8015a3a:	2300      	movs	r3, #0
 8015a3c:	e019      	b.n	8015a72 <ip4_addr_isbroadcast_u32+0x76>
    /*  on the same (sub) network... */
  } else if (ip4_addr_netcmp(&ipaddr, netif_ip4_addr(netif), netif_ip4_netmask(netif))
 8015a3e:	68fa      	ldr	r2, [r7, #12]
 8015a40:	683b      	ldr	r3, [r7, #0]
 8015a42:	3304      	adds	r3, #4
 8015a44:	681b      	ldr	r3, [r3, #0]
 8015a46:	405a      	eors	r2, r3
 8015a48:	683b      	ldr	r3, [r7, #0]
 8015a4a:	3308      	adds	r3, #8
 8015a4c:	681b      	ldr	r3, [r3, #0]
 8015a4e:	4013      	ands	r3, r2
 8015a50:	2b00      	cmp	r3, #0
 8015a52:	d10d      	bne.n	8015a70 <ip4_addr_isbroadcast_u32+0x74>
             /* ...and host identifier bits are all ones? =>... */
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a54:	683b      	ldr	r3, [r7, #0]
 8015a56:	3308      	adds	r3, #8
 8015a58:	681b      	ldr	r3, [r3, #0]
 8015a5a:	43da      	mvns	r2, r3
 8015a5c:	687b      	ldr	r3, [r7, #4]
 8015a5e:	401a      	ands	r2, r3
                 (IPADDR_BROADCAST & ~ip4_addr_get_u32(netif_ip4_netmask(netif))))) {
 8015a60:	683b      	ldr	r3, [r7, #0]
 8015a62:	3308      	adds	r3, #8
 8015a64:	681b      	ldr	r3, [r3, #0]
 8015a66:	43db      	mvns	r3, r3
             && ((addr & ~ip4_addr_get_u32(netif_ip4_netmask(netif))) ==
 8015a68:	429a      	cmp	r2, r3
 8015a6a:	d101      	bne.n	8015a70 <ip4_addr_isbroadcast_u32+0x74>
    /* => network broadcast address */
    return 1;
 8015a6c:	2301      	movs	r3, #1
 8015a6e:	e000      	b.n	8015a72 <ip4_addr_isbroadcast_u32+0x76>
  } else {
    return 0;
 8015a70:	2300      	movs	r3, #0
  }
}
 8015a72:	4618      	mov	r0, r3
 8015a74:	3714      	adds	r7, #20
 8015a76:	46bd      	mov	sp, r7
 8015a78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8015a7c:	4770      	bx	lr
	...

08015a80 <ip_reass_tmr>:
 *
 * Should be called every 1000 msec (defined by IP_TMR_INTERVAL).
 */
void
ip_reass_tmr(void)
{
 8015a80:	b580      	push	{r7, lr}
 8015a82:	b084      	sub	sp, #16
 8015a84:	af00      	add	r7, sp, #0
  struct ip_reassdata *r, *prev = NULL;
 8015a86:	2300      	movs	r3, #0
 8015a88:	60bb      	str	r3, [r7, #8]

  r = reassdatagrams;
 8015a8a:	4b12      	ldr	r3, [pc, #72]	; (8015ad4 <ip_reass_tmr+0x54>)
 8015a8c:	681b      	ldr	r3, [r3, #0]
 8015a8e:	60fb      	str	r3, [r7, #12]
  while (r != NULL) {
 8015a90:	e018      	b.n	8015ac4 <ip_reass_tmr+0x44>
    /* Decrement the timer. Once it reaches 0,
     * clean up the incomplete fragment assembly */
    if (r->timer > 0) {
 8015a92:	68fb      	ldr	r3, [r7, #12]
 8015a94:	7fdb      	ldrb	r3, [r3, #31]
 8015a96:	2b00      	cmp	r3, #0
 8015a98:	d00b      	beq.n	8015ab2 <ip_reass_tmr+0x32>
      r->timer--;
 8015a9a:	68fb      	ldr	r3, [r7, #12]
 8015a9c:	7fdb      	ldrb	r3, [r3, #31]
 8015a9e:	3b01      	subs	r3, #1
 8015aa0:	b2da      	uxtb	r2, r3
 8015aa2:	68fb      	ldr	r3, [r7, #12]
 8015aa4:	77da      	strb	r2, [r3, #31]
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer dec %"U16_F"\n", (u16_t)r->timer));
      prev = r;
 8015aa6:	68fb      	ldr	r3, [r7, #12]
 8015aa8:	60bb      	str	r3, [r7, #8]
      r = r->next;
 8015aaa:	68fb      	ldr	r3, [r7, #12]
 8015aac:	681b      	ldr	r3, [r3, #0]
 8015aae:	60fb      	str	r3, [r7, #12]
 8015ab0:	e008      	b.n	8015ac4 <ip_reass_tmr+0x44>
    } else {
      /* reassembly timed out */
      struct ip_reassdata *tmp;
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_tmr: timer timed out\n"));
      tmp = r;
 8015ab2:	68fb      	ldr	r3, [r7, #12]
 8015ab4:	607b      	str	r3, [r7, #4]
      /* get the next pointer before freeing */
      r = r->next;
 8015ab6:	68fb      	ldr	r3, [r7, #12]
 8015ab8:	681b      	ldr	r3, [r3, #0]
 8015aba:	60fb      	str	r3, [r7, #12]
      /* free the helper struct and all enqueued pbufs */
      ip_reass_free_complete_datagram(tmp, prev);
 8015abc:	68b9      	ldr	r1, [r7, #8]
 8015abe:	6878      	ldr	r0, [r7, #4]
 8015ac0:	f000 f80a 	bl	8015ad8 <ip_reass_free_complete_datagram>
  while (r != NULL) {
 8015ac4:	68fb      	ldr	r3, [r7, #12]
 8015ac6:	2b00      	cmp	r3, #0
 8015ac8:	d1e3      	bne.n	8015a92 <ip_reass_tmr+0x12>
    }
  }
}
 8015aca:	bf00      	nop
 8015acc:	bf00      	nop
 8015ace:	3710      	adds	r7, #16
 8015ad0:	46bd      	mov	sp, r7
 8015ad2:	bd80      	pop	{r7, pc}
 8015ad4:	2000f948 	.word	0x2000f948

08015ad8 <ip_reass_free_complete_datagram>:
 * @param prev the previous datagram in the linked list
 * @return the number of pbufs freed
 */
static int
ip_reass_free_complete_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015ad8:	b580      	push	{r7, lr}
 8015ada:	b088      	sub	sp, #32
 8015adc:	af00      	add	r7, sp, #0
 8015ade:	6078      	str	r0, [r7, #4]
 8015ae0:	6039      	str	r1, [r7, #0]
  u16_t pbufs_freed = 0;
 8015ae2:	2300      	movs	r3, #0
 8015ae4:	83fb      	strh	r3, [r7, #30]
  u16_t clen;
  struct pbuf *p;
  struct ip_reass_helper *iprh;

  LWIP_ASSERT("prev != ipr", prev != ipr);
 8015ae6:	683a      	ldr	r2, [r7, #0]
 8015ae8:	687b      	ldr	r3, [r7, #4]
 8015aea:	429a      	cmp	r2, r3
 8015aec:	d105      	bne.n	8015afa <ip_reass_free_complete_datagram+0x22>
 8015aee:	4b45      	ldr	r3, [pc, #276]	; (8015c04 <ip_reass_free_complete_datagram+0x12c>)
 8015af0:	22ab      	movs	r2, #171	; 0xab
 8015af2:	4945      	ldr	r1, [pc, #276]	; (8015c08 <ip_reass_free_complete_datagram+0x130>)
 8015af4:	4845      	ldr	r0, [pc, #276]	; (8015c0c <ip_reass_free_complete_datagram+0x134>)
 8015af6:	f001 f97b 	bl	8016df0 <iprintf>
  if (prev != NULL) {
 8015afa:	683b      	ldr	r3, [r7, #0]
 8015afc:	2b00      	cmp	r3, #0
 8015afe:	d00a      	beq.n	8015b16 <ip_reass_free_complete_datagram+0x3e>
    LWIP_ASSERT("prev->next == ipr", prev->next == ipr);
 8015b00:	683b      	ldr	r3, [r7, #0]
 8015b02:	681b      	ldr	r3, [r3, #0]
 8015b04:	687a      	ldr	r2, [r7, #4]
 8015b06:	429a      	cmp	r2, r3
 8015b08:	d005      	beq.n	8015b16 <ip_reass_free_complete_datagram+0x3e>
 8015b0a:	4b3e      	ldr	r3, [pc, #248]	; (8015c04 <ip_reass_free_complete_datagram+0x12c>)
 8015b0c:	22ad      	movs	r2, #173	; 0xad
 8015b0e:	4940      	ldr	r1, [pc, #256]	; (8015c10 <ip_reass_free_complete_datagram+0x138>)
 8015b10:	483e      	ldr	r0, [pc, #248]	; (8015c0c <ip_reass_free_complete_datagram+0x134>)
 8015b12:	f001 f96d 	bl	8016df0 <iprintf>
  }

  MIB2_STATS_INC(mib2.ipreasmfails);
#if LWIP_ICMP
  iprh = (struct ip_reass_helper *)ipr->p->payload;
 8015b16:	687b      	ldr	r3, [r7, #4]
 8015b18:	685b      	ldr	r3, [r3, #4]
 8015b1a:	685b      	ldr	r3, [r3, #4]
 8015b1c:	617b      	str	r3, [r7, #20]
  if (iprh->start == 0) {
 8015b1e:	697b      	ldr	r3, [r7, #20]
 8015b20:	889b      	ldrh	r3, [r3, #4]
 8015b22:	b29b      	uxth	r3, r3
 8015b24:	2b00      	cmp	r3, #0
 8015b26:	d12a      	bne.n	8015b7e <ip_reass_free_complete_datagram+0xa6>
    /* The first fragment was received, send ICMP time exceeded. */
    /* First, de-queue the first pbuf from r->p. */
    p = ipr->p;
 8015b28:	687b      	ldr	r3, [r7, #4]
 8015b2a:	685b      	ldr	r3, [r3, #4]
 8015b2c:	61bb      	str	r3, [r7, #24]
    ipr->p = iprh->next_pbuf;
 8015b2e:	697b      	ldr	r3, [r7, #20]
 8015b30:	681a      	ldr	r2, [r3, #0]
 8015b32:	687b      	ldr	r3, [r7, #4]
 8015b34:	605a      	str	r2, [r3, #4]
    /* Then, copy the original header into it. */
    SMEMCPY(p->payload, &ipr->iphdr, IP_HLEN);
 8015b36:	69bb      	ldr	r3, [r7, #24]
 8015b38:	6858      	ldr	r0, [r3, #4]
 8015b3a:	687b      	ldr	r3, [r7, #4]
 8015b3c:	3308      	adds	r3, #8
 8015b3e:	2214      	movs	r2, #20
 8015b40:	4619      	mov	r1, r3
 8015b42:	f001 fad1 	bl	80170e8 <memcpy>
    icmp_time_exceeded(p, ICMP_TE_FRAG);
 8015b46:	2101      	movs	r1, #1
 8015b48:	69b8      	ldr	r0, [r7, #24]
 8015b4a:	f7ff fc47 	bl	80153dc <icmp_time_exceeded>
    clen = pbuf_clen(p);
 8015b4e:	69b8      	ldr	r0, [r7, #24]
 8015b50:	f7f7 fc1c 	bl	800d38c <pbuf_clen>
 8015b54:	4603      	mov	r3, r0
 8015b56:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015b58:	8bfa      	ldrh	r2, [r7, #30]
 8015b5a:	8a7b      	ldrh	r3, [r7, #18]
 8015b5c:	4413      	add	r3, r2
 8015b5e:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015b62:	db05      	blt.n	8015b70 <ip_reass_free_complete_datagram+0x98>
 8015b64:	4b27      	ldr	r3, [pc, #156]	; (8015c04 <ip_reass_free_complete_datagram+0x12c>)
 8015b66:	22bc      	movs	r2, #188	; 0xbc
 8015b68:	492a      	ldr	r1, [pc, #168]	; (8015c14 <ip_reass_free_complete_datagram+0x13c>)
 8015b6a:	4828      	ldr	r0, [pc, #160]	; (8015c0c <ip_reass_free_complete_datagram+0x134>)
 8015b6c:	f001 f940 	bl	8016df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015b70:	8bfa      	ldrh	r2, [r7, #30]
 8015b72:	8a7b      	ldrh	r3, [r7, #18]
 8015b74:	4413      	add	r3, r2
 8015b76:	83fb      	strh	r3, [r7, #30]
    pbuf_free(p);
 8015b78:	69b8      	ldr	r0, [r7, #24]
 8015b7a:	f7f7 fb79 	bl	800d270 <pbuf_free>
  }
#endif /* LWIP_ICMP */

  /* First, free all received pbufs.  The individual pbufs need to be released
     separately as they have not yet been chained */
  p = ipr->p;
 8015b7e:	687b      	ldr	r3, [r7, #4]
 8015b80:	685b      	ldr	r3, [r3, #4]
 8015b82:	61bb      	str	r3, [r7, #24]
  while (p != NULL) {
 8015b84:	e01f      	b.n	8015bc6 <ip_reass_free_complete_datagram+0xee>
    struct pbuf *pcur;
    iprh = (struct ip_reass_helper *)p->payload;
 8015b86:	69bb      	ldr	r3, [r7, #24]
 8015b88:	685b      	ldr	r3, [r3, #4]
 8015b8a:	617b      	str	r3, [r7, #20]
    pcur = p;
 8015b8c:	69bb      	ldr	r3, [r7, #24]
 8015b8e:	60fb      	str	r3, [r7, #12]
    /* get the next pointer before freeing */
    p = iprh->next_pbuf;
 8015b90:	697b      	ldr	r3, [r7, #20]
 8015b92:	681b      	ldr	r3, [r3, #0]
 8015b94:	61bb      	str	r3, [r7, #24]
    clen = pbuf_clen(pcur);
 8015b96:	68f8      	ldr	r0, [r7, #12]
 8015b98:	f7f7 fbf8 	bl	800d38c <pbuf_clen>
 8015b9c:	4603      	mov	r3, r0
 8015b9e:	827b      	strh	r3, [r7, #18]
    LWIP_ASSERT("pbufs_freed + clen <= 0xffff", pbufs_freed + clen <= 0xffff);
 8015ba0:	8bfa      	ldrh	r2, [r7, #30]
 8015ba2:	8a7b      	ldrh	r3, [r7, #18]
 8015ba4:	4413      	add	r3, r2
 8015ba6:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8015baa:	db05      	blt.n	8015bb8 <ip_reass_free_complete_datagram+0xe0>
 8015bac:	4b15      	ldr	r3, [pc, #84]	; (8015c04 <ip_reass_free_complete_datagram+0x12c>)
 8015bae:	22cc      	movs	r2, #204	; 0xcc
 8015bb0:	4918      	ldr	r1, [pc, #96]	; (8015c14 <ip_reass_free_complete_datagram+0x13c>)
 8015bb2:	4816      	ldr	r0, [pc, #88]	; (8015c0c <ip_reass_free_complete_datagram+0x134>)
 8015bb4:	f001 f91c 	bl	8016df0 <iprintf>
    pbufs_freed = (u16_t)(pbufs_freed + clen);
 8015bb8:	8bfa      	ldrh	r2, [r7, #30]
 8015bba:	8a7b      	ldrh	r3, [r7, #18]
 8015bbc:	4413      	add	r3, r2
 8015bbe:	83fb      	strh	r3, [r7, #30]
    pbuf_free(pcur);
 8015bc0:	68f8      	ldr	r0, [r7, #12]
 8015bc2:	f7f7 fb55 	bl	800d270 <pbuf_free>
  while (p != NULL) {
 8015bc6:	69bb      	ldr	r3, [r7, #24]
 8015bc8:	2b00      	cmp	r3, #0
 8015bca:	d1dc      	bne.n	8015b86 <ip_reass_free_complete_datagram+0xae>
  }
  /* Then, unchain the struct ip_reassdata from the list and free it. */
  ip_reass_dequeue_datagram(ipr, prev);
 8015bcc:	6839      	ldr	r1, [r7, #0]
 8015bce:	6878      	ldr	r0, [r7, #4]
 8015bd0:	f000 f8c2 	bl	8015d58 <ip_reass_dequeue_datagram>
  LWIP_ASSERT("ip_reass_pbufcount >= pbufs_freed", ip_reass_pbufcount >= pbufs_freed);
 8015bd4:	4b10      	ldr	r3, [pc, #64]	; (8015c18 <ip_reass_free_complete_datagram+0x140>)
 8015bd6:	881b      	ldrh	r3, [r3, #0]
 8015bd8:	8bfa      	ldrh	r2, [r7, #30]
 8015bda:	429a      	cmp	r2, r3
 8015bdc:	d905      	bls.n	8015bea <ip_reass_free_complete_datagram+0x112>
 8015bde:	4b09      	ldr	r3, [pc, #36]	; (8015c04 <ip_reass_free_complete_datagram+0x12c>)
 8015be0:	22d2      	movs	r2, #210	; 0xd2
 8015be2:	490e      	ldr	r1, [pc, #56]	; (8015c1c <ip_reass_free_complete_datagram+0x144>)
 8015be4:	4809      	ldr	r0, [pc, #36]	; (8015c0c <ip_reass_free_complete_datagram+0x134>)
 8015be6:	f001 f903 	bl	8016df0 <iprintf>
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - pbufs_freed);
 8015bea:	4b0b      	ldr	r3, [pc, #44]	; (8015c18 <ip_reass_free_complete_datagram+0x140>)
 8015bec:	881a      	ldrh	r2, [r3, #0]
 8015bee:	8bfb      	ldrh	r3, [r7, #30]
 8015bf0:	1ad3      	subs	r3, r2, r3
 8015bf2:	b29a      	uxth	r2, r3
 8015bf4:	4b08      	ldr	r3, [pc, #32]	; (8015c18 <ip_reass_free_complete_datagram+0x140>)
 8015bf6:	801a      	strh	r2, [r3, #0]

  return pbufs_freed;
 8015bf8:	8bfb      	ldrh	r3, [r7, #30]
}
 8015bfa:	4618      	mov	r0, r3
 8015bfc:	3720      	adds	r7, #32
 8015bfe:	46bd      	mov	sp, r7
 8015c00:	bd80      	pop	{r7, pc}
 8015c02:	bf00      	nop
 8015c04:	0801b3a4 	.word	0x0801b3a4
 8015c08:	0801b3e0 	.word	0x0801b3e0
 8015c0c:	0801b3ec 	.word	0x0801b3ec
 8015c10:	0801b414 	.word	0x0801b414
 8015c14:	0801b428 	.word	0x0801b428
 8015c18:	2000f94c 	.word	0x2000f94c
 8015c1c:	0801b448 	.word	0x0801b448

08015c20 <ip_reass_remove_oldest_datagram>:
 *        (used for freeing other datagrams if not enough space)
 * @return the number of pbufs freed
 */
static int
ip_reass_remove_oldest_datagram(struct ip_hdr *fraghdr, int pbufs_needed)
{
 8015c20:	b580      	push	{r7, lr}
 8015c22:	b08a      	sub	sp, #40	; 0x28
 8015c24:	af00      	add	r7, sp, #0
 8015c26:	6078      	str	r0, [r7, #4]
 8015c28:	6039      	str	r1, [r7, #0]
  /* @todo Can't we simply remove the last datagram in the
   *       linked list behind reassdatagrams?
   */
  struct ip_reassdata *r, *oldest, *prev, *oldest_prev;
  int pbufs_freed = 0, pbufs_freed_current;
 8015c2a:	2300      	movs	r3, #0
 8015c2c:	617b      	str	r3, [r7, #20]
  int other_datagrams;

  /* Free datagrams until being allowed to enqueue 'pbufs_needed' pbufs,
   * but don't free the datagram that 'fraghdr' belongs to! */
  do {
    oldest = NULL;
 8015c2e:	2300      	movs	r3, #0
 8015c30:	623b      	str	r3, [r7, #32]
    prev = NULL;
 8015c32:	2300      	movs	r3, #0
 8015c34:	61fb      	str	r3, [r7, #28]
    oldest_prev = NULL;
 8015c36:	2300      	movs	r3, #0
 8015c38:	61bb      	str	r3, [r7, #24]
    other_datagrams = 0;
 8015c3a:	2300      	movs	r3, #0
 8015c3c:	613b      	str	r3, [r7, #16]
    r = reassdatagrams;
 8015c3e:	4b28      	ldr	r3, [pc, #160]	; (8015ce0 <ip_reass_remove_oldest_datagram+0xc0>)
 8015c40:	681b      	ldr	r3, [r3, #0]
 8015c42:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015c44:	e030      	b.n	8015ca8 <ip_reass_remove_oldest_datagram+0x88>
      if (!IP_ADDRESSES_AND_ID_MATCH(&r->iphdr, fraghdr)) {
 8015c46:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c48:	695a      	ldr	r2, [r3, #20]
 8015c4a:	687b      	ldr	r3, [r7, #4]
 8015c4c:	68db      	ldr	r3, [r3, #12]
 8015c4e:	429a      	cmp	r2, r3
 8015c50:	d10c      	bne.n	8015c6c <ip_reass_remove_oldest_datagram+0x4c>
 8015c52:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c54:	699a      	ldr	r2, [r3, #24]
 8015c56:	687b      	ldr	r3, [r7, #4]
 8015c58:	691b      	ldr	r3, [r3, #16]
 8015c5a:	429a      	cmp	r2, r3
 8015c5c:	d106      	bne.n	8015c6c <ip_reass_remove_oldest_datagram+0x4c>
 8015c5e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c60:	899a      	ldrh	r2, [r3, #12]
 8015c62:	687b      	ldr	r3, [r7, #4]
 8015c64:	889b      	ldrh	r3, [r3, #4]
 8015c66:	b29b      	uxth	r3, r3
 8015c68:	429a      	cmp	r2, r3
 8015c6a:	d014      	beq.n	8015c96 <ip_reass_remove_oldest_datagram+0x76>
        /* Not the same datagram as fraghdr */
        other_datagrams++;
 8015c6c:	693b      	ldr	r3, [r7, #16]
 8015c6e:	3301      	adds	r3, #1
 8015c70:	613b      	str	r3, [r7, #16]
        if (oldest == NULL) {
 8015c72:	6a3b      	ldr	r3, [r7, #32]
 8015c74:	2b00      	cmp	r3, #0
 8015c76:	d104      	bne.n	8015c82 <ip_reass_remove_oldest_datagram+0x62>
          oldest = r;
 8015c78:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c7a:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c7c:	69fb      	ldr	r3, [r7, #28]
 8015c7e:	61bb      	str	r3, [r7, #24]
 8015c80:	e009      	b.n	8015c96 <ip_reass_remove_oldest_datagram+0x76>
        } else if (r->timer <= oldest->timer) {
 8015c82:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c84:	7fda      	ldrb	r2, [r3, #31]
 8015c86:	6a3b      	ldr	r3, [r7, #32]
 8015c88:	7fdb      	ldrb	r3, [r3, #31]
 8015c8a:	429a      	cmp	r2, r3
 8015c8c:	d803      	bhi.n	8015c96 <ip_reass_remove_oldest_datagram+0x76>
          /* older than the previous oldest */
          oldest = r;
 8015c8e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c90:	623b      	str	r3, [r7, #32]
          oldest_prev = prev;
 8015c92:	69fb      	ldr	r3, [r7, #28]
 8015c94:	61bb      	str	r3, [r7, #24]
        }
      }
      if (r->next != NULL) {
 8015c96:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015c98:	681b      	ldr	r3, [r3, #0]
 8015c9a:	2b00      	cmp	r3, #0
 8015c9c:	d001      	beq.n	8015ca2 <ip_reass_remove_oldest_datagram+0x82>
        prev = r;
 8015c9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca0:	61fb      	str	r3, [r7, #28]
      }
      r = r->next;
 8015ca2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015ca4:	681b      	ldr	r3, [r3, #0]
 8015ca6:	627b      	str	r3, [r7, #36]	; 0x24
    while (r != NULL) {
 8015ca8:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015caa:	2b00      	cmp	r3, #0
 8015cac:	d1cb      	bne.n	8015c46 <ip_reass_remove_oldest_datagram+0x26>
    }
    if (oldest != NULL) {
 8015cae:	6a3b      	ldr	r3, [r7, #32]
 8015cb0:	2b00      	cmp	r3, #0
 8015cb2:	d008      	beq.n	8015cc6 <ip_reass_remove_oldest_datagram+0xa6>
      pbufs_freed_current = ip_reass_free_complete_datagram(oldest, oldest_prev);
 8015cb4:	69b9      	ldr	r1, [r7, #24]
 8015cb6:	6a38      	ldr	r0, [r7, #32]
 8015cb8:	f7ff ff0e 	bl	8015ad8 <ip_reass_free_complete_datagram>
 8015cbc:	60f8      	str	r0, [r7, #12]
      pbufs_freed += pbufs_freed_current;
 8015cbe:	697a      	ldr	r2, [r7, #20]
 8015cc0:	68fb      	ldr	r3, [r7, #12]
 8015cc2:	4413      	add	r3, r2
 8015cc4:	617b      	str	r3, [r7, #20]
    }
  } while ((pbufs_freed < pbufs_needed) && (other_datagrams > 1));
 8015cc6:	697a      	ldr	r2, [r7, #20]
 8015cc8:	683b      	ldr	r3, [r7, #0]
 8015cca:	429a      	cmp	r2, r3
 8015ccc:	da02      	bge.n	8015cd4 <ip_reass_remove_oldest_datagram+0xb4>
 8015cce:	693b      	ldr	r3, [r7, #16]
 8015cd0:	2b01      	cmp	r3, #1
 8015cd2:	dcac      	bgt.n	8015c2e <ip_reass_remove_oldest_datagram+0xe>
  return pbufs_freed;
 8015cd4:	697b      	ldr	r3, [r7, #20]
}
 8015cd6:	4618      	mov	r0, r3
 8015cd8:	3728      	adds	r7, #40	; 0x28
 8015cda:	46bd      	mov	sp, r7
 8015cdc:	bd80      	pop	{r7, pc}
 8015cde:	bf00      	nop
 8015ce0:	2000f948 	.word	0x2000f948

08015ce4 <ip_reass_enqueue_new_datagram>:
 * @param clen number of pbufs needed to enqueue (used for freeing other datagrams if not enough space)
 * @return A pointer to the queue location into which the fragment was enqueued
 */
static struct ip_reassdata *
ip_reass_enqueue_new_datagram(struct ip_hdr *fraghdr, int clen)
{
 8015ce4:	b580      	push	{r7, lr}
 8015ce6:	b084      	sub	sp, #16
 8015ce8:	af00      	add	r7, sp, #0
 8015cea:	6078      	str	r0, [r7, #4]
 8015cec:	6039      	str	r1, [r7, #0]
#if ! IP_REASS_FREE_OLDEST
  LWIP_UNUSED_ARG(clen);
#endif

  /* No matching previous fragment found, allocate a new reassdata struct */
  ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015cee:	2004      	movs	r0, #4
 8015cf0:	f7f6 fba4 	bl	800c43c <memp_malloc>
 8015cf4:	60f8      	str	r0, [r7, #12]
  if (ipr == NULL) {
 8015cf6:	68fb      	ldr	r3, [r7, #12]
 8015cf8:	2b00      	cmp	r3, #0
 8015cfa:	d110      	bne.n	8015d1e <ip_reass_enqueue_new_datagram+0x3a>
#if IP_REASS_FREE_OLDEST
    if (ip_reass_remove_oldest_datagram(fraghdr, clen) >= clen) {
 8015cfc:	6839      	ldr	r1, [r7, #0]
 8015cfe:	6878      	ldr	r0, [r7, #4]
 8015d00:	f7ff ff8e 	bl	8015c20 <ip_reass_remove_oldest_datagram>
 8015d04:	4602      	mov	r2, r0
 8015d06:	683b      	ldr	r3, [r7, #0]
 8015d08:	4293      	cmp	r3, r2
 8015d0a:	dc03      	bgt.n	8015d14 <ip_reass_enqueue_new_datagram+0x30>
      ipr = (struct ip_reassdata *)memp_malloc(MEMP_REASSDATA);
 8015d0c:	2004      	movs	r0, #4
 8015d0e:	f7f6 fb95 	bl	800c43c <memp_malloc>
 8015d12:	60f8      	str	r0, [r7, #12]
    }
    if (ipr == NULL)
 8015d14:	68fb      	ldr	r3, [r7, #12]
 8015d16:	2b00      	cmp	r3, #0
 8015d18:	d101      	bne.n	8015d1e <ip_reass_enqueue_new_datagram+0x3a>
#endif /* IP_REASS_FREE_OLDEST */
    {
      IPFRAG_STATS_INC(ip_frag.memerr);
      LWIP_DEBUGF(IP_REASS_DEBUG, ("Failed to alloc reassdata struct\n"));
      return NULL;
 8015d1a:	2300      	movs	r3, #0
 8015d1c:	e016      	b.n	8015d4c <ip_reass_enqueue_new_datagram+0x68>
    }
  }
  memset(ipr, 0, sizeof(struct ip_reassdata));
 8015d1e:	2220      	movs	r2, #32
 8015d20:	2100      	movs	r1, #0
 8015d22:	68f8      	ldr	r0, [r7, #12]
 8015d24:	f001 f903 	bl	8016f2e <memset>
  ipr->timer = IP_REASS_MAXAGE;
 8015d28:	68fb      	ldr	r3, [r7, #12]
 8015d2a:	220f      	movs	r2, #15
 8015d2c:	77da      	strb	r2, [r3, #31]

  /* enqueue the new structure to the front of the list */
  ipr->next = reassdatagrams;
 8015d2e:	4b09      	ldr	r3, [pc, #36]	; (8015d54 <ip_reass_enqueue_new_datagram+0x70>)
 8015d30:	681a      	ldr	r2, [r3, #0]
 8015d32:	68fb      	ldr	r3, [r7, #12]
 8015d34:	601a      	str	r2, [r3, #0]
  reassdatagrams = ipr;
 8015d36:	4a07      	ldr	r2, [pc, #28]	; (8015d54 <ip_reass_enqueue_new_datagram+0x70>)
 8015d38:	68fb      	ldr	r3, [r7, #12]
 8015d3a:	6013      	str	r3, [r2, #0]
  /* copy the ip header for later tests and input */
  /* @todo: no ip options supported? */
  SMEMCPY(&(ipr->iphdr), fraghdr, IP_HLEN);
 8015d3c:	68fb      	ldr	r3, [r7, #12]
 8015d3e:	3308      	adds	r3, #8
 8015d40:	2214      	movs	r2, #20
 8015d42:	6879      	ldr	r1, [r7, #4]
 8015d44:	4618      	mov	r0, r3
 8015d46:	f001 f9cf 	bl	80170e8 <memcpy>
  return ipr;
 8015d4a:	68fb      	ldr	r3, [r7, #12]
}
 8015d4c:	4618      	mov	r0, r3
 8015d4e:	3710      	adds	r7, #16
 8015d50:	46bd      	mov	sp, r7
 8015d52:	bd80      	pop	{r7, pc}
 8015d54:	2000f948 	.word	0x2000f948

08015d58 <ip_reass_dequeue_datagram>:
 * Dequeues a datagram from the datagram queue. Doesn't deallocate the pbufs.
 * @param ipr points to the queue entry to dequeue
 */
static void
ip_reass_dequeue_datagram(struct ip_reassdata *ipr, struct ip_reassdata *prev)
{
 8015d58:	b580      	push	{r7, lr}
 8015d5a:	b082      	sub	sp, #8
 8015d5c:	af00      	add	r7, sp, #0
 8015d5e:	6078      	str	r0, [r7, #4]
 8015d60:	6039      	str	r1, [r7, #0]
  /* dequeue the reass struct  */
  if (reassdatagrams == ipr) {
 8015d62:	4b10      	ldr	r3, [pc, #64]	; (8015da4 <ip_reass_dequeue_datagram+0x4c>)
 8015d64:	681b      	ldr	r3, [r3, #0]
 8015d66:	687a      	ldr	r2, [r7, #4]
 8015d68:	429a      	cmp	r2, r3
 8015d6a:	d104      	bne.n	8015d76 <ip_reass_dequeue_datagram+0x1e>
    /* it was the first in the list */
    reassdatagrams = ipr->next;
 8015d6c:	687b      	ldr	r3, [r7, #4]
 8015d6e:	681b      	ldr	r3, [r3, #0]
 8015d70:	4a0c      	ldr	r2, [pc, #48]	; (8015da4 <ip_reass_dequeue_datagram+0x4c>)
 8015d72:	6013      	str	r3, [r2, #0]
 8015d74:	e00d      	b.n	8015d92 <ip_reass_dequeue_datagram+0x3a>
  } else {
    /* it wasn't the first, so it must have a valid 'prev' */
    LWIP_ASSERT("sanity check linked list", prev != NULL);
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	2b00      	cmp	r3, #0
 8015d7a:	d106      	bne.n	8015d8a <ip_reass_dequeue_datagram+0x32>
 8015d7c:	4b0a      	ldr	r3, [pc, #40]	; (8015da8 <ip_reass_dequeue_datagram+0x50>)
 8015d7e:	f240 1245 	movw	r2, #325	; 0x145
 8015d82:	490a      	ldr	r1, [pc, #40]	; (8015dac <ip_reass_dequeue_datagram+0x54>)
 8015d84:	480a      	ldr	r0, [pc, #40]	; (8015db0 <ip_reass_dequeue_datagram+0x58>)
 8015d86:	f001 f833 	bl	8016df0 <iprintf>
    prev->next = ipr->next;
 8015d8a:	687b      	ldr	r3, [r7, #4]
 8015d8c:	681a      	ldr	r2, [r3, #0]
 8015d8e:	683b      	ldr	r3, [r7, #0]
 8015d90:	601a      	str	r2, [r3, #0]
  }

  /* now we can free the ip_reassdata struct */
  memp_free(MEMP_REASSDATA, ipr);
 8015d92:	6879      	ldr	r1, [r7, #4]
 8015d94:	2004      	movs	r0, #4
 8015d96:	f7f6 fbc7 	bl	800c528 <memp_free>
}
 8015d9a:	bf00      	nop
 8015d9c:	3708      	adds	r7, #8
 8015d9e:	46bd      	mov	sp, r7
 8015da0:	bd80      	pop	{r7, pc}
 8015da2:	bf00      	nop
 8015da4:	2000f948 	.word	0x2000f948
 8015da8:	0801b3a4 	.word	0x0801b3a4
 8015dac:	0801b46c 	.word	0x0801b46c
 8015db0:	0801b3ec 	.word	0x0801b3ec

08015db4 <ip_reass_chain_frag_into_datagram_and_validate>:
 * @param is_last is 1 if this pbuf has MF==0 (ipr->flags not updated yet)
 * @return see IP_REASS_VALIDATE_* defines
 */
static int
ip_reass_chain_frag_into_datagram_and_validate(struct ip_reassdata *ipr, struct pbuf *new_p, int is_last)
{
 8015db4:	b580      	push	{r7, lr}
 8015db6:	b08c      	sub	sp, #48	; 0x30
 8015db8:	af00      	add	r7, sp, #0
 8015dba:	60f8      	str	r0, [r7, #12]
 8015dbc:	60b9      	str	r1, [r7, #8]
 8015dbe:	607a      	str	r2, [r7, #4]
  struct ip_reass_helper *iprh, *iprh_tmp, *iprh_prev = NULL;
 8015dc0:	2300      	movs	r3, #0
 8015dc2:	62bb      	str	r3, [r7, #40]	; 0x28
  struct pbuf *q;
  u16_t offset, len;
  u8_t hlen;
  struct ip_hdr *fraghdr;
  int valid = 1;
 8015dc4:	2301      	movs	r3, #1
 8015dc6:	623b      	str	r3, [r7, #32]

  /* Extract length and fragment offset from current fragment */
  fraghdr = (struct ip_hdr *)new_p->payload;
 8015dc8:	68bb      	ldr	r3, [r7, #8]
 8015dca:	685b      	ldr	r3, [r3, #4]
 8015dcc:	61fb      	str	r3, [r7, #28]
  len = lwip_ntohs(IPH_LEN(fraghdr));
 8015dce:	69fb      	ldr	r3, [r7, #28]
 8015dd0:	885b      	ldrh	r3, [r3, #2]
 8015dd2:	b29b      	uxth	r3, r3
 8015dd4:	4618      	mov	r0, r3
 8015dd6:	f7f5 fe59 	bl	800ba8c <lwip_htons>
 8015dda:	4603      	mov	r3, r0
 8015ddc:	837b      	strh	r3, [r7, #26]
  hlen = IPH_HL_BYTES(fraghdr);
 8015dde:	69fb      	ldr	r3, [r7, #28]
 8015de0:	781b      	ldrb	r3, [r3, #0]
 8015de2:	f003 030f 	and.w	r3, r3, #15
 8015de6:	b2db      	uxtb	r3, r3
 8015de8:	009b      	lsls	r3, r3, #2
 8015dea:	767b      	strb	r3, [r7, #25]
  if (hlen > len) {
 8015dec:	7e7b      	ldrb	r3, [r7, #25]
 8015dee:	b29b      	uxth	r3, r3
 8015df0:	8b7a      	ldrh	r2, [r7, #26]
 8015df2:	429a      	cmp	r2, r3
 8015df4:	d202      	bcs.n	8015dfc <ip_reass_chain_frag_into_datagram_and_validate+0x48>
    /* invalid datagram */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015df6:	f04f 33ff 	mov.w	r3, #4294967295
 8015dfa:	e135      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  len = (u16_t)(len - hlen);
 8015dfc:	7e7b      	ldrb	r3, [r7, #25]
 8015dfe:	b29b      	uxth	r3, r3
 8015e00:	8b7a      	ldrh	r2, [r7, #26]
 8015e02:	1ad3      	subs	r3, r2, r3
 8015e04:	837b      	strh	r3, [r7, #26]
  offset = IPH_OFFSET_BYTES(fraghdr);
 8015e06:	69fb      	ldr	r3, [r7, #28]
 8015e08:	88db      	ldrh	r3, [r3, #6]
 8015e0a:	b29b      	uxth	r3, r3
 8015e0c:	4618      	mov	r0, r3
 8015e0e:	f7f5 fe3d 	bl	800ba8c <lwip_htons>
 8015e12:	4603      	mov	r3, r0
 8015e14:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8015e18:	b29b      	uxth	r3, r3
 8015e1a:	00db      	lsls	r3, r3, #3
 8015e1c:	82fb      	strh	r3, [r7, #22]
  /* overwrite the fragment's ip header from the pbuf with our helper struct,
   * and setup the embedded helper structure. */
  /* make sure the struct ip_reass_helper fits into the IP header */
  LWIP_ASSERT("sizeof(struct ip_reass_helper) <= IP_HLEN",
              sizeof(struct ip_reass_helper) <= IP_HLEN);
  iprh = (struct ip_reass_helper *)new_p->payload;
 8015e1e:	68bb      	ldr	r3, [r7, #8]
 8015e20:	685b      	ldr	r3, [r3, #4]
 8015e22:	62fb      	str	r3, [r7, #44]	; 0x2c
  iprh->next_pbuf = NULL;
 8015e24:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e26:	2200      	movs	r2, #0
 8015e28:	701a      	strb	r2, [r3, #0]
 8015e2a:	2200      	movs	r2, #0
 8015e2c:	705a      	strb	r2, [r3, #1]
 8015e2e:	2200      	movs	r2, #0
 8015e30:	709a      	strb	r2, [r3, #2]
 8015e32:	2200      	movs	r2, #0
 8015e34:	70da      	strb	r2, [r3, #3]
  iprh->start = offset;
 8015e36:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e38:	8afa      	ldrh	r2, [r7, #22]
 8015e3a:	809a      	strh	r2, [r3, #4]
  iprh->end = (u16_t)(offset + len);
 8015e3c:	8afa      	ldrh	r2, [r7, #22]
 8015e3e:	8b7b      	ldrh	r3, [r7, #26]
 8015e40:	4413      	add	r3, r2
 8015e42:	b29a      	uxth	r2, r3
 8015e44:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e46:	80da      	strh	r2, [r3, #6]
  if (iprh->end < offset) {
 8015e48:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e4a:	88db      	ldrh	r3, [r3, #6]
 8015e4c:	b29b      	uxth	r3, r3
 8015e4e:	8afa      	ldrh	r2, [r7, #22]
 8015e50:	429a      	cmp	r2, r3
 8015e52:	d902      	bls.n	8015e5a <ip_reass_chain_frag_into_datagram_and_validate+0xa6>
    /* u16_t overflow, cannot handle this */
    return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015e54:	f04f 33ff 	mov.w	r3, #4294967295
 8015e58:	e106      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }

  /* Iterate through until we either get to the end of the list (append),
   * or we find one with a larger offset (insert). */
  for (q = ipr->p; q != NULL;) {
 8015e5a:	68fb      	ldr	r3, [r7, #12]
 8015e5c:	685b      	ldr	r3, [r3, #4]
 8015e5e:	627b      	str	r3, [r7, #36]	; 0x24
 8015e60:	e068      	b.n	8015f34 <ip_reass_chain_frag_into_datagram_and_validate+0x180>
    iprh_tmp = (struct ip_reass_helper *)q->payload;
 8015e62:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015e64:	685b      	ldr	r3, [r3, #4]
 8015e66:	613b      	str	r3, [r7, #16]
    if (iprh->start < iprh_tmp->start) {
 8015e68:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e6a:	889b      	ldrh	r3, [r3, #4]
 8015e6c:	b29a      	uxth	r2, r3
 8015e6e:	693b      	ldr	r3, [r7, #16]
 8015e70:	889b      	ldrh	r3, [r3, #4]
 8015e72:	b29b      	uxth	r3, r3
 8015e74:	429a      	cmp	r2, r3
 8015e76:	d235      	bcs.n	8015ee4 <ip_reass_chain_frag_into_datagram_and_validate+0x130>
      /* the new pbuf should be inserted before this */
      iprh->next_pbuf = q;
 8015e78:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e7a:	6a7a      	ldr	r2, [r7, #36]	; 0x24
 8015e7c:	601a      	str	r2, [r3, #0]
      if (iprh_prev != NULL) {
 8015e7e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e80:	2b00      	cmp	r3, #0
 8015e82:	d020      	beq.n	8015ec6 <ip_reass_chain_frag_into_datagram_and_validate+0x112>
        /* not the fragment with the lowest offset */
#if IP_REASS_CHECK_OVERLAP
        if ((iprh->start < iprh_prev->end) || (iprh->end > iprh_tmp->start)) {
 8015e84:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e86:	889b      	ldrh	r3, [r3, #4]
 8015e88:	b29a      	uxth	r2, r3
 8015e8a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015e8c:	88db      	ldrh	r3, [r3, #6]
 8015e8e:	b29b      	uxth	r3, r3
 8015e90:	429a      	cmp	r2, r3
 8015e92:	d307      	bcc.n	8015ea4 <ip_reass_chain_frag_into_datagram_and_validate+0xf0>
 8015e94:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015e96:	88db      	ldrh	r3, [r3, #6]
 8015e98:	b29a      	uxth	r2, r3
 8015e9a:	693b      	ldr	r3, [r7, #16]
 8015e9c:	889b      	ldrh	r3, [r3, #4]
 8015e9e:	b29b      	uxth	r3, r3
 8015ea0:	429a      	cmp	r2, r3
 8015ea2:	d902      	bls.n	8015eaa <ip_reass_chain_frag_into_datagram_and_validate+0xf6>
          /* fragment overlaps with previous or following, throw away */
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ea4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ea8:	e0de      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        iprh_prev->next_pbuf = new_p;
 8015eaa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eac:	68ba      	ldr	r2, [r7, #8]
 8015eae:	601a      	str	r2, [r3, #0]
        if (iprh_prev->end != iprh->start) {
 8015eb0:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015eb2:	88db      	ldrh	r3, [r3, #6]
 8015eb4:	b29a      	uxth	r2, r3
 8015eb6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015eb8:	889b      	ldrh	r3, [r3, #4]
 8015eba:	b29b      	uxth	r3, r3
 8015ebc:	429a      	cmp	r2, r3
 8015ebe:	d03d      	beq.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015ec0:	2300      	movs	r3, #0
 8015ec2:	623b      	str	r3, [r7, #32]
        }
#endif /* IP_REASS_CHECK_OVERLAP */
        /* fragment with the lowest offset */
        ipr->p = new_p;
      }
      break;
 8015ec4:	e03a      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
        if (iprh->end > iprh_tmp->start) {
 8015ec6:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ec8:	88db      	ldrh	r3, [r3, #6]
 8015eca:	b29a      	uxth	r2, r3
 8015ecc:	693b      	ldr	r3, [r7, #16]
 8015ece:	889b      	ldrh	r3, [r3, #4]
 8015ed0:	b29b      	uxth	r3, r3
 8015ed2:	429a      	cmp	r2, r3
 8015ed4:	d902      	bls.n	8015edc <ip_reass_chain_frag_into_datagram_and_validate+0x128>
          return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ed6:	f04f 33ff 	mov.w	r3, #4294967295
 8015eda:	e0c5      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
        ipr->p = new_p;
 8015edc:	68fb      	ldr	r3, [r7, #12]
 8015ede:	68ba      	ldr	r2, [r7, #8]
 8015ee0:	605a      	str	r2, [r3, #4]
      break;
 8015ee2:	e02b      	b.n	8015f3c <ip_reass_chain_frag_into_datagram_and_validate+0x188>
    } else if (iprh->start == iprh_tmp->start) {
 8015ee4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ee6:	889b      	ldrh	r3, [r3, #4]
 8015ee8:	b29a      	uxth	r2, r3
 8015eea:	693b      	ldr	r3, [r7, #16]
 8015eec:	889b      	ldrh	r3, [r3, #4]
 8015eee:	b29b      	uxth	r3, r3
 8015ef0:	429a      	cmp	r2, r3
 8015ef2:	d102      	bne.n	8015efa <ip_reass_chain_frag_into_datagram_and_validate+0x146>
      /* received the same datagram twice: no need to keep the datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015ef4:	f04f 33ff 	mov.w	r3, #4294967295
 8015ef8:	e0b6      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#if IP_REASS_CHECK_OVERLAP
    } else if (iprh->start < iprh_tmp->end) {
 8015efa:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015efc:	889b      	ldrh	r3, [r3, #4]
 8015efe:	b29a      	uxth	r2, r3
 8015f00:	693b      	ldr	r3, [r7, #16]
 8015f02:	88db      	ldrh	r3, [r3, #6]
 8015f04:	b29b      	uxth	r3, r3
 8015f06:	429a      	cmp	r2, r3
 8015f08:	d202      	bcs.n	8015f10 <ip_reass_chain_frag_into_datagram_and_validate+0x15c>
      /* overlap: no need to keep the new datagram */
      return IP_REASS_VALIDATE_PBUF_DROPPED;
 8015f0a:	f04f 33ff 	mov.w	r3, #4294967295
 8015f0e:	e0ab      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
#endif /* IP_REASS_CHECK_OVERLAP */
    } else {
      /* Check if the fragments received so far have no holes. */
      if (iprh_prev != NULL) {
 8015f10:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f12:	2b00      	cmp	r3, #0
 8015f14:	d009      	beq.n	8015f2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
        if (iprh_prev->end != iprh_tmp->start) {
 8015f16:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f18:	88db      	ldrh	r3, [r3, #6]
 8015f1a:	b29a      	uxth	r2, r3
 8015f1c:	693b      	ldr	r3, [r7, #16]
 8015f1e:	889b      	ldrh	r3, [r3, #4]
 8015f20:	b29b      	uxth	r3, r3
 8015f22:	429a      	cmp	r2, r3
 8015f24:	d001      	beq.n	8015f2a <ip_reass_chain_frag_into_datagram_and_validate+0x176>
          /* There is a fragment missing between the current
           * and the previous fragment */
          valid = 0;
 8015f26:	2300      	movs	r3, #0
 8015f28:	623b      	str	r3, [r7, #32]
        }
      }
    }
    q = iprh_tmp->next_pbuf;
 8015f2a:	693b      	ldr	r3, [r7, #16]
 8015f2c:	681b      	ldr	r3, [r3, #0]
 8015f2e:	627b      	str	r3, [r7, #36]	; 0x24
    iprh_prev = iprh_tmp;
 8015f30:	693b      	ldr	r3, [r7, #16]
 8015f32:	62bb      	str	r3, [r7, #40]	; 0x28
  for (q = ipr->p; q != NULL;) {
 8015f34:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f36:	2b00      	cmp	r3, #0
 8015f38:	d193      	bne.n	8015e62 <ip_reass_chain_frag_into_datagram_and_validate+0xae>
 8015f3a:	e000      	b.n	8015f3e <ip_reass_chain_frag_into_datagram_and_validate+0x18a>
      break;
 8015f3c:	bf00      	nop
  }

  /* If q is NULL, then we made it to the end of the list. Determine what to do now */
  if (q == NULL) {
 8015f3e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015f40:	2b00      	cmp	r3, #0
 8015f42:	d12d      	bne.n	8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
    if (iprh_prev != NULL) {
 8015f44:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f46:	2b00      	cmp	r3, #0
 8015f48:	d01c      	beq.n	8015f84 <ip_reass_chain_frag_into_datagram_and_validate+0x1d0>
      /* this is (for now), the fragment with the highest offset:
       * chain it to the last fragment */
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("check fragments don't overlap", iprh_prev->end <= iprh->start);
 8015f4a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f4c:	88db      	ldrh	r3, [r3, #6]
 8015f4e:	b29a      	uxth	r2, r3
 8015f50:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f52:	889b      	ldrh	r3, [r3, #4]
 8015f54:	b29b      	uxth	r3, r3
 8015f56:	429a      	cmp	r2, r3
 8015f58:	d906      	bls.n	8015f68 <ip_reass_chain_frag_into_datagram_and_validate+0x1b4>
 8015f5a:	4b45      	ldr	r3, [pc, #276]	; (8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f5c:	f44f 72db 	mov.w	r2, #438	; 0x1b6
 8015f60:	4944      	ldr	r1, [pc, #272]	; (8016074 <ip_reass_chain_frag_into_datagram_and_validate+0x2c0>)
 8015f62:	4845      	ldr	r0, [pc, #276]	; (8016078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f64:	f000 ff44 	bl	8016df0 <iprintf>
#endif /* IP_REASS_CHECK_OVERLAP */
      iprh_prev->next_pbuf = new_p;
 8015f68:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f6a:	68ba      	ldr	r2, [r7, #8]
 8015f6c:	601a      	str	r2, [r3, #0]
      if (iprh_prev->end != iprh->start) {
 8015f6e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015f70:	88db      	ldrh	r3, [r3, #6]
 8015f72:	b29a      	uxth	r2, r3
 8015f74:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015f76:	889b      	ldrh	r3, [r3, #4]
 8015f78:	b29b      	uxth	r3, r3
 8015f7a:	429a      	cmp	r2, r3
 8015f7c:	d010      	beq.n	8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
        valid = 0;
 8015f7e:	2300      	movs	r3, #0
 8015f80:	623b      	str	r3, [r7, #32]
 8015f82:	e00d      	b.n	8015fa0 <ip_reass_chain_frag_into_datagram_and_validate+0x1ec>
      }
    } else {
#if IP_REASS_CHECK_OVERLAP
      LWIP_ASSERT("no previous fragment, this must be the first fragment!",
 8015f84:	68fb      	ldr	r3, [r7, #12]
 8015f86:	685b      	ldr	r3, [r3, #4]
 8015f88:	2b00      	cmp	r3, #0
 8015f8a:	d006      	beq.n	8015f9a <ip_reass_chain_frag_into_datagram_and_validate+0x1e6>
 8015f8c:	4b38      	ldr	r3, [pc, #224]	; (8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8015f8e:	f44f 72df 	mov.w	r2, #446	; 0x1be
 8015f92:	493a      	ldr	r1, [pc, #232]	; (801607c <ip_reass_chain_frag_into_datagram_and_validate+0x2c8>)
 8015f94:	4838      	ldr	r0, [pc, #224]	; (8016078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8015f96:	f000 ff2b 	bl	8016df0 <iprintf>
                  ipr->p == NULL);
#endif /* IP_REASS_CHECK_OVERLAP */
      /* this is the first fragment we ever received for this ip datagram */
      ipr->p = new_p;
 8015f9a:	68fb      	ldr	r3, [r7, #12]
 8015f9c:	68ba      	ldr	r2, [r7, #8]
 8015f9e:	605a      	str	r2, [r3, #4]
    }
  }

  /* At this point, the validation part begins: */
  /* If we already received the last fragment */
  if (is_last || ((ipr->flags & IP_REASS_FLAG_LASTFRAG) != 0)) {
 8015fa0:	687b      	ldr	r3, [r7, #4]
 8015fa2:	2b00      	cmp	r3, #0
 8015fa4:	d105      	bne.n	8015fb2 <ip_reass_chain_frag_into_datagram_and_validate+0x1fe>
 8015fa6:	68fb      	ldr	r3, [r7, #12]
 8015fa8:	7f9b      	ldrb	r3, [r3, #30]
 8015faa:	f003 0301 	and.w	r3, r3, #1
 8015fae:	2b00      	cmp	r3, #0
 8015fb0:	d059      	beq.n	8016066 <ip_reass_chain_frag_into_datagram_and_validate+0x2b2>
    /* and had no holes so far */
    if (valid) {
 8015fb2:	6a3b      	ldr	r3, [r7, #32]
 8015fb4:	2b00      	cmp	r3, #0
 8015fb6:	d04f      	beq.n	8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      /* then check if the rest of the fragments is here */
      /* Check if the queue starts with the first datagram */
      if ((ipr->p == NULL) || (((struct ip_reass_helper *)ipr->p->payload)->start != 0)) {
 8015fb8:	68fb      	ldr	r3, [r7, #12]
 8015fba:	685b      	ldr	r3, [r3, #4]
 8015fbc:	2b00      	cmp	r3, #0
 8015fbe:	d006      	beq.n	8015fce <ip_reass_chain_frag_into_datagram_and_validate+0x21a>
 8015fc0:	68fb      	ldr	r3, [r7, #12]
 8015fc2:	685b      	ldr	r3, [r3, #4]
 8015fc4:	685b      	ldr	r3, [r3, #4]
 8015fc6:	889b      	ldrh	r3, [r3, #4]
 8015fc8:	b29b      	uxth	r3, r3
 8015fca:	2b00      	cmp	r3, #0
 8015fcc:	d002      	beq.n	8015fd4 <ip_reass_chain_frag_into_datagram_and_validate+0x220>
        valid = 0;
 8015fce:	2300      	movs	r3, #0
 8015fd0:	623b      	str	r3, [r7, #32]
 8015fd2:	e041      	b.n	8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
      } else {
        /* and check that there are no holes after this datagram */
        iprh_prev = iprh;
 8015fd4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fd6:	62bb      	str	r3, [r7, #40]	; 0x28
        q = iprh->next_pbuf;
 8015fd8:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fda:	681b      	ldr	r3, [r3, #0]
 8015fdc:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8015fde:	e012      	b.n	8016006 <ip_reass_chain_frag_into_datagram_and_validate+0x252>
          iprh = (struct ip_reass_helper *)q->payload;
 8015fe0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8015fe2:	685b      	ldr	r3, [r3, #4]
 8015fe4:	62fb      	str	r3, [r7, #44]	; 0x2c
          if (iprh_prev->end != iprh->start) {
 8015fe6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8015fe8:	88db      	ldrh	r3, [r3, #6]
 8015fea:	b29a      	uxth	r2, r3
 8015fec:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015fee:	889b      	ldrh	r3, [r3, #4]
 8015ff0:	b29b      	uxth	r3, r3
 8015ff2:	429a      	cmp	r2, r3
 8015ff4:	d002      	beq.n	8015ffc <ip_reass_chain_frag_into_datagram_and_validate+0x248>
            valid = 0;
 8015ff6:	2300      	movs	r3, #0
 8015ff8:	623b      	str	r3, [r7, #32]
            break;
 8015ffa:	e007      	b.n	801600c <ip_reass_chain_frag_into_datagram_and_validate+0x258>
          }
          iprh_prev = iprh;
 8015ffc:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8015ffe:	62bb      	str	r3, [r7, #40]	; 0x28
          q = iprh->next_pbuf;
 8016000:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016002:	681b      	ldr	r3, [r3, #0]
 8016004:	627b      	str	r3, [r7, #36]	; 0x24
        while (q != NULL) {
 8016006:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016008:	2b00      	cmp	r3, #0
 801600a:	d1e9      	bne.n	8015fe0 <ip_reass_chain_frag_into_datagram_and_validate+0x22c>
        }
        /* if still valid, all fragments are received
         * (because to the MF==0 already arrived */
        if (valid) {
 801600c:	6a3b      	ldr	r3, [r7, #32]
 801600e:	2b00      	cmp	r3, #0
 8016010:	d022      	beq.n	8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
          LWIP_ASSERT("sanity check", ipr->p != NULL);
 8016012:	68fb      	ldr	r3, [r7, #12]
 8016014:	685b      	ldr	r3, [r3, #4]
 8016016:	2b00      	cmp	r3, #0
 8016018:	d106      	bne.n	8016028 <ip_reass_chain_frag_into_datagram_and_validate+0x274>
 801601a:	4b15      	ldr	r3, [pc, #84]	; (8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801601c:	f240 12df 	movw	r2, #479	; 0x1df
 8016020:	4917      	ldr	r1, [pc, #92]	; (8016080 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 8016022:	4815      	ldr	r0, [pc, #84]	; (8016078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016024:	f000 fee4 	bl	8016df0 <iprintf>
          LWIP_ASSERT("sanity check",
 8016028:	68fb      	ldr	r3, [r7, #12]
 801602a:	685b      	ldr	r3, [r3, #4]
 801602c:	685b      	ldr	r3, [r3, #4]
 801602e:	6afa      	ldr	r2, [r7, #44]	; 0x2c
 8016030:	429a      	cmp	r2, r3
 8016032:	d106      	bne.n	8016042 <ip_reass_chain_frag_into_datagram_and_validate+0x28e>
 8016034:	4b0e      	ldr	r3, [pc, #56]	; (8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 8016036:	f44f 72f0 	mov.w	r2, #480	; 0x1e0
 801603a:	4911      	ldr	r1, [pc, #68]	; (8016080 <ip_reass_chain_frag_into_datagram_and_validate+0x2cc>)
 801603c:	480e      	ldr	r0, [pc, #56]	; (8016078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 801603e:	f000 fed7 	bl	8016df0 <iprintf>
                      ((struct ip_reass_helper *)ipr->p->payload) != iprh);
          LWIP_ASSERT("validate_datagram:next_pbuf!=NULL",
 8016042:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016044:	681b      	ldr	r3, [r3, #0]
 8016046:	2b00      	cmp	r3, #0
 8016048:	d006      	beq.n	8016058 <ip_reass_chain_frag_into_datagram_and_validate+0x2a4>
 801604a:	4b09      	ldr	r3, [pc, #36]	; (8016070 <ip_reass_chain_frag_into_datagram_and_validate+0x2bc>)
 801604c:	f44f 72f1 	mov.w	r2, #482	; 0x1e2
 8016050:	490c      	ldr	r1, [pc, #48]	; (8016084 <ip_reass_chain_frag_into_datagram_and_validate+0x2d0>)
 8016052:	4809      	ldr	r0, [pc, #36]	; (8016078 <ip_reass_chain_frag_into_datagram_and_validate+0x2c4>)
 8016054:	f000 fecc 	bl	8016df0 <iprintf>
      }
    }
    /* If valid is 0 here, there are some fragments missing in the middle
     * (since MF == 0 has already arrived). Such datagrams simply time out if
     * no more fragments are received... */
    return valid ? IP_REASS_VALIDATE_TELEGRAM_FINISHED : IP_REASS_VALIDATE_PBUF_QUEUED;
 8016058:	6a3b      	ldr	r3, [r7, #32]
 801605a:	2b00      	cmp	r3, #0
 801605c:	bf14      	ite	ne
 801605e:	2301      	movne	r3, #1
 8016060:	2300      	moveq	r3, #0
 8016062:	b2db      	uxtb	r3, r3
 8016064:	e000      	b.n	8016068 <ip_reass_chain_frag_into_datagram_and_validate+0x2b4>
  }
  /* If we come here, not all fragments were received, yet! */
  return IP_REASS_VALIDATE_PBUF_QUEUED; /* not yet valid! */
 8016066:	2300      	movs	r3, #0
}
 8016068:	4618      	mov	r0, r3
 801606a:	3730      	adds	r7, #48	; 0x30
 801606c:	46bd      	mov	sp, r7
 801606e:	bd80      	pop	{r7, pc}
 8016070:	0801b3a4 	.word	0x0801b3a4
 8016074:	0801b488 	.word	0x0801b488
 8016078:	0801b3ec 	.word	0x0801b3ec
 801607c:	0801b4a8 	.word	0x0801b4a8
 8016080:	0801b4e0 	.word	0x0801b4e0
 8016084:	0801b4f0 	.word	0x0801b4f0

08016088 <ip4_reass>:
 * @param p points to a pbuf chain of the fragment
 * @return NULL if reassembly is incomplete, ? otherwise
 */
struct pbuf *
ip4_reass(struct pbuf *p)
{
 8016088:	b580      	push	{r7, lr}
 801608a:	b08e      	sub	sp, #56	; 0x38
 801608c:	af00      	add	r7, sp, #0
 801608e:	6078      	str	r0, [r7, #4]
  int is_last;

  IPFRAG_STATS_INC(ip_frag.recv);
  MIB2_STATS_INC(mib2.ipreasmreqds);

  fraghdr = (struct ip_hdr *)p->payload;
 8016090:	687b      	ldr	r3, [r7, #4]
 8016092:	685b      	ldr	r3, [r3, #4]
 8016094:	62bb      	str	r3, [r7, #40]	; 0x28

  if (IPH_HL_BYTES(fraghdr) != IP_HLEN) {
 8016096:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016098:	781b      	ldrb	r3, [r3, #0]
 801609a:	f003 030f 	and.w	r3, r3, #15
 801609e:	b2db      	uxtb	r3, r3
 80160a0:	009b      	lsls	r3, r3, #2
 80160a2:	b2db      	uxtb	r3, r3
 80160a4:	2b14      	cmp	r3, #20
 80160a6:	f040 8171 	bne.w	801638c <ip4_reass+0x304>
    LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: IP options currently not supported!\n"));
    IPFRAG_STATS_INC(ip_frag.err);
    goto nullreturn;
  }

  offset = IPH_OFFSET_BYTES(fraghdr);
 80160aa:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160ac:	88db      	ldrh	r3, [r3, #6]
 80160ae:	b29b      	uxth	r3, r3
 80160b0:	4618      	mov	r0, r3
 80160b2:	f7f5 fceb 	bl	800ba8c <lwip_htons>
 80160b6:	4603      	mov	r3, r0
 80160b8:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80160bc:	b29b      	uxth	r3, r3
 80160be:	00db      	lsls	r3, r3, #3
 80160c0:	84fb      	strh	r3, [r7, #38]	; 0x26
  len = lwip_ntohs(IPH_LEN(fraghdr));
 80160c2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160c4:	885b      	ldrh	r3, [r3, #2]
 80160c6:	b29b      	uxth	r3, r3
 80160c8:	4618      	mov	r0, r3
 80160ca:	f7f5 fcdf 	bl	800ba8c <lwip_htons>
 80160ce:	4603      	mov	r3, r0
 80160d0:	84bb      	strh	r3, [r7, #36]	; 0x24
  hlen = IPH_HL_BYTES(fraghdr);
 80160d2:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80160d4:	781b      	ldrb	r3, [r3, #0]
 80160d6:	f003 030f 	and.w	r3, r3, #15
 80160da:	b2db      	uxtb	r3, r3
 80160dc:	009b      	lsls	r3, r3, #2
 80160de:	f887 3023 	strb.w	r3, [r7, #35]	; 0x23
  if (hlen > len) {
 80160e2:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160e6:	b29b      	uxth	r3, r3
 80160e8:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160ea:	429a      	cmp	r2, r3
 80160ec:	f0c0 8150 	bcc.w	8016390 <ip4_reass+0x308>
    /* invalid datagram */
    goto nullreturn;
  }
  len = (u16_t)(len - hlen);
 80160f0:	f897 3023 	ldrb.w	r3, [r7, #35]	; 0x23
 80160f4:	b29b      	uxth	r3, r3
 80160f6:	8cba      	ldrh	r2, [r7, #36]	; 0x24
 80160f8:	1ad3      	subs	r3, r2, r3
 80160fa:	84bb      	strh	r3, [r7, #36]	; 0x24

  /* Check if we are allowed to enqueue more datagrams. */
  clen = pbuf_clen(p);
 80160fc:	6878      	ldr	r0, [r7, #4]
 80160fe:	f7f7 f945 	bl	800d38c <pbuf_clen>
 8016102:	4603      	mov	r3, r0
 8016104:	843b      	strh	r3, [r7, #32]
  if ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS) {
 8016106:	4b8c      	ldr	r3, [pc, #560]	; (8016338 <ip4_reass+0x2b0>)
 8016108:	881b      	ldrh	r3, [r3, #0]
 801610a:	461a      	mov	r2, r3
 801610c:	8c3b      	ldrh	r3, [r7, #32]
 801610e:	4413      	add	r3, r2
 8016110:	2b0a      	cmp	r3, #10
 8016112:	dd10      	ble.n	8016136 <ip4_reass+0xae>
#if IP_REASS_FREE_OLDEST
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016114:	8c3b      	ldrh	r3, [r7, #32]
 8016116:	4619      	mov	r1, r3
 8016118:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 801611a:	f7ff fd81 	bl	8015c20 <ip_reass_remove_oldest_datagram>
 801611e:	4603      	mov	r3, r0
 8016120:	2b00      	cmp	r3, #0
 8016122:	f000 8137 	beq.w	8016394 <ip4_reass+0x30c>
        ((ip_reass_pbufcount + clen) > IP_REASS_MAX_PBUFS))
 8016126:	4b84      	ldr	r3, [pc, #528]	; (8016338 <ip4_reass+0x2b0>)
 8016128:	881b      	ldrh	r3, [r3, #0]
 801612a:	461a      	mov	r2, r3
 801612c:	8c3b      	ldrh	r3, [r7, #32]
 801612e:	4413      	add	r3, r2
    if (!ip_reass_remove_oldest_datagram(fraghdr, clen) ||
 8016130:	2b0a      	cmp	r3, #10
 8016132:	f300 812f 	bgt.w	8016394 <ip4_reass+0x30c>
    }
  }

  /* Look for the datagram the fragment belongs to in the current datagram queue,
   * remembering the previous in the queue for later dequeueing. */
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016136:	4b81      	ldr	r3, [pc, #516]	; (801633c <ip4_reass+0x2b4>)
 8016138:	681b      	ldr	r3, [r3, #0]
 801613a:	633b      	str	r3, [r7, #48]	; 0x30
 801613c:	e015      	b.n	801616a <ip4_reass+0xe2>
    /* Check if the incoming fragment matches the one currently present
       in the reassembly buffer. If so, we proceed with copying the
       fragment into the buffer. */
    if (IP_ADDRESSES_AND_ID_MATCH(&ipr->iphdr, fraghdr)) {
 801613e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016140:	695a      	ldr	r2, [r3, #20]
 8016142:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016144:	68db      	ldr	r3, [r3, #12]
 8016146:	429a      	cmp	r2, r3
 8016148:	d10c      	bne.n	8016164 <ip4_reass+0xdc>
 801614a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801614c:	699a      	ldr	r2, [r3, #24]
 801614e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016150:	691b      	ldr	r3, [r3, #16]
 8016152:	429a      	cmp	r2, r3
 8016154:	d106      	bne.n	8016164 <ip4_reass+0xdc>
 8016156:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016158:	899a      	ldrh	r2, [r3, #12]
 801615a:	6abb      	ldr	r3, [r7, #40]	; 0x28
 801615c:	889b      	ldrh	r3, [r3, #4]
 801615e:	b29b      	uxth	r3, r3
 8016160:	429a      	cmp	r2, r3
 8016162:	d006      	beq.n	8016172 <ip4_reass+0xea>
  for (ipr = reassdatagrams; ipr != NULL; ipr = ipr->next) {
 8016164:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016166:	681b      	ldr	r3, [r3, #0]
 8016168:	633b      	str	r3, [r7, #48]	; 0x30
 801616a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801616c:	2b00      	cmp	r3, #0
 801616e:	d1e6      	bne.n	801613e <ip4_reass+0xb6>
 8016170:	e000      	b.n	8016174 <ip4_reass+0xec>
      LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: matching previous fragment ID=%"X16_F"\n",
                                   lwip_ntohs(IPH_ID(fraghdr))));
      IPFRAG_STATS_INC(ip_frag.cachehit);
      break;
 8016172:	bf00      	nop
    }
  }

  if (ipr == NULL) {
 8016174:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016176:	2b00      	cmp	r3, #0
 8016178:	d109      	bne.n	801618e <ip4_reass+0x106>
    /* Enqueue a new datagram into the datagram queue */
    ipr = ip_reass_enqueue_new_datagram(fraghdr, clen);
 801617a:	8c3b      	ldrh	r3, [r7, #32]
 801617c:	4619      	mov	r1, r3
 801617e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016180:	f7ff fdb0 	bl	8015ce4 <ip_reass_enqueue_new_datagram>
 8016184:	6338      	str	r0, [r7, #48]	; 0x30
    /* Bail if unable to enqueue */
    if (ipr == NULL) {
 8016186:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016188:	2b00      	cmp	r3, #0
 801618a:	d11c      	bne.n	80161c6 <ip4_reass+0x13e>
      goto nullreturn;
 801618c:	e105      	b.n	801639a <ip4_reass+0x312>
    }
  } else {
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 801618e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016190:	88db      	ldrh	r3, [r3, #6]
 8016192:	b29b      	uxth	r3, r3
 8016194:	4618      	mov	r0, r3
 8016196:	f7f5 fc79 	bl	800ba8c <lwip_htons>
 801619a:	4603      	mov	r3, r0
 801619c:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80161a0:	2b00      	cmp	r3, #0
 80161a2:	d110      	bne.n	80161c6 <ip4_reass+0x13e>
        ((lwip_ntohs(IPH_OFFSET(&ipr->iphdr)) & IP_OFFMASK) != 0)) {
 80161a4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161a6:	89db      	ldrh	r3, [r3, #14]
 80161a8:	4618      	mov	r0, r3
 80161aa:	f7f5 fc6f 	bl	800ba8c <lwip_htons>
 80161ae:	4603      	mov	r3, r0
 80161b0:	f3c3 030c 	ubfx	r3, r3, #0, #13
    if (((lwip_ntohs(IPH_OFFSET(fraghdr)) & IP_OFFMASK) == 0) &&
 80161b4:	2b00      	cmp	r3, #0
 80161b6:	d006      	beq.n	80161c6 <ip4_reass+0x13e>
      /* ipr->iphdr is not the header from the first fragment, but fraghdr is
       * -> copy fraghdr into ipr->iphdr since we want to have the header
       * of the first fragment (for ICMP time exceeded and later, for copying
       * all options, if supported)*/
      SMEMCPY(&ipr->iphdr, fraghdr, IP_HLEN);
 80161b8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80161ba:	3308      	adds	r3, #8
 80161bc:	2214      	movs	r2, #20
 80161be:	6ab9      	ldr	r1, [r7, #40]	; 0x28
 80161c0:	4618      	mov	r0, r3
 80161c2:	f000 ff91 	bl	80170e8 <memcpy>

  /* At this point, we have either created a new entry or pointing
   * to an existing one */

  /* check for 'no more fragments', and update queue entry*/
  is_last = (IPH_OFFSET(fraghdr) & PP_NTOHS(IP_MF)) == 0;
 80161c6:	6abb      	ldr	r3, [r7, #40]	; 0x28
 80161c8:	88db      	ldrh	r3, [r3, #6]
 80161ca:	b29b      	uxth	r3, r3
 80161cc:	f003 0320 	and.w	r3, r3, #32
 80161d0:	2b00      	cmp	r3, #0
 80161d2:	bf0c      	ite	eq
 80161d4:	2301      	moveq	r3, #1
 80161d6:	2300      	movne	r3, #0
 80161d8:	b2db      	uxtb	r3, r3
 80161da:	61fb      	str	r3, [r7, #28]
  if (is_last) {
 80161dc:	69fb      	ldr	r3, [r7, #28]
 80161de:	2b00      	cmp	r3, #0
 80161e0:	d00e      	beq.n	8016200 <ip4_reass+0x178>
    u16_t datagram_len = (u16_t)(offset + len);
 80161e2:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 80161e4:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 80161e6:	4413      	add	r3, r2
 80161e8:	837b      	strh	r3, [r7, #26]
    if ((datagram_len < offset) || (datagram_len > (0xFFFF - IP_HLEN))) {
 80161ea:	8b7a      	ldrh	r2, [r7, #26]
 80161ec:	8cfb      	ldrh	r3, [r7, #38]	; 0x26
 80161ee:	429a      	cmp	r2, r3
 80161f0:	f0c0 80a0 	bcc.w	8016334 <ip4_reass+0x2ac>
 80161f4:	8b7b      	ldrh	r3, [r7, #26]
 80161f6:	f64f 72eb 	movw	r2, #65515	; 0xffeb
 80161fa:	4293      	cmp	r3, r2
 80161fc:	f200 809a 	bhi.w	8016334 <ip4_reass+0x2ac>
      goto nullreturn_ipr;
    }
  }
  /* find the right place to insert this pbuf */
  /* @todo: trim pbufs if fragments are overlapping */
  valid = ip_reass_chain_frag_into_datagram_and_validate(ipr, p, is_last);
 8016200:	69fa      	ldr	r2, [r7, #28]
 8016202:	6879      	ldr	r1, [r7, #4]
 8016204:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016206:	f7ff fdd5 	bl	8015db4 <ip_reass_chain_frag_into_datagram_and_validate>
 801620a:	6178      	str	r0, [r7, #20]
  if (valid == IP_REASS_VALIDATE_PBUF_DROPPED) {
 801620c:	697b      	ldr	r3, [r7, #20]
 801620e:	f1b3 3fff 	cmp.w	r3, #4294967295
 8016212:	f000 809b 	beq.w	801634c <ip4_reass+0x2c4>
  /* if we come here, the pbuf has been enqueued */

  /* Track the current number of pbufs current 'in-flight', in order to limit
     the number of fragments that may be enqueued at any one time
     (overflow checked by testing against IP_REASS_MAX_PBUFS) */
  ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount + clen);
 8016216:	4b48      	ldr	r3, [pc, #288]	; (8016338 <ip4_reass+0x2b0>)
 8016218:	881a      	ldrh	r2, [r3, #0]
 801621a:	8c3b      	ldrh	r3, [r7, #32]
 801621c:	4413      	add	r3, r2
 801621e:	b29a      	uxth	r2, r3
 8016220:	4b45      	ldr	r3, [pc, #276]	; (8016338 <ip4_reass+0x2b0>)
 8016222:	801a      	strh	r2, [r3, #0]
  if (is_last) {
 8016224:	69fb      	ldr	r3, [r7, #28]
 8016226:	2b00      	cmp	r3, #0
 8016228:	d00d      	beq.n	8016246 <ip4_reass+0x1be>
    u16_t datagram_len = (u16_t)(offset + len);
 801622a:	8cfa      	ldrh	r2, [r7, #38]	; 0x26
 801622c:	8cbb      	ldrh	r3, [r7, #36]	; 0x24
 801622e:	4413      	add	r3, r2
 8016230:	827b      	strh	r3, [r7, #18]
    ipr->datagram_len = datagram_len;
 8016232:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016234:	8a7a      	ldrh	r2, [r7, #18]
 8016236:	839a      	strh	r2, [r3, #28]
    ipr->flags |= IP_REASS_FLAG_LASTFRAG;
 8016238:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801623a:	7f9b      	ldrb	r3, [r3, #30]
 801623c:	f043 0301 	orr.w	r3, r3, #1
 8016240:	b2da      	uxtb	r2, r3
 8016242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016244:	779a      	strb	r2, [r3, #30]
    LWIP_DEBUGF(IP_REASS_DEBUG,
                ("ip4_reass: last fragment seen, total len %"S16_F"\n",
                 ipr->datagram_len));
  }

  if (valid == IP_REASS_VALIDATE_TELEGRAM_FINISHED) {
 8016246:	697b      	ldr	r3, [r7, #20]
 8016248:	2b01      	cmp	r3, #1
 801624a:	d171      	bne.n	8016330 <ip4_reass+0x2a8>
    struct ip_reassdata *ipr_prev;
    /* the totally last fragment (flag more fragments = 0) was received at least
     * once AND all fragments are received */
    u16_t datagram_len = (u16_t)(ipr->datagram_len + IP_HLEN);
 801624c:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801624e:	8b9b      	ldrh	r3, [r3, #28]
 8016250:	3314      	adds	r3, #20
 8016252:	823b      	strh	r3, [r7, #16]

    /* save the second pbuf before copying the header over the pointer */
    r = ((struct ip_reass_helper *)ipr->p->payload)->next_pbuf;
 8016254:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016256:	685b      	ldr	r3, [r3, #4]
 8016258:	685b      	ldr	r3, [r3, #4]
 801625a:	681b      	ldr	r3, [r3, #0]
 801625c:	637b      	str	r3, [r7, #52]	; 0x34

    /* copy the original ip header back to the first pbuf */
    fraghdr = (struct ip_hdr *)(ipr->p->payload);
 801625e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016260:	685b      	ldr	r3, [r3, #4]
 8016262:	685b      	ldr	r3, [r3, #4]
 8016264:	62bb      	str	r3, [r7, #40]	; 0x28
    SMEMCPY(fraghdr, &ipr->iphdr, IP_HLEN);
 8016266:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016268:	3308      	adds	r3, #8
 801626a:	2214      	movs	r2, #20
 801626c:	4619      	mov	r1, r3
 801626e:	6ab8      	ldr	r0, [r7, #40]	; 0x28
 8016270:	f000 ff3a 	bl	80170e8 <memcpy>
    IPH_LEN_SET(fraghdr, lwip_htons(datagram_len));
 8016274:	8a3b      	ldrh	r3, [r7, #16]
 8016276:	4618      	mov	r0, r3
 8016278:	f7f5 fc08 	bl	800ba8c <lwip_htons>
 801627c:	4603      	mov	r3, r0
 801627e:	461a      	mov	r2, r3
 8016280:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016282:	805a      	strh	r2, [r3, #2]
    IPH_OFFSET_SET(fraghdr, 0);
 8016284:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016286:	2200      	movs	r2, #0
 8016288:	719a      	strb	r2, [r3, #6]
 801628a:	2200      	movs	r2, #0
 801628c:	71da      	strb	r2, [r3, #7]
    IPH_CHKSUM_SET(fraghdr, 0);
 801628e:	6abb      	ldr	r3, [r7, #40]	; 0x28
 8016290:	2200      	movs	r2, #0
 8016292:	729a      	strb	r2, [r3, #10]
 8016294:	2200      	movs	r2, #0
 8016296:	72da      	strb	r2, [r3, #11]
    IF__NETIF_CHECKSUM_ENABLED(ip_current_input_netif(), NETIF_CHECKSUM_GEN_IP) {
      IPH_CHKSUM_SET(fraghdr, inet_chksum(fraghdr, IP_HLEN));
    }
#endif /* CHECKSUM_GEN_IP */

    p = ipr->p;
 8016298:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801629a:	685b      	ldr	r3, [r3, #4]
 801629c:	607b      	str	r3, [r7, #4]

    /* chain together the pbufs contained within the reass_data list. */
    while (r != NULL) {
 801629e:	e00d      	b.n	80162bc <ip4_reass+0x234>
      iprh = (struct ip_reass_helper *)r->payload;
 80162a0:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162a2:	685b      	ldr	r3, [r3, #4]
 80162a4:	60fb      	str	r3, [r7, #12]

      /* hide the ip header for every succeeding fragment */
      pbuf_remove_header(r, IP_HLEN);
 80162a6:	2114      	movs	r1, #20
 80162a8:	6b78      	ldr	r0, [r7, #52]	; 0x34
 80162aa:	f7f6 ff5b 	bl	800d164 <pbuf_remove_header>
      pbuf_cat(p, r);
 80162ae:	6b79      	ldr	r1, [r7, #52]	; 0x34
 80162b0:	6878      	ldr	r0, [r7, #4]
 80162b2:	f7f7 f8ab 	bl	800d40c <pbuf_cat>
      r = iprh->next_pbuf;
 80162b6:	68fb      	ldr	r3, [r7, #12]
 80162b8:	681b      	ldr	r3, [r3, #0]
 80162ba:	637b      	str	r3, [r7, #52]	; 0x34
    while (r != NULL) {
 80162bc:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80162be:	2b00      	cmp	r3, #0
 80162c0:	d1ee      	bne.n	80162a0 <ip4_reass+0x218>
    }

    /* find the previous entry in the linked list */
    if (ipr == reassdatagrams) {
 80162c2:	4b1e      	ldr	r3, [pc, #120]	; (801633c <ip4_reass+0x2b4>)
 80162c4:	681b      	ldr	r3, [r3, #0]
 80162c6:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162c8:	429a      	cmp	r2, r3
 80162ca:	d102      	bne.n	80162d2 <ip4_reass+0x24a>
      ipr_prev = NULL;
 80162cc:	2300      	movs	r3, #0
 80162ce:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162d0:	e010      	b.n	80162f4 <ip4_reass+0x26c>
    } else {
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162d2:	4b1a      	ldr	r3, [pc, #104]	; (801633c <ip4_reass+0x2b4>)
 80162d4:	681b      	ldr	r3, [r3, #0]
 80162d6:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162d8:	e007      	b.n	80162ea <ip4_reass+0x262>
        if (ipr_prev->next == ipr) {
 80162da:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162dc:	681b      	ldr	r3, [r3, #0]
 80162de:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 80162e0:	429a      	cmp	r2, r3
 80162e2:	d006      	beq.n	80162f2 <ip4_reass+0x26a>
      for (ipr_prev = reassdatagrams; ipr_prev != NULL; ipr_prev = ipr_prev->next) {
 80162e4:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162e6:	681b      	ldr	r3, [r3, #0]
 80162e8:	62fb      	str	r3, [r7, #44]	; 0x2c
 80162ea:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 80162ec:	2b00      	cmp	r3, #0
 80162ee:	d1f4      	bne.n	80162da <ip4_reass+0x252>
 80162f0:	e000      	b.n	80162f4 <ip4_reass+0x26c>
          break;
 80162f2:	bf00      	nop
        }
      }
    }

    /* release the sources allocate for the fragment queue entry */
    ip_reass_dequeue_datagram(ipr, ipr_prev);
 80162f4:	6af9      	ldr	r1, [r7, #44]	; 0x2c
 80162f6:	6b38      	ldr	r0, [r7, #48]	; 0x30
 80162f8:	f7ff fd2e 	bl	8015d58 <ip_reass_dequeue_datagram>

    /* and adjust the number of pbufs currently queued for reassembly. */
    clen = pbuf_clen(p);
 80162fc:	6878      	ldr	r0, [r7, #4]
 80162fe:	f7f7 f845 	bl	800d38c <pbuf_clen>
 8016302:	4603      	mov	r3, r0
 8016304:	843b      	strh	r3, [r7, #32]
    LWIP_ASSERT("ip_reass_pbufcount >= clen", ip_reass_pbufcount >= clen);
 8016306:	4b0c      	ldr	r3, [pc, #48]	; (8016338 <ip4_reass+0x2b0>)
 8016308:	881b      	ldrh	r3, [r3, #0]
 801630a:	8c3a      	ldrh	r2, [r7, #32]
 801630c:	429a      	cmp	r2, r3
 801630e:	d906      	bls.n	801631e <ip4_reass+0x296>
 8016310:	4b0b      	ldr	r3, [pc, #44]	; (8016340 <ip4_reass+0x2b8>)
 8016312:	f240 229b 	movw	r2, #667	; 0x29b
 8016316:	490b      	ldr	r1, [pc, #44]	; (8016344 <ip4_reass+0x2bc>)
 8016318:	480b      	ldr	r0, [pc, #44]	; (8016348 <ip4_reass+0x2c0>)
 801631a:	f000 fd69 	bl	8016df0 <iprintf>
    ip_reass_pbufcount = (u16_t)(ip_reass_pbufcount - clen);
 801631e:	4b06      	ldr	r3, [pc, #24]	; (8016338 <ip4_reass+0x2b0>)
 8016320:	881a      	ldrh	r2, [r3, #0]
 8016322:	8c3b      	ldrh	r3, [r7, #32]
 8016324:	1ad3      	subs	r3, r2, r3
 8016326:	b29a      	uxth	r2, r3
 8016328:	4b03      	ldr	r3, [pc, #12]	; (8016338 <ip4_reass+0x2b0>)
 801632a:	801a      	strh	r2, [r3, #0]

    MIB2_STATS_INC(mib2.ipreasmoks);

    /* Return the pbuf chain */
    return p;
 801632c:	687b      	ldr	r3, [r7, #4]
 801632e:	e038      	b.n	80163a2 <ip4_reass+0x31a>
  }
  /* the datagram is not (yet?) reassembled completely */
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip_reass_pbufcount: %d out\n", ip_reass_pbufcount));
  return NULL;
 8016330:	2300      	movs	r3, #0
 8016332:	e036      	b.n	80163a2 <ip4_reass+0x31a>
      goto nullreturn_ipr;
 8016334:	bf00      	nop
 8016336:	e00a      	b.n	801634e <ip4_reass+0x2c6>
 8016338:	2000f94c 	.word	0x2000f94c
 801633c:	2000f948 	.word	0x2000f948
 8016340:	0801b3a4 	.word	0x0801b3a4
 8016344:	0801b514 	.word	0x0801b514
 8016348:	0801b3ec 	.word	0x0801b3ec
    goto nullreturn_ipr;
 801634c:	bf00      	nop

nullreturn_ipr:
  LWIP_ASSERT("ipr != NULL", ipr != NULL);
 801634e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016350:	2b00      	cmp	r3, #0
 8016352:	d106      	bne.n	8016362 <ip4_reass+0x2da>
 8016354:	4b15      	ldr	r3, [pc, #84]	; (80163ac <ip4_reass+0x324>)
 8016356:	f44f 722a 	mov.w	r2, #680	; 0x2a8
 801635a:	4915      	ldr	r1, [pc, #84]	; (80163b0 <ip4_reass+0x328>)
 801635c:	4815      	ldr	r0, [pc, #84]	; (80163b4 <ip4_reass+0x32c>)
 801635e:	f000 fd47 	bl	8016df0 <iprintf>
  if (ipr->p == NULL) {
 8016362:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016364:	685b      	ldr	r3, [r3, #4]
 8016366:	2b00      	cmp	r3, #0
 8016368:	d116      	bne.n	8016398 <ip4_reass+0x310>
    /* dropped pbuf after creating a new datagram entry: remove the entry, too */
    LWIP_ASSERT("not firstalthough just enqueued", ipr == reassdatagrams);
 801636a:	4b13      	ldr	r3, [pc, #76]	; (80163b8 <ip4_reass+0x330>)
 801636c:	681b      	ldr	r3, [r3, #0]
 801636e:	6b3a      	ldr	r2, [r7, #48]	; 0x30
 8016370:	429a      	cmp	r2, r3
 8016372:	d006      	beq.n	8016382 <ip4_reass+0x2fa>
 8016374:	4b0d      	ldr	r3, [pc, #52]	; (80163ac <ip4_reass+0x324>)
 8016376:	f240 22ab 	movw	r2, #683	; 0x2ab
 801637a:	4910      	ldr	r1, [pc, #64]	; (80163bc <ip4_reass+0x334>)
 801637c:	480d      	ldr	r0, [pc, #52]	; (80163b4 <ip4_reass+0x32c>)
 801637e:	f000 fd37 	bl	8016df0 <iprintf>
    ip_reass_dequeue_datagram(ipr, NULL);
 8016382:	2100      	movs	r1, #0
 8016384:	6b38      	ldr	r0, [r7, #48]	; 0x30
 8016386:	f7ff fce7 	bl	8015d58 <ip_reass_dequeue_datagram>
 801638a:	e006      	b.n	801639a <ip4_reass+0x312>
    goto nullreturn;
 801638c:	bf00      	nop
 801638e:	e004      	b.n	801639a <ip4_reass+0x312>
    goto nullreturn;
 8016390:	bf00      	nop
 8016392:	e002      	b.n	801639a <ip4_reass+0x312>
      goto nullreturn;
 8016394:	bf00      	nop
 8016396:	e000      	b.n	801639a <ip4_reass+0x312>
  }

nullreturn:
 8016398:	bf00      	nop
  LWIP_DEBUGF(IP_REASS_DEBUG, ("ip4_reass: nullreturn\n"));
  IPFRAG_STATS_INC(ip_frag.drop);
  pbuf_free(p);
 801639a:	6878      	ldr	r0, [r7, #4]
 801639c:	f7f6 ff68 	bl	800d270 <pbuf_free>
  return NULL;
 80163a0:	2300      	movs	r3, #0
}
 80163a2:	4618      	mov	r0, r3
 80163a4:	3738      	adds	r7, #56	; 0x38
 80163a6:	46bd      	mov	sp, r7
 80163a8:	bd80      	pop	{r7, pc}
 80163aa:	bf00      	nop
 80163ac:	0801b3a4 	.word	0x0801b3a4
 80163b0:	0801b530 	.word	0x0801b530
 80163b4:	0801b3ec 	.word	0x0801b3ec
 80163b8:	2000f948 	.word	0x2000f948
 80163bc:	0801b53c 	.word	0x0801b53c

080163c0 <ip_frag_alloc_pbuf_custom_ref>:
#if IP_FRAG
#if !LWIP_NETIF_TX_SINGLE_PBUF
/** Allocate a new struct pbuf_custom_ref */
static struct pbuf_custom_ref *
ip_frag_alloc_pbuf_custom_ref(void)
{
 80163c0:	b580      	push	{r7, lr}
 80163c2:	af00      	add	r7, sp, #0
  return (struct pbuf_custom_ref *)memp_malloc(MEMP_FRAG_PBUF);
 80163c4:	2005      	movs	r0, #5
 80163c6:	f7f6 f839 	bl	800c43c <memp_malloc>
 80163ca:	4603      	mov	r3, r0
}
 80163cc:	4618      	mov	r0, r3
 80163ce:	bd80      	pop	{r7, pc}

080163d0 <ip_frag_free_pbuf_custom_ref>:

/** Free a struct pbuf_custom_ref */
static void
ip_frag_free_pbuf_custom_ref(struct pbuf_custom_ref *p)
{
 80163d0:	b580      	push	{r7, lr}
 80163d2:	b082      	sub	sp, #8
 80163d4:	af00      	add	r7, sp, #0
 80163d6:	6078      	str	r0, [r7, #4]
  LWIP_ASSERT("p != NULL", p != NULL);
 80163d8:	687b      	ldr	r3, [r7, #4]
 80163da:	2b00      	cmp	r3, #0
 80163dc:	d106      	bne.n	80163ec <ip_frag_free_pbuf_custom_ref+0x1c>
 80163de:	4b07      	ldr	r3, [pc, #28]	; (80163fc <ip_frag_free_pbuf_custom_ref+0x2c>)
 80163e0:	f44f 7231 	mov.w	r2, #708	; 0x2c4
 80163e4:	4906      	ldr	r1, [pc, #24]	; (8016400 <ip_frag_free_pbuf_custom_ref+0x30>)
 80163e6:	4807      	ldr	r0, [pc, #28]	; (8016404 <ip_frag_free_pbuf_custom_ref+0x34>)
 80163e8:	f000 fd02 	bl	8016df0 <iprintf>
  memp_free(MEMP_FRAG_PBUF, p);
 80163ec:	6879      	ldr	r1, [r7, #4]
 80163ee:	2005      	movs	r0, #5
 80163f0:	f7f6 f89a 	bl	800c528 <memp_free>
}
 80163f4:	bf00      	nop
 80163f6:	3708      	adds	r7, #8
 80163f8:	46bd      	mov	sp, r7
 80163fa:	bd80      	pop	{r7, pc}
 80163fc:	0801b3a4 	.word	0x0801b3a4
 8016400:	0801b55c 	.word	0x0801b55c
 8016404:	0801b3ec 	.word	0x0801b3ec

08016408 <ipfrag_free_pbuf_custom>:

/** Free-callback function to free a 'struct pbuf_custom_ref', called by
 * pbuf_free. */
static void
ipfrag_free_pbuf_custom(struct pbuf *p)
{
 8016408:	b580      	push	{r7, lr}
 801640a:	b084      	sub	sp, #16
 801640c:	af00      	add	r7, sp, #0
 801640e:	6078      	str	r0, [r7, #4]
  struct pbuf_custom_ref *pcr = (struct pbuf_custom_ref *)p;
 8016410:	687b      	ldr	r3, [r7, #4]
 8016412:	60fb      	str	r3, [r7, #12]
  LWIP_ASSERT("pcr != NULL", pcr != NULL);
 8016414:	68fb      	ldr	r3, [r7, #12]
 8016416:	2b00      	cmp	r3, #0
 8016418:	d106      	bne.n	8016428 <ipfrag_free_pbuf_custom+0x20>
 801641a:	4b11      	ldr	r3, [pc, #68]	; (8016460 <ipfrag_free_pbuf_custom+0x58>)
 801641c:	f240 22ce 	movw	r2, #718	; 0x2ce
 8016420:	4910      	ldr	r1, [pc, #64]	; (8016464 <ipfrag_free_pbuf_custom+0x5c>)
 8016422:	4811      	ldr	r0, [pc, #68]	; (8016468 <ipfrag_free_pbuf_custom+0x60>)
 8016424:	f000 fce4 	bl	8016df0 <iprintf>
  LWIP_ASSERT("pcr == p", (void *)pcr == (void *)p);
 8016428:	68fa      	ldr	r2, [r7, #12]
 801642a:	687b      	ldr	r3, [r7, #4]
 801642c:	429a      	cmp	r2, r3
 801642e:	d006      	beq.n	801643e <ipfrag_free_pbuf_custom+0x36>
 8016430:	4b0b      	ldr	r3, [pc, #44]	; (8016460 <ipfrag_free_pbuf_custom+0x58>)
 8016432:	f240 22cf 	movw	r2, #719	; 0x2cf
 8016436:	490d      	ldr	r1, [pc, #52]	; (801646c <ipfrag_free_pbuf_custom+0x64>)
 8016438:	480b      	ldr	r0, [pc, #44]	; (8016468 <ipfrag_free_pbuf_custom+0x60>)
 801643a:	f000 fcd9 	bl	8016df0 <iprintf>
  if (pcr->original != NULL) {
 801643e:	68fb      	ldr	r3, [r7, #12]
 8016440:	695b      	ldr	r3, [r3, #20]
 8016442:	2b00      	cmp	r3, #0
 8016444:	d004      	beq.n	8016450 <ipfrag_free_pbuf_custom+0x48>
    pbuf_free(pcr->original);
 8016446:	68fb      	ldr	r3, [r7, #12]
 8016448:	695b      	ldr	r3, [r3, #20]
 801644a:	4618      	mov	r0, r3
 801644c:	f7f6 ff10 	bl	800d270 <pbuf_free>
  }
  ip_frag_free_pbuf_custom_ref(pcr);
 8016450:	68f8      	ldr	r0, [r7, #12]
 8016452:	f7ff ffbd 	bl	80163d0 <ip_frag_free_pbuf_custom_ref>
}
 8016456:	bf00      	nop
 8016458:	3710      	adds	r7, #16
 801645a:	46bd      	mov	sp, r7
 801645c:	bd80      	pop	{r7, pc}
 801645e:	bf00      	nop
 8016460:	0801b3a4 	.word	0x0801b3a4
 8016464:	0801b568 	.word	0x0801b568
 8016468:	0801b3ec 	.word	0x0801b3ec
 801646c:	0801b574 	.word	0x0801b574

08016470 <ip4_frag>:
 *
 * @return ERR_OK if sent successfully, err_t otherwise
 */
err_t
ip4_frag(struct pbuf *p, struct netif *netif, const ip4_addr_t *dest)
{
 8016470:	b580      	push	{r7, lr}
 8016472:	b094      	sub	sp, #80	; 0x50
 8016474:	af02      	add	r7, sp, #8
 8016476:	60f8      	str	r0, [r7, #12]
 8016478:	60b9      	str	r1, [r7, #8]
 801647a:	607a      	str	r2, [r7, #4]
  struct pbuf *rambuf;
#if !LWIP_NETIF_TX_SINGLE_PBUF
  struct pbuf *newpbuf;
  u16_t newpbuflen = 0;
 801647c:	2300      	movs	r3, #0
 801647e:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
  u16_t left_to_copy;
#endif
  struct ip_hdr *original_iphdr;
  struct ip_hdr *iphdr;
  const u16_t nfb = (u16_t)((netif->mtu - IP_HLEN) / 8);
 8016482:	68bb      	ldr	r3, [r7, #8]
 8016484:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 8016486:	3b14      	subs	r3, #20
 8016488:	2b00      	cmp	r3, #0
 801648a:	da00      	bge.n	801648e <ip4_frag+0x1e>
 801648c:	3307      	adds	r3, #7
 801648e:	10db      	asrs	r3, r3, #3
 8016490:	877b      	strh	r3, [r7, #58]	; 0x3a
  u16_t left, fragsize;
  u16_t ofo;
  int last;
  u16_t poff = IP_HLEN;
 8016492:	2314      	movs	r3, #20
 8016494:	87fb      	strh	r3, [r7, #62]	; 0x3e
  u16_t tmp;
  int mf_set;

  original_iphdr = (struct ip_hdr *)p->payload;
 8016496:	68fb      	ldr	r3, [r7, #12]
 8016498:	685b      	ldr	r3, [r3, #4]
 801649a:	637b      	str	r3, [r7, #52]	; 0x34
  iphdr = original_iphdr;
 801649c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 801649e:	633b      	str	r3, [r7, #48]	; 0x30
  if (IPH_HL_BYTES(iphdr) != IP_HLEN) {
 80164a0:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164a2:	781b      	ldrb	r3, [r3, #0]
 80164a4:	f003 030f 	and.w	r3, r3, #15
 80164a8:	b2db      	uxtb	r3, r3
 80164aa:	009b      	lsls	r3, r3, #2
 80164ac:	b2db      	uxtb	r3, r3
 80164ae:	2b14      	cmp	r3, #20
 80164b0:	d002      	beq.n	80164b8 <ip4_frag+0x48>
    /* ip4_frag() does not support IP options */
    return ERR_VAL;
 80164b2:	f06f 0305 	mvn.w	r3, #5
 80164b6:	e110      	b.n	80166da <ip4_frag+0x26a>
  }
  LWIP_ERROR("ip4_frag(): pbuf too short", p->len >= IP_HLEN, return ERR_VAL);
 80164b8:	68fb      	ldr	r3, [r7, #12]
 80164ba:	895b      	ldrh	r3, [r3, #10]
 80164bc:	2b13      	cmp	r3, #19
 80164be:	d809      	bhi.n	80164d4 <ip4_frag+0x64>
 80164c0:	4b88      	ldr	r3, [pc, #544]	; (80166e4 <ip4_frag+0x274>)
 80164c2:	f44f 723f 	mov.w	r2, #764	; 0x2fc
 80164c6:	4988      	ldr	r1, [pc, #544]	; (80166e8 <ip4_frag+0x278>)
 80164c8:	4888      	ldr	r0, [pc, #544]	; (80166ec <ip4_frag+0x27c>)
 80164ca:	f000 fc91 	bl	8016df0 <iprintf>
 80164ce:	f06f 0305 	mvn.w	r3, #5
 80164d2:	e102      	b.n	80166da <ip4_frag+0x26a>

  /* Save original offset */
  tmp = lwip_ntohs(IPH_OFFSET(iphdr));
 80164d4:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80164d6:	88db      	ldrh	r3, [r3, #6]
 80164d8:	b29b      	uxth	r3, r3
 80164da:	4618      	mov	r0, r3
 80164dc:	f7f5 fad6 	bl	800ba8c <lwip_htons>
 80164e0:	4603      	mov	r3, r0
 80164e2:	87bb      	strh	r3, [r7, #60]	; 0x3c
  ofo = tmp & IP_OFFMASK;
 80164e4:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164e6:	f3c3 030c 	ubfx	r3, r3, #0, #13
 80164ea:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  /* already fragmented? if so, the last fragment we create must have MF, too */
  mf_set = tmp & IP_MF;
 80164ee:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 80164f0:	f403 5300 	and.w	r3, r3, #8192	; 0x2000
 80164f4:	62fb      	str	r3, [r7, #44]	; 0x2c

  left = (u16_t)(p->tot_len - IP_HLEN);
 80164f6:	68fb      	ldr	r3, [r7, #12]
 80164f8:	891b      	ldrh	r3, [r3, #8]
 80164fa:	3b14      	subs	r3, #20
 80164fc:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42

  while (left) {
 8016500:	e0e1      	b.n	80166c6 <ip4_frag+0x256>
    /* Fill this fragment */
    fragsize = LWIP_MIN(left, (u16_t)(nfb * 8));
 8016502:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 8016504:	00db      	lsls	r3, r3, #3
 8016506:	b29b      	uxth	r3, r3
 8016508:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 801650c:	4293      	cmp	r3, r2
 801650e:	bf28      	it	cs
 8016510:	4613      	movcs	r3, r2
 8016512:	857b      	strh	r3, [r7, #42]	; 0x2a
    /* When not using a static buffer, create a chain of pbufs.
     * The first will be a PBUF_RAM holding the link and IP header.
     * The rest will be PBUF_REFs mirroring the pbuf chain to be fragged,
     * but limited to the size of an mtu.
     */
    rambuf = pbuf_alloc(PBUF_LINK, IP_HLEN, PBUF_RAM);
 8016514:	f44f 7220 	mov.w	r2, #640	; 0x280
 8016518:	2114      	movs	r1, #20
 801651a:	200e      	movs	r0, #14
 801651c:	f7f6 fbc4 	bl	800cca8 <pbuf_alloc>
 8016520:	6278      	str	r0, [r7, #36]	; 0x24
    if (rambuf == NULL) {
 8016522:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016524:	2b00      	cmp	r3, #0
 8016526:	f000 80d5 	beq.w	80166d4 <ip4_frag+0x264>
      goto memerr;
    }
    LWIP_ASSERT("this needs a pbuf in one piece!",
 801652a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 801652c:	895b      	ldrh	r3, [r3, #10]
 801652e:	2b13      	cmp	r3, #19
 8016530:	d806      	bhi.n	8016540 <ip4_frag+0xd0>
 8016532:	4b6c      	ldr	r3, [pc, #432]	; (80166e4 <ip4_frag+0x274>)
 8016534:	f44f 7249 	mov.w	r2, #804	; 0x324
 8016538:	496d      	ldr	r1, [pc, #436]	; (80166f0 <ip4_frag+0x280>)
 801653a:	486c      	ldr	r0, [pc, #432]	; (80166ec <ip4_frag+0x27c>)
 801653c:	f000 fc58 	bl	8016df0 <iprintf>
                (rambuf->len >= (IP_HLEN)));
    SMEMCPY(rambuf->payload, original_iphdr, IP_HLEN);
 8016540:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016542:	685b      	ldr	r3, [r3, #4]
 8016544:	2214      	movs	r2, #20
 8016546:	6b79      	ldr	r1, [r7, #52]	; 0x34
 8016548:	4618      	mov	r0, r3
 801654a:	f000 fdcd 	bl	80170e8 <memcpy>
    iphdr = (struct ip_hdr *)rambuf->payload;
 801654e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8016550:	685b      	ldr	r3, [r3, #4]
 8016552:	633b      	str	r3, [r7, #48]	; 0x30

    left_to_copy = fragsize;
 8016554:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016556:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
    while (left_to_copy) {
 801655a:	e064      	b.n	8016626 <ip4_frag+0x1b6>
      struct pbuf_custom_ref *pcr;
      u16_t plen = (u16_t)(p->len - poff);
 801655c:	68fb      	ldr	r3, [r7, #12]
 801655e:	895a      	ldrh	r2, [r3, #10]
 8016560:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 8016562:	1ad3      	subs	r3, r2, r3
 8016564:	83fb      	strh	r3, [r7, #30]
      LWIP_ASSERT("p->len >= poff", p->len >= poff);
 8016566:	68fb      	ldr	r3, [r7, #12]
 8016568:	895b      	ldrh	r3, [r3, #10]
 801656a:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 801656c:	429a      	cmp	r2, r3
 801656e:	d906      	bls.n	801657e <ip4_frag+0x10e>
 8016570:	4b5c      	ldr	r3, [pc, #368]	; (80166e4 <ip4_frag+0x274>)
 8016572:	f240 322d 	movw	r2, #813	; 0x32d
 8016576:	495f      	ldr	r1, [pc, #380]	; (80166f4 <ip4_frag+0x284>)
 8016578:	485c      	ldr	r0, [pc, #368]	; (80166ec <ip4_frag+0x27c>)
 801657a:	f000 fc39 	bl	8016df0 <iprintf>
      newpbuflen = LWIP_MIN(left_to_copy, plen);
 801657e:	8bfa      	ldrh	r2, [r7, #30]
 8016580:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016584:	4293      	cmp	r3, r2
 8016586:	bf28      	it	cs
 8016588:	4613      	movcs	r3, r2
 801658a:	f8a7 3046 	strh.w	r3, [r7, #70]	; 0x46
      /* Is this pbuf already empty? */
      if (!newpbuflen) {
 801658e:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016592:	2b00      	cmp	r3, #0
 8016594:	d105      	bne.n	80165a2 <ip4_frag+0x132>
        poff = 0;
 8016596:	2300      	movs	r3, #0
 8016598:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 801659a:	68fb      	ldr	r3, [r7, #12]
 801659c:	681b      	ldr	r3, [r3, #0]
 801659e:	60fb      	str	r3, [r7, #12]
        continue;
 80165a0:	e041      	b.n	8016626 <ip4_frag+0x1b6>
      }
      pcr = ip_frag_alloc_pbuf_custom_ref();
 80165a2:	f7ff ff0d 	bl	80163c0 <ip_frag_alloc_pbuf_custom_ref>
 80165a6:	61b8      	str	r0, [r7, #24]
      if (pcr == NULL) {
 80165a8:	69bb      	ldr	r3, [r7, #24]
 80165aa:	2b00      	cmp	r3, #0
 80165ac:	d103      	bne.n	80165b6 <ip4_frag+0x146>
        pbuf_free(rambuf);
 80165ae:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165b0:	f7f6 fe5e 	bl	800d270 <pbuf_free>
        goto memerr;
 80165b4:	e08f      	b.n	80166d6 <ip4_frag+0x266>
      }
      /* Mirror this pbuf, although we might not need all of it. */
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80165b6:	69b8      	ldr	r0, [r7, #24]
                                    (u8_t *)p->payload + poff, newpbuflen);
 80165b8:	68fb      	ldr	r3, [r7, #12]
 80165ba:	685a      	ldr	r2, [r3, #4]
      newpbuf = pbuf_alloced_custom(PBUF_RAW, newpbuflen, PBUF_REF, &pcr->pc,
 80165bc:	8ffb      	ldrh	r3, [r7, #62]	; 0x3e
 80165be:	4413      	add	r3, r2
 80165c0:	f8b7 1046 	ldrh.w	r1, [r7, #70]	; 0x46
 80165c4:	f8b7 2046 	ldrh.w	r2, [r7, #70]	; 0x46
 80165c8:	9201      	str	r2, [sp, #4]
 80165ca:	9300      	str	r3, [sp, #0]
 80165cc:	4603      	mov	r3, r0
 80165ce:	2241      	movs	r2, #65	; 0x41
 80165d0:	2000      	movs	r0, #0
 80165d2:	f7f6 fc93 	bl	800cefc <pbuf_alloced_custom>
 80165d6:	6178      	str	r0, [r7, #20]
      if (newpbuf == NULL) {
 80165d8:	697b      	ldr	r3, [r7, #20]
 80165da:	2b00      	cmp	r3, #0
 80165dc:	d106      	bne.n	80165ec <ip4_frag+0x17c>
        ip_frag_free_pbuf_custom_ref(pcr);
 80165de:	69b8      	ldr	r0, [r7, #24]
 80165e0:	f7ff fef6 	bl	80163d0 <ip_frag_free_pbuf_custom_ref>
        pbuf_free(rambuf);
 80165e4:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80165e6:	f7f6 fe43 	bl	800d270 <pbuf_free>
        goto memerr;
 80165ea:	e074      	b.n	80166d6 <ip4_frag+0x266>
      }
      pbuf_ref(p);
 80165ec:	68f8      	ldr	r0, [r7, #12]
 80165ee:	f7f6 fee5 	bl	800d3bc <pbuf_ref>
      pcr->original = p;
 80165f2:	69bb      	ldr	r3, [r7, #24]
 80165f4:	68fa      	ldr	r2, [r7, #12]
 80165f6:	615a      	str	r2, [r3, #20]
      pcr->pc.custom_free_function = ipfrag_free_pbuf_custom;
 80165f8:	69bb      	ldr	r3, [r7, #24]
 80165fa:	4a3f      	ldr	r2, [pc, #252]	; (80166f8 <ip4_frag+0x288>)
 80165fc:	611a      	str	r2, [r3, #16]

      /* Add it to end of rambuf's chain, but using pbuf_cat, not pbuf_chain
       * so that it is removed when pbuf_dechain is later called on rambuf.
       */
      pbuf_cat(rambuf, newpbuf);
 80165fe:	6979      	ldr	r1, [r7, #20]
 8016600:	6a78      	ldr	r0, [r7, #36]	; 0x24
 8016602:	f7f6 ff03 	bl	800d40c <pbuf_cat>
      left_to_copy = (u16_t)(left_to_copy - newpbuflen);
 8016606:	f8b7 2044 	ldrh.w	r2, [r7, #68]	; 0x44
 801660a:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 801660e:	1ad3      	subs	r3, r2, r3
 8016610:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
      if (left_to_copy) {
 8016614:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 8016618:	2b00      	cmp	r3, #0
 801661a:	d004      	beq.n	8016626 <ip4_frag+0x1b6>
        poff = 0;
 801661c:	2300      	movs	r3, #0
 801661e:	87fb      	strh	r3, [r7, #62]	; 0x3e
        p = p->next;
 8016620:	68fb      	ldr	r3, [r7, #12]
 8016622:	681b      	ldr	r3, [r3, #0]
 8016624:	60fb      	str	r3, [r7, #12]
    while (left_to_copy) {
 8016626:	f8b7 3044 	ldrh.w	r3, [r7, #68]	; 0x44
 801662a:	2b00      	cmp	r3, #0
 801662c:	d196      	bne.n	801655c <ip4_frag+0xec>
      }
    }
    poff = (u16_t)(poff + newpbuflen);
 801662e:	8ffa      	ldrh	r2, [r7, #62]	; 0x3e
 8016630:	f8b7 3046 	ldrh.w	r3, [r7, #70]	; 0x46
 8016634:	4413      	add	r3, r2
 8016636:	87fb      	strh	r3, [r7, #62]	; 0x3e
#endif /* LWIP_NETIF_TX_SINGLE_PBUF */

    /* Correct header */
    last = (left <= netif->mtu - IP_HLEN);
 8016638:	68bb      	ldr	r3, [r7, #8]
 801663a:	8c9b      	ldrh	r3, [r3, #36]	; 0x24
 801663c:	f1a3 0213 	sub.w	r2, r3, #19
 8016640:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 8016644:	429a      	cmp	r2, r3
 8016646:	bfcc      	ite	gt
 8016648:	2301      	movgt	r3, #1
 801664a:	2300      	movle	r3, #0
 801664c:	b2db      	uxtb	r3, r3
 801664e:	623b      	str	r3, [r7, #32]

    /* Set new offset and MF flag */
    tmp = (IP_OFFMASK & (ofo));
 8016650:	f8b7 3040 	ldrh.w	r3, [r7, #64]	; 0x40
 8016654:	f3c3 030c 	ubfx	r3, r3, #0, #13
 8016658:	87bb      	strh	r3, [r7, #60]	; 0x3c
    if (!last || mf_set) {
 801665a:	6a3b      	ldr	r3, [r7, #32]
 801665c:	2b00      	cmp	r3, #0
 801665e:	d002      	beq.n	8016666 <ip4_frag+0x1f6>
 8016660:	6afb      	ldr	r3, [r7, #44]	; 0x2c
 8016662:	2b00      	cmp	r3, #0
 8016664:	d003      	beq.n	801666e <ip4_frag+0x1fe>
      /* the last fragment has MF set if the input frame had it */
      tmp = tmp | IP_MF;
 8016666:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016668:	f443 5300 	orr.w	r3, r3, #8192	; 0x2000
 801666c:	87bb      	strh	r3, [r7, #60]	; 0x3c
    }
    IPH_OFFSET_SET(iphdr, lwip_htons(tmp));
 801666e:	8fbb      	ldrh	r3, [r7, #60]	; 0x3c
 8016670:	4618      	mov	r0, r3
 8016672:	f7f5 fa0b 	bl	800ba8c <lwip_htons>
 8016676:	4603      	mov	r3, r0
 8016678:	461a      	mov	r2, r3
 801667a:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 801667c:	80da      	strh	r2, [r3, #6]
    IPH_LEN_SET(iphdr, lwip_htons((u16_t)(fragsize + IP_HLEN)));
 801667e:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 8016680:	3314      	adds	r3, #20
 8016682:	b29b      	uxth	r3, r3
 8016684:	4618      	mov	r0, r3
 8016686:	f7f5 fa01 	bl	800ba8c <lwip_htons>
 801668a:	4603      	mov	r3, r0
 801668c:	461a      	mov	r2, r3
 801668e:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016690:	805a      	strh	r2, [r3, #2]
    IPH_CHKSUM_SET(iphdr, 0);
 8016692:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8016694:	2200      	movs	r2, #0
 8016696:	729a      	strb	r2, [r3, #10]
 8016698:	2200      	movs	r2, #0
 801669a:	72da      	strb	r2, [r3, #11]
#endif /* CHECKSUM_GEN_IP */

    /* No need for separate header pbuf - we allowed room for it in rambuf
     * when allocated.
     */
    netif->output(netif, rambuf, dest);
 801669c:	68bb      	ldr	r3, [r7, #8]
 801669e:	695b      	ldr	r3, [r3, #20]
 80166a0:	687a      	ldr	r2, [r7, #4]
 80166a2:	6a79      	ldr	r1, [r7, #36]	; 0x24
 80166a4:	68b8      	ldr	r0, [r7, #8]
 80166a6:	4798      	blx	r3
     * recreate it next time round the loop. If we're lucky the hardware
     * will have already sent the packet, the free will really free, and
     * there will be zero memory penalty.
     */

    pbuf_free(rambuf);
 80166a8:	6a78      	ldr	r0, [r7, #36]	; 0x24
 80166aa:	f7f6 fde1 	bl	800d270 <pbuf_free>
    left = (u16_t)(left - fragsize);
 80166ae:	f8b7 2042 	ldrh.w	r2, [r7, #66]	; 0x42
 80166b2:	8d7b      	ldrh	r3, [r7, #42]	; 0x2a
 80166b4:	1ad3      	subs	r3, r2, r3
 80166b6:	f8a7 3042 	strh.w	r3, [r7, #66]	; 0x42
    ofo = (u16_t)(ofo + nfb);
 80166ba:	f8b7 2040 	ldrh.w	r2, [r7, #64]	; 0x40
 80166be:	8f7b      	ldrh	r3, [r7, #58]	; 0x3a
 80166c0:	4413      	add	r3, r2
 80166c2:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
  while (left) {
 80166c6:	f8b7 3042 	ldrh.w	r3, [r7, #66]	; 0x42
 80166ca:	2b00      	cmp	r3, #0
 80166cc:	f47f af19 	bne.w	8016502 <ip4_frag+0x92>
  }
  MIB2_STATS_INC(mib2.ipfragoks);
  return ERR_OK;
 80166d0:	2300      	movs	r3, #0
 80166d2:	e002      	b.n	80166da <ip4_frag+0x26a>
      goto memerr;
 80166d4:	bf00      	nop
memerr:
  MIB2_STATS_INC(mib2.ipfragfails);
  return ERR_MEM;
 80166d6:	f04f 33ff 	mov.w	r3, #4294967295
}
 80166da:	4618      	mov	r0, r3
 80166dc:	3748      	adds	r7, #72	; 0x48
 80166de:	46bd      	mov	sp, r7
 80166e0:	bd80      	pop	{r7, pc}
 80166e2:	bf00      	nop
 80166e4:	0801b3a4 	.word	0x0801b3a4
 80166e8:	0801b580 	.word	0x0801b580
 80166ec:	0801b3ec 	.word	0x0801b3ec
 80166f0:	0801b59c 	.word	0x0801b59c
 80166f4:	0801b5bc 	.word	0x0801b5bc
 80166f8:	08016409 	.word	0x08016409

080166fc <ethernet_input>:
 * @see ETHARP_SUPPORT_VLAN
 * @see LWIP_HOOK_VLAN_CHECK
 */
err_t
ethernet_input(struct pbuf *p, struct netif *netif)
{
 80166fc:	b580      	push	{r7, lr}
 80166fe:	b086      	sub	sp, #24
 8016700:	af00      	add	r7, sp, #0
 8016702:	6078      	str	r0, [r7, #4]
 8016704:	6039      	str	r1, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t type;
#if LWIP_ARP || ETHARP_SUPPORT_VLAN || LWIP_IPV6
  u16_t next_hdr_offset = SIZEOF_ETH_HDR;
 8016706:	230e      	movs	r3, #14
 8016708:	82fb      	strh	r3, [r7, #22]
#endif /* LWIP_ARP || ETHARP_SUPPORT_VLAN */

  LWIP_ASSERT_CORE_LOCKED();

  if (p->len <= SIZEOF_ETH_HDR) {
 801670a:	687b      	ldr	r3, [r7, #4]
 801670c:	895b      	ldrh	r3, [r3, #10]
 801670e:	2b0e      	cmp	r3, #14
 8016710:	d96e      	bls.n	80167f0 <ethernet_input+0xf4>
    ETHARP_STATS_INC(etharp.drop);
    MIB2_STATS_NETIF_INC(netif, ifinerrors);
    goto free_and_return;
  }

  if (p->if_idx == NETIF_NO_INDEX) {
 8016712:	687b      	ldr	r3, [r7, #4]
 8016714:	7bdb      	ldrb	r3, [r3, #15]
 8016716:	2b00      	cmp	r3, #0
 8016718:	d106      	bne.n	8016728 <ethernet_input+0x2c>
    p->if_idx = netif_get_index(netif);
 801671a:	683b      	ldr	r3, [r7, #0]
 801671c:	f893 3030 	ldrb.w	r3, [r3, #48]	; 0x30
 8016720:	3301      	adds	r3, #1
 8016722:	b2da      	uxtb	r2, r3
 8016724:	687b      	ldr	r3, [r7, #4]
 8016726:	73da      	strb	r2, [r3, #15]
  }

  /* points to packet payload, which starts with an Ethernet header */
  ethhdr = (struct eth_hdr *)p->payload;
 8016728:	687b      	ldr	r3, [r7, #4]
 801672a:	685b      	ldr	r3, [r3, #4]
 801672c:	613b      	str	r3, [r7, #16]
               (unsigned char)ethhdr->dest.addr[3], (unsigned char)ethhdr->dest.addr[4], (unsigned char)ethhdr->dest.addr[5],
               (unsigned char)ethhdr->src.addr[0],  (unsigned char)ethhdr->src.addr[1],  (unsigned char)ethhdr->src.addr[2],
               (unsigned char)ethhdr->src.addr[3],  (unsigned char)ethhdr->src.addr[4],  (unsigned char)ethhdr->src.addr[5],
               lwip_htons(ethhdr->type)));

  type = ethhdr->type;
 801672e:	693b      	ldr	r3, [r7, #16]
 8016730:	7b1a      	ldrb	r2, [r3, #12]
 8016732:	7b5b      	ldrb	r3, [r3, #13]
 8016734:	021b      	lsls	r3, r3, #8
 8016736:	4313      	orrs	r3, r2
 8016738:	81fb      	strh	r3, [r7, #14]

#if LWIP_ARP_FILTER_NETIF
  netif = LWIP_ARP_FILTER_NETIF_FN(p, netif, lwip_htons(type));
#endif /* LWIP_ARP_FILTER_NETIF*/

  if (ethhdr->dest.addr[0] & 1) {
 801673a:	693b      	ldr	r3, [r7, #16]
 801673c:	781b      	ldrb	r3, [r3, #0]
 801673e:	f003 0301 	and.w	r3, r3, #1
 8016742:	2b00      	cmp	r3, #0
 8016744:	d023      	beq.n	801678e <ethernet_input+0x92>
    /* this might be a multicast or broadcast packet */
    if (ethhdr->dest.addr[0] == LL_IP4_MULTICAST_ADDR_0) {
 8016746:	693b      	ldr	r3, [r7, #16]
 8016748:	781b      	ldrb	r3, [r3, #0]
 801674a:	2b01      	cmp	r3, #1
 801674c:	d10f      	bne.n	801676e <ethernet_input+0x72>
#if LWIP_IPV4
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801674e:	693b      	ldr	r3, [r7, #16]
 8016750:	785b      	ldrb	r3, [r3, #1]
 8016752:	2b00      	cmp	r3, #0
 8016754:	d11b      	bne.n	801678e <ethernet_input+0x92>
          (ethhdr->dest.addr[2] == LL_IP4_MULTICAST_ADDR_2)) {
 8016756:	693b      	ldr	r3, [r7, #16]
 8016758:	789b      	ldrb	r3, [r3, #2]
      if ((ethhdr->dest.addr[1] == LL_IP4_MULTICAST_ADDR_1) &&
 801675a:	2b5e      	cmp	r3, #94	; 0x5e
 801675c:	d117      	bne.n	801678e <ethernet_input+0x92>
        /* mark the pbuf as link-layer multicast */
        p->flags |= PBUF_FLAG_LLMCAST;
 801675e:	687b      	ldr	r3, [r7, #4]
 8016760:	7b5b      	ldrb	r3, [r3, #13]
 8016762:	f043 0310 	orr.w	r3, r3, #16
 8016766:	b2da      	uxtb	r2, r3
 8016768:	687b      	ldr	r3, [r7, #4]
 801676a:	735a      	strb	r2, [r3, #13]
 801676c:	e00f      	b.n	801678e <ethernet_input+0x92>
             (ethhdr->dest.addr[1] == LL_IP6_MULTICAST_ADDR_1)) {
      /* mark the pbuf as link-layer multicast */
      p->flags |= PBUF_FLAG_LLMCAST;
    }
#endif /* LWIP_IPV6 */
    else if (eth_addr_cmp(&ethhdr->dest, &ethbroadcast)) {
 801676e:	693b      	ldr	r3, [r7, #16]
 8016770:	2206      	movs	r2, #6
 8016772:	4928      	ldr	r1, [pc, #160]	; (8016814 <ethernet_input+0x118>)
 8016774:	4618      	mov	r0, r3
 8016776:	f000 fbb0 	bl	8016eda <memcmp>
 801677a:	4603      	mov	r3, r0
 801677c:	2b00      	cmp	r3, #0
 801677e:	d106      	bne.n	801678e <ethernet_input+0x92>
      /* mark the pbuf as link-layer broadcast */
      p->flags |= PBUF_FLAG_LLBCAST;
 8016780:	687b      	ldr	r3, [r7, #4]
 8016782:	7b5b      	ldrb	r3, [r3, #13]
 8016784:	f043 0308 	orr.w	r3, r3, #8
 8016788:	b2da      	uxtb	r2, r3
 801678a:	687b      	ldr	r3, [r7, #4]
 801678c:	735a      	strb	r2, [r3, #13]
    }
  }

  switch (type) {
 801678e:	89fb      	ldrh	r3, [r7, #14]
 8016790:	2b08      	cmp	r3, #8
 8016792:	d003      	beq.n	801679c <ethernet_input+0xa0>
 8016794:	f5b3 6fc1 	cmp.w	r3, #1544	; 0x608
 8016798:	d014      	beq.n	80167c4 <ethernet_input+0xc8>
      }
#endif
      ETHARP_STATS_INC(etharp.proterr);
      ETHARP_STATS_INC(etharp.drop);
      MIB2_STATS_NETIF_INC(netif, ifinunknownprotos);
      goto free_and_return;
 801679a:	e032      	b.n	8016802 <ethernet_input+0x106>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 801679c:	683b      	ldr	r3, [r7, #0]
 801679e:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167a2:	f003 0308 	and.w	r3, r3, #8
 80167a6:	2b00      	cmp	r3, #0
 80167a8:	d024      	beq.n	80167f4 <ethernet_input+0xf8>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80167aa:	8afb      	ldrh	r3, [r7, #22]
 80167ac:	4619      	mov	r1, r3
 80167ae:	6878      	ldr	r0, [r7, #4]
 80167b0:	f7f6 fcd8 	bl	800d164 <pbuf_remove_header>
 80167b4:	4603      	mov	r3, r0
 80167b6:	2b00      	cmp	r3, #0
 80167b8:	d11e      	bne.n	80167f8 <ethernet_input+0xfc>
        ip4_input(p, netif);
 80167ba:	6839      	ldr	r1, [r7, #0]
 80167bc:	6878      	ldr	r0, [r7, #4]
 80167be:	f7fe ff21 	bl	8015604 <ip4_input>
      break;
 80167c2:	e013      	b.n	80167ec <ethernet_input+0xf0>
      if (!(netif->flags & NETIF_FLAG_ETHARP)) {
 80167c4:	683b      	ldr	r3, [r7, #0]
 80167c6:	f893 302d 	ldrb.w	r3, [r3, #45]	; 0x2d
 80167ca:	f003 0308 	and.w	r3, r3, #8
 80167ce:	2b00      	cmp	r3, #0
 80167d0:	d014      	beq.n	80167fc <ethernet_input+0x100>
      if (pbuf_remove_header(p, next_hdr_offset)) {
 80167d2:	8afb      	ldrh	r3, [r7, #22]
 80167d4:	4619      	mov	r1, r3
 80167d6:	6878      	ldr	r0, [r7, #4]
 80167d8:	f7f6 fcc4 	bl	800d164 <pbuf_remove_header>
 80167dc:	4603      	mov	r3, r0
 80167de:	2b00      	cmp	r3, #0
 80167e0:	d10e      	bne.n	8016800 <ethernet_input+0x104>
        etharp_input(p, netif);
 80167e2:	6839      	ldr	r1, [r7, #0]
 80167e4:	6878      	ldr	r0, [r7, #4]
 80167e6:	f7fe f8c1 	bl	801496c <etharp_input>
      break;
 80167ea:	bf00      	nop
  }

  /* This means the pbuf is freed or consumed,
     so the caller doesn't have to free it again */
  return ERR_OK;
 80167ec:	2300      	movs	r3, #0
 80167ee:	e00c      	b.n	801680a <ethernet_input+0x10e>
    goto free_and_return;
 80167f0:	bf00      	nop
 80167f2:	e006      	b.n	8016802 <ethernet_input+0x106>
        goto free_and_return;
 80167f4:	bf00      	nop
 80167f6:	e004      	b.n	8016802 <ethernet_input+0x106>
        goto free_and_return;
 80167f8:	bf00      	nop
 80167fa:	e002      	b.n	8016802 <ethernet_input+0x106>
        goto free_and_return;
 80167fc:	bf00      	nop
 80167fe:	e000      	b.n	8016802 <ethernet_input+0x106>
        goto free_and_return;
 8016800:	bf00      	nop

free_and_return:
  pbuf_free(p);
 8016802:	6878      	ldr	r0, [r7, #4]
 8016804:	f7f6 fd34 	bl	800d270 <pbuf_free>
  return ERR_OK;
 8016808:	2300      	movs	r3, #0
}
 801680a:	4618      	mov	r0, r3
 801680c:	3718      	adds	r7, #24
 801680e:	46bd      	mov	sp, r7
 8016810:	bd80      	pop	{r7, pc}
 8016812:	bf00      	nop
 8016814:	0801b7e4 	.word	0x0801b7e4

08016818 <ethernet_output>:
 * @return ERR_OK if the packet was sent, any other err_t on failure
 */
err_t
ethernet_output(struct netif * netif, struct pbuf * p,
                const struct eth_addr * src, const struct eth_addr * dst,
                u16_t eth_type) {
 8016818:	b580      	push	{r7, lr}
 801681a:	b086      	sub	sp, #24
 801681c:	af00      	add	r7, sp, #0
 801681e:	60f8      	str	r0, [r7, #12]
 8016820:	60b9      	str	r1, [r7, #8]
 8016822:	607a      	str	r2, [r7, #4]
 8016824:	603b      	str	r3, [r7, #0]
  struct eth_hdr *ethhdr;
  u16_t eth_type_be = lwip_htons(eth_type);
 8016826:	8c3b      	ldrh	r3, [r7, #32]
 8016828:	4618      	mov	r0, r3
 801682a:	f7f5 f92f 	bl	800ba8c <lwip_htons>
 801682e:	4603      	mov	r3, r0
 8016830:	82fb      	strh	r3, [r7, #22]

    eth_type_be = PP_HTONS(ETHTYPE_VLAN);
  } else
#endif /* ETHARP_SUPPORT_VLAN && defined(LWIP_HOOK_VLAN_SET) */
  {
    if (pbuf_add_header(p, SIZEOF_ETH_HDR) != 0) {
 8016832:	210e      	movs	r1, #14
 8016834:	68b8      	ldr	r0, [r7, #8]
 8016836:	f7f6 fc85 	bl	800d144 <pbuf_add_header>
 801683a:	4603      	mov	r3, r0
 801683c:	2b00      	cmp	r3, #0
 801683e:	d125      	bne.n	801688c <ethernet_output+0x74>
    }
  }

  LWIP_ASSERT_CORE_LOCKED();

  ethhdr = (struct eth_hdr *)p->payload;
 8016840:	68bb      	ldr	r3, [r7, #8]
 8016842:	685b      	ldr	r3, [r3, #4]
 8016844:	613b      	str	r3, [r7, #16]
  ethhdr->type = eth_type_be;
 8016846:	693b      	ldr	r3, [r7, #16]
 8016848:	8afa      	ldrh	r2, [r7, #22]
 801684a:	819a      	strh	r2, [r3, #12]
  SMEMCPY(&ethhdr->dest, dst, ETH_HWADDR_LEN);
 801684c:	693b      	ldr	r3, [r7, #16]
 801684e:	2206      	movs	r2, #6
 8016850:	6839      	ldr	r1, [r7, #0]
 8016852:	4618      	mov	r0, r3
 8016854:	f000 fc48 	bl	80170e8 <memcpy>
  SMEMCPY(&ethhdr->src,  src, ETH_HWADDR_LEN);
 8016858:	693b      	ldr	r3, [r7, #16]
 801685a:	3306      	adds	r3, #6
 801685c:	2206      	movs	r2, #6
 801685e:	6879      	ldr	r1, [r7, #4]
 8016860:	4618      	mov	r0, r3
 8016862:	f000 fc41 	bl	80170e8 <memcpy>

  LWIP_ASSERT("netif->hwaddr_len must be 6 for ethernet_output!",
 8016866:	68fb      	ldr	r3, [r7, #12]
 8016868:	f893 302c 	ldrb.w	r3, [r3, #44]	; 0x2c
 801686c:	2b06      	cmp	r3, #6
 801686e:	d006      	beq.n	801687e <ethernet_output+0x66>
 8016870:	4b0a      	ldr	r3, [pc, #40]	; (801689c <ethernet_output+0x84>)
 8016872:	f44f 7299 	mov.w	r2, #306	; 0x132
 8016876:	490a      	ldr	r1, [pc, #40]	; (80168a0 <ethernet_output+0x88>)
 8016878:	480a      	ldr	r0, [pc, #40]	; (80168a4 <ethernet_output+0x8c>)
 801687a:	f000 fab9 	bl	8016df0 <iprintf>
              (netif->hwaddr_len == ETH_HWADDR_LEN));
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE,
              ("ethernet_output: sending packet %p\n", (void *)p));

  /* send the packet */
  return netif->linkoutput(netif, p);
 801687e:	68fb      	ldr	r3, [r7, #12]
 8016880:	699b      	ldr	r3, [r3, #24]
 8016882:	68b9      	ldr	r1, [r7, #8]
 8016884:	68f8      	ldr	r0, [r7, #12]
 8016886:	4798      	blx	r3
 8016888:	4603      	mov	r3, r0
 801688a:	e002      	b.n	8016892 <ethernet_output+0x7a>
      goto pbuf_header_failed;
 801688c:	bf00      	nop

pbuf_header_failed:
  LWIP_DEBUGF(ETHARP_DEBUG | LWIP_DBG_TRACE | LWIP_DBG_LEVEL_SERIOUS,
              ("ethernet_output: could not allocate room for header.\n"));
  LINK_STATS_INC(link.lenerr);
  return ERR_BUF;
 801688e:	f06f 0301 	mvn.w	r3, #1
}
 8016892:	4618      	mov	r0, r3
 8016894:	3718      	adds	r7, #24
 8016896:	46bd      	mov	sp, r7
 8016898:	bd80      	pop	{r7, pc}
 801689a:	bf00      	nop
 801689c:	0801b5cc 	.word	0x0801b5cc
 80168a0:	0801b604 	.word	0x0801b604
 80168a4:	0801b638 	.word	0x0801b638

080168a8 <sys_mbox_new>:
#endif

/*-----------------------------------------------------------------------------------*/
//  Creates an empty mailbox.
err_t sys_mbox_new(sys_mbox_t *mbox, int size)
{
 80168a8:	b580      	push	{r7, lr}
 80168aa:	b082      	sub	sp, #8
 80168ac:	af00      	add	r7, sp, #0
 80168ae:	6078      	str	r0, [r7, #4]
 80168b0:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  osMessageQDef(QUEUE, size, void *);
  *mbox = osMessageCreate(osMessageQ(QUEUE), NULL);
#else
  *mbox = osMessageQueueNew(size, sizeof(void *), NULL);
 80168b2:	683b      	ldr	r3, [r7, #0]
 80168b4:	2200      	movs	r2, #0
 80168b6:	2104      	movs	r1, #4
 80168b8:	4618      	mov	r0, r3
 80168ba:	f7ef fb57 	bl	8005f6c <osMessageQueueNew>
 80168be:	4602      	mov	r2, r0
 80168c0:	687b      	ldr	r3, [r7, #4]
 80168c2:	601a      	str	r2, [r3, #0]
  if(lwip_stats.sys.mbox.max < lwip_stats.sys.mbox.used)
  {
    lwip_stats.sys.mbox.max = lwip_stats.sys.mbox.used;
  }
#endif /* SYS_STATS */
  if(*mbox == NULL)
 80168c4:	687b      	ldr	r3, [r7, #4]
 80168c6:	681b      	ldr	r3, [r3, #0]
 80168c8:	2b00      	cmp	r3, #0
 80168ca:	d102      	bne.n	80168d2 <sys_mbox_new+0x2a>
    return ERR_MEM;
 80168cc:	f04f 33ff 	mov.w	r3, #4294967295
 80168d0:	e000      	b.n	80168d4 <sys_mbox_new+0x2c>

  return ERR_OK;
 80168d2:	2300      	movs	r3, #0
}
 80168d4:	4618      	mov	r0, r3
 80168d6:	3708      	adds	r7, #8
 80168d8:	46bd      	mov	sp, r7
 80168da:	bd80      	pop	{r7, pc}

080168dc <sys_mbox_free>:
  Deallocates a mailbox. If there are messages still present in the
  mailbox when the mailbox is deallocated, it is an indication of a
  programming error in lwIP and the developer should be notified.
*/
void sys_mbox_free(sys_mbox_t *mbox)
{
 80168dc:	b580      	push	{r7, lr}
 80168de:	b082      	sub	sp, #8
 80168e0:	af00      	add	r7, sp, #0
 80168e2:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  if(osMessageWaiting(*mbox))
#else
  if(osMessageQueueGetCount(*mbox))
 80168e4:	687b      	ldr	r3, [r7, #4]
 80168e6:	681b      	ldr	r3, [r3, #0]
 80168e8:	4618      	mov	r0, r3
 80168ea:	f7ef fc71 	bl	80061d0 <osMessageQueueGetCount>

  }
#if (osCMSIS < 0x20000U)
  osMessageDelete(*mbox);
#else
  osMessageQueueDelete(*mbox);
 80168ee:	687b      	ldr	r3, [r7, #4]
 80168f0:	681b      	ldr	r3, [r3, #0]
 80168f2:	4618      	mov	r0, r3
 80168f4:	f7ef fc8c 	bl	8006210 <osMessageQueueDelete>
#endif
#if SYS_STATS
  --lwip_stats.sys.mbox.used;
#endif /* SYS_STATS */
}
 80168f8:	bf00      	nop
 80168fa:	3708      	adds	r7, #8
 80168fc:	46bd      	mov	sp, r7
 80168fe:	bd80      	pop	{r7, pc}

08016900 <sys_mbox_trypost>:


/*-----------------------------------------------------------------------------------*/
//   Try to post the "msg" to the mailbox.
err_t sys_mbox_trypost(sys_mbox_t *mbox, void *msg)
{
 8016900:	b580      	push	{r7, lr}
 8016902:	b084      	sub	sp, #16
 8016904:	af00      	add	r7, sp, #0
 8016906:	6078      	str	r0, [r7, #4]
 8016908:	6039      	str	r1, [r7, #0]
  err_t result;
#if (osCMSIS < 0x20000U)
  if(osMessagePut(*mbox, (uint32_t)msg, 0) == osOK)
#else
  if(osMessageQueuePut(*mbox, &msg, 0, 0) == osOK)
 801690a:	687b      	ldr	r3, [r7, #4]
 801690c:	6818      	ldr	r0, [r3, #0]
 801690e:	4639      	mov	r1, r7
 8016910:	2300      	movs	r3, #0
 8016912:	2200      	movs	r2, #0
 8016914:	f7ef fb9e 	bl	8006054 <osMessageQueuePut>
 8016918:	4603      	mov	r3, r0
 801691a:	2b00      	cmp	r3, #0
 801691c:	d102      	bne.n	8016924 <sys_mbox_trypost+0x24>
#endif
  {
    result = ERR_OK;
 801691e:	2300      	movs	r3, #0
 8016920:	73fb      	strb	r3, [r7, #15]
 8016922:	e001      	b.n	8016928 <sys_mbox_trypost+0x28>
  }
  else
  {
    // could not post, queue must be full
    result = ERR_MEM;
 8016924:	23ff      	movs	r3, #255	; 0xff
 8016926:	73fb      	strb	r3, [r7, #15]
#if SYS_STATS
    lwip_stats.sys.mbox.err++;
#endif /* SYS_STATS */
  }

  return result;
 8016928:	f997 300f 	ldrsb.w	r3, [r7, #15]
}
 801692c:	4618      	mov	r0, r3
 801692e:	3710      	adds	r7, #16
 8016930:	46bd      	mov	sp, r7
 8016932:	bd80      	pop	{r7, pc}

08016934 <sys_arch_mbox_fetch>:

  Note that a function with a similar name, sys_mbox_fetch(), is
  implemented by lwIP.
*/
u32_t sys_arch_mbox_fetch(sys_mbox_t *mbox, void **msg, u32_t timeout)
{
 8016934:	b580      	push	{r7, lr}
 8016936:	b086      	sub	sp, #24
 8016938:	af00      	add	r7, sp, #0
 801693a:	60f8      	str	r0, [r7, #12]
 801693c:	60b9      	str	r1, [r7, #8]
 801693e:	607a      	str	r2, [r7, #4]
#if (osCMSIS < 0x20000U)
  osEvent event;
  uint32_t starttime = osKernelSysTick();
#else
  osStatus_t status;
  uint32_t starttime = osKernelGetTickCount();
 8016940:	f7ef f800 	bl	8005944 <osKernelGetTickCount>
 8016944:	6178      	str	r0, [r7, #20]
#endif
  if(timeout != 0)
 8016946:	687b      	ldr	r3, [r7, #4]
 8016948:	2b00      	cmp	r3, #0
 801694a:	d013      	beq.n	8016974 <sys_arch_mbox_fetch+0x40>
    {
      *msg = (void *)event.value.v;
      return (osKernelSysTick() - starttime);
    }
#else
    status = osMessageQueueGet(*mbox, msg, 0, timeout);
 801694c:	68fb      	ldr	r3, [r7, #12]
 801694e:	6818      	ldr	r0, [r3, #0]
 8016950:	687b      	ldr	r3, [r7, #4]
 8016952:	2200      	movs	r2, #0
 8016954:	68b9      	ldr	r1, [r7, #8]
 8016956:	f7ef fbdd 	bl	8006114 <osMessageQueueGet>
 801695a:	6138      	str	r0, [r7, #16]
    if (status == osOK)
 801695c:	693b      	ldr	r3, [r7, #16]
 801695e:	2b00      	cmp	r3, #0
 8016960:	d105      	bne.n	801696e <sys_arch_mbox_fetch+0x3a>
    {
      return (osKernelGetTickCount() - starttime);
 8016962:	f7ee ffef 	bl	8005944 <osKernelGetTickCount>
 8016966:	4602      	mov	r2, r0
 8016968:	697b      	ldr	r3, [r7, #20]
 801696a:	1ad3      	subs	r3, r2, r3
 801696c:	e00f      	b.n	801698e <sys_arch_mbox_fetch+0x5a>
    }
#endif
    else
    {
      return SYS_ARCH_TIMEOUT;
 801696e:	f04f 33ff 	mov.w	r3, #4294967295
 8016972:	e00c      	b.n	801698e <sys_arch_mbox_fetch+0x5a>
#if (osCMSIS < 0x20000U)
    event = osMessageGet (*mbox, osWaitForever);
    *msg = (void *)event.value.v;
    return (osKernelSysTick() - starttime);
#else
    osMessageQueueGet(*mbox, msg, 0, osWaitForever );
 8016974:	68fb      	ldr	r3, [r7, #12]
 8016976:	6818      	ldr	r0, [r3, #0]
 8016978:	f04f 33ff 	mov.w	r3, #4294967295
 801697c:	2200      	movs	r2, #0
 801697e:	68b9      	ldr	r1, [r7, #8]
 8016980:	f7ef fbc8 	bl	8006114 <osMessageQueueGet>
    return (osKernelGetTickCount() - starttime);
 8016984:	f7ee ffde 	bl	8005944 <osKernelGetTickCount>
 8016988:	4602      	mov	r2, r0
 801698a:	697b      	ldr	r3, [r7, #20]
 801698c:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 801698e:	4618      	mov	r0, r3
 8016990:	3718      	adds	r7, #24
 8016992:	46bd      	mov	sp, r7
 8016994:	bd80      	pop	{r7, pc}

08016996 <sys_arch_mbox_tryfetch>:
/*
  Similar to sys_arch_mbox_fetch, but if message is not ready immediately, we'll
  return with SYS_MBOX_EMPTY.  On success, 0 is returned.
*/
u32_t sys_arch_mbox_tryfetch(sys_mbox_t *mbox, void **msg)
{
 8016996:	b580      	push	{r7, lr}
 8016998:	b082      	sub	sp, #8
 801699a:	af00      	add	r7, sp, #0
 801699c:	6078      	str	r0, [r7, #4]
 801699e:	6039      	str	r1, [r7, #0]

  if(event.status == osEventMessage)
  {
    *msg = (void *)event.value.v;
#else
  if (osMessageQueueGet(*mbox, msg, 0, 0) == osOK)
 80169a0:	687b      	ldr	r3, [r7, #4]
 80169a2:	6818      	ldr	r0, [r3, #0]
 80169a4:	2300      	movs	r3, #0
 80169a6:	2200      	movs	r2, #0
 80169a8:	6839      	ldr	r1, [r7, #0]
 80169aa:	f7ef fbb3 	bl	8006114 <osMessageQueueGet>
 80169ae:	4603      	mov	r3, r0
 80169b0:	2b00      	cmp	r3, #0
 80169b2:	d101      	bne.n	80169b8 <sys_arch_mbox_tryfetch+0x22>
  {
#endif
    return ERR_OK;
 80169b4:	2300      	movs	r3, #0
 80169b6:	e001      	b.n	80169bc <sys_arch_mbox_tryfetch+0x26>
  }
  else
  {
    return SYS_MBOX_EMPTY;
 80169b8:	f04f 33ff 	mov.w	r3, #4294967295
  }
}
 80169bc:	4618      	mov	r0, r3
 80169be:	3708      	adds	r7, #8
 80169c0:	46bd      	mov	sp, r7
 80169c2:	bd80      	pop	{r7, pc}

080169c4 <sys_mbox_valid>:
/*----------------------------------------------------------------------------------*/
int sys_mbox_valid(sys_mbox_t *mbox)
{
 80169c4:	b480      	push	{r7}
 80169c6:	b083      	sub	sp, #12
 80169c8:	af00      	add	r7, sp, #0
 80169ca:	6078      	str	r0, [r7, #4]
  if (*mbox == SYS_MBOX_NULL)
 80169cc:	687b      	ldr	r3, [r7, #4]
 80169ce:	681b      	ldr	r3, [r3, #0]
 80169d0:	2b00      	cmp	r3, #0
 80169d2:	d101      	bne.n	80169d8 <sys_mbox_valid+0x14>
    return 0;
 80169d4:	2300      	movs	r3, #0
 80169d6:	e000      	b.n	80169da <sys_mbox_valid+0x16>
  else
    return 1;
 80169d8:	2301      	movs	r3, #1
}
 80169da:	4618      	mov	r0, r3
 80169dc:	370c      	adds	r7, #12
 80169de:	46bd      	mov	sp, r7
 80169e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169e4:	4770      	bx	lr

080169e6 <sys_mbox_set_invalid>:
/*-----------------------------------------------------------------------------------*/
void sys_mbox_set_invalid(sys_mbox_t *mbox)
{
 80169e6:	b480      	push	{r7}
 80169e8:	b083      	sub	sp, #12
 80169ea:	af00      	add	r7, sp, #0
 80169ec:	6078      	str	r0, [r7, #4]
  *mbox = SYS_MBOX_NULL;
 80169ee:	687b      	ldr	r3, [r7, #4]
 80169f0:	2200      	movs	r2, #0
 80169f2:	601a      	str	r2, [r3, #0]
}
 80169f4:	bf00      	nop
 80169f6:	370c      	adds	r7, #12
 80169f8:	46bd      	mov	sp, r7
 80169fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80169fe:	4770      	bx	lr

08016a00 <sys_sem_new>:

/*-----------------------------------------------------------------------------------*/
//  Creates a new semaphore. The "count" argument specifies
//  the initial state of the semaphore.
err_t sys_sem_new(sys_sem_t *sem, u8_t count)
{
 8016a00:	b580      	push	{r7, lr}
 8016a02:	b082      	sub	sp, #8
 8016a04:	af00      	add	r7, sp, #0
 8016a06:	6078      	str	r0, [r7, #4]
 8016a08:	460b      	mov	r3, r1
 8016a0a:	70fb      	strb	r3, [r7, #3]
#if (osCMSIS < 0x20000U)
  osSemaphoreDef(SEM);
  *sem = osSemaphoreCreate (osSemaphore(SEM), 1);
#else
  *sem = osSemaphoreNew(UINT16_MAX, count, NULL);
 8016a0c:	78fb      	ldrb	r3, [r7, #3]
 8016a0e:	2200      	movs	r2, #0
 8016a10:	4619      	mov	r1, r3
 8016a12:	f64f 70ff 	movw	r0, #65535	; 0xffff
 8016a16:	f7ef f966 	bl	8005ce6 <osSemaphoreNew>
 8016a1a:	4602      	mov	r2, r0
 8016a1c:	687b      	ldr	r3, [r7, #4]
 8016a1e:	601a      	str	r2, [r3, #0]
#endif

  if(*sem == NULL)
 8016a20:	687b      	ldr	r3, [r7, #4]
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	2b00      	cmp	r3, #0
 8016a26:	d102      	bne.n	8016a2e <sys_sem_new+0x2e>
  {
#if SYS_STATS
    ++lwip_stats.sys.sem.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016a28:	f04f 33ff 	mov.w	r3, #4294967295
 8016a2c:	e009      	b.n	8016a42 <sys_sem_new+0x42>
  }

  if(count == 0)	// Means it can't be taken
 8016a2e:	78fb      	ldrb	r3, [r7, #3]
 8016a30:	2b00      	cmp	r3, #0
 8016a32:	d105      	bne.n	8016a40 <sys_sem_new+0x40>
  {
#if (osCMSIS < 0x20000U)
    osSemaphoreWait(*sem, 0);
#else
    osSemaphoreAcquire(*sem, 0);
 8016a34:	687b      	ldr	r3, [r7, #4]
 8016a36:	681b      	ldr	r3, [r3, #0]
 8016a38:	2100      	movs	r1, #0
 8016a3a:	4618      	mov	r0, r3
 8016a3c:	f7ef f9dc 	bl	8005df8 <osSemaphoreAcquire>
  if (lwip_stats.sys.sem.max < lwip_stats.sys.sem.used) {
    lwip_stats.sys.sem.max = lwip_stats.sys.sem.used;
  }
#endif /* SYS_STATS */

  return ERR_OK;
 8016a40:	2300      	movs	r3, #0
}
 8016a42:	4618      	mov	r0, r3
 8016a44:	3708      	adds	r7, #8
 8016a46:	46bd      	mov	sp, r7
 8016a48:	bd80      	pop	{r7, pc}

08016a4a <sys_arch_sem_wait>:

  Notice that lwIP implements a function with a similar name,
  sys_sem_wait(), that uses the sys_arch_sem_wait() function.
*/
u32_t sys_arch_sem_wait(sys_sem_t *sem, u32_t timeout)
{
 8016a4a:	b580      	push	{r7, lr}
 8016a4c:	b084      	sub	sp, #16
 8016a4e:	af00      	add	r7, sp, #0
 8016a50:	6078      	str	r0, [r7, #4]
 8016a52:	6039      	str	r1, [r7, #0]
#if (osCMSIS < 0x20000U)
  uint32_t starttime = osKernelSysTick();
#else
  uint32_t starttime = osKernelGetTickCount();
 8016a54:	f7ee ff76 	bl	8005944 <osKernelGetTickCount>
 8016a58:	60f8      	str	r0, [r7, #12]
#endif
  if(timeout != 0)
 8016a5a:	683b      	ldr	r3, [r7, #0]
 8016a5c:	2b00      	cmp	r3, #0
 8016a5e:	d011      	beq.n	8016a84 <sys_arch_sem_wait+0x3a>
#if (osCMSIS < 0x20000U)
    if(osSemaphoreWait (*sem, timeout) == osOK)
    {
      return (osKernelSysTick() - starttime);
#else
    if(osSemaphoreAcquire(*sem, timeout) == osOK)
 8016a60:	687b      	ldr	r3, [r7, #4]
 8016a62:	681b      	ldr	r3, [r3, #0]
 8016a64:	6839      	ldr	r1, [r7, #0]
 8016a66:	4618      	mov	r0, r3
 8016a68:	f7ef f9c6 	bl	8005df8 <osSemaphoreAcquire>
 8016a6c:	4603      	mov	r3, r0
 8016a6e:	2b00      	cmp	r3, #0
 8016a70:	d105      	bne.n	8016a7e <sys_arch_sem_wait+0x34>
    {
        return (osKernelGetTickCount() - starttime);
 8016a72:	f7ee ff67 	bl	8005944 <osKernelGetTickCount>
 8016a76:	4602      	mov	r2, r0
 8016a78:	68fb      	ldr	r3, [r7, #12]
 8016a7a:	1ad3      	subs	r3, r2, r3
 8016a7c:	e012      	b.n	8016aa4 <sys_arch_sem_wait+0x5a>
#endif
    }
    else
    {
      return SYS_ARCH_TIMEOUT;
 8016a7e:	f04f 33ff 	mov.w	r3, #4294967295
 8016a82:	e00f      	b.n	8016aa4 <sys_arch_sem_wait+0x5a>
  {
#if (osCMSIS < 0x20000U)
    while(osSemaphoreWait (*sem, osWaitForever) != osOK);
    return (osKernelSysTick() - starttime);
#else
    while(osSemaphoreAcquire(*sem, osWaitForever) != osOK);
 8016a84:	bf00      	nop
 8016a86:	687b      	ldr	r3, [r7, #4]
 8016a88:	681b      	ldr	r3, [r3, #0]
 8016a8a:	f04f 31ff 	mov.w	r1, #4294967295
 8016a8e:	4618      	mov	r0, r3
 8016a90:	f7ef f9b2 	bl	8005df8 <osSemaphoreAcquire>
 8016a94:	4603      	mov	r3, r0
 8016a96:	2b00      	cmp	r3, #0
 8016a98:	d1f5      	bne.n	8016a86 <sys_arch_sem_wait+0x3c>
    return (osKernelGetTickCount() - starttime);
 8016a9a:	f7ee ff53 	bl	8005944 <osKernelGetTickCount>
 8016a9e:	4602      	mov	r2, r0
 8016aa0:	68fb      	ldr	r3, [r7, #12]
 8016aa2:	1ad3      	subs	r3, r2, r3
#endif
  }
}
 8016aa4:	4618      	mov	r0, r3
 8016aa6:	3710      	adds	r7, #16
 8016aa8:	46bd      	mov	sp, r7
 8016aaa:	bd80      	pop	{r7, pc}

08016aac <sys_sem_signal>:

/*-----------------------------------------------------------------------------------*/
// Signals a semaphore
void sys_sem_signal(sys_sem_t *sem)
{
 8016aac:	b580      	push	{r7, lr}
 8016aae:	b082      	sub	sp, #8
 8016ab0:	af00      	add	r7, sp, #0
 8016ab2:	6078      	str	r0, [r7, #4]
  osSemaphoreRelease(*sem);
 8016ab4:	687b      	ldr	r3, [r7, #4]
 8016ab6:	681b      	ldr	r3, [r3, #0]
 8016ab8:	4618      	mov	r0, r3
 8016aba:	f7ef f9ef 	bl	8005e9c <osSemaphoreRelease>
}
 8016abe:	bf00      	nop
 8016ac0:	3708      	adds	r7, #8
 8016ac2:	46bd      	mov	sp, r7
 8016ac4:	bd80      	pop	{r7, pc}

08016ac6 <sys_sem_free>:

/*-----------------------------------------------------------------------------------*/
// Deallocates a semaphore
void sys_sem_free(sys_sem_t *sem)
{
 8016ac6:	b580      	push	{r7, lr}
 8016ac8:	b082      	sub	sp, #8
 8016aca:	af00      	add	r7, sp, #0
 8016acc:	6078      	str	r0, [r7, #4]
#if SYS_STATS
  --lwip_stats.sys.sem.used;
#endif /* SYS_STATS */

  osSemaphoreDelete(*sem);
 8016ace:	687b      	ldr	r3, [r7, #4]
 8016ad0:	681b      	ldr	r3, [r3, #0]
 8016ad2:	4618      	mov	r0, r3
 8016ad4:	f7ef fa26 	bl	8005f24 <osSemaphoreDelete>
}
 8016ad8:	bf00      	nop
 8016ada:	3708      	adds	r7, #8
 8016adc:	46bd      	mov	sp, r7
 8016ade:	bd80      	pop	{r7, pc}

08016ae0 <sys_sem_valid>:
/*-----------------------------------------------------------------------------------*/
int sys_sem_valid(sys_sem_t *sem)
{
 8016ae0:	b480      	push	{r7}
 8016ae2:	b083      	sub	sp, #12
 8016ae4:	af00      	add	r7, sp, #0
 8016ae6:	6078      	str	r0, [r7, #4]
  if (*sem == SYS_SEM_NULL)
 8016ae8:	687b      	ldr	r3, [r7, #4]
 8016aea:	681b      	ldr	r3, [r3, #0]
 8016aec:	2b00      	cmp	r3, #0
 8016aee:	d101      	bne.n	8016af4 <sys_sem_valid+0x14>
    return 0;
 8016af0:	2300      	movs	r3, #0
 8016af2:	e000      	b.n	8016af6 <sys_sem_valid+0x16>
  else
    return 1;
 8016af4:	2301      	movs	r3, #1
}
 8016af6:	4618      	mov	r0, r3
 8016af8:	370c      	adds	r7, #12
 8016afa:	46bd      	mov	sp, r7
 8016afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b00:	4770      	bx	lr

08016b02 <sys_sem_set_invalid>:

/*-----------------------------------------------------------------------------------*/
void sys_sem_set_invalid(sys_sem_t *sem)
{
 8016b02:	b480      	push	{r7}
 8016b04:	b083      	sub	sp, #12
 8016b06:	af00      	add	r7, sp, #0
 8016b08:	6078      	str	r0, [r7, #4]
  *sem = SYS_SEM_NULL;
 8016b0a:	687b      	ldr	r3, [r7, #4]
 8016b0c:	2200      	movs	r2, #0
 8016b0e:	601a      	str	r2, [r3, #0]
}
 8016b10:	bf00      	nop
 8016b12:	370c      	adds	r7, #12
 8016b14:	46bd      	mov	sp, r7
 8016b16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8016b1a:	4770      	bx	lr

08016b1c <sys_init>:
#else
osMutexId_t lwip_sys_mutex;
#endif
// Initialize sys arch
void sys_init(void)
{
 8016b1c:	b580      	push	{r7, lr}
 8016b1e:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  lwip_sys_mutex = osMutexCreate(osMutex(lwip_sys_mutex));
#else
  lwip_sys_mutex = osMutexNew(NULL);
 8016b20:	2000      	movs	r0, #0
 8016b22:	f7ee ffd2 	bl	8005aca <osMutexNew>
 8016b26:	4603      	mov	r3, r0
 8016b28:	4a01      	ldr	r2, [pc, #4]	; (8016b30 <sys_init+0x14>)
 8016b2a:	6013      	str	r3, [r2, #0]
#endif
}
 8016b2c:	bf00      	nop
 8016b2e:	bd80      	pop	{r7, pc}
 8016b30:	2000f950 	.word	0x2000f950

08016b34 <sys_mutex_new>:
                                      /* Mutexes*/
/*-----------------------------------------------------------------------------------*/
/*-----------------------------------------------------------------------------------*/
#if LWIP_COMPAT_MUTEX == 0
/* Create a new mutex*/
err_t sys_mutex_new(sys_mutex_t *mutex) {
 8016b34:	b580      	push	{r7, lr}
 8016b36:	b082      	sub	sp, #8
 8016b38:	af00      	add	r7, sp, #0
 8016b3a:	6078      	str	r0, [r7, #4]

#if (osCMSIS < 0x20000U)
  osMutexDef(MUTEX);
  *mutex = osMutexCreate(osMutex(MUTEX));
#else
  *mutex = osMutexNew(NULL);
 8016b3c:	2000      	movs	r0, #0
 8016b3e:	f7ee ffc4 	bl	8005aca <osMutexNew>
 8016b42:	4602      	mov	r2, r0
 8016b44:	687b      	ldr	r3, [r7, #4]
 8016b46:	601a      	str	r2, [r3, #0]
#endif

  if(*mutex == NULL)
 8016b48:	687b      	ldr	r3, [r7, #4]
 8016b4a:	681b      	ldr	r3, [r3, #0]
 8016b4c:	2b00      	cmp	r3, #0
 8016b4e:	d102      	bne.n	8016b56 <sys_mutex_new+0x22>
  {
#if SYS_STATS
    ++lwip_stats.sys.mutex.err;
#endif /* SYS_STATS */
    return ERR_MEM;
 8016b50:	f04f 33ff 	mov.w	r3, #4294967295
 8016b54:	e000      	b.n	8016b58 <sys_mutex_new+0x24>
  ++lwip_stats.sys.mutex.used;
  if (lwip_stats.sys.mutex.max < lwip_stats.sys.mutex.used) {
    lwip_stats.sys.mutex.max = lwip_stats.sys.mutex.used;
  }
#endif /* SYS_STATS */
  return ERR_OK;
 8016b56:	2300      	movs	r3, #0
}
 8016b58:	4618      	mov	r0, r3
 8016b5a:	3708      	adds	r7, #8
 8016b5c:	46bd      	mov	sp, r7
 8016b5e:	bd80      	pop	{r7, pc}

08016b60 <sys_mutex_lock>:
  osMutexDelete(*mutex);
}
/*-----------------------------------------------------------------------------------*/
/* Lock a mutex*/
void sys_mutex_lock(sys_mutex_t *mutex)
{
 8016b60:	b580      	push	{r7, lr}
 8016b62:	b082      	sub	sp, #8
 8016b64:	af00      	add	r7, sp, #0
 8016b66:	6078      	str	r0, [r7, #4]
#if (osCMSIS < 0x20000U)
  osMutexWait(*mutex, osWaitForever);
#else
  osMutexAcquire(*mutex, osWaitForever);
 8016b68:	687b      	ldr	r3, [r7, #4]
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	f04f 31ff 	mov.w	r1, #4294967295
 8016b70:	4618      	mov	r0, r3
 8016b72:	f7ef f830 	bl	8005bd6 <osMutexAcquire>
#endif
}
 8016b76:	bf00      	nop
 8016b78:	3708      	adds	r7, #8
 8016b7a:	46bd      	mov	sp, r7
 8016b7c:	bd80      	pop	{r7, pc}

08016b7e <sys_mutex_unlock>:

/*-----------------------------------------------------------------------------------*/
/* Unlock a mutex*/
void sys_mutex_unlock(sys_mutex_t *mutex)
{
 8016b7e:	b580      	push	{r7, lr}
 8016b80:	b082      	sub	sp, #8
 8016b82:	af00      	add	r7, sp, #0
 8016b84:	6078      	str	r0, [r7, #4]
  osMutexRelease(*mutex);
 8016b86:	687b      	ldr	r3, [r7, #4]
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	4618      	mov	r0, r3
 8016b8c:	f7ef f86e 	bl	8005c6c <osMutexRelease>
}
 8016b90:	bf00      	nop
 8016b92:	3708      	adds	r7, #8
 8016b94:	46bd      	mov	sp, r7
 8016b96:	bd80      	pop	{r7, pc}

08016b98 <sys_thread_new>:
  function "thread()". The "arg" argument will be passed as an argument to the
  thread() function. The id of the new thread is returned. Both the id and
  the priority are system dependent.
*/
sys_thread_t sys_thread_new(const char *name, lwip_thread_fn thread , void *arg, int stacksize, int prio)
{
 8016b98:	b580      	push	{r7, lr}
 8016b9a:	b08e      	sub	sp, #56	; 0x38
 8016b9c:	af00      	add	r7, sp, #0
 8016b9e:	60f8      	str	r0, [r7, #12]
 8016ba0:	60b9      	str	r1, [r7, #8]
 8016ba2:	607a      	str	r2, [r7, #4]
 8016ba4:	603b      	str	r3, [r7, #0]
#if (osCMSIS < 0x20000U)
  const osThreadDef_t os_thread_def = { (char *)name, (os_pthread)thread, (osPriority)prio, 0, stacksize};
  return osThreadCreate(&os_thread_def, arg);
#else
  const osThreadAttr_t attributes = {
 8016ba6:	f107 0314 	add.w	r3, r7, #20
 8016baa:	2224      	movs	r2, #36	; 0x24
 8016bac:	2100      	movs	r1, #0
 8016bae:	4618      	mov	r0, r3
 8016bb0:	f000 f9bd 	bl	8016f2e <memset>
 8016bb4:	68fb      	ldr	r3, [r7, #12]
 8016bb6:	617b      	str	r3, [r7, #20]
 8016bb8:	683b      	ldr	r3, [r7, #0]
 8016bba:	62bb      	str	r3, [r7, #40]	; 0x28
 8016bbc:	6c3b      	ldr	r3, [r7, #64]	; 0x40
 8016bbe:	62fb      	str	r3, [r7, #44]	; 0x2c
                        .name = name,
                        .stack_size = stacksize,
                        .priority = (osPriority_t)prio,
                      };
  return osThreadNew(thread, arg, &attributes);
 8016bc0:	f107 0314 	add.w	r3, r7, #20
 8016bc4:	461a      	mov	r2, r3
 8016bc6:	6879      	ldr	r1, [r7, #4]
 8016bc8:	68b8      	ldr	r0, [r7, #8]
 8016bca:	f7ee fed0 	bl	800596e <osThreadNew>
 8016bce:	4603      	mov	r3, r0
#endif
}
 8016bd0:	4618      	mov	r0, r3
 8016bd2:	3738      	adds	r7, #56	; 0x38
 8016bd4:	46bd      	mov	sp, r7
 8016bd6:	bd80      	pop	{r7, pc}

08016bd8 <sys_arch_protect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
sys_prot_t sys_arch_protect(void)
{
 8016bd8:	b580      	push	{r7, lr}
 8016bda:	af00      	add	r7, sp, #0
#if (osCMSIS < 0x20000U)
  osMutexWait(lwip_sys_mutex, osWaitForever);
#else
  osMutexAcquire(lwip_sys_mutex, osWaitForever);
 8016bdc:	4b04      	ldr	r3, [pc, #16]	; (8016bf0 <sys_arch_protect+0x18>)
 8016bde:	681b      	ldr	r3, [r3, #0]
 8016be0:	f04f 31ff 	mov.w	r1, #4294967295
 8016be4:	4618      	mov	r0, r3
 8016be6:	f7ee fff6 	bl	8005bd6 <osMutexAcquire>
#endif
  return (sys_prot_t)1;
 8016bea:	2301      	movs	r3, #1
}
 8016bec:	4618      	mov	r0, r3
 8016bee:	bd80      	pop	{r7, pc}
 8016bf0:	2000f950 	.word	0x2000f950

08016bf4 <sys_arch_unprotect>:

  Note: This function is based on FreeRTOS API, because no equivalent CMSIS-RTOS
        API is available
*/
void sys_arch_unprotect(sys_prot_t pval)
{
 8016bf4:	b580      	push	{r7, lr}
 8016bf6:	b082      	sub	sp, #8
 8016bf8:	af00      	add	r7, sp, #0
 8016bfa:	6078      	str	r0, [r7, #4]
  ( void ) pval;
  osMutexRelease(lwip_sys_mutex);
 8016bfc:	4b04      	ldr	r3, [pc, #16]	; (8016c10 <sys_arch_unprotect+0x1c>)
 8016bfe:	681b      	ldr	r3, [r3, #0]
 8016c00:	4618      	mov	r0, r3
 8016c02:	f7ef f833 	bl	8005c6c <osMutexRelease>
}
 8016c06:	bf00      	nop
 8016c08:	3708      	adds	r7, #8
 8016c0a:	46bd      	mov	sp, r7
 8016c0c:	bd80      	pop	{r7, pc}
 8016c0e:	bf00      	nop
 8016c10:	2000f950 	.word	0x2000f950

08016c14 <rand>:
 8016c14:	4b16      	ldr	r3, [pc, #88]	; (8016c70 <rand+0x5c>)
 8016c16:	b510      	push	{r4, lr}
 8016c18:	681c      	ldr	r4, [r3, #0]
 8016c1a:	6b23      	ldr	r3, [r4, #48]	; 0x30
 8016c1c:	b9b3      	cbnz	r3, 8016c4c <rand+0x38>
 8016c1e:	2018      	movs	r0, #24
 8016c20:	f000 fada 	bl	80171d8 <malloc>
 8016c24:	4602      	mov	r2, r0
 8016c26:	6320      	str	r0, [r4, #48]	; 0x30
 8016c28:	b920      	cbnz	r0, 8016c34 <rand+0x20>
 8016c2a:	4b12      	ldr	r3, [pc, #72]	; (8016c74 <rand+0x60>)
 8016c2c:	4812      	ldr	r0, [pc, #72]	; (8016c78 <rand+0x64>)
 8016c2e:	2152      	movs	r1, #82	; 0x52
 8016c30:	f000 fa68 	bl	8017104 <__assert_func>
 8016c34:	4911      	ldr	r1, [pc, #68]	; (8016c7c <rand+0x68>)
 8016c36:	4b12      	ldr	r3, [pc, #72]	; (8016c80 <rand+0x6c>)
 8016c38:	e9c0 1300 	strd	r1, r3, [r0]
 8016c3c:	4b11      	ldr	r3, [pc, #68]	; (8016c84 <rand+0x70>)
 8016c3e:	6083      	str	r3, [r0, #8]
 8016c40:	230b      	movs	r3, #11
 8016c42:	8183      	strh	r3, [r0, #12]
 8016c44:	2100      	movs	r1, #0
 8016c46:	2001      	movs	r0, #1
 8016c48:	e9c2 0104 	strd	r0, r1, [r2, #16]
 8016c4c:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016c4e:	480e      	ldr	r0, [pc, #56]	; (8016c88 <rand+0x74>)
 8016c50:	690b      	ldr	r3, [r1, #16]
 8016c52:	694c      	ldr	r4, [r1, #20]
 8016c54:	4a0d      	ldr	r2, [pc, #52]	; (8016c8c <rand+0x78>)
 8016c56:	4358      	muls	r0, r3
 8016c58:	fb02 0004 	mla	r0, r2, r4, r0
 8016c5c:	fba3 3202 	umull	r3, r2, r3, r2
 8016c60:	3301      	adds	r3, #1
 8016c62:	eb40 0002 	adc.w	r0, r0, r2
 8016c66:	e9c1 3004 	strd	r3, r0, [r1, #16]
 8016c6a:	f020 4000 	bic.w	r0, r0, #2147483648	; 0x80000000
 8016c6e:	bd10      	pop	{r4, pc}
 8016c70:	20000088 	.word	0x20000088
 8016c74:	0801b7f2 	.word	0x0801b7f2
 8016c78:	0801b809 	.word	0x0801b809
 8016c7c:	abcd330e 	.word	0xabcd330e
 8016c80:	e66d1234 	.word	0xe66d1234
 8016c84:	0005deec 	.word	0x0005deec
 8016c88:	5851f42d 	.word	0x5851f42d
 8016c8c:	4c957f2d 	.word	0x4c957f2d

08016c90 <std>:
 8016c90:	2300      	movs	r3, #0
 8016c92:	b510      	push	{r4, lr}
 8016c94:	4604      	mov	r4, r0
 8016c96:	e9c0 3300 	strd	r3, r3, [r0]
 8016c9a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8016c9e:	6083      	str	r3, [r0, #8]
 8016ca0:	8181      	strh	r1, [r0, #12]
 8016ca2:	6643      	str	r3, [r0, #100]	; 0x64
 8016ca4:	81c2      	strh	r2, [r0, #14]
 8016ca6:	6183      	str	r3, [r0, #24]
 8016ca8:	4619      	mov	r1, r3
 8016caa:	2208      	movs	r2, #8
 8016cac:	305c      	adds	r0, #92	; 0x5c
 8016cae:	f000 f93e 	bl	8016f2e <memset>
 8016cb2:	4b05      	ldr	r3, [pc, #20]	; (8016cc8 <std+0x38>)
 8016cb4:	6263      	str	r3, [r4, #36]	; 0x24
 8016cb6:	4b05      	ldr	r3, [pc, #20]	; (8016ccc <std+0x3c>)
 8016cb8:	62a3      	str	r3, [r4, #40]	; 0x28
 8016cba:	4b05      	ldr	r3, [pc, #20]	; (8016cd0 <std+0x40>)
 8016cbc:	62e3      	str	r3, [r4, #44]	; 0x2c
 8016cbe:	4b05      	ldr	r3, [pc, #20]	; (8016cd4 <std+0x44>)
 8016cc0:	6224      	str	r4, [r4, #32]
 8016cc2:	6323      	str	r3, [r4, #48]	; 0x30
 8016cc4:	bd10      	pop	{r4, pc}
 8016cc6:	bf00      	nop
 8016cc8:	08016e55 	.word	0x08016e55
 8016ccc:	08016e77 	.word	0x08016e77
 8016cd0:	08016eaf 	.word	0x08016eaf
 8016cd4:	08016ed3 	.word	0x08016ed3

08016cd8 <stdio_exit_handler>:
 8016cd8:	4a02      	ldr	r2, [pc, #8]	; (8016ce4 <stdio_exit_handler+0xc>)
 8016cda:	4903      	ldr	r1, [pc, #12]	; (8016ce8 <stdio_exit_handler+0x10>)
 8016cdc:	4803      	ldr	r0, [pc, #12]	; (8016cec <stdio_exit_handler+0x14>)
 8016cde:	f000 b869 	b.w	8016db4 <_fwalk_sglue>
 8016ce2:	bf00      	nop
 8016ce4:	20000030 	.word	0x20000030
 8016ce8:	08017ca5 	.word	0x08017ca5
 8016cec:	2000003c 	.word	0x2000003c

08016cf0 <cleanup_stdio>:
 8016cf0:	6841      	ldr	r1, [r0, #4]
 8016cf2:	4b0c      	ldr	r3, [pc, #48]	; (8016d24 <cleanup_stdio+0x34>)
 8016cf4:	4299      	cmp	r1, r3
 8016cf6:	b510      	push	{r4, lr}
 8016cf8:	4604      	mov	r4, r0
 8016cfa:	d001      	beq.n	8016d00 <cleanup_stdio+0x10>
 8016cfc:	f000 ffd2 	bl	8017ca4 <_fflush_r>
 8016d00:	68a1      	ldr	r1, [r4, #8]
 8016d02:	4b09      	ldr	r3, [pc, #36]	; (8016d28 <cleanup_stdio+0x38>)
 8016d04:	4299      	cmp	r1, r3
 8016d06:	d002      	beq.n	8016d0e <cleanup_stdio+0x1e>
 8016d08:	4620      	mov	r0, r4
 8016d0a:	f000 ffcb 	bl	8017ca4 <_fflush_r>
 8016d0e:	68e1      	ldr	r1, [r4, #12]
 8016d10:	4b06      	ldr	r3, [pc, #24]	; (8016d2c <cleanup_stdio+0x3c>)
 8016d12:	4299      	cmp	r1, r3
 8016d14:	d004      	beq.n	8016d20 <cleanup_stdio+0x30>
 8016d16:	4620      	mov	r0, r4
 8016d18:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d1c:	f000 bfc2 	b.w	8017ca4 <_fflush_r>
 8016d20:	bd10      	pop	{r4, pc}
 8016d22:	bf00      	nop
 8016d24:	2000f954 	.word	0x2000f954
 8016d28:	2000f9bc 	.word	0x2000f9bc
 8016d2c:	2000fa24 	.word	0x2000fa24

08016d30 <global_stdio_init.part.0>:
 8016d30:	b510      	push	{r4, lr}
 8016d32:	4b0b      	ldr	r3, [pc, #44]	; (8016d60 <global_stdio_init.part.0+0x30>)
 8016d34:	4c0b      	ldr	r4, [pc, #44]	; (8016d64 <global_stdio_init.part.0+0x34>)
 8016d36:	4a0c      	ldr	r2, [pc, #48]	; (8016d68 <global_stdio_init.part.0+0x38>)
 8016d38:	601a      	str	r2, [r3, #0]
 8016d3a:	4620      	mov	r0, r4
 8016d3c:	2200      	movs	r2, #0
 8016d3e:	2104      	movs	r1, #4
 8016d40:	f7ff ffa6 	bl	8016c90 <std>
 8016d44:	f104 0068 	add.w	r0, r4, #104	; 0x68
 8016d48:	2201      	movs	r2, #1
 8016d4a:	2109      	movs	r1, #9
 8016d4c:	f7ff ffa0 	bl	8016c90 <std>
 8016d50:	f104 00d0 	add.w	r0, r4, #208	; 0xd0
 8016d54:	2202      	movs	r2, #2
 8016d56:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d5a:	2112      	movs	r1, #18
 8016d5c:	f7ff bf98 	b.w	8016c90 <std>
 8016d60:	2000fa8c 	.word	0x2000fa8c
 8016d64:	2000f954 	.word	0x2000f954
 8016d68:	08016cd9 	.word	0x08016cd9

08016d6c <__sfp_lock_acquire>:
 8016d6c:	4801      	ldr	r0, [pc, #4]	; (8016d74 <__sfp_lock_acquire+0x8>)
 8016d6e:	f000 b9b9 	b.w	80170e4 <__retarget_lock_acquire_recursive>
 8016d72:	bf00      	nop
 8016d74:	2000fa95 	.word	0x2000fa95

08016d78 <__sfp_lock_release>:
 8016d78:	4801      	ldr	r0, [pc, #4]	; (8016d80 <__sfp_lock_release+0x8>)
 8016d7a:	f000 b9b4 	b.w	80170e6 <__retarget_lock_release_recursive>
 8016d7e:	bf00      	nop
 8016d80:	2000fa95 	.word	0x2000fa95

08016d84 <__sinit>:
 8016d84:	b510      	push	{r4, lr}
 8016d86:	4604      	mov	r4, r0
 8016d88:	f7ff fff0 	bl	8016d6c <__sfp_lock_acquire>
 8016d8c:	6a23      	ldr	r3, [r4, #32]
 8016d8e:	b11b      	cbz	r3, 8016d98 <__sinit+0x14>
 8016d90:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8016d94:	f7ff bff0 	b.w	8016d78 <__sfp_lock_release>
 8016d98:	4b04      	ldr	r3, [pc, #16]	; (8016dac <__sinit+0x28>)
 8016d9a:	6223      	str	r3, [r4, #32]
 8016d9c:	4b04      	ldr	r3, [pc, #16]	; (8016db0 <__sinit+0x2c>)
 8016d9e:	681b      	ldr	r3, [r3, #0]
 8016da0:	2b00      	cmp	r3, #0
 8016da2:	d1f5      	bne.n	8016d90 <__sinit+0xc>
 8016da4:	f7ff ffc4 	bl	8016d30 <global_stdio_init.part.0>
 8016da8:	e7f2      	b.n	8016d90 <__sinit+0xc>
 8016daa:	bf00      	nop
 8016dac:	08016cf1 	.word	0x08016cf1
 8016db0:	2000fa8c 	.word	0x2000fa8c

08016db4 <_fwalk_sglue>:
 8016db4:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8016db8:	4607      	mov	r7, r0
 8016dba:	4688      	mov	r8, r1
 8016dbc:	4614      	mov	r4, r2
 8016dbe:	2600      	movs	r6, #0
 8016dc0:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8016dc4:	f1b9 0901 	subs.w	r9, r9, #1
 8016dc8:	d505      	bpl.n	8016dd6 <_fwalk_sglue+0x22>
 8016dca:	6824      	ldr	r4, [r4, #0]
 8016dcc:	2c00      	cmp	r4, #0
 8016dce:	d1f7      	bne.n	8016dc0 <_fwalk_sglue+0xc>
 8016dd0:	4630      	mov	r0, r6
 8016dd2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8016dd6:	89ab      	ldrh	r3, [r5, #12]
 8016dd8:	2b01      	cmp	r3, #1
 8016dda:	d907      	bls.n	8016dec <_fwalk_sglue+0x38>
 8016ddc:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8016de0:	3301      	adds	r3, #1
 8016de2:	d003      	beq.n	8016dec <_fwalk_sglue+0x38>
 8016de4:	4629      	mov	r1, r5
 8016de6:	4638      	mov	r0, r7
 8016de8:	47c0      	blx	r8
 8016dea:	4306      	orrs	r6, r0
 8016dec:	3568      	adds	r5, #104	; 0x68
 8016dee:	e7e9      	b.n	8016dc4 <_fwalk_sglue+0x10>

08016df0 <iprintf>:
 8016df0:	b40f      	push	{r0, r1, r2, r3}
 8016df2:	b507      	push	{r0, r1, r2, lr}
 8016df4:	4906      	ldr	r1, [pc, #24]	; (8016e10 <iprintf+0x20>)
 8016df6:	ab04      	add	r3, sp, #16
 8016df8:	6808      	ldr	r0, [r1, #0]
 8016dfa:	f853 2b04 	ldr.w	r2, [r3], #4
 8016dfe:	6881      	ldr	r1, [r0, #8]
 8016e00:	9301      	str	r3, [sp, #4]
 8016e02:	f000 fc1f 	bl	8017644 <_vfiprintf_r>
 8016e06:	b003      	add	sp, #12
 8016e08:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e0c:	b004      	add	sp, #16
 8016e0e:	4770      	bx	lr
 8016e10:	20000088 	.word	0x20000088

08016e14 <siprintf>:
 8016e14:	b40e      	push	{r1, r2, r3}
 8016e16:	b500      	push	{lr}
 8016e18:	b09c      	sub	sp, #112	; 0x70
 8016e1a:	ab1d      	add	r3, sp, #116	; 0x74
 8016e1c:	9002      	str	r0, [sp, #8]
 8016e1e:	9006      	str	r0, [sp, #24]
 8016e20:	f06f 4100 	mvn.w	r1, #2147483648	; 0x80000000
 8016e24:	4809      	ldr	r0, [pc, #36]	; (8016e4c <siprintf+0x38>)
 8016e26:	9107      	str	r1, [sp, #28]
 8016e28:	9104      	str	r1, [sp, #16]
 8016e2a:	4909      	ldr	r1, [pc, #36]	; (8016e50 <siprintf+0x3c>)
 8016e2c:	f853 2b04 	ldr.w	r2, [r3], #4
 8016e30:	9105      	str	r1, [sp, #20]
 8016e32:	6800      	ldr	r0, [r0, #0]
 8016e34:	9301      	str	r3, [sp, #4]
 8016e36:	a902      	add	r1, sp, #8
 8016e38:	f000 fadc 	bl	80173f4 <_svfiprintf_r>
 8016e3c:	9b02      	ldr	r3, [sp, #8]
 8016e3e:	2200      	movs	r2, #0
 8016e40:	701a      	strb	r2, [r3, #0]
 8016e42:	b01c      	add	sp, #112	; 0x70
 8016e44:	f85d eb04 	ldr.w	lr, [sp], #4
 8016e48:	b003      	add	sp, #12
 8016e4a:	4770      	bx	lr
 8016e4c:	20000088 	.word	0x20000088
 8016e50:	ffff0208 	.word	0xffff0208

08016e54 <__sread>:
 8016e54:	b510      	push	{r4, lr}
 8016e56:	460c      	mov	r4, r1
 8016e58:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e5c:	f000 f8fa 	bl	8017054 <_read_r>
 8016e60:	2800      	cmp	r0, #0
 8016e62:	bfab      	itete	ge
 8016e64:	6d63      	ldrge	r3, [r4, #84]	; 0x54
 8016e66:	89a3      	ldrhlt	r3, [r4, #12]
 8016e68:	181b      	addge	r3, r3, r0
 8016e6a:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
 8016e6e:	bfac      	ite	ge
 8016e70:	6563      	strge	r3, [r4, #84]	; 0x54
 8016e72:	81a3      	strhlt	r3, [r4, #12]
 8016e74:	bd10      	pop	{r4, pc}

08016e76 <__swrite>:
 8016e76:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8016e7a:	461f      	mov	r7, r3
 8016e7c:	898b      	ldrh	r3, [r1, #12]
 8016e7e:	05db      	lsls	r3, r3, #23
 8016e80:	4605      	mov	r5, r0
 8016e82:	460c      	mov	r4, r1
 8016e84:	4616      	mov	r6, r2
 8016e86:	d505      	bpl.n	8016e94 <__swrite+0x1e>
 8016e88:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016e8c:	2302      	movs	r3, #2
 8016e8e:	2200      	movs	r2, #0
 8016e90:	f000 f8ce 	bl	8017030 <_lseek_r>
 8016e94:	89a3      	ldrh	r3, [r4, #12]
 8016e96:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8016e9a:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8016e9e:	81a3      	strh	r3, [r4, #12]
 8016ea0:	4632      	mov	r2, r6
 8016ea2:	463b      	mov	r3, r7
 8016ea4:	4628      	mov	r0, r5
 8016ea6:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8016eaa:	f000 b8e5 	b.w	8017078 <_write_r>

08016eae <__sseek>:
 8016eae:	b510      	push	{r4, lr}
 8016eb0:	460c      	mov	r4, r1
 8016eb2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016eb6:	f000 f8bb 	bl	8017030 <_lseek_r>
 8016eba:	1c43      	adds	r3, r0, #1
 8016ebc:	89a3      	ldrh	r3, [r4, #12]
 8016ebe:	bf15      	itete	ne
 8016ec0:	6560      	strne	r0, [r4, #84]	; 0x54
 8016ec2:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
 8016ec6:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
 8016eca:	81a3      	strheq	r3, [r4, #12]
 8016ecc:	bf18      	it	ne
 8016ece:	81a3      	strhne	r3, [r4, #12]
 8016ed0:	bd10      	pop	{r4, pc}

08016ed2 <__sclose>:
 8016ed2:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8016ed6:	f000 b845 	b.w	8016f64 <_close_r>

08016eda <memcmp>:
 8016eda:	b510      	push	{r4, lr}
 8016edc:	3901      	subs	r1, #1
 8016ede:	4402      	add	r2, r0
 8016ee0:	4290      	cmp	r0, r2
 8016ee2:	d101      	bne.n	8016ee8 <memcmp+0xe>
 8016ee4:	2000      	movs	r0, #0
 8016ee6:	e005      	b.n	8016ef4 <memcmp+0x1a>
 8016ee8:	7803      	ldrb	r3, [r0, #0]
 8016eea:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016eee:	42a3      	cmp	r3, r4
 8016ef0:	d001      	beq.n	8016ef6 <memcmp+0x1c>
 8016ef2:	1b18      	subs	r0, r3, r4
 8016ef4:	bd10      	pop	{r4, pc}
 8016ef6:	3001      	adds	r0, #1
 8016ef8:	e7f2      	b.n	8016ee0 <memcmp+0x6>

08016efa <memmove>:
 8016efa:	4288      	cmp	r0, r1
 8016efc:	b510      	push	{r4, lr}
 8016efe:	eb01 0402 	add.w	r4, r1, r2
 8016f02:	d902      	bls.n	8016f0a <memmove+0x10>
 8016f04:	4284      	cmp	r4, r0
 8016f06:	4623      	mov	r3, r4
 8016f08:	d807      	bhi.n	8016f1a <memmove+0x20>
 8016f0a:	1e43      	subs	r3, r0, #1
 8016f0c:	42a1      	cmp	r1, r4
 8016f0e:	d008      	beq.n	8016f22 <memmove+0x28>
 8016f10:	f811 2b01 	ldrb.w	r2, [r1], #1
 8016f14:	f803 2f01 	strb.w	r2, [r3, #1]!
 8016f18:	e7f8      	b.n	8016f0c <memmove+0x12>
 8016f1a:	4402      	add	r2, r0
 8016f1c:	4601      	mov	r1, r0
 8016f1e:	428a      	cmp	r2, r1
 8016f20:	d100      	bne.n	8016f24 <memmove+0x2a>
 8016f22:	bd10      	pop	{r4, pc}
 8016f24:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8016f28:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8016f2c:	e7f7      	b.n	8016f1e <memmove+0x24>

08016f2e <memset>:
 8016f2e:	4402      	add	r2, r0
 8016f30:	4603      	mov	r3, r0
 8016f32:	4293      	cmp	r3, r2
 8016f34:	d100      	bne.n	8016f38 <memset+0xa>
 8016f36:	4770      	bx	lr
 8016f38:	f803 1b01 	strb.w	r1, [r3], #1
 8016f3c:	e7f9      	b.n	8016f32 <memset+0x4>

08016f3e <strncpy>:
 8016f3e:	b510      	push	{r4, lr}
 8016f40:	3901      	subs	r1, #1
 8016f42:	4603      	mov	r3, r0
 8016f44:	b132      	cbz	r2, 8016f54 <strncpy+0x16>
 8016f46:	f811 4f01 	ldrb.w	r4, [r1, #1]!
 8016f4a:	f803 4b01 	strb.w	r4, [r3], #1
 8016f4e:	3a01      	subs	r2, #1
 8016f50:	2c00      	cmp	r4, #0
 8016f52:	d1f7      	bne.n	8016f44 <strncpy+0x6>
 8016f54:	441a      	add	r2, r3
 8016f56:	2100      	movs	r1, #0
 8016f58:	4293      	cmp	r3, r2
 8016f5a:	d100      	bne.n	8016f5e <strncpy+0x20>
 8016f5c:	bd10      	pop	{r4, pc}
 8016f5e:	f803 1b01 	strb.w	r1, [r3], #1
 8016f62:	e7f9      	b.n	8016f58 <strncpy+0x1a>

08016f64 <_close_r>:
 8016f64:	b538      	push	{r3, r4, r5, lr}
 8016f66:	4d06      	ldr	r5, [pc, #24]	; (8016f80 <_close_r+0x1c>)
 8016f68:	2300      	movs	r3, #0
 8016f6a:	4604      	mov	r4, r0
 8016f6c:	4608      	mov	r0, r1
 8016f6e:	602b      	str	r3, [r5, #0]
 8016f70:	f7e9 ffad 	bl	8000ece <_close>
 8016f74:	1c43      	adds	r3, r0, #1
 8016f76:	d102      	bne.n	8016f7e <_close_r+0x1a>
 8016f78:	682b      	ldr	r3, [r5, #0]
 8016f7a:	b103      	cbz	r3, 8016f7e <_close_r+0x1a>
 8016f7c:	6023      	str	r3, [r4, #0]
 8016f7e:	bd38      	pop	{r3, r4, r5, pc}
 8016f80:	2000fa90 	.word	0x2000fa90

08016f84 <_reclaim_reent>:
 8016f84:	4b29      	ldr	r3, [pc, #164]	; (801702c <_reclaim_reent+0xa8>)
 8016f86:	681b      	ldr	r3, [r3, #0]
 8016f88:	4283      	cmp	r3, r0
 8016f8a:	b570      	push	{r4, r5, r6, lr}
 8016f8c:	4604      	mov	r4, r0
 8016f8e:	d04b      	beq.n	8017028 <_reclaim_reent+0xa4>
 8016f90:	69c3      	ldr	r3, [r0, #28]
 8016f92:	b143      	cbz	r3, 8016fa6 <_reclaim_reent+0x22>
 8016f94:	68db      	ldr	r3, [r3, #12]
 8016f96:	2b00      	cmp	r3, #0
 8016f98:	d144      	bne.n	8017024 <_reclaim_reent+0xa0>
 8016f9a:	69e3      	ldr	r3, [r4, #28]
 8016f9c:	6819      	ldr	r1, [r3, #0]
 8016f9e:	b111      	cbz	r1, 8016fa6 <_reclaim_reent+0x22>
 8016fa0:	4620      	mov	r0, r4
 8016fa2:	f000 f8cd 	bl	8017140 <_free_r>
 8016fa6:	6961      	ldr	r1, [r4, #20]
 8016fa8:	b111      	cbz	r1, 8016fb0 <_reclaim_reent+0x2c>
 8016faa:	4620      	mov	r0, r4
 8016fac:	f000 f8c8 	bl	8017140 <_free_r>
 8016fb0:	69e1      	ldr	r1, [r4, #28]
 8016fb2:	b111      	cbz	r1, 8016fba <_reclaim_reent+0x36>
 8016fb4:	4620      	mov	r0, r4
 8016fb6:	f000 f8c3 	bl	8017140 <_free_r>
 8016fba:	6b21      	ldr	r1, [r4, #48]	; 0x30
 8016fbc:	b111      	cbz	r1, 8016fc4 <_reclaim_reent+0x40>
 8016fbe:	4620      	mov	r0, r4
 8016fc0:	f000 f8be 	bl	8017140 <_free_r>
 8016fc4:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8016fc6:	b111      	cbz	r1, 8016fce <_reclaim_reent+0x4a>
 8016fc8:	4620      	mov	r0, r4
 8016fca:	f000 f8b9 	bl	8017140 <_free_r>
 8016fce:	6ba1      	ldr	r1, [r4, #56]	; 0x38
 8016fd0:	b111      	cbz	r1, 8016fd8 <_reclaim_reent+0x54>
 8016fd2:	4620      	mov	r0, r4
 8016fd4:	f000 f8b4 	bl	8017140 <_free_r>
 8016fd8:	6ca1      	ldr	r1, [r4, #72]	; 0x48
 8016fda:	b111      	cbz	r1, 8016fe2 <_reclaim_reent+0x5e>
 8016fdc:	4620      	mov	r0, r4
 8016fde:	f000 f8af 	bl	8017140 <_free_r>
 8016fe2:	6c61      	ldr	r1, [r4, #68]	; 0x44
 8016fe4:	b111      	cbz	r1, 8016fec <_reclaim_reent+0x68>
 8016fe6:	4620      	mov	r0, r4
 8016fe8:	f000 f8aa 	bl	8017140 <_free_r>
 8016fec:	6ae1      	ldr	r1, [r4, #44]	; 0x2c
 8016fee:	b111      	cbz	r1, 8016ff6 <_reclaim_reent+0x72>
 8016ff0:	4620      	mov	r0, r4
 8016ff2:	f000 f8a5 	bl	8017140 <_free_r>
 8016ff6:	6a23      	ldr	r3, [r4, #32]
 8016ff8:	b1b3      	cbz	r3, 8017028 <_reclaim_reent+0xa4>
 8016ffa:	4620      	mov	r0, r4
 8016ffc:	e8bd 4070 	ldmia.w	sp!, {r4, r5, r6, lr}
 8017000:	4718      	bx	r3
 8017002:	5949      	ldr	r1, [r1, r5]
 8017004:	b941      	cbnz	r1, 8017018 <_reclaim_reent+0x94>
 8017006:	3504      	adds	r5, #4
 8017008:	69e3      	ldr	r3, [r4, #28]
 801700a:	2d80      	cmp	r5, #128	; 0x80
 801700c:	68d9      	ldr	r1, [r3, #12]
 801700e:	d1f8      	bne.n	8017002 <_reclaim_reent+0x7e>
 8017010:	4620      	mov	r0, r4
 8017012:	f000 f895 	bl	8017140 <_free_r>
 8017016:	e7c0      	b.n	8016f9a <_reclaim_reent+0x16>
 8017018:	680e      	ldr	r6, [r1, #0]
 801701a:	4620      	mov	r0, r4
 801701c:	f000 f890 	bl	8017140 <_free_r>
 8017020:	4631      	mov	r1, r6
 8017022:	e7ef      	b.n	8017004 <_reclaim_reent+0x80>
 8017024:	2500      	movs	r5, #0
 8017026:	e7ef      	b.n	8017008 <_reclaim_reent+0x84>
 8017028:	bd70      	pop	{r4, r5, r6, pc}
 801702a:	bf00      	nop
 801702c:	20000088 	.word	0x20000088

08017030 <_lseek_r>:
 8017030:	b538      	push	{r3, r4, r5, lr}
 8017032:	4d07      	ldr	r5, [pc, #28]	; (8017050 <_lseek_r+0x20>)
 8017034:	4604      	mov	r4, r0
 8017036:	4608      	mov	r0, r1
 8017038:	4611      	mov	r1, r2
 801703a:	2200      	movs	r2, #0
 801703c:	602a      	str	r2, [r5, #0]
 801703e:	461a      	mov	r2, r3
 8017040:	f7e9 ff6c 	bl	8000f1c <_lseek>
 8017044:	1c43      	adds	r3, r0, #1
 8017046:	d102      	bne.n	801704e <_lseek_r+0x1e>
 8017048:	682b      	ldr	r3, [r5, #0]
 801704a:	b103      	cbz	r3, 801704e <_lseek_r+0x1e>
 801704c:	6023      	str	r3, [r4, #0]
 801704e:	bd38      	pop	{r3, r4, r5, pc}
 8017050:	2000fa90 	.word	0x2000fa90

08017054 <_read_r>:
 8017054:	b538      	push	{r3, r4, r5, lr}
 8017056:	4d07      	ldr	r5, [pc, #28]	; (8017074 <_read_r+0x20>)
 8017058:	4604      	mov	r4, r0
 801705a:	4608      	mov	r0, r1
 801705c:	4611      	mov	r1, r2
 801705e:	2200      	movs	r2, #0
 8017060:	602a      	str	r2, [r5, #0]
 8017062:	461a      	mov	r2, r3
 8017064:	f7e9 fefa 	bl	8000e5c <_read>
 8017068:	1c43      	adds	r3, r0, #1
 801706a:	d102      	bne.n	8017072 <_read_r+0x1e>
 801706c:	682b      	ldr	r3, [r5, #0]
 801706e:	b103      	cbz	r3, 8017072 <_read_r+0x1e>
 8017070:	6023      	str	r3, [r4, #0]
 8017072:	bd38      	pop	{r3, r4, r5, pc}
 8017074:	2000fa90 	.word	0x2000fa90

08017078 <_write_r>:
 8017078:	b538      	push	{r3, r4, r5, lr}
 801707a:	4d07      	ldr	r5, [pc, #28]	; (8017098 <_write_r+0x20>)
 801707c:	4604      	mov	r4, r0
 801707e:	4608      	mov	r0, r1
 8017080:	4611      	mov	r1, r2
 8017082:	2200      	movs	r2, #0
 8017084:	602a      	str	r2, [r5, #0]
 8017086:	461a      	mov	r2, r3
 8017088:	f7e9 ff05 	bl	8000e96 <_write>
 801708c:	1c43      	adds	r3, r0, #1
 801708e:	d102      	bne.n	8017096 <_write_r+0x1e>
 8017090:	682b      	ldr	r3, [r5, #0]
 8017092:	b103      	cbz	r3, 8017096 <_write_r+0x1e>
 8017094:	6023      	str	r3, [r4, #0]
 8017096:	bd38      	pop	{r3, r4, r5, pc}
 8017098:	2000fa90 	.word	0x2000fa90

0801709c <__libc_init_array>:
 801709c:	b570      	push	{r4, r5, r6, lr}
 801709e:	4d0d      	ldr	r5, [pc, #52]	; (80170d4 <__libc_init_array+0x38>)
 80170a0:	4c0d      	ldr	r4, [pc, #52]	; (80170d8 <__libc_init_array+0x3c>)
 80170a2:	1b64      	subs	r4, r4, r5
 80170a4:	10a4      	asrs	r4, r4, #2
 80170a6:	2600      	movs	r6, #0
 80170a8:	42a6      	cmp	r6, r4
 80170aa:	d109      	bne.n	80170c0 <__libc_init_array+0x24>
 80170ac:	4d0b      	ldr	r5, [pc, #44]	; (80170dc <__libc_init_array+0x40>)
 80170ae:	4c0c      	ldr	r4, [pc, #48]	; (80170e0 <__libc_init_array+0x44>)
 80170b0:	f000 ffde 	bl	8018070 <_init>
 80170b4:	1b64      	subs	r4, r4, r5
 80170b6:	10a4      	asrs	r4, r4, #2
 80170b8:	2600      	movs	r6, #0
 80170ba:	42a6      	cmp	r6, r4
 80170bc:	d105      	bne.n	80170ca <__libc_init_array+0x2e>
 80170be:	bd70      	pop	{r4, r5, r6, pc}
 80170c0:	f855 3b04 	ldr.w	r3, [r5], #4
 80170c4:	4798      	blx	r3
 80170c6:	3601      	adds	r6, #1
 80170c8:	e7ee      	b.n	80170a8 <__libc_init_array+0xc>
 80170ca:	f855 3b04 	ldr.w	r3, [r5], #4
 80170ce:	4798      	blx	r3
 80170d0:	3601      	adds	r6, #1
 80170d2:	e7f2      	b.n	80170ba <__libc_init_array+0x1e>
 80170d4:	0801b8d8 	.word	0x0801b8d8
 80170d8:	0801b8d8 	.word	0x0801b8d8
 80170dc:	0801b8d8 	.word	0x0801b8d8
 80170e0:	0801b8dc 	.word	0x0801b8dc

080170e4 <__retarget_lock_acquire_recursive>:
 80170e4:	4770      	bx	lr

080170e6 <__retarget_lock_release_recursive>:
 80170e6:	4770      	bx	lr

080170e8 <memcpy>:
 80170e8:	440a      	add	r2, r1
 80170ea:	4291      	cmp	r1, r2
 80170ec:	f100 33ff 	add.w	r3, r0, #4294967295
 80170f0:	d100      	bne.n	80170f4 <memcpy+0xc>
 80170f2:	4770      	bx	lr
 80170f4:	b510      	push	{r4, lr}
 80170f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80170fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80170fe:	4291      	cmp	r1, r2
 8017100:	d1f9      	bne.n	80170f6 <memcpy+0xe>
 8017102:	bd10      	pop	{r4, pc}

08017104 <__assert_func>:
 8017104:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8017106:	4614      	mov	r4, r2
 8017108:	461a      	mov	r2, r3
 801710a:	4b09      	ldr	r3, [pc, #36]	; (8017130 <__assert_func+0x2c>)
 801710c:	681b      	ldr	r3, [r3, #0]
 801710e:	4605      	mov	r5, r0
 8017110:	68d8      	ldr	r0, [r3, #12]
 8017112:	b14c      	cbz	r4, 8017128 <__assert_func+0x24>
 8017114:	4b07      	ldr	r3, [pc, #28]	; (8017134 <__assert_func+0x30>)
 8017116:	9100      	str	r1, [sp, #0]
 8017118:	e9cd 3401 	strd	r3, r4, [sp, #4]
 801711c:	4906      	ldr	r1, [pc, #24]	; (8017138 <__assert_func+0x34>)
 801711e:	462b      	mov	r3, r5
 8017120:	f000 fde8 	bl	8017cf4 <fiprintf>
 8017124:	f000 fe9e 	bl	8017e64 <abort>
 8017128:	4b04      	ldr	r3, [pc, #16]	; (801713c <__assert_func+0x38>)
 801712a:	461c      	mov	r4, r3
 801712c:	e7f3      	b.n	8017116 <__assert_func+0x12>
 801712e:	bf00      	nop
 8017130:	20000088 	.word	0x20000088
 8017134:	0801b861 	.word	0x0801b861
 8017138:	0801b86e 	.word	0x0801b86e
 801713c:	0801b89c 	.word	0x0801b89c

08017140 <_free_r>:
 8017140:	b537      	push	{r0, r1, r2, r4, r5, lr}
 8017142:	2900      	cmp	r1, #0
 8017144:	d044      	beq.n	80171d0 <_free_r+0x90>
 8017146:	f851 3c04 	ldr.w	r3, [r1, #-4]
 801714a:	9001      	str	r0, [sp, #4]
 801714c:	2b00      	cmp	r3, #0
 801714e:	f1a1 0404 	sub.w	r4, r1, #4
 8017152:	bfb8      	it	lt
 8017154:	18e4      	addlt	r4, r4, r3
 8017156:	f000 f8e7 	bl	8017328 <__malloc_lock>
 801715a:	4a1e      	ldr	r2, [pc, #120]	; (80171d4 <_free_r+0x94>)
 801715c:	9801      	ldr	r0, [sp, #4]
 801715e:	6813      	ldr	r3, [r2, #0]
 8017160:	b933      	cbnz	r3, 8017170 <_free_r+0x30>
 8017162:	6063      	str	r3, [r4, #4]
 8017164:	6014      	str	r4, [r2, #0]
 8017166:	b003      	add	sp, #12
 8017168:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 801716c:	f000 b8e2 	b.w	8017334 <__malloc_unlock>
 8017170:	42a3      	cmp	r3, r4
 8017172:	d908      	bls.n	8017186 <_free_r+0x46>
 8017174:	6825      	ldr	r5, [r4, #0]
 8017176:	1961      	adds	r1, r4, r5
 8017178:	428b      	cmp	r3, r1
 801717a:	bf01      	itttt	eq
 801717c:	6819      	ldreq	r1, [r3, #0]
 801717e:	685b      	ldreq	r3, [r3, #4]
 8017180:	1949      	addeq	r1, r1, r5
 8017182:	6021      	streq	r1, [r4, #0]
 8017184:	e7ed      	b.n	8017162 <_free_r+0x22>
 8017186:	461a      	mov	r2, r3
 8017188:	685b      	ldr	r3, [r3, #4]
 801718a:	b10b      	cbz	r3, 8017190 <_free_r+0x50>
 801718c:	42a3      	cmp	r3, r4
 801718e:	d9fa      	bls.n	8017186 <_free_r+0x46>
 8017190:	6811      	ldr	r1, [r2, #0]
 8017192:	1855      	adds	r5, r2, r1
 8017194:	42a5      	cmp	r5, r4
 8017196:	d10b      	bne.n	80171b0 <_free_r+0x70>
 8017198:	6824      	ldr	r4, [r4, #0]
 801719a:	4421      	add	r1, r4
 801719c:	1854      	adds	r4, r2, r1
 801719e:	42a3      	cmp	r3, r4
 80171a0:	6011      	str	r1, [r2, #0]
 80171a2:	d1e0      	bne.n	8017166 <_free_r+0x26>
 80171a4:	681c      	ldr	r4, [r3, #0]
 80171a6:	685b      	ldr	r3, [r3, #4]
 80171a8:	6053      	str	r3, [r2, #4]
 80171aa:	440c      	add	r4, r1
 80171ac:	6014      	str	r4, [r2, #0]
 80171ae:	e7da      	b.n	8017166 <_free_r+0x26>
 80171b0:	d902      	bls.n	80171b8 <_free_r+0x78>
 80171b2:	230c      	movs	r3, #12
 80171b4:	6003      	str	r3, [r0, #0]
 80171b6:	e7d6      	b.n	8017166 <_free_r+0x26>
 80171b8:	6825      	ldr	r5, [r4, #0]
 80171ba:	1961      	adds	r1, r4, r5
 80171bc:	428b      	cmp	r3, r1
 80171be:	bf04      	itt	eq
 80171c0:	6819      	ldreq	r1, [r3, #0]
 80171c2:	685b      	ldreq	r3, [r3, #4]
 80171c4:	6063      	str	r3, [r4, #4]
 80171c6:	bf04      	itt	eq
 80171c8:	1949      	addeq	r1, r1, r5
 80171ca:	6021      	streq	r1, [r4, #0]
 80171cc:	6054      	str	r4, [r2, #4]
 80171ce:	e7ca      	b.n	8017166 <_free_r+0x26>
 80171d0:	b003      	add	sp, #12
 80171d2:	bd30      	pop	{r4, r5, pc}
 80171d4:	2000fa98 	.word	0x2000fa98

080171d8 <malloc>:
 80171d8:	4b02      	ldr	r3, [pc, #8]	; (80171e4 <malloc+0xc>)
 80171da:	4601      	mov	r1, r0
 80171dc:	6818      	ldr	r0, [r3, #0]
 80171de:	f000 b823 	b.w	8017228 <_malloc_r>
 80171e2:	bf00      	nop
 80171e4:	20000088 	.word	0x20000088

080171e8 <sbrk_aligned>:
 80171e8:	b570      	push	{r4, r5, r6, lr}
 80171ea:	4e0e      	ldr	r6, [pc, #56]	; (8017224 <sbrk_aligned+0x3c>)
 80171ec:	460c      	mov	r4, r1
 80171ee:	6831      	ldr	r1, [r6, #0]
 80171f0:	4605      	mov	r5, r0
 80171f2:	b911      	cbnz	r1, 80171fa <sbrk_aligned+0x12>
 80171f4:	f000 fe26 	bl	8017e44 <_sbrk_r>
 80171f8:	6030      	str	r0, [r6, #0]
 80171fa:	4621      	mov	r1, r4
 80171fc:	4628      	mov	r0, r5
 80171fe:	f000 fe21 	bl	8017e44 <_sbrk_r>
 8017202:	1c43      	adds	r3, r0, #1
 8017204:	d00a      	beq.n	801721c <sbrk_aligned+0x34>
 8017206:	1cc4      	adds	r4, r0, #3
 8017208:	f024 0403 	bic.w	r4, r4, #3
 801720c:	42a0      	cmp	r0, r4
 801720e:	d007      	beq.n	8017220 <sbrk_aligned+0x38>
 8017210:	1a21      	subs	r1, r4, r0
 8017212:	4628      	mov	r0, r5
 8017214:	f000 fe16 	bl	8017e44 <_sbrk_r>
 8017218:	3001      	adds	r0, #1
 801721a:	d101      	bne.n	8017220 <sbrk_aligned+0x38>
 801721c:	f04f 34ff 	mov.w	r4, #4294967295
 8017220:	4620      	mov	r0, r4
 8017222:	bd70      	pop	{r4, r5, r6, pc}
 8017224:	2000fa9c 	.word	0x2000fa9c

08017228 <_malloc_r>:
 8017228:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 801722c:	1ccd      	adds	r5, r1, #3
 801722e:	f025 0503 	bic.w	r5, r5, #3
 8017232:	3508      	adds	r5, #8
 8017234:	2d0c      	cmp	r5, #12
 8017236:	bf38      	it	cc
 8017238:	250c      	movcc	r5, #12
 801723a:	2d00      	cmp	r5, #0
 801723c:	4607      	mov	r7, r0
 801723e:	db01      	blt.n	8017244 <_malloc_r+0x1c>
 8017240:	42a9      	cmp	r1, r5
 8017242:	d905      	bls.n	8017250 <_malloc_r+0x28>
 8017244:	230c      	movs	r3, #12
 8017246:	603b      	str	r3, [r7, #0]
 8017248:	2600      	movs	r6, #0
 801724a:	4630      	mov	r0, r6
 801724c:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8017250:	f8df 80d0 	ldr.w	r8, [pc, #208]	; 8017324 <_malloc_r+0xfc>
 8017254:	f000 f868 	bl	8017328 <__malloc_lock>
 8017258:	f8d8 3000 	ldr.w	r3, [r8]
 801725c:	461c      	mov	r4, r3
 801725e:	bb5c      	cbnz	r4, 80172b8 <_malloc_r+0x90>
 8017260:	4629      	mov	r1, r5
 8017262:	4638      	mov	r0, r7
 8017264:	f7ff ffc0 	bl	80171e8 <sbrk_aligned>
 8017268:	1c43      	adds	r3, r0, #1
 801726a:	4604      	mov	r4, r0
 801726c:	d155      	bne.n	801731a <_malloc_r+0xf2>
 801726e:	f8d8 4000 	ldr.w	r4, [r8]
 8017272:	4626      	mov	r6, r4
 8017274:	2e00      	cmp	r6, #0
 8017276:	d145      	bne.n	8017304 <_malloc_r+0xdc>
 8017278:	2c00      	cmp	r4, #0
 801727a:	d048      	beq.n	801730e <_malloc_r+0xe6>
 801727c:	6823      	ldr	r3, [r4, #0]
 801727e:	4631      	mov	r1, r6
 8017280:	4638      	mov	r0, r7
 8017282:	eb04 0903 	add.w	r9, r4, r3
 8017286:	f000 fddd 	bl	8017e44 <_sbrk_r>
 801728a:	4581      	cmp	r9, r0
 801728c:	d13f      	bne.n	801730e <_malloc_r+0xe6>
 801728e:	6821      	ldr	r1, [r4, #0]
 8017290:	1a6d      	subs	r5, r5, r1
 8017292:	4629      	mov	r1, r5
 8017294:	4638      	mov	r0, r7
 8017296:	f7ff ffa7 	bl	80171e8 <sbrk_aligned>
 801729a:	3001      	adds	r0, #1
 801729c:	d037      	beq.n	801730e <_malloc_r+0xe6>
 801729e:	6823      	ldr	r3, [r4, #0]
 80172a0:	442b      	add	r3, r5
 80172a2:	6023      	str	r3, [r4, #0]
 80172a4:	f8d8 3000 	ldr.w	r3, [r8]
 80172a8:	2b00      	cmp	r3, #0
 80172aa:	d038      	beq.n	801731e <_malloc_r+0xf6>
 80172ac:	685a      	ldr	r2, [r3, #4]
 80172ae:	42a2      	cmp	r2, r4
 80172b0:	d12b      	bne.n	801730a <_malloc_r+0xe2>
 80172b2:	2200      	movs	r2, #0
 80172b4:	605a      	str	r2, [r3, #4]
 80172b6:	e00f      	b.n	80172d8 <_malloc_r+0xb0>
 80172b8:	6822      	ldr	r2, [r4, #0]
 80172ba:	1b52      	subs	r2, r2, r5
 80172bc:	d41f      	bmi.n	80172fe <_malloc_r+0xd6>
 80172be:	2a0b      	cmp	r2, #11
 80172c0:	d917      	bls.n	80172f2 <_malloc_r+0xca>
 80172c2:	1961      	adds	r1, r4, r5
 80172c4:	42a3      	cmp	r3, r4
 80172c6:	6025      	str	r5, [r4, #0]
 80172c8:	bf18      	it	ne
 80172ca:	6059      	strne	r1, [r3, #4]
 80172cc:	6863      	ldr	r3, [r4, #4]
 80172ce:	bf08      	it	eq
 80172d0:	f8c8 1000 	streq.w	r1, [r8]
 80172d4:	5162      	str	r2, [r4, r5]
 80172d6:	604b      	str	r3, [r1, #4]
 80172d8:	4638      	mov	r0, r7
 80172da:	f104 060b 	add.w	r6, r4, #11
 80172de:	f000 f829 	bl	8017334 <__malloc_unlock>
 80172e2:	f026 0607 	bic.w	r6, r6, #7
 80172e6:	1d23      	adds	r3, r4, #4
 80172e8:	1af2      	subs	r2, r6, r3
 80172ea:	d0ae      	beq.n	801724a <_malloc_r+0x22>
 80172ec:	1b9b      	subs	r3, r3, r6
 80172ee:	50a3      	str	r3, [r4, r2]
 80172f0:	e7ab      	b.n	801724a <_malloc_r+0x22>
 80172f2:	42a3      	cmp	r3, r4
 80172f4:	6862      	ldr	r2, [r4, #4]
 80172f6:	d1dd      	bne.n	80172b4 <_malloc_r+0x8c>
 80172f8:	f8c8 2000 	str.w	r2, [r8]
 80172fc:	e7ec      	b.n	80172d8 <_malloc_r+0xb0>
 80172fe:	4623      	mov	r3, r4
 8017300:	6864      	ldr	r4, [r4, #4]
 8017302:	e7ac      	b.n	801725e <_malloc_r+0x36>
 8017304:	4634      	mov	r4, r6
 8017306:	6876      	ldr	r6, [r6, #4]
 8017308:	e7b4      	b.n	8017274 <_malloc_r+0x4c>
 801730a:	4613      	mov	r3, r2
 801730c:	e7cc      	b.n	80172a8 <_malloc_r+0x80>
 801730e:	230c      	movs	r3, #12
 8017310:	603b      	str	r3, [r7, #0]
 8017312:	4638      	mov	r0, r7
 8017314:	f000 f80e 	bl	8017334 <__malloc_unlock>
 8017318:	e797      	b.n	801724a <_malloc_r+0x22>
 801731a:	6025      	str	r5, [r4, #0]
 801731c:	e7dc      	b.n	80172d8 <_malloc_r+0xb0>
 801731e:	605b      	str	r3, [r3, #4]
 8017320:	deff      	udf	#255	; 0xff
 8017322:	bf00      	nop
 8017324:	2000fa98 	.word	0x2000fa98

08017328 <__malloc_lock>:
 8017328:	4801      	ldr	r0, [pc, #4]	; (8017330 <__malloc_lock+0x8>)
 801732a:	f7ff bedb 	b.w	80170e4 <__retarget_lock_acquire_recursive>
 801732e:	bf00      	nop
 8017330:	2000fa94 	.word	0x2000fa94

08017334 <__malloc_unlock>:
 8017334:	4801      	ldr	r0, [pc, #4]	; (801733c <__malloc_unlock+0x8>)
 8017336:	f7ff bed6 	b.w	80170e6 <__retarget_lock_release_recursive>
 801733a:	bf00      	nop
 801733c:	2000fa94 	.word	0x2000fa94

08017340 <__ssputs_r>:
 8017340:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8017344:	688e      	ldr	r6, [r1, #8]
 8017346:	461f      	mov	r7, r3
 8017348:	42be      	cmp	r6, r7
 801734a:	680b      	ldr	r3, [r1, #0]
 801734c:	4682      	mov	sl, r0
 801734e:	460c      	mov	r4, r1
 8017350:	4690      	mov	r8, r2
 8017352:	d82c      	bhi.n	80173ae <__ssputs_r+0x6e>
 8017354:	898a      	ldrh	r2, [r1, #12]
 8017356:	f412 6f90 	tst.w	r2, #1152	; 0x480
 801735a:	d026      	beq.n	80173aa <__ssputs_r+0x6a>
 801735c:	6965      	ldr	r5, [r4, #20]
 801735e:	6909      	ldr	r1, [r1, #16]
 8017360:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8017364:	eba3 0901 	sub.w	r9, r3, r1
 8017368:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 801736c:	1c7b      	adds	r3, r7, #1
 801736e:	444b      	add	r3, r9
 8017370:	106d      	asrs	r5, r5, #1
 8017372:	429d      	cmp	r5, r3
 8017374:	bf38      	it	cc
 8017376:	461d      	movcc	r5, r3
 8017378:	0553      	lsls	r3, r2, #21
 801737a:	d527      	bpl.n	80173cc <__ssputs_r+0x8c>
 801737c:	4629      	mov	r1, r5
 801737e:	f7ff ff53 	bl	8017228 <_malloc_r>
 8017382:	4606      	mov	r6, r0
 8017384:	b360      	cbz	r0, 80173e0 <__ssputs_r+0xa0>
 8017386:	6921      	ldr	r1, [r4, #16]
 8017388:	464a      	mov	r2, r9
 801738a:	f7ff fead 	bl	80170e8 <memcpy>
 801738e:	89a3      	ldrh	r3, [r4, #12]
 8017390:	f423 6390 	bic.w	r3, r3, #1152	; 0x480
 8017394:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017398:	81a3      	strh	r3, [r4, #12]
 801739a:	6126      	str	r6, [r4, #16]
 801739c:	6165      	str	r5, [r4, #20]
 801739e:	444e      	add	r6, r9
 80173a0:	eba5 0509 	sub.w	r5, r5, r9
 80173a4:	6026      	str	r6, [r4, #0]
 80173a6:	60a5      	str	r5, [r4, #8]
 80173a8:	463e      	mov	r6, r7
 80173aa:	42be      	cmp	r6, r7
 80173ac:	d900      	bls.n	80173b0 <__ssputs_r+0x70>
 80173ae:	463e      	mov	r6, r7
 80173b0:	6820      	ldr	r0, [r4, #0]
 80173b2:	4632      	mov	r2, r6
 80173b4:	4641      	mov	r1, r8
 80173b6:	f7ff fda0 	bl	8016efa <memmove>
 80173ba:	68a3      	ldr	r3, [r4, #8]
 80173bc:	1b9b      	subs	r3, r3, r6
 80173be:	60a3      	str	r3, [r4, #8]
 80173c0:	6823      	ldr	r3, [r4, #0]
 80173c2:	4433      	add	r3, r6
 80173c4:	6023      	str	r3, [r4, #0]
 80173c6:	2000      	movs	r0, #0
 80173c8:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80173cc:	462a      	mov	r2, r5
 80173ce:	f000 fd50 	bl	8017e72 <_realloc_r>
 80173d2:	4606      	mov	r6, r0
 80173d4:	2800      	cmp	r0, #0
 80173d6:	d1e0      	bne.n	801739a <__ssputs_r+0x5a>
 80173d8:	6921      	ldr	r1, [r4, #16]
 80173da:	4650      	mov	r0, sl
 80173dc:	f7ff feb0 	bl	8017140 <_free_r>
 80173e0:	230c      	movs	r3, #12
 80173e2:	f8ca 3000 	str.w	r3, [sl]
 80173e6:	89a3      	ldrh	r3, [r4, #12]
 80173e8:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 80173ec:	81a3      	strh	r3, [r4, #12]
 80173ee:	f04f 30ff 	mov.w	r0, #4294967295
 80173f2:	e7e9      	b.n	80173c8 <__ssputs_r+0x88>

080173f4 <_svfiprintf_r>:
 80173f4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80173f8:	4698      	mov	r8, r3
 80173fa:	898b      	ldrh	r3, [r1, #12]
 80173fc:	061b      	lsls	r3, r3, #24
 80173fe:	b09d      	sub	sp, #116	; 0x74
 8017400:	4607      	mov	r7, r0
 8017402:	460d      	mov	r5, r1
 8017404:	4614      	mov	r4, r2
 8017406:	d50e      	bpl.n	8017426 <_svfiprintf_r+0x32>
 8017408:	690b      	ldr	r3, [r1, #16]
 801740a:	b963      	cbnz	r3, 8017426 <_svfiprintf_r+0x32>
 801740c:	2140      	movs	r1, #64	; 0x40
 801740e:	f7ff ff0b 	bl	8017228 <_malloc_r>
 8017412:	6028      	str	r0, [r5, #0]
 8017414:	6128      	str	r0, [r5, #16]
 8017416:	b920      	cbnz	r0, 8017422 <_svfiprintf_r+0x2e>
 8017418:	230c      	movs	r3, #12
 801741a:	603b      	str	r3, [r7, #0]
 801741c:	f04f 30ff 	mov.w	r0, #4294967295
 8017420:	e0d0      	b.n	80175c4 <_svfiprintf_r+0x1d0>
 8017422:	2340      	movs	r3, #64	; 0x40
 8017424:	616b      	str	r3, [r5, #20]
 8017426:	2300      	movs	r3, #0
 8017428:	9309      	str	r3, [sp, #36]	; 0x24
 801742a:	2320      	movs	r3, #32
 801742c:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 8017430:	f8cd 800c 	str.w	r8, [sp, #12]
 8017434:	2330      	movs	r3, #48	; 0x30
 8017436:	f8df 81a4 	ldr.w	r8, [pc, #420]	; 80175dc <_svfiprintf_r+0x1e8>
 801743a:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 801743e:	f04f 0901 	mov.w	r9, #1
 8017442:	4623      	mov	r3, r4
 8017444:	469a      	mov	sl, r3
 8017446:	f813 2b01 	ldrb.w	r2, [r3], #1
 801744a:	b10a      	cbz	r2, 8017450 <_svfiprintf_r+0x5c>
 801744c:	2a25      	cmp	r2, #37	; 0x25
 801744e:	d1f9      	bne.n	8017444 <_svfiprintf_r+0x50>
 8017450:	ebba 0b04 	subs.w	fp, sl, r4
 8017454:	d00b      	beq.n	801746e <_svfiprintf_r+0x7a>
 8017456:	465b      	mov	r3, fp
 8017458:	4622      	mov	r2, r4
 801745a:	4629      	mov	r1, r5
 801745c:	4638      	mov	r0, r7
 801745e:	f7ff ff6f 	bl	8017340 <__ssputs_r>
 8017462:	3001      	adds	r0, #1
 8017464:	f000 80a9 	beq.w	80175ba <_svfiprintf_r+0x1c6>
 8017468:	9a09      	ldr	r2, [sp, #36]	; 0x24
 801746a:	445a      	add	r2, fp
 801746c:	9209      	str	r2, [sp, #36]	; 0x24
 801746e:	f89a 3000 	ldrb.w	r3, [sl]
 8017472:	2b00      	cmp	r3, #0
 8017474:	f000 80a1 	beq.w	80175ba <_svfiprintf_r+0x1c6>
 8017478:	2300      	movs	r3, #0
 801747a:	f04f 32ff 	mov.w	r2, #4294967295
 801747e:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8017482:	f10a 0a01 	add.w	sl, sl, #1
 8017486:	9304      	str	r3, [sp, #16]
 8017488:	9307      	str	r3, [sp, #28]
 801748a:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 801748e:	931a      	str	r3, [sp, #104]	; 0x68
 8017490:	4654      	mov	r4, sl
 8017492:	2205      	movs	r2, #5
 8017494:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017498:	4850      	ldr	r0, [pc, #320]	; (80175dc <_svfiprintf_r+0x1e8>)
 801749a:	f7e8 fec1 	bl	8000220 <memchr>
 801749e:	9a04      	ldr	r2, [sp, #16]
 80174a0:	b9d8      	cbnz	r0, 80174da <_svfiprintf_r+0xe6>
 80174a2:	06d0      	lsls	r0, r2, #27
 80174a4:	bf44      	itt	mi
 80174a6:	2320      	movmi	r3, #32
 80174a8:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174ac:	0711      	lsls	r1, r2, #28
 80174ae:	bf44      	itt	mi
 80174b0:	232b      	movmi	r3, #43	; 0x2b
 80174b2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 80174b6:	f89a 3000 	ldrb.w	r3, [sl]
 80174ba:	2b2a      	cmp	r3, #42	; 0x2a
 80174bc:	d015      	beq.n	80174ea <_svfiprintf_r+0xf6>
 80174be:	9a07      	ldr	r2, [sp, #28]
 80174c0:	4654      	mov	r4, sl
 80174c2:	2000      	movs	r0, #0
 80174c4:	f04f 0c0a 	mov.w	ip, #10
 80174c8:	4621      	mov	r1, r4
 80174ca:	f811 3b01 	ldrb.w	r3, [r1], #1
 80174ce:	3b30      	subs	r3, #48	; 0x30
 80174d0:	2b09      	cmp	r3, #9
 80174d2:	d94d      	bls.n	8017570 <_svfiprintf_r+0x17c>
 80174d4:	b1b0      	cbz	r0, 8017504 <_svfiprintf_r+0x110>
 80174d6:	9207      	str	r2, [sp, #28]
 80174d8:	e014      	b.n	8017504 <_svfiprintf_r+0x110>
 80174da:	eba0 0308 	sub.w	r3, r0, r8
 80174de:	fa09 f303 	lsl.w	r3, r9, r3
 80174e2:	4313      	orrs	r3, r2
 80174e4:	9304      	str	r3, [sp, #16]
 80174e6:	46a2      	mov	sl, r4
 80174e8:	e7d2      	b.n	8017490 <_svfiprintf_r+0x9c>
 80174ea:	9b03      	ldr	r3, [sp, #12]
 80174ec:	1d19      	adds	r1, r3, #4
 80174ee:	681b      	ldr	r3, [r3, #0]
 80174f0:	9103      	str	r1, [sp, #12]
 80174f2:	2b00      	cmp	r3, #0
 80174f4:	bfbb      	ittet	lt
 80174f6:	425b      	neglt	r3, r3
 80174f8:	f042 0202 	orrlt.w	r2, r2, #2
 80174fc:	9307      	strge	r3, [sp, #28]
 80174fe:	9307      	strlt	r3, [sp, #28]
 8017500:	bfb8      	it	lt
 8017502:	9204      	strlt	r2, [sp, #16]
 8017504:	7823      	ldrb	r3, [r4, #0]
 8017506:	2b2e      	cmp	r3, #46	; 0x2e
 8017508:	d10c      	bne.n	8017524 <_svfiprintf_r+0x130>
 801750a:	7863      	ldrb	r3, [r4, #1]
 801750c:	2b2a      	cmp	r3, #42	; 0x2a
 801750e:	d134      	bne.n	801757a <_svfiprintf_r+0x186>
 8017510:	9b03      	ldr	r3, [sp, #12]
 8017512:	1d1a      	adds	r2, r3, #4
 8017514:	681b      	ldr	r3, [r3, #0]
 8017516:	9203      	str	r2, [sp, #12]
 8017518:	2b00      	cmp	r3, #0
 801751a:	bfb8      	it	lt
 801751c:	f04f 33ff 	movlt.w	r3, #4294967295
 8017520:	3402      	adds	r4, #2
 8017522:	9305      	str	r3, [sp, #20]
 8017524:	f8df a0c4 	ldr.w	sl, [pc, #196]	; 80175ec <_svfiprintf_r+0x1f8>
 8017528:	7821      	ldrb	r1, [r4, #0]
 801752a:	2203      	movs	r2, #3
 801752c:	4650      	mov	r0, sl
 801752e:	f7e8 fe77 	bl	8000220 <memchr>
 8017532:	b138      	cbz	r0, 8017544 <_svfiprintf_r+0x150>
 8017534:	9b04      	ldr	r3, [sp, #16]
 8017536:	eba0 000a 	sub.w	r0, r0, sl
 801753a:	2240      	movs	r2, #64	; 0x40
 801753c:	4082      	lsls	r2, r0
 801753e:	4313      	orrs	r3, r2
 8017540:	3401      	adds	r4, #1
 8017542:	9304      	str	r3, [sp, #16]
 8017544:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017548:	4825      	ldr	r0, [pc, #148]	; (80175e0 <_svfiprintf_r+0x1ec>)
 801754a:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 801754e:	2206      	movs	r2, #6
 8017550:	f7e8 fe66 	bl	8000220 <memchr>
 8017554:	2800      	cmp	r0, #0
 8017556:	d038      	beq.n	80175ca <_svfiprintf_r+0x1d6>
 8017558:	4b22      	ldr	r3, [pc, #136]	; (80175e4 <_svfiprintf_r+0x1f0>)
 801755a:	bb1b      	cbnz	r3, 80175a4 <_svfiprintf_r+0x1b0>
 801755c:	9b03      	ldr	r3, [sp, #12]
 801755e:	3307      	adds	r3, #7
 8017560:	f023 0307 	bic.w	r3, r3, #7
 8017564:	3308      	adds	r3, #8
 8017566:	9303      	str	r3, [sp, #12]
 8017568:	9b09      	ldr	r3, [sp, #36]	; 0x24
 801756a:	4433      	add	r3, r6
 801756c:	9309      	str	r3, [sp, #36]	; 0x24
 801756e:	e768      	b.n	8017442 <_svfiprintf_r+0x4e>
 8017570:	fb0c 3202 	mla	r2, ip, r2, r3
 8017574:	460c      	mov	r4, r1
 8017576:	2001      	movs	r0, #1
 8017578:	e7a6      	b.n	80174c8 <_svfiprintf_r+0xd4>
 801757a:	2300      	movs	r3, #0
 801757c:	3401      	adds	r4, #1
 801757e:	9305      	str	r3, [sp, #20]
 8017580:	4619      	mov	r1, r3
 8017582:	f04f 0c0a 	mov.w	ip, #10
 8017586:	4620      	mov	r0, r4
 8017588:	f810 2b01 	ldrb.w	r2, [r0], #1
 801758c:	3a30      	subs	r2, #48	; 0x30
 801758e:	2a09      	cmp	r2, #9
 8017590:	d903      	bls.n	801759a <_svfiprintf_r+0x1a6>
 8017592:	2b00      	cmp	r3, #0
 8017594:	d0c6      	beq.n	8017524 <_svfiprintf_r+0x130>
 8017596:	9105      	str	r1, [sp, #20]
 8017598:	e7c4      	b.n	8017524 <_svfiprintf_r+0x130>
 801759a:	fb0c 2101 	mla	r1, ip, r1, r2
 801759e:	4604      	mov	r4, r0
 80175a0:	2301      	movs	r3, #1
 80175a2:	e7f0      	b.n	8017586 <_svfiprintf_r+0x192>
 80175a4:	ab03      	add	r3, sp, #12
 80175a6:	9300      	str	r3, [sp, #0]
 80175a8:	462a      	mov	r2, r5
 80175aa:	4b0f      	ldr	r3, [pc, #60]	; (80175e8 <_svfiprintf_r+0x1f4>)
 80175ac:	a904      	add	r1, sp, #16
 80175ae:	4638      	mov	r0, r7
 80175b0:	f3af 8000 	nop.w
 80175b4:	1c42      	adds	r2, r0, #1
 80175b6:	4606      	mov	r6, r0
 80175b8:	d1d6      	bne.n	8017568 <_svfiprintf_r+0x174>
 80175ba:	89ab      	ldrh	r3, [r5, #12]
 80175bc:	065b      	lsls	r3, r3, #25
 80175be:	f53f af2d 	bmi.w	801741c <_svfiprintf_r+0x28>
 80175c2:	9809      	ldr	r0, [sp, #36]	; 0x24
 80175c4:	b01d      	add	sp, #116	; 0x74
 80175c6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80175ca:	ab03      	add	r3, sp, #12
 80175cc:	9300      	str	r3, [sp, #0]
 80175ce:	462a      	mov	r2, r5
 80175d0:	4b05      	ldr	r3, [pc, #20]	; (80175e8 <_svfiprintf_r+0x1f4>)
 80175d2:	a904      	add	r1, sp, #16
 80175d4:	4638      	mov	r0, r7
 80175d6:	f000 f9bd 	bl	8017954 <_printf_i>
 80175da:	e7eb      	b.n	80175b4 <_svfiprintf_r+0x1c0>
 80175dc:	0801b89d 	.word	0x0801b89d
 80175e0:	0801b8a7 	.word	0x0801b8a7
 80175e4:	00000000 	.word	0x00000000
 80175e8:	08017341 	.word	0x08017341
 80175ec:	0801b8a3 	.word	0x0801b8a3

080175f0 <__sfputc_r>:
 80175f0:	6893      	ldr	r3, [r2, #8]
 80175f2:	3b01      	subs	r3, #1
 80175f4:	2b00      	cmp	r3, #0
 80175f6:	b410      	push	{r4}
 80175f8:	6093      	str	r3, [r2, #8]
 80175fa:	da08      	bge.n	801760e <__sfputc_r+0x1e>
 80175fc:	6994      	ldr	r4, [r2, #24]
 80175fe:	42a3      	cmp	r3, r4
 8017600:	db01      	blt.n	8017606 <__sfputc_r+0x16>
 8017602:	290a      	cmp	r1, #10
 8017604:	d103      	bne.n	801760e <__sfputc_r+0x1e>
 8017606:	f85d 4b04 	ldr.w	r4, [sp], #4
 801760a:	f000 bb85 	b.w	8017d18 <__swbuf_r>
 801760e:	6813      	ldr	r3, [r2, #0]
 8017610:	1c58      	adds	r0, r3, #1
 8017612:	6010      	str	r0, [r2, #0]
 8017614:	7019      	strb	r1, [r3, #0]
 8017616:	4608      	mov	r0, r1
 8017618:	f85d 4b04 	ldr.w	r4, [sp], #4
 801761c:	4770      	bx	lr

0801761e <__sfputs_r>:
 801761e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017620:	4606      	mov	r6, r0
 8017622:	460f      	mov	r7, r1
 8017624:	4614      	mov	r4, r2
 8017626:	18d5      	adds	r5, r2, r3
 8017628:	42ac      	cmp	r4, r5
 801762a:	d101      	bne.n	8017630 <__sfputs_r+0x12>
 801762c:	2000      	movs	r0, #0
 801762e:	e007      	b.n	8017640 <__sfputs_r+0x22>
 8017630:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017634:	463a      	mov	r2, r7
 8017636:	4630      	mov	r0, r6
 8017638:	f7ff ffda 	bl	80175f0 <__sfputc_r>
 801763c:	1c43      	adds	r3, r0, #1
 801763e:	d1f3      	bne.n	8017628 <__sfputs_r+0xa>
 8017640:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08017644 <_vfiprintf_r>:
 8017644:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8017648:	460d      	mov	r5, r1
 801764a:	b09d      	sub	sp, #116	; 0x74
 801764c:	4614      	mov	r4, r2
 801764e:	4698      	mov	r8, r3
 8017650:	4606      	mov	r6, r0
 8017652:	b118      	cbz	r0, 801765c <_vfiprintf_r+0x18>
 8017654:	6a03      	ldr	r3, [r0, #32]
 8017656:	b90b      	cbnz	r3, 801765c <_vfiprintf_r+0x18>
 8017658:	f7ff fb94 	bl	8016d84 <__sinit>
 801765c:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 801765e:	07d9      	lsls	r1, r3, #31
 8017660:	d405      	bmi.n	801766e <_vfiprintf_r+0x2a>
 8017662:	89ab      	ldrh	r3, [r5, #12]
 8017664:	059a      	lsls	r2, r3, #22
 8017666:	d402      	bmi.n	801766e <_vfiprintf_r+0x2a>
 8017668:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801766a:	f7ff fd3b 	bl	80170e4 <__retarget_lock_acquire_recursive>
 801766e:	89ab      	ldrh	r3, [r5, #12]
 8017670:	071b      	lsls	r3, r3, #28
 8017672:	d501      	bpl.n	8017678 <_vfiprintf_r+0x34>
 8017674:	692b      	ldr	r3, [r5, #16]
 8017676:	b99b      	cbnz	r3, 80176a0 <_vfiprintf_r+0x5c>
 8017678:	4629      	mov	r1, r5
 801767a:	4630      	mov	r0, r6
 801767c:	f000 fb8a 	bl	8017d94 <__swsetup_r>
 8017680:	b170      	cbz	r0, 80176a0 <_vfiprintf_r+0x5c>
 8017682:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017684:	07dc      	lsls	r4, r3, #31
 8017686:	d504      	bpl.n	8017692 <_vfiprintf_r+0x4e>
 8017688:	f04f 30ff 	mov.w	r0, #4294967295
 801768c:	b01d      	add	sp, #116	; 0x74
 801768e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8017692:	89ab      	ldrh	r3, [r5, #12]
 8017694:	0598      	lsls	r0, r3, #22
 8017696:	d4f7      	bmi.n	8017688 <_vfiprintf_r+0x44>
 8017698:	6da8      	ldr	r0, [r5, #88]	; 0x58
 801769a:	f7ff fd24 	bl	80170e6 <__retarget_lock_release_recursive>
 801769e:	e7f3      	b.n	8017688 <_vfiprintf_r+0x44>
 80176a0:	2300      	movs	r3, #0
 80176a2:	9309      	str	r3, [sp, #36]	; 0x24
 80176a4:	2320      	movs	r3, #32
 80176a6:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
 80176aa:	f8cd 800c 	str.w	r8, [sp, #12]
 80176ae:	2330      	movs	r3, #48	; 0x30
 80176b0:	f8df 81b0 	ldr.w	r8, [pc, #432]	; 8017864 <_vfiprintf_r+0x220>
 80176b4:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
 80176b8:	f04f 0901 	mov.w	r9, #1
 80176bc:	4623      	mov	r3, r4
 80176be:	469a      	mov	sl, r3
 80176c0:	f813 2b01 	ldrb.w	r2, [r3], #1
 80176c4:	b10a      	cbz	r2, 80176ca <_vfiprintf_r+0x86>
 80176c6:	2a25      	cmp	r2, #37	; 0x25
 80176c8:	d1f9      	bne.n	80176be <_vfiprintf_r+0x7a>
 80176ca:	ebba 0b04 	subs.w	fp, sl, r4
 80176ce:	d00b      	beq.n	80176e8 <_vfiprintf_r+0xa4>
 80176d0:	465b      	mov	r3, fp
 80176d2:	4622      	mov	r2, r4
 80176d4:	4629      	mov	r1, r5
 80176d6:	4630      	mov	r0, r6
 80176d8:	f7ff ffa1 	bl	801761e <__sfputs_r>
 80176dc:	3001      	adds	r0, #1
 80176de:	f000 80a9 	beq.w	8017834 <_vfiprintf_r+0x1f0>
 80176e2:	9a09      	ldr	r2, [sp, #36]	; 0x24
 80176e4:	445a      	add	r2, fp
 80176e6:	9209      	str	r2, [sp, #36]	; 0x24
 80176e8:	f89a 3000 	ldrb.w	r3, [sl]
 80176ec:	2b00      	cmp	r3, #0
 80176ee:	f000 80a1 	beq.w	8017834 <_vfiprintf_r+0x1f0>
 80176f2:	2300      	movs	r3, #0
 80176f4:	f04f 32ff 	mov.w	r2, #4294967295
 80176f8:	e9cd 2305 	strd	r2, r3, [sp, #20]
 80176fc:	f10a 0a01 	add.w	sl, sl, #1
 8017700:	9304      	str	r3, [sp, #16]
 8017702:	9307      	str	r3, [sp, #28]
 8017704:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
 8017708:	931a      	str	r3, [sp, #104]	; 0x68
 801770a:	4654      	mov	r4, sl
 801770c:	2205      	movs	r2, #5
 801770e:	f814 1b01 	ldrb.w	r1, [r4], #1
 8017712:	4854      	ldr	r0, [pc, #336]	; (8017864 <_vfiprintf_r+0x220>)
 8017714:	f7e8 fd84 	bl	8000220 <memchr>
 8017718:	9a04      	ldr	r2, [sp, #16]
 801771a:	b9d8      	cbnz	r0, 8017754 <_vfiprintf_r+0x110>
 801771c:	06d1      	lsls	r1, r2, #27
 801771e:	bf44      	itt	mi
 8017720:	2320      	movmi	r3, #32
 8017722:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017726:	0713      	lsls	r3, r2, #28
 8017728:	bf44      	itt	mi
 801772a:	232b      	movmi	r3, #43	; 0x2b
 801772c:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
 8017730:	f89a 3000 	ldrb.w	r3, [sl]
 8017734:	2b2a      	cmp	r3, #42	; 0x2a
 8017736:	d015      	beq.n	8017764 <_vfiprintf_r+0x120>
 8017738:	9a07      	ldr	r2, [sp, #28]
 801773a:	4654      	mov	r4, sl
 801773c:	2000      	movs	r0, #0
 801773e:	f04f 0c0a 	mov.w	ip, #10
 8017742:	4621      	mov	r1, r4
 8017744:	f811 3b01 	ldrb.w	r3, [r1], #1
 8017748:	3b30      	subs	r3, #48	; 0x30
 801774a:	2b09      	cmp	r3, #9
 801774c:	d94d      	bls.n	80177ea <_vfiprintf_r+0x1a6>
 801774e:	b1b0      	cbz	r0, 801777e <_vfiprintf_r+0x13a>
 8017750:	9207      	str	r2, [sp, #28]
 8017752:	e014      	b.n	801777e <_vfiprintf_r+0x13a>
 8017754:	eba0 0308 	sub.w	r3, r0, r8
 8017758:	fa09 f303 	lsl.w	r3, r9, r3
 801775c:	4313      	orrs	r3, r2
 801775e:	9304      	str	r3, [sp, #16]
 8017760:	46a2      	mov	sl, r4
 8017762:	e7d2      	b.n	801770a <_vfiprintf_r+0xc6>
 8017764:	9b03      	ldr	r3, [sp, #12]
 8017766:	1d19      	adds	r1, r3, #4
 8017768:	681b      	ldr	r3, [r3, #0]
 801776a:	9103      	str	r1, [sp, #12]
 801776c:	2b00      	cmp	r3, #0
 801776e:	bfbb      	ittet	lt
 8017770:	425b      	neglt	r3, r3
 8017772:	f042 0202 	orrlt.w	r2, r2, #2
 8017776:	9307      	strge	r3, [sp, #28]
 8017778:	9307      	strlt	r3, [sp, #28]
 801777a:	bfb8      	it	lt
 801777c:	9204      	strlt	r2, [sp, #16]
 801777e:	7823      	ldrb	r3, [r4, #0]
 8017780:	2b2e      	cmp	r3, #46	; 0x2e
 8017782:	d10c      	bne.n	801779e <_vfiprintf_r+0x15a>
 8017784:	7863      	ldrb	r3, [r4, #1]
 8017786:	2b2a      	cmp	r3, #42	; 0x2a
 8017788:	d134      	bne.n	80177f4 <_vfiprintf_r+0x1b0>
 801778a:	9b03      	ldr	r3, [sp, #12]
 801778c:	1d1a      	adds	r2, r3, #4
 801778e:	681b      	ldr	r3, [r3, #0]
 8017790:	9203      	str	r2, [sp, #12]
 8017792:	2b00      	cmp	r3, #0
 8017794:	bfb8      	it	lt
 8017796:	f04f 33ff 	movlt.w	r3, #4294967295
 801779a:	3402      	adds	r4, #2
 801779c:	9305      	str	r3, [sp, #20]
 801779e:	f8df a0d4 	ldr.w	sl, [pc, #212]	; 8017874 <_vfiprintf_r+0x230>
 80177a2:	7821      	ldrb	r1, [r4, #0]
 80177a4:	2203      	movs	r2, #3
 80177a6:	4650      	mov	r0, sl
 80177a8:	f7e8 fd3a 	bl	8000220 <memchr>
 80177ac:	b138      	cbz	r0, 80177be <_vfiprintf_r+0x17a>
 80177ae:	9b04      	ldr	r3, [sp, #16]
 80177b0:	eba0 000a 	sub.w	r0, r0, sl
 80177b4:	2240      	movs	r2, #64	; 0x40
 80177b6:	4082      	lsls	r2, r0
 80177b8:	4313      	orrs	r3, r2
 80177ba:	3401      	adds	r4, #1
 80177bc:	9304      	str	r3, [sp, #16]
 80177be:	f814 1b01 	ldrb.w	r1, [r4], #1
 80177c2:	4829      	ldr	r0, [pc, #164]	; (8017868 <_vfiprintf_r+0x224>)
 80177c4:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
 80177c8:	2206      	movs	r2, #6
 80177ca:	f7e8 fd29 	bl	8000220 <memchr>
 80177ce:	2800      	cmp	r0, #0
 80177d0:	d03f      	beq.n	8017852 <_vfiprintf_r+0x20e>
 80177d2:	4b26      	ldr	r3, [pc, #152]	; (801786c <_vfiprintf_r+0x228>)
 80177d4:	bb1b      	cbnz	r3, 801781e <_vfiprintf_r+0x1da>
 80177d6:	9b03      	ldr	r3, [sp, #12]
 80177d8:	3307      	adds	r3, #7
 80177da:	f023 0307 	bic.w	r3, r3, #7
 80177de:	3308      	adds	r3, #8
 80177e0:	9303      	str	r3, [sp, #12]
 80177e2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80177e4:	443b      	add	r3, r7
 80177e6:	9309      	str	r3, [sp, #36]	; 0x24
 80177e8:	e768      	b.n	80176bc <_vfiprintf_r+0x78>
 80177ea:	fb0c 3202 	mla	r2, ip, r2, r3
 80177ee:	460c      	mov	r4, r1
 80177f0:	2001      	movs	r0, #1
 80177f2:	e7a6      	b.n	8017742 <_vfiprintf_r+0xfe>
 80177f4:	2300      	movs	r3, #0
 80177f6:	3401      	adds	r4, #1
 80177f8:	9305      	str	r3, [sp, #20]
 80177fa:	4619      	mov	r1, r3
 80177fc:	f04f 0c0a 	mov.w	ip, #10
 8017800:	4620      	mov	r0, r4
 8017802:	f810 2b01 	ldrb.w	r2, [r0], #1
 8017806:	3a30      	subs	r2, #48	; 0x30
 8017808:	2a09      	cmp	r2, #9
 801780a:	d903      	bls.n	8017814 <_vfiprintf_r+0x1d0>
 801780c:	2b00      	cmp	r3, #0
 801780e:	d0c6      	beq.n	801779e <_vfiprintf_r+0x15a>
 8017810:	9105      	str	r1, [sp, #20]
 8017812:	e7c4      	b.n	801779e <_vfiprintf_r+0x15a>
 8017814:	fb0c 2101 	mla	r1, ip, r1, r2
 8017818:	4604      	mov	r4, r0
 801781a:	2301      	movs	r3, #1
 801781c:	e7f0      	b.n	8017800 <_vfiprintf_r+0x1bc>
 801781e:	ab03      	add	r3, sp, #12
 8017820:	9300      	str	r3, [sp, #0]
 8017822:	462a      	mov	r2, r5
 8017824:	4b12      	ldr	r3, [pc, #72]	; (8017870 <_vfiprintf_r+0x22c>)
 8017826:	a904      	add	r1, sp, #16
 8017828:	4630      	mov	r0, r6
 801782a:	f3af 8000 	nop.w
 801782e:	4607      	mov	r7, r0
 8017830:	1c78      	adds	r0, r7, #1
 8017832:	d1d6      	bne.n	80177e2 <_vfiprintf_r+0x19e>
 8017834:	6e6b      	ldr	r3, [r5, #100]	; 0x64
 8017836:	07d9      	lsls	r1, r3, #31
 8017838:	d405      	bmi.n	8017846 <_vfiprintf_r+0x202>
 801783a:	89ab      	ldrh	r3, [r5, #12]
 801783c:	059a      	lsls	r2, r3, #22
 801783e:	d402      	bmi.n	8017846 <_vfiprintf_r+0x202>
 8017840:	6da8      	ldr	r0, [r5, #88]	; 0x58
 8017842:	f7ff fc50 	bl	80170e6 <__retarget_lock_release_recursive>
 8017846:	89ab      	ldrh	r3, [r5, #12]
 8017848:	065b      	lsls	r3, r3, #25
 801784a:	f53f af1d 	bmi.w	8017688 <_vfiprintf_r+0x44>
 801784e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8017850:	e71c      	b.n	801768c <_vfiprintf_r+0x48>
 8017852:	ab03      	add	r3, sp, #12
 8017854:	9300      	str	r3, [sp, #0]
 8017856:	462a      	mov	r2, r5
 8017858:	4b05      	ldr	r3, [pc, #20]	; (8017870 <_vfiprintf_r+0x22c>)
 801785a:	a904      	add	r1, sp, #16
 801785c:	4630      	mov	r0, r6
 801785e:	f000 f879 	bl	8017954 <_printf_i>
 8017862:	e7e4      	b.n	801782e <_vfiprintf_r+0x1ea>
 8017864:	0801b89d 	.word	0x0801b89d
 8017868:	0801b8a7 	.word	0x0801b8a7
 801786c:	00000000 	.word	0x00000000
 8017870:	0801761f 	.word	0x0801761f
 8017874:	0801b8a3 	.word	0x0801b8a3

08017878 <_printf_common>:
 8017878:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 801787c:	4616      	mov	r6, r2
 801787e:	4699      	mov	r9, r3
 8017880:	688a      	ldr	r2, [r1, #8]
 8017882:	690b      	ldr	r3, [r1, #16]
 8017884:	f8dd 8020 	ldr.w	r8, [sp, #32]
 8017888:	4293      	cmp	r3, r2
 801788a:	bfb8      	it	lt
 801788c:	4613      	movlt	r3, r2
 801788e:	6033      	str	r3, [r6, #0]
 8017890:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
 8017894:	4607      	mov	r7, r0
 8017896:	460c      	mov	r4, r1
 8017898:	b10a      	cbz	r2, 801789e <_printf_common+0x26>
 801789a:	3301      	adds	r3, #1
 801789c:	6033      	str	r3, [r6, #0]
 801789e:	6823      	ldr	r3, [r4, #0]
 80178a0:	0699      	lsls	r1, r3, #26
 80178a2:	bf42      	ittt	mi
 80178a4:	6833      	ldrmi	r3, [r6, #0]
 80178a6:	3302      	addmi	r3, #2
 80178a8:	6033      	strmi	r3, [r6, #0]
 80178aa:	6825      	ldr	r5, [r4, #0]
 80178ac:	f015 0506 	ands.w	r5, r5, #6
 80178b0:	d106      	bne.n	80178c0 <_printf_common+0x48>
 80178b2:	f104 0a19 	add.w	sl, r4, #25
 80178b6:	68e3      	ldr	r3, [r4, #12]
 80178b8:	6832      	ldr	r2, [r6, #0]
 80178ba:	1a9b      	subs	r3, r3, r2
 80178bc:	42ab      	cmp	r3, r5
 80178be:	dc26      	bgt.n	801790e <_printf_common+0x96>
 80178c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
 80178c4:	1e13      	subs	r3, r2, #0
 80178c6:	6822      	ldr	r2, [r4, #0]
 80178c8:	bf18      	it	ne
 80178ca:	2301      	movne	r3, #1
 80178cc:	0692      	lsls	r2, r2, #26
 80178ce:	d42b      	bmi.n	8017928 <_printf_common+0xb0>
 80178d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
 80178d4:	4649      	mov	r1, r9
 80178d6:	4638      	mov	r0, r7
 80178d8:	47c0      	blx	r8
 80178da:	3001      	adds	r0, #1
 80178dc:	d01e      	beq.n	801791c <_printf_common+0xa4>
 80178de:	6823      	ldr	r3, [r4, #0]
 80178e0:	6922      	ldr	r2, [r4, #16]
 80178e2:	f003 0306 	and.w	r3, r3, #6
 80178e6:	2b04      	cmp	r3, #4
 80178e8:	bf02      	ittt	eq
 80178ea:	68e5      	ldreq	r5, [r4, #12]
 80178ec:	6833      	ldreq	r3, [r6, #0]
 80178ee:	1aed      	subeq	r5, r5, r3
 80178f0:	68a3      	ldr	r3, [r4, #8]
 80178f2:	bf0c      	ite	eq
 80178f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 80178f8:	2500      	movne	r5, #0
 80178fa:	4293      	cmp	r3, r2
 80178fc:	bfc4      	itt	gt
 80178fe:	1a9b      	subgt	r3, r3, r2
 8017900:	18ed      	addgt	r5, r5, r3
 8017902:	2600      	movs	r6, #0
 8017904:	341a      	adds	r4, #26
 8017906:	42b5      	cmp	r5, r6
 8017908:	d11a      	bne.n	8017940 <_printf_common+0xc8>
 801790a:	2000      	movs	r0, #0
 801790c:	e008      	b.n	8017920 <_printf_common+0xa8>
 801790e:	2301      	movs	r3, #1
 8017910:	4652      	mov	r2, sl
 8017912:	4649      	mov	r1, r9
 8017914:	4638      	mov	r0, r7
 8017916:	47c0      	blx	r8
 8017918:	3001      	adds	r0, #1
 801791a:	d103      	bne.n	8017924 <_printf_common+0xac>
 801791c:	f04f 30ff 	mov.w	r0, #4294967295
 8017920:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017924:	3501      	adds	r5, #1
 8017926:	e7c6      	b.n	80178b6 <_printf_common+0x3e>
 8017928:	18e1      	adds	r1, r4, r3
 801792a:	1c5a      	adds	r2, r3, #1
 801792c:	2030      	movs	r0, #48	; 0x30
 801792e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
 8017932:	4422      	add	r2, r4
 8017934:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
 8017938:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
 801793c:	3302      	adds	r3, #2
 801793e:	e7c7      	b.n	80178d0 <_printf_common+0x58>
 8017940:	2301      	movs	r3, #1
 8017942:	4622      	mov	r2, r4
 8017944:	4649      	mov	r1, r9
 8017946:	4638      	mov	r0, r7
 8017948:	47c0      	blx	r8
 801794a:	3001      	adds	r0, #1
 801794c:	d0e6      	beq.n	801791c <_printf_common+0xa4>
 801794e:	3601      	adds	r6, #1
 8017950:	e7d9      	b.n	8017906 <_printf_common+0x8e>
	...

08017954 <_printf_i>:
 8017954:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8017958:	7e0f      	ldrb	r7, [r1, #24]
 801795a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
 801795c:	2f78      	cmp	r7, #120	; 0x78
 801795e:	4691      	mov	r9, r2
 8017960:	4680      	mov	r8, r0
 8017962:	460c      	mov	r4, r1
 8017964:	469a      	mov	sl, r3
 8017966:	f101 0243 	add.w	r2, r1, #67	; 0x43
 801796a:	d807      	bhi.n	801797c <_printf_i+0x28>
 801796c:	2f62      	cmp	r7, #98	; 0x62
 801796e:	d80a      	bhi.n	8017986 <_printf_i+0x32>
 8017970:	2f00      	cmp	r7, #0
 8017972:	f000 80d4 	beq.w	8017b1e <_printf_i+0x1ca>
 8017976:	2f58      	cmp	r7, #88	; 0x58
 8017978:	f000 80c0 	beq.w	8017afc <_printf_i+0x1a8>
 801797c:	f104 0542 	add.w	r5, r4, #66	; 0x42
 8017980:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
 8017984:	e03a      	b.n	80179fc <_printf_i+0xa8>
 8017986:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
 801798a:	2b15      	cmp	r3, #21
 801798c:	d8f6      	bhi.n	801797c <_printf_i+0x28>
 801798e:	a101      	add	r1, pc, #4	; (adr r1, 8017994 <_printf_i+0x40>)
 8017990:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8017994:	080179ed 	.word	0x080179ed
 8017998:	08017a01 	.word	0x08017a01
 801799c:	0801797d 	.word	0x0801797d
 80179a0:	0801797d 	.word	0x0801797d
 80179a4:	0801797d 	.word	0x0801797d
 80179a8:	0801797d 	.word	0x0801797d
 80179ac:	08017a01 	.word	0x08017a01
 80179b0:	0801797d 	.word	0x0801797d
 80179b4:	0801797d 	.word	0x0801797d
 80179b8:	0801797d 	.word	0x0801797d
 80179bc:	0801797d 	.word	0x0801797d
 80179c0:	08017b05 	.word	0x08017b05
 80179c4:	08017a2d 	.word	0x08017a2d
 80179c8:	08017abf 	.word	0x08017abf
 80179cc:	0801797d 	.word	0x0801797d
 80179d0:	0801797d 	.word	0x0801797d
 80179d4:	08017b27 	.word	0x08017b27
 80179d8:	0801797d 	.word	0x0801797d
 80179dc:	08017a2d 	.word	0x08017a2d
 80179e0:	0801797d 	.word	0x0801797d
 80179e4:	0801797d 	.word	0x0801797d
 80179e8:	08017ac7 	.word	0x08017ac7
 80179ec:	682b      	ldr	r3, [r5, #0]
 80179ee:	1d1a      	adds	r2, r3, #4
 80179f0:	681b      	ldr	r3, [r3, #0]
 80179f2:	602a      	str	r2, [r5, #0]
 80179f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
 80179f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
 80179fc:	2301      	movs	r3, #1
 80179fe:	e09f      	b.n	8017b40 <_printf_i+0x1ec>
 8017a00:	6820      	ldr	r0, [r4, #0]
 8017a02:	682b      	ldr	r3, [r5, #0]
 8017a04:	0607      	lsls	r7, r0, #24
 8017a06:	f103 0104 	add.w	r1, r3, #4
 8017a0a:	6029      	str	r1, [r5, #0]
 8017a0c:	d501      	bpl.n	8017a12 <_printf_i+0xbe>
 8017a0e:	681e      	ldr	r6, [r3, #0]
 8017a10:	e003      	b.n	8017a1a <_printf_i+0xc6>
 8017a12:	0646      	lsls	r6, r0, #25
 8017a14:	d5fb      	bpl.n	8017a0e <_printf_i+0xba>
 8017a16:	f9b3 6000 	ldrsh.w	r6, [r3]
 8017a1a:	2e00      	cmp	r6, #0
 8017a1c:	da03      	bge.n	8017a26 <_printf_i+0xd2>
 8017a1e:	232d      	movs	r3, #45	; 0x2d
 8017a20:	4276      	negs	r6, r6
 8017a22:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017a26:	485a      	ldr	r0, [pc, #360]	; (8017b90 <_printf_i+0x23c>)
 8017a28:	230a      	movs	r3, #10
 8017a2a:	e012      	b.n	8017a52 <_printf_i+0xfe>
 8017a2c:	682b      	ldr	r3, [r5, #0]
 8017a2e:	6820      	ldr	r0, [r4, #0]
 8017a30:	1d19      	adds	r1, r3, #4
 8017a32:	6029      	str	r1, [r5, #0]
 8017a34:	0605      	lsls	r5, r0, #24
 8017a36:	d501      	bpl.n	8017a3c <_printf_i+0xe8>
 8017a38:	681e      	ldr	r6, [r3, #0]
 8017a3a:	e002      	b.n	8017a42 <_printf_i+0xee>
 8017a3c:	0641      	lsls	r1, r0, #25
 8017a3e:	d5fb      	bpl.n	8017a38 <_printf_i+0xe4>
 8017a40:	881e      	ldrh	r6, [r3, #0]
 8017a42:	4853      	ldr	r0, [pc, #332]	; (8017b90 <_printf_i+0x23c>)
 8017a44:	2f6f      	cmp	r7, #111	; 0x6f
 8017a46:	bf0c      	ite	eq
 8017a48:	2308      	moveq	r3, #8
 8017a4a:	230a      	movne	r3, #10
 8017a4c:	2100      	movs	r1, #0
 8017a4e:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
 8017a52:	6865      	ldr	r5, [r4, #4]
 8017a54:	60a5      	str	r5, [r4, #8]
 8017a56:	2d00      	cmp	r5, #0
 8017a58:	bfa2      	ittt	ge
 8017a5a:	6821      	ldrge	r1, [r4, #0]
 8017a5c:	f021 0104 	bicge.w	r1, r1, #4
 8017a60:	6021      	strge	r1, [r4, #0]
 8017a62:	b90e      	cbnz	r6, 8017a68 <_printf_i+0x114>
 8017a64:	2d00      	cmp	r5, #0
 8017a66:	d04b      	beq.n	8017b00 <_printf_i+0x1ac>
 8017a68:	4615      	mov	r5, r2
 8017a6a:	fbb6 f1f3 	udiv	r1, r6, r3
 8017a6e:	fb03 6711 	mls	r7, r3, r1, r6
 8017a72:	5dc7      	ldrb	r7, [r0, r7]
 8017a74:	f805 7d01 	strb.w	r7, [r5, #-1]!
 8017a78:	4637      	mov	r7, r6
 8017a7a:	42bb      	cmp	r3, r7
 8017a7c:	460e      	mov	r6, r1
 8017a7e:	d9f4      	bls.n	8017a6a <_printf_i+0x116>
 8017a80:	2b08      	cmp	r3, #8
 8017a82:	d10b      	bne.n	8017a9c <_printf_i+0x148>
 8017a84:	6823      	ldr	r3, [r4, #0]
 8017a86:	07de      	lsls	r6, r3, #31
 8017a88:	d508      	bpl.n	8017a9c <_printf_i+0x148>
 8017a8a:	6923      	ldr	r3, [r4, #16]
 8017a8c:	6861      	ldr	r1, [r4, #4]
 8017a8e:	4299      	cmp	r1, r3
 8017a90:	bfde      	ittt	le
 8017a92:	2330      	movle	r3, #48	; 0x30
 8017a94:	f805 3c01 	strble.w	r3, [r5, #-1]
 8017a98:	f105 35ff 	addle.w	r5, r5, #4294967295
 8017a9c:	1b52      	subs	r2, r2, r5
 8017a9e:	6122      	str	r2, [r4, #16]
 8017aa0:	f8cd a000 	str.w	sl, [sp]
 8017aa4:	464b      	mov	r3, r9
 8017aa6:	aa03      	add	r2, sp, #12
 8017aa8:	4621      	mov	r1, r4
 8017aaa:	4640      	mov	r0, r8
 8017aac:	f7ff fee4 	bl	8017878 <_printf_common>
 8017ab0:	3001      	adds	r0, #1
 8017ab2:	d14a      	bne.n	8017b4a <_printf_i+0x1f6>
 8017ab4:	f04f 30ff 	mov.w	r0, #4294967295
 8017ab8:	b004      	add	sp, #16
 8017aba:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8017abe:	6823      	ldr	r3, [r4, #0]
 8017ac0:	f043 0320 	orr.w	r3, r3, #32
 8017ac4:	6023      	str	r3, [r4, #0]
 8017ac6:	4833      	ldr	r0, [pc, #204]	; (8017b94 <_printf_i+0x240>)
 8017ac8:	2778      	movs	r7, #120	; 0x78
 8017aca:	f884 7045 	strb.w	r7, [r4, #69]	; 0x45
 8017ace:	6823      	ldr	r3, [r4, #0]
 8017ad0:	6829      	ldr	r1, [r5, #0]
 8017ad2:	061f      	lsls	r7, r3, #24
 8017ad4:	f851 6b04 	ldr.w	r6, [r1], #4
 8017ad8:	d402      	bmi.n	8017ae0 <_printf_i+0x18c>
 8017ada:	065f      	lsls	r7, r3, #25
 8017adc:	bf48      	it	mi
 8017ade:	b2b6      	uxthmi	r6, r6
 8017ae0:	07df      	lsls	r7, r3, #31
 8017ae2:	bf48      	it	mi
 8017ae4:	f043 0320 	orrmi.w	r3, r3, #32
 8017ae8:	6029      	str	r1, [r5, #0]
 8017aea:	bf48      	it	mi
 8017aec:	6023      	strmi	r3, [r4, #0]
 8017aee:	b91e      	cbnz	r6, 8017af8 <_printf_i+0x1a4>
 8017af0:	6823      	ldr	r3, [r4, #0]
 8017af2:	f023 0320 	bic.w	r3, r3, #32
 8017af6:	6023      	str	r3, [r4, #0]
 8017af8:	2310      	movs	r3, #16
 8017afa:	e7a7      	b.n	8017a4c <_printf_i+0xf8>
 8017afc:	4824      	ldr	r0, [pc, #144]	; (8017b90 <_printf_i+0x23c>)
 8017afe:	e7e4      	b.n	8017aca <_printf_i+0x176>
 8017b00:	4615      	mov	r5, r2
 8017b02:	e7bd      	b.n	8017a80 <_printf_i+0x12c>
 8017b04:	682b      	ldr	r3, [r5, #0]
 8017b06:	6826      	ldr	r6, [r4, #0]
 8017b08:	6961      	ldr	r1, [r4, #20]
 8017b0a:	1d18      	adds	r0, r3, #4
 8017b0c:	6028      	str	r0, [r5, #0]
 8017b0e:	0635      	lsls	r5, r6, #24
 8017b10:	681b      	ldr	r3, [r3, #0]
 8017b12:	d501      	bpl.n	8017b18 <_printf_i+0x1c4>
 8017b14:	6019      	str	r1, [r3, #0]
 8017b16:	e002      	b.n	8017b1e <_printf_i+0x1ca>
 8017b18:	0670      	lsls	r0, r6, #25
 8017b1a:	d5fb      	bpl.n	8017b14 <_printf_i+0x1c0>
 8017b1c:	8019      	strh	r1, [r3, #0]
 8017b1e:	2300      	movs	r3, #0
 8017b20:	6123      	str	r3, [r4, #16]
 8017b22:	4615      	mov	r5, r2
 8017b24:	e7bc      	b.n	8017aa0 <_printf_i+0x14c>
 8017b26:	682b      	ldr	r3, [r5, #0]
 8017b28:	1d1a      	adds	r2, r3, #4
 8017b2a:	602a      	str	r2, [r5, #0]
 8017b2c:	681d      	ldr	r5, [r3, #0]
 8017b2e:	6862      	ldr	r2, [r4, #4]
 8017b30:	2100      	movs	r1, #0
 8017b32:	4628      	mov	r0, r5
 8017b34:	f7e8 fb74 	bl	8000220 <memchr>
 8017b38:	b108      	cbz	r0, 8017b3e <_printf_i+0x1ea>
 8017b3a:	1b40      	subs	r0, r0, r5
 8017b3c:	6060      	str	r0, [r4, #4]
 8017b3e:	6863      	ldr	r3, [r4, #4]
 8017b40:	6123      	str	r3, [r4, #16]
 8017b42:	2300      	movs	r3, #0
 8017b44:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
 8017b48:	e7aa      	b.n	8017aa0 <_printf_i+0x14c>
 8017b4a:	6923      	ldr	r3, [r4, #16]
 8017b4c:	462a      	mov	r2, r5
 8017b4e:	4649      	mov	r1, r9
 8017b50:	4640      	mov	r0, r8
 8017b52:	47d0      	blx	sl
 8017b54:	3001      	adds	r0, #1
 8017b56:	d0ad      	beq.n	8017ab4 <_printf_i+0x160>
 8017b58:	6823      	ldr	r3, [r4, #0]
 8017b5a:	079b      	lsls	r3, r3, #30
 8017b5c:	d413      	bmi.n	8017b86 <_printf_i+0x232>
 8017b5e:	68e0      	ldr	r0, [r4, #12]
 8017b60:	9b03      	ldr	r3, [sp, #12]
 8017b62:	4298      	cmp	r0, r3
 8017b64:	bfb8      	it	lt
 8017b66:	4618      	movlt	r0, r3
 8017b68:	e7a6      	b.n	8017ab8 <_printf_i+0x164>
 8017b6a:	2301      	movs	r3, #1
 8017b6c:	4632      	mov	r2, r6
 8017b6e:	4649      	mov	r1, r9
 8017b70:	4640      	mov	r0, r8
 8017b72:	47d0      	blx	sl
 8017b74:	3001      	adds	r0, #1
 8017b76:	d09d      	beq.n	8017ab4 <_printf_i+0x160>
 8017b78:	3501      	adds	r5, #1
 8017b7a:	68e3      	ldr	r3, [r4, #12]
 8017b7c:	9903      	ldr	r1, [sp, #12]
 8017b7e:	1a5b      	subs	r3, r3, r1
 8017b80:	42ab      	cmp	r3, r5
 8017b82:	dcf2      	bgt.n	8017b6a <_printf_i+0x216>
 8017b84:	e7eb      	b.n	8017b5e <_printf_i+0x20a>
 8017b86:	2500      	movs	r5, #0
 8017b88:	f104 0619 	add.w	r6, r4, #25
 8017b8c:	e7f5      	b.n	8017b7a <_printf_i+0x226>
 8017b8e:	bf00      	nop
 8017b90:	0801b8ae 	.word	0x0801b8ae
 8017b94:	0801b8bf 	.word	0x0801b8bf

08017b98 <__sflush_r>:
 8017b98:	898a      	ldrh	r2, [r1, #12]
 8017b9a:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017b9e:	4605      	mov	r5, r0
 8017ba0:	0710      	lsls	r0, r2, #28
 8017ba2:	460c      	mov	r4, r1
 8017ba4:	d458      	bmi.n	8017c58 <__sflush_r+0xc0>
 8017ba6:	684b      	ldr	r3, [r1, #4]
 8017ba8:	2b00      	cmp	r3, #0
 8017baa:	dc05      	bgt.n	8017bb8 <__sflush_r+0x20>
 8017bac:	6c0b      	ldr	r3, [r1, #64]	; 0x40
 8017bae:	2b00      	cmp	r3, #0
 8017bb0:	dc02      	bgt.n	8017bb8 <__sflush_r+0x20>
 8017bb2:	2000      	movs	r0, #0
 8017bb4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017bb8:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017bba:	2e00      	cmp	r6, #0
 8017bbc:	d0f9      	beq.n	8017bb2 <__sflush_r+0x1a>
 8017bbe:	2300      	movs	r3, #0
 8017bc0:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
 8017bc4:	682f      	ldr	r7, [r5, #0]
 8017bc6:	6a21      	ldr	r1, [r4, #32]
 8017bc8:	602b      	str	r3, [r5, #0]
 8017bca:	d032      	beq.n	8017c32 <__sflush_r+0x9a>
 8017bcc:	6d60      	ldr	r0, [r4, #84]	; 0x54
 8017bce:	89a3      	ldrh	r3, [r4, #12]
 8017bd0:	075a      	lsls	r2, r3, #29
 8017bd2:	d505      	bpl.n	8017be0 <__sflush_r+0x48>
 8017bd4:	6863      	ldr	r3, [r4, #4]
 8017bd6:	1ac0      	subs	r0, r0, r3
 8017bd8:	6b63      	ldr	r3, [r4, #52]	; 0x34
 8017bda:	b10b      	cbz	r3, 8017be0 <__sflush_r+0x48>
 8017bdc:	6c23      	ldr	r3, [r4, #64]	; 0x40
 8017bde:	1ac0      	subs	r0, r0, r3
 8017be0:	2300      	movs	r3, #0
 8017be2:	4602      	mov	r2, r0
 8017be4:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
 8017be6:	6a21      	ldr	r1, [r4, #32]
 8017be8:	4628      	mov	r0, r5
 8017bea:	47b0      	blx	r6
 8017bec:	1c43      	adds	r3, r0, #1
 8017bee:	89a3      	ldrh	r3, [r4, #12]
 8017bf0:	d106      	bne.n	8017c00 <__sflush_r+0x68>
 8017bf2:	6829      	ldr	r1, [r5, #0]
 8017bf4:	291d      	cmp	r1, #29
 8017bf6:	d82b      	bhi.n	8017c50 <__sflush_r+0xb8>
 8017bf8:	4a29      	ldr	r2, [pc, #164]	; (8017ca0 <__sflush_r+0x108>)
 8017bfa:	410a      	asrs	r2, r1
 8017bfc:	07d6      	lsls	r6, r2, #31
 8017bfe:	d427      	bmi.n	8017c50 <__sflush_r+0xb8>
 8017c00:	2200      	movs	r2, #0
 8017c02:	6062      	str	r2, [r4, #4]
 8017c04:	04d9      	lsls	r1, r3, #19
 8017c06:	6922      	ldr	r2, [r4, #16]
 8017c08:	6022      	str	r2, [r4, #0]
 8017c0a:	d504      	bpl.n	8017c16 <__sflush_r+0x7e>
 8017c0c:	1c42      	adds	r2, r0, #1
 8017c0e:	d101      	bne.n	8017c14 <__sflush_r+0x7c>
 8017c10:	682b      	ldr	r3, [r5, #0]
 8017c12:	b903      	cbnz	r3, 8017c16 <__sflush_r+0x7e>
 8017c14:	6560      	str	r0, [r4, #84]	; 0x54
 8017c16:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017c18:	602f      	str	r7, [r5, #0]
 8017c1a:	2900      	cmp	r1, #0
 8017c1c:	d0c9      	beq.n	8017bb2 <__sflush_r+0x1a>
 8017c1e:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017c22:	4299      	cmp	r1, r3
 8017c24:	d002      	beq.n	8017c2c <__sflush_r+0x94>
 8017c26:	4628      	mov	r0, r5
 8017c28:	f7ff fa8a 	bl	8017140 <_free_r>
 8017c2c:	2000      	movs	r0, #0
 8017c2e:	6360      	str	r0, [r4, #52]	; 0x34
 8017c30:	e7c0      	b.n	8017bb4 <__sflush_r+0x1c>
 8017c32:	2301      	movs	r3, #1
 8017c34:	4628      	mov	r0, r5
 8017c36:	47b0      	blx	r6
 8017c38:	1c41      	adds	r1, r0, #1
 8017c3a:	d1c8      	bne.n	8017bce <__sflush_r+0x36>
 8017c3c:	682b      	ldr	r3, [r5, #0]
 8017c3e:	2b00      	cmp	r3, #0
 8017c40:	d0c5      	beq.n	8017bce <__sflush_r+0x36>
 8017c42:	2b1d      	cmp	r3, #29
 8017c44:	d001      	beq.n	8017c4a <__sflush_r+0xb2>
 8017c46:	2b16      	cmp	r3, #22
 8017c48:	d101      	bne.n	8017c4e <__sflush_r+0xb6>
 8017c4a:	602f      	str	r7, [r5, #0]
 8017c4c:	e7b1      	b.n	8017bb2 <__sflush_r+0x1a>
 8017c4e:	89a3      	ldrh	r3, [r4, #12]
 8017c50:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c54:	81a3      	strh	r3, [r4, #12]
 8017c56:	e7ad      	b.n	8017bb4 <__sflush_r+0x1c>
 8017c58:	690f      	ldr	r7, [r1, #16]
 8017c5a:	2f00      	cmp	r7, #0
 8017c5c:	d0a9      	beq.n	8017bb2 <__sflush_r+0x1a>
 8017c5e:	0793      	lsls	r3, r2, #30
 8017c60:	680e      	ldr	r6, [r1, #0]
 8017c62:	bf08      	it	eq
 8017c64:	694b      	ldreq	r3, [r1, #20]
 8017c66:	600f      	str	r7, [r1, #0]
 8017c68:	bf18      	it	ne
 8017c6a:	2300      	movne	r3, #0
 8017c6c:	eba6 0807 	sub.w	r8, r6, r7
 8017c70:	608b      	str	r3, [r1, #8]
 8017c72:	f1b8 0f00 	cmp.w	r8, #0
 8017c76:	dd9c      	ble.n	8017bb2 <__sflush_r+0x1a>
 8017c78:	6a21      	ldr	r1, [r4, #32]
 8017c7a:	6aa6      	ldr	r6, [r4, #40]	; 0x28
 8017c7c:	4643      	mov	r3, r8
 8017c7e:	463a      	mov	r2, r7
 8017c80:	4628      	mov	r0, r5
 8017c82:	47b0      	blx	r6
 8017c84:	2800      	cmp	r0, #0
 8017c86:	dc06      	bgt.n	8017c96 <__sflush_r+0xfe>
 8017c88:	89a3      	ldrh	r3, [r4, #12]
 8017c8a:	f043 0340 	orr.w	r3, r3, #64	; 0x40
 8017c8e:	81a3      	strh	r3, [r4, #12]
 8017c90:	f04f 30ff 	mov.w	r0, #4294967295
 8017c94:	e78e      	b.n	8017bb4 <__sflush_r+0x1c>
 8017c96:	4407      	add	r7, r0
 8017c98:	eba8 0800 	sub.w	r8, r8, r0
 8017c9c:	e7e9      	b.n	8017c72 <__sflush_r+0xda>
 8017c9e:	bf00      	nop
 8017ca0:	dfbffffe 	.word	0xdfbffffe

08017ca4 <_fflush_r>:
 8017ca4:	b538      	push	{r3, r4, r5, lr}
 8017ca6:	690b      	ldr	r3, [r1, #16]
 8017ca8:	4605      	mov	r5, r0
 8017caa:	460c      	mov	r4, r1
 8017cac:	b913      	cbnz	r3, 8017cb4 <_fflush_r+0x10>
 8017cae:	2500      	movs	r5, #0
 8017cb0:	4628      	mov	r0, r5
 8017cb2:	bd38      	pop	{r3, r4, r5, pc}
 8017cb4:	b118      	cbz	r0, 8017cbe <_fflush_r+0x1a>
 8017cb6:	6a03      	ldr	r3, [r0, #32]
 8017cb8:	b90b      	cbnz	r3, 8017cbe <_fflush_r+0x1a>
 8017cba:	f7ff f863 	bl	8016d84 <__sinit>
 8017cbe:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017cc2:	2b00      	cmp	r3, #0
 8017cc4:	d0f3      	beq.n	8017cae <_fflush_r+0xa>
 8017cc6:	6e62      	ldr	r2, [r4, #100]	; 0x64
 8017cc8:	07d0      	lsls	r0, r2, #31
 8017cca:	d404      	bmi.n	8017cd6 <_fflush_r+0x32>
 8017ccc:	0599      	lsls	r1, r3, #22
 8017cce:	d402      	bmi.n	8017cd6 <_fflush_r+0x32>
 8017cd0:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cd2:	f7ff fa07 	bl	80170e4 <__retarget_lock_acquire_recursive>
 8017cd6:	4628      	mov	r0, r5
 8017cd8:	4621      	mov	r1, r4
 8017cda:	f7ff ff5d 	bl	8017b98 <__sflush_r>
 8017cde:	6e63      	ldr	r3, [r4, #100]	; 0x64
 8017ce0:	07da      	lsls	r2, r3, #31
 8017ce2:	4605      	mov	r5, r0
 8017ce4:	d4e4      	bmi.n	8017cb0 <_fflush_r+0xc>
 8017ce6:	89a3      	ldrh	r3, [r4, #12]
 8017ce8:	059b      	lsls	r3, r3, #22
 8017cea:	d4e1      	bmi.n	8017cb0 <_fflush_r+0xc>
 8017cec:	6da0      	ldr	r0, [r4, #88]	; 0x58
 8017cee:	f7ff f9fa 	bl	80170e6 <__retarget_lock_release_recursive>
 8017cf2:	e7dd      	b.n	8017cb0 <_fflush_r+0xc>

08017cf4 <fiprintf>:
 8017cf4:	b40e      	push	{r1, r2, r3}
 8017cf6:	b503      	push	{r0, r1, lr}
 8017cf8:	4601      	mov	r1, r0
 8017cfa:	ab03      	add	r3, sp, #12
 8017cfc:	4805      	ldr	r0, [pc, #20]	; (8017d14 <fiprintf+0x20>)
 8017cfe:	f853 2b04 	ldr.w	r2, [r3], #4
 8017d02:	6800      	ldr	r0, [r0, #0]
 8017d04:	9301      	str	r3, [sp, #4]
 8017d06:	f7ff fc9d 	bl	8017644 <_vfiprintf_r>
 8017d0a:	b002      	add	sp, #8
 8017d0c:	f85d eb04 	ldr.w	lr, [sp], #4
 8017d10:	b003      	add	sp, #12
 8017d12:	4770      	bx	lr
 8017d14:	20000088 	.word	0x20000088

08017d18 <__swbuf_r>:
 8017d18:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8017d1a:	460e      	mov	r6, r1
 8017d1c:	4614      	mov	r4, r2
 8017d1e:	4605      	mov	r5, r0
 8017d20:	b118      	cbz	r0, 8017d2a <__swbuf_r+0x12>
 8017d22:	6a03      	ldr	r3, [r0, #32]
 8017d24:	b90b      	cbnz	r3, 8017d2a <__swbuf_r+0x12>
 8017d26:	f7ff f82d 	bl	8016d84 <__sinit>
 8017d2a:	69a3      	ldr	r3, [r4, #24]
 8017d2c:	60a3      	str	r3, [r4, #8]
 8017d2e:	89a3      	ldrh	r3, [r4, #12]
 8017d30:	071a      	lsls	r2, r3, #28
 8017d32:	d525      	bpl.n	8017d80 <__swbuf_r+0x68>
 8017d34:	6923      	ldr	r3, [r4, #16]
 8017d36:	b31b      	cbz	r3, 8017d80 <__swbuf_r+0x68>
 8017d38:	6823      	ldr	r3, [r4, #0]
 8017d3a:	6922      	ldr	r2, [r4, #16]
 8017d3c:	1a98      	subs	r0, r3, r2
 8017d3e:	6963      	ldr	r3, [r4, #20]
 8017d40:	b2f6      	uxtb	r6, r6
 8017d42:	4283      	cmp	r3, r0
 8017d44:	4637      	mov	r7, r6
 8017d46:	dc04      	bgt.n	8017d52 <__swbuf_r+0x3a>
 8017d48:	4621      	mov	r1, r4
 8017d4a:	4628      	mov	r0, r5
 8017d4c:	f7ff ffaa 	bl	8017ca4 <_fflush_r>
 8017d50:	b9e0      	cbnz	r0, 8017d8c <__swbuf_r+0x74>
 8017d52:	68a3      	ldr	r3, [r4, #8]
 8017d54:	3b01      	subs	r3, #1
 8017d56:	60a3      	str	r3, [r4, #8]
 8017d58:	6823      	ldr	r3, [r4, #0]
 8017d5a:	1c5a      	adds	r2, r3, #1
 8017d5c:	6022      	str	r2, [r4, #0]
 8017d5e:	701e      	strb	r6, [r3, #0]
 8017d60:	6962      	ldr	r2, [r4, #20]
 8017d62:	1c43      	adds	r3, r0, #1
 8017d64:	429a      	cmp	r2, r3
 8017d66:	d004      	beq.n	8017d72 <__swbuf_r+0x5a>
 8017d68:	89a3      	ldrh	r3, [r4, #12]
 8017d6a:	07db      	lsls	r3, r3, #31
 8017d6c:	d506      	bpl.n	8017d7c <__swbuf_r+0x64>
 8017d6e:	2e0a      	cmp	r6, #10
 8017d70:	d104      	bne.n	8017d7c <__swbuf_r+0x64>
 8017d72:	4621      	mov	r1, r4
 8017d74:	4628      	mov	r0, r5
 8017d76:	f7ff ff95 	bl	8017ca4 <_fflush_r>
 8017d7a:	b938      	cbnz	r0, 8017d8c <__swbuf_r+0x74>
 8017d7c:	4638      	mov	r0, r7
 8017d7e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8017d80:	4621      	mov	r1, r4
 8017d82:	4628      	mov	r0, r5
 8017d84:	f000 f806 	bl	8017d94 <__swsetup_r>
 8017d88:	2800      	cmp	r0, #0
 8017d8a:	d0d5      	beq.n	8017d38 <__swbuf_r+0x20>
 8017d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8017d90:	e7f4      	b.n	8017d7c <__swbuf_r+0x64>
	...

08017d94 <__swsetup_r>:
 8017d94:	b538      	push	{r3, r4, r5, lr}
 8017d96:	4b2a      	ldr	r3, [pc, #168]	; (8017e40 <__swsetup_r+0xac>)
 8017d98:	4605      	mov	r5, r0
 8017d9a:	6818      	ldr	r0, [r3, #0]
 8017d9c:	460c      	mov	r4, r1
 8017d9e:	b118      	cbz	r0, 8017da8 <__swsetup_r+0x14>
 8017da0:	6a03      	ldr	r3, [r0, #32]
 8017da2:	b90b      	cbnz	r3, 8017da8 <__swsetup_r+0x14>
 8017da4:	f7fe ffee 	bl	8016d84 <__sinit>
 8017da8:	89a3      	ldrh	r3, [r4, #12]
 8017daa:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017dae:	0718      	lsls	r0, r3, #28
 8017db0:	d422      	bmi.n	8017df8 <__swsetup_r+0x64>
 8017db2:	06d9      	lsls	r1, r3, #27
 8017db4:	d407      	bmi.n	8017dc6 <__swsetup_r+0x32>
 8017db6:	2309      	movs	r3, #9
 8017db8:	602b      	str	r3, [r5, #0]
 8017dba:	f042 0340 	orr.w	r3, r2, #64	; 0x40
 8017dbe:	81a3      	strh	r3, [r4, #12]
 8017dc0:	f04f 30ff 	mov.w	r0, #4294967295
 8017dc4:	e034      	b.n	8017e30 <__swsetup_r+0x9c>
 8017dc6:	0758      	lsls	r0, r3, #29
 8017dc8:	d512      	bpl.n	8017df0 <__swsetup_r+0x5c>
 8017dca:	6b61      	ldr	r1, [r4, #52]	; 0x34
 8017dcc:	b141      	cbz	r1, 8017de0 <__swsetup_r+0x4c>
 8017dce:	f104 0344 	add.w	r3, r4, #68	; 0x44
 8017dd2:	4299      	cmp	r1, r3
 8017dd4:	d002      	beq.n	8017ddc <__swsetup_r+0x48>
 8017dd6:	4628      	mov	r0, r5
 8017dd8:	f7ff f9b2 	bl	8017140 <_free_r>
 8017ddc:	2300      	movs	r3, #0
 8017dde:	6363      	str	r3, [r4, #52]	; 0x34
 8017de0:	89a3      	ldrh	r3, [r4, #12]
 8017de2:	f023 0324 	bic.w	r3, r3, #36	; 0x24
 8017de6:	81a3      	strh	r3, [r4, #12]
 8017de8:	2300      	movs	r3, #0
 8017dea:	6063      	str	r3, [r4, #4]
 8017dec:	6923      	ldr	r3, [r4, #16]
 8017dee:	6023      	str	r3, [r4, #0]
 8017df0:	89a3      	ldrh	r3, [r4, #12]
 8017df2:	f043 0308 	orr.w	r3, r3, #8
 8017df6:	81a3      	strh	r3, [r4, #12]
 8017df8:	6923      	ldr	r3, [r4, #16]
 8017dfa:	b94b      	cbnz	r3, 8017e10 <__swsetup_r+0x7c>
 8017dfc:	89a3      	ldrh	r3, [r4, #12]
 8017dfe:	f403 7320 	and.w	r3, r3, #640	; 0x280
 8017e02:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8017e06:	d003      	beq.n	8017e10 <__swsetup_r+0x7c>
 8017e08:	4621      	mov	r1, r4
 8017e0a:	4628      	mov	r0, r5
 8017e0c:	f000 f886 	bl	8017f1c <__smakebuf_r>
 8017e10:	89a0      	ldrh	r0, [r4, #12]
 8017e12:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
 8017e16:	f010 0301 	ands.w	r3, r0, #1
 8017e1a:	d00a      	beq.n	8017e32 <__swsetup_r+0x9e>
 8017e1c:	2300      	movs	r3, #0
 8017e1e:	60a3      	str	r3, [r4, #8]
 8017e20:	6963      	ldr	r3, [r4, #20]
 8017e22:	425b      	negs	r3, r3
 8017e24:	61a3      	str	r3, [r4, #24]
 8017e26:	6923      	ldr	r3, [r4, #16]
 8017e28:	b943      	cbnz	r3, 8017e3c <__swsetup_r+0xa8>
 8017e2a:	f010 0080 	ands.w	r0, r0, #128	; 0x80
 8017e2e:	d1c4      	bne.n	8017dba <__swsetup_r+0x26>
 8017e30:	bd38      	pop	{r3, r4, r5, pc}
 8017e32:	0781      	lsls	r1, r0, #30
 8017e34:	bf58      	it	pl
 8017e36:	6963      	ldrpl	r3, [r4, #20]
 8017e38:	60a3      	str	r3, [r4, #8]
 8017e3a:	e7f4      	b.n	8017e26 <__swsetup_r+0x92>
 8017e3c:	2000      	movs	r0, #0
 8017e3e:	e7f7      	b.n	8017e30 <__swsetup_r+0x9c>
 8017e40:	20000088 	.word	0x20000088

08017e44 <_sbrk_r>:
 8017e44:	b538      	push	{r3, r4, r5, lr}
 8017e46:	4d06      	ldr	r5, [pc, #24]	; (8017e60 <_sbrk_r+0x1c>)
 8017e48:	2300      	movs	r3, #0
 8017e4a:	4604      	mov	r4, r0
 8017e4c:	4608      	mov	r0, r1
 8017e4e:	602b      	str	r3, [r5, #0]
 8017e50:	f7e9 f872 	bl	8000f38 <_sbrk>
 8017e54:	1c43      	adds	r3, r0, #1
 8017e56:	d102      	bne.n	8017e5e <_sbrk_r+0x1a>
 8017e58:	682b      	ldr	r3, [r5, #0]
 8017e5a:	b103      	cbz	r3, 8017e5e <_sbrk_r+0x1a>
 8017e5c:	6023      	str	r3, [r4, #0]
 8017e5e:	bd38      	pop	{r3, r4, r5, pc}
 8017e60:	2000fa90 	.word	0x2000fa90

08017e64 <abort>:
 8017e64:	b508      	push	{r3, lr}
 8017e66:	2006      	movs	r0, #6
 8017e68:	f000 f8bc 	bl	8017fe4 <raise>
 8017e6c:	2001      	movs	r0, #1
 8017e6e:	f7e8 ffeb 	bl	8000e48 <_exit>

08017e72 <_realloc_r>:
 8017e72:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8017e76:	4680      	mov	r8, r0
 8017e78:	4614      	mov	r4, r2
 8017e7a:	460e      	mov	r6, r1
 8017e7c:	b921      	cbnz	r1, 8017e88 <_realloc_r+0x16>
 8017e7e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8017e82:	4611      	mov	r1, r2
 8017e84:	f7ff b9d0 	b.w	8017228 <_malloc_r>
 8017e88:	b92a      	cbnz	r2, 8017e96 <_realloc_r+0x24>
 8017e8a:	f7ff f959 	bl	8017140 <_free_r>
 8017e8e:	4625      	mov	r5, r4
 8017e90:	4628      	mov	r0, r5
 8017e92:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8017e96:	f000 f8e3 	bl	8018060 <_malloc_usable_size_r>
 8017e9a:	4284      	cmp	r4, r0
 8017e9c:	4607      	mov	r7, r0
 8017e9e:	d802      	bhi.n	8017ea6 <_realloc_r+0x34>
 8017ea0:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8017ea4:	d812      	bhi.n	8017ecc <_realloc_r+0x5a>
 8017ea6:	4621      	mov	r1, r4
 8017ea8:	4640      	mov	r0, r8
 8017eaa:	f7ff f9bd 	bl	8017228 <_malloc_r>
 8017eae:	4605      	mov	r5, r0
 8017eb0:	2800      	cmp	r0, #0
 8017eb2:	d0ed      	beq.n	8017e90 <_realloc_r+0x1e>
 8017eb4:	42bc      	cmp	r4, r7
 8017eb6:	4622      	mov	r2, r4
 8017eb8:	4631      	mov	r1, r6
 8017eba:	bf28      	it	cs
 8017ebc:	463a      	movcs	r2, r7
 8017ebe:	f7ff f913 	bl	80170e8 <memcpy>
 8017ec2:	4631      	mov	r1, r6
 8017ec4:	4640      	mov	r0, r8
 8017ec6:	f7ff f93b 	bl	8017140 <_free_r>
 8017eca:	e7e1      	b.n	8017e90 <_realloc_r+0x1e>
 8017ecc:	4635      	mov	r5, r6
 8017ece:	e7df      	b.n	8017e90 <_realloc_r+0x1e>

08017ed0 <__swhatbuf_r>:
 8017ed0:	b570      	push	{r4, r5, r6, lr}
 8017ed2:	460c      	mov	r4, r1
 8017ed4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8017ed8:	2900      	cmp	r1, #0
 8017eda:	b096      	sub	sp, #88	; 0x58
 8017edc:	4615      	mov	r5, r2
 8017ede:	461e      	mov	r6, r3
 8017ee0:	da0d      	bge.n	8017efe <__swhatbuf_r+0x2e>
 8017ee2:	89a3      	ldrh	r3, [r4, #12]
 8017ee4:	f013 0f80 	tst.w	r3, #128	; 0x80
 8017ee8:	f04f 0100 	mov.w	r1, #0
 8017eec:	bf0c      	ite	eq
 8017eee:	f44f 6380 	moveq.w	r3, #1024	; 0x400
 8017ef2:	2340      	movne	r3, #64	; 0x40
 8017ef4:	2000      	movs	r0, #0
 8017ef6:	6031      	str	r1, [r6, #0]
 8017ef8:	602b      	str	r3, [r5, #0]
 8017efa:	b016      	add	sp, #88	; 0x58
 8017efc:	bd70      	pop	{r4, r5, r6, pc}
 8017efe:	466a      	mov	r2, sp
 8017f00:	f000 f878 	bl	8017ff4 <_fstat_r>
 8017f04:	2800      	cmp	r0, #0
 8017f06:	dbec      	blt.n	8017ee2 <__swhatbuf_r+0x12>
 8017f08:	9901      	ldr	r1, [sp, #4]
 8017f0a:	f401 4170 	and.w	r1, r1, #61440	; 0xf000
 8017f0e:	f5a1 5300 	sub.w	r3, r1, #8192	; 0x2000
 8017f12:	4259      	negs	r1, r3
 8017f14:	4159      	adcs	r1, r3
 8017f16:	f44f 6380 	mov.w	r3, #1024	; 0x400
 8017f1a:	e7eb      	b.n	8017ef4 <__swhatbuf_r+0x24>

08017f1c <__smakebuf_r>:
 8017f1c:	898b      	ldrh	r3, [r1, #12]
 8017f1e:	b573      	push	{r0, r1, r4, r5, r6, lr}
 8017f20:	079d      	lsls	r5, r3, #30
 8017f22:	4606      	mov	r6, r0
 8017f24:	460c      	mov	r4, r1
 8017f26:	d507      	bpl.n	8017f38 <__smakebuf_r+0x1c>
 8017f28:	f104 0347 	add.w	r3, r4, #71	; 0x47
 8017f2c:	6023      	str	r3, [r4, #0]
 8017f2e:	6123      	str	r3, [r4, #16]
 8017f30:	2301      	movs	r3, #1
 8017f32:	6163      	str	r3, [r4, #20]
 8017f34:	b002      	add	sp, #8
 8017f36:	bd70      	pop	{r4, r5, r6, pc}
 8017f38:	ab01      	add	r3, sp, #4
 8017f3a:	466a      	mov	r2, sp
 8017f3c:	f7ff ffc8 	bl	8017ed0 <__swhatbuf_r>
 8017f40:	9900      	ldr	r1, [sp, #0]
 8017f42:	4605      	mov	r5, r0
 8017f44:	4630      	mov	r0, r6
 8017f46:	f7ff f96f 	bl	8017228 <_malloc_r>
 8017f4a:	b948      	cbnz	r0, 8017f60 <__smakebuf_r+0x44>
 8017f4c:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8017f50:	059a      	lsls	r2, r3, #22
 8017f52:	d4ef      	bmi.n	8017f34 <__smakebuf_r+0x18>
 8017f54:	f023 0303 	bic.w	r3, r3, #3
 8017f58:	f043 0302 	orr.w	r3, r3, #2
 8017f5c:	81a3      	strh	r3, [r4, #12]
 8017f5e:	e7e3      	b.n	8017f28 <__smakebuf_r+0xc>
 8017f60:	89a3      	ldrh	r3, [r4, #12]
 8017f62:	6020      	str	r0, [r4, #0]
 8017f64:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8017f68:	81a3      	strh	r3, [r4, #12]
 8017f6a:	9b00      	ldr	r3, [sp, #0]
 8017f6c:	6163      	str	r3, [r4, #20]
 8017f6e:	9b01      	ldr	r3, [sp, #4]
 8017f70:	6120      	str	r0, [r4, #16]
 8017f72:	b15b      	cbz	r3, 8017f8c <__smakebuf_r+0x70>
 8017f74:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8017f78:	4630      	mov	r0, r6
 8017f7a:	f000 f84d 	bl	8018018 <_isatty_r>
 8017f7e:	b128      	cbz	r0, 8017f8c <__smakebuf_r+0x70>
 8017f80:	89a3      	ldrh	r3, [r4, #12]
 8017f82:	f023 0303 	bic.w	r3, r3, #3
 8017f86:	f043 0301 	orr.w	r3, r3, #1
 8017f8a:	81a3      	strh	r3, [r4, #12]
 8017f8c:	89a3      	ldrh	r3, [r4, #12]
 8017f8e:	431d      	orrs	r5, r3
 8017f90:	81a5      	strh	r5, [r4, #12]
 8017f92:	e7cf      	b.n	8017f34 <__smakebuf_r+0x18>

08017f94 <_raise_r>:
 8017f94:	291f      	cmp	r1, #31
 8017f96:	b538      	push	{r3, r4, r5, lr}
 8017f98:	4604      	mov	r4, r0
 8017f9a:	460d      	mov	r5, r1
 8017f9c:	d904      	bls.n	8017fa8 <_raise_r+0x14>
 8017f9e:	2316      	movs	r3, #22
 8017fa0:	6003      	str	r3, [r0, #0]
 8017fa2:	f04f 30ff 	mov.w	r0, #4294967295
 8017fa6:	bd38      	pop	{r3, r4, r5, pc}
 8017fa8:	6bc2      	ldr	r2, [r0, #60]	; 0x3c
 8017faa:	b112      	cbz	r2, 8017fb2 <_raise_r+0x1e>
 8017fac:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8017fb0:	b94b      	cbnz	r3, 8017fc6 <_raise_r+0x32>
 8017fb2:	4620      	mov	r0, r4
 8017fb4:	f000 f852 	bl	801805c <_getpid_r>
 8017fb8:	462a      	mov	r2, r5
 8017fba:	4601      	mov	r1, r0
 8017fbc:	4620      	mov	r0, r4
 8017fbe:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8017fc2:	f000 b839 	b.w	8018038 <_kill_r>
 8017fc6:	2b01      	cmp	r3, #1
 8017fc8:	d00a      	beq.n	8017fe0 <_raise_r+0x4c>
 8017fca:	1c59      	adds	r1, r3, #1
 8017fcc:	d103      	bne.n	8017fd6 <_raise_r+0x42>
 8017fce:	2316      	movs	r3, #22
 8017fd0:	6003      	str	r3, [r0, #0]
 8017fd2:	2001      	movs	r0, #1
 8017fd4:	e7e7      	b.n	8017fa6 <_raise_r+0x12>
 8017fd6:	2400      	movs	r4, #0
 8017fd8:	f842 4025 	str.w	r4, [r2, r5, lsl #2]
 8017fdc:	4628      	mov	r0, r5
 8017fde:	4798      	blx	r3
 8017fe0:	2000      	movs	r0, #0
 8017fe2:	e7e0      	b.n	8017fa6 <_raise_r+0x12>

08017fe4 <raise>:
 8017fe4:	4b02      	ldr	r3, [pc, #8]	; (8017ff0 <raise+0xc>)
 8017fe6:	4601      	mov	r1, r0
 8017fe8:	6818      	ldr	r0, [r3, #0]
 8017fea:	f7ff bfd3 	b.w	8017f94 <_raise_r>
 8017fee:	bf00      	nop
 8017ff0:	20000088 	.word	0x20000088

08017ff4 <_fstat_r>:
 8017ff4:	b538      	push	{r3, r4, r5, lr}
 8017ff6:	4d07      	ldr	r5, [pc, #28]	; (8018014 <_fstat_r+0x20>)
 8017ff8:	2300      	movs	r3, #0
 8017ffa:	4604      	mov	r4, r0
 8017ffc:	4608      	mov	r0, r1
 8017ffe:	4611      	mov	r1, r2
 8018000:	602b      	str	r3, [r5, #0]
 8018002:	f7e8 ff70 	bl	8000ee6 <_fstat>
 8018006:	1c43      	adds	r3, r0, #1
 8018008:	d102      	bne.n	8018010 <_fstat_r+0x1c>
 801800a:	682b      	ldr	r3, [r5, #0]
 801800c:	b103      	cbz	r3, 8018010 <_fstat_r+0x1c>
 801800e:	6023      	str	r3, [r4, #0]
 8018010:	bd38      	pop	{r3, r4, r5, pc}
 8018012:	bf00      	nop
 8018014:	2000fa90 	.word	0x2000fa90

08018018 <_isatty_r>:
 8018018:	b538      	push	{r3, r4, r5, lr}
 801801a:	4d06      	ldr	r5, [pc, #24]	; (8018034 <_isatty_r+0x1c>)
 801801c:	2300      	movs	r3, #0
 801801e:	4604      	mov	r4, r0
 8018020:	4608      	mov	r0, r1
 8018022:	602b      	str	r3, [r5, #0]
 8018024:	f7e8 ff6f 	bl	8000f06 <_isatty>
 8018028:	1c43      	adds	r3, r0, #1
 801802a:	d102      	bne.n	8018032 <_isatty_r+0x1a>
 801802c:	682b      	ldr	r3, [r5, #0]
 801802e:	b103      	cbz	r3, 8018032 <_isatty_r+0x1a>
 8018030:	6023      	str	r3, [r4, #0]
 8018032:	bd38      	pop	{r3, r4, r5, pc}
 8018034:	2000fa90 	.word	0x2000fa90

08018038 <_kill_r>:
 8018038:	b538      	push	{r3, r4, r5, lr}
 801803a:	4d07      	ldr	r5, [pc, #28]	; (8018058 <_kill_r+0x20>)
 801803c:	2300      	movs	r3, #0
 801803e:	4604      	mov	r4, r0
 8018040:	4608      	mov	r0, r1
 8018042:	4611      	mov	r1, r2
 8018044:	602b      	str	r3, [r5, #0]
 8018046:	f7e8 feed 	bl	8000e24 <_kill>
 801804a:	1c43      	adds	r3, r0, #1
 801804c:	d102      	bne.n	8018054 <_kill_r+0x1c>
 801804e:	682b      	ldr	r3, [r5, #0]
 8018050:	b103      	cbz	r3, 8018054 <_kill_r+0x1c>
 8018052:	6023      	str	r3, [r4, #0]
 8018054:	bd38      	pop	{r3, r4, r5, pc}
 8018056:	bf00      	nop
 8018058:	2000fa90 	.word	0x2000fa90

0801805c <_getpid_r>:
 801805c:	f7e8 beda 	b.w	8000e14 <_getpid>

08018060 <_malloc_usable_size_r>:
 8018060:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8018064:	1f18      	subs	r0, r3, #4
 8018066:	2b00      	cmp	r3, #0
 8018068:	bfbc      	itt	lt
 801806a:	580b      	ldrlt	r3, [r1, r0]
 801806c:	18c0      	addlt	r0, r0, r3
 801806e:	4770      	bx	lr

08018070 <_init>:
 8018070:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8018072:	bf00      	nop
 8018074:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018076:	bc08      	pop	{r3}
 8018078:	469e      	mov	lr, r3
 801807a:	4770      	bx	lr

0801807c <_fini>:
 801807c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801807e:	bf00      	nop
 8018080:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8018082:	bc08      	pop	{r3}
 8018084:	469e      	mov	lr, r3
 8018086:	4770      	bx	lr
